(data (i32.const 8192) "\00Assertion failed: %s (%s: %s: %d)\n\00-+   0X0x\00")
(data (i32.const 8240) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\ff\ff\ff\ff\ff\ff\ff\t\n\0b\0c\0d\0e\0f\10\ff\11\12\13\14\15\ff\16\17\18\19\1a\1b\1c\1d\1e\1f \ff\ff\ff\ff\ff\ff!\"#$%&\'()*+\ff,-./0123456789\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 8496) "carry == 0\00(null)\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8600) "lotteryshare.cpp\00")
(data (i32.const 8617) "DecodeBase58\00")
(data (i32.const 8630) "EOS\00-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 8653) "Decode public key failed\00inf\00")
(data (i32.const 8682) "Invalid public key\00INF\00")
(data (i32.const 8705) "Public key checksum mismatch\00nan\00")
(data (i32.const 8738) "ontransfer\00NAN\00")
(data (i32.const 8753) "onshare\00.\00")
(data (i32.const 8763) "onissue\00")
(data (i32.const 8771) "eosio.token\00")
(data (i32.const 8783) "transfer\00")
(data (i32.const 8792) "share\00")
(data (i32.const 8798) "issue\00")
(data (i32.const 8804) "withdraw\00")
(data (i32.const 8813) "string is too long to be a valid name\00")
(data (i32.const 8851) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8918) "character is not in allowed character set for names\00")
(data (i32.const 8970) "daily\00")
(data (i32.const 8976) "\e6\af\8f\e6\97\a5\e5\88\86\e7\ba\a2\00")
(data (i32.const 8989) "weekly\00")
(data (i32.const 8996) "\e6\af\8f\e5\91\a8\e5\88\86\e7\ba\a2\00")
(data (i32.const 9009) "unable to find key\00")
(data (i32.const 9028) "error reading iterator\00")
(data (i32.const 9051) "read\00")
(data (i32.const 9056) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9107) "multiplication overflow\00")
(data (i32.const 9131) "multiplication underflow\00")
(data (i32.const 9156) "divide by zero\00")
(data (i32.const 9171) "signed division overflow\00")
(data (i32.const 9196) "write\00")
(data (i32.const 9202) "get\00")
(data (i32.const 9206) "cannot increment end iterator\00")
(data (i32.const 9236) "cannot pass end iterator to modify\00")
(data (i32.const 9271) "object passed to modify is not in multi_index\00")
(data (i32.const 9317) "cannot modify objects in table of another contract\00")
(data (i32.const 9368) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9427) "cannot create objects in table of another contract\00")
(data (i32.const 9478) "string is too long to be a valid symbol_code\00")
(data (i32.const 9523) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9576) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9625) "invalid symbol name\00")
(data (i32.const 9645) "attempt to add asset with different symbol\00")
(data (i32.const 9688) "addition underflow\00")
(data (i32.const 9707) "addition overflow\00")
(data (i32.const 9725) "cannot pass end iterator to erase\00")
(data (i32.const 9759) "object passed to erase is not in multi_index\00")
(data (i32.const 9804) "cannot erase objects in table of another contract\00")
(data (i32.const 9854) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9907) "\e5\b7\b2\e5\88\a0\e9\99\a4\ef\bc\9a\00")
(data (i32.const 9920) "invalid supply\00")
(data (i32.const 9935) "max-supply must be positive\00")
(data (i32.const 9963) "token with symbol already exists\00")
(data (i32.const 9996) "memo has more than 256 bytes\00")
(data (i32.const 10025) "token with symbol does not exist, create token before issue\00")
(data (i32.const 10085) "invalid quantity\00")
(data (i32.const 10102) "must issue positive quantity\00")
(data (i32.const 10131) "symbol precision mismatch\00")
(data (i32.const 10157) "quantity exceeds available supply\00")
(data (i32.const 10191) "token with symbol does not exist\00")
(data (i32.const 10224) "must retire positive quantity\00")
(data (i32.const 10254) "attempt to subtract asset with different symbol\00")
(data (i32.const 10302) "subtraction underflow\00")
(data (i32.const 10324) "subtraction overflow\00")
(data (i32.const 10345) "no balance object found\00")
(data (i32.const 10369) "overdrawn balance\00")
(data (i32.const 10387) "cannot transfer to self\00")
(data (i32.const 10411) "to account does not exist\00")
(data (i32.const 10437) "must transfer positive quantity\00")
(data (i32.const 10469) "symbol does not exist\00")
(data (i32.const 10491) "Balance row already deleted or never existed. Action won\'t have any effect.\00")
(data (i32.const 10567) "Cannot close because the balance is not zero.\00")
(data (i32.const 10613) "Only accepts CORE_SYMBOL\00")
(data (i32.const 10638) "Invalid token transfer.\00")
(data (i32.const 19104) "\05\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\11\00\00\00\cc)\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 19248) "\a0J\00\00")
(data (i32.const 19264) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 19360) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 21168) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 21632) "0123456789ABCDEF")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "ripemd160" (func $fimport$4 (param i32 i32 i32)))
(import "env" "action_data_size" (func $fimport$5 (result i32)))
(import "env" "read_action_data" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$7 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "multi3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "send_inline" (func $fimport$10 (param i32 i32)))
(import "env" "db_next_i64" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "prints" (func $fimport$13 (param i32)))
(import "env" "printn" (func $fimport$14 (param i64)))
(import "env" "is_account" (func $fimport$15 (param i64) (result i32)))
(import "env" "require_recipient" (func $fimport$16 (param i64)))
(import "env" "has_auth" (func $fimport$17 (param i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$19 (result i64)))
(import "env" "db_update_i64" (func $fimport$20 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$21 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$22 (param i32)))
(import "env" "abort" (func $fimport$23))
(import "env" "prints_l" (func $fimport$24 (param i32 i32)))
(import "env" "unordtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "eqtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "multf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "addtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "subtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "netf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "fixunstfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "floatunsitf" (func $fimport$32 (param i32 i32)))
(import "env" "fixtfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "floatsitf" (func $fimport$34 (param i32 i32)))
(import "env" "extenddftf2" (func $fimport$35 (param i32 f64)))
(import "env" "extendsftf2" (func $fimport$36 (param i32 f32)))
(import "env" "divtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "letf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "trunctfdf2" (func $fimport$39 (param i64 i64) (result f64)))
(import "env" "getf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "trunctfsf2" (func $fimport$41 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$42 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$43 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "heap_base" (global $global$1))
(export "data_end" (global $global$2))
(export "apply" (func $8))
(export "_Znwj" (func $98))
(export "_ZdlPv" (func $100))
(export "_Znaj" (func $99))
(export "_ZdaPv" (func $101))
(export "_ZnwjSt11align_val_t" (func $102))
(export "_ZnajSt11align_val_t" (func $103))
(export "_ZdlPvSt11align_val_t" (func $104))
(export "_ZdaPvSt11align_val_t" (func $105))
(table $0 18 18 anyfunc)
(elem (i32.const 1) $9 $11 $13 $15 $17 $18 $20 $22 $24 $26 $28 $29 $30 $31 $128 $129 $130)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 21648))
(global $global$2 i32 (i32.const 21648))


int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1	 = ( $0 ? [1] : $0 )
	$0	 = CALL $153($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2	 = *([0] + [10664])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0	 = CALL $153($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

.data 9056 -> ["object passed to iterator_to is not in multi_index\00"]
int_32 .FUNC $94 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4	 = *(($0 + [28]))
	$3	 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5	 = ($4 + [-24])
	$6	 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9056])     # .data 9056 -> ["object passed to iterator_to is not in multi_index"]
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4	 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5	 = CALL $40($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9056])     # .data 9056 -> ["object passed to iterator_to is not in multi_index"]
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

.data 9196 -> ["write\00"]
.data 9368 -> ["updater cannot change primary key when modifying an object\00"]
.data 10324 -> ["subtraction overflow\00"]
.data 10302 -> ["subtraction underflow\00"]
.data 10254 -> ["attempt to subtract asset with different symbol\00"]
.data 9317 -> ["cannot modify objects in table of another contract\00"]
.data 9271 -> ["object passed to modify is not in multi_index\00"]
void .FUNC $95 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4	 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9271])     # .data 9271 -> ["object passed to modify is not in multi_index"]
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert9()), [9317])     # .data 9317 -> ["cannot modify objects in table of another contract"]
	$5	 = *($1 + [8])
	$3	 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [10254])     # .data 10254 -> ["attempt to subtract asset with different symbol"]
	$6	 = (int_64)
	*($1) = $6(*($1) - *($3)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10302])     # .data 10302 -> ["subtraction underflow"]
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [10324])     # .data 10324 -> ["subtraction overflow"]
	$5	 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [9368])     # .data 9368 -> ["updater cannot change primary key when modifying an object"]
	CALL eosio_assert([1], [9196])     # .data 9196 -> ["write"]
	CALL memcpy($4, $1, [8])
	*($4 + [24]) = *($1 + [8])
	CALL eosio_assert([1], [9196])     # .data 9196 -> ["write"]
	CALL memcpy(($4 | [8]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

.data 9196 -> ["write\00"]
.data 9625 -> ["invalid symbol name\00"]
.data 9576 -> ["magnitude of asset amount must be less than 2^62\00"]
void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2	 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*(*($0 + [4])))
	CALL eosio_assert([1], [9576])     # .data 9576 -> ["magnitude of asset amount must be less than 2^62"]
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$9 = [1]
	$10	 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10	 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [9625])     # .data 9625 -> ["invalid symbol name"]
	*($1 + [8]) = $5
	*($1) = (int_64)0
	$9	 = $2
	$7	 = ($9 + [-16])
	$global$0 = $7
	CALL eosio_assert([1], [9196])     # .data 9196 -> ["write"]
	CALL memcpy($7, $1, [8])
	*($3 + [8]) = *($1 + [8])
	CALL eosio_assert([1], [9196])     # .data 9196 -> ["write"]
	CALL memcpy(($9 + [-8]), ($3 + [8]), [8])
	$6	 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($1 + [20]) = CALL db_store_i64(*($4 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $6), $7, [16])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC $97 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_64 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$8	 = ($global$0 - [80])
	$global$0 = $8
	$0	 = *($0 + [4])
	$9	 = *($0 + [4])
	$10 = (*($0) + int_32($9 >> [1]))
	$11 = *($0)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$11 = *((*($10) + $11))
	
.LABEL $label$1
	*(($9 = (($8 + [64]) + [8]))) = *(($2 + [8]))
	*($8 + [64]) = *($2)
	$2 = CALL $107(($8 + [48]), $4)
	$0 = CALL $107(($8 + [32]), $6)
	$4 = CALL $107(($8 + [16]), $7)
	*(($8 + [8])) = *($9)
	*($8) = *($8 + [64])
	CALL void $10((int_32 $1), (int_64 $8), (int_32 $3), (int_64 $2), (int_32 $5), (int_64 $0), (int_32 $4), (int_32 $11))
	if ( (*($4) & [1]) ){ goto $label$6 }
	if ( (*($0) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($0) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($0 + [8]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($2) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($8 + [80])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*($2 + [8]))
	$global$0 = ($8 + [80])
}

.data 9196 -> ["write\00"]
void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4	 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($4 + [4]), $3, [8])
	$5	 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4	 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($4 + [4]), $3, [8])
	$5	 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4	 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

.data 9196 -> ["write\00"]
.data 9368 -> ["updater cannot change primary key when modifying an object\00"]
.data 9707 -> ["addition overflow\00"]
.data 9688 -> ["addition underflow\00"]
.data 9645 -> ["attempt to add asset with different symbol\00"]
.data 9317 -> ["cannot modify objects in table of another contract\00"]
.data 9271 -> ["object passed to modify is not in multi_index\00"]
void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4	 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9271])     # .data 9271 -> ["object passed to modify is not in multi_index"]
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert9()), [9317])     # .data 9317 -> ["cannot modify objects in table of another contract"]
	$5	 = *($1 + [8])
	$3	 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [9645])     # .data 9645 -> ["attempt to add asset with different symbol"]
	$6	 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9688])     # .data 9688 -> ["addition underflow"]
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9707])     # .data 9707 -> ["addition overflow"]
	$5	 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [9368])     # .data 9368 -> ["updater cannot change primary key when modifying an object"]
	CALL eosio_assert([1], [9196])     # .data 9196 -> ["write"]
	CALL memcpy($4, $1, [8])
	*($4 + [24]) = *($1 + [8])
	CALL eosio_assert([1], [9196])     # .data 9196 -> ["write"]
	CALL memcpy(($4 | [8]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

.data 9427 -> ["cannot create objects in table of another contract\00"]
void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4	 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert9()), [9427])     # .data 9427 -> ["cannot create objects in table of another contract"]
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3	 = CALL _Znwj([32])
	CALL $93($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2	 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($4 + [16]) = $2)
	$5	 = *($3 + [20])
	*($4 + [12]) = $5
	$6	 = ($1 + [28])
	$7	 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $76(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

.data 9196 -> ["write\00"]
int_32 .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3	 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	$1 = *($2)
	$4	 = *(*($2 + [4]))
	*($0) = *($4)
	*($0 + [8]) = *(($4 + [8]))
	CALL eosio_assert([1], [9196])     # .data 9196 -> ["write"]
	CALL memcpy($3, $0, [8])
	*($3 + [24]) = *($0 + [8])
	CALL eosio_assert([1], [9196])     # .data 9196 -> ["write"]
	CALL memcpy(($3 | [8]), ($3 + [24]), [8])
	$5	 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)3607749779137757184, *(*($2 + [8])), $5), $3, [16])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [32])
	return $0
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	return CALL $137($0, $1)
}

void .FUNC $123 (int_32 $0)
{
}

int_32 .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5	 = *($0)
	$6	 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5	 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6	 = ((uint_32)$2 > (uint_32)$4)
	$5	 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6	 = ((uint_32)$2 > (uint_32)$4)
	$5	 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1	 = CALL $145(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $122 (int_32 $0)
{
	int_32 $1
	return $1
}

int_64 .FUNC $130 (int_32 $0, int_64 $1, int_32 $2)
{
	return (int_64)-1
}

int_32 .FUNC $131 (int_32 $0)
{
	int_32 $1
	$1	 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	$1	 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1	 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $132 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	$3	 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$4 }
	$4	 = *($2 + [20])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	if ( CALL $131($2) ){ goto $label$2 }
	$4	 = *($2 + [20])
	if ( ((*(($2 + [16])) - $4) <= $1) ){ goto $label$1 }
	
.LABEL $label$3
	$6 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$5 }
	$6 = [0]
	$5 = $0
	$3 = [0]
	
.LOOP $label$6:
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$5 }
	$3 = ($3 + [1])
	$7 = ($5 + $1)
	$8	 = ($5 + [-1])
	$5 = $8
	if ( ((int_32)*(($7 + [-1])) != (int_32)[10]) ){ goto $label$6 }
	$6	 = (($1 - $3) + [1])
	$5	 = CALL int_32 $2((int_32 $0), (int_32 $6), (int_32 *($2 + [36])))
	if ( ($5 <= $6) ){ goto $label$2 }
	$0 = (($8 + $1) + [1])
	$4 = *(($2 + [20]))
	$1 = ($3 + [-1])
	
.LABEL $label$5
	CALL memcpy($4, $0, $1)
	*(($3 = ($2 + [20]))) = (*($3) + $1)
	$5 = ($6 + $1)
	
.LABEL $label$2
	return $5
	return .LABEL $label$1
}

int_32 .FUNC $133 (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

int_32 .FUNC $134 (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3	 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [2] ? [3] : (int_64)(((int_64)$2 | (int_64)$0) == 0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

void .FUNC $121 (int_32 $0)
{
}

int_32 .FUNC $136 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL $135($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	return $0
}

.data 19248 -> ["\a0J\00\00"]
void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4	 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $2
	*($4 + [8]) = $3
	*($4 + [4]) = $1
	*($4) = $0
	CALL $125(*([0] + [19248]), [8193], $4)     # .data 19248 -> ["\a0J"]
	CALL $124([0])
	CALL abort()
	(unreachable)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5	 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7	 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9	 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7	 = *($4 + [32])
	$1	 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2	 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $66($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $70(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

int_32 .FUNC $126 ()
{
	CALL $149([10680])
	return [10688]
}

.data 9028 -> ["error reading iterator\00"]
int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2	 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5	 = *(($0 + [28]))
	$4	 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5	 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4	 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9028])     # .data 9028 -> ["error reading iterator"]
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $153($4)
	goto $label$4 
	
.LABEL $label$5
	$2	 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [64]) = $0
	*($5) = (int_64)0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [48])
	*($3 + [44]) = ($5 + [56])
	CALL $86(($3 + [32]), ($3 + [24]))
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6	 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7	 = ($0 + [28])
	$8	 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $87(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $156($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

.data 9854 -> ["attempt to remove object that was not in multi_index\00"]
.data 9804 -> ["cannot erase objects in table of another contract\00"]
.data 9759 -> ["object passed to erase is not in multi_index\00"]
void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9759])     # .data 9759 -> ["object passed to erase is not in multi_index"]
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert9()), [9804])     # .data 9804 -> ["cannot erase objects in table of another contract"]
	$2	 = *($0 + [24])
	$3 = $2
	$4	 = ($0 + [28])
	$5	 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6	 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3	 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9854])     # .data 9854 -> ["attempt to remove object that was not in multi_index"]
	$2	 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7	 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5	 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3	 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3	 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

int_32 .FUNC $125 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3	 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	$2 = CALL $141($0, $1, $2)
	$global$0 = ($3 + [16])
	return $2
}

.data 9051 -> ["read\00"]
void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4	 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4	 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4	 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3	 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $33(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

.data 9368 -> ["updater cannot change primary key when modifying an object\00"]
.data 9317 -> ["cannot modify objects in table of another contract\00"]
.data 9271 -> ["object passed to modify is not in multi_index\00"]
void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4	 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9271])     # .data 9271 -> ["object passed to modify is not in multi_index"]
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert9()), [9317])     # .data 9317 -> ["cannot modify objects in table of another contract"]
	*($1) = (int_64)0
	$5 = *($1 + [8])
	CALL eosio_assert([1], [9368])     # .data 9368 -> ["updater cannot change primary key when modifying an object"]
	*($4 + [40]) = ($4 + [32])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	*($4 + [48]) = ($4 + [32])
	*($4 + [60]) = ($1 + [16])
	*($4 + [56]) = $1
	CALL $82(($4 + [56]), ($4 + [48]))
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	$2	 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( (uint_64)($2) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

.data 9368 -> ["updater cannot change primary key when modifying an object\00"]
.data 9317 -> ["cannot modify objects in table of another contract\00"]
.data 9271 -> ["object passed to modify is not in multi_index\00"]
void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4	 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9271])     # .data 9271 -> ["object passed to modify is not in multi_index"]
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert9()), [9317])     # .data 9317 -> ["cannot modify objects in table of another contract"]
	*($1 + [16]) = (int_64)0
	$5 = *($1 + [8])
	CALL eosio_assert([1], [9368])     # .data 9368 -> ["updater cannot change primary key when modifying an object"]
	*($4 + [40]) = ($4 + [32])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	*($4 + [48]) = ($4 + [32])
	*($4 + [60]) = ($1 + [16])
	*($4 + [56]) = $1
	CALL $82(($4 + [56]), ($4 + [48]))
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	$2	 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( (uint_64)($2) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

.data 9051 -> ["read\00"]
.data 9028 -> ["error reading iterator\00"]
int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2	 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5	 = *(($0 + [28]))
	$4	 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5	 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4	 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9028])     # .data 9028 -> ["error reading iterator"]
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $153($4)
	goto $label$4 
	
.LABEL $label$5
	$2	 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6	 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6	 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7	 = ($0 + [28])
	$8	 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $76(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $156($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

.data 9196 -> ["write\00"]
.data 9427 -> ["cannot create objects in table of another contract\00"]
void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4	 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert9()), [9427])     # .data 9427 -> ["cannot create objects in table of another contract"]
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = (int_64)0
	*($5) = *(*($3))
	CALL eosio_assert([1], [9196])     # .data 9196 -> ["write"]
	CALL memcpy(($4 + [16]), $5, [8])
	$6	 = *($5)
	$7	 = CALL db_store_i64(*($1 + [8]), (int_64)8428113309303046144, $2, $6, ($4 + [16]), [8])
	*($5 + [12]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [8]) = $5
	$6	 = *($5)
	*($4 + [16]) = $6
	*($4 + [4]) = $7
	$8	 = ($1 + [28])
	$3	 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [8]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $75(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

.data 9427 -> ["cannot create objects in table of another contract\00"]
void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4	 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert9()), [9427])     # .data 9427 -> ["cannot create objects in table of another contract"]
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $1
	CALL $83($3, $5)
	*($4 + [40]) = ($4 + [32])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	*($4 + [48]) = ($4 + [32])
	*($4 + [60]) = ($5 + [16])
	*($4 + [56]) = $5
	CALL $82(($4 + [56]), ($4 + [48]))
	$6	 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	$7	 = CALL db_store_i64(*($1 + [8]), (int_64)-5915276457541632000, $2, $6), $4, [32]
	*($5 + [36]) = $7)
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$1
	*($4 + [32]) = $5
	$6	 = (uint_64)*(($5 + [8])) >> (uint_64)(int_64)8
	*($4) = $6)
	*($4 + [56]) = $7
	$8	 = ($1 + [28])
	$3	 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [32]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $72(($1 + [24]), ($4 + [32]), $4, ($4 + [56]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [64])
}

.data 9368 -> ["updater cannot change primary key when modifying an object\00"]
.data 9317 -> ["cannot modify objects in table of another contract\00"]
.data 9271 -> ["object passed to modify is not in multi_index\00"]
void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4	 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9271])     # .data 9271 -> ["object passed to modify is not in multi_index"]
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert9()), [9317])     # .data 9317 -> ["cannot modify objects in table of another contract"]
	$5 = *($1 + [8])
	CALL $84($3, $1)
	$5	 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [9368])     # .data 9368 -> ["updater cannot change primary key when modifying an object"]
	*($4 + [40]) = ($4 + [32])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	*($4 + [48]) = ($4 + [32])
	*($4 + [60]) = ($1 + [16])
	*($4 + [56]) = $1
	CALL $82(($4 + [56]), ($4 + [48]))
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2	 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $107(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0	 = *($0 + [4])
	$6	 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $107(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $124 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$5 }
	$1 = CALL $122($0)
	
.LABEL $label$5
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$6 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( (*(($0 + [20])) == 0) ){ goto $label$3 }
	
.LABEL $label$6
	$3	 = *($0 + [8])
	$2	 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$7 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($2 - $3))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$7
	*($0 + [16]) = (int_64)0
	$2 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	if ( (*([0] + [10676]) == 0) ){ goto $label$8 }
	$4 = CALL $124(*([0] + [10676]))
	
.LABEL $label$8
	$0	 = *(CALL $126())
	if ( ($0 == 0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$11 }
	$1 = CALL $122($0)
	
.LABEL $label$11
	$3	 = *($0 + [28])
	$2	 = *($0 + [20])
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$12 }
	$5 = [0]
	if ( ((int_32)*(($0 + [76])) < (int_32)[0]) ){ goto $label$13 }
	$5 = CALL $122($0)
	$3 = *(($0 + [28]))
	$2 = *(($0 + [20]))
	
.LABEL $label$13
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$16 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( *(($0 + [20])) ){ goto $label$16 }
	$2 = [-1]
	if ( $5 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$3	 = *($0 + [8])
	$2	 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$17 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($2 - $3))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$17
	*($0 + [16]) = (int_64)0
	$2 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($5 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL $123($0)
	
.LABEL $label$14
	$4 = ($2 | $4)
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$18 }
	CALL $123($0)
	
.LABEL $label$18
	$0	 = *($0 + [56])
	if ( $0 ){ goto $label$10 }
	
.LABEL $label$9
	CALL $127()
	return $4
	
.LABEL $label$3
	$2 = [-1]
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $123($0)
	
.LABEL $label$1
	return $2
}

int_32 .FUNC $128 (int_32 $0)
{
	return [0]
}

.data 8804 -> ["withdraw\00"]
.data 8798 -> ["issue\00"]
.data 8792 -> ["share\00"]
.data 8783 -> ["transfer\00"]
.data 8771 -> ["eosio.token\00"]
.data 8763 -> ["onissue\00"]
.data 8753 -> ["onshare\00.\00"]
.data 8738 -> ["ontransfer\00NAN\00"]
void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3	 = ($global$0 - [368])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$2 }
	*($3 + [352]) = [8738]     # .data 8738 -> ["ontransfer"]
	*($3 + [356]) = CALL $147([8738])     # .data 8738 -> ["ontransfer"]
	*($3 + [168]) = *($3 + [352])
	CALL $2(($3 + [360]), ($3 + [168]))
	if ( ((int_64)$2 == (int_64)-6560773448818900992) ){ goto $label$1 }
	*($3 + [344]) = [8753]     # .data 8753 -> ["onshare"]
	*($3 + [348]) = CALL $147([8753])     # .data 8753 -> ["onshare"]
	*($3 + [160]) = *($3 + [344])
	CALL $2(($3 + [360]), ($3 + [160]))
	if ( ((int_64)$2 == (int_64)-6561512259619651584) ){ goto $label$1 }
	*($3 + [336]) = [8763]     # .data 8763 -> ["onissue"]
	*($3 + [340]) = CALL $147([8763])     # .data 8763 -> ["onissue"]
	*($3 + [152]) = *($3 + [336])
	CALL $2(($3 + [360]), ($3 + [152]))
	if ( ((int_64)$2 <= (int_64)-3617168760277827585) ){ goto $label$12 }
	if ( ((int_64)$2 > (int_64)5031766152489992191) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-3075276115059483248) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)4929617502180212736) ){ goto $label$2 }
	*($3 + [260]) = [0]
	*($3 + [256]) = [1]
	*($3 + [144]) = *($3 + [256])
	CALL $10($1, $1, ($3 + [144]))
	goto $label$2 
	
.LABEL $label$12
	if ( ((int_64)$2 <= (int_64)-6533262907872903169) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-6533262907872903168) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-4993669930013425664) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-4373711020246433792) ){ goto $label$2 }
	*($3 + [332]) = [0]
	*($3 + [328]) = [2]
	*($3 + [72]) = *($3 + [328])
	CALL $12($1, $1, ($3 + [72]))
	goto $label$2 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)5031766152489992192) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)5614120222447370240) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)8516769789752901632) ){ goto $label$2 }
	*($3 + [292]) = [0]
	*($3 + [288]) = [3]
	*($3 + [112]) = *($3 + [288])
	CALL $14($1, $1, ($3 + [112]))
	goto $label$2 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)-8279610709314294272) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-6566938297963118592) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$9
	*($3 + [276]) = [0]
	*($3 + [272]) = [4]
	*($3 + [128]) = *($3 + [272])
	CALL $16($1, $1, ($3 + [128]))
	goto $label$2 
	
.LABEL $label$8
	*($3 + [324]) = [0]
	*($3 + [320]) = [5]
	*($3 + [80]) = *($3 + [320])
	CALL $16($1, $1, ($3 + [80]))
	goto $label$2 
	
.LABEL $label$7
	*($3 + [268]) = [0]
	*($3 + [264]) = [6]
	*($3 + [136]) = *($3 + [264])
	CALL $19($1, $1, ($3 + [136]))
	goto $label$2 
	
.LABEL $label$6
	*($3 + [284]) = [0]
	*($3 + [280]) = [7]
	*($3 + [120]) = *($3 + [280])
	CALL $21($1, $1, ($3 + [120]))
	goto $label$2 
	
.LABEL $label$5
	*($3 + [300]) = [0]
	*($3 + [296]) = [8]
	*($3 + [104]) = *($3 + [296])
	CALL $23($1, $1, ($3 + [104]))
	goto $label$2 
	
.LABEL $label$4
	*($3 + [308]) = [0]
	*($3 + [304]) = [9]
	*($3 + [96]) = *($3 + [304])
	CALL $25($1, $1, ($3 + [96]))
	goto $label$2 
	
.LABEL $label$3
	*($3 + [316]) = [0]
	*($3 + [312]) = [10]
	*($3 + [88]) = *($3 + [312])
	CALL $27($1, $1, ($3 + [88]))
	
.LABEL $label$2
	*($3 + [248]) = [8771]     # .data 8771 -> ["eosio.token"]
	*($3 + [252]) = CALL $147([8771])     # .data 8771 -> ["eosio.token"]
	*($3 + [64]) = *($3 + [248])
	CALL $2(($3 + [360]), ($3 + [64]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$13 }
	*($3 + [232]) = [8783]     # .data 8783 -> ["transfer"]
	*($3 + [236]) = CALL $147([8783])     # .data 8783 -> ["transfer"]
	*($3 + [8]) = *($3 + [232])
	CALL $2(($3 + [240]), ($3 + [8]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [228]) = [0]
	*($3 + [224]) = [11]
	*($3) = *($3 + [224])
	CALL $16($0, (int_64)6138663591592764928, $3)
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_64)$1 == (int_64)-7515584006193881072) ){ goto $label$14 }
	if ( ((int_64)$1 != (int_64)-8272103852055934896) ){ goto $label$1 }
	*($3 + [216]) = [8792]     # .data 8792 -> ["share"]
	*($3 + [220]) = CALL $147([8792])     # .data 8792 -> ["share"]
	*($3 + [40]) = *($3 + [216])
	CALL $2(($3 + [360]), ($3 + [40]))
	if ( ((int_64)$2 != (int_64)-4373711020246433792) ){ goto $label$15 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [12]
	*($3 + [32]) = *($3 + [208])
	CALL $12($0, (int_64)-8272103852055934896, ($3 + [32]))
	
.LABEL $label$15
	*($3 + [200]) = [8798]     # .data 8798 -> ["issue"]
	*($3 + [204]) = CALL $147([8798])     # .data 8798 -> ["issue"]
	*($3 + [24]) = *($3 + [200])
	CALL $2(($3 + [360]), ($3 + [24]))
	if ( ((int_64)$2 != (int_64)8516769789752901632) ){ goto $label$1 }
	*($3 + [196]) = [0]
	*($3 + [192]) = [13]
	*($3 + [16]) = *($3 + [192])
	CALL $14($0, (int_64)-8272103852055934896, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$14
	*($3 + [184]) = [8804]     # .data 8804 -> ["withdraw"]
	*($3 + [188]) = CALL $147([8804])     # .data 8804 -> ["withdraw"]
	*($3 + [56]) = *($3 + [184])
	CALL $2(($3 + [360]), ($3 + [56]))
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$1 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [14]
	*($3 + [48]) = *($3 + [176])
	CALL $32($0, (int_64)-7515584006193881072, ($3 + [48]))
	
.LABEL $label$1
	CALL $121([0])
	$global$0 = ($3 + [368])
}

.data 9206 -> ["cannot increment end iterator\00"]
.data 9725 -> ["cannot pass end iterator to erase\00"]
.data 10567 -> ["Cannot close because the balance is not zero.\00"]
.data 10491 -> ["Balance row already deleted or never existed. Action won\'t have any effect.\00"]
.data 9056 -> ["object passed to iterator_to is not in multi_index\00"]
void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3	 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth($1)
	*(($3 + [32])) = [0]
	*($3 + [8]) = $1
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$4	 = *($0)
	*($3) = $4
	$0 = [0]
	$2	 = CALL db_find_i64($4, $1, (int_64)3607749779137757184, (uint_64)*($2) >> (uint_64)(int_64)8)
	if ( ((int_32)$2) < (int_32)[0]) ){ goto $label$1 }
	$0	 = CALL $40($3, $2)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$3), [9056])     # .data 9056 -> ["object passed to iterator_to is not in multi_index"]
	
.LABEL $label$1
	$2	 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($2, [10491])     # .data 10491 -> ["Balance row already deleted or never existed. Action won\'t have any effect."]
	CALL eosio_assert((int_64)(*($0) == 0), [10567])     # .data 10567 -> ["Cannot close because the balance is not zero."]
	CALL eosio_assert($2, [9725])     # .data 9725 -> ["cannot pass end iterator to erase"]
	CALL eosio_assert($2, [9206])     # .data 9206 -> ["cannot increment end iterator"]
	$2	 = CALL db_next_i64(*($0 + [20]), ($3 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	CALL $40($3, $2)
	
.LABEL $label$2
	CALL $65($3, $0)
	$5	 = *($3 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	$6	 = ($3 + [28])
	$0	 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0	 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($3 + [48])
}

.data 8705 -> ["Public key checksum mismatch\00nan\00"]
.data 8682 -> ["Invalid public key\00INF\00"]
.data 8653 -> ["Decode public key failed\00inf\00"]
.data 8630 -> ["EOS\00-0X+0X 0X-0x+0x 0x\00"]
void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3	 = ($global$0 - [128])
	$global$0 = $3
	*(($3 + [120])) = [0]
	*($3 + [112]) = (int_64)0
	$4	 = CALL $147([8630])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }     # .data 8630 -> ["EOS"]
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($3 + [112]) = ($4 << [1])
	$5 = (($3 + [112]) | [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6	 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [112]) = ($6 | [1])
	*($3 + [120]) = $5
	*($3 + [116]) = $4
	
.LABEL $label$4
	CALL memcpy($5, [8630], $4)     # .data 8630 -> ["EOS"]
	
.LABEL $label$3
	*(($5 + $4)) = [0]
	$4	 = *($3 + [112])
	$5 = CALL $108(($3 + [96]), $1, ( *($3 + [116]) ? uint_32($4 >> [1]) : ($4 & [1]) ), [-1], $1)
	*($3 + [88]) = [0]
	*($3 + [80]) = (int_64)0
	CALL eosio_assert(CALL $3(( *($5 + [8]) ? ($5 + [1]) : (*($3 + [96]) & [1]) ), ($3 + [80])), [8653])     # .data 8653 -> ["Decode public key failed"]
	CALL eosio_assert(((int_32)(*($3 + [84]) - *($3 + [80])) == (int_32)[37]), [8682])     # .data 8682 -> ["Invalid public key"]
	if ( (*($2) == 0) ){ goto $label$6 }
	CALL memmove(($3 + [40]), *($3 + [80]), [33])
	CALL ripemd160(($3 + [40]), [33], $3)
	CALL eosio_assert((CALL $145($3, (*($3 + [84]) + [-4]), [4]) == 0), [8705])     # .data 8705 -> ["Public key checksum mismatch"]
	
.LABEL $label$6
	*($0) = [0]
	$4	 = *($3 + [80])
	*($0 + [1 align=1]) = *($4)
	*($0 + [9 align=1]) = *($4 + [8 align=1])
	*($0 + [13 align=1]) = *($4 + [12 align=1])
	*($0 + [21 align=1]) = *($4 + [20 align=1])
	*($0 + [29 align=1]) = *($4 + [28 align=1])
	*($0 + [33]) = *($4 + [32])
	if ( ($4 == 0) ){ goto $label$7 }
	*($3 + [84]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( (*($3 + [96]) & [1]) ){ goto $label$9 }
	if ( (*($3 + [112]) & [1]) ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	CALL _ZdlPv(*(($5 + [8])))
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$8
	CALL _ZdlPv(*($3 + [120]))
	$global$0 = ($3 + [128])
	return (unreachable)
	
.LABEL $label$2
	CALL $106(($3 + [112]))
	
.LABEL $label$1
	$global$0 = ($3 + [128])
}

.data 8630 -> ["EOS\00-0X+0X 0X-0x+0x 0x\00"]
int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2	 = ($global$0 - [128])
	$global$0 = $2
	$3 = [0]
	$4	 = *($0)
	if ( ((int_32)( *($0 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ) != (int_32)[53]) ){ goto $label$2 }
	*(($2 + [120])) = [0]
	*($2 + [112]) = (int_64)0
	$4	 = CALL $147([8630])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }     # .data 8630 -> ["EOS"]
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($2 + [112]) = ($4 << [1])
	$5 = (($2 + [112]) | [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$3	 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($3)
	*($2 + [112]) = ($3 | [1])
	*($2 + [120]) = $5
	*($2 + [116]) = $4
	
.LABEL $label$4
	CALL memcpy($5, [8630], $4)     # .data 8630 -> ["EOS"]
	
.LABEL $label$3
	$3 = [0]
	*(($5 + $4)) = [0]
	$4	 = *($2 + [112])
	$4 = CALL $108(($2 + [96]), $0, ( *($2 + [116]) ? uint_32($4 >> [1]) : ($4 & [1]) ), [-1], $0)
	*($2 + [88]) = [0]
	*($2 + [80]) = (int_64)0
	if ( (CALL $3(( *($4 + [8]) ? ($4 + [1]) : (*($2 + [96]) & [1]) ), ($2 + [80])) == 0) ){ goto $label$7 }
	$3 = [0]
	$0	 = *($2 + [80])
	if ( ((int_32)(*($2 + [84]) - $0) != (int_32)[37]) ){ goto $label$6 }
	if ( (*($1) == 0) ){ goto $label$8 }
	CALL memmove(($2 + [40]), $0, [33])
	CALL ripemd160(($2 + [40]), [33], $2)
	$3 = [0]
	if ( CALL $145($2, (*($2 + [84]) + [-4]), [4]) ){ goto $label$7 }
	
.LABEL $label$8
	$3 = [1]
	
.LABEL $label$7
	$0 = *($2 + [80])
	
.LABEL $label$6
	if ( ($0 == 0) ){ goto $label$9 }
	*($2 + [84]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$10
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($2 + [120]))
	
.LABEL $label$2
	$global$0 = ($2 + [128])
	return $3
	
.LABEL $label$1
	CALL $106(($2 + [112]))
	return (unreachable)
}

void .FUNC $4 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4	 = *($0)
	$3	 = *($0 + [8])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$5 }
	*($0 + [4]) = $4
	CALL _ZdlPv($4)
	$3 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = [2147483647]
	if ( ((uint_32)$3 > (uint_32)[1073741822]) ){ goto $label$6 }
	$4	 = ($3 << [1])
	$5 = ( $1 ? $4 : ($4 <= $1) )
	
.LABEL $label$6
	$4	 = CALL _Znwj($5)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $5)
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($4) = *($2)
	$4	 = (*($0) + [1])
	*($0) = $4
	$1	 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$3	 = (*($0 + [4]) - $4)
	$5	 = ( $3 ? $1 : ($3 <= $1) )
	if ( ($5 == 0) ){ goto $label$8 }
	CALL memset($4, *($2), $5)
	
.LABEL $label$8
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$1 = ($3 - $1)
	$4	 = ($0 + [4])
	$0 = *($4)
	
.LOOP $label$9:
	*($0) = *($2)
	$0	 = (*($4) + [1])
	*($4) = $0
	$1	 = ($1 + [1])
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = (*($0) + $1)
	return (unreachable)
	
.LABEL $label$1
	CALL $116($0)
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3	 = *($0)
	$2	 = *($0 + [4])
	$4	 = ($2 - $3)
	$5	 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7	 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6	 = ($7 << [1])
	$6	 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $116($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2	 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

.data 8851 -> ["thirteenth character in name cannot be a letter that comes after j\00"]
.data 8918 -> ["character is not in allowed character set for names\00"]
.data 8813 -> ["string is too long to be a valid name\00"]
int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2	 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8813])     # .data 8813 -> ["string is too long to be a valid name"]
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3	 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4	 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7	 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8918])     # .data 8918 -> ["character is not in allowed character set for names"]
	$4 = *($0)
	
.LABEL $label$6
	$4	 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6	 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6	 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6	 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8851])     # .data 8851 -> ["thirteenth character in name cannot be a letter that comes after j"]
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8918])     # .data 8918 -> ["character is not in allowed character set for names"]
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

.data 8617 -> ["DecodeBase58\00"]
.data 8600 -> ["lotteryshare.cpp\00"]
.data 8496 -> ["carry == 0\00(null)\00malloc_from_freed was designed to only be called after _heap was completely allocated\00"]
.data 8240 -> ["\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\ff\ff\ff\ff\ff\ff\ff\t\n\0b\0c\0d\0e\0f\10\ff\11\12\13\14\15\ff\16\17\18\19\1a\1b\1c\1d\1e\1f \ff\ff\ff\ff\ff\ff!\"#$%&\'()*+\ff,-./0123456789\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"]
int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3	 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( (CALL $117(int_32(($3 << [24]) >> [24])) == 0) ){ goto $label$3 }
	$3 = *($0 + [1])
	$4	 = ($0 + [1])
	$0 = $4
	if ( $3 ){ goto $label$4 }
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)[49]) ){ goto $label$2 }
	$3 = [0]
	
.LOOP $label$5:
	$4 = ($0 + $3)
	$5	 = ($3 + [1])
	$3 = $5
	if ( ((int_32)*(($4 + [1])) == (int_32)[49]) ){ goto $label$5 }
	$4 = ($0 + $5)
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	$4 = $0
	
.LABEL $label$1
	$0	 = ((uint_32)((int_32)CALL $147($4) * (int_32)[733]) / (uint_32)[1000])
	$6	 = ($0 + [1])
	$7	 = CALL _Znwj($6)
	$8 = ($7 + $0)
	$0 = [0]
	
.LOOP $label$6:
	*(($7 + $0)) = [0]
	$0	 = ($0 + [1])
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0	 = *($4)
	if ( ($0 == 0) ){ goto $label$17 }
	$3 = [0]
	
.LOOP $label$18:
	$9 = $3
	$10 = $4
	if ( CALL $117(int_32(($0 << [24]) >> [24])) ){ goto $label$16 }
	$0	 = *($10)
	$11	 = *(($0 + [8240]))
	if ( ((int_32)$11 == (int_32)[-1]) ){ goto $label$14 }     # .data 8240 -> ["\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"]
	if ( ((int_32)$0 != (int_32)[49]) ){ goto $label$20 }
	$3 = [0]
	if ( ($9 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$3 = [0]
	$0 = $8
	
.LOOP $label$22:
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$21 }
	$4	 = (((int_32)*($0) * (int_32)[58]) + $11)
	*($0) = $4
	$3 = ($3 + [1])
	$0 = ($0 + [-1])
	$11 = ((int_32)$4 / (int_32)[256])
	if ( ((uint_32)($4 + [255]) > (uint_32)[510]) ){ goto $label$22 }
	if ( ($3 <= $9) ){ goto $label$22 }
	goto $label$19 
	
.LABEL $label$21
	if ( $11 ){ goto $label$9 }
	
.LABEL $label$19
	$4 = ($10 + [1])
	$0	 = *($10 + [1])
	if ( $0 ){ goto $label$18 }
	goto $label$15 
	
.LABEL $label$17
	$3 = [0]
	goto $label$15 
	
.LABEL $label$16
	$3 = $9
	$4 = $10
	
.LABEL $label$15
	$9 = ($7 + $6)
	$0 = ($4 + [-1])
	
.LOOP $label$23:
	$0	 = ($0 + [1])
	if ( CALL $117(*($0)) ){ goto $label$23 }
	$4 = [0]
	if ( *($0) ){ goto $label$13 }
	$4	 = ($7 + ($6 - $3))
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$12 }
	$0 = $4
	if ( *($4) ){ goto $label$10 }
	$6 = ([0] - $3)
	$0 = [-1]
	$11 = $8
	
.LOOP $label$24:
	$4 = $11
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$11 }
	$0 = ($0 + [-1])
	$11 = ($4 + [1])
	if ( (*((($4 + $6) + [2])) == 0) ){ goto $label$24 }
	$0 = (($4 - $3) + [2])
	$4 = (($11 - $3) + [1])
	goto $label$10 
	
.LABEL $label$14
	$4 = [0]
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$12
	$0 = $9
	goto $label$10 
	
.LABEL $label$11
	$0	 = (($4 - $3) + [2])
	$4 = $0
	
.LABEL $label$10
	$3	 = (($9 - $4) + $5)
	$11	 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $11) >= (uint_32)$3) ){ goto $label$25 }
	$4 = *($1 + [4])
	$4	 = *($1)
	$11	 = (*($1 + [4]) - $4)
	$10	 = CALL _Znwj($3)
	$12	 = ($10 + ($4 - $11))
	$6 = ($12 - $11)
	$3 = ($10 + $3)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$26 }
	CALL memcpy($6, $4, $11)
	$4 = *($1)
	
.LABEL $label$26
	*($1) = $6
	*(($1 + [4])) = $12
	*(($1 + [8])) = $3
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	*($2 + [15]) = [0]
	CALL $4($1, $5, ($2 + [15]))
	if ( ((int_32)$0 == (int_32)$9) ){ goto $label$27 }
	$6 = ($8 + [1])
	$9 = ($1 + [8])
	$4 = ($1 + [4])
	
.LOOP $label$28:
	$3 = ($0 + [1])
	$11	 = *($4)
	if ( ((int_32)$11 == (int_32)*($9)) ){ goto $label$29 }
	*($11) = *($0)
	*($4) = (*($4) + [1])
	$0 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	CALL $5($1, $0)
	$0 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$28 }
	
.LABEL $label$27
	$4 = [1]
	if ( $7 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $120([8496], [8600], [91], [8617])     # .data 8496 -> ["carry == 0"]     # .data 8600 -> ["lotteryshare.cpp"]     # .data 8617 -> ["DecodeBase58"]
	
.LABEL $label$8
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($2 + [16])
	(unreachable)
	return $4
}

void .FUNC memory ()
{
}

.data 8192 -> ["\00Assertion failed: %s (%s: %s: %d)\n\00-+   0X0x\00"]
int_64 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$1	 = ($global$0 - [80])
	$global$0 = $1
	$2 = CALL $107(($1 + [56]), $0)
	*(($1 + [48])) = [0]
	*($1 + [40]) = (int_64)0
	$3	 = CALL $147([8192])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }     # .data 8192 -> [""]
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($1 + [40]) = ($3 << [1])
	$4 = (($1 + [40]) | [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$0	 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($0)
	*($1 + [40]) = ($0 | [1])
	*($1 + [48]) = $4
	*($1 + [44]) = $3
	
.LABEL $label$3
	CALL memcpy($4, [8192], $3)     # .data 8192 -> [""]
	
.LABEL $label$2
	$0 = [0]
	*(($4 + $3)) = [0]
	$3	 = *($1 + [56])
	$4	 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($4 == 0) ){ goto $label$5 }
	$4 = ($4 + [-1])
	$5 = ($2 + [1])
	$6 = ($2 + [8])
	
.LOOP $label$6:
	$3	 = *((( *($6) ? $5 : ($3 & [1]) ) + $0))
	if ( (((($3 & [223]) + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	if ( (($3 + [-49]) <= [5]) ){ goto $label$8 }
	if ( ((int_32)$3 != (int_32)[46]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $113(($1 + [40]), int_32(($3 << [24]) >> [24]))
	
.LABEL $label$7
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$5 }
	$0 = ($0 + [1])
	$3 = *($1 + [56])
	goto $label$6 
	
.LABEL $label$5
	$5	 = *($1 + [40])
	$4	 = ($5 & [1])
	if ( $4 ){ goto $label$11 }
	$3	 = ($0 + uint_32($5 >> [1]))
	$0	 = (($1 + [40]) | [1])
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$3	 = ($0 + *($1 + [44]))
	$0	 = *($1 + [48])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$10
	
.LOOP $label$12:
	*($0) = CALL $118(*($0))
	$0	 = ($0 + [1])
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$12 }
	$5	 = *($1 + [40])
	$4 = ($5 & [1])
	
.LABEL $label$9
	$3	 = uint_32($5 >> [1])
	$0	 = *($1 + [44])
	$5	 = ( $0 ? $3 : $4 )
	if ( ((uint_32)$5 <= (uint_32)[11]) ){ goto $label$13 }
	CALL $108(($1 + [24]), ($1 + [40]), ($5 + [-12]), [-1], ($1 + [40]))
	if ( (*($1 + [40]) & [1]) ){ goto $label$15 }
	*($1 + [40]) = [0]
	goto $label$14 
	
.LABEL $label$15
	*(*($1 + [48])) = [0]
	*($1 + [44]) = [0]
	
.LABEL $label$14
	CALL $111(($1 + [40]), [0])
	*((($1 + [40]) + [8])) = *((($1 + [24]) + [8]))
	*($1 + [40]) = *($1 + [24])
	$0	 = *($1 + [40])
	$3 = uint_32($0 >> [1])
	$4 = ($0 & [1])
	$0 = *($1 + [44])
	
.LABEL $label$13
	*($1 + [20]) = ( $0 ? $3 : $4 )
	*($1 + [16]) = ( *($1 + [48]) ? (($1 + [40]) | [1]) : $4 )
	*($1 + [8]) = *($1 + [16])
	$0 = CALL $2(($1 + [72]), ($1 + [8]))
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$16
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$17
	$7 = *($0)
	$global$0 = ($1 + [80])
	return $7
	
.LABEL $label$1
	CALL $106(($1 + [40]))
	return (unreachable)
}

.data 9051 -> ["read\00"]
int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3	 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5	 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $153($5)
	goto $label$2 
	
.LABEL $label$3
	$2	 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = (($4 + [64]) + [16]))) = (int_64)0
	*(($4 + [96])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [56]) = ($2 + $5)
	*($4 + [48]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($4 + [64]), $2, [8])
	$6	 = ($5 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy((($4 + [64]) + [8]), ($2 + [8]), [8])
	*($4 + [16]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($4 + [16]), ($2 + [16]), [8])
	*($3) = *($4 + [16])
	*($4 + [52]) = ($2 + [24])
	CALL $33(($4 + [48]), (($4 + [64]) + [24]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4)
	$3	 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0	 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [16])
	CALL $56(($4 + [128]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $156($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return $2
}

.data 9996 -> ["memo has more than 256 bytes\00"]
.data 10131 -> ["symbol precision mismatch\00"]
.data 10437 -> ["must transfer positive quantity\00"]
.data 10085 -> ["invalid quantity\00"]
.data 9009 -> ["unable to find key\00"]
.data 10411 -> ["to account does not exist\00"]
.data 10387 -> ["cannot transfer to self\00"]
void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$5	 = ($global$0 - [192])
	$global$0 = $5
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [10387])     # .data 10387 -> ["cannot transfer to self"]
	CALL require_auth($1)
	CALL eosio_assert(CALL eosio_assert5($2), [10411])     # .data 10411 -> ["to account does not exist"]
	$6 = *($3 + [8])
	$7 = [0]
	*(($5 + [168])) = [0]
	$8	 = (uint_64)$6 >> (uint_64)(int_64)8
	*($5 + [144]) = $8)
	*($5 + [152]) = (int_64)-1
	*($5 + [160]) = (int_64)0
	*($5 + [136]) = *($0)
	$9 = CALL $35(($5 + [136]), $8, [9009])     # .data 9009 -> ["unable to find key"]
	CALL require_recipient($1)
	CALL require_recipient($2)
	$10	 = *($3)
	if ( ((uint_64)((int_64)$10 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$11 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $12
	$7 = [1]
	$13	 = $11
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $12
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$11 < (int_32)[6])
	$13	 = ($11 + [1])
	$11 = $13
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [10085])     # .data 10085 -> ["invalid quantity"]
	CALL eosio_assert(((int_64)$10 > (int_64)0), [10437])     # .data 10437 -> ["must transfer positive quantity"]
	CALL eosio_assert(((int_64)$6 == (int_64)*($9 + [8])), [10131])     # .data 10131 -> ["symbol precision mismatch"]
	$11	 = *($4)
	if ( ($11 & [1]) ){ goto $label$7 }
	$11 = uint_32($11 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$11 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($11 <= [257]), [9996])     # .data 9996 -> ["memo has more than 256 bytes"]
	$11 = CALL has_auth($2)
	$7	 = ($3 + [8])
	$12	 = *($7)
	*((($5 + [120]) + [8])) = $12
	$8 = *($3)
	*((($5 + [24]) + [8])) = $12
	*($5 + [24]) = $8
	*($5 + [120]) = $8
	CALL $63($0, $1, ($5 + [24]))
	$12	 = *($7)
	*((($5 + [104]) + [8])) = $12
	$8 = *($3)
	*((($5 + [8]) + [8])) = $12
	*($5 + [8]) = $8
	*($5 + [104]) = $8
	CALL $58($0, $2, ($5 + [8]), ( $2 ? $1 : $11 ))
	$8 = *($0)
	*($5 + [40]) = $1
	CALL $107((($5 + [40]) + [8]), $4)
	*($5 + [72]) = (int_64)-8279610709314294272
	*($5 + [64]) = $8
	*(($11 = CALL _Znwj([16]))) = $8
	*($11 + [8]) = (int_64)3617214756542218240
	$7	 = ($11 + [16])
	*(($5 + [88])) = $7
	*(($5 + [84])) = $7
	*($5 + [80]) = $11
	CALL $60(($5 + [92]), ($5 + [40]))
	CALL $39(($5 + [176]), ($5 + [64]))
	$11	 = *($5 + [176])
	CALL send_inline($11, (*($5 + [180]) - $11))
	$11	 = *($5 + [176])
	if ( ($11 == 0) ){ goto $label$8 }
	*($5 + [180]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$8
	$11	 = *($5 + [92])
	if ( ($11 == 0) ){ goto $label$9 }
	*(($5 + [96])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$9
	$11	 = *($5 + [80])
	if ( ($11 == 0) ){ goto $label$10 }
	*(($5 + [84])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$10
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($5 + [56])))
	
.LABEL $label$11
	$8 = *($0)
	*($5 + [40]) = $2
	CALL $107(($5 + [48]), $4)
	*($5 + [72]) = (int_64)-8279610709314294272
	*($5 + [64]) = $8
	*(($11 = CALL _Znwj([16]))) = $8
	*($11 + [8]) = (int_64)3617214756542218240
	$7	 = ($11 + [16])
	*(($5 + [88])) = $7
	*(($5 + [84])) = $7
	*($5 + [80]) = $11
	CALL $60(($5 + [92]), ($5 + [40]))
	CALL $39(($5 + [176]), ($5 + [64]))
	$11	 = *($5 + [176])
	CALL send_inline($11, (*($5 + [180]) - $11))
	$11	 = *($5 + [176])
	if ( ($11 == 0) ){ goto $label$12 }
	*($5 + [180]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$12
	$11	 = *($5 + [92])
	if ( ($11 == 0) ){ goto $label$13 }
	*(($5 + [96])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$13
	$11	 = *($5 + [80])
	if ( ($11 == 0) ){ goto $label$14 }
	*(($5 + [84])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$14
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [56])))
	
.LABEL $label$15
	$13	 = *($5 + [160])
	if ( ($13 == 0) ){ goto $label$16 }
	$0	 = ($5 + [164])
	$11	 = *($0)
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$18 }
	
.LOOP $label$19:
	$11	 = ($11 + [-24])
	$7 = *($11)
	*($11) = [0]
	if ( ($7 == 0) ){ goto $label$20 }
	CALL _ZdlPv($7)
	
.LABEL $label$20
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$19 }
	$11 = *(($5 + [160]))
	goto $label$17 
	
.LABEL $label$18
	$11 = $13
	
.LABEL $label$17
	*($0) = $13
	CALL _ZdlPv($11)
	
.LABEL $label$16
	$global$0 = ($5 + [192])
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3	 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5	 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $153($5)
	goto $label$2 
	
.LABEL $label$3
	$2	 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $43(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3	 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0	 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $44(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $156($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

.data 9236 -> ["cannot pass end iterator to modify\00"]
void .FUNC $17 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$5	 = ($global$0 - [64])
	$global$0 = $5
	CALL require_auth(*($0))
	$6	 = *($4)
	if ( ($6 & [1]) ){ goto $label$6 }
	$7 = ($4 + [1])
	$8	 = uint_32($6 >> [1])
	if ( ($8 == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = *($4 + [8])
	$8	 = *($4 + [4])
	if ( $8 ){ goto $label$4 }
	
.LABEL $label$5
	$9 = $7
	$8 = [1]
	if ( (($6 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = ($7 + $8)
	$9 = $7
	
.LOOP $label$8:
	if ( (CALL $117(*($9)) == 0) ){ goto $label$7 }
	$9 = ($9 + [1])
	$8	 = ($8 + [-1])
	if ( $8 ){ goto $label$8 }
	$9 = $6
	
.LABEL $label$7
	$8 = [1]
	if ( (*($4) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($4 + $8)
	goto $label$1 
	
.LABEL $label$2
	$8 = *($4 + [8])
	
.LABEL $label$1
	CALL $114($4, ($7 - $8), ($9 - $7))
	$9	 = *($4)
	if ( ($9 & [1]) ){ goto $label$15 }
	$10	 = ($4 + [1])
	$9	 = ($10 + uint_32($9 >> [1]))
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$10	 = *($4 + [8])
	$9	 = ($10 + *($4 + [4]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (CALL $117(*(($9 + [-1]))) == 0) ){ goto $label$13 }
	$7 = ($10 + [1])
	
.LOOP $label$16:
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$12 }
	$8 = ($9 + [-2])
	$6	 = ($9 + [-1])
	$9 = $6
	if ( CALL $117(*($8)) ){ goto $label$16 }
	$9 = $6
	
.LABEL $label$13
	$8 = [1]
	$6	 = *($4)
	if ( ($6 & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$9 = $10
	$8 = [1]
	$6	 = *($4)
	if ( (($6 & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$7	 = *($4 + [8])
	$8 = ($7 + *($4 + [4]))
	goto $label$9 
	
.LABEL $label$10
	$7	 = ($4 + $8)
	$8 = ($7 + uint_32($6 >> $8))
	
.LABEL $label$9
	CALL $114($4, ($9 - $7), ($8 - $9))
	*(($5 + [56])) = [0]
	*($5 + [40]) = (int_64)-1
	$11	 = *($0 + [8])
	*($5 + [24]) = $11
	*($5 + [32]) = $11
	*($5 + [48]) = (int_64)0
	$9	 = CALL db_lowerbound_i64($11, $11, (int_64)-5915276457541632000, (int_64)0)
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$19 }
	$9 = CALL $34(($5 + [24]), $9)
	$11 = *($0)
	*($5 + [20]) = $3
	*($5 + [16]) = $4
	CALL eosio_assert([1], [9236])     # .data 9236 -> ["cannot pass end iterator to modify"]
	CALL $45(($5 + [24]), $9, $11, ($5 + [16]))
	$4	 = *($5 + [48])
	if ( $4 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$11 = *($0)
	*($5 + [20]) = $3
	*($5 + [16]) = $4
	CALL $46(($5 + [8]), ($5 + [24]), $11, ($5 + [16]))
	$4	 = *($5 + [48])
	if ( ($4 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$7	 = ($5 + [52])
	$9	 = *($7)
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$21 }
	
.LOOP $label$22:
	$9	 = ($9 + [-24])
	$8 = *($9)
	*($9) = [0]
	if ( ($8 == 0) ){ goto $label$23 }
	CALL _ZdlPv($8)
	
.LABEL $label$23
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$22 }
	$9 = *(($5 + [48]))
	goto $label$20 
	
.LABEL $label$21
	$9 = $4
	
.LABEL $label$20
	*($7) = $4
	CALL _ZdlPv($9)
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$17
	$global$0 = ($5 + [64])
}

.data 9051 -> ["read\00"]
int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3	 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7	 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $153($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2	 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [48]) = (int_64)0
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($4 + [40]), $2, [8])
	*($4 + [8]) = (int_64)0
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($4 + [8]), ($2 + [8]), [8])
	$8	 = *($4 + [8])
	*($4 + [48]) = $8
	*(($4 + [28])) = ($2 + [16])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$0 = *($4 + [40])
	*($4 + [56]) = $8
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 ($4 + [56])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $156($2)
	
.LABEL $label$6
	$global$0 = ($4 + [64])
	return [1]
}

.data 9236 -> ["cannot pass end iterator to modify\00"]
.data 9056 -> ["object passed to iterator_to is not in multi_index\00"]
.data 9206 -> ["cannot increment end iterator\00"]
.data 9171 -> ["signed division overflow\00"]
.data 9156 -> ["divide by zero\00"]
.data 9131 -> ["multiplication underflow\00"]
.data 9107 -> ["multiplication overflow\00"]
.data 9009 -> ["unable to find key\00"]
.data 8976 -> ["\e6\af\8f\e6\97\a5\e5\88\86\e7\ba\a2\00"]
.data 8996 -> ["\e6\af\8f\e5\91\a8\e5\88\86\e7\ba\a2\00"]
.data 8989 -> ["weekly\00"]
.data 8970 -> ["daily\00"]
void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	$2	 = ($global$0 - [336])
	$global$0 = $2
	CALL require_auth(*($0))
	$3	 = *($1)
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($1 + [1])
	$5	 = uint_32($3 >> [1])
	if ( ($5 == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = *($1 + [8])
	$5	 = *($1 + [4])
	if ( $5 ){ goto $label$4 }
	
.LABEL $label$5
	$6 = $4
	$5 = [1]
	if ( (($3 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = ($4 + $5)
	$6 = $4
	
.LOOP $label$8:
	if ( (CALL $117(*($6)) == 0) ){ goto $label$7 }
	$6 = ($6 + [1])
	$5	 = ($5 + [-1])
	if ( $5 ){ goto $label$8 }
	$6 = $3
	
.LABEL $label$7
	$5 = [1]
	if ( (*($1) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($1 + $5)
	goto $label$1 
	
.LABEL $label$2
	$5 = *($1 + [8])
	
.LABEL $label$1
	CALL $114($1, ($4 - $5), ($6 - $4))
	$6	 = *($1)
	if ( ($6 & [1]) ){ goto $label$15 }
	$7	 = ($1 + [1])
	$6	 = ($7 + uint_32($6 >> [1]))
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$7	 = *($1 + [8])
	$6	 = ($7 + *($1 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (CALL $117(*(($6 + [-1]))) == 0) ){ goto $label$13 }
	$4 = ($7 + [1])
	
.LOOP $label$16:
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$12 }
	$5 = ($6 + [-2])
	$3	 = ($6 + [-1])
	$6 = $3
	if ( CALL $117(*($5)) ){ goto $label$16 }
	$6 = $3
	
.LABEL $label$13
	$5 = [1]
	$3	 = *($1)
	if ( ($3 & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$6 = $7
	$5 = [1]
	$3	 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$4	 = *($1 + [8])
	$5 = ($4 + *($1 + [4]))
	goto $label$9 
	
.LABEL $label$10
	$4	 = ($1 + $5)
	$5 = ($4 + uint_32($3 >> $5))
	
.LABEL $label$9
	CALL $114($1, ($6 - $4), ($5 - $6))
	*(($2 + [312])) = [0]
	*($2 + [296]) = (int_64)-1
	$8	 = *($0 + [8])
	*($2 + [280]) = $8
	*($2 + [288]) = $8
	*($2 + [304]) = (int_64)0
	$9 = [0]
	$6	 = CALL db_lowerbound_i64($8, $8, (int_64)-5915276457541632000, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$17 }
	$9 = CALL $34(($2 + [280]), $6)
	
.LABEL $label$17
	*($2 + [272]) = [0]
	*($2 + [264]) = (int_64)0
	$6	 = *($1)
	$5	 = CALL $147([8970])
	if ( ((int_32)$5 != (int_32)( *($1 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$31 }     # .data 8970 -> ["daily"]
	if ( (CALL $115($1, [0], [-1], [8970], $5) == 0) ){ goto $label$30 }     # .data 8970 -> ["daily"]
	
.LABEL $label$31
	$6	 = *($1)
	$5	 = CALL $147([8989])
	if ( ((int_32)$5 != (int_32)( *(($1 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$20 }     # .data 8989 -> ["weekly"]
	if ( CALL $115($1, [0], [-1], [8989], $5) ){ goto $label$19 }     # .data 8989 -> ["weekly"]
	*(($2 + [48])) = [0]
	*($2 + [40]) = (int_64)0
	$6	 = CALL $147([8996])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$24 }     # .data 8996 -> ["\e6\af\8f\e5\91\a8\e5\88\86\e7\ba\a2"]
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$29 }
	*($2 + [40]) = ($6 << [1])
	$5 = (($2 + [40]) | [1])
	if ( $6 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	*(($2 + [48])) = [0]
	*($2 + [40]) = (int_64)0
	$6	 = CALL $147([8976])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$25 }     # .data 8976 -> ["\e6\af\8f\e6\97\a5\e5\88\86\e7\ba\a2"]
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$34 }
	*($2 + [40]) = ($6 << [1])
	$5 = (($2 + [40]) | [1])
	if ( $6 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$4	 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [40]) = ($4 | [1])
	*($2 + [48]) = $5
	*($2 + [44]) = $6
	
.LABEL $label$33
	CALL memcpy($5, [8976], $6)     # .data 8976 -> ["\e6\af\8f\e6\97\a5\e5\88\86\e7\ba\a2"]
	
.LABEL $label$32
	*(($5 + $6)) = [0]
	if ( (*($2 + [264]) & [1]) ){ goto $label$36 }
	*($2 + [264]) = [0]
	goto $label$35 
	
.LABEL $label$36
	*(*(($2 + [272]))) = [0]
	*($2 + [268]) = [0]
	
.LABEL $label$35
	CALL $111(($2 + [264]), [0])
	*((($2 + [264]) + [8])) = *((($2 + [40]) + [8]))
	*($2 + [264]) = *($2 + [40])
	$6 = ($9 + [8])
	$5 = $9
	goto $label$26 
	
.LABEL $label$29
	$4	 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [40]) = ($4 | [1])
	*($2 + [48]) = $5
	*($2 + [44]) = $6
	
.LABEL $label$28
	CALL memcpy($5, [8996], $6)     # .data 8996 -> ["\e6\af\8f\e5\91\a8\e5\88\86\e7\ba\a2"]
	
.LABEL $label$27
	*(($5 + $6)) = [0]
	if ( (*($2 + [264]) & [1]) ){ goto $label$38 }
	*($2 + [264]) = [0]
	goto $label$37 
	
.LABEL $label$38
	*(*(($2 + [272]))) = [0]
	*($2 + [268]) = [0]
	
.LABEL $label$37
	CALL $111(($2 + [264]), [0])
	*((($2 + [264]) + [8])) = *((($2 + [40]) + [8]))
	*($2 + [264]) = *($2 + [40])
	$6 = ($9 + [24])
	$5 = ($9 + [16])
	
.LABEL $label$26
	$10 = *($5)
	$11 = *($6)
	*((($2 + [224]) + [32])) = [0]
	*($2 + [240]) = (int_64)-1
	*($2 + [248]) = (int_64)0
	*($2 + [224]) = *($0)
	*($2 + [232]) = (int_64)1112756037
	$3 = CALL $35(($2 + [224]), (int_64)1112756037, [9009])     # .data 9009 -> ["unable to find key"]
	*((($2 + [184]) + [32])) = [0]
	*($2 + [200]) = (int_64)-1
	*($2 + [208]) = (int_64)0
	$8	 = *(($0 + [8]))
	*($2 + [184]) = $8
	*($2 + [192]) = $8
	$6	 = CALL db_lowerbound_i64($8, $8, (int_64)8428113309303046144, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$21 }
	$4 = (($2 + [40]) + [32])
	$12 = (($2 + [144]) + [8])
	$13 = (($2 + [144]) + [16])
	$14 = (($2 + [144]) + [24])
	$15 = (($2 + [144]) + [28])
	$16 = ($2 + [80])
	$17 = ($2 + [124])
	$18	 = CALL $36(($2 + [184]), $6)
	$8	 = *($18)
	if ( ((int_64)$8 == (int_64)-7515584006193881072) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	CALL $106(($2 + [40]))
	
.LABEL $label$24
	CALL $106(($2 + [40]))
	
.LABEL $label$23
	$19 = [20]
	goto $label$18 
	
.LABEL $label$22
	$19 = [3]
	goto $label$18 
	
.LABEL $label$21
	$19 = [43]
	goto $label$18 
	
.LABEL $label$20
	$19 = [61]
	goto $label$18 
	
.LABEL $label$19
	$19 = [61]
	
.LABEL $label$18
	
.LOOP $label$39:
	goto $label$127 
	
.LABEL $label$168
	$18	 = CALL $36(($2 + [184]), $6)
	$8	 = *($18)
	if ( ((int_64)$8 != (int_64)-7515584006193881072) ){ goto $label$89 }
	$19 = [20]
	goto $label$39 
	
.LABEL $label$167
	$8	 = *($0)
	*($12) = $8
	*($13) = (int_64)-1
	*($14) = (int_64)0
	*((($2 + [144]) + [32])) = [0]
	*($2 + [144]) = $8
	$6	 = CALL db_lowerbound_i64($8, $8, (int_64)7864012134596739072, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$74 }
	$19 = [21]
	goto $label$39 
	
.LABEL $label$166
	$6 = CALL $37(($2 + [144]), $6)
	goto $label$73 
	
.LABEL $label$165
	$6 = CALL $37(($2 + [144]), $6)
	$19 = [22]
	goto $label$39 
	
.LABEL $label$164
	$8	 = *($6 + [24])
	CALL multi3(($2 + [8]), $8, (int_64)$8 >> (int_64)63), $10, (int_64)$10 >> (int_64)63))
	$20	 = *((($2 + [8]) + [8]))
	$8	 = *($2 + [8])
	CALL eosio_assert(( (uint_64)($8 <= (int_64)4611686018427387904) ? ((int_64)$20 < (int_64)0) : (int_64)($20 == 0) ), [9107])     # .data 9107 -> ["multiplication overflow"]
	CALL eosio_assert(( ((uint_64)$8 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$20 > (int_64)-1) : ((int_64)$20 == (int_64)-1) ), [9131])     # .data 9131 -> ["multiplication underflow"]
	$20	 = *($3)
	CALL eosio_assert(((int_64)$20 != (int_64)0), [9156])     # .data 9156 -> ["divide by zero"]
	CALL eosio_assert((((int_64)$20 != (int_64)-1) | ((int_64)$8 != (int_64)-9223372036854775808)), [9171])     # .data 9171 -> ["signed division overflow"]
	$8	 = ((int_64)$8 / (int_64)$20)
	if ( ((int_64)$8 < (int_64)1) ){ goto $label$72 }
	$19 = [35]
	goto $label$39 
	
.LABEL $label$163
	*((($2 + [88]) + [8])) = (int_64)3617214756542218240
	$20	 = *($0)
	*($2 + [88]) = $20
	*((($2 + [40]) + [8])) = (int_64)-7515584006193881072
	*((($2 + [40]) + [16])) = $8
	*((($2 + [40]) + [24])) = $11
	*($2 + [40]) = $20
	CALL $107($4, ($6 + [8]))
	CALL $39(($2 + [320]), CALL $38(($2 + [104]), ($2 + [88]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($2 + [40])))
	$5	 = *($2 + [320])
	CALL send_inline($5, (*($2 + [324]) - $5))
	$5	 = *($2 + [320])
	if ( ($5 == 0) ){ goto $label$64 }
	$19 = [36]
	goto $label$39 
	
.LABEL $label$162
	*($2 + [324]) = $5
	CALL _ZdlPv($5)
	$19 = [37]
	goto $label$39 
	
.LABEL $label$161
	$5	 = *((($2 + [104]) + [28]))
	if ( ($5 == 0) ){ goto $label$63 }
	$19 = [38]
	goto $label$39 
	
.LABEL $label$160
	*((($2 + [104]) + [32])) = $5
	CALL _ZdlPv($5)
	$19 = [39]
	goto $label$39 
	
.LABEL $label$159
	$5	 = *((($2 + [104]) + [16]))
	if ( ($5 == 0) ){ goto $label$62 }
	$19 = [40]
	goto $label$39 
	
.LABEL $label$158
	*($17) = $5
	CALL _ZdlPv($5)
	$19 = [41]
	goto $label$39 
	
.LABEL $label$157
	if ( ((*($4) & [1]) == 0) ){ goto $label$71 }
	$19 = [42]
	goto $label$39 
	
.LABEL $label$156
	CALL _ZdlPv(*($16))
	$19 = [23]
	goto $label$39 
	
.LABEL $label$155
	CALL eosio_assert([1], [9206])     # .data 9206 -> ["cannot increment end iterator"]
	$6	 = CALL db_next_i64(*($6 + [44]), ($2 + [40]))
	if ( ((int_32)$6 >= (int_32)[0]) ){ goto $label$70 }
	$19 = [25]
	goto $label$39 
	
.LABEL $label$154
	$7	 = *($14)
	if ( ($7 == 0) ){ goto $label$85 }
	$19 = [26]
	goto $label$39 
	
.LABEL $label$153
	$6	 = *($15)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$68 }
	$19 = [27]
	goto $label$39 
	
.LABEL $label$152
	$6	 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$67 }
	$19 = [28]
	goto $label$39 
	
.LABEL $label$151
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$66 }
	$19 = [29]
	goto $label$39 
	
.LABEL $label$150
	CALL _ZdlPv(*(($5 + [16])))
	$19 = [30]
	goto $label$39 
	
.LABEL $label$149
	CALL _ZdlPv($5)
	$19 = [31]
	goto $label$39 
	
.LABEL $label$148
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$69 }
	$19 = [32]
	goto $label$39 
	
.LABEL $label$147
	$6 = *($14)
	goto $label$65 
	
.LABEL $label$146
	*($12) = $8
	*($13) = (int_64)-1
	*($14) = (int_64)0
	*((($2 + [144]) + [32])) = [0]
	$20	 = *($0)
	*($2 + [144]) = $20
	$6	 = CALL $40(($2 + [144]), CALL $fimport$12($20, $8, (int_64)3607749779137757184, (int_64)1112756037))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($2 + [144])), [9056])     # .data 9056 -> ["object passed to iterator_to is not in multi_index"]
	$8	 = *($6)
	CALL multi3(($2 + [24]), $8, (int_64)$8 >> (int_64)63), $10, (int_64)$10 >> (int_64)63))
	$20	 = *((($2 + [24]) + [8]))
	$8	 = *($2 + [24])
	CALL eosio_assert(( (uint_64)($8 <= (int_64)4611686018427387904) ? ((int_64)$20 < (int_64)0) : (int_64)($20 == 0) ), [9107])     # .data 9107 -> ["multiplication overflow"]
	CALL eosio_assert(( ((uint_64)$8 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$20 > (int_64)-1) : ((int_64)$20 == (int_64)-1) ), [9131])     # .data 9131 -> ["multiplication underflow"]
	$20	 = *($3)
	CALL eosio_assert(((int_64)$20 != (int_64)0), [9156])     # .data 9156 -> ["divide by zero"]
	CALL eosio_assert((((int_64)$20 != (int_64)-1) | ((int_64)$8 != (int_64)-9223372036854775808)), [9171])     # .data 9171 -> ["signed division overflow"]
	$20	 = ((int_64)$8 / (int_64)$20)
	if ( ((int_64)$20 < (int_64)1) ){ goto $label$83 }
	$19 = [11]
	goto $label$39 
	
.LABEL $label$145
	$8	 = *($0)
	if ( ((int_64)$8 == (int_64)*($18)) ){ goto $label$82 }
	$19 = [12]
	goto $label$39 
	
.LABEL $label$144
	*((($2 + [88]) + [8])) = (int_64)3617214756542218240
	*($2 + [88]) = $8
	$21 = *($18)
	*((($2 + [40]) + [16])) = $20
	*((($2 + [40]) + [24])) = $11
	*((($2 + [40]) + [8])) = $21
	*($2 + [40]) = $8
	CALL $107($4, ($2 + [264]))
	CALL $39(($2 + [320]), CALL $38(($2 + [104]), ($2 + [88]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($2 + [40])))
	$6	 = *($2 + [320])
	CALL send_inline($6, (*($2 + [324]) - $6))
	$6	 = *($2 + [320])
	if ( ($6 == 0) ){ goto $label$77 }
	$19 = [13]
	goto $label$39 
	
.LABEL $label$143
	*($2 + [324]) = $6
	CALL _ZdlPv($6)
	$19 = [14]
	goto $label$39 
	
.LABEL $label$142
	$6	 = *((($2 + [104]) + [28]))
	if ( ($6 == 0) ){ goto $label$76 }
	$19 = [15]
	goto $label$39 
	
.LABEL $label$141
	*((($2 + [104]) + [32])) = $6
	CALL _ZdlPv($6)
	$19 = [16]
	goto $label$39 
	
.LABEL $label$140
	$6	 = *((($2 + [104]) + [16]))
	if ( ($6 == 0) ){ goto $label$75 }
	$19 = [17]
	goto $label$39 
	
.LABEL $label$139
	*($17) = $6
	CALL _ZdlPv($6)
	$19 = [18]
	goto $label$39 
	
.LABEL $label$138
	if ( ((*($4) & [1]) == 0) ){ goto $label$81 }
	$19 = [19]
	goto $label$39 
	
.LABEL $label$137
	CALL _ZdlPv(*($16))
	$19 = [4]
	goto $label$39 
	
.LABEL $label$136
	$7	 = *($14)
	if ( ($7 == 0) ){ goto $label$88 }
	$19 = [5]
	goto $label$39 
	
.LABEL $label$135
	$6	 = *($15)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$79 }
	$19 = [6]
	goto $label$39 
	
.LABEL $label$134
	$6	 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$78 }
	$19 = [7]
	goto $label$39 
	
.LABEL $label$133
	CALL _ZdlPv($5)
	$19 = [8]
	goto $label$39 
	
.LABEL $label$132
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$80 }
	$19 = [9]
	goto $label$39 
	
.LABEL $label$131
	$6 = *($14)
	goto $label$87 
	
.LABEL $label$130
	$6 = $7
	$19 = [33]
	goto $label$39 
	
.LABEL $label$129
	*($15) = $7
	CALL _ZdlPv($6)
	goto $label$86 
	
.LABEL $label$128
	$6 = $7
	$19 = [0]
	goto $label$39 
	
.LABEL $label$127
	*($15) = $7
	CALL _ZdlPv($6)
	$19 = [1]
	goto $label$39 
	
.LABEL $label$126
	CALL eosio_assert([1], [9206])     # .data 9206 -> ["cannot increment end iterator"]
	$6	 = CALL db_next_i64(*($18 + [12]), ($2 + [40]))
	if ( ((int_32)$6 >= (int_32)[0]) ){ goto $label$84 }
	$19 = [43]
	goto $label$39 
	
.LABEL $label$125
	$6	 = *($1)
	$5	 = ($1 + [4])
	$4	 = CALL $147([8970])
	if ( ((int_32)$4 != (int_32)( *($5) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$61 }     # .data 8970 -> ["daily"]
	$19 = [77]
	goto $label$39 
	
.LABEL $label$124
	if ( (CALL $115($1, [0], [-1], [8970], $4) == 0) ){ goto $label$60 }     # .data 8970 -> ["daily"]
	$19 = [44]
	goto $label$39 
	
.LABEL $label$123
	$6	 = *($1)
	$4	 = CALL $147([8989])
	if ( ((int_32)$4 != (int_32)( *($5) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$59 }     # .data 8989 -> ["weekly"]
	$19 = [75]
	goto $label$39 
	
.LABEL $label$122
	if ( CALL $115($1, [0], [-1], [8989], $4) ){ goto $label$58 }     # .data 8989 -> ["weekly"]
	$19 = [76]
	goto $label$39 
	
.LABEL $label$121
	$8 = *($0)
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9236])     # .data 9236 -> ["cannot pass end iterator to modify"]
	CALL $41(($2 + [280]), $9, $8, ($2 + [40]))
	$4	 = *($2 + [208])
	if ( $4 ){ goto $label$55 }
	goto $label$56 
	
.LABEL $label$120
	$8 = *($0)
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9236])     # .data 9236 -> ["cannot pass end iterator to modify"]
	CALL $42(($2 + [280]), $9, $8, ($2 + [40]))
	$19 = [45]
	goto $label$39 
	
.LABEL $label$119
	$4	 = *($2 + [208])
	if ( ($4 == 0) ){ goto $label$57 }
	$19 = [46]
	goto $label$39 
	
.LABEL $label$118
	$3	 = ($2 + [212])
	$6	 = *($3)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$54 }
	$19 = [47]
	goto $label$39 
	
.LABEL $label$117
	$19 = [48]
	goto $label$39 
	
.LABEL $label$116
	$6	 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$52 }
	$19 = [49]
	goto $label$39 
	
.LABEL $label$115
	CALL _ZdlPv($5)
	$19 = [50]
	goto $label$39 
	
.LABEL $label$114
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$53 }
	$19 = [51]
	goto $label$39 
	
.LABEL $label$113
	$6 = *(($2 + [208]))
	goto $label$51 
	
.LABEL $label$112
	$6 = $4
	$19 = [52]
	goto $label$39 
	
.LABEL $label$111
	*($3) = $4
	CALL _ZdlPv($6)
	$19 = [53]
	goto $label$39 
	
.LABEL $label$110
	$4	 = *($2 + [248])
	if ( ($4 == 0) ){ goto $label$50 }
	$19 = [54]
	goto $label$39 
	
.LABEL $label$109
	$3	 = ($2 + [252])
	$6	 = *($3)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$49 }
	$19 = [55]
	goto $label$39 
	
.LABEL $label$108
	$19 = [56]
	goto $label$39 
	
.LABEL $label$107
	$6	 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$47 }
	$19 = [57]
	goto $label$39 
	
.LABEL $label$106
	CALL _ZdlPv($5)
	$19 = [58]
	goto $label$39 
	
.LABEL $label$105
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$48 }
	$19 = [59]
	goto $label$39 
	
.LABEL $label$104
	$6 = *(($2 + [248]))
	goto $label$46 
	
.LABEL $label$103
	$6 = $4
	$19 = [60]
	goto $label$39 
	
.LABEL $label$102
	*($3) = $4
	CALL _ZdlPv($6)
	$19 = [61]
	goto $label$39 
	
.LABEL $label$101
	if ( ((*($2 + [264]) & [1]) == 0) ){ goto $label$45 }
	$19 = [62]
	goto $label$39 
	
.LABEL $label$100
	CALL _ZdlPv(*(($2 + [272])))
	$19 = [63]
	goto $label$39 
	
.LABEL $label$99
	$4	 = *($2 + [304])
	if ( ($4 == 0) ){ goto $label$44 }
	$19 = [64]
	goto $label$39 
	
.LABEL $label$98
	$3	 = ($2 + [308])
	$6	 = *($3)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$43 }
	$19 = [65]
	goto $label$39 
	
.LABEL $label$97
	$19 = [66]
	goto $label$39 
	
.LABEL $label$96
	$6	 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$41 }
	$19 = [67]
	goto $label$39 
	
.LABEL $label$95
	CALL _ZdlPv($5)
	$19 = [68]
	goto $label$39 
	
.LABEL $label$94
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$42 }
	$19 = [69]
	goto $label$39 
	
.LABEL $label$93
	$6 = *(($2 + [304]))
	goto $label$40 
	
.LABEL $label$92
	$6 = $4
	$19 = [70]
	goto $label$39 
	
.LABEL $label$91
	*($3) = $4
	CALL _ZdlPv($6)
	$19 = [71]
	goto $label$39 
	
.LABEL $label$90
	$global$0 = ($2 + [336])
	return 
	
.LABEL $label$89
	$19 = [3]
	goto $label$39 
	
.LABEL $label$88
	$19 = [1]
	goto $label$39 
	
.LABEL $label$87
	$19 = [0]
	goto $label$39 
	
.LABEL $label$86
	$19 = [1]
	goto $label$39 
	
.LABEL $label$85
	$19 = [1]
	goto $label$39 
	
.LABEL $label$84
	$19 = [2]
	goto $label$39 
	
.LABEL $label$83
	$19 = [4]
	goto $label$39 
	
.LABEL $label$82
	$19 = [4]
	goto $label$39 
	
.LABEL $label$81
	$19 = [4]
	goto $label$39 
	
.LABEL $label$80
	$19 = [6]
	goto $label$39 
	
.LABEL $label$79
	$19 = [10]
	goto $label$39 
	
.LABEL $label$78
	$19 = [8]
	goto $label$39 
	
.LABEL $label$77
	$19 = [14]
	goto $label$39 
	
.LABEL $label$76
	$19 = [16]
	goto $label$39 
	
.LABEL $label$75
	$19 = [18]
	goto $label$39 
	
.LABEL $label$74
	$19 = [25]
	goto $label$39 
	
.LABEL $label$73
	$19 = [22]
	goto $label$39 
	
.LABEL $label$72
	$19 = [23]
	goto $label$39 
	
.LABEL $label$71
	$19 = [23]
	goto $label$39 
	
.LABEL $label$70
	$19 = [24]
	goto $label$39 
	
.LABEL $label$69
	$19 = [27]
	goto $label$39 
	
.LABEL $label$68
	$19 = [34]
	goto $label$39 
	
.LABEL $label$67
	$19 = [31]
	goto $label$39 
	
.LABEL $label$66
	$19 = [30]
	goto $label$39 
	
.LABEL $label$65
	$19 = [33]
	goto $label$39 
	
.LABEL $label$64
	$19 = [37]
	goto $label$39 
	
.LABEL $label$63
	$19 = [39]
	goto $label$39 
	
.LABEL $label$62
	$19 = [41]
	goto $label$39 
	
.LABEL $label$61
	$19 = [44]
	goto $label$39 
	
.LABEL $label$60
	$19 = [78]
	goto $label$39 
	
.LABEL $label$59
	$19 = [45]
	goto $label$39 
	
.LABEL $label$58
	$19 = [45]
	goto $label$39 
	
.LABEL $label$57
	$19 = [53]
	goto $label$39 
	
.LABEL $label$56
	$19 = [53]
	goto $label$39 
	
.LABEL $label$55
	$19 = [46]
	goto $label$39 
	
.LABEL $label$54
	$19 = [74]
	goto $label$39 
	
.LABEL $label$53
	$19 = [48]
	goto $label$39 
	
.LABEL $label$52
	$19 = [50]
	goto $label$39 
	
.LABEL $label$51
	$19 = [52]
	goto $label$39 
	
.LABEL $label$50
	$19 = [61]
	goto $label$39 
	
.LABEL $label$49
	$19 = [73]
	goto $label$39 
	
.LABEL $label$48
	$19 = [56]
	goto $label$39 
	
.LABEL $label$47
	$19 = [58]
	goto $label$39 
	
.LABEL $label$46
	$19 = [60]
	goto $label$39 
	
.LABEL $label$45
	$19 = [63]
	goto $label$39 
	
.LABEL $label$44
	$19 = [71]
	goto $label$39 
	
.LABEL $label$43
	$19 = [72]
	goto $label$39 
	
.LABEL $label$42
	$19 = [66]
	goto $label$39 
	
.LABEL $label$41
	$19 = [68]
	goto $label$39 
	
.LABEL $label$40
	$19 = [70]
	goto $label$39 
	(unreachable)
	(unreachable)
	$19
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3	 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7	 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $153($7)
	goto $label$2 
	
.LABEL $label$3
	$2	 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = [0]
	*($4 + [64]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	CALL $33(($4 + [48]), ($4 + [64]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4)
	$3	 = *($8)
	*((($4 + [96]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0	 = *($4 + [80])
	*($4 + [32]) = $0
	*($4 + [96]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$8 = CALL $107(($4 + [80]), ($4 + [64]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5	 = CALL $107(($4 + [96]), $8)
	CALL void $3((int_32 $5), (int_32 $6))
	if ( (*($4 + [96]) & [1]) ){ goto $label$11 }
	if ( (*($4 + [80]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	
.LABEL $label$8
	$2 = [1]
	if ( (*($4 + [64]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $156($2)
	$2 = [1]
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [72])))
	$global$0 = ($4 + [112])
	return $2
	
.LABEL $label$5
	$global$0 = ($4 + [112])
	return $2
}

.data 10157 -> ["quantity exceeds available supply\00"]
.data 10131 -> ["symbol precision mismatch\00"]
.data 10102 -> ["must issue positive quantity\00"]
.data 10085 -> ["invalid quantity\00"]
.data 10025 -> ["token with symbol does not exist, create token before issue\00"]
.data 9056 -> ["object passed to iterator_to is not in multi_index\00"]
.data 9996 -> ["memo has more than 256 bytes\00"]
.data 9625 -> ["invalid symbol name\00"]
void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$4	 = ($global$0 - [208])
	$global$0 = $4
	$5 = [0]
	$6	 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10	 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10	 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [9625])     # .data 9625 -> ["invalid symbol name"]
	$5	 = *($3)
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = uint_32($5 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($5 <= [257]), [9996])     # .data 9996 -> ["memo has more than 256 bytes"]
	$9 = [0]
	*(($4 + [136])) = [0]
	*($4 + [120]) = (int_64)-1
	*($4 + [128]) = (int_64)0
	$7	 = *($0)
	*($4 + [104]) = $7
	*($4 + [112]) = $6
	$11 = [0]
	$5	 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$11	 = CALL $54(($4 + [104]), $5)
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [104])), [9056])     # .data 9056 -> ["object passed to iterator_to is not in multi_index"]
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [10025])     # .data 10025 -> ["token with symbol does not exist, create token before issue"]
	CALL require_auth(*($11 + [32]))
	$12	 = ($2 + [8])
	$13 = *($12)
	$6	 = *($2)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$7 = (uint_64)$13 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$7 = $8
	$9 = [1]
	$10	 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$7 = $8
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10	 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$13 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$9 = [0]
	
.LABEL $label$9
	CALL eosio_assert($9, [10085])     # .data 10085 -> ["invalid quantity"]
	CALL eosio_assert(((int_64)$6 > (int_64)0), [10102])     # .data 10102 -> ["must issue positive quantity"]
	CALL eosio_assert(((int_64)$13 == (int_64)*($11 + [8])), [10131])     # .data 10131 -> ["symbol precision mismatch"]
	CALL eosio_assert(((int_64)$6 <= (int_64))(*($11 + [16]) - *($11))), [10157])     # .data 10157 -> ["quantity exceeds available supply"]
	*($4 + [144]) = $2
	CALL $57(($4 + [104]), $11, (int_64)0, ($4 + [144]))
	$5	 = ($11 + [32])
	$7 = *($5)
	*(($9 = (($4 + [88]) + [8]))) = *($12)
	$8 = *($2)
	*(($4 + [8])) = *($9)
	*($4 + [88]) = $8
	*($4) = *($4 + [88])
	CALL $58($0, $7, $4, $7)
	$7	 = *($5)
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$14 }
	$8 = *($0)
	*($4 + [24]) = (int_64)3617214756542218240
	*($4 + [16]) = $7
	*((($9 = CALL _Znwj([16])) + [8])) = *($4 + [24])
	*($9) = *($4 + [16])
	$7 = *($5)
	*(($5 = (($4 + [40]) + [24]))) = *(($2 + [8]))
	*($4 + [48]) = $1
	*($4 + [40]) = $7
	*($4 + [56]) = *($2)
	CALL $107((($4 + [40]) + [32]), $3)
	*((($4 + [144]) + [24])) = *($5)
	$5	 = (($4 + [40]) + [40])
	*(($10 = (($4 + [144]) + [40]))) = *($5)
	*($5) = [0]
	$5	 = ($9 + [16])
	*($4 + [196]) = $5
	*($4 + [192]) = $9
	*($4 + [200]) = $5
	*($4 + [144]) = *($4 + [40])
	*($4 + [152]) = *($4 + [48])
	*($4 + [160]) = *($4 + [56])
	*($4 + [176]) = *($4 + [72])
	*($4 + [72]) = (int_64)0
	CALL $59($8, (int_64)-3617168760277827584, ($4 + [192]), ($4 + [144]))
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$15
	$5	 = *($4 + [192])
	if ( ($5 == 0) ){ goto $label$16 }
	*($4 + [196]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$16
	if ( ((*(($4 + [72])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [80])))
	
.LABEL $label$14
	$7 = *($0)
	*($4 + [16]) = $1
	CALL $107(($4 + [24]), $3)
	*($4 + [152]) = (int_64)-8279610709314294272
	*($4 + [144]) = $7
	*(($5 = CALL _Znwj([16]))) = $7
	*($5 + [8]) = (int_64)3617214756542218240
	$9	 = ($5 + [16])
	*(($4 + [168])) = $9
	*(($4 + [164])) = $9
	*($4 + [160]) = $5
	CALL $60(($4 + [172]), ($4 + [16]))
	CALL $39(($4 + [192]), ($4 + [144]))
	$5	 = *($4 + [192])
	CALL send_inline($5, (*($4 + [196]) - $5))
	$5	 = *($4 + [192])
	if ( ($5 == 0) ){ goto $label$17 }
	*($4 + [196]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$5	 = *($4 + [172])
	if ( ($5 == 0) ){ goto $label$18 }
	*(($4 + [176])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$18
	$5	 = *($4 + [160])
	if ( ($5 == 0) ){ goto $label$19 }
	*(($4 + [164])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$19
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($4 + [32])))
	
.LABEL $label$20
	$10	 = *($4 + [128])
	if ( ($10 == 0) ){ goto $label$21 }
	$11	 = ($4 + [132])
	$5	 = *($11)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$23 }
	
.LOOP $label$24:
	$5	 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$25 }
	CALL _ZdlPv($9)
	
.LABEL $label$25
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$24 }
	$5 = *(($4 + [128]))
	goto $label$22 
	
.LABEL $label$23
	$5 = $10
	
.LABEL $label$22
	*($11) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$21
	$global$0 = ($4 + [208])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4	 = *($0)
	$5	 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6	 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4	 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7	 = ($4 << [1])
	$7	 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $116($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7	 = *($0)
	$2	 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4	 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7	 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

.data 9056 -> ["object passed to iterator_to is not in multi_index\00"]
.data 10131 -> ["symbol precision mismatch\00"]
.data 10469 -> ["symbol does not exist\00"]
void .FUNC $18 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4	 = ($global$0 - [96])
	$global$0 = $4
	CALL require_auth($3)
	$5 = *($2)
	*((($4 + [56]) + [32])) = [0]
	*($4 + [72]) = (int_64)-1
	*($4 + [80]) = (int_64)0
	*($4 + [56]) = *($0)
	$5	 = (uint_64)$5 >> (uint_64)(int_64)8
	*($4 + [64]) = $5)
	CALL eosio_assert(((int_64)*(CALL $35(($4 + [56]), $5, [10469]) + [8]) == (int_64)*($2)), [10131])     # .data 10469 -> ["symbol does not exist"]     # .data 10131 -> ["symbol precision mismatch"]
	*((($4 + [16]) + [32])) = [0]
	*($4 + [32]) = (int_64)-1
	*($4 + [40]) = (int_64)0
	$6	 = *($0)
	*($4 + [16]) = $6
	*($4 + [24]) = $1
	$0	 = CALL db_find_i64($6, $1, (int_64)3607749779137757184, $5)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $40(($4 + [16]), $0) + [16]) == (int_32)($4 + [16])), [9056])     # .data 9056 -> ["object passed to iterator_to is not in multi_index"]
	$7	 = *($4 + [40])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($4 + [8]) = $2
	CALL $64($4, ($4 + [16]), $3, ($4 + [8]))
	$7	 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8	 = ($4 + [44])
	$2	 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$6:
	$2	 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($4 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $7
	
.LABEL $label$4
	*($8) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$7	 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$8 }
	$8	 = ($4 + [84])
	$2	 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$10 }
	
.LOOP $label$11:
	$2	 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	CALL _ZdlPv($0)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($4 + [80]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $7
	
.LABEL $label$9
	*($8) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$global$0 = ($4 + [96])
}

.data 9051 -> ["read\00"]
int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3	 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7	 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $153($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2	 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [48]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($4 + [32]), $2, [8])
	*($4) = (int_64)0
	$3	 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy($4, ($2 + [8]), [8])
	*($4 + [40]) = *($4)
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy((($4 + [32]) + [16]), ($2 + [16]), [8])
	*(($4 + [20])) = ($2 + [24])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$0 = *($4 + [32])
	$1 = *($4 + [48])
	*($4 + [56]) = *($4 + [40])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 ($4 + [56])), (int_32 $1), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $156($2)
	
.LABEL $label$6
	$global$0 = ($4 + [64])
	return [1]
}

.data 9236 -> ["cannot pass end iterator to modify\00"]
.data 9056 -> ["object passed to iterator_to is not in multi_index\00"]
void .FUNC $58 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4	 = ($global$0 - [64])
	$global$0 = $4
	*(($4 + [56])) = [0]
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	$5	 = *($0)
	*($4 + [24]) = $5
	$6 = *($2 + [8])
	*($4 + [32]) = $1
	$0	 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$3 }
	$0	 = CALL $40(($4 + [24]), $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [24])), [9056])     # .data 9056 -> ["object passed to iterator_to is not in multi_index"]
	*($4 + [8]) = $2
	CALL eosio_assert([1], [9236])     # .data 9236 -> ["cannot pass end iterator to modify"]
	CALL $91(($4 + [24]), $0, (int_64)0, ($4 + [8]))
	$7	 = *($4 + [48])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($4 + [16]) = $2
	CALL $92(($4 + [8]), ($4 + [24]), $3, ($4 + [16]))
	$7	 = *($4 + [48])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8	 = ($4 + [52])
	$2	 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$6:
	$2	 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($4 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $7
	
.LABEL $label$4
	*($8) = $7
	CALL _ZdlPv($2)
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $59 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4	 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8	 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5	 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7	 = CALL _Znwj($8)
	$5	 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6	 = *($2)
	$2	 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6	 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7	 = *($3 + [32])
	$2	 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0	 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $66($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $70(($4 + [72]), ($4 + [64]))
	CALL $39(($4 + [80]), ($4 + [24]))
	$7	 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7	 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7	 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7	 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7	 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $116(($4 + [8]))
}

.data 9028 -> ["error reading iterator\00"]
int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2	 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5	 = *(($0 + [28]))
	$4	 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5	 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4	 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9028])     # .data 9028 -> ["error reading iterator"]
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $153($4)
	goto $label$4 
	
.LABEL $label$5
	$2	 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	CALL $88(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6	 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7	 = ($0 + [28])
	$8	 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $89(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $156($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

.data 9427 -> ["cannot create objects in table of another contract\00"]
void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4	 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert9()), [9427])     # .data 9427 -> ["cannot create objects in table of another contract"]
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = $1
	CALL $85(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2	 = *($3)
	*($4 + [16]) = $2
	$5	 = *($3 + [44])
	*($4 + [12]) = $5
	$6	 = ($1 + [28])
	$7	 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $80(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

.data 9196 -> ["write\00"]
.data 9368 -> ["updater cannot change primary key when modifying an object\00"]
.data 9317 -> ["cannot modify objects in table of another contract\00"]
.data 9271 -> ["object passed to modify is not in multi_index\00"]
void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4	 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9271])     # .data 9271 -> ["object passed to modify is not in multi_index"]
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert9()), [9317])     # .data 9317 -> ["cannot modify objects in table of another contract"]
	$3	 = *(*($3) + [4])
	*($1 + [24]) = *($3 + [16])
	*(($1 + [32])) = *(($3 + [24]))
	$6 = *($1)
	CALL eosio_assert([1], [9368])     # .data 9368 -> ["updater cannot change primary key when modifying an object"]
	$3	 = *($1 + [8])
	$7	 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [24])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [8])
	$9 = ($1 + [24])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8	 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $153($3)
	goto $label$2 
	
.LABEL $label$3
	$4	 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy($4, $1, [8])
	*($5 + [12]) = ($4 + [8])
	CALL $67(($5 + [8]), $7)
	CALL eosio_assert(((int_32)(*($5 + [16]) - *($5 + [12])) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($5 + [12]), $9, [8])
	$7	 = (*($5 + [12]) + [8])
	*($5 + [12]) = $7
	*($5 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($5 + [16]) - $7) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($5 + [12]), ($5 + [24]), [8])
	*($5 + [12]) = (*($5 + [12]) + [8])
	CALL db_update_i64(*($1 + [44]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $156($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

.data 9854 -> ["attempt to remove object that was not in multi_index\00"]
.data 9804 -> ["cannot erase objects in table of another contract\00"]
.data 9759 -> ["object passed to erase is not in multi_index\00"]
void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9759])     # .data 9759 -> ["object passed to erase is not in multi_index"]
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert9()), [9804])     # .data 9804 -> ["cannot erase objects in table of another contract"]
	$2	 = *($0 + [24])
	$3 = $2
	$4	 = ($0 + [28])
	$5	 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6	 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3	 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9854])     # .data 9854 -> ["attempt to remove object that was not in multi_index"]
	$2	 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7	 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5	 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3	 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3	 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

.data 9028 -> ["error reading iterator\00"]
int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2	 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5	 = *(($0 + [28]))
	$4	 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5	 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4	 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9028])     # .data 9028 -> ["error reading iterator"]
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $153($4)
	goto $label$4 
	
.LABEL $label$5
	$2	 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $73(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6	 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7	 = ($0 + [28])
	$8	 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $74(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $156($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

.data 9028 -> ["error reading iterator\00"]
int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2	 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5	 = *(($0 + [28]))
	$4	 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5	 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4	 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9028])     # .data 9028 -> ["error reading iterator"]
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $153($4)
	goto $label$4 
	
.LABEL $label$5
	$2	 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [16])
	*($3 + [40]) = $5
	CALL $71(($3 + [40]), ($3 + [32]))
	*($5 + [36]) = $1
	*($3 + [32]) = $5
	$6	 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [40]) = $6)
	*($3 + [12]) = $1
	$7	 = ($0 + [28])
	$8	 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $72(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $156($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2	 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $107(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0	 = *($0 + [4])
	$5	 = *($0 + [4])
	$3 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $107(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

.data 9368 -> ["updater cannot change primary key when modifying an object\00"]
.data 9707 -> ["addition overflow\00"]
.data 9688 -> ["addition underflow\00"]
.data 9645 -> ["attempt to add asset with different symbol\00"]
.data 9317 -> ["cannot modify objects in table of another contract\00"]
.data 9271 -> ["object passed to modify is not in multi_index\00"]
void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4	 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9271])     # .data 9271 -> ["object passed to modify is not in multi_index"]
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert9()), [9317])     # .data 9317 -> ["cannot modify objects in table of another contract"]
	$5	 = *($1 + [8])
	$3	 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [9645])     # .data 9645 -> ["attempt to add asset with different symbol"]
	$6	 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9688])     # .data 9688 -> ["addition underflow"]
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9707])     # .data 9707 -> ["addition overflow"]
	$5	 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [9368])     # .data 9368 -> ["updater cannot change primary key when modifying an object"]
	*($4 + [48]) = ($4 + [40])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [16])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [32])
	CALL $90(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $116 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $117 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC $114 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3	 = *($0)
	$4	 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5	 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5	 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2	 = ( $4 ? $2 : ($4 <= $2) )
	$4	 = ($5 - $1)
	$4	 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1	 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

.data 9056 -> ["object passed to iterator_to is not in multi_index\00"]
int_32 .FUNC $35 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4	 = *(($0 + [28]))
	$3	 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5	 = ($4 + [-24])
	$6	 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [9056])     # .data 9056 -> ["object passed to iterator_to is not in multi_index"]
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4	 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5	 = CALL $54($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [9056])     # .data 9056 -> ["object passed to iterator_to is not in multi_index"]
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2	 = ($2 + $1)
	$9	 = ($1 << [1])
	$2	 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3	 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2	 = *($0)
	$3	 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4	 = ((*($0) & [-2]) + [-1])
	$2	 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2	 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $112($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2	 = ($2 + $1)
	$10	 = ($1 << [1])
	$2	 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3	 = ($3 - $5)
	$7	 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4	 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2	 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2	 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1	 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2	 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2	 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2	 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

.data 19264 -> ["T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00"]
.data 19360 -> ["Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00"]
int_32 .FUNC $139 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL $138([19360], *([0] + [20]))     # .data 19360 -> ["Illegal byte sequence"]
	$1 = [0]
	
.LOOP $label$4:
	if ( ((int_32)*(($1 + [19264])) == (int_32)$0) ){ goto $label$3 }     # .data 19264 -> ["T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|"]
	$2 = [87]
	$1	 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[87]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$1 = [19360]     # .data 19360 -> ["Illegal byte sequence"]
	
.LOOP $label$5:
	$0 = *($1)
	$3	 = ($1 + [1])
	$1 = $3
	if ( $0 ){ goto $label$5 }
	$1 = $3
	$2	 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	return CALL $138($3, *([0] + [20]))
	return .LABEL $label$1
}

int_32 .FUNC $118 (int_32 $0)
{
	return ( ($0 | [32]) ? $0 : (($0 + [-65]) <= [26]) )
}

int_32 .FUNC $119 ()
{
	return [10668]
}

int_32 .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3	 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $153($1)
	
.LABEL $label$2
	*(CALL $119()) = [22]
	return [0]
	
.LABEL $label$1
	$4	 = ($0 + [-1])
	$0	 = CALL $153(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2	 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3	 = ($0 + [-4])
	$4	 = *($3)
	$1	 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4	 = ($0 + ($4 & [-8]))
	$5	 = ($4 + [-8])
	$6 = *($5)
	$7	 = ($2 - $0)
	*($3) = ($1 | $7)
	$3	 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1	 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $156($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0	 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $153 (int_32 $0)
{
	return CALL $154([10708], $0)
}

void .FUNC $150 (int_32 $0)
{
	*($0) = [0]
}

int_32 .FUNC $151 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $119())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1	 = CALL $152($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $156 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1	 = *([0] + [19092])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18900]
	$3 = (((int_32)$1 * (int_32)[12]) + [18900])
	
.LOOP $label$3:
	$1	 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2	 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

.data 8192 -> ["\00Assertion failed: %s (%s: %s: %d)\n\00-+   0X0x\00"]
int_32 .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2	 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3	 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4	 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])     # .data 8192 -> [""]
	if ( $4 ){ goto $label$6 }
	$2	 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]     # .data 8192 -> [""]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2	 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1	 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1	 = CALL $155($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8	 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9	 = ($1 + [8192])
	$1	 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8514])     # .data 8192 -> [""]
	$10	 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12	 = ($2 + [-4])
	$13	 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4	 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4	 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1	 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2	 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2	 = (*($6) + [1])
	$2	 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

.data 8192 -> ["\00Assertion failed: %s (%s: %s: %d)\n\00-+   0X0x\00"]
int_32 .FUNC $155 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10700]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10704])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10700]) = [1]
	$2	 = ($2 << [16])
	*([0] + [10704]) = $2
	
.LABEL $label$1
	$3 = $2
	$5	 = (current_memory)
	$4	 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10704])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10704]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5	 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10700]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10700]) = [1]
	$3	 = ($3 << [16])
	*([0] + [10704]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])     # .data 8192 -> [""]
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8	 = (current_memory)
	$7	 = (($2 + [7]) & [-8])
	$5	 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10704])
	
.LABEL $label$10
	*([0] + [10704]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5	 = *($4)
	$1	 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6	 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7	 = ($1 + [8200])
	$1	 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4	 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2     # .data 8192 -> [""]
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3	 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1	 = ($3 + [8200])
	$2	 = *($1)
	$5	 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2	 = ($0 + [8388])
	$3	 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2	 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0)
	$0 = CALL $107(($2 + [8]), $1)
	*($2 + [32]) = (int_64)-4373711020246433792
	*($2 + [24]) = $3
	*(($1 = CALL _Znwj([16]))) = $3
	*($1 + [8]) = (int_64)3617214756542218240
	*(($2 + [60])) = [0]
	$4	 = ($1 + [16])
	*(($2 + [48])) = $4
	*(($2 + [44])) = $4
	*($2 + [40]) = $1
	*($2 + [52 align=4]) = (int_64)0
	$1	 = *($2 + [8])
	$1	 = ( *($2 + [12]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$3 = (CASTING uint_64)(uint_32 $1)
	$4 = ($2 + [52])
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$3	 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $66($4, $1)
	$4 = *(($2 + [56]))
	$1 = *(($2 + [52]))
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	$1 = [0]
	
.LABEL $label$2
	*($2 + [68]) = $1
	*($2 + [64]) = $1
	*($2 + [72]) = $4
	CALL $67(($2 + [64]), $0)
	CALL $39(($2 + [64]), ($2 + [24]))
	$1	 = *($2 + [64])
	CALL send_inline($1, (*($2 + [68]) - $1))
	$1	 = *($2 + [64])
	if ( ($1 == 0) ){ goto $label$4 }
	*($2 + [68]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$1	 = *($2 + [52])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($2 + [56])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$1	 = *($2 + [40])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($2 + [44])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($2 + [16]))
	
.LABEL $label$7
	$global$0 = ($2 + [80])
}

.data 10638 -> ["Invalid token transfer.\00"]
.data 10613 -> ["Only accepts CORE_SYMBOL\00"]
.data 9523 -> ["only uppercase letters allowed in symbol_code string\00"]
.data 9478 -> ["string is too long to be a valid symbol_code\00"]
.data 8630 -> ["EOS\00-0X+0X 0X-0x+0x 0x\00"]
void .FUNC $28 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$5	 = ($global$0 - [128])
	$global$0 = $5
	$6	 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	$7	 = CALL $147([8630])
	if ( ($7 <= [8]) ){ goto $label$5 }     # .data 8630 -> ["EOS"]
	CALL eosio_assert([0], [9478])     # .data 9478 -> ["string is too long to be a valid symbol_code"]
	goto $label$4 
	
.LABEL $label$5
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = (int_64)0
	
.LOOP $label$6:
	$8	 = *(($7 + [8629]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9523])     # .data 9523 -> ["only uppercase letters allowed in symbol_code string"]
	
.LABEL $label$7
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7	 = ($7 + [-1])
	if ( $7 ){ goto $label$6 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$2 
	
.LABEL $label$3
	$6 = (int_64)4
	
.LABEL $label$2
	$9	 = *($3 + [8])
	CALL eosio_assert(((int_64)$9 == (int_64)$6), [10613])     # .data 10613 -> ["Only accepts CORE_SYMBOL"]
	$8 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$8 }
	$6 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$6 = $9
	$8 = [1]
	$10	 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$6 = $9
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$10	 = ($7 + [1])
	$7 = $10
	if ( $8 ){ goto $label$12 }
	$8 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$8 = [0]
	
.LABEL $label$8
	CALL eosio_assert($8, [10638])     # .data 10638 -> ["Invalid token transfer."]
	*($5 + [64]) = (int_64)3617214756542218240
	$6	 = *($0)
	*($5 + [56]) = $6
	*(($5 + [32])) = *(($3 + [8]))
	*($5 + [16]) = $2
	*($5 + [8]) = $1
	*($5 + [24]) = *($3)
	CALL $107(($5 + [40]), $4)
	$7	 = CALL $38(($5 + [72]), ($5 + [56]), $6, (int_64)-3075276115059483248, ($5 + [8]))
	CALL $39(($5 + [112]), $7)
	$8	 = *($5 + [112])
	CALL send_inline($8, (*($5 + [116]) - $8))
	$8	 = *($5 + [112])
	if ( ($8 == 0) ){ goto $label$13 }
	*($5 + [116]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	$8	 = *($7 + [28])
	if ( ($8 == 0) ){ goto $label$14 }
	*(($7 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$14
	$8	 = *($7 + [16])
	if ( ($8 == 0) ){ goto $label$15 }
	*(($7 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$15
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($5 + [48])))
	
.LABEL $label$1
	$global$0 = ($5 + [128])
}

.data 9427 -> ["cannot create objects in table of another contract\00"]
void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$4	 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert9()), [9427])     # .data 9427 -> ["cannot create objects in table of another contract"]
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $1
	$6	 = *($3)
	*($5 + [8]) = *($6 + [8])
	*($5 + [24]) = *($6 + [8])
	*($5 + [16]) = *($6)
	*($5 + [32]) = *(*($3 + [4]))
	*($4 + [48]) = ($4 + [40])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($5 + [16])
	*($4 + [64]) = $5
	*($4 + [72]) = ($5 + [32])
	CALL $90(($4 + [64]), ($4 + [56]))
	$7	 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	$6	 = CALL db_store_i64(*($1 + [8]), (int_64)-4157508551318700032, $2, $7), $4, [40]
	*($5 + [44]) = $6)
	if ( (uint_64)($7 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$1
	*($4 + [64]) = $5
	$7	 = (uint_64)*(($5 + [8])) >> (uint_64)(int_64)8
	*($4) = $7)
	*($4 + [40]) = $6
	$8	 = ($1 + [28])
	$3	 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $7
	*($3 + [16]) = $6
	*($4 + [64]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $74(($1 + [24]), ($4 + [64]), $4, ($4 + [40]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2	 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4	 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $106 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

.data 9051 -> ["read\00"]
int_32 .FUNC $21 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3	 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5	 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $153($5)
	goto $label$2 
	
.LABEL $label$3
	$2	 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [64]) = ($2 + $5)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($4 + [72]), $2, [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($4 + [24]), ($2 + [8]), [8])
	*($4 + [60]) = ($2 + [16])
	*($4 + [80]) = *($4 + [24])
	CALL $33(($4 + [56]), (($4 + [72]) + [16]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4 + [8])
	$3	 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0	 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [24])
	CALL $61(($4 + [128]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $156($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return $2
}

.data 10131 -> ["symbol precision mismatch\00"]
.data 10224 -> ["must retire positive quantity\00"]
.data 10085 -> ["invalid quantity\00"]
.data 10191 -> ["token with symbol does not exist\00"]
.data 9056 -> ["object passed to iterator_to is not in multi_index\00"]
.data 9996 -> ["memo has more than 256 bytes\00"]
.data 9625 -> ["invalid symbol name\00"]
void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3	 = ($global$0 - [160])
	$global$0 = $3
	$4 = [0]
	$5	 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	$6 = $5)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$8 = [1]
	$9	 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9	 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [9625])     # .data 9625 -> ["invalid symbol name"]
	$4	 = *($2)
	if ( ($4 & [1]) ){ goto $label$7 }
	$4 = uint_32($4 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$4 = *($2 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($4 <= [257]), [9996])     # .data 9996 -> ["memo has more than 256 bytes"]
	$8 = [0]
	*(($3 + [136])) = [0]
	*($3 + [120]) = (int_64)-1
	*($3 + [128]) = (int_64)0
	$6	 = *($0)
	*($3 + [104]) = $6
	*($3 + [112]) = $5
	$10 = [0]
	$4	 = CALL db_find_i64($6, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$10	 = CALL $54(($3 + [104]), $4)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($3 + [104])), [9056])     # .data 9056 -> ["object passed to iterator_to is not in multi_index"]
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [10191])     # .data 10191 -> ["token with symbol does not exist"]
	CALL require_auth(*($10 + [32]))
	$11	 = ($1 + [8])
	$5 = *($11)
	$12	 = *($1)
	if ( ((uint_64)((int_64)$12 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$6 = $7
	$8 = [1]
	$9	 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$6 = $7
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9	 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$13 }
	$8 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$8 = [0]
	
.LABEL $label$9
	CALL eosio_assert($8, [10085])     # .data 10085 -> ["invalid quantity"]
	CALL eosio_assert(((int_64)$12 > (int_64)0), [10224])     # .data 10224 -> ["must retire positive quantity"]
	CALL eosio_assert(((int_64)$5 == (int_64)*($10 + [8])), [10131])     # .data 10131 -> ["symbol precision mismatch"]
	*($3 + [48]) = $1
	CALL $62(($3 + [104]), $10, (int_64)0, ($3 + [48]))
	$4	 = ($10 + [32])
	$6 = *($4)
	*(($8 = (($3 + [88]) + [8]))) = *($11)
	$7 = *($1)
	*((($3 + [8]) + [8])) = *($8)
	*($3 + [88]) = $7
	*($3 + [8]) = *($3 + [88])
	CALL $63($0, $6, ($3 + [8]))
	$6 = *($0)
	*($3 + [24]) = *($4)
	CALL $107((($3 + [24]) + [8]), $2)
	*($3 + [56]) = (int_64)-8279610709314294272
	*($3 + [48]) = $6
	*(($4 = CALL _Znwj([16]))) = $6
	*($4 + [8]) = (int_64)3617214756542218240
	$8	 = ($4 + [16])
	*(($3 + [72])) = $8
	*(($3 + [68])) = $8
	*($3 + [64]) = $4
	CALL $60(($3 + [76]), ($3 + [24]))
	CALL $39(($3 + [144]), ($3 + [48]))
	$4	 = *($3 + [144])
	CALL send_inline($4, (*($3 + [148]) - $4))
	$4	 = *($3 + [144])
	if ( ($4 == 0) ){ goto $label$14 }
	*($3 + [148]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$4	 = *($3 + [76])
	if ( ($4 == 0) ){ goto $label$15 }
	*(($3 + [80])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$4	 = *($3 + [64])
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [68])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$17
	$9	 = *($3 + [128])
	if ( ($9 == 0) ){ goto $label$18 }
	$10	 = ($3 + [132])
	$4	 = *($10)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$20 }
	
.LOOP $label$21:
	$4	 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$22 }
	CALL _ZdlPv($8)
	
.LABEL $label$22
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$21 }
	$4 = *(($3 + [128]))
	goto $label$19 
	
.LABEL $label$20
	$4 = $9
	
.LABEL $label$19
	*($10) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$18
	$global$0 = ($3 + [160])
}

.data 9051 -> ["read\00"]
int_32 .FUNC $23 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3	 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7	 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $153($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2	 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [56]) + [16]))) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($4 + [56]), $2, [8])
	$8	 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy((($4 + [56]) + [8]), ($2 + [8]), [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($4 + [24]), ($2 + [16]), [8])
	*($3) = *($4 + [24])
	*(($4 + [44])) = ($2 + [24])
	*((($4 + [24]) + [24])) = ($2 + $7)
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $2
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4 + [64])
	$0 = *($4 + [56])
	*((($4 + [96]) + [8])) = *($8)
	*($4 + [96]) = *($4 + [80])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1	 = *((($4 + [96]) + [8]))
	*((($4 + [112]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1	 = *($4 + [96])
	*($4 + [8]) = $1
	*($4 + [112]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $156($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

.data 9963 -> ["token with symbol already exists\00"]
.data 9056 -> ["object passed to iterator_to is not in multi_index\00"]
.data 9935 -> ["max-supply must be positive\00"]
.data 9920 -> ["invalid supply\00"]
.data 9625 -> ["invalid symbol name\00"]
void .FUNC $22 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3	 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = $1
	CALL require_auth(*($0))
	$4 = [0]
	$5	 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$1 = $5)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $6
	$7 = [1]
	$8	 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8	 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9625])     # .data 9625 -> ["invalid symbol name"]
	$7 = [0]
	$9	 = *($2)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$4 = [0]
	$1 = $5
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $6
	$7 = [1]
	$8	 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8	 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [9920])     # .data 9920 -> ["invalid supply"]
	CALL eosio_assert(((int_64)$9 > (int_64)0), [9935])     # .data 9935 -> ["max-supply must be positive"]
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$1	 = *($0)
	*($3 + [16]) = $1
	*($3 + [24]) = $5
	$4	 = CALL db_find_i64($1, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $54(($3 + [16]), $4) + [40]) == (int_32)($3 + [16])), [9056])     # .data 9056 -> ["object passed to iterator_to is not in multi_index"]
	$4 = [0]
	goto $label$11 
	
.LABEL $label$12
	$4 = [1]
	
.LABEL $label$11
	CALL eosio_assert($4, [9963])     # .data 9963 -> ["token with symbol already exists"]
	$1 = *($0)
	*($3 + [8]) = $2
	*($3 + [12]) = ($3 + [56])
	CALL $55($3, ($3 + [16]), $1, ($3 + [8]))
	$8	 = *($3 + [40])
	if ( ($8 == 0) ){ goto $label$13 }
	$2	 = ($3 + [44])
	$4	 = *($2)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$15 }
	
.LOOP $label$16:
	$4	 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	CALL _ZdlPv($7)
	
.LABEL $label$17
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$16 }
	$4 = *(($3 + [40]))
	goto $label$14 
	
.LABEL $label$15
	$4 = $8
	
.LABEL $label$14
	*($2) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$global$0 = ($3 + [64])
}

.data 9051 -> ["read\00"]
int_32 .FUNC $25 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3	 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7	 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $153($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2	 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $156($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

.data 9907 -> ["\e5\b7\b2\e5\88\a0\e9\99\a4\ef\bc\9a\00"]
.data 9206 -> ["cannot increment end iterator\00"]
.data 9725 -> ["cannot pass end iterator to erase\00"]
void .FUNC $24 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2	 = ($global$0 - [96])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	*((($2 + [48]) + [32])) = [0]
	*($2 + [64]) = (int_64)-1
	$4	 = *($0 + [8])
	*($2 + [48]) = $4
	*($2 + [56]) = $4
	*($2 + [72]) = (int_64)0
	$5 = [0]
	$6	 = CALL db_lowerbound_i64($4, $4, (int_64)8428113309303046144, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $36(($2 + [48]), $6)
	
.LABEL $label$1
	*((($2 + [8]) + [32])) = [0]
	*($2 + [24]) = (int_64)-1
	$4	 = *(($0 + [8]))
	*($2 + [8]) = $4
	*($2 + [16]) = $4
	*($2 + [32]) = (int_64)0
	$0	 = CALL db_lowerbound_i64($4, $4, (int_64)-5915276457541632000, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $34(($2 + [8]), $0)
	
.LABEL $label$2
	if ( ((int_64)$1 == (int_64)8428113309303046144) ){ goto $label$4 }
	if ( ((int_64)$1 != (int_64)-5915276457541632000) ){ goto $label$3 }
	if ( ($3 == 0) ){ goto $label$3 }
	
.LOOP $label$5:
	CALL eosio_assert([1], [9725])     # .data 9725 -> ["cannot pass end iterator to erase"]
	CALL eosio_assert([1], [9206])     # .data 9206 -> ["cannot increment end iterator"]
	$0 = [0]
	$5	 = CALL db_next_i64(*($3 + [36]), ($2 + [88]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$0 = CALL $34(($2 + [8]), $5)
	
.LABEL $label$6
	CALL $53(($2 + [8]), $3)
	$3 = $0
	if ( $0 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$3 }
	
.LOOP $label$7:
	CALL eosio_assert([1], [9725])     # .data 9725 -> ["cannot pass end iterator to erase"]
	CALL eosio_assert([1], [9206])     # .data 9206 -> ["cannot increment end iterator"]
	$0 = [0]
	$3	 = CALL db_next_i64(*($5 + [12]), ($2 + [88]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$0 = CALL $36(($2 + [48]), $3)
	
.LABEL $label$8
	CALL $48(($2 + [48]), $5)
	$5 = $0
	if ( $0 ){ goto $label$7 }
	
.LABEL $label$3
	CALL prints([9907])     # .data 9907 -> ["\e5\b7\b2\e5\88\a0\e9\99\a4\ef\bc\9a"]
	CALL printn($1)
	$5	 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$9 }
	$6	 = ($2 + [36])
	$0	 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$11 }
	
.LOOP $label$12:
	$0	 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$13 }
	CALL _ZdlPv($3)
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($2 + [32]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $5
	
.LABEL $label$10
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$9
	$5	 = *($2 + [72])
	if ( ($5 == 0) ){ goto $label$14 }
	$6	 = ($2 + [76])
	$0	 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$0	 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$18 }
	CALL _ZdlPv($3)
	
.LABEL $label$18
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$17 }
	$0 = *(($2 + [72]))
	goto $label$15 
	
.LABEL $label$16
	$0 = $5
	
.LABEL $label$15
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$14
	$global$0 = ($2 + [96])
}

.data 9051 -> ["read\00"]
int_32 .FUNC $27 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3	 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7	 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $153($7)
	goto $label$2 
	
.LABEL $label$3
	$2	 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [64]) = ($2 + $7)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($4 + [72]), $2, [8])
	*($4 + [60]) = ($2 + [8])
	$8	 = (($4 + [72]) + [8])
	CALL $33(($4 + [56]), $8)
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($9 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4 + [8])
	$3	 = *($9)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0	 = *($4 + [96])
	*($4 + [40]) = $0
	*($4 + [112]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [72])
	$8 = CALL $107(($4 + [96]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5	 = CALL $107(($4 + [112]), $8)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [112]) & [1]) ){ goto $label$11 }
	if ( (*($4 + [96]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	
.LABEL $label$8
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $156($2)
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [88])))
	$global$0 = ($4 + [128])
	return $2
	
.LABEL $label$5
	$global$0 = ($4 + [128])
	return $2
}

.data 9236 -> ["cannot pass end iterator to modify\00"]
.data 9206 -> ["cannot increment end iterator\00"]
.data 9725 -> ["cannot pass end iterator to erase\00"]
.data 9056 -> ["object passed to iterator_to is not in multi_index\00"]
void .FUNC $26 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3	 = ($global$0 - [272])
	$global$0 = $3
	*($3 + [264]) = $1
	$4 = [0]
	*((($3 + [224]) + [32])) = [0]
	*($3 + [232]) = $1
	*($3 + [240]) = (int_64)-1
	*($3 + [248]) = (int_64)0
	$5	 = *($0)
	*($3 + [224]) = $5
	$6 = [0]
	$7	 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (int_64)1112756037)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6	 = CALL $40(($3 + [224]), $7)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($3 + [224])), [9056])     # .data 9056 -> ["object passed to iterator_to is not in multi_index"]
	$1 = *($3 + [264])
	
.LABEL $label$1
	*((($3 + [184]) + [32])) = [0]
	*($3 + [200]) = (int_64)-1
	*($3 + [208]) = (int_64)0
	$5	 = *($0)
	*($3 + [184]) = $5
	*($3 + [192]) = $5
	$7	 = CALL db_find_i64($5, $5, (int_64)8428113309303046144, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$4	 = CALL $36(($3 + [184]), $7)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)($3 + [184])), [9056])     # .data 9056 -> ["object passed to iterator_to is not in multi_index"]
	
.LABEL $label$2
	if ( ((int_64)*($6) < (int_64)1) ){ goto $label$6 }
	if ( $4 ){ goto $label$5 }
	$1 = *($0)
	*($3 + [80]) = ($3 + [264])
	CALL $47(($3 + [120]), ($3 + [184]), $1, ($3 + [80]))
	if ( ((int_64)*($3 + [264]) == (int_64)-7515584006193881072) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	if ( ($4 == 0) ){ goto $label$5 }
	CALL eosio_assert([1], [9725])     # .data 9725 -> ["cannot pass end iterator to erase"]
	CALL eosio_assert([1], [9206])     # .data 9206 -> ["cannot increment end iterator"]
	$6	 = CALL db_next_i64(*($4 + [12]), ($3 + [120]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	CALL $36(($3 + [184]), $6)
	
.LABEL $label$7
	CALL $48(($3 + [184]), $4)
	
.LABEL $label$5
	if ( ((int_64)*($3 + [264]) != (int_64)-7515584006193881072) ){ goto $label$3 }
	
.LABEL $label$4
	*($3 + [120]) = [1]
	if ( (CALL $7($2, ($3 + [120])) == 0) ){ goto $label$3 }
	$4	 = CALL $107(($3 + [160]), $2)
	$1	 = CALL $1($4)
	*($3 + [176]) = $1
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($4 + [8]))
	$1 = *($3 + [176])
	
.LABEL $label$8
	*(($3 + [152])) = [0]
	*($3 + [128]) = (int_64)-7515584006193881072
	*($3 + [120]) = (int_64)-7515584006193881072
	*($3 + [136]) = (int_64)-1
	*($3 + [144]) = (int_64)0
	$4	 = CALL db_find_i64((int_64)-7515584006193881072, (int_64)-7515584006193881072, (int_64)5380477996995837952, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	$4	 = CALL $49(($3 + [120]), $4)
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)($3 + [120])), [9056])     # .data 9056 -> ["object passed to iterator_to is not in multi_index"]
	*($3 + [32]) = [1]
	CALL $6(($3 + [80]), $2, ($3 + [32]))
	if ( (CALL $146(($3 + [80]), ($4 + [8])) == 0) ){ goto $label$10 }
	
.LOOP $label$11:
	CALL eosio_assert([1], [9206])     # .data 9206 -> ["cannot increment end iterator"]
	$4	 = CALL db_next_i64(*($4 + [68]), ($3 + [32]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	$4 = CALL $49(($3 + [120]), $4)
	*($3 + [32]) = [1]
	CALL $6(($3 + [80]), $2, ($3 + [32]))
	if ( CALL $146(($3 + [80]), ($4 + [8])) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [112])) = [0]
	*($3 + [88]) = (int_64)-7515584006193881072
	*($3 + [80]) = (int_64)-7515584006193881072
	*($3 + [96]) = (int_64)-1
	*($3 + [104]) = (int_64)0
	$4	 = CALL db_find_i64((int_64)-7515584006193881072, (int_64)-7515584006193881072, (int_64)4152997948076064768, *($4 + [56]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$16 }
	$7	 = CALL $50(($3 + [80]), $4)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($3 + [80])), [9056])     # .data 9056 -> ["object passed to iterator_to is not in multi_index"]
	*($3 + [76]) = $7
	*($3 + [72]) = ($3 + [80])
	$8 = ($3 + [108])
	$9 = ($3 + [88])
	
.LOOP $label$17:
	$1	 = *($7 + [8])
	if ( ((int_64)$1 != (int_64)*($0)) ){ goto $label$18 }
	if ( ((int_64)*(($7 + [24])) == (int_64)284865545476) ){ goto $label$14 }
	
.LABEL $label$18
	$1	 = *($7 + [32])
	if ( (int_64)($1 == 0) ){ goto $label$13 }
	$6	 = *($8)
	$10	 = *((($3 + [80]) + [24]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$20 }
	
.LOOP $label$22:
	$4	 = ($6 + [-24])
	$7	 = *($4)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$21 }
	$6 = $4
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$20 }
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($3 + [80])), [9056])     # .data 9056 -> ["object passed to iterator_to is not in multi_index"]
	goto $label$19 
	
.LABEL $label$20
	$4	 = CALL db_find_i64(*($3 + [80]), *($9), (int_64)4152997948076064768, $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$15 }
	$7	 = CALL $50(($3 + [80]), $4)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($3 + [80])), [9056])     # .data 9056 -> ["object passed to iterator_to is not in multi_index"]
	
.LABEL $label$19
	*($3 + [76]) = $7
	*($3 + [72]) = ($3 + [80])
	if ( $7 ){ goto $label$17 }
	goto $label$13 
	
.LABEL $label$16
	*($3 + [76]) = [0]
	*($3 + [72]) = ($3 + [80])
	$7	 = *($3 + [104])
	if ( $7 ){ goto $label$12 }
	goto $label$9 
	
.LABEL $label$15
	*($3 + [76]) = [0]
	*($3 + [72]) = ($3 + [80])
	$7	 = *($3 + [104])
	if ( $7 ){ goto $label$12 }
	goto $label$9 
	
.LABEL $label$14
	*(($3 + [64])) = [0]
	*($3 + [40]) = $1
	*($3 + [32]) = $1
	*($3 + [48]) = (int_64)-1
	*($3 + [56]) = (int_64)0
	$4	 = CALL db_find_i64($1, $1, (int_64)7864012134596739072, *($3 + [176]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$25 }
	$10	 = CALL $37(($3 + [32]), $4)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($3 + [32])), [9056])     # .data 9056 -> ["object passed to iterator_to is not in multi_index"]
	$11 = ($2 + [1])
	$12 = ($2 + [4])
	
.LOOP $label$26:
	$6	 = ($4 & [1])
	$4	 = *($2)
	$7	 = ($4 & [1])
	$4	 = *($10 + [8])
	$9	 = uint_32($4 >> [1])
	$8	 = ( *(($10 + [12])) ? $9 : $7 )
	if ( ((int_32)$8 != (int_32)( *($12) ? uint_32($4 >> [1]) : $6 )) ){ goto $label$27 }
	$4 = (($10 + [8]) + [1])
	$6 = ( *(($2 + [8])) ? $11 : $6 )
	if ( $7 ){ goto $label$28 }
	if ( ($8 == 0) ){ goto $label$24 }
	$7 = ([0] - $9)
	
.LOOP $label$29:
	if ( ((int_32)*($4) != (int_32)*($6)) ){ goto $label$27 }
	$6 = ($6 + [1])
	$4 = ($4 + [1])
	$7	 = ($7 + [1])
	if ( $7 ){ goto $label$29 }
	goto $label$24 
	
.LABEL $label$28
	if ( ($8 == 0) ){ goto $label$24 }
	if ( (CALL $145(( *(($10 + [16])) ? $4 : $7 ), $6, $8) == 0) ){ goto $label$24 }
	
.LABEL $label$27
	CALL eosio_assert([1], [9206])     # .data 9206 -> ["cannot increment end iterator"]
	$4	 = CALL db_next_i64(*($10 + [44]), ($3 + [16]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$25 }
	$10 = CALL $37(($3 + [32]), $4)
	goto $label$26 
	
.LABEL $label$25
	$1 = *($0)
	*($3 + [20]) = $2
	*($3 + [16]) = ($3 + [176])
	*($3 + [24]) = ($3 + [72])
	CALL $51(($3 + [8]), ($3 + [32]), $1, ($3 + [16]))
	$7	 = *($3 + [56])
	if ( $7 ){ goto $label$23 }
	goto $label$13 
	
.LABEL $label$24
	$1 = *($0)
	*($3 + [16]) = ($3 + [72])
	CALL eosio_assert([1], [9236])     # .data 9236 -> ["cannot pass end iterator to modify"]
	CALL $52(($3 + [32]), $10, $1, ($3 + [16]))
	$7	 = *($3 + [56])
	if ( ($7 == 0) ){ goto $label$13 }
	
.LABEL $label$23
	$10	 = ($3 + [60])
	$4	 = *($10)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$31 }
	
.LOOP $label$32:
	$4	 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$33 }
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$34
	CALL _ZdlPv($6)
	
.LABEL $label$33
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$32 }
	$4 = *(($3 + [56]))
	goto $label$30 
	
.LABEL $label$31
	$4 = $7
	
.LABEL $label$30
	*($10) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$7	 = *($3 + [104])
	if ( ($7 == 0) ){ goto $label$9 }
	
.LABEL $label$12
	$10	 = ($3 + [108])
	$4	 = *($10)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$36 }
	
.LOOP $label$37:
	$4	 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$38 }
	CALL _ZdlPv($6)
	
.LABEL $label$38
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$37 }
	$4 = *(($3 + [104]))
	goto $label$35 
	
.LABEL $label$36
	$4 = $7
	
.LABEL $label$35
	*($10) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$9
	$7	 = *($3 + [144])
	if ( ($7 == 0) ){ goto $label$3 }
	$10	 = ($3 + [148])
	$4	 = *($10)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$40 }
	
.LOOP $label$41:
	$4	 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$42 }
	CALL _ZdlPv($6)
	
.LABEL $label$42
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$41 }
	$4 = *(($3 + [144]))
	goto $label$39 
	
.LABEL $label$40
	$4 = $7
	
.LABEL $label$39
	*($10) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$7	 = *($3 + [208])
	if ( ($7 == 0) ){ goto $label$43 }
	$10	 = ($3 + [212])
	$4	 = *($10)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$45 }
	
.LOOP $label$46:
	$4	 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$47 }
	CALL _ZdlPv($6)
	
.LABEL $label$47
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$46 }
	$4 = *(($3 + [208]))
	goto $label$44 
	
.LABEL $label$45
	$4 = $7
	
.LABEL $label$44
	*($10) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$43
	$7	 = *($3 + [248])
	if ( ($7 == 0) ){ goto $label$48 }
	$10	 = ($3 + [252])
	$4	 = *($10)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$50 }
	
.LOOP $label$51:
	$4	 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$52 }
	CALL _ZdlPv($6)
	
.LABEL $label$52
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$51 }
	$4 = *(($3 + [248]))
	goto $label$49 
	
.LABEL $label$50
	$4 = $7
	
.LABEL $label$49
	*($10) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$48
	$global$0 = ($3 + [272])
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3	 = ($2 & [1])
	$2	 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6	 = *($0)
	$7	 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $110($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $135 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL $119()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL $119()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2	 = ($global$0 - [80])
	$global$0 = $2
	*(($3 = (($2 + [64]) + [8]))) = *(($1 + [16]))
	*($2 + [64]) = *($1 + [8])
	$4 = *($1)
	$5 = *($1 + [24])
	$6 = CALL $107(($2 + [48]), ($1 + [32]))
	$7 = *($1 + [48])
	$8 = CALL $107(($2 + [32]), ($1 + [56]))
	$1 = CALL $107(($2 + [16]), ($1 + [68]))
	*(($2 + [8])) = *($3)
	*($2) = *($2 + [64])
	CALL $97($0, $4, $2, $5, $6, $7, $8, $1)
	if ( (*($1) & [1]) ){ goto $label$5 }
	if ( (*($8) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($8) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($6) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($2 + [80])
}

.data 9051 -> ["read\00"]
void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4	 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4	 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3	 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4	 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $33(*($1), ($0 + [32]))
	$4	 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($0 + [48]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $33(*($1), ($0 + [56]))
	CALL $33(*($1), ($0 + [68]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $108 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6	 = ($5 & [1])
	$5	 = *($1)
	$5	 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5	 = ($5 - $2)
	$3	 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8	 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

.data 9854 -> ["attempt to remove object that was not in multi_index\00"]
.data 9804 -> ["cannot erase objects in table of another contract\00"]
.data 9759 -> ["object passed to erase is not in multi_index\00"]
void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9759])     # .data 9759 -> ["object passed to erase is not in multi_index"]
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert9()), [9804])     # .data 9804 -> ["cannot erase objects in table of another contract"]
	$2	 = *($0 + [24])
	$3 = $2
	$4	 = ($0 + [28])
	$5	 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6	 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3	 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9854])     # .data 9854 -> ["attempt to remove object that was not in multi_index"]
	$2	 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7	 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5	 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3	 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3	 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

.data 9427 -> ["cannot create objects in table of another contract\00"]
void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4	 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert9()), [9427])     # .data 9427 -> ["cannot create objects in table of another contract"]
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = $1
	CALL $96(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2	 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($4 + [16]) = $2)
	$5	 = *($3 + [20])
	*($4 + [12]) = $5
	$6	 = ($1 + [28])
	$7	 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $76(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

.data 9196 -> ["write\00"]
int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3	 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4	 = (uint_64)$4 >> (uint_64)(int_64)7
	$8	 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5	 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7	 = ($3 & [1])
	$3	 = *($1)
	$3	 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9196])     # .data 9196 -> ["write"]
	$5	 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3	 = *($0 + [4])
	$2	 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4	 = *($0)
	$5	 = ($3 - $4)
	$6	 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2	 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2	 = ($2 << [1])
	$7	 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3	 = (*($0) + [1])
	*($0) = $3
	$1	 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $116($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5	 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1	 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1	 = *($0)
	$6	 = ($0 + [4])
	$3	 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2	 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [8]))
	*($2 + [32]) = *($1)
	$1 = CALL $107(($2 + [16]), ($1 + [16]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0	 = *($0 + [4])
	$4	 = *($0 + [4])
	$3 = (*($0) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($5 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$4 = CALL $107(($2 + [64]), $1)
	*(($2 + [8])) = *($5)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $2), (int_32 $4), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

.data 9196 -> ["write\00"]
void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2	 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3	 = *($1 + [8])
	$4	 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ([-8] - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$6 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$5	 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $66($0, ([0] - $3))
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	
.LABEL $label$2
	*($2) = $3
	*($2 + [8]) = $4
	CALL eosio_assert(((int_32)($4 - $3) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy($3, $1, [8])
	*($2 + [4]) = ($3 + [8])
	CALL $67($2, $6)
	$global$0 = ($2 + [16])
}

.data 10369 -> ["overdrawn balance\00"]
.data 10345 -> ["no balance object found\00"]
void .FUNC $63 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3	 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	$0	 = CALL $94(($3 + [8]), (uint_64)*($2 + [8]) >> (uint_64)(int_64)8), [10345]
	CALL eosio_assert(((int_64)*($0)) >= (int_64)*($2)), [10369])     # .data 10345 -> ["no balance object found"]     # .data 10369 -> ["overdrawn balance"]
	*($3) = $2
	CALL $95(($3 + [8]), $0, $1, $3)
	$4	 = *($3 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$5	 = ($3 + [36])
	$2	 = *($5)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$2	 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	CALL _ZdlPv($0)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$2 = *(($3 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

.data 9368 -> ["updater cannot change primary key when modifying an object\00"]
.data 10324 -> ["subtraction overflow\00"]
.data 10302 -> ["subtraction underflow\00"]
.data 10254 -> ["attempt to subtract asset with different symbol\00"]
.data 9317 -> ["cannot modify objects in table of another contract\00"]
.data 9271 -> ["object passed to modify is not in multi_index\00"]
void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4	 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9271])     # .data 9271 -> ["object passed to modify is not in multi_index"]
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert9()), [9317])     # .data 9317 -> ["cannot modify objects in table of another contract"]
	$5	 = *($1 + [8])
	$3	 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [10254])     # .data 10254 -> ["attempt to subtract asset with different symbol"]
	$6	 = (int_64)
	*($1) = $6(*($1) - *($3)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10302])     # .data 10302 -> ["subtraction underflow"]
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [10324])     # .data 10324 -> ["subtraction overflow"]
	$5	 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [9368])     # .data 9368 -> ["updater cannot change primary key when modifying an object"]
	*($4 + [48]) = ($4 + [40])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [16])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [32])
	CALL $90(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $156($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3	 = ( $0 ? [1] : $0 )
	$1	 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $151(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0	 = *([0] + [10664])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $151(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $156($0)
	
.LABEL $label$1
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4	 = *($0)
	$5	 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6	 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4	 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7	 = ($4 << [1])
	$7	 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $116($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7	 = *($0)
	$2	 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4	 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7	 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

.data 9051 -> ["read\00"]
void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4	 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4	 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4	 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy($3, *($4 + [4]), [8])
	$5	 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [12])
	$4	 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4	 = *($0)
	$5	 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6	 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4	 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7	 = ($4 << [1])
	$7	 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $116($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7	 = *($0)
	$2	 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4	 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7	 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

.data 9051 -> ["read\00"]
void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3	 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3	 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[33]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy($2, *($3 + [4]), [34])
	*($3 + [4]) = (*($3 + [4]) + [34])
	$2 = *($0 + [8])
	$3	 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0	 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

.data 9196 -> ["write\00"]
void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2	 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4	 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6	 = ($1 + [8])
	CALL $109($6, *($4 + [4]))
	$4	 = *(*($4 + [8]) + [4])
	*($1 + [24]) = *($4 + [16])
	*(($1 + [32])) = *(($4 + [24]))
	$4	 = *($1 + [8])
	$7	 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [24])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8	 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $153($4)
	goto $label$2 
	
.LABEL $label$3
	$2	 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy($2, $1, [8])
	*($3 + [12]) = ($2 + [8])
	CALL $67(($3 + [8]), $6)
	CALL eosio_assert(((int_32)(*($3 + [16]) - *($3 + [12])) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($3 + [12]), $7, [8])
	$6	 = (*($3 + [12]) + [8])
	*($3 + [12]) = $6
	*($3 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($3 + [16]) - $6) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($3 + [12]), ($3 + [24]), [8])
	*($3 + [12]) = (*($3 + [12]) + [8])
	$8	 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($5 + [8]), (int_64)7864012134596739072, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $156($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [32])
}

.data 8989 -> ["weekly\00"]
.data 9707 -> ["addition overflow\00"]
.data 9688 -> ["addition underflow\00"]
.data 9645 -> ["attempt to add asset with different symbol\00"]
.data 8970 -> ["daily\00"]
void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = *($0)
	$4	 = *($2)
	$3	 = CALL $147([8970])
	if ( ((int_32)$3 != (int_32)( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$1 }     # .data 8970 -> ["daily"]
	if ( CALL $115($2, [0], [-1], [8970], $3) ){ goto $label$1 }     # .data 8970 -> ["daily"]
	$2	 = *($0 + [4])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($1 + [8])), [9645])     # .data 9645 -> ["attempt to add asset with different symbol"]
	$5	 = ((int_64)*($1) + (int_64)*($2))
	*($1) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9688])     # .data 9688 -> ["addition underflow"]
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9707])     # .data 9707 -> ["addition overflow"]
	
.LABEL $label$1
	$2 = *($0)
	$4	 = *($2)
	$3	 = CALL $147([8989])
	if ( ((int_32)$3 != (int_32)( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$3 }     # .data 8989 -> ["weekly"]
	if ( (CALL $115($2, [0], [-1], [8989], $3) == 0) ){ goto $label$2 }     # .data 8989 -> ["weekly"]
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	$2	 = *($0 + [4])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($1 + [24]))), [9645])     # .data 9645 -> ["attempt to add asset with different symbol"]
	$5	 = ((int_64)*($1 + [16]) + (int_64)*($2))
	*($1 + [16]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9688])     # .data 9688 -> ["addition underflow"]
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [9707])     # .data 9707 -> ["addition overflow"]
}

.data 8989 -> ["weekly\00"]
.data 8970 -> ["daily\00"]
.data 9625 -> ["invalid symbol name\00"]
.data 9576 -> ["magnitude of asset amount must be less than 2^62\00"]
.data 9523 -> ["only uppercase letters allowed in symbol_code string\00"]
.data 9478 -> ["string is too long to be a valid symbol_code\00"]
.data 8630 -> ["EOS\00-0X+0X 0X-0x+0x 0x\00"]
void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$2	 = CALL $147([8630])
	if ( ($2 <= [8]) ){ goto $label$4 }     # .data 8630 -> ["EOS"]
	CALL eosio_assert([0], [9478])     # .data 9478 -> ["string is too long to be a valid symbol_code"]
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4	 = *(($2 + [8629]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9523])     # .data 9523 -> ["only uppercase letters allowed in symbol_code string"]
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2	 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$5 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert([1], [9576])     # .data 9576 -> ["magnitude of asset amount must be less than 2^62"]
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$3 = $6
	$4 = [1]
	$7	 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$3 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$7	 = ($2 + [1])
	$2 = $7
	if ( $4 ){ goto $label$11 }
	$4 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [9625])     # .data 9625 -> ["invalid symbol name"]
	*($1 + [8]) = $5
	*($1) = (int_64)0
	$2	 = CALL $147([8630])
	if ( ($2 <= [8]) ){ goto $label$15 }     # .data 8630 -> ["EOS"]
	CALL eosio_assert([0], [9478])     # .data 9478 -> ["string is too long to be a valid symbol_code"]
	goto $label$14 
	
.LABEL $label$15
	if ( ($2 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$3 = (int_64)0
	
.LOOP $label$16:
	$4	 = *(($2 + [8629]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9523])     # .data 9523 -> ["only uppercase letters allowed in symbol_code string"]
	
.LABEL $label$17
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2	 = ($2 + [-1])
	if ( $2 ){ goto $label$16 }
	$5 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$5 = (int_64)4
	
.LABEL $label$12
	CALL eosio_assert([1], [9576])     # .data 9576 -> ["magnitude of asset amount must be less than 2^62"]
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$6 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$3 = $6
	$4 = [1]
	$7	 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$3 = $6
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$7	 = ($2 + [1])
	$2 = $7
	if ( $4 ){ goto $label$22 }
	$4 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$4 = [0]
	
.LABEL $label$18
	CALL eosio_assert($4, [9625])     # .data 9625 -> ["invalid symbol name"]
	*(($1 + [24])) = $5
	*($1 + [16]) = (int_64)0
	$2 = *($0)
	$4	 = *($2)
	$7	 = CALL $147([8970])
	if ( ((int_32)$7 != (int_32)( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$23 }     # .data 8970 -> ["daily"]
	if ( CALL $115($2, [0], [-1], [8970], $7) ){ goto $label$23 }     # .data 8970 -> ["daily"]
	$2	 = *($0 + [4])
	*($1) = *($2)
	*(($1 + [8])) = *(($2 + [8]))
	
.LABEL $label$23
	$2 = *($0)
	$4	 = *($2)
	$7	 = CALL $147([8989])
	if ( ((int_32)$7 != (int_32)( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$25 }     # .data 8989 -> ["weekly"]
	if ( (CALL $115($2, [0], [-1], [8989], $7) == 0) ){ goto $label$24 }     # .data 8989 -> ["weekly"]
	
.LABEL $label$25
	return 
	
.LABEL $label$24
	$4	 = *($0 + [4])
	*(($2 = ($1 + [16]))) = *($4)
	*(($2 + [8])) = *(($4 + [8]))
}

.data 9196 -> ["write\00"]
void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4	 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($4 + [4]), $3, [8])
	$5	 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [4])
	$4	 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($4 + [4]), $0, [8])
	$1	 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *($0 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

.data 9051 -> ["read\00"]
.data 9202 -> ["get\00"]
int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9202])     # .data 9202 -> ["get"]
	$2	 = *($6)
	$7 = *($2)
	$2	 = ($2 + [1])
	*($6) = $2
	$3	 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6	 = (CASTING uint_32)(uint_64 $4)
	$7	 = *($1)
	$3	 = *($1 + [4])
	$5	 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $66($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3	 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2	 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9051])     # .data 9051 -> ["read"]
	$3	 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4	 = *($0)
	$5	 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6	 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4	 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7	 = ($4 << [1])
	$7	 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $116($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7	 = *($0)
	$2	 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4	 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7	 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $149 (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2	 = CALL $144($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

int_32 .FUNC $145 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4	 = *($1)
	$3	 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2	 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $144 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2	 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5	 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5	 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $147 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3	 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1	 = ($1 + [4])
	$2	 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3	 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($1)
	$3	 = *($0)
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((int_32)$3 != (int_32)($2 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$2 = *($1)
	$3	 = *($0)
	if ( ($3 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$3 == (int_32)($2 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($3 - ($2 & [255]))
}

int_32 .FUNC $141 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3	 = ($global$0 - [288])
	$global$0 = $3
	*($3 + [284]) = $2
	*(($3 + [272])) = (int_64)0
	*(($3 + [264])) = (int_64)0
	*(($3 + [256])) = (int_64)0
	*($3 + [248]) = (int_64)0
	*($3 + [240]) = (int_64)0
	*($3 + [280]) = *($3 + [284])
	$4 = [0]
	$2 = [-1]
	if ( ((int_32)CALL $142([0], $1, ($3 + [280]), ($3 + [80]), ($3 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $122($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) <= (int_32)[0]) ){ goto $label$6 }
	$5 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	*($0) = ($2 & [-33])
	$5 = ($2 & [32])
	if ( *($0 + [48]) ){ goto $label$4 }
	
.LABEL $label$5
	*(($6 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($3 + [80])
	*($0 + [28]) = $3
	*($0 + [20]) = $3
	$7 = *($0 + [44])
	*($0 + [44]) = $3
	$2 = CALL $142($0, $1, ($3 + [280]), ($3 + [80]), ($3 + [240]))
	if ( ($7 == 0) ){ goto $label$3 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $7
	*($6) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1	 = ($0 + [20])
	$7 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $7 )
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $142($0, $1, ($3 + [280]), ($3 + [80]), ($3 + [240]))
	
.LABEL $label$3
	$1	 = *($0)
	*($0) = ($1 | $5)
	$1 = ($1 & [32])
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $123($0)
	
.LABEL $label$7
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	$global$0 = ($3 + [288])
	return $2
}

void .FUNC $140 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4	 = ($global$0 - [32])
	$global$0 = $4
	$5	 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$6	 = ($5) & [32767]
	if ( ((int_32)$6) == (int_32)[32767]) ){ goto $label$1 }
	if ( $6 ){ goto $label$4 }
	if ( (CALL eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL multf3($4, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL $140(($4 + [16]), *($4), *(($4 + [8])), $3)
	$5 = (*($3) + [-120])
	$2 = *($4 + [24])
	$1 = *($4 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($5 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($5 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	*($3) = $5
	
.LABEL $label$1
	*($0) = $1
	*($0 + [8]) = $2
	$global$0 = ($4 + [32])
}

void .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3	 = ($global$0 - [16])
	$global$0 = $3
	$1	 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$19
	$1	 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	
.LABEL $label$18
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$17
	$1	 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$16
	$1	 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$15
	$1	 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$14
	$1	 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$13
	$1	 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$12
	$1	 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$11
	$1	 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$10
	$1	 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$9
	$1	 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$8
	$1	 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	$1	 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$1	 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$1	 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$1	 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$1	 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$2
	$1	 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL extenddftf2($3, *($1))
	*($0 + [8]) = *(($3 + [8]))
	*($0) = *($3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	$1	 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$4 = *($1)
	*($0 + [8]) = *($1 + [8])
	*($0) = $4
	$global$0 = ($3 + [16])
	$1
}

.data 21632 -> ["0123456789ABCDEF"]
.data 21168 -> ["\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00"]
.data 8192 -> ["\00Assertion failed: %s (%s: %s: %d)\n\00-+   0X0x\00"]
int_32 .FUNC $142 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_64 $29
	int_64 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	$5	 = ($global$0 - [8128])
	$global$0 = $5
	$6 = (($5 + [704]) | [8])
	$7 = (($5 + [704]) | [9])
	$8 = ([-2] - ($5 + [704]))
	$9 = ($5 + [7664])
	$10 = (($5 + [692]) + [12])
	$11 = (($5 + [352]) + [54])
	$12 = (($5 + [352]) + [55])
	$13 = [0]
	$14 = [0]
	$15 = [0]
	
.LOOP $label$4:
	if ( ($0 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	$17 = $1
	if ( ((int_32)$15 > (int_32)([2147483647] - $14)) ){ goto $label$3 }
	$14 = ($15 + $14)
	$1	 = *($17)
	if ( ($1 == 0) ){ goto $label$1 }
	$15 = $17
	$1	 = ($1 & [255])
	if ( ($1 == 0) ){ goto $label$24 }
	
.LOOP $label$25:
	if ( ((int_32)$1 == (int_32)[37]) ){ goto $label$23 }
	$1 = *($15 + [1])
	$15 = ($15 + [1])
	$1	 = ($1 & [255])
	if ( $1 ){ goto $label$25 }
	
.LABEL $label$24
	$1 = $15
	$18	 = ([2147483647] - $14)
	$15	 = ($15 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$22 }
	goto $label$3 
	
.LABEL $label$23
	$18 = $15
	
.LOOP $label$27:
	if ( ((int_32)*(($18 + [1])) != (int_32)[37]) ){ goto $label$26 }
	$15 = ($15 + [1])
	$19 = *($18 + [2])
	$1	 = ($18 + [2])
	$18 = $1
	if ( ((int_32)$19 == (int_32)[37]) ){ goto $label$27 }
	$18	 = ([2147483647] - $14)
	$15	 = ($15 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	goto $label$22 
	
.LABEL $label$26
	$1 = $18
	$18	 = ([2147483647] - $14)
	$15	 = ($15 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	
.LABEL $label$22
	if ( (*($0) & [32]) ){ goto $label$28 }
	CALL $132($17, $15, $0)
	
.LABEL $label$28
	if ( $15 ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	
.LOOP $label$29:
	$17 = $1
	if ( ((int_32)$15 > (int_32)([2147483647] - $14)) ){ goto $label$3 }
	$14 = ($15 + $14)
	$15	 = *($17)
	if ( ($15 == 0) ){ goto $label$31 }
	$1 = $17
	$15	 = ($15 & [255])
	if ( ($15 == 0) ){ goto $label$33 }
	
.LOOP $label$34:
	if ( ((int_32)$15 == (int_32)[37]) ){ goto $label$32 }
	$15 = *($1 + [1])
	$1 = ($1 + [1])
	$15	 = ($15 & [255])
	if ( $15 ){ goto $label$34 }
	
.LABEL $label$33
	$18	 = ([2147483647] - $14)
	$15	 = ($1 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$30 }
	goto $label$3 
	
.LABEL $label$32
	$18 = $1
	$15 = $1
	
.LOOP $label$36:
	if ( ((int_32)*(($15 + [1])) != (int_32)[37]) ){ goto $label$35 }
	$18 = ($18 + [1])
	$19 = *($15 + [2])
	$1	 = ($15 + [2])
	$15 = $1
	if ( ((int_32)$19 == (int_32)[37]) ){ goto $label$36 }
	$18	 = ([2147483647] - $14)
	$15	 = ($18 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	goto $label$30 
	
.LABEL $label$35
	$1 = $15
	$18	 = ([2147483647] - $14)
	$15	 = ($18 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$30 }
	goto $label$3 
	
.LABEL $label$31
	if ( $0 ){ goto $label$1 }
	if ( ($13 == 0) ){ goto $label$46 }
	$1 = [1]
	$15	 = *($4 + [4])
	if ( ($15 == 0) ){ goto $label$37 }
	CALL $143(($3 + [16]), $15, $2)
	$15	 = *($4 + [8])
	if ( ($15 == 0) ){ goto $label$45 }
	CALL $143(($3 + [32]), $15, $2)
	$15	 = *($4 + [12])
	if ( ($15 == 0) ){ goto $label$44 }
	CALL $143(($3 + [48]), $15, $2)
	$15	 = *($4 + [16])
	if ( ($15 == 0) ){ goto $label$43 }
	CALL $143(($3 + [64]), $15, $2)
	$15	 = *($4 + [20])
	if ( ($15 == 0) ){ goto $label$42 }
	CALL $143(($3 + [80]), $15, $2)
	$15	 = *($4 + [24])
	if ( ($15 == 0) ){ goto $label$41 }
	CALL $143(($3 + [96]), $15, $2)
	$15	 = *($4 + [28])
	if ( ($15 == 0) ){ goto $label$40 }
	CALL $143(($3 + [112]), $15, $2)
	$15	 = *($4 + [32])
	if ( ($15 == 0) ){ goto $label$39 }
	CALL $143(($3 + [128]), $15, $2)
	$15	 = *($4 + [36])
	if ( ($15 == 0) ){ goto $label$38 }
	CALL $143(($3 + [144]), $15, $2)
	$global$0 = ($5 + [8128])
	return [1]
	
.LABEL $label$46
	$global$0 = ($5 + [8128])
	return [0]
	
.LABEL $label$45
	$1 = [2]
	goto $label$37 
	
.LABEL $label$44
	$1 = [3]
	goto $label$37 
	
.LABEL $label$43
	$1 = [4]
	goto $label$37 
	
.LABEL $label$42
	$1 = [5]
	goto $label$37 
	
.LABEL $label$41
	$1 = [6]
	goto $label$37 
	
.LABEL $label$40
	$1 = [7]
	goto $label$37 
	
.LABEL $label$39
	$1 = [8]
	goto $label$37 
	
.LABEL $label$38
	$1 = [9]
	
.LABEL $label$37
	$15 = ($4 + ($1 << [2]))
	
.LOOP $label$47:
	if ( *($15) ){ goto $label$18 }
	$15 = ($15 + [4])
	$14 = [1]
	$1	 = ($1 + [1])
	if ( ((uint_32)$1 <= (uint_32)[9]) ){ goto $label$47 }
	goto $label$1 
	
.LABEL $label$30
	if ( $15 ){ goto $label$29 }
	
.LABEL $label$19
	$15 = ($1 + [1])
	$16	 = *($1 + [1])
	$20	 = ($16 + [-48])
	if ( ((uint_32)$20 > (uint_32)[9]) ){ goto $label$50 }
	$19	 = ((int_32)*($1 + [2]) == (int_32)[36])
	$15 = ( ($1 + [3]) ? $15 : $19 )
	$21 = ( $20 ? [-1] : $19 )
	$13 = ( [1] ? $13 : $19 )
	$22 = [0]
	$16	 = *(($1 + ( [3] ? [1] : $19 )))
	$1	 = ($16 + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$48 }
	goto $label$49 
	
.LABEL $label$50
	$21 = [-1]
	$22 = [0]
	$1	 = ($16 + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$48 }
	
.LABEL $label$49
	$1	 = ([1] << $1)
	if ( (($1 & [75913]) == 0) ){ goto $label$48 }
	$19 = ($15 + [1])
	$22 = [0]
	
.LOOP $label$51:
	$22 = ($1 | $22)
	$15	 = $19
	$16	 = *($15)
	$1	 = ($16 + [-32])
	if ( ((uint_32)$1 >= (uint_32)[32]) ){ goto $label$48 }
	$19 = ($15 + [1])
	$1	 = ([1] << $1)
	if ( ($1 & [75913]) ){ goto $label$51 }
	
.LABEL $label$48
	if ( ((int_32)$16 != (int_32)[42]) ){ goto $label$57 }
	$1	 = (*($15 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$56 }
	if ( ((int_32)*($15 + [2]) != (int_32)[36]) ){ goto $label$56 }
	*(($4 + ($1 << [2]))) = [10]
	$23 = ($15 + [3])
	$13 = [1]
	$20	 = *((($3 + (*(($15 + [1])) << [4])) + [-768]))
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$52 }
	goto $label$55 
	
.LABEL $label$57
	$20 = [0]
	$19	 = ($16 + [-48])
	if ( ((uint_32)$19 > (uint_32)[9]) ){ goto $label$54 }
	$1 = [0]
	
.LOOP $label$58:
	$20 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$59 }
	$1	 = ((int_32)$1 * (int_32)[10])
	$20 = ( [-1] ? ($1 + $19) : ((int_32)$19 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$59
	$19 = *($15 + [1])
	$23	 = ($15 + [1])
	$15 = $23
	$1 = $20
	$19	 = ($19 + [-48])
	if ( ($19 <= [10]) ){ goto $label$58 }
	if ( ((int_32)$20 >= (int_32)[0]) ){ goto $label$52 }
	goto $label$3 
	
.LABEL $label$56
	if ( $13 ){ goto $label$18 }
	$23 = ($15 + [1])
	if ( ($0 == 0) ){ goto $label$53 }
	$15	 = *($2)
	*($2) = ($15 + [4])
	$13 = [0]
	$20	 = *($15)
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$52 }
	
.LABEL $label$55
	$20 = ([0] - $20)
	$22 = ($22 | [8192])     # .data 8192 -> [""]
	goto $label$52 
	
.LABEL $label$54
	$23 = $15
	goto $label$52 
	
.LABEL $label$53
	$13 = [0]
	$20 = [0]
	
.LABEL $label$52
	$15 = [0]
	$16 = [-1]
	if ( ((int_32)*($23) != (int_32)[46]) ){ goto $label$66 }
	$19	 = *($23 + [1])
	if ( ((int_32)$19 != (int_32)[42]) ){ goto $label$65 }
	$1	 = (*($23 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$64 }
	if ( ((int_32)*($23 + [3]) != (int_32)[36]) ){ goto $label$64 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($23 + [4])
	$16 = *((($3 + (*(($23 + [2])) << [4])) + [-768]))
	goto $label$61 
	
.LABEL $label$66
	$1 = $23
	$24 = [0]
	goto $label$60 
	
.LABEL $label$65
	$1 = ($23 + [1])
	$25	 = ($19 + [-48])
	if ( ((uint_32)$25 > (uint_32)[9]) ){ goto $label$63 }
	$23 = [0]
	$19 = $1
	
.LOOP $label$67:
	$16 = [-1]
	if ( ((uint_32)$23 > (uint_32)[214748364]) ){ goto $label$68 }
	$1	 = ((int_32)$23 * (int_32)[10])
	$16 = ( [-1] ? ($1 + $25) : ((int_32)$25 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$68
	$24 = [1]
	$25 = *($19 + [1])
	$1	 = ($19 + [1])
	$19 = $1
	$23 = $16
	$25	 = ($25 + [-48])
	if ( ($25 <= [10]) ){ goto $label$67 }
	goto $label$60 
	
.LABEL $label$64
	if ( $13 ){ goto $label$18 }
	$1 = ($23 + [2])
	if ( ($0 == 0) ){ goto $label$62 }
	$19	 = *($2)
	*($2) = ($19 + [4])
	$16 = *($19)
	goto $label$61 
	
.LABEL $label$63
	$24 = [1]
	$16 = [0]
	goto $label$60 
	
.LABEL $label$62
	$16 = [0]
	
.LABEL $label$61
	$24 = ((int_32)uint_32($16 >> [31]) ^ (int_32)[1])
	
.LABEL $label$60
	
.LOOP $label$69:
	$19 = $15
	$15	 = (*($1) + [-65])
	if ( ((uint_32)$15 > (uint_32)[57]) ){ goto $label$18 }
	$1 = ($1 + [1])
	$15	 = *(((((int_32)$19 * (int_32)[58]) + $15) + [21168]))
	if ( (($15 + [-1]) <= [8]) ){ goto $label$69 }     # .data 21168 -> ["\19"]
	if ( ($15 == 0) ){ goto $label$18 }
	if ( ((int_32)$15 != (int_32)[27]) ){ goto $label$72 }
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$18 }
	$15 = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$71 
	
.LABEL $label$72
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$73 }
	*(($4 + ($21 << [2]))) = $15
	$15	 = ($3 + ($21 << [4]))
	*($5 + [424]) = *(($15 + [8]))
	*($5 + [416]) = *($15)
	$15 = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$71 
	
.LABEL $label$73
	if ( ($0 == 0) ){ goto $label$70 }
	CALL $143(($5 + [416]), $15, $2)
	
.LABEL $label$71
	$23	 = ($22 & [-65537])
	$21 = ( $23 ? $22 : ($22 & [8192]) )     # .data 8192 -> [""]
	$26 = [0]
	$27 = [8228]
	$15	 = *(($1 + [-1]))
	$28	 = ( ( ($15 & [-33]) ? $15 : ((int_32)($15 & [15]) == (int_32)[3]) ) ? $15 : $19 )
	$15	 = ($28 + [-65])
	if ( ((uint_32)$15 > (uint_32)[55]) ){ goto $label$9 }
	$22 = $12
	goto $label$101 
	
.LABEL $label$101
	if ( ((int_32)$16 > (int_32)[-1]) ){ goto $label$102 }
	if ( $24 ){ goto $label$3 }
	
.LABEL $label$102
	$29 = *($5 + [424])
	$30 = *($5 + [416])
	*($5 + [748]) = [0]
	if ( (CALL $133($30, $29) == 0) ){ goto $label$103 }
	$31 = [1]
	$32 = [8634]
	$29	 = ((int_64)$29 ^ (int_64)-9223372036854775808)
	if ( ((int_32)CALL $134($30, $29) <= (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$103
	if ( ($21 & [2048]) ){ goto $label$99 }
	$31	 = ($21 & [1])
	$32 = ( [8640] ? [8635] : $31 )
	if ( ((int_32)CALL $134($30, $29) > (int_32)[1]) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$100
	$29	 = *($5 + [416])
	if ( ((int_64)$29 <= (int_64)-1) ){ goto $label$86 }
	if ( ($21 & [2048]) ){ goto $label$84 }
	$26	 = ($21 & [1])
	$27 = ( [8230] ? [8228] : $26 )
	if ( ((uint_64)$29 >= (uint_64)(int_64)4294967296) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$99
	$31 = [1]
	$32 = [8637]
	if ( ((int_32)CALL $134($30, $29) <= (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$98
	*((($5 + [344]) + [4])) = [0]
	*($5 + [344]) = *($5 + [416])
	*($5 + [416]) = ($5 + [344])
	$16 = [-1]
	$17 = ($5 + [344])
	goto $label$96 
	
.LABEL $label$97
	$17 = *($5 + [416])
	if ( ($16 == 0) ){ goto $label$80 }
	
.LABEL $label$96
	$15 = [0]
	$18 = $17
	
.LOOP $label$104:
	$19	 = *($18)
	if ( ($19 == 0) ){ goto $label$82 }
	$19	 = CALL $136(($5 + [340]), $19)
	$22	 = ((int_32)$19 < (int_32)[0])
	if ( $22 ){ goto $label$83 }
	if ( ((uint_32)$19 > (uint_32)($16 - $15)) ){ goto $label$83 }
	$18 = ($18 + [4])
	$15	 = ($19 + $15)
	if ( ((uint_32)$16 > (uint_32)$15) ){ goto $label$104 }
	goto $label$82 
	
.LABEL $label$95
	*((($5 + [352]) + [54])) = *($5 + [416])
	$16 = [1]
	$17 = $11
	$22 = $12
	$21 = $23
	goto $label$8 
	
.LABEL $label$94
	$17 = CALL $139(*(CALL $119()))
	goto $label$88 
	
.LABEL $label$93
	$15 = [0]
	$18	 = ($19 & [255])
	if ( ((uint_32)$18 > (uint_32)[7]) ){ goto $label$4 }
	goto $label$105 
	
.LABEL $label$105
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$92
	$17 = $12
	$29	 = *($5 + [416])
	if ( (int_64)($29 == 0) ){ goto $label$106 }
	$17 = $12
	
.LOOP $label$107:
	*(($17 = ($17 + [-1]))) = (((CASTING uint_32)(uint_64 $29) & [7]) | [48])
	$29	 = (uint_64)$29 >> (uint_64)(int_64)3
	if ( ((int_64)$29) != (int_64)0) ){ goto $label$107 }
	
.LABEL $label$106
	if ( ($21 & [8]) ){ goto $label$81 }
	$26 = [0]
	$27 = [8228]
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$91
	$16 = ( $16 ? [8] : ((uint_32)$16 > (uint_32)[8]) )
	$21 = ($21 | [8])
	$28 = [120]
	
.LABEL $label$90
	$26 = [0]
	$27 = [8228]
	$29	 = *($5 + [416])
	if ( (int_64)($29 == 0) ){ goto $label$108 }
	$15 = ($28 & [32])
	$17 = $12
	
.LOOP $label$109:
	*(($17 = ($17 + [-1]))) = (*((((CASTING uint_32)(uint_64 $29) & [15]) + [21632])) | $15)     # .data 21632 -> ["0123456789ABCDEF"]
	$29	 = (uint_64)$29 >> (uint_64)(int_64)4
	if ( ((int_64)$29) != (int_64)0) ){ goto $label$109 }
	if ( (($21 & [8]) == 0) ){ goto $label$12 }
	if ( (int_64)(*($5 + [416]) == 0) ){ goto $label$12 }
	$27 = (int_32($28 >> [4]) + [8228])
	$26 = [2]
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$108
	$17 = $12
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$89
	$15	 = *($5 + [416])
	$17 = ( $15 ? [8507] : $15 )
	
.LABEL $label$88
	$26 = [0]
	$15	 = CALL $148($17, ( [2147483647] ? $16 : ((int_32)$16 < (int_32)[0]) ))
	$22 = ($17 + $15)
	if ( ((int_32)$16 <= (int_32)[-1]) ){ goto $label$85 }
	$21 = $23
	$16 = $15
	goto $label$8 
	
.LABEL $label$87
	$26 = [0]
	$27 = [8228]
	$29	 = *($5 + [416])
	if ( (uint_64)($29 <= (int_64)4294967296) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$86
	$29	 = (int_64)
	*($5 + [416]) = $29((int_64)0 - $29))
	$26 = [1]
	$27 = [8228]
	if ( ((uint_64)$29 >= (uint_64)(int_64)4294967296) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$85
	$21 = $23
	$16 = $15
	if ( (*($22) == 0) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$84
	$26 = [1]
	$27 = [8229]
	if ( (uint_64)($29 <= (int_64)4294967296) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$83
	if ( $22 ){ goto $label$2 }
	
.LABEL $label$82
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$3 }
	$23	 = ($21 & [73728])
	if ( $23 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$81
	$15	 = ($12 - $17)
	$27 = ( [8228] ? [8233] : ((int_32)$16 > (int_32)$15) )
	$26 = ((int_32)$16 <= (int_32)$15)
	goto $label$12 
	
.LABEL $label$80
	$15 = [0]
	$23	 = ($21 & [73728])
	if ( ($23 == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$79
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$78
	*(*($5 + [416])) = (CASTING int_64)(int_32 $14)
	goto $label$4 
	
.LABEL $label$77
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$76
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$75
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$74
	*(*($5 + [416])) = (CASTING int_64)(int_32 $14)
	goto $label$4 
	
.LABEL $label$70
	$global$0 = ($5 + [8128])
	return [0]
	
.LABEL $label$18
	*(CALL $119()) = [22]
	goto $label$2 
	
.LABEL $label$17
	if ( ((int_32)$20 <= (int_32)$15) ){ goto $label$16 }
	$18	 = ($25 <= [256])
	$25	 = ($20 - $15)
	CALL memset(($5 + [432]), [32], ( $25 ? [256] : $18 ))
	$16	 = *($0)
	$19 = ($16 & [32])
	if ( $18 ){ goto $label$111 }
	$18 = ($19 == 0)
	$19 = $25
	
.LOOP $label$112:
	if ( (($18 & [1]) == 0) ){ goto $label$113 }
	CALL $132(($5 + [432]), [256], $0)
	$16 = *($0)
	
.LABEL $label$113
	$22	 = ($16 & [32])
	$18 = ($22 == 0)
	$19	 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$112 }
	if ( $22 ){ goto $label$16 }
	$25 = ($25 & [255])
	goto $label$110 
	
.LABEL $label$111
	if ( $19 ){ goto $label$16 }
	
.LABEL $label$110
	CALL $132(($5 + [432]), $25, $0)
	
.LABEL $label$16
	if ( ($15 == 0) ){ goto $label$114 }
	$18 = [0]
	
.LOOP $label$115:
	$19	 = *($17)
	if ( ($19 == 0) ){ goto $label$114 }
	$19	 = CALL $136(($5 + [340]), $19)
	$18	 = ($19 + $18)
	if ( ((uint_32)$18 > (uint_32)$15) ){ goto $label$114 }
	if ( (*($0) & [32]) ){ goto $label$116 }
	CALL $132(($5 + [340]), $19, $0)
	
.LABEL $label$116
	$17 = ($17 + [4])
	if ( ($18 <= $15) ){ goto $label$115 }
	
.LABEL $label$114
	if ( ((int_32)$23 != (int_32)[8192]) ){ goto $label$117 }     # .data 8192 -> [""]
	if ( ((int_32)$20 <= (int_32)$15) ){ goto $label$117 }
	$18	 = ($22 <= [256])
	$22	 = ($20 - $15)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $18 ))
	$17	 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$119 }
	$18 = ($19 == 0)
	$19 = $22
	
.LOOP $label$120:
	if ( (($18 & [1]) == 0) ){ goto $label$121 }
	CALL $132(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$121
	$16	 = ($17 & [32])
	$18 = ($16 == 0)
	$19	 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$120 }
	if ( $16 ){ goto $label$117 }
	$22 = ($22 & [255])
	goto $label$118 
	
.LABEL $label$119
	if ( $19 ){ goto $label$117 }
	
.LABEL $label$118
	CALL $132(($5 + [432]), $22, $0)
	
.LABEL $label$117
	$15 = ( $20 ? $15 : ((int_32)$20 > (int_32)$15) )
	goto $label$4 
	
.LABEL $label$15
	$30 = $29
	$17 = $12
	goto $label$13 
	
.LABEL $label$14
	$17 = $12
	
.LOOP $label$122:
	$30	 = ((uint_64)$29 / (uint_64)(int_64)10)
	*(($17 = ($17 + [-1]))) = ((CASTING uint_32)(uint_64 (int_64))($29 - ((int_64)$30 * (int_64)10))) | [48])
	$15 = ((uint_64)$29 > (uint_64)(int_64)42949672959)
	$29 = $30
	if ( $15 ){ goto $label$122 }
	
.LABEL $label$13
	$15	 = (CASTING uint_32)(uint_64 $30)
	if ( ($15 == 0) ){ goto $label$12 }
	
.LOOP $label$123:
	$19	 = ((uint_32)$15 / (uint_32)[10])
	*(($17 = ($17 + [-1]))) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$22 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $22 ){ goto $label$123 }
	
.LABEL $label$12
	if ( ($24 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$10
	$21 = ( ($21 & [-65537]) ? $21 : ((int_32)$16 > (int_32)[-1]) )
	$29 = *($5 + [416])
	if ( $16 ){ goto $label$124 }
	if ( ((int_64)($29 == 0) == 0) ){ goto $label$124 }
	$17 = $12
	$22 = $12
	$16 = [0]
	goto $label$8 
	
.LABEL $label$124
	$15	 = (($12 - $17) + (int_64)($29 == 0))
	$16 = ( $16 ? $15 : ((int_32)$16 > (int_32)$15) )
	
.LABEL $label$9
	$22 = $12
	
.LABEL $label$8
	$24	 = ($22 - $17)
	$28	 = ( $24 ? $16 : ((int_32)$16 < (int_32)$24) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$3 }
	$25	 = ($26 + $28)
	$15	 = ( $25 ? $20 : ((int_32)$20 < (int_32)$25) )
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	$21	 = ($21 & [73728])
	if ( $21 ){ goto $label$125 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$125 }
	$18	 = ($36 <= [256])
	$36	 = ($15 - $25)
	CALL memset(($5 + [432]), [32], ( $36 ? [256] : $18 ))
	$22	 = *($0)
	$19 = ($22 & [32])
	if ( $18 ){ goto $label$127 }
	$18 = ($19 == 0)
	$19 = $36
	
.LOOP $label$128:
	if ( (($18 & [1]) == 0) ){ goto $label$129 }
	CALL $132(($5 + [432]), [256], $0)
	$22 = *($0)
	
.LABEL $label$129
	$23	 = ($22 & [32])
	$18 = ($23 == 0)
	$19	 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$128 }
	if ( $23 ){ goto $label$125 }
	$36 = ($36 & [255])
	goto $label$126 
	
.LABEL $label$127
	if ( $19 ){ goto $label$125 }
	
.LABEL $label$126
	CALL $132(($5 + [432]), $36, $0)
	
.LABEL $label$125
	if ( (*($0) & [32]) ){ goto $label$130 }
	CALL $132($27, $26, $0)
	
.LABEL $label$130
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$131 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$131 }
	$18	 = ($26 <= [256])
	$26	 = ($15 - $25)
	CALL memset(($5 + [432]), [48], ( $26 ? [256] : $18 ))
	$22	 = *($0)
	$19 = ($22 & [32])
	if ( $18 ){ goto $label$133 }
	$18 = ($19 == 0)
	$19 = $26
	
.LOOP $label$134:
	if ( (($18 & [1]) == 0) ){ goto $label$135 }
	CALL $132(($5 + [432]), [256], $0)
	$22 = *($0)
	
.LABEL $label$135
	$23	 = ($22 & [32])
	$18 = ($23 == 0)
	$19	 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$134 }
	if ( $23 ){ goto $label$131 }
	$26 = ($26 & [255])
	goto $label$132 
	
.LABEL $label$133
	if ( $19 ){ goto $label$131 }
	
.LABEL $label$132
	CALL $132(($5 + [432]), $26, $0)
	
.LABEL $label$131
	if ( ((int_32)$24 >= (int_32)$16) ){ goto $label$136 }
	$18	 = ($23 <= [256])
	$23	 = ($28 - $24)
	CALL memset(($5 + [432]), [48], ( $23 ? [256] : $18 ))
	$16	 = *($0)
	$19 = ($16 & [32])
	if ( $18 ){ goto $label$138 }
	$18 = ($19 == 0)
	$19 = $23
	
.LOOP $label$139:
	if ( (($18 & [1]) == 0) ){ goto $label$140 }
	CALL $132(($5 + [432]), [256], $0)
	$16 = *($0)
	
.LABEL $label$140
	$22	 = ($16 & [32])
	$18 = ($22 == 0)
	$19	 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$139 }
	if ( $22 ){ goto $label$136 }
	$23 = ($23 & [255])
	goto $label$137 
	
.LABEL $label$138
	if ( $19 ){ goto $label$136 }
	
.LABEL $label$137
	CALL $132(($5 + [432]), $23, $0)
	
.LABEL $label$136
	if ( (*($0) & [32]) ){ goto $label$141 }
	CALL $132($17, $24, $0)
	
.LABEL $label$141
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$4 }     # .data 8192 -> [""]
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$4 }
	$18	 = ($16 <= [256])
	$16	 = ($15 - $25)
	CALL memset(($5 + [432]), [32], ( $16 ? [256] : $18 ))
	$17	 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$143 }
	$18 = ($19 == 0)
	$19 = $16
	
.LOOP $label$144:
	if ( (($18 & [1]) == 0) ){ goto $label$145 }
	CALL $132(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$145
	$20	 = ($17 & [32])
	$18 = ($20 == 0)
	$19	 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$144 }
	if ( $20 ){ goto $label$4 }
	$16 = ($16 & [255])
	goto $label$142 
	
.LABEL $label$143
	if ( $19 ){ goto $label$4 }
	
.LABEL $label$142
	CALL $132(($5 + [432]), $16, $0)
	goto $label$4 
	
.LABEL $label$7
	$23 = CALL unordtf2($30, $29, $30, $29)
	$16 = ($31 + [3])
	if ( ($21 & [8192]) ){ goto $label$146 }     # .data 8192 -> [""]
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$146 }
	$15	 = ($22 <= [256])
	$22	 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19	 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$148 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$149:
	if ( (($15 & [1]) == 0) ){ goto $label$150 }
	CALL $132(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$150
	$17	 = ($19 & [32])
	$15 = ($17 == 0)
	$18	 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$149 }
	if ( $17 ){ goto $label$146 }
	$22 = ($22 & [255])
	goto $label$147 
	
.LABEL $label$148
	if ( $18 ){ goto $label$146 }
	
.LABEL $label$147
	CALL $132(($5 + [432]), $22, $0)
	
.LABEL $label$146
	$15	 = *($0)
	if ( ($15 & [32]) ){ goto $label$155 }
	CALL $132($32, $31, $0)
	if ( ((*($0) & [32]) == 0) ){ goto $label$154 }
	goto $label$153 
	
.LABEL $label$155
	if ( ($15 & [32]) ){ goto $label$153 }
	
.LABEL $label$154
	$15	 = uint_32(($28 & [32]) >> [5])
	CALL $132(( ( [8734] ? [8749] : $15 ) ? ( [8678] ? [8701] : $15 ) : $23 ), [3], $0)
	if ( ((int_32)($21 & [73728]) != (int_32)[8192]) ){ goto $label$151 }     # .data 8192 -> [""]
	goto $label$152 
	
.LABEL $label$153
	if ( ((int_32)($21 & [73728]) != (int_32)[8192]) ){ goto $label$151 }     # .data 8192 -> [""]
	
.LABEL $label$152
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$151 }
	$15	 = ($22 <= [256])
	$22	 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19	 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$157 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$158:
	if ( (($15 & [1]) == 0) ){ goto $label$159 }
	CALL $132(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$159
	$17	 = ($19 & [32])
	$15 = ($17 == 0)
	$18	 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$158 }
	if ( $17 ){ goto $label$151 }
	$22 = ($22 & [255])
	goto $label$156 
	
.LABEL $label$157
	if ( $18 ){ goto $label$151 }
	
.LABEL $label$156
	CALL $132(($5 + [432]), $22, $0)
	
.LABEL $label$151
	$15 = ( $20 ? $16 : ((int_32)$20 > (int_32)$16) )
	goto $label$5 
	
.LABEL $label$6
	CALL $140(($5 + [320]), $30, $29, ($5 + [748]))
	$30	 = *($5 + [328])
	$29	 = *($5 + [320])
	CALL addtf3(($5 + [304]), $29, $30, $29, $30)
	$30	 = *((($5 + [304]) + [8]))
	$29	 = *($5 + [304])
	if ( (CALL eqtf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$160 }
	*($5 + [748]) = (*($5 + [748]) + [-1])
	
.LABEL $label$160
	$33	 = ($28 | [32])
	if ( ((int_32)$33 != (int_32)[97]) ){ goto $label$173 }
	$22	 = ($28 & [32])
	$26 = ( ($32 + [9]) ? $32 : $22 )
	if ( ((uint_32)$16 > (uint_32)[26]) ){ goto $label$171 }
	if ( (([27] - $16) == 0) ){ goto $label$171 }
	$15 = ($16 + [-27])
	$34 = (int_64)4612248968380809216
	$35 = (int_64)0
	
.LOOP $label$174:
	CALL multf3(($5 + [208]), $35, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($5 + [208]) + [8]))
	$35 = *($5 + [208])
	$15	 = ($15 + [1])
	if ( $15 ){ goto $label$174 }
	if ( ((int_32)*($26) != (int_32)[45]) ){ goto $label$172 }
	CALL subtf3(($5 + [160]), $29, ((int_64)$30 ^ (int_64)-9223372036854775808), $35, $34)
	CALL addtf3(($5 + [144]), $35, $34, *($5 + [160]), *((($5 + [160]) + [8])))
	$30 = ((int_64)*((($5 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$29 = *($5 + [144])
	goto $label$171 
	
.LABEL $label$173
	$15 = ((int_32)$16 < (int_32)[0])
	if ( (CALL netf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$176 }
	CALL multf3(($5 + [288]), $29, $30, (int_64)0, (int_64)4619285842798575616)
	$22	 = (*($5 + [748]) + [-28])
	*($5 + [748]) = $22
	$30 = *((($5 + [288]) + [8]))
	$29 = *($5 + [288])
	goto $label$175 
	
.LABEL $label$176
	$22 = *($5 + [748])
	
.LABEL $label$175
	$27 = ( [6] ? $16 : $15 )
	$36	 = ( ($5 + [752]) ? $9 : ((int_32)$22 < (int_32)[0]) )
	$19 = $36
	
.LOOP $label$177:
	$15	 = CALL fixunstfsi($29, $30)
	CALL floatunsitf(($5 + [272]), $15)
	CALL subtf3(($5 + [256]), $29, $30, *($5 + [272]), *((($5 + [272]) + [8])))
	CALL multf3(($5 + [240]), *($5 + [256]), *((($5 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($19) = $15
	$19 = ($19 + [4])
	$30	 = *((($5 + [240]) + [8]))
	$29	 = *($5 + [240])
	if ( CALL netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$177 }
	if ( ((int_32)$22 < (int_32)[1]) ){ goto $label$180 }
	$18 = $36
	
.LOOP $label$181:
	$17 = ( $22 ? [29] : ((int_32)$22 < (int_32)[29]) )
	$15	 = ($19 + [-4])
	if ( ($15 <= $18) ){ goto $label$182 }
	$30 = (CASTING uint_64)(uint_32 $17)
	$29 = (int_64)0
	
.LOOP $label$183:
	$29	 = ((uint_64)$29 / (uint_64)(int_64)1000000000)
	$29	 = ((int_64)((int_64)*($15) << (int_64)$30) + (int_64)((int_64)$29 & (int_64)4294967295))
	*($15) = (int_64))($29 - ((int_64)$29 * (int_64)1000000000))
	$15	 = ($15 + [-4])
	if ( ((uint_32)$15 >= (uint_32)$18) ){ goto $label$183 }
	$15	 = (CASTING uint_32)(uint_64 $29)
	if ( ($15 == 0) ){ goto $label$182 }
	*(($18 = ($18 + [-4]))) = $15
	
.LABEL $label$182
	
.LOOP $label$185:
	$15	 = $19
	if ( ((uint_32)$15 <= (uint_32)$18) ){ goto $label$184 }
	$19	 = ($15 + [-4])
	if ( (*($19) == 0) ){ goto $label$185 }
	
.LABEL $label$184
	$19 = $15
	$22	 = ($22 - $17)
	if ( ((int_32)$22 > (int_32)[0]) ){ goto $label$181 }
	*($5 + [748]) = $22
	if ( ((int_32)$22 > (int_32)[-1]) ){ goto $label$178 }
	goto $label$179 
	
.LABEL $label$180
	$15 = $19
	$18 = $36
	if ( ((int_32)$22 > (int_32)[-1]) ){ goto $label$178 }
	
.LABEL $label$179
	$26 = (((uint_32)($27 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$33 != (int_32)[102]) ){ goto $label$187 }
	$37 = ($36 + ($26 << [2]))
	
.LOOP $label$188:
	$19	 = ([0] - $22)
	$23 = ( $19 ? [9] : ((int_32)$19 < (int_32)[9]) )
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$190 }
	$25 = uint_32([1000000000] >> $23)
	$24 = ((int_32)([-1] << $23) ^ (int_32)[-1])
	$17 = [0]
	$19 = $18
	
.LOOP $label$191:
	$16	 = *($19)
	*($19) = (uint_32($16 >> $23) + $17)
	$17 = ((int_32)($16 & $24) * (int_32)$25)
	$19	 = ($19 + [4])
	if ( ($19 <= $15) ){ goto $label$191 }
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	if ( ($17 == 0) ){ goto $label$189 }
	*($15) = $17
	$15 = ($15 + [4])
	goto $label$189 
	
.LABEL $label$190
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	
.LABEL $label$189
	$15 = ( $37 ? $15 : ((int_32)int_32(($15 - $36) >> [2]) > (int_32)$26) )
	$22	 = ($23 + $22)
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$188 }
	goto $label$186 
	
.LABEL $label$187
	
.LOOP $label$192:
	$19	 = ([0] - $22)
	$23 = ( $19 ? [9] : ((int_32)$19 < (int_32)[9]) )
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$194 }
	$25 = uint_32([1000000000] >> $23)
	$24 = ((int_32)([-1] << $23) ^ (int_32)[-1])
	$17 = [0]
	$19 = $18
	
.LOOP $label$195:
	$16	 = *($19)
	*($19) = (uint_32($16 >> $23) + $17)
	$17 = ((int_32)($16 & $24) * (int_32)$25)
	$19	 = ($19 + [4])
	if ( ($19 <= $15) ){ goto $label$195 }
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	if ( ($17 == 0) ){ goto $label$193 }
	*($15) = $17
	$15 = ($15 + [4])
	goto $label$193 
	
.LABEL $label$194
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	
.LABEL $label$193
	$15 = ( ($18 + ($26 << [2])) ? $15 : ((int_32)int_32(($15 - $18) >> [2]) > (int_32)$26) )
	$22	 = ($23 + $22)
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$192 }
	
.LABEL $label$186
	*($5 + [748]) = $22
	
.LABEL $label$178
	$19 = [0]
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$196 }
	$19 = ((int_32)int_32(($36 - $18) >> [2]) * (int_32)[9])
	$16	 = *($18)
	if ( ($16 <= [10]) ){ goto $label$196 }
	$17 = [10]
	
.LOOP $label$197:
	$19 = ($19 + [1])
	$17	 = ((int_32)$17 * (int_32)[10])
	if ( ((uint_32)$16 >= (uint_32)$17) ){ goto $label$197 }
	
.LABEL $label$196
	$23	 = ((int_32)$33 == (int_32)[103])
	$25	 = (((int_32)$27 != (int_32)[0]) & $23)
	$16	 = ( [0] ? $19 : ((int_32)$33 == (int_32)[102]) )
	$17	 = (($27 - $16) - $25)
	if ( ((int_32)$17 >= (int_32)(((int_32)int_32(($15 - $36) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$198 }
	$24	 = ($17 + [147456])
	$26	 = ((int_32)$24 / (int_32)[9])
	$37	 = ($36 + ($26 << [2]))
	$22 = ($37 + [-65532])
	$17 = [10]
	$26	 = ((int_32)$26 * (int_32)[9])
	if ( ((int_32)($24 - $26) > (int_32)[7]) ){ goto $label$199 }
	$16 = (((($27 + ([0] - $25)) + [147455]) - $16) - $26)
	$17 = [10]
	
.LOOP $label$200:
	$17 = ((int_32)$17 * (int_32)[10])
	$16	 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$200 }
	
.LABEL $label$199
	$24	 = ((uint_32)$25 / (uint_32)$17)
	$25	 = *($22)
	$16 = ($25 - ((int_32)$24 * (int_32)$17))
	$26	 = ($22 + [4])
	if ( ((int_32)$26 != (int_32)$15) ){ goto $label$202 }
	if ( ($16 == 0) ){ goto $label$201 }
	
.LABEL $label$202
	if ( ($24 & [1]) ){ goto $label$204 }
	$29 = (int_64)4643211215818981376
	$30 = (int_64)0
	if ( ((uint_32)$22 <= (uint_32)$18) ){ goto $label$203 }
	if ( ((int_32)$17 != (int_32)[1000000000]) ){ goto $label$203 }
	if ( ((*(($22 + [-4])) & [1]) == 0) ){ goto $label$203 }
	
.LABEL $label$204
	$29 = (int_64)4643211215818981376
	$30 = (int_64)1
	
.LABEL $label$203
	$34 = (int_64)4611123068473966592
	$24	 = uint_32($17 >> [1])
	if ( ($16 <= $24) ){ goto $label$205 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$16 == (int_32)$24) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$15) )
	
.LABEL $label$205
	if ( ($31 == 0) ){ goto $label$206 }
	if ( ((int_32)*($32) != (int_32)[45]) ){ goto $label$206 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$29 = ((int_64)$29 ^ (int_64)-9223372036854775808)
	
.LABEL $label$206
	CALL addtf3(($5 + [224]), $30, $29, (int_64)0, $34)
	$16	 = ($25 - $16)
	*($22) = $16
	if ( (CALL eqtf2(*($5 + [224]), *((($5 + [224]) + [8])), $30, $29) == 0) ){ goto $label$201 }
	$19	 = ($16 + $17)
	*($22) = $19
	if ( ($19 <= [1000000000]) ){ goto $label$207 }
	$19 = ($37 + [-65536])
	
.LOOP $label$208:
	*(($19 + [4])) = [0]
	if ( ((uint_32)$19 >= (uint_32)$18) ){ goto $label$209 }
	*(($18 = ($18 + [-4]))) = [0]
	
.LABEL $label$209
	$17	 = (*($19) + [1])
	*($19) = $17
	$19 = ($19 + [-4])
	if ( ((uint_32)$17 > (uint_32)[999999999]) ){ goto $label$208 }
	$22 = ($19 + [4])
	
.LABEL $label$207
	$19 = ((int_32)int_32(($36 - $18) >> [2]) * (int_32)[9])
	$16	 = *($18)
	if ( ($16 <= [10]) ){ goto $label$201 }
	$17 = [10]
	
.LOOP $label$210:
	$19 = ($19 + [1])
	$17	 = ((int_32)$17 * (int_32)[10])
	if ( ((uint_32)$16 >= (uint_32)$17) ){ goto $label$210 }
	
.LABEL $label$201
	$17	 = ($22 + [4])
	$15 = ( $17 ? $15 : ((uint_32)$15 > (uint_32)$17) )
	
.LABEL $label$198
	$22 = ([0] - $19)
	
.LOOP $label$213:
	$16	 = $15
	if ( ((uint_32)$16 <= (uint_32)$18) ){ goto $label$212 }
	$15	 = ($16 + [-4])
	if ( (*($15) == 0) ){ goto $label$213 }
	$24 = [1]
	if ( $23 ){ goto $label$211 }
	goto $label$162 
	
.LABEL $label$212
	$24 = [0]
	if ( ($23 == 0) ){ goto $label$162 }
	
.LABEL $label$211
	$15	 = ($27 + ($27 == 0))
	if ( ((int_32)$15 <= (int_32)$19) ){ goto $label$170 }
	if ( ((int_32)$19 < (int_32)[-4]) ){ goto $label$170 }
	$28 = ($28 + [-1])
	$27 = (($15 + [-1]) - $19)
	$23	 = ($21 & [8])
	if ( ($23 == 0) ){ goto $label$169 }
	goto $label$161 
	
.LABEL $label$172
	CALL addtf3(($5 + [192]), $29, $30, $35, $34)
	CALL subtf3(($5 + [176]), *($5 + [192]), *((($5 + [192]) + [8])), $35, $34)
	$30 = *((($5 + [176]) + [8]))
	$29 = *($5 + [176])
	
.LABEL $label$171
	$19 = $10
	$15	 = int_32($23 >> [31])
	$23	 = *($5 + [748])
	$15	 = ((int_32)($23 + $15) ^ (int_32)$15)
	if ( ($15 == 0) ){ goto $label$215 }
	$18 = [0]
	
.LOOP $label$216:
	$19	 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [692]) + $18) + [11])) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$18 = ($18 + [-1])
	$17 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $17 ){ goto $label$216 }
	$19 = ((($5 + [692]) + $18) + [12])
	if ( $18 ){ goto $label$214 }
	
.LABEL $label$215
	*(($19 = ($19 + [-1]))) = [48]
	
.LABEL $label$214
	$25 = ($31 | [2])
	*(($24 = ($19 + [-2]))) = ($28 + [15])
	*(($19 + [-1])) = ( [45] ? [43] : ((int_32)$23 < (int_32)[0]) )
	if ( ($21 & [8]) ){ goto $label$217 }
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$168 }
	$15 = ($5 + [704])
	
.LOOP $label$218:
	$18	 = CALL fixtfsi($29, $30)
	CALL floatsitf(($5 + [80]), $18)
	CALL subtf3(($5 + [64]), $29, $30, *($5 + [80]), *((($5 + [80]) + [8])))
	CALL multf3(($5 + [48]), *($5 + [64]), *((($5 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($15) = (*(($18 + [21632])) | $22)     # .data 21632 -> ["0123456789ABCDEF"]
	$30 = *((($5 + [48]) + [8]))
	$29 = *($5 + [48])
	$18	 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$219 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$219
	$15 = $18
	if ( CALL netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$218 }
	goto $label$167 
	
.LABEL $label$217
	$15 = ($5 + [704])
	
.LOOP $label$220:
	$18	 = CALL fixtfsi($29, $30)
	CALL floatsitf(($5 + [128]), $18)
	CALL subtf3(($5 + [112]), $29, $30, *($5 + [128]), *((($5 + [128]) + [8])))
	CALL multf3(($5 + [96]), *($5 + [112]), *((($5 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($15) = (*(($18 + [21632])) | $22)     # .data 21632 -> ["0123456789ABCDEF"]
	$30 = *((($5 + [96]) + [8]))
	$29 = *($5 + [96])
	$18	 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$221 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$221
	$15 = $18
	if ( CALL netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$220 }
	goto $label$167 
	
.LABEL $label$170
	$27 = ($15 + [-1])
	$28 = ($28 + [-2])
	$23	 = ($21 & [8])
	if ( $23 ){ goto $label$161 }
	
.LABEL $label$169
	$15 = [9]
	if ( ($24 == 0) ){ goto $label$222 }
	$23	 = *(($16 + [-4]))
	if ( ($23 == 0) ){ goto $label$222 }
	$15 = [0]
	if ( ((uint_32)$23 % (uint_32)[10]) ){ goto $label$222 }
	$17 = [10]
	$15 = [0]
	
.LOOP $label$223:
	$15 = ($15 + [1])
	$17	 = ((int_32)$17 * (int_32)[10])
	if ( (((uint_32)$23 % (uint_32)$17) == 0) ){ goto $label$223 }
	
.LABEL $label$222
	$17 = (((int_32)int_32(($16 - $36) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($28 | [32]) != (int_32)[102]) ){ goto $label$166 }
	$23 = [0]
	$15	 = ($17 - $15)
	$15	 = ( $15 ? [0] : ((int_32)$15 > (int_32)[0]) )
	$27 = ( $27 ? $15 : ((int_32)$27 < (int_32)$15) )
	goto $label$161 
	
.LABEL $label$168
	$18 = ($5 + [704])
	
.LOOP $label$224:
	$19	 = CALL fixtfsi($29, $30)
	CALL floatsitf(($5 + [32]), $19)
	CALL subtf3(($5 + [16]), $29, $30, *($5 + [32]), *((($5 + [32]) + [8])))
	CALL multf3($5, *($5 + [16]), *((($5 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($15 = $18)) = (*(($19 + [21632])) | $22)     # .data 21632 -> ["0123456789ABCDEF"]
	$30 = *(($5 + [8]))
	$29 = *($5)
	$18	 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$225 }
	if ( (CALL eqtf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$225 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$225
	if ( CALL netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$224 }
	
.LABEL $label$167
	$15 = [-1]
	$22	 = ($10 - $24)
	if ( ((int_32)(([2147483645] - $25) - $22) < (int_32)$16) ){ goto $label$5 }
	$23	 = ($18 - ($5 + [704]))
	$28	 = ( ( ($16 + [2]) ? $23 : ((int_32)($8 + $18) < (int_32)$16) ) ? $23 : $16 )
	$16 = (($22 + $25) + $28)
	$21	 = ($21 & [73728])
	if ( $21 ){ goto $label$163 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$163 }
	$15	 = ($27 <= [256])
	$27	 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $27 ? [256] : $15 ))
	$19	 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$165 }
	$15 = ($18 == 0)
	$18 = $27
	
.LOOP $label$226:
	if ( (($15 & [1]) == 0) ){ goto $label$227 }
	CALL $132(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$227
	$17	 = ($19 & [32])
	$15 = ($17 == 0)
	$18	 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$226 }
	if ( $17 ){ goto $label$163 }
	$27 = ($27 & [255])
	goto $label$164 
	
.LABEL $label$166
	$23 = [0]
	$15	 = (($17 + $19) - $15)
	$15	 = ( $15 ? [0] : ((int_32)$15 > (int_32)[0]) )
	$27 = ( $27 ? $15 : ((int_32)$27 < (int_32)$15) )
	goto $label$161 
	
.LABEL $label$165
	if ( $18 ){ goto $label$163 }
	
.LABEL $label$164
	CALL $132(($5 + [432]), $27, $0)
	
.LABEL $label$163
	if ( (*($0) & [32]) ){ goto $label$228 }
	CALL $132($26, $25, $0)
	
.LABEL $label$228
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$229 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$229 }
	$15	 = ($25 <= [256])
	$25	 = ($20 - $16)
	CALL memset(($5 + [432]), [48], ( $25 ? [256] : $15 ))
	$19	 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$231 }
	$15 = ($18 == 0)
	$18 = $25
	
.LOOP $label$232:
	if ( (($15 & [1]) == 0) ){ goto $label$233 }
	CALL $132(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$233
	$17	 = ($19 & [32])
	$15 = ($17 == 0)
	$18	 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$232 }
	if ( $17 ){ goto $label$229 }
	$25 = ($25 & [255])
	goto $label$230 
	
.LABEL $label$231
	if ( $18 ){ goto $label$229 }
	
.LABEL $label$230
	CALL $132(($5 + [432]), $25, $0)
	
.LABEL $label$229
	if ( (*($0) & [32]) ){ goto $label$234 }
	CALL $132(($5 + [704]), $23, $0)
	
.LABEL $label$234
	$23	 = ($28 - $23)
	if ( ((int_32)$23 < (int_32)[1]) ){ goto $label$235 }
	$15	 = ($23 <= [256])
	CALL memset(($5 + [432]), [48], ( $23 ? [256] : $15 ))
	$19	 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$237 }
	$15 = ($18 == 0)
	$18 = $23
	
.LOOP $label$238:
	if ( (($15 & [1]) == 0) ){ goto $label$239 }
	CALL $132(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$239
	$17	 = ($19 & [32])
	$15 = ($17 == 0)
	$18	 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$238 }
	if ( $17 ){ goto $label$235 }
	$23 = ($23 & [255])
	goto $label$236 
	
.LABEL $label$237
	if ( $18 ){ goto $label$235 }
	
.LABEL $label$236
	CALL $132(($5 + [432]), $23, $0)
	
.LABEL $label$235
	if ( (*($0) & [32]) ){ goto $label$240 }
	CALL $132($24, $22, $0)
	
.LABEL $label$240
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$241 }     # .data 8192 -> [""]
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$241 }
	$15	 = ($22 <= [256])
	$22	 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19	 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$243 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$244:
	if ( (($15 & [1]) == 0) ){ goto $label$245 }
	CALL $132(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$245
	$17	 = ($19 & [32])
	$15 = ($17 == 0)
	$18	 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$244 }
	if ( $17 ){ goto $label$241 }
	$22 = ($22 & [255])
	goto $label$242 
	
.LABEL $label$243
	if ( $18 ){ goto $label$241 }
	
.LABEL $label$242
	CALL $132(($5 + [432]), $22, $0)
	
.LABEL $label$241
	$15	 = ( $20 ? $16 : ((int_32)$20 > (int_32)$16) )
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$162
	$23 = ($21 & [8])
	
.LABEL $label$161
	$15 = [-1]
	$25	 = ($27 | $23)
	if ( ((int_32)$27 > (int_32)( [2147483645] ? [2147483646] : $25 )) ){ goto $label$5 }
	$26 = (($27 + ((int_32)$25 != (int_32)[0])) + [1])
	$33	 = ((int_32)($28 | [32]) != (int_32)[102])
	if ( $33 ){ goto $label$247 }
	if ( ((int_32)$19 > (int_32)([2147483647] - $26)) ){ goto $label$5 }
	$19 = ( $19 ? [0] : ((int_32)$19 > (int_32)[0]) )
	goto $label$246 
	
.LABEL $label$247
	$17 = $10
	$38	 = ((int_32)$19 < (int_32)[0])
	$15	 = ( $22 ? $19 : $38 )
	if ( ($15 == 0) ){ goto $label$248 }
	
.LOOP $label$249:
	$19	 = ((uint_32)$15 / (uint_32)[10])
	*(($17 = ($17 + [-1]))) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$22 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $22 ){ goto $label$249 }
	
.LABEL $label$248
	if ( ((int_32)($10 - $17) > (int_32)[1]) ){ goto $label$250 }
	$15 = ($17 + [-1])
	
.LOOP $label$251:
	*($15) = [48]
	$19 = ($10 - $15)
	$17	 = ($15 + [-1])
	$15 = $17
	if ( ((int_32)$19 < (int_32)[2]) ){ goto $label$251 }
	$17 = ($17 + [1])
	
.LABEL $label$250
	*(($37 = ($17 + [-2]))) = $28
	$15 = [-1]
	*(($17 + [-1])) = ( [45] ? [43] : $38 )
	$19	 = ($10 - $37)
	if ( ((int_32)$19 > (int_32)([2147483647] - $26)) ){ goto $label$5 }
	
.LABEL $label$246
	$15 = [-1]
	$19	 = ($19 + $26)
	if ( ((int_32)$19 > (int_32)((int_32)$31 ^ (int_32)[2147483647])) ){ goto $label$5 }
	$26 = ($19 + $31)
	$21	 = ($21 & [73728])
	if ( $21 ){ goto $label$252 }
	if ( ((int_32)$20 <= (int_32)$26) ){ goto $label$252 }
	$15	 = ($28 <= [256])
	$28	 = ($20 - $26)
	CALL memset(($5 + [432]), [32], ( $28 ? [256] : $15 ))
	$17	 = *($0)
	$19 = ($17 & [32])
	if ( $15 ){ goto $label$254 }
	$15 = ($19 == 0)
	$19 = $28
	
.LOOP $label$255:
	if ( (($15 & [1]) == 0) ){ goto $label$256 }
	CALL $132(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$256
	$22	 = ($17 & [32])
	$15 = ($22 == 0)
	$19	 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$255 }
	if ( $22 ){ goto $label$252 }
	$28 = ($28 & [255])
	goto $label$253 
	
.LABEL $label$254
	if ( $19 ){ goto $label$252 }
	
.LABEL $label$253
	CALL $132(($5 + [432]), $28, $0)
	
.LABEL $label$252
	if ( (*($0) & [32]) ){ goto $label$257 }
	CALL $132($32, $31, $0)
	
.LABEL $label$257
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$258 }
	if ( ((int_32)$20 <= (int_32)$26) ){ goto $label$258 }
	$15	 = ($28 <= [256])
	$28	 = ($20 - $26)
	CALL memset(($5 + [432]), [48], ( $28 ? [256] : $15 ))
	$17	 = *($0)
	$19 = ($17 & [32])
	if ( $15 ){ goto $label$260 }
	$15 = ($19 == 0)
	$19 = $28
	
.LOOP $label$261:
	if ( (($15 & [1]) == 0) ){ goto $label$262 }
	CALL $132(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$262
	$22	 = ($17 & [32])
	$15 = ($22 == 0)
	$19	 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$261 }
	if ( $22 ){ goto $label$258 }
	$28 = ($28 & [255])
	goto $label$259 
	
.LABEL $label$260
	if ( $19 ){ goto $label$258 }
	
.LABEL $label$259
	CALL $132(($5 + [432]), $28, $0)
	
.LABEL $label$258
	if ( $33 ){ goto $label$273 }
	$23	 = ( $36 ? $18 : ((uint_32)$18 > (uint_32)$36) )
	$22 = $23
	
.LOOP $label$274:
	$15	 = *($22)
	if ( ($15 == 0) ){ goto $label$276 }
	$18 = [0]
	
.LOOP $label$277:
	$19	 = ((uint_32)$15 / (uint_32)[10])
	*(($6 + $18)) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$18 = ($18 + [-1])
	$17 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $17 ){ goto $label$277 }
	goto $label$275 
	
.LABEL $label$276
	$18 = [0]
	
.LABEL $label$275
	$15 = ($7 + $18)
	if ( ((int_32)$22 == (int_32)$23) ){ goto $label$281 }
	if ( ((uint_32)$15 <= (uint_32)($5 + [704])) ){ goto $label$280 }
	
.LOOP $label$282:
	*(($15 = ($15 + [-1]))) = [48]
	if ( ((uint_32)$15 > (uint_32)($5 + [704])) ){ goto $label$282 }
	$15 = ($5 + [704])
	if ( ((*($0) & [32]) == 0) ){ goto $label$279 }
	goto $label$278 
	
.LABEL $label$281
	if ( $18 ){ goto $label$280 }
	*(($15 = ($15 + [-1]))) = [48]
	
.LABEL $label$280
	if ( (*($0) & [32]) ){ goto $label$278 }
	
.LABEL $label$279
	CALL $132($15, ($7 - $15), $0)
	
.LABEL $label$278
	$22	 = ($22 + [4])
	if ( ((uint_32)$22 <= (uint_32)$36) ){ goto $label$274 }
	if ( ($25 == 0) ){ goto $label$283 }
	if ( (*($0) & [32]) ){ goto $label$283 }
	CALL $132([8761], [1], $0)
	
.LABEL $label$283
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$272 }
	if ( ((uint_32)$22 >= (uint_32)$16) ){ goto $label$271 }
	
.LOOP $label$284:
	$15 = $7
	$18	 = *($22)
	if ( ($18 == 0) ){ goto $label$286 }
	$15 = $7
	
.LOOP $label$287:
	$19	 = ((uint_32)$18 / (uint_32)[10])
	*(($15 = ($15 + [-1]))) = (($18 - ((int_32)$19 * (int_32)[10])) | [48])
	$17 = ((uint_32)$18 > (uint_32)[9])
	$18 = $19
	if ( $17 ){ goto $label$287 }
	if ( ((uint_32)$15 <= (uint_32)($5 + [704])) ){ goto $label$285 }
	
.LABEL $label$286
	
.LOOP $label$288:
	*(($15 = ($15 + [-1]))) = [48]
	if ( ((uint_32)$15 > (uint_32)($5 + [704])) ){ goto $label$288 }
	
.LABEL $label$285
	if ( (*($0) & [32]) ){ goto $label$289 }
	CALL $132($15, ( $27 ? [9] : ((int_32)$27 < (int_32)[9]) ), $0)
	
.LABEL $label$289
	$15 = ($27 + [-9])
	if ( ((int_32)$27 < (int_32)[10]) ){ goto $label$270 }
	$27 = $15
	$22	 = ($22 + [4])
	if ( ($22 <= $16) ){ goto $label$284 }
	goto $label$270 
	
.LABEL $label$273
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$266 }
	$25 = ( $16 ? ($18 + [4]) : $24 )
	if ( ($23 == 0) ){ goto $label$268 }
	$22 = $18
	
.LOOP $label$290:
	$17 = $7
	$15	 = *($22)
	if ( ($15 == 0) ){ goto $label$292 }
	$19 = [0]
	
.LOOP $label$293:
	$17	 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [704]) + $19) + [8])) = (($15 - ((int_32)$17 * (int_32)[10])) | [48])
	$19 = ($19 + [-1])
	$16 = ((uint_32)$15 > (uint_32)[9])
	$15 = $17
	if ( $16 ){ goto $label$293 }
	$17 = ((($5 + [704]) + $19) + [9])
	if ( $19 ){ goto $label$291 }
	
.LABEL $label$292
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$291
	if ( ((int_32)$22 == (int_32)$18) ){ goto $label$295 }
	if ( ((uint_32)$17 <= (uint_32)($5 + [704])) ){ goto $label$294 }
	
.LOOP $label$296:
	*(($17 = ($17 + [-1]))) = [48]
	if ( ((uint_32)$17 > (uint_32)($5 + [704])) ){ goto $label$296 }
	goto $label$294 
	
.LABEL $label$295
	$15	 = *($0)
	if ( ($15 & [32]) ){ goto $label$297 }
	CALL $132($17, [1], $0)
	$15 = *($0)
	
.LABEL $label$297
	$17 = ($17 + [1])
	if ( ($15 & [32]) ){ goto $label$294 }
	CALL $132([8761], [1], $0)
	
.LABEL $label$294
	$15 = ($7 - $17)
	if ( (*($0) & [32]) ){ goto $label$298 }
	CALL $132($17, ( $15 ? $27 : ((int_32)$27 > (int_32)$15) ), $0)
	
.LABEL $label$298
	$27 = ($27 - $15)
	$22	 = ($22 + [4])
	if ( ((uint_32)$22 >= (uint_32)$25) ){ goto $label$267 }
	if ( ((int_32)$27 > (int_32)[-1]) ){ goto $label$290 }
	goto $label$267 
	
.LABEL $label$272
	$15	 = $27
	if ( ((int_32)$15 >= (int_32)[1]) ){ goto $label$269 }
	goto $label$265 
	
.LABEL $label$271
	$15 = $27
	
.LABEL $label$270
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$265 }
	
.LABEL $label$269
	$18	 = ($15 <= [256])
	CALL memset(($5 + [432]), [48], ( $15 ? [256] : $18 ))
	$17	 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$300 }
	$18 = ($19 == 0)
	$19 = $15
	
.LOOP $label$301:
	if ( (($18 & [1]) == 0) ){ goto $label$302 }
	CALL $132(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$302
	$16	 = ($17 & [32])
	$18 = ($16 == 0)
	$19	 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$301 }
	if ( $16 ){ goto $label$265 }
	$15 = ($15 & [255])
	goto $label$299 
	
.LABEL $label$300
	if ( $19 ){ goto $label$265 }
	
.LABEL $label$299
	CALL $132(($5 + [432]), $15, $0)
	if ( ((int_32)$21 == (int_32)[8192]) ){ goto $label$264 }     # .data 8192 -> [""]
	goto $label$263 
	
.LABEL $label$268
	$22 = $18
	
.LOOP $label$303:
	$17 = $7
	$15	 = *($22)
	if ( ($15 == 0) ){ goto $label$305 }
	$19 = [0]
	
.LOOP $label$306:
	$17	 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [704]) + $19) + [8])) = (($15 - ((int_32)$17 * (int_32)[10])) | [48])
	$19 = ($19 + [-1])
	$16 = ((uint_32)$15 > (uint_32)[9])
	$15 = $17
	if ( $16 ){ goto $label$306 }
	$17 = ((($5 + [704]) + $19) + [9])
	if ( $19 ){ goto $label$304 }
	
.LABEL $label$305
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$304
	if ( ((int_32)$22 == (int_32)$18) ){ goto $label$308 }
	if ( ((uint_32)$17 <= (uint_32)($5 + [704])) ){ goto $label$307 }
	
.LOOP $label$309:
	*(($17 = ($17 + [-1]))) = [48]
	if ( ((uint_32)$17 > (uint_32)($5 + [704])) ){ goto $label$309 }
	goto $label$307 
	
.LABEL $label$308
	if ( (*($0) & [32]) ){ goto $label$310 }
	CALL $132($17, [1], $0)
	
.LABEL $label$310
	$17 = ($17 + [1])
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$307 }
	if ( (*($0) & [32]) ){ goto $label$307 }
	CALL $132([8761], [1], $0)
	
.LABEL $label$307
	$15 = ($7 - $17)
	if ( (*($0) & [32]) ){ goto $label$311 }
	CALL $132($17, ( $15 ? $27 : ((int_32)$27 > (int_32)$15) ), $0)
	
.LABEL $label$311
	$27 = ($27 - $15)
	$22	 = ($22 + [4])
	if ( ((uint_32)$22 >= (uint_32)$25) ){ goto $label$267 }
	if ( ((int_32)$27 > (int_32)[-1]) ){ goto $label$303 }
	
.LABEL $label$267
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$266 }
	$18	 = ($27 <= [256])
	CALL memset(($5 + [432]), [48], ( $27 ? [256] : $18 ))
	$19	 = *($0)
	$15 = ($19 & [32])
	if ( $18 ){ goto $label$313 }
	$15 = ($15 == 0)
	$18 = $27
	
.LOOP $label$314:
	if ( (($15 & [1]) == 0) ){ goto $label$315 }
	CALL $132(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$315
	$17	 = ($19 & [32])
	$15 = ($17 == 0)
	$18	 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$314 }
	if ( $17 ){ goto $label$266 }
	$27 = ($27 & [255])
	goto $label$312 
	
.LABEL $label$313
	if ( $15 ){ goto $label$266 }
	
.LABEL $label$312
	CALL $132(($5 + [432]), $27, $0)
	
.LABEL $label$266
	if ( (*($0) & [32]) ){ goto $label$265 }
	CALL $132($37, ($10 - $37), $0)
	
.LABEL $label$265
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$263 }     # .data 8192 -> [""]
	
.LABEL $label$264
	if ( ((int_32)$20 <= (int_32)$26) ){ goto $label$263 }
	$15	 = ($16 <= [256])
	$16	 = ($20 - $26)
	CALL memset(($5 + [432]), [32], ( $16 ? [256] : $15 ))
	$19	 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$317 }
	$15 = ($18 == 0)
	$18 = $16
	
.LOOP $label$318:
	if ( (($15 & [1]) == 0) ){ goto $label$319 }
	CALL $132(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$319
	$17	 = ($19 & [32])
	$15 = ($17 == 0)
	$18	 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$318 }
	if ( $17 ){ goto $label$263 }
	$16 = ($16 & [255])
	goto $label$316 
	
.LABEL $label$317
	if ( $18 ){ goto $label$263 }
	
.LABEL $label$316
	CALL $132(($5 + [432]), $16, $0)
	
.LABEL $label$263
	$15	 = ( $20 ? $26 : ((int_32)$20 > (int_32)$26) )
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	
.LABEL $label$3
	*(CALL $119()) = [75]
	
.LABEL $label$2
	$14 = [-1]
	
.LABEL $label$1
	$global$0 = ($5 + [8128])
	$15
	$18
	return $14
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4	 = *($0)
	$5	 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6	 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4	 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7	 = ($4 << [1])
	$7	 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $116($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7	 = *($0)
	$2	 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4	 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7	 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

.data 9051 -> ["read\00"]
void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4	 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy($3, *($4 + [4]), [8])
	$5	 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4	 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy($3, *($4 + [4]), [8])
	$5	 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4	 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

.data 9196 -> ["write\00"]
void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4	 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4	 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4	 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3	 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $67(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

.data 9051 -> ["read\00"]
void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4	 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy($3, *($4 + [4]), [8])
	$5	 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [4])
	$4	 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy($0, *($4 + [4]), [8])
	$1	 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4	 = *($0)
	$5	 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6	 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4	 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7	 = ($4 << [1])
	$7	 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $116($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7	 = *($0)
	$2	 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4	 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7	 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

.data 9196 -> ["write\00"]
int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3	 = (uint_64)$3 >> (uint_64)(int_64)7
	$7	 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9196])     # .data 9196 -> ["write"]
	$6	 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4	 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1	 = *(($1 + [4]))
	$7	 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5	 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($6), $7, [8])
	$4	 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4	 = (*($6) + [8])
	*($6) = $4
	$7	 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4	 = *($0)
	$5	 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6	 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4	 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7	 = ($4 << [1])
	$7	 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $116($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7	 = *($0)
	$2	 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4	 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7	 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

.data 9196 -> ["write\00"]
void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2	 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6	 = *($1 + [16])
	$5	 = *(($1 + [20]))
	$7	 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8	 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6	 = *(($1 + [32]))
	$5	 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8	 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $66($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0	 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $78(CALL $77($2, $4), $7)
	$global$0 = ($2 + [16])
}

.data 9051 -> ["read\00"]
.data 9028 -> ["error reading iterator\00"]
int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2	 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5	 = *(($0 + [28]))
	$4	 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5	 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4	 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9028])     # .data 9028 -> ["error reading iterator"]
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $153($4)
	goto $label$4 
	
.LABEL $label$5
	$2	 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6	 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7	 = ($0 + [28])
	$8	 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $75(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $156($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

.data 9028 -> ["error reading iterator\00"]
int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2	 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5	 = *(($0 + [28]))
	$4	 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5	 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4	 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9028])     # .data 9028 -> ["error reading iterator"]
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $153($4)
	goto $label$4 
	
.LABEL $label$5
	$2	 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	CALL $79(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6	 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7	 = ($0 + [28])
	$8	 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $80(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $156($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

.data 9196 -> ["write\00"]
int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3	 = (uint_64)$3 >> (uint_64)(int_64)7
	$8	 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4	 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7	 = *($1)
	$6	 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9196])     # .data 9196 -> ["write"]
	$4	 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

.data 9051 -> ["read\00"]
void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4	 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $33(*($1), *($0 + [4]))
	$0 = *($0 + [8])
	$4	 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy($0, *($4 + [4]), [8])
	$1	 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [9051])     # .data 9051 -> ["read"]
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $32 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3	 = ($global$0 - [192])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = [0]
	$5	 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $153($5)
	goto $label$2 
	
.LABEL $label$3
	$2	 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [88])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [176]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $68(($4 + [24]), ($4 + [176]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [160]) + [8]))) = *($3)
	*($4 + [160]) = *($4 + [8])
	$3	 = *($6)
	*((($4 + [176]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0	 = *($4 + [160])
	*($4 + [40]) = $0
	*($4 + [176]) = $0
	*($4 + [180]) = ($4 + [152])
	*($4 + [176]) = ($4 + [24])
	CALL $69(($4 + [176]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$10 }
	$2 = [1]
	if ( (*($4 + [140]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $156($2)
	$2 = [1]
	if ( ((*($4 + [140]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [148])))
	if ( ((*($4 + [128]) & $2) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($4 + [128]) & $2) ){ goto $label$6 }
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [136])))
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [192])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [192])
	return $2
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2	 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $81($0, ($2 + [16]))
	$3	 = *($2 + [16])
	$4	 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6	 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7	 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $111($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3	 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $111($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3	 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $106($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

.data 9196 -> ["write\00"]
void .FUNC $30 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4	 = ($global$0 - [112])
	$global$0 = $4
	$5 = *($0)
	*((($4 + [8]) + [16])) = *(($2 + [8]))
	*($4 + [8]) = $1
	*($4 + [16]) = *($2)
	$3 = CALL $107((($4 + [8]) + [24]), $3)
	*($4 + [56]) = (int_64)8516769789752901632
	*($4 + [48]) = $5
	*(($2 = CALL _Znwj([16]))) = $5
	*($2 + [8]) = (int_64)3617214756542218240
	*(($4 + [84])) = [0]
	$0	 = ($2 + [16])
	*((($4 + [48]) + [24])) = $0
	*(($4 + [68])) = $0
	*($4 + [64]) = $2
	*($4 + [76 align=4]) = (int_64)0
	$2	 = *($3)
	$0	 = ( *((($4 + [8]) + [28])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($0 + [24])
	$5 = (CASTING uint_64)(uint_32 $0)
	$0 = (($4 + [48]) + [28])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$5	 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $66($0, $2)
	$0 = *(($4 + [80]))
	$2 = *(($4 + [76]))
	goto $label$2 
	
.LABEL $label$3
	$0 = [0]
	$2 = [0]
	
.LABEL $label$2
	*($4 + [88]) = $2
	*($4 + [96]) = $0
	$0	 = ($0 - $2)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy($2, ($4 + [8]), [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(($2 + [8]), (($4 + [8]) + [8]), [8])
	*($4 + [104]) = *((($4 + [8]) + [16]))
	CALL eosio_assert(((int_32)($0 + [-16]) > (int_32)[7]), [9196])     # .data 9196 -> ["write"]
	CALL memcpy(($2 + [16]), ($4 + [104]), [8])
	*($4 + [92]) = ($2 + [24])
	CALL $67(($4 + [88]), $3)
	CALL $39(($4 + [88]), ($4 + [48]))
	$2	 = *($4 + [88])
	CALL send_inline($2, (*($4 + [92]) - $2))
	$2	 = *($4 + [88])
	if ( ($2 == 0) ){ goto $label$4 }
	*($4 + [92]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$2	 = *($4 + [76])
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [80])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$2	 = *($4 + [64])
	if ( ($2 == 0) ){ goto $label$6 }
	*(($4 + [68])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$7
	$global$0 = ($4 + [112])
}

void .FUNC $31 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_64 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_64 $9
	$8	 = ($global$0 - [80])
	$global$0 = $8
	$9 = *($0)
	*($8) = *($0 + [8])
	CALL $107(($8 + [8]), $7)
	*($8 + [32]) = (int_64)-8279610709314294272
	*($8 + [24]) = $9
	*(($0 = CALL _Znwj([16]))) = $9
	*($0 + [8]) = (int_64)3617214756542218240
	$7	 = ($0 + [16])
	*(($8 + [48])) = $7
	*(($8 + [44])) = $7
	*($8 + [40]) = $0
	CALL $60(($8 + [52]), $8)
	CALL $39(($8 + [64]), ($8 + [24]))
	$0	 = *($8 + [64])
	CALL send_inline($0, (*($8 + [68]) - $0))
	$0	 = *($8 + [64])
	if ( ($0 == 0) ){ goto $label$1 }
	*($8 + [68]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$0	 = *($8 + [52])
	if ( ($0 == 0) ){ goto $label$2 }
	*(($8 + [56])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$0	 = *($8 + [40])
	if ( ($0 == 0) ){ goto $label$3 }
	*(($8 + [44])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($8 + [16])))
	
.LABEL $label$4
	$global$0 = ($8 + [80])
}

int_32 .FUNC $129 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3	 = *($0 + [28])
	CALL prints_l($3, (*($0 + [20]) - $3))
	CALL prints_l($1, $2)
	return ((*($0 + [20]) + $2) - *($0 + [28]))
}

void .FUNC $127 ()
{
	CALL $150([10680])
}