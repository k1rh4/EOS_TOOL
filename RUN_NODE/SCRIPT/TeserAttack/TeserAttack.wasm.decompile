(data (i32.const 8220) "failed to allocate pages\00main\00")
(data (i32.const 8250) "[+] Seq Number :%d \n\00")
(data (i32.const 8271) "string is too long to be a valid name\00")
(data (i32.const 8309) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8376) "character is not in allowed character set for names\00")
(data (i32.const 8428) "write\00")
(data (i32.const 8434) "\t[#] FUNC: \00")
(data (i32.const 8446) "read\00")
(data (i32.const 0) "\08!\00\00")
(import "env" "check_transaction_authorization" (func $fimport$0 (param i32 i32 i32 i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$1))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "memset" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "check_permission_authorization" (func $fimport$4 (param i64 i64 i32 i32 i32 i32 i64) (result i32)))
(import "env" "action_data_size" (func $fimport$5 (result i32)))
(import "env" "read_action_data" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "prints" (func $fimport$8 (param i32)))
(import "env" "printui" (func $fimport$9 (param i64)))
(import "env" "memcpy" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert_code" (func $fimport$11 (param i32 i64)))
(import "env" "send_deferred" (func $fimport$12 (param i32 i64 i32 i32 i32)))
(export "apply" (func $21))
(table $0 3 3 anyfunc)
(elem (i32.const 1) $22 $24)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 8451))
(global $global$2 i32 (i32.const 8451))


.data 8428 -> ["write\00"]
.data 0 -> ["\08!\00\00"]
void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5	 = *($4 + [4])
	$4	 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5	 = *($0)
	$3 = ($5 + [8])
	$0	 = *($4 + [4])
	$4	 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = ($5 + [16])
	$4	 = *($1 + [4])
	$1	 = *($1)
	if ( ((int_32)(*($1 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$4 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $0, [8])
	$0	 = (*($4) + [8])
	*(($4 = ($1 + [4]))) = $0
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($1 + [8])) - $0) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$0 = *($4)
	
.LABEL $label$4
	CALL memcpy($0, ($2 + [8]), [8])
	*($4) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

.data 8428 -> ["write\00"]
.data 0 -> ["\08!\00\00"]
int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3	 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [4])
	$4	 = (*($3) + [4])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [4])
	$6	 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[1]) ){ goto $label$2 }
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [2])
	$4	 = (*($3) + [2])
	*($3) = $4
	$3 = ($1 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [4])
	$3	 = (*($4) + [4])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [12])
	$8 = ($0 + [8])
	
.LOOP $label$4:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7	 = (uint_64)$7 >> (uint_64)(int_64)7
	$6	 = ((int_64)$7) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$5 }     # .data 0 -> ["\08!"]
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$3 = *($4)
	
.LABEL $label$5
	CALL memcpy($3, ($2 + [14]), [1])
	$3	 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$4 }
	$4 = ($1 + [16])
	$8	 = ($0 + [8])
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$6 }     # .data 0 -> ["\08!"]
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$3 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $4, [1])
	$3	 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [20])
	
.LOOP $label$7:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7	 = (uint_64)$7 >> (uint_64)(int_64)7
	$6	 = ((int_64)$7) != (int_64)0
	*($2 + [15]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$8 }     # .data 0 -> ["\08!"]
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$3 = *($4)
	
.LABEL $label$8
	CALL memcpy($3, ($2 + [15]), [1])
	$3	 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$7 }
	$global$0 = ($2 + [16])
	return $0
}

.data 0 -> ["\08!\00\00"]
void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4	 = ($global$0 - [32])
	$global$0 = $4
	$5 = [0]     # .data 0 -> ["\08!"]
	*($4 + [8]) = [0]     # .data 0 -> ["\08!"]
	*($4) = (int_64)0
	*($4 + [16]) = [0]     # .data 0 -> ["\08!"]
	CALL $18(($4 + [16]), $0)
	$6	 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$2 }
	CALL $19($4, $6)
	$5 = *($4 + [4])
	$6 = *($4)
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]     # .data 0 -> ["\08!"]
	
.LABEL $label$1
	*($4 + [20]) = $6
	*($4 + [16]) = $6
	*($4 + [24]) = $5
	CALL $20(($4 + [16]), $0)
	$0	 = *($4)
	CALL send_deferred($1, $2, $0, (*($4 + [4]) - $0), $3)
	$0	 = *($4)
	if ( ($0 == 0) ){ goto $label$3 }
	*($4 + [4]) = $0
	CALL $9($0)
	
.LABEL $label$3
	$global$0 = ($4 + [32])
}

.data 8446 -> ["read\00"]
.data 0 -> ["\08!\00\00"]
void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5	 = *($4 + [4])
	$4	 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8446])     # .data 0 -> ["\08!"]     # .data 8446 -> ["read"]
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5	 = *($0)
	$3 = ($5 + [8])
	$0	 = *($4 + [4])
	$4	 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8446])     # .data 0 -> ["\08!"]     # .data 8446 -> ["read"]
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = ($5 + [16])
	$4	 = *($1 + [4])
	$1	 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8446])     # .data 0 -> ["\08!"]     # .data 8446 -> ["read"]
	$4 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $4, [8])
	$0	 = (*($4) + [8])
	*(($4 = ($1 + [4]))) = $0
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($1 + [8])) - $0) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8446])     # .data 0 -> ["\08!"]     # .data 8446 -> ["read"]
	$0 = *($4)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $0, [8])
	*(($5 + [24])) = *($2 + [8])
	*($4) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

.data 8446 -> ["read\00"]
.data 0 -> ["\08!\00\00"]
void .FUNC $33 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2	 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4	 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]     # .data 0 -> ["\08!"]
	goto $label$1 
	
.LABEL $label$3
	$2	 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [88]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8446])     # .data 0 -> ["\08!"]     # .data 8446 -> ["read"]
	
.LABEL $label$5
	CALL memcpy(($3 + [88]), $2, [8])
	$5 = ($2 + [8])
	$6	 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [8446])     # .data 0 -> ["\08!"]     # .data 8446 -> ["read"]
	
.LABEL $label$6
	CALL memcpy(($3 + [80]), $5, [8])
	*($3 + [72]) = (int_64)0
	*($3 + [64]) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [8446])     # .data 0 -> ["\08!"]     # .data 8446 -> ["read"]
	
.LABEL $label$7
	$4 = ($2 + $4)
	CALL memcpy(($3 + [64]), $5, [8])
	*($3 + [32]) = (int_64)0
	$5 = ($2 + [24])
	if ( ((int_32)$6 != (int_32)[24]) ){ goto $label$8 }
	CALL eosio_assert([0], [8446])     # .data 0 -> ["\08!"]     # .data 8446 -> ["read"]
	
.LABEL $label$8
	CALL memcpy(($3 + [32]), $5, [8])
	*(($6 = (($3 + [64]) + [8]))) = *($3 + [32])
	*((($3 + [32]) + [24])) = $4
	$7	 = *($6)
	*((($3 + [16]) + [8])) = $7
	*(($3 + [8])) = $7
	*($3 + [48]) = $2
	*(($3 + [52])) = ($2 + [32])
	*($3 + [40]) = $1
	*($3 + [32]) = $0
	$0	 = *($3 + [64])
	*($3 + [16]) = $0
	*($3) = $0
	CALL $22(($3 + [32]), *($3 + [88]), *($3 + [80]), $3)
	$global$0 = ($3 + [96])
}

.data 8434 -> ["\t[#] FUNC: \00"]
.data 0 -> ["\08!\00\00"]
void .FUNC $24 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4	 = ($global$0 - [128])
	$global$0 = $4
	*(($4 + [120])) = *(($3 + [8]))
	*($4 + [104]) = $2
	*($4 + [96]) = $1
	*($4 + [112]) = *($3)
	$5 = CALL current_time()
	*(($4 + [60])) = (int_64)0
	*(($4 + [76])) = (int_64)0
	*(($4 + [84])) = (int_64)0
	*($4 + [44]) = [0]     # .data 0 -> ["\08!"]
	*($4 + [48]) = [0]     # .data 0 -> ["\08!"]
	*($4 + [52 align=4]) = (int_64)0
	*($4 + [68 align=4]) = (int_64)0
	*($4 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($4 + [24]) = (int_64)3617214756542218240
	*($4 + [16]) = $1
	*($4 + [8]) = (int_64)-7954148590308294656
	CALL $32(($4 + [68]), ($4 + [16]), $0, ($4 + [8]), ($4 + [96]))
	*($4 + [24]) = (int_64)0
	*($4 + [16]) = $2
	CALL $28(($4 + [32]), ($4 + [16]), $1, [0])     # .data 0 -> ["\08!"]
	CALL prints([8434])     # .data 8434 -> ["\t[#] FUNC: "]
	CALL printui($2)
	CALL $31(($4 + [32]))
	$global$0 = ($4 + [128])
}

.data 0 -> ["\08!\00\00"]
void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5	 = ($global$0 - [32])
	$global$0 = $5
	$6	 = *($0)
	$7	 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8	 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6	 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9	 = ($6 << [1])
	$9	 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $7(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]     # .data 0 -> ["\08!"]
	$6 = [0]     # .data 0 -> ["\08!"]
	goto $label$1 
	
.LABEL $label$2
	CALL $17($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]     # .data 0 -> ["\08!"]
	$2	 = CALL $7([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]     # .data 0 -> ["\08!"]
	$8	 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $19(($7 + [28]), [32])
	$2 = *(($7 + [32]))
	$1	 = *($7 + [28])
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $2
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	CALL $29(($5 + [24]), ($5 + [16]))
	$2	 = *($0)
	$8	 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $8)
	$1 = [0]     # .data 0 -> ["\08!"]
	
.LOOP $label$7:
	$9	 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($6 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]     # .data 0 -> ["\08!"]
	$4	 = ($9 + [-24])
	*($6) = *($4)
	$6	 = ($9 + [-16])
	*($3) = *($6)
	*($6) = [0]     # .data 0 -> ["\08!"]
	*(($6 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]     # .data 0 -> ["\08!"]
	$3	 = ($9 + [-12])
	*($6) = *($3)
	*($4) = (int_64)0
	$9	 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]     # .data 0 -> ["\08!"]
	*($3) = (int_64)0
	$1	 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$9	 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $9
	CALL $9($9)
	
.LABEL $label$10
	$9 = ($2 + [-40])
	$1	 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL $9($1)
	
.LABEL $label$11
	$2 = $9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $9($6)
	
.LABEL $label$12
	$global$0 = ($5 + [32])
	(unreachable)
}

.data 0 -> ["\08!\00\00"]
void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5	 = ($global$0 - [32])
	$global$0 = $5
	$6	 = *($0)
	$7	 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8	 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6	 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9	 = ($6 << [1])
	$9	 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $7(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]     # .data 0 -> ["\08!"]
	$6 = [0]     # .data 0 -> ["\08!"]
	goto $label$1 
	
.LABEL $label$2
	CALL $17($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]     # .data 0 -> ["\08!"]
	$2	 = CALL $7([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]     # .data 0 -> ["\08!"]
	$8	 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $19(($7 + [28]), [32])
	$2 = *(($7 + [32]))
	$1	 = *($7 + [28])
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $2
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	CALL $29(($5 + [24]), ($5 + [16]))
	$2	 = *($0)
	$8	 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $8)
	$1 = [0]     # .data 0 -> ["\08!"]
	
.LOOP $label$7:
	$9	 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($6 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]     # .data 0 -> ["\08!"]
	$4	 = ($9 + [-24])
	*($6) = *($4)
	$6	 = ($9 + [-16])
	*($3) = *($6)
	*($6) = [0]     # .data 0 -> ["\08!"]
	*(($6 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]     # .data 0 -> ["\08!"]
	$3	 = ($9 + [-12])
	*($6) = *($3)
	*($4) = (int_64)0
	$9	 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]     # .data 0 -> ["\08!"]
	*($3) = (int_64)0
	$1	 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$9	 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $9
	CALL $9($9)
	
.LABEL $label$10
	$9 = ($2 + [-40])
	$1	 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL $9($1)
	
.LABEL $label$11
	$2 = $9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $9($6)
	
.LABEL $label$12
	$global$0 = ($5 + [32])
	(unreachable)
}

int_32 .FUNC $8 (int_32 $0)
{
	return CALL $7($0)
}

void .FUNC $9 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

.data 0 -> ["\08!\00\00"]
int_32 .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $4())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1	 = CALL $5($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]     # .data 0 -> ["\08!"]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

.data 0 -> ["\08!\00\00"]
int_32 .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1	 = ( $0 ? [1] : $0 )
	$0	 = CALL $1($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]     # .data 0 -> ["\08!"]
	$2	 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }     # .data 0 -> ["\08!"]
	CALL void $2()
	$0	 = CALL $1($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $4 ()
{
	return [8208]
}

.data 0 -> ["\08!\00\00"]
int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]     # .data 0 -> ["\08!"]
	$3	 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }     # .data 0 -> ["\08!"]
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $1($1)
	
.LABEL $label$2
	*(CALL $4()) = [22]
	return [0]     # .data 0 -> ["\08!"]
	
.LABEL $label$1
	$4	 = ($0 + [-1])
	$0	 = CALL $1(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2	 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3	 = ($0 + [-4])
	$4	 = *($3)
	$1	 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4	 = ($0 + ($4 & [-8]))
	$5	 = ($4 + [-8])
	$6 = *($5)
	$7	 = ($2 - $0)
	*($3) = ($1 | $7)
	$3	 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1	 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $2($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0	 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $2 (int_32 $0)
{
}

.data 0 -> ["\08!\00\00"]
void .FUNC $3 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]     # .data 0 -> ["\08!"]
	$0	 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0     # .data 0 -> ["\08!"]
	*([0] + [8192]) = $0     # .data 0 -> ["\08!"]
	*([0] + [8204]) = (current_memory)     # .data 0 -> ["\08!"]
}

void .FUNC $0 ()
{
	CALL $3()
}

.data 8220 -> ["failed to allocate pages\00main\00"]
.data 0 -> ["\08!\00\00"]
int_32 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1	 = uint_32($0 >> [16])
	$2	 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2     # .data 0 -> ["\08!"]     # .data 0 -> ["\08!"]
	$3	 = *([0] + [8196])
	$0	 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0     # .data 0 -> ["\08!"]     # .data 0 -> ["\08!"]
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]     # .data 0 -> ["\08!"]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])     # .data 0 -> ["\08!"]
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8220])     # .data 0 -> ["\08!"]     # .data 8220 -> ["failed to allocate pages"]
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	CALL $13($0, $1)
}

void .FUNC $15 (int_32 $0)
{
}

int_32 .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3	 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1	 = ($1 + [4])
	$2	 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3	 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $17 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $10 (int_32 $0)
{
	CALL $9($0)
}

.data 0 -> ["\08!\00\00"]
int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3	 = ( $0 ? [1] : $0 )
	$1	 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $6(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0	 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }     # .data 0 -> ["\08!"]
	CALL void $0()
	if ( CALL $6(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]     # .data 0 -> ["\08!"]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	return CALL $11($0, $1)
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

.data 0 -> ["\08!\00\00"]
void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3	 = ($global$0 - [32])
	$global$0 = $3
	CALL $0()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)6820279423187550208) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-7954148590308294656) ){ goto $label$1 }
	*($3 + [28]) = [0]     # .data 0 -> ["\08!"]
	*($3 + [24]) = [1]
	*($3) = *($3 + [24])
	CALL $23($1, $1, $3)
	goto $label$1 
	
.LABEL $label$2
	*($3 + [20]) = [0]     # .data 0 -> ["\08!"]
	*($3 + [16]) = [2]
	*($3 + [8]) = *($3 + [16])
	CALL $23($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $15([0])     # .data 0 -> ["\08!"]
	$global$0 = ($3 + [32])
}

.data 8428 -> ["write\00"]
.data 0 -> ["\08!\00\00"]
int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2	 = ($global$0 - [16])
	$global$0 = $2
	CALL $35($0, $1)
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [28])) - *($1 + [24])) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3	 = (uint_64)$3 >> (uint_64)(int_64)7
	$8	 = ((int_64)$3) != (int_64)0
	*($2 + [14]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }     # .data 0 -> ["\08!"]
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [14]), [1])
	$4	 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7	 = *(($1 + [28]))
	$6	 = *(($1 + [24]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $36($0, $6)
	$6	 = ($6 + [40])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$4 }
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [40])) - *($1 + [36])) / (int_32)[40]))
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$5:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3	 = (uint_64)$3 >> (uint_64)(int_64)7
	$8	 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$6 }     # .data 0 -> ["\08!"]
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [15]), [1])
	$4	 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$5 }
	$6	 = *(($1 + [40]))
	$4	 = *(($1 + [36]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $36($0, $4)
	$4	 = ($4 + [40])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = CALL $37($0, ($1 + [48]))
	$global$0 = ($2 + [16])
	return $4
}

.data 0 -> ["\08!\00\00"]
int_32 .FUNC $23 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3	 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7	 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]     # .data 0 -> ["\08!"]
	goto $label$1 
	
.LABEL $label$3
	$2	 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [80]) + [24]))) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [68]) = $2
	*($4 + [64]) = $2
	*($4 + [72]) = ($2 + $7)
	*($4 + [144]) = ($4 + [64])
	*($4 + [32]) = ($4 + [80])
	CALL $25(($4 + [32]), ($4 + [144]))
	*(($9 = (($4 + [16]) + [8]))) = *($4 + [72])
	*($4 + [16]) = *($4 + [64])
	*(($3 = (($4 + [128]) + [8]))) = *($9)
	*($4 + [128]) = *($4 + [16])
	$9	 = *($3)
	*((($4 + [144]) + [8])) = $9
	*((($4 + [32]) + [24])) = $9
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$0	 = *($4 + [128])
	*($4 + [48]) = $0
	*($4 + [144]) = $0
	*(($9 = (($4 + [112]) + [8]))) = *($8)
	*($4 + [112]) = *($4 + [96])
	$0 = *($4 + [88])
	$1 = *($4 + [80])
	*($3) = *($9)
	*($4 + [128]) = *($4 + [112])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$10	 = *((($4 + [128]) + [8]))
	*((($4 + [144]) + [8])) = $10
	*(($4 + [8])) = $10
	$10	 = *($4 + [128])
	*($4) = $10
	*($4 + [144]) = $10
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return [1]
}

.data 8250 -> ["[+] Seq Number :%d \n\00"]
.data 0 -> ["\08!\00\00"]
void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4	 = ($global$0 - [288])
	$global$0 = $4
	$5 = CALL current_time()
	*((($4 + [192]) + [28])) = (int_64)0
	*(($6 = (($4 + [192]) + [44]))) = (int_64)0
	*((($4 + [192]) + [52])) = (int_64)0
	*($4 + [204]) = [0]     # .data 0 -> ["\08!"]
	*($4 + [208]) = [0]     # .data 0 -> ["\08!"]
	*($4 + [212 align=4]) = (int_64)0
	*($4 + [228 align=4]) = (int_64)0
	*($4 + [192]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	$5 = CALL current_time()
	*((($4 + [128]) + [28])) = (int_64)0
	*((($4 + [128]) + [44])) = (int_64)0
	*((($4 + [128]) + [52])) = (int_64)0
	*($4 + [140]) = [0]     # .data 0 -> ["\08!"]
	*($4 + [144]) = [0]     # .data 0 -> ["\08!"]
	*($4 + [148 align=4]) = (int_64)0
	*($4 + [164 align=4]) = (int_64)0
	*($4 + [128]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($4 + [120]) = (int_64)4925998890227859456
	*($4 + [104]) = [8245]
	*($4 + [108]) = CALL $16([8245])
	*($4 + [8]) = *($4 + [104])
	$7 = CALL $26(($4 + [112]), ($4 + [8]))
	$8	 = ($3 + [8])
	*((($4 + [72]) + [24])) = *($8)
	*($4 + [80]) = $2
	*($4 + [72]) = $1
	*($4 + [88]) = *($3)
	*($4 + [24]) = (int_64)3617214756542218240
	*($4 + [16]) = *($0)
	CALL $27((($4 + [128]) + [36]), ($4 + [16]), ($4 + [120]), $7, ($4 + [72]))
	$7 = *($6)
	$9	 = (($4 + [192]) + [40])
	$6 = *($9)
	*($4 + [24]) = (int_64)0
	*($4 + [16]) = $2
	CALL $28(($4 + [128]), ($4 + [16]), $1, [0])     # .data 0 -> ["\08!"]
	*($4 + [64]) = (int_64)3617214756542218240
	*($4 + [56]) = $1
	*($4 + [48]) = (int_64)6820279423187550208
	*((($4 + [16]) + [24])) = *($8)
	$2	 = ((int_64)$2 * (int_64)3)
	$5	 = ((int_64)$2 + (int_64)1)
	*($4 + [24]) = $5
	*($4 + [16]) = $1
	*($4 + [32]) = *($3)
	$10 = (($4 + [192]) + [36])
	if ( ((uint_32)$6 >= (uint_32)$7) ){ goto $label$2 }
	$11 = *($0)
	*($6 + [8]) = (int_64)6820279423187550208
	*($6) = $11
	*($6 + [16 align=4]) = (int_64)0
	*(($8 = ($6 + [24]))) = [0]     # .data 0 -> ["\08!"]
	$7	 = CALL $7([16])
	*($6 + [16]) = $7
	$12	 = ($7 + [16])
	*($8) = $12
	*(($7 + [8])) = *((($4 + [56]) + [8]))
	*($7) = *($4 + [56])
	*(($6 + [20])) = $12
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]     # .data 0 -> ["\08!"]
	CALL $19(($6 + [28]), [32])
	$7 = *($6 + [28])
	*((($4 + [256]) + [8])) = *(($6 + [32]))
	*($4 + [260]) = $7
	*($4 + [256]) = $7
	*($4 + [272]) = ($4 + [256])
	*($4 + [280]) = ($4 + [16])
	CALL $29(($4 + [280]), ($4 + [272]))
	*($9) = (*($9) + [40])
	goto $label$1 
	
.LABEL $label$2
	CALL $30($10, ($4 + [56]), $0, ($4 + [48]), ($4 + [16]))
	
.LABEL $label$1
	*($4 + [24]) = (int_64)0
	*($4 + [16]) = $5
	CALL $28(($4 + [192]), ($4 + [16]), $1, [0])     # .data 0 -> ["\08!"]
	$6	 = *(($4 + [232]))
	$7	 = *(($6 + [-12]))
	if ( ($7 == 0) ){ goto $label$3 }
	*(($6 + [-8])) = $7
	CALL $9($7)
	
.LABEL $label$3
	$7 = (($4 + [16]) + [16])
	$8	 = *(($6 + [-24]))
	if ( ($8 == 0) ){ goto $label$4 }
	*(($6 + [-20])) = $8
	CALL $9($8)
	
.LABEL $label$4
	*(($8 = (($4 + [192]) + [40]))) = ($6 + [-40])
	CALL prints([8250])     # .data 8250 -> ["[+] Seq Number :%d \n"]
	CALL printui($5)
	*(($12 = (($4 + [56]) + [8]))) = (int_64)3617214756542218240
	*($4 + [56]) = $1
	*($4 + [48]) = (int_64)6820279423187550208
	*((($4 + [16]) + [8])) = $2
	*($7) = *($3)
	*(($7 + [8])) = *(($3 + [8]))
	*($4 + [16]) = $1
	$6	 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($4 + [236]))) ){ goto $label$6 }
	$5 = *($0)
	*($6 + [8]) = (int_64)6820279423187550208
	*($6) = $5
	*($6 + [16 align=4]) = (int_64)0
	*(($13 = ($6 + [24]))) = [0]     # .data 0 -> ["\08!"]
	$9	 = CALL $7([16])
	*($6 + [16]) = $9
	$14	 = ($9 + [16])
	*($13) = $14
	*(($9 + [8])) = *($12)
	*($9) = *($4 + [56])
	*(($6 + [20])) = $14
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]     # .data 0 -> ["\08!"]
	CALL $19(($6 + [28]), [32])
	$9 = *($6 + [28])
	*((($4 + [256]) + [8])) = *(($6 + [32]))
	*($4 + [260]) = $9
	*($4 + [256]) = $9
	*($4 + [272]) = ($4 + [256])
	*($4 + [280]) = ($4 + [16])
	CALL $29(($4 + [280]), ($4 + [272]))
	*($8) = (*($8) + [40])
	goto $label$5 
	
.LABEL $label$6
	CALL $30($10, ($4 + [56]), $0, ($4 + [48]), ($4 + [16]))
	
.LABEL $label$5
	*($4 + [24]) = (int_64)0
	*($4 + [16]) = $2
	CALL $28(($4 + [192]), ($4 + [16]), $1, [0])     # .data 0 -> ["\08!"]
	$6	 = *(($4 + [232]))
	$8	 = *(($6 + [-12]))
	if ( ($8 == 0) ){ goto $label$7 }
	*(($6 + [-8])) = $8
	CALL $9($8)
	
.LABEL $label$7
	$8	 = *(($6 + [-24]))
	if ( ($8 == 0) ){ goto $label$8 }
	*(($6 + [-20])) = $8
	CALL $9($8)
	
.LABEL $label$8
	*(($8 = (($4 + [192]) + [40]))) = ($6 + [-40])
	CALL prints([8250])     # .data 8250 -> ["[+] Seq Number :%d \n"]
	CALL printui($2)
	*(($9 = (($4 + [56]) + [8]))) = (int_64)3617214756542218240
	*($4 + [56]) = $1
	*($4 + [48]) = (int_64)6820279423187550208
	$2	 = ((int_64)$2 + (int_64)-1)
	*((($4 + [16]) + [8])) = $2
	*($7) = *($3)
	*(($7 + [8])) = *(($3 + [8]))
	*($4 + [16]) = $1
	$3	 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($4 + [236]))) ){ goto $label$10 }
	$5 = *($0)
	*($3 + [8]) = (int_64)6820279423187550208
	*($3) = $5
	*($3 + [16 align=4]) = (int_64)0
	*(($0 = ($3 + [24]))) = [0]     # .data 0 -> ["\08!"]
	$6	 = CALL $7([16])
	*($3 + [16]) = $6
	$7	 = ($6 + [16])
	*($0) = $7
	*(($6 + [8])) = *($9)
	*($6) = *($4 + [56])
	*(($3 + [20])) = $7
	*($3 + [28 align=4]) = (int_64)0
	*(($3 + [36])) = [0]     # .data 0 -> ["\08!"]
	CALL $19(($3 + [28]), [32])
	$6 = *($3 + [28])
	*((($4 + [256]) + [8])) = *(($3 + [32]))
	*($4 + [260]) = $6
	*($4 + [256]) = $6
	*($4 + [272]) = ($4 + [256])
	*($4 + [280]) = ($4 + [16])
	CALL $29(($4 + [280]), ($4 + [272]))
	*($8) = (*($8) + [40])
	goto $label$9 
	
.LABEL $label$10
	CALL $30($10, ($4 + [56]), $0, ($4 + [48]), ($4 + [16]))
	
.LABEL $label$9
	*($4 + [24]) = (int_64)0
	*($4 + [16]) = $2
	CALL $28(($4 + [192]), ($4 + [16]), $1, [0])     # .data 0 -> ["\08!"]
	$3	 = *(($4 + [232]))
	$6	 = *(($3 + [-12]))
	if ( ($6 == 0) ){ goto $label$11 }
	*(($3 + [-8])) = $6
	CALL $9($6)
	
.LABEL $label$11
	$6	 = *(($3 + [-24]))
	if ( ($6 == 0) ){ goto $label$12 }
	*(($3 + [-20])) = $6
	CALL $9($6)
	
.LABEL $label$12
	*(($4 + [232])) = ($3 + [-40])
	CALL prints([8250])     # .data 8250 -> ["[+] Seq Number :%d \n"]
	CALL printui($2)
	CALL $31(($4 + [128]))
	CALL $31(($4 + [192]))
	$global$0 = ($4 + [288])
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2	 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3	 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3	 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5	 = *($1 + [24])
	$4	 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3	 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7	 = *($5 + [16])
	$6	 = *(($5 + [20]))
	$8	 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3	 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7	 = *($5 + [28])
	$6	 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3	 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5	 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5	 = *($1 + [36])
	$4	 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3	 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7	 = *($5 + [16])
	$6	 = *(($5 + [20]))
	$8	 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3	 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7	 = *($5 + [28])
	$6	 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3	 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5	 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5	 = *($1 + [48])
	$8	 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3	 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7	 = *($5 + [4])
	$6	 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3	 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5	 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

.data 0 -> ["\08!\00\00"]
void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3	 = *($0 + [4])
	$2	 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4	 = *($0)
	$5	 = ($3 - $4)
	$6	 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2	 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2	 = ($2 << [1])
	$7	 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $7($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]     # .data 0 -> ["\08!"]
	$3	 = (*($0) + [1])
	*($0) = $3
	$1	 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]     # .data 0 -> ["\08!"]
	$2 = [0]     # .data 0 -> ["\08!"]
	goto $label$2 
	
.LABEL $label$3
	CALL $17($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5	 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]     # .data 0 -> ["\08!"]
	$3 = ($3 + [1])
	$1	 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1	 = *($0)
	$6	 = ($0 + [4])
	$3	 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $9($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

.data 0 -> ["\08!\00\00"]
void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5	 = ($global$0 - [32])
	$global$0 = $5
	$6	 = *($0)
	$7	 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8	 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6	 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9	 = ($6 << [1])
	$9	 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $7(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]     # .data 0 -> ["\08!"]
	$6 = [0]     # .data 0 -> ["\08!"]
	goto $label$1 
	
.LABEL $label$2
	CALL $17($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]     # .data 0 -> ["\08!"]
	$2	 = CALL $7([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]     # .data 0 -> ["\08!"]
	$8	 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $19(($7 + [28]), [32])
	$2 = *(($7 + [32]))
	$1	 = *($7 + [28])
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $2
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	CALL $29(($5 + [24]), ($5 + [16]))
	$2	 = *($0)
	$8	 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $8)
	$1 = [0]     # .data 0 -> ["\08!"]
	
.LOOP $label$7:
	$9	 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($6 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]     # .data 0 -> ["\08!"]
	$4	 = ($9 + [-24])
	*($6) = *($4)
	$6	 = ($9 + [-16])
	*($3) = *($6)
	*($6) = [0]     # .data 0 -> ["\08!"]
	*(($6 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]     # .data 0 -> ["\08!"]
	$3	 = ($9 + [-12])
	*($6) = *($3)
	*($4) = (int_64)0
	$9	 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]     # .data 0 -> ["\08!"]
	*($3) = (int_64)0
	$1	 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$9	 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $9
	CALL $9($9)
	
.LABEL $label$10
	$9 = ($2 + [-40])
	$1	 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL $9($1)
	
.LABEL $label$11
	$2 = $9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $9($6)
	
.LABEL $label$12
	$global$0 = ($5 + [32])
	(unreachable)
}

.data 8309 -> ["thirteenth character in name cannot be a letter that comes after j\00"]
.data 8376 -> ["character is not in allowed character set for names\00"]
.data 8271 -> ["string is too long to be a valid name\00"]
.data 0 -> ["\08!\00\00"]
int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2	 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [8271])     # .data 0 -> ["\08!"]     # .data 8271 -> ["string is too long to be a valid name"]
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3	 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]     # .data 0 -> ["\08!"]
	
.LOOP $label$6:
	$4	 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7	 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]     # .data 0 -> ["\08!"]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]     # .data 0 -> ["\08!"]
	CALL eosio_assert([0], [8376])     # .data 0 -> ["\08!"]     # .data 8376 -> ["character is not in allowed character set for names"]
	$4 = *($0)
	
.LABEL $label$7
	$4	 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6	 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]     # .data 0 -> ["\08!"]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6	 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6	 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8309])     # .data 0 -> ["\08!"]     # .data 8309 -> ["thirteenth character in name cannot be a letter that comes after j"]
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8376])     # .data 0 -> ["\08!"]     # .data 8376 -> ["character is not in allowed character set for names"]
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

.data 8428 -> ["write\00"]
.data 0 -> ["\08!\00\00"]
int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $38(CALL $39($0, ($1 + [16])), ($1 + [28]))
	$2	 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3	 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

int_32 .FUNC $31 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1	 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2	 = ($0 + [52])
	$3	 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5	 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL $9($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL $9($3)
	
.LABEL $label$1
	$1	 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2	 = ($0 + [40])
	$3	 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4	 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL $9($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5	 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL $9($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL $9($3)
	
.LABEL $label$6
	$1	 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2	 = ($0 + [28])
	$3	 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4	 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL $9($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5	 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL $9($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL $9($3)
	
.LABEL $label$12
	return $0
}

.data 8428 -> ["write\00"]
.data 0 -> ["\08!\00\00"]
int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3	 = (uint_64)$3 >> (uint_64)(int_64)7
	$7	 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }     # .data 0 -> ["\08!"]
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4	 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$5	 = *(($1 + [4]))
	$6	 = *($1)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$7 = ($0 + [4])
	$1	 = ($0 + [8])
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$5 }
	$8 = [2]
	goto $label$3 
	
.LABEL $label$5
	$8 = [0]     # .data 0 -> ["\08!"]
	goto $label$3 
	
.LABEL $label$4
	$8 = [3]
	
.LABEL $label$3
	
.LOOP $label$6:
	goto $label$10 
	
.LABEL $label$12
	$4	 = *($7)
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$7 }
	$8 = [2]
	goto $label$6 
	
.LABEL $label$11
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$4 = *($7)
	$8 = [0]     # .data 0 -> ["\08!"]
	goto $label$6 
	
.LABEL $label$10
	CALL memcpy($4, $6, [2])
	*($7) = (*($7) + [2])
	CALL $38($0, ($6 + [4]))
	$6	 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$8 }
	$8 = [3]
	goto $label$6 
	
.LABEL $label$9
	$global$0 = ($2 + [16])
	return $0
	
.LABEL $label$8
	$8 = [1]
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]     # .data 0 -> ["\08!"]
	goto $label$6 
	return $8
}

.data 8428 -> ["write\00"]
.data 0 -> ["\08!\00\00"]
int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3	 = (uint_64)$3 >> (uint_64)(int_64)7
	$8	 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }     # .data 0 -> ["\08!"]
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4	 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7	 = *($1)
	$6	 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

.data 8434 -> ["\t[#] FUNC: \00"]
.data 8446 -> ["read\00"]
.data 0 -> ["\08!\00\00"]
void .FUNC $34 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2	 = ($global$0 - [224])
	$3 = $2
	$global$0 = $2
	$4	 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]     # .data 0 -> ["\08!"]
	goto $label$1 
	
.LABEL $label$3
	$2	 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [80]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8446])     # .data 0 -> ["\08!"]     # .data 8446 -> ["read"]
	
.LABEL $label$5
	CALL memcpy(($3 + [80]), $2, [8])
	$5 = ($2 + [8])
	$6	 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [8446])     # .data 0 -> ["\08!"]     # .data 8446 -> ["read"]
	
.LABEL $label$6
	CALL memcpy(($3 + [72]), $5, [8])
	*($3 + [64]) = (int_64)0
	*($3 + [56]) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [8446])     # .data 0 -> ["\08!"]     # .data 8446 -> ["read"]
	
.LABEL $label$7
	$4 = ($2 + $4)
	CALL memcpy(($3 + [56]), $5, [8])
	*($3 + [128]) = (int_64)0
	$5 = ($2 + [24])
	if ( ((int_32)$6 != (int_32)[24]) ){ goto $label$8 }
	CALL eosio_assert([0], [8446])     # .data 0 -> ["\08!"]     # .data 8446 -> ["read"]
	
.LABEL $label$8
	CALL memcpy(($3 + [128]), $5, [8])
	*(($6 = (($3 + [56]) + [8]))) = *($3 + [128])
	*((($3 + [24]) + [24])) = $4
	*(($4 = (($3 + [8]) + [8]))) = *($6)
	*($3 + [40]) = $2
	*(($3 + [44])) = ($2 + [32])
	*($3 + [32]) = $1
	*($3 + [24]) = $0
	*($3 + [8]) = *($3 + [56])
	$0 = *($3 + [80])
	$1 = *($3 + [72])
	*(($2 = (($3 + [88]) + [8]))) = *($4)
	*($3 + [88]) = *($3 + [8])
	*((($3 + [192]) + [24])) = *($2)
	*($3 + [200]) = $1
	*($3 + [192]) = $0
	*($3 + [208]) = *($3 + [88])
	$7 = CALL current_time()
	*(($3 + [156])) = (int_64)0
	*(($3 + [172])) = (int_64)0
	*(($3 + [180])) = (int_64)0
	*($3 + [140]) = [0]     # .data 0 -> ["\08!"]
	*($3 + [144]) = [0]     # .data 0 -> ["\08!"]
	*($3 + [148 align=4]) = (int_64)0
	*($3 + [164 align=4]) = (int_64)0
	*($3 + [128]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	*($3 + [120]) = (int_64)3617214756542218240
	*($3 + [112]) = $0
	*($3 + [104]) = (int_64)-7954148590308294656
	CALL $32(($3 + [164]), ($3 + [112]), ($3 + [24]), ($3 + [104]), ($3 + [192]))
	*($3 + [120]) = (int_64)0
	*($3 + [112]) = $1
	CALL $28(($3 + [128]), ($3 + [112]), $0, [0])     # .data 0 -> ["\08!"]
	CALL prints([8434])     # .data 8434 -> ["\t[#] FUNC: "]
	CALL printui($1)
	CALL $31(($3 + [128]))
	$global$0 = ($3 + [224])
}

.data 8428 -> ["write\00"]
.data 0 -> ["\08!\00\00"]
int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2	 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3	 = (uint_64)$3 >> (uint_64)(int_64)7
	$7	 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }     # .data 0 -> ["\08!"]
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4	 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1	 = *(($1 + [4]))
	$7	 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4	 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8428])     # .data 0 -> ["\08!"]     # .data 8428 -> ["write"]
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4	 = (*($6) + [8])
	*($6) = $4
	$7	 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}