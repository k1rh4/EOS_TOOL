(data (i32.const 8192) "err\00")
(data (i32.const 8196) "a\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8284) "b\00")
(data (i32.const 8286) "c\00")
(data (i32.const 8288) "d\00")
(data (i32.const 8290) "A\00")
(data (i32.const 8292) "J\00")
(data (i32.const 8294) "Q\00")
(data (i32.const 8296) "K\00")
(data (i32.const 8298) "Invalid hex character\00%d\00")
(data (i32.const 8323) "invalid sha256\00")
(data (i32.const 8338) "0123456789abcdef\00")
(data (i32.const 8355) "waiting for block chain sync...\00")
(data (i32.const 8387) "Invalid token transfer...\00")
(data (i32.const 8413) "EOS\00%llu\00")
(data (i32.const 8422) "only EOS token is allowed\00")
(data (i32.const 8448) "must buy a positive amount\00")
(data (i32.const 8475) "waiting for block chain sync time\00")
(data (i32.const 8509) "waiting for block chain sync\00")
(data (i32.const 8538) "tc_bet\00")
(data (i32.const 8545) "tc_raise\00")
(data (i32.const 8554) "tc_open\00")
(data (i32.const 8562) "topdeaccount\00")
(data (i32.const 8575) "reward for recommend \00")
(data (i32.const 8597) "12345\00")
(data (i32.const 8603) "x Invalid token transfer...\00")
(data (i32.const 8631) "not right amount from:\00")
(data (i32.const 8654) " to:\00")
(data (i32.const 8659) "topdappadmin\00")
(data (i32.const 8672) "the key is already exist\00")
(data (i32.const 8697) "please refresh and try again\00")
(data (i32.const 8726) "you are alreay sit\00")
(data (i32.const 8745) "this game has ended\00")
(data (i32.const 8765) "room has alreay dissolved\00")
(data (i32.const 8791) "sit error, you are not in this game, maybe you pass the wrong key\00")
(data (i32.const 8857) "already bet, please wait\00")
(data (i32.const 8882) "raise error, this game has not started or already ended\00")
(data (i32.const 8938) "it\'s not your turn to raise\00")
(data (i32.const 8966) "time out cannot raise\00")
(data (i32.const 8988) "not enough raise amount\00")
(data (i32.const 9012) "open error, this game has not started or already ended\00")
(data (i32.const 9067) "it\'s not your turn to open\00")
(data (i32.const 9094) "time out cannot open\00")
(data (i32.const 9115) "must double to open\00")
(data (i32.const 9135) "you are alreay enter compete\00")
(data (i32.const 9164) "not find the key\00")
(data (i32.const 9181) "not time yet, please wait\00")
(data (i32.const 9207) "game has alreay started\00")
(data (i32.const 9231) "game has alreay ended\00")
(data (i32.const 9253) "you are not in this game, maybe you pass the wrong key\00")
(data (i32.const 9308) "your rival has already sit\00")
(data (i32.const 9335) "return back cause rival leave\00")
(data (i32.const 9365) "timeout error, this game has not started or already ended\00")
(data (i32.const 9423) "timeout error, you maybe pass the wrong key\00")
(data (i32.const 9467) "not timeout yet, please wait and try again\00")
(data (i32.const 9510) "timeout\00")
(data (i32.const 9518) "giveup error, this game has not started or already ended\00")
(data (i32.const 9575) "it\'s not your turn to giveup\00")
(data (i32.const 9604) "giveup\00")
(data (i32.const 9611) "wrong status to see card\00")
(data (i32.const 9636) "it\'s not your turn to see card\00")
(data (i32.const 9667) "your card is already bright\00")
(data (i32.const 9695) "topopenadmin\00")
(data (i32.const 9708) "wrong status to open\00")
(data (i32.const 9729) " win\00")
(data (i32.const 9734) "; \00")
(data (i32.const 9737) " : \00")
(data (i32.const 9741) ",\00")
(data (i32.const 9743) "reward from top eos. \00")
(data (i32.const 9765) "20% in 1.4% to team\00")
(data (i32.const 9785) "80% in 1.4% to pool\00")
(data (i32.const 9805) "20% in 1.9% to team\00")
(data (i32.const 9825) "80% in 1.9% to pool\00")
(data (i32.const 9845) "topadmin1111\00")
(data (i32.const 9858) "topdivacc111\00")
(data (i32.const 9871) "can not open card\00")
(data (i32.const 9889) "reward from top eos: timeout win\00")
(data (i32.const 9922) "Player1 timeout\00")
(data (i32.const 9938) "Player2 timeout\00")
(data (i32.const 9954) "reward from top eos: giveup win\00")
(data (i32.const 9986) "Player1 giveup\00")
(data (i32.const 10001) "Player2 giveup\00")
(data (i32.const 10016) "eosio.token\00")
(data (i32.const 10028) "transfer\00")
(data (i32.const 10037) "topdapptoken\00")
(data (i32.const 10050) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 10101) "error reading iterator\00")
(data (i32.const 10124) "read\00")
(data (i32.const 10129) "unable to find key\00")
(data (i32.const 10148) "string is too long to be a valid symbol_code\00")
(data (i32.const 10193) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 10246) "no action\00")
(data (i32.const 10256) "no referrer\00")
(data (i32.const 10268) "null\00")
(data (i32.const 10273) "no seed hash\00")
(data (i32.const 10286) "no seed 1\00")
(data (i32.const 10296) "no seed 2\00")
(data (i32.const 10306) "invalid first pos\00")
(data (i32.const 10324) "parse memo error\00")
(data (i32.const 10341) "string is too long to be a valid name\00")
(data (i32.const 10379) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 10446) "character is not in allowed character set for names\00")
(data (i32.const 10498) "TOP\00")
(data (i32.const 10502) "active\00")
(data (i32.const 10509) "issue\00")
(data (i32.const 10515) "suprise from topdapp\00")
(data (i32.const 10536) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 10585) "invalid symbol name\00")
(data (i32.const 10605) "write\00")
(data (i32.const 10611) "cannot pass end iterator to modify\00")
(data (i32.const 10646) "object passed to modify is not in multi_index\00")
(data (i32.const 10692) "cannot modify objects in table of another contract\00")
(data (i32.const 10743) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10802) "cannot create objects in table of another contract\00")
(data (i32.const 10856) "l*\00\00")
(data (i32.const 10860) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 10893) "invalid arena\00")
(data (i32.const 10907) "Invalid entrance fee\00")
(data (i32.const 10928) "raise amount out of range\00")
(data (i32.const 10954) "invalid seed_hash\00")
(data (i32.const 10972) "uWAGOqLPgm6UatVy\00")
(data (i32.const 10989) "get wrong arena when calc\00")
(data (i32.const 11015) "get\00")
(data (i32.const 11019) "cannot increment end iterator\00")
(data (i32.const 11049) "cannot pass end iterator to erase\00")
(data (i32.const 11083) "object passed to erase is not in multi_index\00")
(data (i32.const 11128) "cannot erase objects in table of another contract\00")
(data (i32.const 11178) "attempt to remove object that was not in multi_index\00")
(data (i32.const 11231) "topthreecard\00")
(data (i32.const 11248) "\d0\07\00\00\00\00\00\00 N\00\00\00\00\00\00\a0\86\01\00\00\00\00\00")
(data (i32.const 11280) "\10\'\00\00\00\00\00\00P\c3\00\00\00\00\00\00 \a1\07\00\00\00\00\00")
(data (i32.const 11312) "0u\00\00\00\00\00\00\808\01\00\00\00\00\00\80\84\1e\00\00\00\00\00")
(data (i32.const 19760) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "is_account" (func $fimport$5 (param i64) (result i32)))
(import "env" "send_inline" (func $fimport$6 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$7 (result i64)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "assert_sha256" (func $fimport$10 (param i32 i32 i32)))
(import "env" "memmove" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "eosio_exit" (func $fimport$12 (param i32)))
(import "env" "action_data_size" (func $fimport$13 (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$18 (param i32 i32 i32)))
(import "env" "abort" (func $fimport$19))
(import "env" "db_remove_i64" (func $fimport$20 (param i32)))
(import "env" "memset" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$22 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$29 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$30 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$33 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$34 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$37 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$39 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$40 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$41 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $62))
(export "_Znwj" (func $111))
(export "_ZdlPv" (func $113))
(export "_Znaj" (func $112))
(export "_ZdaPv" (func $114))
(export "_ZnwjSt11align_val_t" (func $115))
(export "_ZnajSt11align_val_t" (func $116))
(export "_ZdlPvSt11align_val_t" (func $117))
(export "_ZdaPvSt11align_val_t" (func $118))
(table $0 17 17 anyfunc)
(elem (i32.const 1) $46 $5 $32 $65 $67 $69 $37 $55 $72 $73 $52 $48 $75 $51 $143 $145)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19840))
(global $global$2 i32 (i32.const 19840))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	*(($5 = ($1 + [16]))) = *(($4 + [16]))
	*(($6 = ($1 + [8]))) = *(($4 + [8]))
	CALL eosio_assert([1], [10605])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [10605])
	CALL memcpy(($2 | [8]), $6, [8])
	CALL eosio_assert([1], [10605])
	CALL memcpy(($2 + [16]), $5, [4])
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)-6185353789344579584, *(*($0 + [8])), (int_64)-6185353789344579584, $2, [20])
	if ( ((uint_64)*($3 + [16]) > (uint_64)(int_64)-6185353789344579584) ){ goto $label$1 }
	*(($3 + [16])) = (int_64)-6185353789344579583
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10124])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10124])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10124])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10124])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10124])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10124])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10124])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10124])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10124])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [10124])
	CALL memcpy(($1 + [72]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [10124])
	CALL memcpy(($1 + [73]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [10124])
	CALL memcpy(($1 + [74]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [10124])
	CALL memcpy(($1 + [75]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [10124])
	CALL memcpy(($1 + [76]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [10124])
	CALL memcpy(($1 + [77]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [10124])
	CALL memcpy(($1 + [78]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [10124])
	CALL memcpy(($1 + [79]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [10124])
	CALL memcpy(($1 + [80]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10124])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10124])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10124])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10124])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [10124])
	CALL memcpy(($1 + [128]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [10124])
	CALL memcpy(($1 + [160]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [10124])
	CALL memcpy(($1 + [192]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [10124])
	CALL memcpy(($1 + [224]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$0 = CALL $82(CALL $82(CALL $82($0, ($1 + [256])), ($1 + [268])), ($1 + [280]))
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [10124])
	CALL memcpy(($1 + [292]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [10124])
	CALL memcpy(($1 + [293]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [10124])
	CALL memcpy(($1 + [294]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10605])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [10605])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10605])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10605])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10605])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10605])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10605])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10605])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10646])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10692])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [16]))) = *(($3 + [16]))
	*(($6 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [10743])
	CALL eosio_assert([1], [10605])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [10605])
	CALL memcpy(($4 | [8]), $6, [8])
	CALL eosio_assert([1], [10605])
	CALL memcpy(($4 + [16]), $5, [4])
	CALL db_update_i64(*($1 + [28]), $2, $4, [20])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-6185353789344579584) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-6185353789344579583
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$7()), [10802])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [24]) = $1
	CALL $98(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)-6185353789344579584
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)-6185353789344579584
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $85(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$7()), [10802])
	*(($5 = CALL _Znwj([72])) + [56]) = $1
	*($5 + [16]) = (int_64)0
	$3 = *($3)
	*($5) = *($3)
	*(($6 = ($5 + [8]))) = *(($3 + [8]))
	*($5 + [16]) = *(($3 + [16]))
	*(($7 = ($5 + [24]))) = *(($3 + [24]))
	*(($8 = ($5 + [32]))) = *(($3 + [32]))
	*(($9 = ($5 + [40]))) = *(($3 + [40]))
	*(($10 = ($5 + [48]))) = *(($3 + [48]))
	*($4 + [64]) = ($4 + [52])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	*($4 + [72]) = ($4 + [56])
	*($4 + [84]) = $6
	*($4 + [80]) = $5
	*($4 + [88]) = ($5 + [16])
	*($4 + [92]) = $7
	*($4 + [96]) = $8
	*($4 + [100]) = $9
	*($4 + [104]) = $10
	CALL $95(($4 + [80]), ($4 + [72]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235032801370701824, $2, (int_64)7235032801370701824, $4, [52])
	*($5 + [60]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235032801370701824) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235032801370701825
	
.LABEL $label$1
	*($4 + [80]) = $5
	*($4) = (int_64)7235032801370701824
	*($4 + [56]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235032801370701824
	*($3 + [16]) = $6
	*($4 + [80]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $92(($1 + [24]), ($4 + [80]), $4, ($4 + [56]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [112])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10124])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10124])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10124])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10124])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10124])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10124])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10124])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $139($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10605])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10605])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10605])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $138 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $126(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $146(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8417], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $126(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $126(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $123 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $151(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [11336])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $151(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $123($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $130 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $123($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $131 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $123($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $132 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $131($0, $1, $2, CALL $150($2))
}

int_32 .FUNC $133 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $134 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $148(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $136 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = CALL $150($1)
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, $1, $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$3 = ($2 + [1])
	$5 = (*($2) & [1])
	$2 = *($2 + [8])
	$6 = *($0)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$9 }
	$1 = [10]
	$3 = ( $2 ? $3 : $5 )
	$2 = uint_32($6 >> [1])
	if ( (([10] - $2) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$3 = ( $2 ? $3 : $5 )
	$2 = *(($0 + [4]))
	$1 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($1 - $2) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $123($0, $1, (($2 + $4) - $1), $2, $2, [0], $4, $3)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ( *(($0 + [8])) ? ($0 + [1]) : $7 )
	CALL memcpy(($5 + $2), $3, $4)
	$2 = ($2 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*(($5 + $2)) = [0]
	(unreachable)
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $126(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $146(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8320], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $126(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $126(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [10101])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $153($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [10124])
	CALL memcpy($4, $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [10124])
	CALL memcpy(($4 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)($5 & [-4]) != (int_32)[16]), [10124])
	CALL memcpy(($4 + [16]), ($2 + [16]), [4])
	*($4 + [28]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)-3886244000360824832
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-3886244000360824832
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $102(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $156($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $126 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $127($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $49 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	float_64 $9
	float_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$3 = ($global$0 - [192])
	$global$0 = $3
	$4 = ($0 + [32])
	$6 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($8 + [296])) == (int_32)$4), [10050])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)4490217900845563904, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $18($4, $7)
	CALL eosio_assert(((int_32)*($8 + [296]) == (int_32)$4), [10050])
	
.LABEL $label$1
	$9 = (CASTING float_64)(uint_64 ((int_64)*($8 + [32]) + (int_64)*($8 + [24])))
	$10 = ((float_64)$9 * (float_64)(float_64)0.0028)
	if ( (((float_64)$10 < (float_64)(float_64)18446744073709551615) & ((float_64)$10 >= (float_64)(float_64)0)) ){ goto $label$6 }
	$11 = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	$11 = (Rounds 0)($10)
	
.LABEL $label$5
	*($3 + [184]) = $11
	$10 = ((float_64)$9 * (float_64)(float_64)0.0112)
	if ( (((float_64)$10 < (float_64)(float_64)18446744073709551615) & ((float_64)$10 >= (float_64)(float_64)0)) ){ goto $label$8 }
	$12 = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	$12 = (Rounds 0)($10)
	
.LABEL $label$7
	*($3 + [176]) = $12
	$10 = ((float_64)$9 * (float_64)(float_64)0.985)
	if ( (((float_64)$10 < (float_64)(float_64)18446744073709551615) & ((float_64)$10 >= (float_64)(float_64)0)) ){ goto $label$10 }
	$13 = (int_64)0
	goto $label$9 
	
.LABEL $label$10
	$13 = (Rounds 0)($10)
	
.LABEL $label$9
	*($3 + [168]) = $13
	$7 = *($8 + [292])
	if ( ((int_32)$7 == (int_32)[2]) ){ goto $label$16 }
	if ( ((int_32)$7 != (int_32)[1]) ){ goto $label$15 }
	*($3 + [176]) = $12
	*($3 + [184]) = $11
	goto $label$12 
	
.LABEL $label$16
	$10 = ((float_64)$9 * (float_64)(float_64)0.0152)
	if ( (((float_64)$10 < (float_64)(float_64)18446744073709551615) & ((float_64)$10 >= (float_64)(float_64)0)) ){ goto $label$14 }
	$13 = (int_64)0
	goto $label$13 
	
.LABEL $label$15
	CALL eosio_assert([0], [10989])
	goto $label$11 
	
.LABEL $label$14
	$13 = (Rounds 0)($10)
	
.LABEL $label$13
	*($3 + [176]) = $13
	$10 = ((float_64)$9 * (float_64)(float_64)0.0038)
	if ( (((float_64)$10 < (float_64)(float_64)18446744073709551615) & ((float_64)$10 >= (float_64)(float_64)0)) ){ goto $label$18 }
	$13 = (int_64)0
	goto $label$17 
	
.LABEL $label$18
	$13 = (Rounds 0)($10)
	
.LABEL $label$17
	*($3 + [184]) = $13
	$9 = ((float_64)$9 * (float_64)(float_64)0.98)
	if ( (((float_64)$9 < (float_64)(float_64)18446744073709551615) & ((float_64)$9 >= (float_64)(float_64)0)) ){ goto $label$19 }
	$13 = (int_64)0
	goto $label$12 
	
.LABEL $label$19
	$13 = (Rounds 0)($9)
	
.LABEL $label$12
	*($3 + [168]) = $13
	
.LABEL $label$11
	$7 = ((int_64)*($8 + [104]) == (int_64)*($8 + [88]))
	$14 = ($8 + [88])
	$5 = ($8 + [96])
	$11 = *(( $5 ? $14 : $7 ))
	*($3 + [160]) = $11
	*($3 + [152]) = *(( $14 ? $5 : $7 ))
	*($3 + [148]) = ( [3] ? [1] : $7 )
	*($3 + [136]) = ( (int_64)0 ? $13 : $7 )
	*($3 + [128]) = ( $13 ? (int_64)0 : $7 )
	*($3 + [120]) = $11
	*($3 + [112]) = [0]
	*($3 + [104]) = (int_64)0
	*($3 + [96]) = [0]
	*($3 + [88]) = (int_64)0
	$6 = *($2)
	$15 = CALL $150([9510])
	if ( ((int_32)$15 != (int_32)( *($2 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$22 }
	if ( (CALL $135($2, [0], [-1], [9510], $15) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	$6 = *($2)
	$15 = CALL $150([9604])
	if ( ((int_32)$15 != (int_32)( *(($2 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$20 }
	if ( CALL $135($2, [0], [-1], [9604], $15) ){ goto $label$20 }
	CALL $125(($3 + [104]), [9954])
	CALL $125(($3 + [88]), ( [9986] ? [10001] : $7 ))
	goto $label$20 
	
.LABEL $label$21
	CALL $125(($3 + [104]), [9889])
	CALL $125(($3 + [88]), ( [9922] ? [9938] : $7 ))
	
.LABEL $label$20
	$13 = *($0)
	*($3 + [68]) = ($3 + [160])
	*($3 + [64]) = ($3 + [148])
	*($3 + [72]) = ($3 + [136])
	*($3 + [76]) = ($3 + [128])
	*($3 + [80]) = ($3 + [120])
	*($3 + [84]) = ($3 + [88])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [10611])
	CALL $50($4, $8, $13, ($3 + [64]))
	*(($3 + [72])) = [0]
	*($3 + [64]) = (int_64)0
	$7 = CALL $150([9765])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$32 }
	*($3 + [64]) = ($7 << [1])
	$6 = (($3 + [64]) | [1])
	if ( $7 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$2 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($2)
	*($3 + [64]) = ($2 | [1])
	*($3 + [72]) = $6
	*($3 + [68]) = $7
	
.LABEL $label$31
	CALL memcpy($6, [9765], $7)
	
.LABEL $label$30
	*(($6 + $7)) = [0]
	*(($3 + [56])) = [0]
	*($3 + [48]) = (int_64)0
	$7 = CALL $150([9785])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$28 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$35 }
	*($3 + [48]) = ($7 << [1])
	$6 = (($3 + [48]) | [1])
	if ( $7 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$2 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($2)
	*($3 + [48]) = ($2 | [1])
	*($3 + [56]) = $6
	*($3 + [52]) = $7
	
.LABEL $label$34
	CALL memcpy($6, [9785], $7)
	
.LABEL $label$33
	*(($6 + $7)) = [0]
	if ( ((int_32)*(($8 + [292])) != (int_32)[2]) ){ goto $label$36 }
	CALL $125(($3 + [64]), [9805])
	CALL $125(($3 + [48]), [9825])
	
.LABEL $label$36
	*($3 + [32]) = [9845]
	*($3 + [36]) = CALL $150([9845])
	*($3 + [16]) = *($3 + [32])
	CALL $14($0, CALL $12(($3 + [40]), ($3 + [16])), ($3 + [184]), ($3 + [64]))
	*($3 + [24]) = [9858]
	*($3 + [28]) = CALL $150([9858])
	*($3 + [8]) = *($3 + [24])
	CALL $14($0, CALL $12(($3 + [40]), ($3 + [8])), ($3 + [176]), ($3 + [48]))
	CALL $14($0, ($3 + [160]), ($3 + [168]), ($3 + [104]))
	$11 = *($3 + [168])
	if ( ((int_32)*($3 + [148]) != (int_32)[1]) ){ goto $label$41 }
	$13 = *(($8 + [32]))
	$9 = ((float_64)(CASTING float_64)(uint_64 $13) * (float_64)(float_64)2.5)
	if ( (((float_64)$9 < (float_64)(float_64)18446744073709551615) & ((float_64)$9 >= (float_64)(float_64)0)) ){ goto $label$40 }
	CALL $13($0, $5, $13, (int_64)0)
	goto $label$37 
	
.LABEL $label$41
	$13 = *(($8 + [24]))
	$9 = ((float_64)(CASTING float_64)(uint_64 $13) * (float_64)(float_64)2.5)
	if ( (((float_64)$9 < (float_64)(float_64)18446744073709551615) & ((float_64)$9 >= (float_64)(float_64)0)) ){ goto $label$39 }
	$12 = (int_64)0
	goto $label$38 
	
.LABEL $label$40
	CALL $13($0, $5, $13, (Rounds 0)($9))
	goto $label$37 
	
.LABEL $label$39
	$12 = (Rounds 0)($9)
	
.LABEL $label$38
	CALL $13($0, $14, $13, $12)
	
.LABEL $label$37
	CALL $45($0, ($3 + [160]), $11, ($3 + [152]), $13, $1)
	if ( (*($3 + [48]) & [1]) ){ goto $label$43 }
	if ( (*($3 + [64]) & [1]) ){ goto $label$42 }
	goto $label$27 
	
.LABEL $label$43
	CALL _ZdlPv(*($3 + [56]))
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$27 }
	
.LABEL $label$42
	CALL _ZdlPv(*($3 + [72]))
	$7 = [1]
	if ( ((*($3 + [88]) & [1]) == 0) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$29
	CALL $119(($3 + [64]))
	
.LABEL $label$28
	CALL $119(($3 + [48]))
	
.LABEL $label$27
	$7 = [1]
	if ( (*($3 + [88]) & [1]) ){ goto $label$25 }
	
.LABEL $label$26
	if ( (*($3 + [104]) & $7) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL _ZdlPv(*(($3 + [96])))
	if ( ((*($3 + [104]) & $7) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($3 + [112])))
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$23
	$global$0 = ($3 + [192])
	(unreachable)
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth(*($1))
	if ( ((int_64)*($1) == (int_64)*($0)) ){ goto $label$2 }
	$4 = ($0 + [32])
	$5 = *($2)
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$6:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$5 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(($9 + [296])) == (int_32)$4), [10050])
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$8 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)4490217900845563904, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $18($4, $8)
	CALL eosio_assert(((int_32)*($9 + [296]) == (int_32)$4), [10050])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8745])
	CALL eosio_assert(((int_32)*($9 + [79]) == (int_32)[2]), [9365])
	$8 = [1]
	$5 = *($1)
	if ( ((int_64)*($9 + [88]) == (int_64)$5) ){ goto $label$7 }
	$8 = ((int_64)*($9 + [96]) == (int_64)$5)
	
.LABEL $label$7
	CALL eosio_assert($8, [9423])
	CALL eosio_assert(((uint_64)(int_64))(CALL $fimport$4() - *($9 + [8])) > (uint_64)(int_64)120000000), [9467])
	$5 = *($2)
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$8 = CALL $150([9510])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$10 }
	*($3) = ($8 << [1])
	$7 = ($3 | [1])
	if ( $8 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$9 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($3) = ($9 | [1])
	*($3 + [8]) = $7
	*($3 + [4]) = $8
	
.LABEL $label$9
	CALL memcpy($7, [9510], $8)
	
.LABEL $label$8
	*(($7 + $8)) = [0]
	CALL $49($0, $5, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$2
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $119($3)
}

int_32 .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $150($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $123($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $123($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$7()), [10802])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [24]) = $1
	CALL $103(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)-3886244000360824832
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)-3886244000360824832
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $102(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10646])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10692])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [16]))) = *(($3 + [16]))
	*(($6 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [10743])
	CALL eosio_assert([1], [10605])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [10605])
	CALL memcpy(($4 | [8]), $6, [8])
	CALL eosio_assert([1], [10605])
	CALL memcpy(($4 + [16]), $5, [4])
	CALL db_update_i64(*($1 + [28]), $2, $4, [20])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-3886244000360824832) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-3886244000360824831
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $139($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $101(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	*($1 + [8]) = CALL current_time()
	*($1 + [16]) = CALL current_time()
	*($1 + [88]) = *(*($3 + [4]))
	*($1 + [79]) = [0]
	*($1 + [96]) = *(*($3 + [8]))
	$5 = *($3 + [12])
	*(($1 + [152])) = *(($5 + [24]))
	*(($1 + [144])) = *(($5 + [16]))
	*(($1 + [136])) = *(($5 + [8]))
	*($1 + [128]) = *($5)
	$5 = *($3 + [16])
	*($1 + [192]) = *($5)
	*(($1 + [208])) = *(($5 + [16]))
	*(($1 + [200])) = *(($5 + [8]))
	*(($1 + [216])) = *(($5 + [24]))
	CALL $122(($1 + [268]), *($3 + [20]))
	CALL $122(($1 + [280]), *($3 + [24]))
	*($1 + [292]) = *(*($3 + [28]))
	*(($3 = $2)) = [0]
	CALL $107($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$5 = CALL $153($6)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$1
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $6)
	CALL $108($3, $1)
	$7 = *($1)
	*($1 + [300]) = CALL db_store_i64(*($4 + [8]), (int_64)4490217900845563904, *(*($0 + [8])), $7, $5, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $156($5)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($1 + [296])) == (int_32)$0), [10646])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10692])
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [79]) = [20]
	$4 = *($1)
	CALL eosio_assert([1], [10743])
	*(($5 = $3)) = [0]
	CALL $107($5, $1)
	$6 = *($5)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$3 = CALL $153($6)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	CALL $108($5, $1)
	CALL db_update_i64(*(($1 + [300])), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$4 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $156($3)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($5 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	float_64 $11
	int_32 $12
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth(*($1))
	$4 = ($0 + [32])
	$5 = *($2)
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$2 = ($7 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$3 }
	$7 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($8 + [296])) == (int_32)$4), [10050])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$2 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)4490217900845563904, $5)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $18($4, $2)
	CALL eosio_assert(((int_32)*($8 + [296]) == (int_32)$4), [10050])
	
.LABEL $label$1
	$2 = [0]
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [9164])
	CALL eosio_assert(((uint_64)(int_64))(CALL $fimport$4() - *($8 + [8])) > (uint_64)(int_64)24999999), [9181])
	CALL eosio_assert(((int_32)*($8 + [79]) != (int_32)[2]), [9207])
	CALL eosio_assert(((int_32)*($8 + [79]) != (int_32)[3]), [9231])
	CALL eosio_assert(((int_32)*($8 + [79]) != (int_32)[20]), [8765])
	$10 = *($8 + [96])
	$9 = *($8 + [88])
	$5 = *($1)
	CALL eosio_assert((((int_64)$5 == (int_64)$9) | ((int_64)$5 == (int_64)$10)), [9253])
	if ( ((int_64)$5 != (int_64)$9) ){ goto $label$10 }
	if ( (int_64)(*($8 + [24]) == 0) ){ goto $label$9 }
	$2 = (int_64)(*($8 + [32]) == 0)
	goto $label$8 
	
.LABEL $label$10
	if ( ((int_64)$5 != (int_64)$10) ){ goto $label$11 }
	if ( (int_64)(*(($8 + [32])) == 0) ){ goto $label$11 }
	$2 = (int_64)(*($8 + [24]) == 0)
	
.LABEL $label$11
	CALL eosio_assert($2, [9308])
	$11 = ((float_64)(CASTING float_64)(uint_64 *(($8 + [32]))) * (float_64)(float_64)0.999)
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$13 }
	$5 = (int_64)0
	goto $label$12 
	
.LABEL $label$13
	$5 = (Rounds 0)($11)
	
.LABEL $label$12
	*($3 + [24]) = $5
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$2 = CALL $150([9335])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$6 }
	$1 = ($8 + [96])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$16 }
	*($3 + [8]) = ($2 << [1])
	$6 = (($3 + [8]) | [1])
	if ( $2 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$12 = (($2 + [16]) & [-16])
	$6 = CALL _Znwj($12)
	*($3 + [8]) = ($12 | [1])
	*($3 + [16]) = $6
	*($3 + [12]) = $2
	
.LABEL $label$15
	CALL memcpy($6, [9335], $2)
	
.LABEL $label$14
	*(($6 + $2)) = [0]
	CALL $14($0, $1, ($3 + [24]), ($3 + [8]))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($3 + [16]))
	goto $label$7 
	
.LABEL $label$9
	$2 = [0]
	
.LABEL $label$8
	CALL eosio_assert($2, [9308])
	$11 = ((float_64)(CASTING float_64)(uint_64 *(($8 + [24]))) * (float_64)(float_64)0.999)
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$18 }
	$5 = (int_64)0
	goto $label$17 
	
.LABEL $label$18
	$5 = (Rounds 0)($11)
	
.LABEL $label$17
	*($3 + [24]) = $5
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$2 = CALL $150([9335])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$5 }
	$1 = ($8 + [88])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$21 }
	*($3 + [8]) = ($2 << [1])
	$6 = (($3 + [8]) | [1])
	if ( $2 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$12 = (($2 + [16]) & [-16])
	$6 = CALL _Znwj($12)
	*($3 + [8]) = ($12 | [1])
	*($3 + [16]) = $6
	*($3 + [12]) = $2
	
.LABEL $label$20
	CALL memcpy($6, [9335], $2)
	
.LABEL $label$19
	*(($6 + $2)) = [0]
	CALL $14($0, $1, ($3 + [24]), ($3 + [8]))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($3 + [16]))
	
.LABEL $label$7
	$5 = *($0)
	CALL eosio_assert($7, [10611])
	CALL $47($4, $8, $5)
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$6
	CALL $119(($3 + [8]))
	
.LABEL $label$5
	CALL $119(($3 + [8]))
	(unreachable)
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$6 = ($global$0 - [80])
	$global$0 = $6
	$7 = CALL current_time()
	if ( ((int_64)$5 != (int_64)12345) ){ goto $label$1 }
	if ( (uint_64)($7 <= (int_64)1544443200000001) ){ goto $label$1 }
	$8 = ($0 + [72])
	$5 = *($1)
	$10 = *(($0 + [100]))
	$9 = *(($0 + [96]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$3 }
	
.LOOP $label$5:
	$1 = ($10 + [-24])
	$11 = *($1)
	if ( ((int_64)*($11) == (int_64)$5) ){ goto $label$4 }
	$10 = $1
	if ( ((int_32)$9 != (int_32)$1) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($11 + [64]) == (int_32)$8), [10050])
	goto $label$2 
	
.LABEL $label$3
	$11 = [0]
	$1 = CALL db_find_i64(*($8), *(($0 + [80])), (int_64)-3886244364896174080, $5)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$11 = CALL $34($8, $1)
	CALL eosio_assert(((int_32)*($11 + [64]) == (int_32)$8), [10050])
	
.LABEL $label$2
	$7 = *($0)
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [10611])
	CALL eosio_assert(((int_32)*($11 + [64]) == (int_32)$8), [10646])
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$7()), [10692])
	$5 = *($11)
	*($11 + [24]) = CALL current_time()
	*($11 + [48]) = ((int_64)*($11 + [48]) + (int_64)$2)
	*($11 + [16]) = ((int_64)*($11 + [16]) + (int_64)1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($11)), [10743])
	$12 = ($6 + [64])
	*($6 + [72]) = $12
	*($6 + [68]) = $6
	*($6 + [64]) = $6
	CALL $35(($6 + [64]), $11)
	CALL db_update_i64(*($11 + [68]), $7, $6, [64])
	$1 = ($0 + [88])
	if ( (uint_64)($5 <= *($1)) ){ goto $label$6 }
	*($1) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$5 = *($3)
	$10 = *(($0 + [100]))
	$9 = *(($0 + [96]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$8 }
	
.LOOP $label$10:
	$1 = ($10 + [-24])
	$11 = *($1)
	if ( ((int_64)*($11) == (int_64)$5) ){ goto $label$9 }
	$10 = $1
	if ( ((int_32)$9 != (int_32)$1) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($11 + [64]) == (int_32)$8), [10050])
	goto $label$7 
	
.LABEL $label$8
	$11 = [0]
	$1 = CALL db_find_i64(*(($0 + [72])), *(($0 + [80])), (int_64)-3886244364896174080, $5)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$7 }
	$11 = CALL $34($8, $1)
	CALL eosio_assert(((int_32)*($11 + [64]) == (int_32)$8), [10050])
	
.LABEL $label$7
	$7 = *($0)
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [10611])
	CALL eosio_assert(((int_32)*($11 + [64]) == (int_32)$8), [10646])
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$7()), [10692])
	$5 = *($11)
	*($11 + [24]) = CALL current_time()
	*($11 + [56]) = ((int_64)*($11 + [56]) + (int_64)$4)
	*($11 + [16]) = ((int_64)*($11 + [16]) + (int_64)1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($11)), [10743])
	*($6 + [72]) = $12
	*($6 + [68]) = $6
	*($6 + [64]) = $6
	CALL $35(($6 + [64]), $11)
	CALL db_update_i64(*($11 + [68]), $7, $6, [64])
	$1 = ($0 + [88])
	if ( (uint_64)($5 <= *($1)) ){ goto $label$1 }
	*($1) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($6 + [80])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [296])) == (int_32)$0), [10646])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10692])
	$5 = *($1)
	*($1 + [8]) = CALL current_time()
	*($1 + [24]) = *(*($3))
	*($1 + [32]) = *(*($3 + [4]))
	*($1 + [40]) = *(*($3 + [8]))
	*($1 + [79]) = [30]
	*($1 + [48]) = *(*($3 + [12]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10743])
	*(($3 = $4)) = [0]
	CALL $107($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $153($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $108($3, $1)
	CALL db_update_i64(*(($1 + [300])), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $156($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $150($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $123($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$7 = ($global$0 - [80])
	$global$0 = $7
	$8 = *($1)
	if ( ($8 & [1]) ){ goto $label$6 }
	$8 = uint_32($8 >> [1])
	$9 = ($1 + [1])
	$10 = ($9 + $8)
	if ( $8 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = *($1 + [4])
	$9 = *($1 + [8])
	$10 = ($9 + $8)
	if ( ($8 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$7:
	if ( CALL $140(*($9)) ){ goto $label$4 }
	$9 = ($9 + [1])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$7 }
	$9 = $10
	$10 = [1]
	$11 = *($1)
	if ( (($11 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$8 }
	$8 = ($9 + [1])
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( (CALL $140(*($8)) == 0) ){ goto $label$10 }
	$8 = ($8 + [1])
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($9) = *($8)
	$9 = ($9 + [1])
	$8 = ($8 + [1])
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	$10 = [1]
	$11 = *($1)
	if ( ($11 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($1 + $10)
	$10 = ($8 + uint_32($11 >> $10))
	goto $label$1 
	
.LABEL $label$2
	$8 = *($1 + [8])
	$10 = ($8 + *($1 + [4]))
	
.LABEL $label$1
	CALL $133($1, ($9 - $8), ($10 - $9))
	$8 = *($1)
	if ( ($8 & [1]) ){ goto $label$13 }
	$9 = ($1 + [1])
	$10 = uint_32($8 >> [1])
	if ( ($10 == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$9 = *($1 + [8])
	$10 = *($1 + [4])
	if ( $10 ){ goto $label$11 }
	
.LABEL $label$12
	$global$0 = ($7 + [80])
	return [0]
	
.LABEL $label$11
	$8 = [0]
	
.LOOP $label$14:
	$8 = ($8 + ((int_32)*($9) == (int_32)[124]))
	$9 = ($9 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$14 }
	$9 = [0]
	if ( ((int_32)$8 != (int_32)[4]) ){ goto $label$15 }
	*($7 + [64]) = (int_64)0
	*($7 + [72]) = [0]
	CALL eosio_assert([1], [10306])
	$9 = CALL $134($1, [124], [0])
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$19 }
	CALL $121(($7 + [16]), $1, [0], $9, $1)
	if ( (*($2) & [1]) ){ goto $label$18 }
	*($2) = [0]
	goto $label$17 
	
.LABEL $label$19
	CALL eosio_assert([0], [10324])
	goto $label$16 
	
.LABEL $label$18
	*(*($2 + [8])) = [0]
	*($2 + [4]) = [0]
	
.LABEL $label$17
	CALL $124($2, [0])
	*(($2 + [8])) = *((($7 + [16]) + [8]))
	*($2) = *($7 + [16])
	
.LABEL $label$16
	$8 = *($2)
	CALL eosio_assert(((int_32)( *($2 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) ) != (int_32)[0]), [10246])
	$9 = ($9 + [1])
	CALL eosio_assert(((int_32)$9 != (int_32)[-1]), [10306])
	$8 = CALL $134($1, [124], $9)
	if ( ((int_32)$8 == (int_32)[-1]) ){ goto $label$23 }
	CALL $121(($7 + [16]), $1, $9, ($8 - $9), $1)
	if ( (*($7 + [64]) & [1]) ){ goto $label$22 }
	*($7 + [64]) = [0]
	goto $label$21 
	
.LABEL $label$23
	CALL eosio_assert([0], [10324])
	goto $label$20 
	
.LABEL $label$22
	*(*(($7 + [72]))) = [0]
	*($7 + [68]) = [0]
	
.LABEL $label$21
	CALL $124(($7 + [64]), [0])
	*((($7 + [64]) + [8])) = *((($7 + [16]) + [8]))
	*($7 + [64]) = *($7 + [16])
	
.LABEL $label$20
	$9 = *($7 + [64])
	CALL eosio_assert(((int_32)( *($7 + [68]) ? uint_32($9 >> [1]) : ($9 & [1]) ) != (int_32)[0]), [10256])
	$9 = ($9 & [1])
	$9 = *($7 + [64])
	$2 = uint_32($9 >> [1])
	$10 = *($7 + [68])
	$11 = CALL $150([10268])
	if ( ((int_32)$11 != (int_32)( $10 ? $2 : $9 )) ){ goto $label$25 }
	if ( (CALL $135(($7 + [64]), [0], [-1], [10268], $11) == 0) ){ goto $label$24 }
	$9 = *($7 + [64])
	$2 = uint_32($9 >> [1])
	$9 = ($9 & [1])
	$10 = *($7 + [68])
	
.LABEL $label$25
	*($7 + [60]) = ( $10 ? $2 : $9 )
	*($7 + [56]) = ( *(($7 + [72])) ? (($7 + [64]) | [1]) : $9 )
	*($7 + [8]) = *($7 + [56])
	*($3) = *(CALL $12(($7 + [16]), ($7 + [8])))
	
.LABEL $label$24
	$9 = *($7 + [64])
	$10 = CALL $150([10268])
	if ( ((int_32)$10 != (int_32)( *($7 + [68]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$28 }
	if ( (CALL $135(($7 + [64]), [0], [-1], [10268], $10) == 0) ){ goto $label$27 }
	
.LABEL $label$28
	if ( CALL is_account(*($3)) ){ goto $label$26 }
	
.LABEL $label$27
	*($7 + [48]) = [8562]
	*($7 + [52]) = CALL $150([8562])
	*($7) = *($7 + [48])
	*($3) = *(CALL $12(($7 + [16]), $7))
	
.LABEL $label$26
	$9 = ($8 + [1])
	CALL eosio_assert(((int_32)$9 != (int_32)[-1]), [10306])
	$8 = CALL $134($1, [124], $9)
	if ( ((int_32)$8 == (int_32)[-1]) ){ goto $label$32 }
	CALL $121(($7 + [16]), $1, $9, ($8 - $9), $1)
	if ( (*($7 + [64]) & [1]) ){ goto $label$31 }
	*($7 + [64]) = [0]
	goto $label$30 
	
.LABEL $label$32
	CALL eosio_assert([0], [10324])
	goto $label$29 
	
.LABEL $label$31
	*(*(($7 + [72]))) = [0]
	*($7 + [68]) = [0]
	
.LABEL $label$30
	CALL $124(($7 + [64]), [0])
	*((($7 + [64]) + [8])) = *((($7 + [16]) + [8]))
	*($7 + [64]) = *($7 + [16])
	
.LABEL $label$29
	$9 = *($7 + [64])
	CALL eosio_assert(((int_32)( *($7 + [68]) ? uint_32($9 >> [1]) : ($9 & [1]) ) != (int_32)[0]), [10273])
	$9 = ($9 & [1])
	$9 = *($7 + [64])
	$10 = CALL $150([10268])
	if ( ((int_32)$10 != (int_32)( *($7 + [68]) ? uint_32($9 >> [1]) : $9 )) ){ goto $label$34 }
	if ( (CALL $135(($7 + [64]), [0], [-1], [10268], $10) == 0) ){ goto $label$33 }
	$9 = (*($7 + [64]) & [1])
	
.LABEL $label$34
	*($4) = (CASTING int_64)(int_32 CALL $147(( *(($7 + [72])) ? (($7 + [64]) | [1]) : $9 )))
	
.LABEL $label$33
	$9 = ($8 + [1])
	CALL eosio_assert(((int_32)$9 != (int_32)[-1]), [10306])
	$8 = CALL $134($1, [124], $9)
	if ( ((int_32)$8 == (int_32)[-1]) ){ goto $label$38 }
	CALL $121(($7 + [16]), $1, $9, ($8 - $9), $1)
	if ( (*($7 + [64]) & [1]) ){ goto $label$37 }
	*($7 + [64]) = [0]
	goto $label$36 
	
.LABEL $label$38
	CALL eosio_assert([0], [10324])
	goto $label$35 
	
.LABEL $label$37
	*(*(($7 + [72]))) = [0]
	*($7 + [68]) = [0]
	
.LABEL $label$36
	CALL $124(($7 + [64]), [0])
	*((($7 + [64]) + [8])) = *((($7 + [16]) + [8]))
	*($7 + [64]) = *($7 + [16])
	
.LABEL $label$35
	$9 = *($7 + [64])
	CALL eosio_assert(((int_32)( *($7 + [68]) ? uint_32($9 >> [1]) : ($9 & [1]) ) != (int_32)[0]), [10286])
	$2 = ($2 & [1])
	$2 = *($7 + [64])
	$10 = uint_32($2 >> [1])
	$9 = *($7 + [68])
	$3 = CALL $150([10268])
	if ( ((int_32)$3 != (int_32)( $9 ? $10 : $2 )) ){ goto $label$40 }
	if ( (CALL $135(($7 + [64]), [0], [-1], [10268], $3) == 0) ){ goto $label$39 }
	$9 = *($7 + [64])
	$10 = uint_32($9 >> [1])
	$2 = ($9 & [1])
	$9 = *($7 + [68])
	
.LABEL $label$40
	CALL eosio_assert(((int_32)( $9 ? $10 : $2 ) == (int_32)[64]), [8323])
	CALL $4(($7 + [64]), ($7 + [16]), [32])
	*(($5 + [24])) = *((($7 + [16]) + [24]))
	*(($5 + [16])) = *((($7 + [16]) + [16]))
	*(($5 + [8])) = *($7 + [24])
	*($5) = *($7 + [16])
	
.LABEL $label$39
	CALL $121(($7 + [16]), $1, ($8 + [1]), [-1], $1)
	if ( (*($7 + [64]) & [1]) ){ goto $label$42 }
	*($7 + [64]) = [0]
	goto $label$41 
	
.LABEL $label$42
	*(*(($7 + [72]))) = [0]
	*($7 + [68]) = [0]
	
.LABEL $label$41
	CALL $124(($7 + [64]), [0])
	*((($7 + [64]) + [8])) = *((($7 + [16]) + [8]))
	*($7 + [64]) = *($7 + [16])
	$9 = *($7 + [64])
	CALL eosio_assert(((int_32)( *($7 + [68]) ? uint_32($9 >> [1]) : ($9 & [1]) ) != (int_32)[0]), [10296])
	$10 = ($10 & [1])
	$10 = *($7 + [64])
	$8 = uint_32($10 >> [1])
	$9 = *($7 + [68])
	$1 = CALL $150([10268])
	if ( ((int_32)$1 != (int_32)( $9 ? $8 : $10 )) ){ goto $label$44 }
	if ( (CALL $135(($7 + [64]), [0], [-1], [10268], $1) == 0) ){ goto $label$43 }
	$9 = *($7 + [64])
	$8 = uint_32($9 >> [1])
	$10 = ($9 & [1])
	$9 = *($7 + [68])
	
.LABEL $label$44
	CALL eosio_assert(((int_32)( $9 ? $8 : $10 ) == (int_32)[64]), [8323])
	CALL $4(($7 + [64]), ($7 + [16]), [32])
	*(($6 + [24])) = *((($7 + [16]) + [24]))
	*(($6 + [16])) = *((($7 + [16]) + [16]))
	*(($6 + [8])) = *($7 + [24])
	*($6) = *($7 + [16])
	
.LABEL $label$43
	$9 = [1]
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($7 + [72])))
	
.LABEL $label$15
	$global$0 = ($7 + [80])
	return $9
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$6 = ($0 + [32])
	$7 = *($5)
	$9 = *(($0 + [60]))
	$8 = *(($0 + [56]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	
.LOOP $label$4:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( ((int_64)*($11) == (int_64)$7) ){ goto $label$3 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($11 + [296])) == (int_32)$6), [10050])
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	$10 = CALL db_find_i64(*($6), *(($0 + [40])), (int_64)4490217900845563904, $7)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $18($6, $10)
	CALL eosio_assert(((int_32)*($11 + [296]) == (int_32)$6), [10050])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [8745])
	CALL eosio_assert(((int_32)*($11 + [79]) == (int_32)[2]), [9012])
	CALL eosio_assert(((int_64)*($11 + [104]) == (int_64)*($1)), [9067])
	CALL eosio_assert((uint_64)((int_64))(CALL $fimport$4() - *($11 + [8])) <= (int_64)120000001), [9094])
	$12 = *($11 + [88])
	$7 = *($1)
	$13 = *(($11 + ( [48] ? [40] : ((int_64)$7 == (int_64)$12) )))
	$10 = *($11 + [293])
	if ( ((int_64)$7 != (int_64)$12) ){ goto $label$9 }
	$10 = ($10 & [255])
	if ( ((int_32)$10 != (int_32)[1]) ){ goto $label$8 }
	if ( *($11 + [294]) ){ goto $label$7 }
	CALL eosio_assert(((int_64)*($2) == (int_64)((int_64)$13 << (int_64)2)), [9115])
	CALL $21($0, *($5), $1, $2, $10, $10)
	return 
	
.LABEL $label$9
	$10 = ($10 & [255])
	if ( ((int_32)$10 != (int_32)[1]) ){ goto $label$6 }
	if ( *($11 + [294]) ){ goto $label$5 }
	CALL eosio_assert(((int_64)*($2) == (int_64)$13), [9115])
	CALL $21($0, *($5), $1, $2, $10, $10)
	return 
	
.LABEL $label$8
	if ( $10 ){ goto $label$7 }
	if ( ((int_32)*($11 + [294]) != (int_32)[1]) ){ goto $label$7 }
	CALL eosio_assert(((int_64)*($2) == (int_64)$13), [9115])
	CALL $21($0, *($5), $1, $2, $10, $10)
	return 
	
.LABEL $label$7
	CALL eosio_assert(((uint_64)*($2) >= (uint_64)((int_64)$13 << (int_64)1)), [9115])
	CALL $21($0, *($5), $1, $2, $10, $10)
	return 
	
.LABEL $label$6
	if ( $10 ){ goto $label$5 }
	if ( ((int_32)*($11 + [294]) != (int_32)[1]) ){ goto $label$5 }
	CALL eosio_assert(((int_64)*($2) == (int_64)((int_64)$13 << (int_64)2)), [9115])
	CALL $21($0, *($5), $1, $2, $10, $10)
	return 
	
.LABEL $label$5
	CALL eosio_assert(((uint_64)*($2) >= (uint_64)((int_64)$13 << (int_64)1)), [9115])
	CALL $21($0, *($5), $1, $2, $10, $10)
}

int_32 .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$1 = ($global$0 - [64])
	$global$0 = $1
	*(($1 + [40])) = (int_64)0
	*(($1 + [32])) = (int_64)0
	*($1 + [24]) = (int_64)0
	$2 = ($0 + [152])
	$3 = *(($0 + [180]))
	if ( ((int_32)$3 == (int_32)*(($0 + [176]))) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$2), [10050])
	if ( $3 ){ goto $label$1 }
	$3 = ($1 + [24])
	goto $label$1 
	
.LABEL $label$2
	$3 = CALL db_find_i64(*($2), *(($0 + [160])), (int_64)-6185353789344579584, (int_64)-6185353789344579584)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $16($2, $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$2), [10050])
	goto $label$1 
	
.LABEL $label$3
	$3 = ($1 + [24])
	
.LABEL $label$1
	$4 = *($3 + [8])
	*($1 + [8]) = [10016]
	*($1 + [12]) = CALL $150([10016])
	*($1) = *($1 + [8])
	$2 = CALL $12(($1 + [16]), $1)
	$5 = *($0)
	$0 = CALL $150([8413])
	if ( ($0 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [10148])
	goto $label$6 
	
.LABEL $label$7
	if ( ($0 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = (int_64)0
	
.LOOP $label$8:
	$3 = *(($0 + [8412]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$9 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$9
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$8 }
	goto $label$4 
	
.LABEL $label$5
	$6 = (int_64)0
	
.LABEL $label$4
	$7 = *($2)
	*(($1 + [56])) = [0]
	*($1 + [32]) = $5
	*($1 + [24]) = $7
	*($1 + [40]) = (int_64)-1
	*($1 + [48]) = (int_64)0
	$6 = *(CALL $17(($1 + [24]), $6, [10129]))
	$2 = *($1 + [48])
	if ( ($2 == 0) ){ goto $label$10 }
	$8 = ($1 + [52])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$14 }
	CALL _ZdlPv($3)
	
.LABEL $label$14
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$13 }
	$0 = *(($1 + [48]))
	goto $label$11 
	
.LABEL $label$12
	$0 = $2
	
.LABEL $label$11
	*($8) = $2
	CALL _ZdlPv($0)
	
.LABEL $label$10
	$global$0 = ($1 + [64])
	return ((uint_64)$6 > (uint_64)( (int_64)200000 ? $4 : (int_64)($4 == 0) ))
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10101])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $153($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [40]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	CALL $104(($3 + [40]), ($3 + [32]))
	*($5 + [52]) = $1
	*($3 + [32]) = $5
	*($3 + [40]) = (int_64)3904809877311766528
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)3904809877311766528
	*($7 + [16]) = $1
	*($3 + [32]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $105(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $156($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $4 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = $1
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = $1
	$4 = ($4 & [1])
	$4 = *($0)
	if ( (( *($0 + [4]) ? uint_32($4 >> [1]) : $4 ) == 0) ){ goto $label$1 }
	$6 = ($0 + [1])
	$5 = ($0 + [8])
	$4 = ( *($5) ? $6 : $4 )
	$7 = ($2 + [-1])
	$3 = $1
	
.LOOP $label$2:
	$8 = *($4)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$3 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$4 }
	$2 = ($8 + [-87])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$2 = ($8 + [-55])
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	CALL eosio_assert([0], [8298])
	
.LABEL $label$3
	$9 = ($2 << [4])
	*($3) = $9
	$11 = uint_32($11 >> [1])
	$12 = ($0 + [4])
	$13 = *($12)
	$11 = *($0)
	$2 = ($11 & [1])
	$8 = *($5)
	$10 = ($4 + [1])
	if ( ((int_32)$10 == (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$9 }
	$8 = *($10)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$7 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$8 }
	$2 = ($8 + [-87])
	goto $label$7 
	
.LABEL $label$9
	$4 = $10
	$3 = ($3 + [1])
	if ( $7 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$8
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$10 }
	$2 = ($8 + [-55])
	goto $label$7 
	
.LABEL $label$10
	$2 = [0]
	CALL eosio_assert([0], [8298])
	$9 = *($3)
	
.LABEL $label$7
	*($3) = ($9 | $2)
	$4 = ($4 + [2])
	$2 = *($0)
	$11 = uint_32($2 >> [1])
	$2 = ($2 & [1])
	$13 = *($12)
	$8 = *($5)
	$3 = ($3 + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	$7 = ($7 + [-1])
	if ( ((int_32)$4 != (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$2 }
	
.LABEL $label$1
	return ($3 - $1)
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	float_64 $11
	$5 = ($global$0 - [240])
	$global$0 = $5
	CALL require_auth(*($1))
	$6 = *($0)
	if ( ((int_64)*($1) == (int_64)$6) ){ goto $label$4 }
	if ( ((int_64)*($2) != (int_64)$6) ){ goto $label$4 }
	$7 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$6 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$6 = $8
	$7 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$6
	$6 = $8
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $7 ){ goto $label$7 }
	$7 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert(CALL $6($0), [8355])
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	CALL eosio_assert($7, [8387])
	$2 = CALL $150([8413])
	if ( ($2 <= [8]) ){ goto $label$11 }
	CALL eosio_assert([0], [10148])
	goto $label$10 
	
.LABEL $label$11
	if ( ($2 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$6 = (int_64)0
	
.LOOP $label$12:
	$7 = *(($2 + [8412]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$13 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$13
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$12 }
	goto $label$8 
	
.LABEL $label$9
	$6 = (int_64)0
	
.LABEL $label$8
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)((int_64)((int_64)$6 << (int_64)8) | (int_64)4)), [8422])
	$6 = (int_64)0
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [8448])
	*(($5 + [216])) = (int_64)0
	*(($5 + [208])) = (int_64)0
	*(($5 + [200])) = (int_64)0
	*($5 + [192]) = (int_64)0
	*($5 + [224]) = (int_64)0
	*($5 + [232]) = (int_64)0
	$10 = ($0 + [232])
	$2 = *(($0 + [260]))
	if ( ((int_32)$2 == (int_32)*(($0 + [256]))) ){ goto $label$17 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$10), [10050])
	if ( $2 ){ goto $label$16 }
	$2 = ($5 + [192])
	goto $label$14 
	
.LABEL $label$17
	$2 = CALL db_find_i64(*($10), *(($0 + [240])), (int_64)3904809877311766528, (int_64)3904809877311766528)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$15 }
	$2 = CALL $7($10, $2)
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$10), [10050])
	
.LABEL $label$16
	$6 = *($2 + [32])
	goto $label$14 
	
.LABEL $label$15
	$2 = ($5 + [192])
	
.LABEL $label$14
	$7 = [1]
	if ( ((int_64)$6 != (int_64)*($1)) ){ goto $label$18 }
	$6 = *($2 + [8])
	$7 = ((uint_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) > (uint_64)((uint_64)$6 / (uint_64)(int_64)1000000))
	
.LABEL $label$18
	CALL eosio_assert($7, [8475])
	CALL eosio_assert(CALL $6($0), [8509])
	*($5 + [184]) = [0]
	*($5 + [176]) = (int_64)0
	*($5 + [168]) = (int_64)0
	$2 = CALL $120(($5 + [80]), $4)
	$7 = CALL $8($0, $2, ($5 + [176]), ($5 + [168]), ($5 + [160]), ($5 + [128]), ($5 + [96]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$19
	if ( $7 ){ goto $label$20 }
	CALL $122(($5 + [176]), $4)
	
.LABEL $label$20
	$2 = *($5 + [176])
	$9 = CALL $150([8538])
	if ( ((int_32)$9 != (int_32)( *($5 + [180]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$27 }
	if ( (CALL $135(($5 + [176]), [0], [-1], [8538], $9) == 0) ){ goto $label$26 }
	
.LABEL $label$27
	$2 = *($5 + [176])
	$9 = CALL $150([8545])
	if ( ((int_32)$9 != (int_32)( *($5 + [180]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$28 }
	if ( (CALL $135(($5 + [176]), [0], [-1], [8545], $9) == 0) ){ goto $label$25 }
	
.LABEL $label$28
	$2 = *($5 + [176])
	$9 = CALL $150([8554])
	if ( ((int_32)$9 != (int_32)( *($5 + [180]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$21 }
	if ( CALL $135(($5 + [176]), [0], [-1], [8554], $9) ){ goto $label$21 }
	*($5 + [192]) = *($3)
	CALL $9($0, $1, ($5 + [192]), ($5 + [128]), ($5 + [96]), ($5 + [160]))
	if ( $7 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	*($5 + [192]) = *($3)
	CALL $10($0, $1, ($5 + [192]), ($5 + [160]))
	if ( $7 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	*($5 + [192]) = *($3)
	CALL $11($0, $1, ($5 + [192]), ($5 + [128]), ($5 + [96]), ($5 + [160]))
	if ( ($7 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$6 = *($5 + [168])
	if ( (int_64)($6 == 0) ){ goto $label$23 }
	if ( ((int_64)$6 != (int_64)*($1)) ){ goto $label$22 }
	
.LABEL $label$23
	*($5 + [72]) = [8562]
	*($5 + [76]) = CALL $150([8562])
	*($5 + [8]) = *($5 + [72])
	*($5 + [168]) = *(CALL $12(($5 + [192]), ($5 + [8])))
	
.LABEL $label$22
	$11 = ((float_64)(CASTING float_64)(int_64 *($3)) * (float_64)(float_64)0.25)
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$30 }
	$6 = (int_64)0
	goto $label$29 
	
.LABEL $label$30
	$6 = (Rounds 0)($11)
	
.LABEL $label$29
	CALL $13($0, ($5 + [168]), (int_64)0, $6)
	$11 = ((float_64)(CASTING float_64)(int_64 *($3)) * (float_64)(float_64)0.001)
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$34 }
	*($5 + [64]) = (int_64)0
	$6 = *($1)
	if ( ((int_64)$6 == (int_64)0) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	*($5 + [64]) = (Rounds 0)($11)
	$6 = *($1)
	if ( ((int_64)$6 != (int_64)0) ){ goto $label$32 }
	
.LABEL $label$33
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	*($5 + [16]) = [0]
	$2 = (($5 + [16]) | [1])
	goto $label$31 
	
.LABEL $label$32
	$7 = [0]
	$9 = *([0] + [10856])
	
.LOOP $label$36:
	*((($5 + [192]) + ($2 = $7))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$6 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$7 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$35 }
	$6 = ((int_64)$6 << (int_64)5)
	if ( ((int_64)$6 != (int_64)0) ){ goto $label$36 }
	
.LABEL $label$35
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$38 }
	*($5 + [16]) = ($7 << [1])
	$9 = (($5 + [16]) | [1])
	goto $label$37 
	
.LABEL $label$38
	$3 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($3)
	*($5 + [16]) = ($3 | [1])
	*($5 + [24]) = $9
	*($5 + [20]) = $7
	
.LABEL $label$37
	$3 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$39:
	*(($9 + $2)) = *((($5 + [192]) + $2))
	$2 = ($2 + [1])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$39 }
	$2 = ($9 + $7)
	
.LABEL $label$31
	*($2) = [0]
	$2 = CALL $132(($5 + [16]), [0], [8575])
	$7 = ($2 + [8])
	*((($5 + [192]) + [8])) = *($7)
	*($5 + [192]) = *($2)
	*($2) = (int_64)0
	*($7) = [0]
	CALL $14($0, ($5 + [168]), ($5 + [64]), ($5 + [192]))
	if ( ((*($5 + [192]) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*($5 + [200]))
	
.LABEL $label$40
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*($5 + [24]))
	
.LABEL $label$41
	*(($5 + [40])) = (int_64)0
	*(($5 + [32])) = (int_64)0
	*(($5 + [24])) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	$2 = *(($0 + [260]))
	if ( ((int_32)$2 == (int_32)*(($0 + [256]))) ){ goto $label$43 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$10), [10050])
	if ( $2 ){ goto $label$42 }
	$2 = ($5 + [16])
	goto $label$42 
	
.LABEL $label$43
	$2 = CALL db_find_i64(*(($0 + [232])), *(($0 + [240])), (int_64)3904809877311766528, (int_64)3904809877311766528)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$44 }
	$2 = CALL $7($10, $2)
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$10), [10050])
	goto $label$42 
	
.LABEL $label$44
	$2 = ($5 + [16])
	
.LABEL $label$42
	*((($5 + [192]) + [40])) = *(($2 + [40]))
	*(($7 = (($5 + [192]) + [32]))) = *(($2 + [32]))
	*((($5 + [192]) + [24])) = *(($2 + [24]))
	*((($5 + [192]) + [16])) = *(($2 + [16]))
	*(($9 = (($5 + [192]) + [8]))) = *(($2 + [8]))
	*($5 + [192]) = *($2)
	*($9) = CALL current_time()
	*($7) = *($1)
	CALL $15($10, ($5 + [192]), *($0))
	
.LABEL $label$21
	if ( ((*($5 + [176]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($5 + [184])))
	$global$0 = ($5 + [240])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [240])
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [48])
	$global$0 = $2
	$1 = ($1 + [-1])
	if ( ($1 <= [52]) ){ goto $label$11 }
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $150([8192])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$10 }
	*($0) = ($1 << [1])
	$3 = ($0 + [1])
	if ( $1 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	*($2 + [40]) = [0]
	*($2 + [32]) = (int_64)0
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$3 = ((uint_32)($1 & [255]) / (uint_32)[13])
	$1 = (($1 - ((int_32)$3 * (int_32)[13])) + [1])
	if ( ((uint_32)$3 > (uint_32)[3]) ){ goto $label$4 }
	goto $label$12 
	
.LABEL $label$12
	CALL $125(($2 + [32]), [8196])
	goto $label$3 
	
.LABEL $label$10
	$4 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $3
	*($0 + [4]) = $1
	
.LABEL $label$9
	CALL memcpy($3, [8192], $1)
	
.LABEL $label$8
	*(($3 + $1)) = [0]
	$global$0 = ($2 + [48])
	return $3
	
.LABEL $label$7
	CALL $125(($2 + [32]), [8286])
	goto $label$3 
	
.LABEL $label$6
	CALL $125(($2 + [32]), [8288])
	goto $label$3 
	
.LABEL $label$5
	CALL $125(($2 + [32]), [8284])
	goto $label$3 
	
.LABEL $label$4
	CALL $125(($2 + [32]), [8192])
	
.LABEL $label$3
	$3 = (($1 & [31]) + [-1])
	if ( ((uint_32)$3 > (uint_32)[12]) ){ goto $label$14 }
	goto $label$18 
	
.LABEL $label$18
	CALL $125(($2 + [16]), [8290])
	goto $label$13 
	
.LABEL $label$17
	CALL $125(($2 + [16]), [8294])
	goto $label$13 
	
.LABEL $label$16
	CALL $125(($2 + [16]), [8292])
	goto $label$13 
	
.LABEL $label$15
	CALL $125(($2 + [16]), [8296])
	goto $label$13 
	
.LABEL $label$14
	CALL $137($2, ($1 & [255]))
	if ( (*($2 + [16]) & [1]) ){ goto $label$20 }
	*($2 + [16]) = [0]
	goto $label$19 
	
.LABEL $label$20
	*(*(($2 + [24]))) = [0]
	*($2 + [20]) = [0]
	
.LABEL $label$19
	CALL $124(($2 + [16]), [0])
	*((($2 + [16]) + [8])) = *(($2 + [8]))
	*($2 + [16]) = *($2)
	
.LABEL $label$13
	CALL $3($0, ($2 + [16]), ($2 + [32]))
	if ( (*($2 + [16]) & [1]) ){ goto $label$22 }
	if ( (*($2 + [32]) & [1]) ){ goto $label$21 }
	goto $label$1 
	
.LABEL $label$22
	CALL _ZdlPv(*(($2 + [24])))
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$21
	CALL _ZdlPv(*(($2 + [40])))
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $119($0)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
	$3
}

void .FUNC $3 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($3 & [1])
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $5 )
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$6 = ($4 + $3)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$6 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$6 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($6 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $6
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($6, ( $7 ? ($1 + [1]) : $5 ), $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	CALL $130($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $119($0)
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = $global$0
	$3 = *($1 + [4])
	$4 = *($1)
	$5 = ((int_32)$1 / (int_32)[13])
	$1 = (*($1 + [8]) + [-1])
	$6 = (($1 - ((int_32)$5 * (int_32)[13])) + [1])
	*((($2 = ($2 - [32])) + [20])) = $6
	$1 = ($4 + [-1])
	$4 = ((int_32)$1 / (int_32)[13])
	*($2) = $4
	$7 = ($3 + [-1])
	$8 = ((int_32)$7 / (int_32)[13])
	*($2 + [8]) = $8
	*($2 + [16]) = $5
	$9 = ($1 - ((int_32)$4 * (int_32)[13]))
	$3 = ($9 + [1])
	*($2 + [4]) = $3
	$7 = ($7 - ((int_32)$8 * (int_32)[13]))
	$1 = ($7 + [1])
	*($2 + [12]) = $1
	if ( ((int_32)$9 > (int_32)$7) ){ goto $label$5 }
	if ( ((int_32)$1 > (int_32)$6) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$10 = *($2)
	$11 = *($2 + [8])
	*($2) = $11
	*($2 + [8]) = $10
	$3 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$8 = (CASTING uint_32)(uint_64 $10)
	$4 = (CASTING uint_32)(uint_64 $11)
	$1 = (CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)32)
	if ( ((int_32)$1) <= (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$4
	$10 = *($2 + [8])
	$11 = *($2 + [16])
	*($2 + [8]) = $11
	*($2 + [16]) = $10
	$6 = (CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)32))
	$5 = (CASTING uint_32)(uint_64 $10)
	$8 = (CASTING uint_32)(uint_64 $11)
	$1 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32)
	if ( ((int_32)$3 > (int_32)$1)) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)$3 <= (int_32)$1) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = *($2)
	$11 = *($2 + [8])
	*($2) = $11
	*($2 + [8]) = $10
	$1 = (CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$8 = (CASTING uint_32)(uint_64 $10)
	$4 = (CASTING uint_32)(uint_64 $11)
	
.LABEL $label$1
	*($0) = (int_64)0
	*($0 + [8 align=4]) = (int_64)0
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$6 }
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$6 }
	*($0) = [5]
	*(($0 + [4])) = $6
	return 
	
.LABEL $label$6
	$2 = (((int_32)$3 == (int_32)($1 + [-1])) & ((int_32)$1 == (int_32)($6 + [-1])))
	if ( $2 ){ goto $label$8 }
	if ( ((int_32)$3 != (int_32)[1]) ){ goto $label$7 }
	if ( ((int_32)$1 != (int_32)[12]) ){ goto $label$7 }
	if ( ((int_32)$6 != (int_32)[13]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$7 }
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$7 }
	*($0) = [4]
	$2 = ((int_32)$3 == (int_32)[1])
	*(($0 + [4])) = ( [1] ? $6 : $2 )
	*(($0 + [8])) = ( $6 ? $1 : $2 )
	return 
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$9 }
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$9 }
	*($0) = [3]
	$2 = ((int_32)$3 == (int_32)[1])
	*(($0 + [4])) = ( [1] ? $6 : $2 )
	*(($0 + [8])) = ( $6 ? $1 : $2 )
	*(($0 + [12])) = ( $1 ? $3 : $2 )
	return 
	
.LABEL $label$9
	if ( $2 ){ goto $label$11 }
	if ( ((int_32)$3 != (int_32)[1]) ){ goto $label$10 }
	if ( ((int_32)$1 != (int_32)[12]) ){ goto $label$10 }
	if ( ((int_32)$6 != (int_32)[13]) ){ goto $label$10 }
	
.LABEL $label$11
	*($0) = [2]
	$2 = ((int_32)$3 == (int_32)[1])
	*(($0 + [4])) = ( [1] ? $6 : $2 )
	*(($0 + [8])) = ( $6 ? $1 : $2 )
	return 
	
.LABEL $label$10
	$2 = ((int_32)$3 == (int_32)$1)
	if ( $2 ){ goto $label$13 }
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$13 }
	*($0) = [0]
	if ( ((int_32)$3 != (int_32)[1]) ){ goto $label$12 }
	*(($0 + [8])) = $6
	*(($0 + [4])) = [1]
	*(($0 + [12])) = $1
	return 
	
.LABEL $label$13
	*($0) = [1]
	*(($0 + [4])) = ( $1 ? $6 : $2 )
	$2 = ( $6 ? $3 : $2 )
	*(($0 + [8])) = ( [14] ? $2 : ((int_32)$2 == (int_32)[1]) )
	return 
	
.LABEL $label$12
	*(($0 + [8])) = $1
	*(($0 + [4])) = $6
	*(($0 + [12])) = $3
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [160])
	$global$0 = $4
	$5 = *($2)
	$2 = CALL $150([8413])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [10148])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($2 + [8412]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10536])
	$8 = ((int_64)$6 & (int_64)72057594037927935)
	$9 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $6
	$7 = [1]
	$10 = $2
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$8 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$10 = ($2 + [1])
	$2 = $10
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [10585])
	$8 = *($0)
	*($4 + [88]) = [10502]
	*($4 + [92]) = CALL $150([10502])
	*($4 + [16]) = *($4 + [88])
	$6 = *(CALL $12(($4 + [24]), ($4 + [16])))
	*($4 + [72]) = [10016]
	*($4 + [76]) = CALL $150([10016])
	*($4 + [8]) = *($4 + [72])
	$2 = CALL $12(($4 + [80]), ($4 + [8]))
	*($4 + [88]) = [10028]
	*($4 + [92]) = CALL $150([10028])
	*($4) = *($4 + [88])
	$11 = *(CALL $12(($4 + [24]), $4))
	*((($4 + [24]) + [24])) = $9
	*($4 + [40]) = $5
	*($4 + [24]) = *($0)
	*($4 + [32]) = *($1)
	$7 = CALL $120((($4 + [24]) + [32]), $3)
	*($4 + [96]) = $11
	*($4 + [88]) = *($2)
	*(($2 = CALL _Znwj([16]))) = $8
	*($2 + [8]) = $6
	*((($4 + [88]) + [36])) = [0]
	$10 = ($2 + [16])
	*((($4 + [88]) + [24])) = $10
	*(($4 + [108])) = $10
	*($4 + [104]) = $2
	*($4 + [116 align=4]) = (int_64)0
	$2 = *($7)
	$7 = ( *((($4 + [24]) + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($7 + [32])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($4 + [116])
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ($2 == 0) ){ goto $label$14 }
	CALL $27($7, $2)
	$7 = *(($4 + [120]))
	$2 = *(($4 + [116]))
	goto $label$13 
	
.LABEL $label$14
	$7 = [0]
	$2 = [0]
	
.LABEL $label$13
	*($4 + [148]) = $2
	*($4 + [144]) = $2
	*($4 + [152]) = $7
	*($4 + [128]) = ($4 + [144])
	*($4 + [136]) = ($4 + [24])
	CALL $28(($4 + [136]), ($4 + [128]))
	CALL $29(($4 + [144]), ($4 + [88]))
	$2 = *($4 + [144])
	CALL send_inline($2, (*($4 + [148]) - $2))
	$2 = *($4 + [144])
	if ( ($2 == 0) ){ goto $label$15 }
	*($4 + [148]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$15
	$2 = *($4 + [116])
	if ( ($2 == 0) ){ goto $label$16 }
	*(($4 + [120])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$16
	$2 = *($4 + [104])
	if ( ($2 == 0) ){ goto $label$17 }
	*(($4 + [108])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$17
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$18
	$global$0 = ($4 + [160])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$0), [10050])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3904809877311766528, (int_64)3904809877311766528)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $7($0, $4)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$0), [10050])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [10611])
	CALL $30($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $31($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [10101])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $153($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [10124])
	CALL memcpy($4, $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [10124])
	CALL memcpy(($4 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)($5 & [-4]) != (int_32)[16]), [10124])
	CALL memcpy(($4 + [16]), ($2 + [16]), [4])
	*($4 + [28]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)-6185353789344579584
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-6185353789344579584
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $85(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $156($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

int_32 .FUNC $17 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [10050])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $86($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [10050])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = ($0 + [32])
	$6 = *($3)
	$8 = *(($0 + [60]))
	$7 = *(($0 + [56]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$4:
	$3 = ($8 + [-24])
	$9 = *($3)
	if ( ((int_64)*($9) == (int_64)$6) ){ goto $label$3 }
	$8 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($9 + [296])) == (int_32)$5), [10050])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$3 = CALL db_find_i64(*($5), *(($0 + [40])), (int_64)4490217900845563904, $6)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $18($5, $3)
	CALL eosio_assert(((int_32)*($9 + [296]) == (int_32)$5), [10050])
	
.LABEL $label$1
	$3 = [0]
	$8 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($8, [8697])
	$7 = (*($9 + [292]) + [-1])
	if ( ((uint_32)($7 & [255]) > (uint_32)[2]) ){ goto $label$5 }
	$6 = *(((int_32(($7 << [24]) >> [24]) << [3]) + [11248]))
	$3 = [1]
	
.LABEL $label$5
	CALL eosio_assert($3, [10893])
	CALL eosio_assert(((int_64)*($2) == (int_64)$6), [10907])
	CALL eosio_assert(((int_32)*($9 + [79]) != (int_32)[2]), [8726])
	CALL eosio_assert(((int_32)*($9 + [79]) != (int_32)[3]), [8745])
	CALL eosio_assert(((int_32)*($9 + [79]) != (int_32)[20]), [8765])
	$11 = *($9 + [96])
	$10 = *($9 + [88])
	$6 = *($1)
	CALL eosio_assert((((int_64)$6 == (int_64)$10) | ((int_64)$6 == (int_64)$11)), [8791])
	if ( ((int_64)$6 != (int_64)$10) ){ goto $label$6 }
	CALL eosio_assert((int_64)(*($9 + [24]) == 0), [8857])
	*($4 + [31]) = [1]
	*($4 + [16]) = (int_64)0
	if ( (int_64)(*($9 + [32]) == 0) ){ goto $label$7 }
	*($4 + [31]) = [2]
	*($4 + [16]) = *(($9 + [88]))
	
.LABEL $label$7
	$6 = *($0)
	*($4) = $2
	*($4 + [4]) = ($4 + [31])
	*($4 + [8]) = ($4 + [16])
	CALL eosio_assert($8, [10611])
	CALL $19($5, $9, $6, $4)
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$6
	if ( ((int_64)$6 != (int_64)$11) ){ goto $label$8 }
	CALL eosio_assert((int_64)(*($9 + [32]) == 0), [8857])
	*($4 + [31]) = [1]
	*($4 + [16]) = (int_64)0
	if ( (int_64)(*($9 + [24]) == 0) ){ goto $label$9 }
	*($4 + [31]) = [2]
	*($4 + [16]) = *(($9 + [88]))
	
.LABEL $label$9
	$6 = *($0)
	*($4) = $2
	*($4 + [4]) = ($4 + [31])
	*($4 + [8]) = ($4 + [16])
	CALL eosio_assert($8, [10611])
	CALL $20($5, $9, $6, $4)
	
.LABEL $label$8
	$global$0 = ($4 + [32])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$6 = ($global$0 - [16])
	$global$0 = $6
	$7 = ($0 + [32])
	$8 = *($5)
	$10 = *(($0 + [60]))
	$9 = *(($0 + [56]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	
.LOOP $label$4:
	$11 = ($10 + [-24])
	$12 = *($11)
	if ( ((int_64)*($12) == (int_64)$8) ){ goto $label$3 }
	$10 = $11
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($12 + [296])) == (int_32)$7), [10050])
	goto $label$1 
	
.LABEL $label$2
	$11 = CALL db_find_i64(*($7), *(($0 + [40])), (int_64)4490217900845563904, $8)
	if ( ((int_32)$11 <= (int_32)[-1]) ){ goto $label$5 }
	$12 = CALL $18($7, $11)
	CALL eosio_assert(((int_32)*($12 + [296]) == (int_32)$7), [10050])
	goto $label$1 
	
.LABEL $label$5
	$12 = [0]
	
.LABEL $label$1
	*($6 + [12]) = $12
	*($6 + [8]) = $7
	$11 = [0]
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [8745])
	CALL eosio_assert(((int_32)*($12 + [79]) == (int_32)[2]), [8882])
	CALL eosio_assert(((int_64)*($12 + [104]) == (int_64)*($1)), [8938])
	CALL eosio_assert((uint_64)((int_64))(CALL $fimport$4() - *($12 + [8])) <= (int_64)120000001), [8966])
	$10 = ((int_64)*($1) == (int_64)*($12 + [88]))
	$9 = *(($12 + ( [293] ? [294] : $10 )))
	$13 = (*($12 + [292]) + [-1])
	if ( ((uint_32)($13 & [255]) > (uint_32)[2]) ){ goto $label$6 }
	$11 = (int_32(($13 << [24]) >> [24]) << [3])
	$14 = *(($11 + [11312]))
	$15 = *(($11 + [11280]))
	$8 = *(($11 + [11248]))
	$11 = [1]
	
.LABEL $label$6
	CALL eosio_assert($11, [10893])
	if ( ((int_32)($9 & [255]) != (int_32)[1]) ){ goto $label$7 }
	$14 = ((int_64)$14 << (int_64)1)
	$15 = ((int_64)$15 << (int_64)1)
	$8 = ((int_64)$8 << (int_64)1)
	
.LABEL $label$7
	$16 = *($2)
	CALL eosio_assert((((int_64)$16 == (int_64)$14) | (((int_64)$16 == (int_64)$8) | ((int_64)$16 == (int_64)$15))), [10928])
	if ( ($10 == 0) ){ goto $label$14 }
	$11 = *($12 + [293])
	if ( ($11 == 0) ){ goto $label$13 }
	if ( ((int_32)$11 != (int_32)[1]) ){ goto $label$12 }
	if ( *($12 + [294]) ){ goto $label$12 }
	CALL eosio_assert(((uint_64)*($2) >= (uint_64)((int_64)*($12 + [48]) << (int_64)1)), [8988])
	goto $label$11 
	
.LABEL $label$14
	if ( (*($12 + [80]) <= [10]) ){ goto $label$15 }
	CALL $21($0, *($5), $1, $2, $11, $11)
	$global$0 = ($6 + [16])
	return 
	
.LABEL $label$15
	$11 = *($12 + [293])
	if ( ($11 == 0) ){ goto $label$10 }
	if ( ((int_32)$11 != (int_32)[1]) ){ goto $label$9 }
	if ( *($12 + [294]) ){ goto $label$9 }
	CALL eosio_assert(((uint_64)((int_64)*($2) << (int_64)1) >= (uint_64)*($12 + [40])), [8988])
	goto $label$8 
	
.LABEL $label$13
	if ( ((int_32)*($12 + [294]) != (int_32)[1]) ){ goto $label$12 }
	CALL eosio_assert(((uint_64)((int_64)*($2) << (int_64)1) >= (uint_64)*($12 + [48])), [8988])
	goto $label$11 
	
.LABEL $label$12
	CALL eosio_assert(((uint_64)*($2) >= (uint_64)*($12 + [48])), [8988])
	
.LABEL $label$11
	$8 = *($0)
	*($6 + [4]) = $2
	*($6) = ($6 + [8])
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [10611])
	CALL $22($7, $12, $8, $6)
	$global$0 = ($6 + [16])
	return 
	
.LABEL $label$10
	if ( ((int_32)*($12 + [294]) != (int_32)[1]) ){ goto $label$9 }
	CALL eosio_assert(((uint_64)*($2) >= (uint_64)((int_64)*($12 + [40]) << (int_64)1)), [8988])
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert(((uint_64)*($2) >= (uint_64)*($12 + [40])), [8988])
	
.LABEL $label$8
	$8 = *($0)
	*($6 + [4]) = $2
	*($6) = ($6 + [8])
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [10611])
	CALL $23($7, $12, $8, $6)
	$global$0 = ($6 + [16])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [10341])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [10446])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [10379])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [10446])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $13 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	float_64 $9
	$4 = ($global$0 - [160])
	$global$0 = $4
	*($4 + [152]) = $3
	*(($4 + [88])) = (int_64)0
	*(($4 + [80])) = (int_64)0
	*(($4 + [72])) = (int_64)0
	*(($4 + [64])) = (int_64)0
	*(($4 + [48])) = (int_64)0
	*(($4 + [56])) = (int_64)0
	*($4 + [40]) = (int_64)0
	$5 = ($0 + [112])
	$6 = *(($0 + [140]))
	if ( ((int_32)$6 == (int_32)*(($0 + [136]))) ){ goto $label$2 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$5), [10050])
	if ( $6 ){ goto $label$1 }
	$6 = ($4 + [40])
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL db_find_i64(*($5), *(($0 + [120])), (int_64)7235032801370701824, (int_64)7235032801370701824)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $24($5, $6)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$5), [10050])
	goto $label$1 
	
.LABEL $label$3
	$6 = ($4 + [40])
	
.LABEL $label$1
	*(($7 = (($4 + [96]) + [48]))) = *(($6 + [48]))
	*((($4 + [96]) + [40])) = *(($6 + [40]))
	*(($8 = (($4 + [96]) + [32]))) = *(($6 + [32]))
	*((($4 + [96]) + [24])) = *(($6 + [24]))
	*((($4 + [96]) + [16])) = *(($6 + [16]))
	*((($4 + [96]) + [8])) = *(($6 + [8]))
	*($4 + [96]) = *($6)
	CALL $25($0, $1, ($4 + [152]))
	*($7) = ((int_64)*($7) + (int_64)*($4 + [152]))
	*($8) = ((int_64)*($8) + (int_64)$2)
	CALL $26($5, ($4 + [96]), *($0))
	*($4 + [32]) = [9845]
	*($4 + [36]) = CALL $150([9845])
	*($4 + [16]) = *($4 + [32])
	$6 = CALL $12(($4 + [40]), ($4 + [16]))
	if ( ((int_64)*($1) == (int_64)*($6)) ){ goto $label$4 }
	*($4 + [24]) = [9845]
	*($4 + [28]) = CALL $150([9845])
	*($4 + [8]) = *($4 + [24])
	$6 = CALL $12(($4 + [40]), ($4 + [8]))
	$9 = ((float_64)(CASTING float_64)(uint_64 *($4 + [152])) * (float_64)(float_64)0.25)
	if ( (((float_64)$9 < (float_64)(float_64)18446744073709551615) & ((float_64)$9 >= (float_64)(float_64)0)) ){ goto $label$6 }
	$2 = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	$2 = (Rounds 0)($9)
	
.LABEL $label$5
	CALL $13($0, $6, (int_64)0, $2)
	
.LABEL $label$4
	$global$0 = ($4 + [160])
}

void .FUNC $75 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [16])) = (int_64)0
	*(($2 + [8])) = (int_64)0
	*($2) = (int_64)0
	$3 = ($0 + [152])
	$4 = *(($0 + [180]))
	if ( ((int_32)$4 == (int_32)*(($0 + [176]))) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$3), [10050])
	if ( $4 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($3), *(($0 + [160])), (int_64)-6185353789344579584, (int_64)-6185353789344579584)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $16($3, $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$3), [10050])
	goto $label$1 
	
.LABEL $label$2
	$4 = $2
	
.LABEL $label$1
	*((($2 + [24]) + [16])) = *(($4 + [16]))
	*(($5 = (($2 + [24]) + [8]))) = *(($4 + [8]))
	*($2 + [24]) = *($4)
	*($5) = $1
	CALL $77($3, ($2 + [24]), *($0))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10101])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $153($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([320])) + [96]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [104]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [256 align=4]) = (int_64)0
	*($5 + [264 align=4]) = (int_64)0
	*($5 + [272 align=4]) = (int_64)0
	*($5 + [280 align=4]) = (int_64)0
	*($5 + [288]) = [0]
	*($5 + [296]) = $0
	CALL $99(($3 + [32]), $5)
	*($5 + [300]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $41(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $156($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [280]) & [1]) ){ goto $label$14 }
	if ( (*($1 + [268]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [288])))
	if ( ((*($1 + [268]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($1 + [276])))
	if ( (*($1 + [256]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($1 + [256]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [264])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [296])) == (int_32)$0), [10646])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10692])
	$5 = *($1)
	*($1 + [8]) = CALL current_time()
	$6 = *($3)
	*($1 + [24]) = *($6)
	*($1 + [40]) = *($6)
	$6 = *(*($3 + [4]))
	*($1 + [104]) = *(*($3 + [8]))
	*($1 + [79]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10743])
	*(($3 = $4)) = [0]
	CALL $107($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $153($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $108($3, $1)
	CALL db_update_i64(*(($1 + [300])), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $156($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $150($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	CALL $130($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $119($0)
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [296])) == (int_32)$0), [10646])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10692])
	$5 = *($1)
	*($1 + [8]) = CALL current_time()
	*($1 + [112]) = *(*($3 + [4]))
	*($1 + [56]) = *(*($3 + [8]))
	*($1 + [64]) = *(*($3 + [12]))
	*($1 + [79]) = [3]
	*($1 + [78]) = *(*($3))
	*($1 + [104]) = *(*($3 + [16]))
	$6 = *($3 + [20])
	*($1 + [72]) = *($6)
	*($1 + [73]) = *($6 + [4])
	*($1 + [74]) = *($6 + [8])
	$6 = *($3 + [24])
	*($1 + [75]) = *($6)
	*($1 + [76]) = *($6 + [4])
	*($1 + [77]) = *($6 + [8])
	$6 = *($3 + [28])
	*($1 + [160]) = *($6)
	*(($1 + [184])) = *(($6 + [24]))
	*(($1 + [176])) = *(($6 + [16]))
	*(($1 + [168])) = *(($6 + [8]))
	$6 = *($3 + [32])
	*($1 + [224]) = *($6)
	*(($1 + [248])) = *(($6 + [24]))
	*(($1 + [240])) = *(($6 + [16]))
	*(($1 + [232])) = *(($6 + [8]))
	CALL $122(($1 + [256]), *($3 + [36]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10743])
	*(($3 = $4)) = [0]
	CALL $107($3, $1)
	$7 = *($3)
	if ( ($7 <= [513]) ){ goto $label$2 }
	$6 = CALL $153($7)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $7)
	CALL $108($3, $1)
	CALL db_update_i64(*(($1 + [300])), $2, $6, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $156($6)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [296])) == (int_32)$0), [10646])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10692])
	$5 = *($1)
	*($1 + [8]) = CALL current_time()
	*($1 + [112]) = *(*($3 + [4]))
	*($1 + [56]) = *(*($3 + [8]))
	*($1 + [64]) = *(*($3 + [12]))
	*($1 + [79]) = [3]
	*($1 + [78]) = *(*($3))
	*($1 + [104]) = *(*($3 + [16]))
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = (int_64)0
	CALL $122(($1 + [256]), *($3 + [20]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10743])
	*(($3 = $4)) = [0]
	CALL $107($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $153($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $108($3, $1)
	CALL db_update_i64(*(($1 + [300])), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $156($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth(*($1))
	if ( ((int_64)*($1) == (int_64)*($0)) ){ goto $label$2 }
	$4 = ($0 + [32])
	$5 = *($2)
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$6:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$5 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(($9 + [296])) == (int_32)$4), [10050])
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$8 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)4490217900845563904, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $18($4, $8)
	CALL eosio_assert(((int_32)*($9 + [296]) == (int_32)$4), [10050])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8745])
	CALL eosio_assert(((int_32)*($9 + [79]) == (int_32)[2]), [9518])
	CALL eosio_assert(((int_64)*($9 + [104]) == (int_64)*($1)), [9575])
	$5 = *($2)
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$8 = CALL $150([9604])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$9 }
	*($3) = ($8 << [1])
	$7 = ($3 | [1])
	if ( $8 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$9 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($3) = ($9 | [1])
	*($3 + [8]) = $7
	*($3 + [4]) = $8
	
.LABEL $label$8
	CALL memcpy($7, [9604], $8)
	
.LABEL $label$7
	*(($7 + $8)) = [0]
	CALL $49($0, $5, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$2
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $119($3)
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	CALL require_auth(*($1))
	$3 = ($0 + [32])
	$4 = *($2)
	$6 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$2 = ($6 + [-24])
	$7 = *($2)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$3 }
	$6 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($7 + [296])) == (int_32)$3), [10050])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$2 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)4490217900845563904, $4)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $18($3, $2)
	CALL eosio_assert(((int_32)*($7 + [296]) == (int_32)$3), [10050])
	
.LABEL $label$1
	$2 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($2, [8745])
	CALL eosio_assert(((int_32)*($7 + [79]) == (int_32)[2]), [9611])
	CALL eosio_assert(((int_64)*($7 + [104]) == (int_64)*($1)), [9636])
	if ( ((int_64)*($1) != (int_64)*($7 + [88])) ){ goto $label$5 }
	CALL eosio_assert((*($7 + [293]) == 0), [9667])
	$4 = *($0)
	CALL eosio_assert($2, [10611])
	CALL $53($3, $7, $4)
	return 
	
.LABEL $label$5
	CALL eosio_assert((*($7 + [294]) == 0), [9667])
	$4 = *($0)
	CALL eosio_assert($2, [10611])
	CALL $54($3, $7, $4)
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($1 + [296])) == (int_32)$0), [10646])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10692])
	*($1 + [293]) = [1]
	$4 = *($1)
	CALL eosio_assert([1], [10743])
	*(($5 = $3)) = [0]
	CALL $107($5, $1)
	$6 = *($5)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$3 = CALL $153($6)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	CALL $108($5, $1)
	CALL db_update_i64(*(($1 + [300])), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$4 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $156($3)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($5 + [16])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($1 + [296])) == (int_32)$0), [10646])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10692])
	*($1 + [294]) = [1]
	$4 = *($1)
	CALL eosio_assert([1], [10743])
	*(($5 = $3)) = [0]
	CALL $107($5, $1)
	$6 = *($5)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$3 = CALL $153($6)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	CALL $108($5, $1)
	CALL db_update_i64(*(($1 + [300])), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$4 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $156($3)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($5 + [16])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10101])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $153($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [64]) = $0
	*($5 + [8]) = (int_64)0
	CALL $109(($3 + [32]), $5)
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $36(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $156($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL eosio_assert(((int_64)*($1) != (int_64)0), [10954])
	CALL eosio_assert(((int_64)*($2) != (int_64)0), [10954])
	$4 = [0]
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	
.LOOP $label$1:
	$5 = *(($1 + $4))
	CALL $129($3, *((uint_32($5 >> [4]) + [8338])))
	CALL $129($3, *((($5 & [15]) + [8338])))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$1 }
	$5 = ($3 + [8])
	$4 = ( *($5) ? ($3 | [1]) : (*($3) & [1]) )
	CALL assert_sha256($4, CALL $150($4), $2)
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$2
	$global$0 = ($3 + [16])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$7 = ($global$0 - [32])
	$global$0 = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$8 = ($7 + [24])
	$9 = [1]
	$10 = [0]
	*($7 + [12]) = [1]
	if ( ((uint_32)[0] >= (uint_32)[0]) ){ goto $label$2 }
	$12 = [2]
	goto $label$1 
	
.LABEL $label$2
	$12 = [0]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$18 
	
.LABEL $label$20
	$11 = *($8)
	$10 = *($7 + [20])
	$9 = ($9 + [1])
	*($7 + [12]) = $9
	if ( ((uint_32)$10 >= (uint_32)$11) ){ goto $label$10 }
	$12 = [2]
	goto $label$3 
	
.LABEL $label$19
	*($10) = $9
	*($7 + [20]) = ($10 + [4])
	if ( ((int_32)$9 != (int_32)[52]) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$18
	CALL $60(($7 + [16]), ($7 + [12]))
	if ( ((int_32)$9 != (int_32)[52]) ){ goto $label$9 }
	$12 = [3]
	goto $label$3 
	
.LABEL $label$17
	*($7 + [12]) = [0]
	$10 = *($7 + [20])
	$12 = [4]
	goto $label$3 
	
.LABEL $label$16
	*($7 + [8]) = int_32(($10 - *($7 + [16])) >> [2])
	$10 = CALL $61($0, $2, $3, $4, $5, $6, ($7 + [8]), ($7 + [12]))
	$10 = (*($7 + [16]) + ($10 << [2]))
	*(($1 + (($9 = *($7 + [12])) << [2]))) = *($10)
	$13 = ($10 + [4])
	$11 = (*($7 + [20]) - $13)
	$8 = int_32($11 >> [2])
	if ( ($11 == 0) ){ goto $label$5 }
	$12 = [5]
	goto $label$3 
	
.LABEL $label$15
	CALL memmove($10, $13, $11)
	$9 = *($7 + [12])
	$12 = [6]
	goto $label$3 
	
.LABEL $label$14
	*($7 + [12]) = ($9 + [1])
	$10 = ($10 + ($8 << [2]))
	*($7 + [20]) = $10
	if ( ((int_32)$9 < (int_32)[5]) ){ goto $label$6 }
	$12 = [7]
	goto $label$3 
	
.LABEL $label$13
	$9 = *($7 + [16])
	if ( ($9 == 0) ){ goto $label$4 }
	$12 = [8]
	goto $label$3 
	
.LABEL $label$12
	*($7 + [20]) = $9
	CALL _ZdlPv($9)
	$12 = [9]
	goto $label$3 
	
.LABEL $label$11
	$global$0 = ($7 + [32])
	return 
	
.LABEL $label$10
	$12 = [0]
	goto $label$3 
	
.LABEL $label$9
	$12 = [1]
	goto $label$3 
	
.LABEL $label$8
	$12 = [3]
	goto $label$3 
	
.LABEL $label$7
	$12 = [1]
	goto $label$3 
	
.LABEL $label$6
	$12 = [4]
	goto $label$3 
	
.LABEL $label$5
	$12 = [6]
	goto $label$3 
	
.LABEL $label$4
	$12 = [9]
	goto $label$3 
	$12
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $156($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $156($0)
	
.LABEL $label$1
}

int_32 .FUNC $110 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [280]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [288])))
	if ( ((*($3 + [268]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [268]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [276])))
	if ( (*($3 + [256]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [256]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [264])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $153($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11336])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $153($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $139 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $119 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $153($1)
	
.LABEL $label$2
	*(CALL $141()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $153(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $156($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $153 (int_32 $0)
{
	return CALL $154([11356], $0)
}

int_32 .FUNC $150 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $151 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $141())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $152($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $156 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19740])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19548]
	$3 = (((int_32)$1 * (int_32)[12]) + [19548])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $155($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8198])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $155 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11348]) == 0) ){ goto $label$2 }
	$2 = *([0] + [11352])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [11348]) = [1]
	$2 = ($2 << [16])
	*([0] + [11352]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11352])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [11352]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [11348]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [11348]) = [1]
	$3 = ($3 << [16])
	*([0] + [11352]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11352])
	
.LABEL $label$10
	*([0] + [11352]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $27($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [10605])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [10605])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $94(CALL $93($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10605])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10605])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10605])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [10605])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $88(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	float_64 $13
	float_64 $14
	int_64 $15
	int_64 $16
	$4 = ($global$0 - [656])
	$global$0 = $4
	*($4 + [624]) = [9695]
	*($4 + [628]) = CALL $150([9695])
	*($4 + [24]) = *($4 + [624])
	CALL require_auth(*(CALL $12(($4 + [632]), ($4 + [24]))))
	$5 = ($0 + [32])
	$6 = *($1)
	$8 = *(($0 + [60]))
	$7 = *(($0 + [56]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$4:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$6) ){ goto $label$3 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($10 + [296])) == (int_32)$5), [10050])
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	$9 = CALL db_find_i64(*($5), *(($0 + [40])), (int_64)4490217900845563904, $6)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $18($5, $9)
	CALL eosio_assert(((int_32)*($10 + [296]) == (int_32)$5), [10050])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)*($10 + [79]) == (int_32)[30]), [9708])
	$6 = *($10 + [88])
	$11 = *($10 + [104])
	$9 = [1]
	$8 = *($2)
	CALL eosio_assert(((int_32)( *($2 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) ) == (int_32)[64]), [8323])
	CALL $4($2, ($4 + [592]), [32])
	$8 = *($3)
	CALL eosio_assert(((int_32)( *($3 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) ) == (int_32)[64]), [8323])
	CALL $4($3, ($4 + [560]), [32])
	CALL $56($0, ($4 + [592]), ($10 + [128]))
	CALL $56($0, ($4 + [560]), ($10 + [192]))
	*(($8 = (($4 + [528]) + [16]))) = (int_64)0
	*($4 + [536]) = (int_64)0
	*($4 + [528]) = (int_64)0
	$12 = ($10 + [96])
	$3 = ($10 + [88])
	CALL $57($0, ($4 + [528]), $3, $12, ($4 + [592]), ($4 + [560]), ($10 + [16]))
	*($4 + [516]) = *($4 + [528])
	*($4 + [520]) = *($4 + [536])
	*($4 + [524]) = *($8)
	*($4 + [504]) = *($4 + [532])
	*($4 + [508]) = *($4 + [540])
	*($4 + [512]) = *($4 + [548])
	CALL $1(($4 + [32]), ($4 + [516]))
	CALL $1(($4 + [640]), ($4 + [504]))
	$7 = *($4 + [640])
	$8 = *($4 + [32])
	if ( ((int_32)$8 > (int_32)$7) ){ goto $label$10 }
	$9 = [3]
	if ( ((int_32)$8 < (int_32)$7) ){ goto $label$10 }
	$9 = [1]
	$7 = *($4 + [644])
	$7 = ((((int_32)*($4 + [648]) * (int_32)[100]) + ( [140000] ? ((int_32)$7 * (int_32)[10000]) : ((int_32)$7 == (int_32)[1]) )) + *($4 + [652]))
	$8 = *($4 + [36])
	$8 = ((((int_32)*($4 + [40]) * (int_32)[100]) + ( [140000] ? ((int_32)$8 * (int_32)[10000]) : ((int_32)$8 == (int_32)[1]) )) + *($4 + [44]))
	if ( ((int_32)$8 <= (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$10
	*($4 + [500]) = $9
	goto $label$8 
	
.LABEL $label$9
	*($4 + [500]) = ( [2] ? [3] : ((int_32)$8 == (int_32)$7) )
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	if ( ((int_64)$11 != (int_64)$6) ){ goto $label$11 }
	*($4 + [500]) = [3]
	$11 = (int_64)0
	$6 = *($3)
	if ( ((int_64)$6 != (int_64)0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$11
	*($4 + [500]) = [1]
	$11 = (int_64)0
	$6 = *($3)
	if ( ((int_64)$6 != (int_64)0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$11 = (int_64)0
	$6 = *($3)
	if ( ((int_64)$6 == (int_64)0) ){ goto $label$6 }
	
.LABEL $label$7
	$8 = [0]
	$7 = *([0] + [10856])
	
.LOOP $label$13:
	*((($4 + [32]) + ($9 = $8))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$6 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$9 == (int_32)[12]) )))))
	$8 = ($9 + [1])
	if ( ((uint_32)$9 > (uint_32)[11]) ){ goto $label$12 }
	$6 = ((int_64)$6 << (int_64)5)
	if ( ((int_64)$6 != (int_64)$11) ){ goto $label$13 }
	
.LABEL $label$12
	*(($4 + [648])) = [0]
	*($4 + [640]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$15 }
	*($4 + [640]) = ($8 << [1])
	$7 = (($4 + [640]) | [1])
	goto $label$14 
	
.LABEL $label$15
	$2 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($2)
	*($4 + [640]) = ($2 | [1])
	*($4 + [648]) = $7
	*($4 + [644]) = $8
	
.LABEL $label$14
	$2 = ($9 + [1])
	$9 = [0]
	
.LOOP $label$16:
	*(($7 + $9)) = *((($4 + [32]) + $9))
	$9 = ($9 + [1])
	if ( ((int_32)$2 != (int_32)$9) ){ goto $label$16 }
	$9 = ($7 + $8)
	goto $label$5 
	
.LABEL $label$6
	*(($4 + [648])) = [0]
	*($4 + [640]) = $11
	*($4 + [640]) = [0]
	$9 = (($4 + [640]) | [1])
	
.LABEL $label$5
	$8 = [0]
	*($9) = [0]
	$6 = *($12)
	if ( ((int_64)$6 == (int_64)0) ){ goto $label$20 }
	$7 = *([0] + [10856])
	
.LOOP $label$22:
	*((($4 + [32]) + ($9 = $8))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$6 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$9 == (int_32)[12]) )))))
	$8 = ($9 + [1])
	if ( ((uint_32)$9 > (uint_32)[11]) ){ goto $label$21 }
	$6 = ((int_64)$6 << (int_64)5)
	if ( ((int_64)$6 != (int_64)0) ){ goto $label$22 }
	
.LABEL $label$21
	*(($4 + [496])) = [0]
	*($4 + [488]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$19 }
	*($4 + [488]) = ($8 << [1])
	$7 = (($4 + [488]) | [1])
	goto $label$18 
	
.LABEL $label$20
	*(($4 + [496])) = [0]
	*($4 + [488]) = (int_64)0
	*($4 + [488]) = [0]
	$9 = (($4 + [488]) | [1])
	goto $label$17 
	
.LABEL $label$19
	$2 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($2)
	*($4 + [488]) = ($2 | [1])
	*($4 + [496]) = $7
	*($4 + [492]) = $8
	
.LABEL $label$18
	$2 = ($9 + [1])
	$9 = [0]
	
.LOOP $label$23:
	*(($7 + $9)) = *((($4 + [32]) + $9))
	$9 = ($9 + [1])
	if ( ((int_32)$2 != (int_32)$9) ){ goto $label$23 }
	$9 = ($7 + $8)
	
.LABEL $label$17
	*($9) = [0]
	if ( ((int_32)*($4 + [500]) != (int_32)[1]) ){ goto $label$25 }
	CALL $58(($4 + [472]), ($4 + [640]), [9729])
	goto $label$24 
	
.LABEL $label$25
	CALL $58(($4 + [472]), ($4 + [488]), [9729])
	
.LABEL $label$24
	CALL $138(($4 + [184]), *($10))
	$9 = CALL $128(($4 + [184]), [9734])
	$8 = ($9 + [8])
	*((($4 + [200]) + [8])) = *($8)
	*($4 + [200]) = *($9)
	*($9) = (int_64)0
	*($8) = [0]
	$9 = *($4 + [640])
	$8 = ($9 & [1])
	$9 = CALL $130(($4 + [200]), ( *($4 + [648]) ? (($4 + [640]) | [1]) : $8 ), ( *($4 + [644]) ? uint_32($9 >> [1]) : $8 ))
	$8 = ($9 + [8])
	*((($4 + [216]) + [8])) = *($8)
	*($4 + [216]) = *($9)
	*($9) = (int_64)0
	*($8) = [0]
	$9 = CALL $128(($4 + [216]), [9737])
	$8 = ($9 + [8])
	*((($4 + [232]) + [8])) = *($8)
	*($4 + [232]) = *($9)
	*($9) = (int_64)0
	*($8) = [0]
	CALL $2(($4 + [168]), *($4 + [516]))
	$9 = *($4 + [168])
	$8 = ($9 & [1])
	$9 = CALL $130(($4 + [232]), ( *($4 + [176]) ? (($4 + [168]) | [1]) : $8 ), ( *($4 + [172]) ? uint_32($9 >> [1]) : $8 ))
	$8 = ($9 + [8])
	*((($4 + [248]) + [8])) = *($8)
	*($4 + [248]) = *($9)
	*($9) = (int_64)0
	*($8) = [0]
	$9 = CALL $128(($4 + [248]), [9741])
	$8 = ($9 + [8])
	*((($4 + [264]) + [8])) = *($8)
	*($4 + [264]) = *($9)
	*($9) = (int_64)0
	*($8) = [0]
	CALL $2(($4 + [152]), *((($4 + [516]) + [4])))
	$9 = *($4 + [152])
	$8 = ($9 & [1])
	$9 = CALL $130(($4 + [264]), ( *($4 + [160]) ? (($4 + [152]) | [1]) : $8 ), ( *($4 + [156]) ? uint_32($9 >> [1]) : $8 ))
	$8 = ($9 + [8])
	*((($4 + [280]) + [8])) = *($8)
	*($4 + [280]) = *($9)
	*($9) = (int_64)0
	*($8) = [0]
	$9 = CALL $128(($4 + [280]), [9741])
	$8 = ($9 + [8])
	*((($4 + [296]) + [8])) = *($8)
	*($4 + [296]) = *($9)
	*($9) = (int_64)0
	*($8) = [0]
	CALL $2(($4 + [136]), *((($4 + [516]) + [8])))
	$9 = *($4 + [136])
	$8 = ($9 & [1])
	$9 = CALL $130(($4 + [296]), ( *($4 + [144]) ? (($4 + [136]) | [1]) : $8 ), ( *($4 + [140]) ? uint_32($9 >> [1]) : $8 ))
	$8 = ($9 + [8])
	*((($4 + [312]) + [8])) = *($8)
	*($4 + [312]) = *($9)
	*($9) = (int_64)0
	*($8) = [0]
	$9 = CALL $128(($4 + [312]), [9734])
	$8 = ($9 + [8])
	*((($4 + [328]) + [8])) = *($8)
	*($4 + [328]) = *($9)
	*($9) = (int_64)0
	*($8) = [0]
	$9 = *($4 + [488])
	$8 = ($9 & [1])
	$9 = CALL $130(($4 + [328]), ( *($4 + [496]) ? (($4 + [488]) | [1]) : $8 ), ( *($4 + [492]) ? uint_32($9 >> [1]) : $8 ))
	$8 = ($9 + [8])
	*((($4 + [344]) + [8])) = *($8)
	*($4 + [344]) = *($9)
	*($9) = (int_64)0
	*($8) = [0]
	$9 = CALL $128(($4 + [344]), [9737])
	$8 = ($9 + [8])
	*((($4 + [360]) + [8])) = *($8)
	*($4 + [360]) = *($9)
	*($9) = (int_64)0
	*($8) = [0]
	CALL $2(($4 + [120]), *($4 + [504]))
	$9 = *($4 + [120])
	$8 = ($9 & [1])
	$9 = CALL $130(($4 + [360]), ( *($4 + [128]) ? (($4 + [120]) | [1]) : $8 ), ( *($4 + [124]) ? uint_32($9 >> [1]) : $8 ))
	$8 = ($9 + [8])
	*((($4 + [376]) + [8])) = *($8)
	*($4 + [376]) = *($9)
	*($9) = (int_64)0
	*($8) = [0]
	$9 = CALL $128(($4 + [376]), [9741])
	$8 = ($9 + [8])
	*((($4 + [392]) + [8])) = *($8)
	*($4 + [392]) = *($9)
	*($9) = (int_64)0
	*($8) = [0]
	CALL $2(($4 + [104]), *((($4 + [504]) + [4])))
	$9 = *($4 + [104])
	$8 = ($9 & [1])
	$9 = CALL $130(($4 + [392]), ( *($4 + [112]) ? (($4 + [104]) | [1]) : $8 ), ( *($4 + [108]) ? uint_32($9 >> [1]) : $8 ))
	$8 = ($9 + [8])
	*((($4 + [408]) + [8])) = *($8)
	*($4 + [408]) = *($9)
	*($9) = (int_64)0
	*($8) = [0]
	$9 = CALL $128(($4 + [408]), [9741])
	$8 = ($9 + [8])
	*((($4 + [424]) + [8])) = *($8)
	*($4 + [424]) = *($9)
	*($9) = (int_64)0
	*($8) = [0]
	CALL $2(($4 + [88]), *((($4 + [504]) + [8])))
	$9 = *($4 + [88])
	$8 = ($9 & [1])
	$9 = CALL $130(($4 + [424]), ( *($4 + [96]) ? (($4 + [88]) | [1]) : $8 ), ( *($4 + [92]) ? uint_32($9 >> [1]) : $8 ))
	$8 = ($9 + [8])
	*((($4 + [440]) + [8])) = *($8)
	*($4 + [440]) = *($9)
	*($9) = (int_64)0
	*($8) = [0]
	$9 = CALL $128(($4 + [440]), [9734])
	$8 = ($9 + [8])
	*((($4 + [32]) + [8])) = *($8)
	*($4 + [32]) = *($9)
	*($9) = (int_64)0
	*($8) = [0]
	$9 = *($4 + [472])
	$8 = ($9 & [1])
	$9 = CALL $130(($4 + [32]), ( *($4 + [480]) ? (($4 + [472]) | [1]) : $8 ), ( *($4 + [476]) ? uint_32($9 >> [1]) : $8 ))
	$8 = ($9 + [8])
	*((($4 + [456]) + [8])) = *($8)
	*($4 + [456]) = *($9)
	*($9) = (int_64)0
	*($8) = [0]
	if ( (*($4 + [32]) & [1]) ){ goto $label$72 }
	if ( (*($4 + [440]) & [1]) ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$72
	CALL _ZdlPv(*($4 + [40]))
	if ( ((*($4 + [440]) & [1]) == 0) ){ goto $label$70 }
	
.LABEL $label$71
	CALL _ZdlPv(*($4 + [448]))
	$9 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$70
	$9 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$68 }
	
.LABEL $label$69
	if ( (*($4 + [424]) & $9) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$68
	CALL _ZdlPv(*(($4 + [96])))
	if ( ((*($4 + [424]) & $9) == 0) ){ goto $label$66 }
	
.LABEL $label$67
	CALL _ZdlPv(*($4 + [432]))
	$9 = [1]
	if ( ((*($4 + [408]) & [1]) == 0) ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$66
	$9 = [1]
	if ( (*($4 + [408]) & [1]) ){ goto $label$64 }
	
.LABEL $label$65
	if ( (*($4 + [104]) & $9) ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$64
	CALL _ZdlPv(*($4 + [416]))
	if ( ((*($4 + [104]) & $9) == 0) ){ goto $label$62 }
	
.LABEL $label$63
	CALL _ZdlPv(*(($4 + [112])))
	$9 = [1]
	if ( ((*($4 + [392]) & [1]) == 0) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$62
	$9 = [1]
	if ( (*($4 + [392]) & [1]) ){ goto $label$60 }
	
.LABEL $label$61
	if ( (*($4 + [376]) & $9) ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$60
	CALL _ZdlPv(*($4 + [400]))
	if ( ((*($4 + [376]) & $9) == 0) ){ goto $label$58 }
	
.LABEL $label$59
	CALL _ZdlPv(*($4 + [384]))
	$9 = [1]
	if ( ((*($4 + [120]) & [1]) == 0) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	$9 = [1]
	if ( (*($4 + [120]) & [1]) ){ goto $label$56 }
	
.LABEL $label$57
	if ( (*($4 + [360]) & $9) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$56
	CALL _ZdlPv(*(($4 + [128])))
	if ( ((*($4 + [360]) & $9) == 0) ){ goto $label$54 }
	
.LABEL $label$55
	CALL _ZdlPv(*($4 + [368]))
	$9 = [1]
	if ( ((*($4 + [344]) & [1]) == 0) ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	$9 = [1]
	if ( (*($4 + [344]) & [1]) ){ goto $label$52 }
	
.LABEL $label$53
	if ( (*($4 + [328]) & $9) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	CALL _ZdlPv(*($4 + [352]))
	if ( ((*($4 + [328]) & $9) == 0) ){ goto $label$50 }
	
.LABEL $label$51
	CALL _ZdlPv(*($4 + [336]))
	$9 = [1]
	if ( ((*($4 + [312]) & [1]) == 0) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	$9 = [1]
	if ( (*($4 + [312]) & [1]) ){ goto $label$48 }
	
.LABEL $label$49
	if ( (*($4 + [136]) & $9) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	CALL _ZdlPv(*($4 + [320]))
	if ( ((*($4 + [136]) & $9) == 0) ){ goto $label$46 }
	
.LABEL $label$47
	CALL _ZdlPv(*(($4 + [144])))
	$9 = [1]
	if ( ((*($4 + [296]) & [1]) == 0) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$46
	$9 = [1]
	if ( (*($4 + [296]) & [1]) ){ goto $label$44 }
	
.LABEL $label$45
	if ( (*($4 + [280]) & $9) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$44
	CALL _ZdlPv(*($4 + [304]))
	if ( ((*($4 + [280]) & $9) == 0) ){ goto $label$42 }
	
.LABEL $label$43
	CALL _ZdlPv(*($4 + [288]))
	$9 = [1]
	if ( ((*($4 + [152]) & [1]) == 0) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$9 = [1]
	if ( (*($4 + [152]) & [1]) ){ goto $label$40 }
	
.LABEL $label$41
	if ( (*($4 + [264]) & $9) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	CALL _ZdlPv(*(($4 + [160])))
	if ( ((*($4 + [264]) & $9) == 0) ){ goto $label$38 }
	
.LABEL $label$39
	CALL _ZdlPv(*($4 + [272]))
	$9 = [1]
	if ( ((*($4 + [248]) & [1]) == 0) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$9 = [1]
	if ( (*($4 + [248]) & [1]) ){ goto $label$36 }
	
.LABEL $label$37
	if ( (*($4 + [168]) & $9) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	CALL _ZdlPv(*($4 + [256]))
	if ( ((*($4 + [168]) & $9) == 0) ){ goto $label$34 }
	
.LABEL $label$35
	CALL _ZdlPv(*(($4 + [176])))
	$9 = [1]
	if ( ((*($4 + [232]) & [1]) == 0) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$9 = [1]
	if ( (*($4 + [232]) & [1]) ){ goto $label$32 }
	
.LABEL $label$33
	if ( (*($4 + [216]) & $9) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	CALL _ZdlPv(*($4 + [240]))
	if ( ((*($4 + [216]) & $9) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	CALL _ZdlPv(*($4 + [224]))
	$9 = [1]
	if ( ((*($4 + [200]) & [1]) == 0) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$9 = [1]
	if ( (*($4 + [200]) & [1]) ){ goto $label$28 }
	
.LABEL $label$29
	if ( ((*($4 + [184]) & $9) == 0) ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$28
	CALL _ZdlPv(*($4 + [208]))
	if ( ((*($4 + [184]) & $9) == 0) ){ goto $label$26 }
	
.LABEL $label$27
	CALL _ZdlPv(*($4 + [192]))
	
.LABEL $label$26
	CALL $136(($4 + [440]), [9743], ($4 + [456]))
	*($4 + [392]) = (int_64)0
	$13 = (CASTING float_64)(uint_64 ((int_64)*($10 + [32]) + (int_64)*($10 + [24])))
	$14 = ((float_64)$13 * (float_64)(float_64)0.0028)
	if ( (((float_64)$14 < (float_64)(float_64)18446744073709551615) & ((float_64)$14 >= (float_64)(float_64)0)) ){ goto $label$74 }
	$6 = (int_64)0
	goto $label$73 
	
.LABEL $label$74
	$6 = (Rounds 0)($14)
	
.LABEL $label$73
	*($4 + [344]) = $6
	$14 = ((float_64)$13 * (float_64)(float_64)0.0112)
	if ( (((float_64)$14 < (float_64)(float_64)18446744073709551615) & ((float_64)$14 >= (float_64)(float_64)0)) ){ goto $label$76 }
	$11 = (int_64)0
	goto $label$75 
	
.LABEL $label$76
	$11 = (Rounds 0)($14)
	
.LABEL $label$75
	*($4 + [328]) = $11
	$14 = ((float_64)$13 * (float_64)(float_64)0.985)
	if ( (((float_64)$14 < (float_64)(float_64)18446744073709551615) & ((float_64)$14 >= (float_64)(float_64)0)) ){ goto $label$78 }
	$15 = (int_64)0
	goto $label$77 
	
.LABEL $label$78
	$15 = (Rounds 0)($14)
	
.LABEL $label$77
	*($4 + [312]) = $15
	$9 = *($10 + [292])
	if ( ((int_32)$9 == (int_32)[2]) ){ goto $label$83 }
	if ( ((int_32)$9 != (int_32)[1]) ){ goto $label$82 }
	*($4 + [328]) = $11
	*($4 + [344]) = $6
	*($4 + [312]) = $15
	goto $label$79 
	
.LABEL $label$83
	$14 = ((float_64)$13 * (float_64)(float_64)0.0152)
	if ( (((float_64)$14 < (float_64)(float_64)18446744073709551615) & ((float_64)$14 >= (float_64)(float_64)0)) ){ goto $label$81 }
	$6 = (int_64)0
	goto $label$80 
	
.LABEL $label$82
	CALL eosio_assert([0], [10989])
	goto $label$79 
	
.LABEL $label$81
	$6 = (Rounds 0)($14)
	
.LABEL $label$80
	*($4 + [328]) = $6
	$14 = ((float_64)$13 * (float_64)(float_64)0.0038)
	if ( (((float_64)$14 < (float_64)(float_64)18446744073709551615) & ((float_64)$14 >= (float_64)(float_64)0)) ){ goto $label$85 }
	$6 = (int_64)0
	goto $label$84 
	
.LABEL $label$85
	$6 = (Rounds 0)($14)
	
.LABEL $label$84
	*($4 + [344]) = $6
	$13 = ((float_64)$13 * (float_64)(float_64)0.98)
	if ( (((float_64)$13 < (float_64)(float_64)18446744073709551615) & ((float_64)$13 >= (float_64)(float_64)0)) ){ goto $label$86 }
	*($4 + [312]) = (int_64)0
	goto $label$79 
	
.LABEL $label$86
	*($4 + [312]) = (Rounds 0)($13)
	
.LABEL $label$79
	*(($4 + [432])) = [0]
	*($4 + [424]) = (int_64)0
	$9 = CALL $150([9765])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$99 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$102 }
	*($4 + [424]) = ($9 << [1])
	$8 = (($4 + [424]) | [1])
	if ( $9 ){ goto $label$101 }
	goto $label$100 
	
.LABEL $label$102
	$7 = (($9 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*($4 + [424]) = ($7 | [1])
	*($4 + [432]) = $8
	*($4 + [428]) = $9
	
.LABEL $label$101
	CALL memcpy($8, [9765], $9)
	
.LABEL $label$100
	*(($8 + $9)) = [0]
	*(($4 + [416])) = [0]
	*($4 + [408]) = (int_64)0
	$9 = CALL $150([9785])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$98 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$105 }
	*($4 + [408]) = ($9 << [1])
	$8 = (($4 + [408]) | [1])
	if ( $9 ){ goto $label$104 }
	goto $label$103 
	
.LABEL $label$105
	$7 = (($9 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*($4 + [408]) = ($7 | [1])
	*($4 + [416]) = $8
	*($4 + [412]) = $9
	
.LABEL $label$104
	CALL memcpy($8, [9785], $9)
	
.LABEL $label$103
	*(($8 + $9)) = [0]
	if ( ((int_32)*(($10 + [292])) != (int_32)[2]) ){ goto $label$106 }
	CALL $125(($4 + [424]), [9805])
	CALL $125(($4 + [408]), [9825])
	
.LABEL $label$106
	*($4 + [80]) = [9845]
	*($4 + [84]) = CALL $150([9845])
	*($4 + [16]) = *($4 + [80])
	CALL $14($0, CALL $12(($4 + [32]), ($4 + [16])), ($4 + [344]), ($4 + [424]))
	*($4 + [72]) = [9858]
	*($4 + [76]) = CALL $150([9858])
	*($4 + [8]) = *($4 + [72])
	CALL $14($0, CALL $12(($4 + [32]), ($4 + [8])), ($4 + [328]), ($4 + [408]))
	*($4 + [296]) = (int_64)0
	if ( ((int_32)*($4 + [500]) != (int_32)[1]) ){ goto $label$111 }
	$6 = *($4 + [312])
	*($4 + [376]) = $6
	*($4 + [360]) = (int_64)0
	*($4 + [392]) = *($10 + [88])
	*($4 + [296]) = *($10 + [96])
	$9 = ($10 + [32])
	$11 = *($9)
	CALL $14($0, $3, ($4 + [312]), ($4 + [440]))
	$15 = *($9)
	$13 = ((float_64)(CASTING float_64)(uint_64 $15) * (float_64)(float_64)2.5)
	if ( (((float_64)$13 < (float_64)(float_64)18446744073709551615) & ((float_64)$13 >= (float_64)(float_64)0)) ){ goto $label$110 }
	CALL $13($0, $12, $15, (int_64)0)
	goto $label$107 
	
.LABEL $label$111
	*($4 + [376]) = (int_64)0
	$6 = *($4 + [312])
	*($4 + [360]) = $6
	*($4 + [392]) = *($10 + [96])
	*($4 + [296]) = *($10 + [88])
	$9 = ($10 + [24])
	$11 = *($9)
	CALL $14($0, $12, ($4 + [312]), ($4 + [440]))
	$15 = *($9)
	$13 = ((float_64)(CASTING float_64)(uint_64 $15) * (float_64)(float_64)2.5)
	if ( (((float_64)$13 < (float_64)(float_64)18446744073709551615) & ((float_64)$13 >= (float_64)(float_64)0)) ){ goto $label$109 }
	$16 = (int_64)0
	goto $label$108 
	
.LABEL $label$110
	CALL $13($0, $12, $15, (Rounds 0)($13))
	goto $label$107 
	
.LABEL $label$109
	$16 = (Rounds 0)($13)
	
.LABEL $label$108
	CALL $13($0, $3, $15, $16)
	
.LABEL $label$107
	CALL $45($0, ($4 + [392]), $6, ($4 + [296]), $11, *($1))
	*($4 + [280]) = *(( $12 ? $3 : ((int_64)*(($10 + [104])) == (int_64)*(($10 + [88]))) ))
	$6 = *($0)
	*($4 + [36]) = ($4 + [392])
	*($4 + [32]) = ($4 + [500])
	*($4 + [40]) = ($4 + [376])
	*($4 + [44]) = ($4 + [360])
	*($4 + [48]) = ($4 + [280])
	*($4 + [52]) = ($4 + [516])
	*($4 + [56]) = ($4 + [504])
	*($4 + [60]) = ($4 + [592])
	*($4 + [64]) = ($4 + [560])
	*($4 + [68]) = ($4 + [456])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [10611])
	CALL $59($5, $10, $6, ($4 + [32]))
	if ( (*($4 + [408]) & [1]) ){ goto $label$113 }
	if ( (*($4 + [424]) & [1]) ){ goto $label$112 }
	goto $label$97 
	
.LABEL $label$113
	CALL _ZdlPv(*($4 + [416]))
	if ( ((*($4 + [424]) & [1]) == 0) ){ goto $label$97 }
	
.LABEL $label$112
	CALL _ZdlPv(*($4 + [432]))
	$9 = [1]
	if ( ((*($4 + [440]) & [1]) == 0) ){ goto $label$96 }
	goto $label$95 
	
.LABEL $label$99
	CALL $119(($4 + [424]))
	
.LABEL $label$98
	CALL $119(($4 + [408]))
	
.LABEL $label$97
	$9 = [1]
	if ( (*($4 + [440]) & [1]) ){ goto $label$95 }
	
.LABEL $label$96
	if ( (*($4 + [456]) & $9) ){ goto $label$94 }
	goto $label$93 
	
.LABEL $label$95
	CALL _ZdlPv(*($4 + [448]))
	if ( ((*($4 + [456]) & $9) == 0) ){ goto $label$93 }
	
.LABEL $label$94
	CALL _ZdlPv(*($4 + [464]))
	$9 = [1]
	if ( ((*($4 + [472]) & [1]) == 0) ){ goto $label$92 }
	goto $label$91 
	
.LABEL $label$93
	$9 = [1]
	if ( (*($4 + [472]) & [1]) ){ goto $label$91 }
	
.LABEL $label$92
	if ( (*($4 + [488]) & $9) ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$91
	CALL _ZdlPv(*(($4 + [480])))
	if ( ((*($4 + [488]) & $9) == 0) ){ goto $label$89 }
	
.LABEL $label$90
	CALL _ZdlPv(*(($4 + [496])))
	if ( ((*($4 + [640]) & [1]) == 0) ){ goto $label$88 }
	goto $label$87 
	
.LABEL $label$89
	if ( (*($4 + [640]) & [1]) ){ goto $label$87 }
	
.LABEL $label$88
	$global$0 = ($4 + [656])
	return 
	
.LABEL $label$87
	CALL _ZdlPv(*(($4 + [648])))
	$global$0 = ($4 + [656])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = (*($0) + [241])
	*($0) = $2
	$3 = *($1 + [256])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [260])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *(($1 + [256]))
	$3 = ( *(($1 + [260])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$2
	$3 = *($1 + [268])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [272])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	$3 = *(($1 + [268]))
	$3 = ( *(($1 + [272])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$4
	$3 = *($1 + [280])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [284])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($0) = $2
	$1 = *(($1 + [280]))
	$1 = ( *(($1 + [284])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($1 + $2)
	*($0) = $2
	
.LABEL $label$6
	*($0) = ($2 + [3])
	return $0
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10605])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10605])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10605])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10605])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10605])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$6 = ($global$0 - [48])
	$global$0 = $6
	$7 = ($0 + [32])
	$9 = *(($0 + [60]))
	$8 = *(($0 + [56]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	
.LOOP $label$4:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$3 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($11 + [296])) == (int_32)$7), [10050])
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	$10 = CALL db_find_i64(*($7), *(($0 + [40])), (int_64)4490217900845563904, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $18($7, $10)
	CALL eosio_assert(((int_32)*($11 + [296]) == (int_32)$7), [10050])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)*($11 + [79]) == (int_32)[2]), [9871])
	$10 = ((int_64)*($2) == (int_64)*($11 + [88]))
	$1 = *($3)
	$12 = ( $1 ? (int_64)0 : $10 )
	*($6 + [40]) = ((int_64)$12 + (int_64)*($11 + [24]))
	$1 = ( (int_64)0 ? $1 : $10 )
	*($6 + [32]) = ((int_64)*($11 + [32]) + (int_64)$1)
	*($6 + [16]) = $1
	*($6 + [24]) = $12
	$1 = *($0)
	*($6 + [4]) = ($6 + [32])
	*($6) = ($6 + [40])
	*($6 + [8]) = ($6 + [24])
	*($6 + [12]) = ($6 + [16])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [10611])
	CALL $44($7, $11, $1, $6)
	$global$0 = ($6 + [48])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [296])) == (int_32)$0), [10646])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10692])
	$5 = *($1)
	*($1 + [8]) = CALL current_time()
	$6 = *($3)
	*($1 + [32]) = *($6)
	*($1 + [48]) = *($6)
	$6 = *(*($3 + [4]))
	*($1 + [104]) = *(*($3 + [8]))
	*($1 + [79]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10743])
	*(($3 = $4)) = [0]
	CALL $107($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $153($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $108($3, $1)
	CALL db_update_i64(*(($1 + [300])), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $156($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [296])) == (int_32)$0), [10646])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10692])
	$5 = *($1)
	*($1 + [8]) = CALL current_time()
	$3 = *(*($3) + [4])
	$6 = *($3 + [4])
	*($1 + [32]) = ((int_64)*($6) + (int_64)*($3 + [32]))
	$7 = *($6)
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = $7
	*($1 + [104]) = *($3 + [88])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10743])
	*(($3 = $4)) = [0]
	CALL $107($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $153($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $108($3, $1)
	CALL db_update_i64(*(($1 + [300])), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $156($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [296])) == (int_32)$0), [10646])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10692])
	$5 = *($1)
	*($1 + [8]) = CALL current_time()
	$3 = *(*($3) + [4])
	$6 = *($3 + [4])
	*($1 + [24]) = ((int_64)*($6) + (int_64)*($3 + [24]))
	$7 = *($6)
	*($1 + [48]) = (int_64)0
	*($1 + [40]) = $7
	*($1 + [80]) = (*($3 + [80]) + [1])
	*($1 + [104]) = *($3 + [96])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10743])
	*(($3 = $4)) = [0]
	CALL $107($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $153($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $108($3, $1)
	CALL db_update_i64(*(($1 + [300])), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $156($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [160])
	$global$0 = $3
	$4 = *($2)
	$2 = CALL $150([10498])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [10148])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($2 + [10497]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10536])
	$7 = ((int_64)$5 & (int_64)72057594037927935)
	$8 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$5 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $5
	$6 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $5
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $6 ){ goto $label$11 }
	$6 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [10585])
	$7 = *($0)
	*($3 + [40]) = [10502]
	*($3 + [44]) = CALL $150([10502])
	*($3 + [16]) = *($3 + [40])
	$5 = *(CALL $12(($3 + [96]), ($3 + [16])))
	*($3 + [80]) = [10037]
	*($3 + [84]) = CALL $150([10037])
	*($3 + [8]) = *($3 + [80])
	$9 = CALL $12(($3 + [88]), ($3 + [8]))
	*($3 + [40]) = [10509]
	*($3 + [44]) = CALL $150([10509])
	*($3) = *($3 + [40])
	$10 = *(CALL $12(($3 + [96]), $3))
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	$2 = CALL $150([10515])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$16 }
	*($3 + [24]) = ($2 << [1])
	$6 = (($3 + [24]) | [1])
	if ( $2 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$0 = (($2 + [16]) & [-16])
	$6 = CALL _Znwj($0)
	*($3 + [24]) = ($0 | [1])
	*($3 + [32]) = $6
	*($3 + [28]) = $2
	
.LABEL $label$15
	CALL memcpy($6, [10515], $2)
	
.LABEL $label$14
	*(($6 + $2)) = [0]
	*((($3 + [40]) + [16])) = $8
	$2 = ($3 + [32])
	*(($3 + [72])) = *($2)
	*($2) = [0]
	*($3 + [48]) = $4
	*($3 + [104]) = $10
	*($3 + [40]) = *($1)
	*($3 + [64]) = *($3 + [24])
	*($3 + [24]) = (int_64)0
	*($3 + [96]) = *($9)
	*(($2 = CALL _Znwj([16]))) = $7
	*($2 + [8]) = $5
	*(($3 + [132])) = [0]
	$6 = ($2 + [16])
	*((($3 + [96]) + [24])) = $6
	*(($3 + [116])) = $6
	*($3 + [112]) = $2
	*($3 + [124 align=4]) = (int_64)0
	$2 = *($3 + [64])
	$6 = ( *((($3 + [40]) + [28])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($6 + [24])
	$7 = (CASTING uint_64)(uint_32 $6)
	$9 = (($3 + [40]) + [24])
	$6 = (($3 + [96]) + [28])
	
.LOOP $label$17:
	$2 = ($2 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$17 }
	if ( ($2 == 0) ){ goto $label$19 }
	CALL $27($6, $2)
	$6 = *(($3 + [128]))
	$2 = *(($3 + [124]))
	goto $label$18 
	
.LABEL $label$19
	$6 = [0]
	$2 = [0]
	
.LABEL $label$18
	*($3 + [136]) = $2
	*($3 + [144]) = $6
	$6 = ($6 - $2)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [10605])
	CALL memcpy($2, ($3 + [40]), [8])
	CALL eosio_assert(((int_32)($6 + [-8]) > (int_32)[7]), [10605])
	CALL memcpy(($2 + [8]), (($3 + [40]) + [8]), [8])
	*($3 + [152]) = *((($3 + [40]) + [16]))
	CALL eosio_assert(((int_32)($6 + [-16]) > (int_32)[7]), [10605])
	CALL memcpy(($2 + [16]), ($3 + [152]), [8])
	*($3 + [140]) = ($2 + [24])
	CALL $88(($3 + [136]), $9)
	CALL $29(($3 + [136]), ($3 + [96]))
	$2 = *($3 + [136])
	CALL send_inline($2, (*($3 + [140]) - $2))
	$2 = *($3 + [136])
	if ( ($2 == 0) ){ goto $label$20 }
	*($3 + [140]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$20
	$2 = *($3 + [124])
	if ( ($2 == 0) ){ goto $label$21 }
	*(($3 + [128])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$21
	$2 = *($3 + [112])
	if ( ($2 == 0) ){ goto $label$22 }
	*(($3 + [116])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$22
	if ( (*(($3 + [64])) & [1]) ){ goto $label$24 }
	if ( (*($3 + [24]) & [1]) ){ goto $label$23 }
	goto $label$12 
	
.LABEL $label$24
	CALL _ZdlPv(*(($3 + [72])))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$23
	CALL _ZdlPv(*(($3 + [32])))
	$global$0 = ($3 + [160])
	return (unreachable)
	
.LABEL $label$13
	CALL $119(($3 + [24]))
	
.LABEL $label$12
	$global$0 = ($3 + [160])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10101])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $153($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [56]) = $0
	*($5 + [16]) = (int_64)0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	CALL $91(($3 + [32]), ($3 + [24]))
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	*($3 + [32]) = (int_64)7235032801370701824
	*($3 + [4]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7235032801370701824
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $92(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $156($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $139($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$0), [10050])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235032801370701824, (int_64)7235032801370701824)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $24($0, $4)
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$0), [10050])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [10611])
	CALL $89($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $90($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10124])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10124])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10124])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10124])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10124])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10124])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10124])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10124])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $135 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $149(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [16]) = [11231]
	*($3 + [20]) = CALL $150([11231])
	*($3 + [8]) = *($3 + [16])
	CALL require_auth(*(CALL $12(($3 + [24]), ($3 + [8]))))
	CALL $13($0, $1, (int_64)0, *($2))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $68 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $153($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10124])
	CALL memcpy(($4 + [272]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = (int_64)0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $0
	*(($4 + [264])) = [0]
	*($4 + [280]) = *($4 + [272])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [280])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $156($2)
	
.LABEL $label$5
	CALL $76($4)
	$global$0 = ($4 + [288])
	return [1]
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [73]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [74]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [75]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [76]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [77]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [78]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [79]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [160]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [192]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [224]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$0 = CALL $88(CALL $88(CALL $88($0, ($1 + [256])), ($1 + [268])), ($1 + [280]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [292]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [293]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [10605])
	CALL memcpy(*($0 + [4]), ($1 + [294]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $65 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = CALL current_time()
	$4 = *(($0 + [40]))
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$5 = CALL db_lowerbound_i64(*($0 + [32]), $4, (int_64)4490217900845563904, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$1 = ( (int_64)10 ? $1 : ((uint_64)((int_64)$1 + (int_64)-1) > (uint_64)(int_64)99) )
	$6 = (($2 + [16]) + [8])
	$7 = ($0 + [32])
	$5 = CALL $18($7, $5)
	if ( ((int_32)*($5 + [79]) != (int_32)[2]) ){ goto $label$3 }
	$8 = [3]
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	$8 = [21]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$36 
	
.LABEL $label$43
	$5 = CALL $18($7, $5)
	if ( ((int_32)*($5 + [79]) != (int_32)[2]) ){ goto $label$16 }
	$8 = [3]
	goto $label$4 
	
.LABEL $label$42
	if ( (int_64)($1 == 0) ){ goto $label$18 }
	$8 = [4]
	goto $label$4 
	
.LABEL $label$41
	if ( (uint_64)((int_64))($3 - *($5 + [8])) <= (int_64)240000001) ){ goto $label$17 }
	$8 = [5]
	goto $label$4 
	
.LABEL $label$40
	$9 = *($2 + [20])
	if ( ((int_32)$9 == (int_32)*($6)) ){ goto $label$14 }
	$8 = [6]
	goto $label$4 
	
.LABEL $label$39
	*($9) = *($5)
	*($2 + [20]) = ($9 + [8])
	goto $label$13 
	
.LABEL $label$38
	CALL $78(($2 + [16]), $5)
	$8 = [7]
	goto $label$4 
	
.LABEL $label$37
	$1 = ((int_64)$1 + (int_64)-1)
	$8 = [0]
	goto $label$4 
	
.LABEL $label$36
	if ( (int_64)($1 == 0) ){ goto $label$19 }
	$8 = [1]
	goto $label$4 
	
.LABEL $label$35
	CALL eosio_assert([1], [11019])
	$5 = CALL db_next_i64(*($5 + [300]), $2)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$15 }
	$8 = [9]
	goto $label$4 
	
.LABEL $label$34
	$10 = *($2 + [20])
	$7 = *($2 + [16])
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$12 }
	$8 = [10]
	goto $label$4 
	
.LABEL $label$33
	$11 = ($2 | [1])
	$6 = ($2 + [8])
	$8 = [11]
	goto $label$4 
	
.LABEL $label$32
	$1 = *($7)
	*($6) = [0]
	*($2) = (int_64)0
	$5 = CALL $150([9510])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$10 }
	$8 = [12]
	goto $label$4 
	
.LABEL $label$31
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$9 }
	$8 = [22]
	goto $label$4 
	
.LABEL $label$30
	*($2) = ($5 << [1])
	$9 = $11
	if ( $5 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$29
	$12 = (($5 + [16]) & [-16])
	$9 = CALL _Znwj($12)
	*($6) = $9
	*($2) = ($12 | [1])
	*($2 + [4]) = $5
	$8 = [14]
	goto $label$4 
	
.LABEL $label$28
	CALL memcpy($9, [9510], $5)
	$8 = [15]
	goto $label$4 
	
.LABEL $label$27
	*(($9 + $5)) = [0]
	CALL $49($0, $1, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$6 }
	$8 = [16]
	goto $label$4 
	
.LABEL $label$26
	CALL _ZdlPv(*($6))
	$8 = [17]
	goto $label$4 
	
.LABEL $label$25
	$7 = ($7 + [8])
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$11 }
	$8 = [18]
	goto $label$4 
	
.LABEL $label$24
	$10 = *($2 + [16])
	$8 = [19]
	goto $label$4 
	
.LABEL $label$23
	if ( ($10 == 0) ){ goto $label$5 }
	$8 = [20]
	goto $label$4 
	
.LABEL $label$22
	*($2 + [20]) = $10
	CALL _ZdlPv($10)
	$8 = [21]
	goto $label$4 
	
.LABEL $label$21
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$20
	CALL $119($2)
	
.LABEL $label$19
	$8 = [9]
	goto $label$4 
	
.LABEL $label$18
	$8 = [0]
	goto $label$4 
	
.LABEL $label$17
	$8 = [0]
	goto $label$4 
	
.LABEL $label$16
	$8 = [0]
	goto $label$4 
	
.LABEL $label$15
	$8 = [2]
	goto $label$4 
	
.LABEL $label$14
	$8 = [8]
	goto $label$4 
	
.LABEL $label$13
	$8 = [7]
	goto $label$4 
	
.LABEL $label$12
	$8 = [19]
	goto $label$4 
	
.LABEL $label$11
	$8 = [11]
	goto $label$4 
	
.LABEL $label$10
	$8 = [23]
	goto $label$4 
	
.LABEL $label$9
	$8 = [13]
	goto $label$4 
	
.LABEL $label$8
	$8 = [15]
	goto $label$4 
	
.LABEL $label$7
	$8 = [14]
	goto $label$4 
	
.LABEL $label$6
	$8 = [17]
	goto $label$4 
	
.LABEL $label$5
	$8 = [21]
	goto $label$4 
	$8
}

int_32 .FUNC $64 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [416])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $153($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [304]) + [24]))) = (int_64)0
	*((($4 + [304]) + [40])) = [0]
	*($4 + [312]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [320]) = (int_64)0
	*($4 + [336]) = (int_64)0
	*($4 + [292]) = $2
	*($4 + [288]) = $2
	*($4 + [296]) = ($2 + $7)
	*($4 + [384]) = ($4 + [288])
	*($4 + [16]) = ($4 + [304])
	CALL $84(($4 + [16]), ($4 + [384]))
	*(($3 = ($4 + [8]))) = *($4 + [296])
	*($4) = *($4 + [288])
	$9 = *($3)
	*((($4 + [352]) + [8])) = $9
	*(($3 = (($4 + [368]) + [8]))) = $9
	$10 = *($4)
	*($4 + [368]) = $10
	*($4 + [352]) = $10
	$11 = *($3)
	*(($9 = (($4 + [384]) + [8]))) = $11
	*((($4 + [16]) + [24])) = $11
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [368])
	*($4 + [32]) = $1
	*($4 + [384]) = $1
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*($3) = *($8)
	*($4 + [368]) = *($4 + [320])
	$0 = *($4 + [312])
	$1 = *($4 + [304])
	$8 = CALL $120(($4 + [352]), ($4 + [336]))
	*($9) = *($3)
	*($4 + [408]) = $1
	*($4 + [400]) = $0
	*($4 + [384]) = *($4 + [368])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [408])), (int_32 ($4 + [400])), (int_32 ($4 + [384])), (int_32 $8), (int_32 $6))
	if ( ((*($4 + [352]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $156($2)
	
.LABEL $label$6
	CALL $76(($4 + [16]))
	if ( ((*($4 + [336]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [344])))
	
.LABEL $label$7
	$global$0 = ($4 + [416])
	return [1]
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($1))
}

int_32 .FUNC $66 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $153($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10124])
	CALL memcpy(($4 + [280]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [248])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = (int_64)0
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	*($4 + [240]) = $0
	*(($4 + [272])) = [0]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [280])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $156($2)
	
.LABEL $label$5
	CALL $76(($4 + [8]))
	$global$0 = ($4 + [288])
	return [1]
}

int_32 .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$8 = ($global$0 - [208])
	$global$0 = $8
	$9 = *($1)
	if ( ((int_64)$9 == (int_64)0) ){ goto $label$4 }
	$10 = [0]
	$11 = *([0] + [10856])
	
.LOOP $label$6:
	*(($8 + ($1 = $10))) = *(($11 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$9 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$1 == (int_32)[12]) )))))
	$10 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[11]) ){ goto $label$5 }
	$9 = ((int_64)$9 << (int_64)5)
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($8 + [120])) = [0]
	*($8 + [112]) = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$3 }
	*($8 + [112]) = ($10 << [1])
	$11 = (($8 + [112]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($8 + [120])) = [0]
	*($8 + [112]) = (int_64)0
	*($8 + [112]) = [0]
	$1 = (($8 + [112]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$12 = (($10 + [16]) & [-16])
	$11 = CALL _Znwj($12)
	*($8 + [112]) = ($12 | [1])
	*($8 + [120]) = $11
	*($8 + [116]) = $10
	
.LABEL $label$2
	$12 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$7:
	*(($11 + $1)) = *(($8 + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$1 = ($11 + $10)
	
.LABEL $label$1
	$10 = [0]
	*($1) = [0]
	$9 = *($2)
	if ( ((int_64)$9 == (int_64)0) ){ goto $label$11 }
	$11 = *([0] + [10856])
	
.LOOP $label$13:
	*(($8 + ($1 = $10))) = *(($11 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$9 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$1 == (int_32)[12]) )))))
	$10 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[11]) ){ goto $label$12 }
	$9 = ((int_64)$9 << (int_64)5)
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$13 }
	
.LABEL $label$12
	*(($8 + [104])) = [0]
	*($8 + [96]) = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$10 }
	*($8 + [96]) = ($10 << [1])
	$11 = (($8 + [96]) | [1])
	goto $label$9 
	
.LABEL $label$11
	*(($8 + [104])) = [0]
	*($8 + [96]) = (int_64)0
	*($8 + [96]) = [0]
	$10 = (($8 + [96]) | [1])
	$11 = $10
	goto $label$8 
	
.LABEL $label$10
	$12 = (($10 + [16]) & [-16])
	$11 = CALL _Znwj($12)
	*($8 + [96]) = ($12 | [1])
	*($8 + [104]) = $11
	*($8 + [100]) = $10
	
.LABEL $label$9
	$12 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$14:
	*(($11 + $1)) = *(($8 + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$14 }
	$11 = ($11 + $10)
	$10 = (($8 + [96]) | [1])
	
.LABEL $label$8
	$1 = [0]
	*($11) = [0]
	$11 = *($8 + [96])
	$12 = ($11 & [1])
	$10 = CALL $130(($8 + [112]), ( *($8 + [104]) ? $10 : $12 ), ( *($8 + [100]) ? uint_32($11 >> [1]) : $12 ))
	$11 = ($10 + [8])
	*((($8 + [128]) + [8])) = *($11)
	*($8 + [128]) = *($10)
	*($10) = (int_64)0
	*($11) = [0]
	*($8 + [88]) = [0]
	*($8 + [80]) = (int_64)0
	
.LOOP $label$15:
	$10 = *(($3 + $1))
	CALL $129(($8 + [80]), *((uint_32($10 >> [4]) + [8338])))
	CALL $129(($8 + [80]), *((($10 & [15]) + [8338])))
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[32]) ){ goto $label$15 }
	$1 = *($8 + [80])
	$10 = ($1 & [1])
	$1 = CALL $130(($8 + [128]), ( *((($8 + [80]) + [8])) ? (($8 + [80]) | [1]) : $10 ), ( *($8 + [84]) ? uint_32($1 >> [1]) : $10 ))
	$10 = ($1 + [8])
	*((($8 + [144]) + [8])) = *($10)
	*($8 + [144]) = *($1)
	*($1) = (int_64)0
	$1 = [0]
	*($10) = [0]
	*($8 + [72]) = [0]
	*($8 + [64]) = (int_64)0
	
.LOOP $label$16:
	$10 = *(($4 + $1))
	CALL $129(($8 + [64]), *((uint_32($10 >> [4]) + [8338])))
	CALL $129(($8 + [64]), *((($10 & [15]) + [8338])))
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[32]) ){ goto $label$16 }
	$1 = *($8 + [64])
	$10 = ($1 & [1])
	$1 = CALL $130(($8 + [144]), ( *((($8 + [64]) + [8])) ? (($8 + [64]) | [1]) : $10 ), ( *($8 + [68]) ? uint_32($1 >> [1]) : $10 ))
	$10 = ($1 + [8])
	*((($8 + [160]) + [8])) = *($10)
	*($8 + [160]) = *($1)
	*($1) = (int_64)0
	*($10) = [0]
	CALL $138(($8 + [48]), *($5))
	$1 = *($8 + [48])
	$10 = ($1 & [1])
	$1 = CALL $130(($8 + [160]), ( *($8 + [56]) ? (($8 + [48]) | [1]) : $10 ), ( *($8 + [52]) ? uint_32($1 >> [1]) : $10 ))
	$10 = ($1 + [8])
	*((($8 + [176]) + [8])) = *($10)
	*($8 + [176]) = *($1)
	*($1) = (int_64)0
	*($10) = [0]
	CALL $137(($8 + [32]), *($7))
	$1 = *($8 + [32])
	$10 = ($1 & [1])
	$1 = CALL $130(($8 + [176]), ( *($8 + [40]) ? (($8 + [32]) | [1]) : $10 ), ( *($8 + [36]) ? uint_32($1 >> [1]) : $10 ))
	$10 = ($1 + [8])
	*(($8 + [8])) = *($10)
	*($8) = *($1)
	*($1) = (int_64)0
	*($10) = [0]
	$1 = CALL $128($8, [10972])
	$10 = ($1 + [8])
	*((($8 + [192]) + [8])) = *($10)
	*($8 + [192]) = *($1)
	*($1) = (int_64)0
	*($10) = [0]
	if ( (*($8) & [1]) ){ goto $label$37 }
	if ( (*($8 + [32]) & [1]) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$35 }
	
.LABEL $label$36
	CALL _ZdlPv(*(($8 + [40])))
	$1 = [1]
	if ( ((*($8 + [176]) & [1]) == 0) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$1 = [1]
	if ( (*($8 + [176]) & [1]) ){ goto $label$33 }
	
.LABEL $label$34
	if ( (*($8 + [48]) & $1) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	CALL _ZdlPv(*($8 + [184]))
	if ( ((*($8 + [48]) & $1) == 0) ){ goto $label$31 }
	
.LABEL $label$32
	CALL _ZdlPv(*(($8 + [56])))
	$1 = [1]
	if ( ((*($8 + [160]) & [1]) == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$1 = [1]
	if ( (*($8 + [160]) & [1]) ){ goto $label$29 }
	
.LABEL $label$30
	if ( (*($8 + [64]) & $1) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	CALL _ZdlPv(*($8 + [168]))
	if ( ((*($8 + [64]) & $1) == 0) ){ goto $label$27 }
	
.LABEL $label$28
	CALL _ZdlPv(*(($8 + [72])))
	$1 = [1]
	if ( ((*($8 + [144]) & [1]) == 0) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$1 = [1]
	if ( (*($8 + [144]) & [1]) ){ goto $label$25 }
	
.LABEL $label$26
	if ( (*($8 + [80]) & $1) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL _ZdlPv(*($8 + [152]))
	if ( ((*($8 + [80]) & $1) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($8 + [88])))
	$1 = [1]
	if ( ((*($8 + [128]) & [1]) == 0) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$1 = [1]
	if ( (*($8 + [128]) & [1]) ){ goto $label$21 }
	
.LABEL $label$22
	if ( (*($8 + [96]) & $1) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL _ZdlPv(*($8 + [136]))
	if ( ((*($8 + [96]) & $1) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($8 + [104])))
	$1 = [1]
	if ( (*($8 + [112]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$1 = [1]
	if ( ((*($8 + [112]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*($8 + [120]))
	
.LABEL $label$17
	$10 = *($8 + [192])
	$3 = ($10 & $1)
	CALL sha256(( *($8 + [200]) ? (($8 + [192]) | $1) : $3 ), ( *($8 + [196]) ? uint_32($10 >> $1) : $3 ), $8)
	$10 = (CASTING uint_32)(uint_64 ((uint_64)*($8) % (uint_64)*($6)))
	if ( ((*($8 + [192]) & $1) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($8 + [200])))
	
.LABEL $label$38
	$global$0 = ($8 + [208])
	return $10
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [2])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$6 = int_32($7 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [2]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $139($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [2])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [2]))
	$5 = ($4 + [4])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $63 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $153($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = (int_64)0
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10124])
	CALL memcpy(($4 + [272]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [10124])
	CALL memcpy((($4 + [272]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = (int_64)0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $0
	*(($4 + [264])) = [0]
	$0 = *($4 + [272])
	*($4 + [288]) = *($4 + [280])
	*($4 + [296]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [296])), (int_32 ($4 + [288])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $156($2)
	
.LABEL $label$5
	CALL $76($4)
	$global$0 = ($4 + [304])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [336])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$13 }
	if ( ((int_64)$2 > (int_64)4923678602614013951) ){ goto $label$12 }
	if ( ((int_64)$2 > (int_64)-4417332247619174401) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-7948142508041568256) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-6533262907872903168) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-4920630346349117440) ){ goto $label$9 }
	*($3 + [292]) = [0]
	*($3 + [288]) = [1]
	*($3 + [24]) = *($3 + [288])
	CALL $63($1, $1, ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$13
	*($3 + [208]) = [10016]
	*($3 + [212]) = CALL $150([10016])
	*($3 + [160]) = *($3 + [208])
	CALL $12(($3 + [216]), ($3 + [160]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$14 }
	*($3 + [320]) = [10028]
	*($3 + [324]) = CALL $150([10028])
	*($3 + [152]) = *($3 + [320])
	CALL $12(($3 + [328]), ($3 + [152]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$14 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [2]
	*($3 + [96]) = *($3 + [200])
	CALL $64($0, (int_64)6138663591592764928, ($3 + [96]))
	CALL eosio_exit([0])
	
.LABEL $label$14
	*($3 + [192]) = [10037]
	*($3 + [196]) = CALL $150([10037])
	*($3 + [144]) = *($3 + [192])
	CALL $12(($3 + [216]), ($3 + [144]))
	if ( ((int_64)$1 != (int_64)-3662953346221468368) ){ goto $label$15 }
	*($3 + [320]) = [10028]
	*($3 + [324]) = CALL $150([10028])
	*($3 + [136]) = *($3 + [320])
	CALL $12(($3 + [328]), ($3 + [136]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$15 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [3]
	*($3 + [104]) = *($3 + [184])
	CALL $64($0, (int_64)-3662953346221468368, ($3 + [104]))
	CALL eosio_exit([0])
	
.LABEL $label$15
	*($3 + [176]) = [10037]
	*($3 + [180]) = CALL $150([10037])
	*($3 + [128]) = *($3 + [176])
	CALL $12(($3 + [216]), ($3 + [128]))
	if ( ((int_64)$1 != (int_64)-3662953346221468368) ){ goto $label$9 }
	*($3 + [320]) = [10028]
	*($3 + [324]) = CALL $150([10028])
	*($3 + [120]) = *($3 + [320])
	CALL $12(($3 + [328]), ($3 + [120]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$9 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [3]
	*($3 + [112]) = *($3 + [168])
	CALL $64($0, (int_64)-3662953346221468368, ($3 + [112]))
	CALL eosio_exit([0])
	
.LABEL $label$12
	if ( ((int_64)$2 > (int_64)5372695399406501887) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)4923678602614013952) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)4923678890773565952) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)4923678927443277200) ){ goto $label$9 }
	*($3 + [252]) = [0]
	*($3 + [248]) = [4]
	*($3 + [64]) = *($3 + [248])
	CALL $66($1, $1, ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)-4417332247619174400) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-3772703210754539520) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-2764395523103784960) ){ goto $label$9 }
	*($3 + [316]) = [0]
	*($3 + [312]) = [5]
	*($3) = *($3 + [312])
	CALL $68($1, $1, $3)
	CALL eosio_exit([0])
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)5372695399406501888) ){ goto $label$2 }
	if ( ((int_64)$2 == (int_64)7185120831805063168) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)8516770230339371008) ){ goto $label$9 }
	*($3 + [228]) = [0]
	*($3 + [224]) = [6]
	*($3 + [88]) = *($3 + [224])
	CALL $63($1, $1, ($3 + [88]))
	
.LABEL $label$9
	CALL eosio_exit([0])
	
.LABEL $label$8
	*($3 + [244]) = [0]
	*($3 + [240]) = [7]
	*($3 + [72]) = *($3 + [240])
	CALL $70($1, $1, ($3 + [72]))
	CALL eosio_exit([0])
	
.LABEL $label$7
	*($3 + [236]) = [0]
	*($3 + [232]) = [8]
	*($3 + [80]) = *($3 + [232])
	CALL $71($1, $1, ($3 + [80]))
	CALL eosio_exit([0])
	
.LABEL $label$6
	*($3 + [300]) = [0]
	*($3 + [296]) = [9]
	*($3 + [16]) = *($3 + [296])
	CALL $68($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$5
	*($3 + [260]) = [0]
	*($3 + [256]) = [10]
	*($3 + [56]) = *($3 + [256])
	CALL $74($1, $1, ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$4
	*($3 + [268]) = [0]
	*($3 + [264]) = [11]
	*($3 + [48]) = *($3 + [264])
	CALL $63($1, $1, ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$3
	*($3 + [284]) = [0]
	*($3 + [280]) = [12]
	*($3 + [32]) = *($3 + [280])
	CALL $63($1, $1, ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$2
	*($3 + [308]) = [0]
	*($3 + [304]) = [13]
	*($3 + [8]) = *($3 + [304])
	CALL $66($1, $1, ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$1
	*($3 + [276]) = [0]
	*($3 + [272]) = [14]
	*($3 + [40]) = *($3 + [272])
	CALL $63($1, $1, ($3 + [40]))
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $101 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [280]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [288])))
	if ( ((*($1 + [268]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [268]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [276])))
	if ( (*($1 + [256]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [256]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [264])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	return $0
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [11015])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $27($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [10124])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	*(($5 = ($1 + [16]))) = *(($4 + [16]))
	*(($6 = ($1 + [8]))) = *(($4 + [8]))
	CALL eosio_assert([1], [10605])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [10605])
	CALL memcpy(($2 | [8]), $6, [8])
	CALL eosio_assert([1], [10605])
	CALL memcpy(($2 + [16]), $5, [4])
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)-3886244000360824832, *(*($0 + [8])), (int_64)-3886244000360824832, $2, [20])
	if ( ((uint_64)*($3 + [16]) > (uint_64)(int_64)-3886244000360824832) ){ goto $label$1 }
	*(($3 + [16])) = (int_64)-3886244000360824831
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $139($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $139($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10124])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10124])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10124])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10124])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10124])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10124])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [10646])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10692])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [48]))) = *(($3 + [48]))
	*(($6 = ($1 + [40]))) = *(($3 + [40]))
	*(($7 = ($1 + [32]))) = *(($3 + [32]))
	*(($8 = ($1 + [24]))) = *(($3 + [24]))
	*(($9 = ($1 + [16]))) = *(($3 + [16]))
	*(($10 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [10743])
	*($4 + [64]) = ($4 + [52])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	*($4 + [72]) = ($4 + [56])
	*($4 + [84]) = $10
	*($4 + [80]) = $1
	*($4 + [88]) = $9
	*($4 + [92]) = $8
	*($4 + [96]) = $7
	*($4 + [100]) = $6
	*($4 + [104]) = $5
	CALL $95(($4 + [80]), ($4 + [72]))
	CALL db_update_i64(*($1 + [60]), $2, $4, [52])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235032801370701824) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235032801370701825
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [10605])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [10605])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $139($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10101])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $153($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10124])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [10124])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $87(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $156($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $139($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10124])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10124])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10124])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [10124])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $82(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $120(($2 + [24]), ($1 + [8]))
	$1 = CALL $120(($2 + [8]), ($1 + [20]))
	*($2 + [40]) = $3
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	CALL void $6((int_32 ($2 + [40])), (int_32 $4), (int_32 $1), (int_32 $0))
	if ( (*($1) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [48])
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $100($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $124($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $124($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $119($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = *($1)
	$4 = *($1 + [8])
	$5 = CALL $120(($2 + [56]), ($1 + [16]))
	$6 = CALL $120(($2 + [40]), ($1 + [28]))
	$7 = *($1 + [40])
	$8 = CALL $120(($2 + [24]), ($1 + [48]))
	$9 = CALL $120(($2 + [8]), ($1 + [60]))
	$1 = *($1 + [72])
	*($2 + [80]) = $4
	*($2 + [88]) = $3
	*($2 + [72]) = $7
	*($2 + [71]) = $1
	$1 = *($0 + [4])
	$10 = *($1 + [4])
	$0 = (*($0) + int_32($10 >> [1]))
	$1 = *($1)
	if ( (($10 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 ($2 + [88])), (int_32 ($2 + [80])), (int_32 $5), (int_32 $6), (int_32 ($2 + [72])), (int_32 $8), (int_32 $9), (int_32 ($2 + [71])), (int_32 $1))
	if ( (*($9) & [1]) ){ goto $label$8 }
	if ( (*($8) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($8) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($8 + [8]))
	$1 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($6) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($5) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($5 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10124])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10124])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $82(*($1), ($3 + [16]))
	CALL $82(*($1), ($3 + [28]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10124])
	CALL memcpy(($3 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $82(*($1), ($3 + [48]))
	CALL $82(*($1), ($3 + [60]))
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [10124])
	CALL memcpy(($3 + [72]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
}

int_32 .FUNC $149 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $148 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $145 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $144 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_32 .FUNC $147 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

int_32 .FUNC $146 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $142([16], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $141 ()
{
	return [11340]
}

int_32 .FUNC $140 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

void .FUNC $143 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $142 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [15] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $144($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $144($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $144($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $144($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19760]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $144($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $144($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $144($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [24])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*($2 + [8]) = (int_64)0
	$3 = ($0 + [192])
	$4 = *(($0 + [220]))
	if ( ((int_32)$4 == (int_32)*(($0 + [216]))) ){ goto $label$2 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$3), [10050])
	if ( $4 ){ goto $label$1 }
	$4 = ($2 + [8])
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_find_i64(*($3), *(($0 + [200])), (int_64)-3886244000360824832, (int_64)-3886244000360824832)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $38($3, $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$3), [10050])
	goto $label$1 
	
.LABEL $label$3
	$4 = ($2 + [8])
	
.LABEL $label$1
	*((($2 + [32]) + [16])) = *(($4 + [16]))
	*((($2 + [32]) + [8])) = *(($4 + [8]))
	*($2 + [32]) = *($4)
	$5 = *(($0 + [40]))
	*($2 + [16]) = [0]
	*($2 + [8]) = (int_64)0
	$4 = CALL db_lowerbound_i64(*($0 + [32]), $5, (int_64)4490217900845563904, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$6 = (($2 + [8]) + [8])
	$5 = *($1)
	$7 = ($0 + [32])
	$4 = CALL $18($7, $4)
	if ( ((int_64)*($4 + [88]) != (int_64)$5) ){ goto $label$6 }
	$8 = [3]
	goto $label$4 
	
.LABEL $label$6
	$8 = [0]
	goto $label$4 
	
.LABEL $label$5
	$8 = [18]
	
.LABEL $label$4
	
.LOOP $label$7:
	goto $label$47 
	
.LABEL $label$48
	$5 = *($1)
	$4 = CALL $18($7, $4)
	if ( ((int_64)*($4 + [88]) == (int_64)$5) ){ goto $label$25 }
	$8 = [0]
	goto $label$7 
	
.LABEL $label$47
	if ( ((int_64)*($4 + [96]) != (int_64)$5) ){ goto $label$24 }
	$8 = [3]
	goto $label$7 
	
.LABEL $label$46
	$9 = *($2 + [12])
	if ( ((int_32)$9 == (int_32)*($6)) ){ goto $label$21 }
	$8 = [4]
	goto $label$7 
	
.LABEL $label$45
	*($9) = *($4)
	*($2 + [12]) = ($9 + [8])
	goto $label$23 
	
.LABEL $label$44
	CALL $78(($2 + [8]), $4)
	$8 = [1]
	goto $label$7 
	
.LABEL $label$43
	CALL eosio_assert([1], [11019])
	$4 = CALL db_next_i64(*($4 + [300]), ($2 + [56]))
	if ( ((int_32)$4 >= (int_32)[0]) ){ goto $label$22 }
	$8 = [6]
	goto $label$7 
	
.LABEL $label$42
	$11 = *($2 + [12])
	$10 = *($2 + [8])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$20 }
	$8 = [7]
	goto $label$7 
	
.LABEL $label$41
	$12 = ($0 + [60])
	$13 = ($0 + [56])
	$14 = ($0 + [40])
	$15 = ($0 + [32])
	$16 = ($2 + [48])
	$8 = [8]
	goto $label$7 
	
.LABEL $label$40
	$5 = *($10)
	$9 = *($12)
	$6 = *($13)
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$16 }
	$8 = [9]
	goto $label$7 
	
.LABEL $label$39
	$4 = ($9 + [-24])
	$1 = *($4)
	if ( ((int_64)*($1) == (int_64)$5) ){ goto $label$15 }
	$8 = [10]
	goto $label$7 
	
.LABEL $label$38
	$9 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$37
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$14 }
	$8 = [22]
	goto $label$7 
	
.LABEL $label$36
	CALL eosio_assert(((int_32)*(($1 + [296])) == (int_32)$7), [10050])
	if ( $1 ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$35
	$4 = CALL db_find_i64(*($15), *($14), (int_64)4490217900845563904, $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$8 = [12]
	goto $label$7 
	
.LABEL $label$34
	$1 = CALL $18($7, $4)
	CALL eosio_assert(((int_32)*($1 + [296]) == (int_32)$7), [10050])
	$8 = [13]
	goto $label$7 
	
.LABEL $label$33
	CALL eosio_assert([1], [11049])
	CALL eosio_assert([1], [11019])
	$4 = CALL db_next_i64(*($1 + [300]), ($2 + [56]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$10 }
	$8 = [14]
	goto $label$7 
	
.LABEL $label$32
	CALL $18($7, $4)
	$8 = [15]
	goto $label$7 
	
.LABEL $label$31
	CALL $79($7, $1)
	$4 = *($16)
	if ( ($4 == 0) ){ goto $label$9 }
	$8 = [16]
	goto $label$7 
	
.LABEL $label$30
	*($16) = ($4 + [-1])
	$8 = [17]
	goto $label$7 
	
.LABEL $label$29
	$10 = ($10 + [8])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$19 }
	$8 = [18]
	goto $label$7 
	
.LABEL $label$28
	CALL $39($3, ($2 + [32]), *($0))
	$4 = *($2 + [8])
	if ( ($4 == 0) ){ goto $label$8 }
	$8 = [19]
	goto $label$7 
	
.LABEL $label$27
	*($2 + [12]) = $4
	CALL _ZdlPv($4)
	$8 = [20]
	goto $label$7 
	
.LABEL $label$26
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$25
	$8 = [3]
	goto $label$7 
	
.LABEL $label$24
	$8 = [1]
	goto $label$7 
	
.LABEL $label$23
	$8 = [1]
	goto $label$7 
	
.LABEL $label$22
	$8 = [2]
	goto $label$7 
	
.LABEL $label$21
	$8 = [5]
	goto $label$7 
	
.LABEL $label$20
	$8 = [18]
	goto $label$7 
	
.LABEL $label$19
	$8 = [8]
	goto $label$7 
	
.LABEL $label$18
	$8 = [11]
	goto $label$7 
	
.LABEL $label$17
	$8 = [9]
	goto $label$7 
	
.LABEL $label$16
	$8 = [11]
	goto $label$7 
	
.LABEL $label$15
	$8 = [21]
	goto $label$7 
	
.LABEL $label$14
	$8 = [11]
	goto $label$7 
	
.LABEL $label$13
	$8 = [17]
	goto $label$7 
	
.LABEL $label$12
	$8 = [17]
	goto $label$7 
	
.LABEL $label$11
	$8 = [13]
	goto $label$7 
	
.LABEL $label$10
	$8 = [15]
	goto $label$7 
	
.LABEL $label$9
	$8 = [17]
	goto $label$7 
	
.LABEL $label$8
	$8 = [20]
	goto $label$7 
	$8
}

void .FUNC $73 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$1 = ($global$0 - [64])
	$global$0 = $1
	CALL require_auth(*($0))
	*(($1 + [24])) = (int_64)0
	*(($1 + [16])) = (int_64)0
	*($1 + [8]) = (int_64)0
	$2 = ($0 + [192])
	$3 = *(($0 + [220]))
	if ( ((int_32)$3 == (int_32)*(($0 + [216]))) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$2), [10050])
	if ( $3 ){ goto $label$1 }
	$3 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$3 = CALL db_find_i64(*($2), *(($0 + [200])), (int_64)-3886244000360824832, (int_64)-3886244000360824832)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $38($2, $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$2), [10050])
	goto $label$1 
	
.LABEL $label$3
	$3 = ($1 + [8])
	
.LABEL $label$1
	*((($1 + [32]) + [16])) = *(($3 + [16]))
	*((($1 + [32]) + [8])) = *(($3 + [8]))
	*($1 + [32]) = *($3)
	*($1 + [16]) = [0]
	$4 = (int_64)0
	*($1 + [8]) = (int_64)0
	CALL current_time()
	$3 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)4490217900845563904, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$5 = (($1 + [8]) + [8])
	$6 = ($0 + [32])
	$3 = CALL $18($6, $3)
	$7 = *($3 + [79])
	if ( ((int_32)$7 != (int_32)[20]) ){ goto $label$6 }
	$8 = [3]
	goto $label$4 
	
.LABEL $label$6
	$8 = [0]
	goto $label$4 
	
.LABEL $label$5
	$8 = [17]
	
.LABEL $label$4
	
.LOOP $label$7:
	goto $label$49 
	
.LABEL $label$50
	$3 = CALL $18($6, $3)
	$7 = *($3 + [79])
	if ( ((int_32)$7 == (int_32)[20]) ){ goto $label$27 }
	$8 = [0]
	goto $label$7 
	
.LABEL $label$49
	if ( ((int_32)$7 != (int_32)[3]) ){ goto $label$26 }
	$8 = [3]
	goto $label$7 
	
.LABEL $label$48
	$7 = *($1 + [12])
	if ( ((int_32)$7 == (int_32)*($5)) ){ goto $label$21 }
	$8 = [4]
	goto $label$7 
	
.LABEL $label$47
	*($7) = *($3)
	*($1 + [12]) = ($7 + [8])
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((uint_64)$4 <= (uint_64)(int_64)100) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$46
	CALL $78(($1 + [8]), $3)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((uint_64)$4 > (uint_64)(int_64)100) ){ goto $label$25 }
	$8 = [1]
	goto $label$7 
	
.LABEL $label$45
	CALL eosio_assert([1], [11019])
	$3 = CALL db_next_i64(*($3 + [300]), ($1 + [56]))
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$22 }
	$8 = [5]
	goto $label$7 
	
.LABEL $label$44
	$10 = *($1 + [12])
	$9 = *($1 + [8])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$20 }
	$8 = [6]
	goto $label$7 
	
.LABEL $label$43
	$11 = ($0 + [60])
	$12 = ($0 + [56])
	$13 = ($0 + [40])
	$14 = ($0 + [32])
	$15 = ($1 + [48])
	$8 = [7]
	goto $label$7 
	
.LABEL $label$42
	$4 = *($9)
	$7 = *($11)
	$16 = *($12)
	if ( ((int_32)$16 == (int_32)$7) ){ goto $label$16 }
	$8 = [8]
	goto $label$7 
	
.LABEL $label$41
	$3 = ($7 + [-24])
	$5 = *($3)
	if ( ((int_64)*($5) == (int_64)$4) ){ goto $label$15 }
	$8 = [9]
	goto $label$7 
	
.LABEL $label$40
	$7 = $3
	if ( ((int_32)$16 != (int_32)$3) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$39
	if ( ((int_32)$16 == (int_32)$7) ){ goto $label$14 }
	$8 = [21]
	goto $label$7 
	
.LABEL $label$38
	CALL eosio_assert(((int_32)*(($5 + [296])) == (int_32)$6), [10050])
	if ( $5 ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$37
	$3 = CALL db_find_i64(*($14), *($13), (int_64)4490217900845563904, $4)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$13 }
	$8 = [11]
	goto $label$7 
	
.LABEL $label$36
	$5 = CALL $18($6, $3)
	CALL eosio_assert(((int_32)*($5 + [296]) == (int_32)$6), [10050])
	$8 = [12]
	goto $label$7 
	
.LABEL $label$35
	CALL eosio_assert([1], [11049])
	CALL eosio_assert([1], [11019])
	$3 = CALL db_next_i64(*($5 + [300]), ($1 + [56]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$10 }
	$8 = [13]
	goto $label$7 
	
.LABEL $label$34
	CALL $18($6, $3)
	$8 = [14]
	goto $label$7 
	
.LABEL $label$33
	CALL $79($6, $5)
	$3 = *($15)
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = [15]
	goto $label$7 
	
.LABEL $label$32
	*($15) = ($3 + [-1])
	$8 = [16]
	goto $label$7 
	
.LABEL $label$31
	$9 = ($9 + [8])
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$19 }
	$8 = [17]
	goto $label$7 
	
.LABEL $label$30
	CALL $39($2, ($1 + [32]), *($0))
	$3 = *($1 + [8])
	if ( ($3 == 0) ){ goto $label$8 }
	$8 = [18]
	goto $label$7 
	
.LABEL $label$29
	*($1 + [12]) = $3
	CALL _ZdlPv($3)
	$8 = [19]
	goto $label$7 
	
.LABEL $label$28
	$global$0 = ($1 + [64])
	return 
	
.LABEL $label$27
	$8 = [3]
	goto $label$7 
	
.LABEL $label$26
	$8 = [1]
	goto $label$7 
	
.LABEL $label$25
	$8 = [5]
	goto $label$7 
	
.LABEL $label$24
	$8 = [1]
	goto $label$7 
	
.LABEL $label$23
	$8 = [5]
	goto $label$7 
	
.LABEL $label$22
	$8 = [2]
	goto $label$7 
	
.LABEL $label$21
	$8 = [22]
	goto $label$7 
	
.LABEL $label$20
	$8 = [17]
	goto $label$7 
	
.LABEL $label$19
	$8 = [7]
	goto $label$7 
	
.LABEL $label$18
	$8 = [10]
	goto $label$7 
	
.LABEL $label$17
	$8 = [8]
	goto $label$7 
	
.LABEL $label$16
	$8 = [10]
	goto $label$7 
	
.LABEL $label$15
	$8 = [20]
	goto $label$7 
	
.LABEL $label$14
	$8 = [10]
	goto $label$7 
	
.LABEL $label$13
	$8 = [16]
	goto $label$7 
	
.LABEL $label$12
	$8 = [16]
	goto $label$7 
	
.LABEL $label$11
	$8 = [12]
	goto $label$7 
	
.LABEL $label$10
	$8 = [14]
	goto $label$7 
	
.LABEL $label$9
	$8 = [16]
	goto $label$7 
	
.LABEL $label$8
	$8 = [19]
	goto $label$7 
	$8
}

int_32 .FUNC $70 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [448])
	$global$0 = $3
	*(($4 = $3) + [392]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $153($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [312]) + [24])) = (int_64)0
	*(($4 + [344])) = (int_64)0
	*((($4 + [312]) + [56])) = (int_64)0
	*((($4 + [312]) + [64])) = (int_64)0
	*($4 + [320]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [328]) = (int_64)0
	*($4 + [352]) = (int_64)0
	*($4 + [360]) = (int_64)0
	*($4 + [384]) = [0]
	*($4 + [300]) = $2
	*($4 + [296]) = $2
	*($4 + [304]) = ($2 + $5)
	*($4 + [432]) = ($4 + [296])
	*($4 + [24]) = ($4 + [312])
	CALL $80(($4 + [24]), ($4 + [432]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [304])
	*($4 + [8]) = *($4 + [296])
	$3 = *($3)
	*((($4 + [400]) + [8])) = $3
	*(($6 = (($4 + [416]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [416]) = $7
	*($4 + [400]) = $7
	$3 = *($6)
	*((($4 + [432]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [416])
	*($4 + [40]) = $1
	*($4 + [432]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*((($4 + [24]) + [56])) = (int_64)0
	*((($4 + [24]) + [64])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $0
	*($4 + [436]) = ($4 + [392])
	*($4 + [432]) = ($4 + [24])
	CALL $81(($4 + [432]), ($4 + [312]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $156($2)
	
.LABEL $label$4
	CALL $76(($4 + [24]))
	if ( (*($4 + [372]) & [1]) ){ goto $label$11 }
	if ( (*($4 + [360]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*(($4 + [380])))
	if ( ((*($4 + [360]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($4 + [368])))
	$2 = [1]
	if ( ((*($4 + [340]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$2 = [1]
	if ( (*($4 + [340]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((*($4 + [328]) & $2) == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [348])))
	if ( ((*($4 + [328]) & $2) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [336])))
	
.LABEL $label$5
	$global$0 = ($4 + [448])
	return [1]
}

int_32 .FUNC $71 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [400])
	$global$0 = $3
	*(($4 = $3) + [344]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $153($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [328])) = (int_64)0
	*((($4 + [312]) + [24])) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [320]) = (int_64)0
	*($4 + [304]) = ($2 + $5)
	*($4 + [296]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [10124])
	CALL memcpy(($4 + [312]), $2, [8])
	*($4 + [300]) = ($2 + [8])
	CALL $82(($4 + [296]), (($4 + [312]) + [8]))
	CALL $82(($4 + [296]), ($4 + [332]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [304])
	*($4 + [8]) = *($4 + [296])
	$3 = *($3)
	*((($4 + [352]) + [8])) = $3
	*(($6 = (($4 + [368]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [368]) = $7
	*($4 + [352]) = $7
	$3 = *($6)
	*((($4 + [384]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [368])
	*($4 + [40]) = $1
	*($4 + [384]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $0
	*($4 + [388]) = ($4 + [344])
	*($4 + [384]) = ($4 + [24])
	CALL $83(($4 + [384]), ($4 + [312]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $156($2)
	
.LABEL $label$4
	CALL $76(($4 + [24]))
	if ( ((*($4 + [332]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [340])))
	
.LABEL $label$5
	if ( ((*($4 + [320]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [328])))
	
.LABEL $label$6
	$global$0 = ($4 + [400])
	return [1]
}

int_32 .FUNC $76 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [256]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [260])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [256]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [216]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [220])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [216]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [176]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [136]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [96]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	CALL $110(($0 + [56]))
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$0), [10050])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6185353789344579584, (int_64)-6185353789344579584)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $16($0, $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$0), [10050])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [10611])
	CALL $96($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $97($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $74 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $153($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = (int_64)0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $0
	*(($4 + [264])) = [0]
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $156($2)
	
.LABEL $label$5
	CALL $76($4)
	$global$0 = ($4 + [272])
	return [1]
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$0), [10050])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3886244000360824832, (int_64)-3886244000360824832)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $38($0, $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$0), [10050])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [10611])
	CALL $42($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $43($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $139($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$9 = ($global$0 - [192])
	$global$0 = $9
	*($9 + [136]) = [8659]
	*($9 + [140]) = CALL $150([8659])
	*($9) = *($9 + [136])
	CALL require_auth(*(CALL $12(($9 + [144]), $9)))
	$10 = *($3)
	CALL eosio_assert(((int_32)( *($3 + [4]) ? uint_32($10 >> [1]) : ($10 & [1]) ) == (int_32)[64]), [8323])
	CALL $4($3, ($9 + [96]), [32])
	$3 = *($4)
	CALL eosio_assert(((int_32)( *($4 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ) == (int_32)[64]), [8323])
	CALL $4($4, ($9 + [64]), [32])
	$11 = ($0 + [32])
	$12 = *($5)
	$3 = *(($0 + [60]))
	$13 = *(($0 + [56]))
	if ( ((int_32)$13 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$4:
	$4 = ($3 + [-24])
	$10 = *($4)
	if ( ((int_64)*($10) == (int_64)$12) ){ goto $label$3 }
	$3 = $4
	if ( ((int_32)$13 != (int_32)$4) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$13 == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($10 + [296])) == (int_32)$11), [10050])
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	$4 = CALL db_find_i64(*($11), *(($0 + [40])), (int_64)4490217900845563904, $12)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $18($11, $4)
	CALL eosio_assert(((int_32)*($10 + [296]) == (int_32)$11), [10050])
	
.LABEL $label$1
	CALL eosio_assert(($10 == 0), [8672])
	*(($9 + [24])) = (int_64)0
	*(($9 + [16])) = (int_64)0
	*($9 + [8]) = (int_64)0
	$3 = ($0 + [192])
	$4 = *(($0 + [220]))
	if ( ((int_32)$4 == (int_32)*(($0 + [216]))) ){ goto $label$6 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$3), [10050])
	if ( $4 ){ goto $label$5 }
	$4 = ($9 + [8])
	goto $label$5 
	
.LABEL $label$6
	$4 = CALL db_find_i64(*($3), *(($0 + [200])), (int_64)-3886244000360824832, (int_64)-3886244000360824832)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $38($3, $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$3), [10050])
	goto $label$5 
	
.LABEL $label$7
	$4 = ($9 + [8])
	
.LABEL $label$5
	*(($10 = (($9 + [40]) + [16]))) = *(($4 + [16]))
	*((($9 + [40]) + [8])) = *(($4 + [8]))
	*($9 + [40]) = *($4)
	*($10) = (*($10) + [1])
	CALL $39($3, ($9 + [40]), *($0))
	$12 = *($0)
	*($9 + [12]) = $1
	*($9 + [8]) = $5
	*($9 + [16]) = $2
	*($9 + [28]) = $6
	*($9 + [32]) = $7
	*($9 + [36]) = $8
	*($9 + [20]) = ($9 + [96])
	*($9 + [24]) = ($9 + [64])
	*($9 + [184]) = $12
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$7()), [10802])
	*($9 + [160]) = $11
	*($9 + [164]) = ($9 + [8])
	*($9 + [168]) = ($9 + [184])
	*(($4 = CALL _Znwj([320])) + [96]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [256 align=4]) = (int_64)0
	*($4 + [264 align=4]) = (int_64)0
	*($4 + [272 align=4]) = (int_64)0
	*($4 + [280 align=4]) = (int_64)0
	*($4 + [288]) = [0]
	*($4 + [296]) = $11
	CALL $40(($9 + [160]), $4)
	*($9 + [176]) = $4
	$12 = *($4)
	*($9 + [160]) = $12
	$10 = *($4 + [300])
	*($9 + [156]) = $10
	$13 = ($0 + [60])
	$3 = *($13)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [64]))) ){ goto $label$10 }
	*($3 + [8]) = $12
	*($3 + [16]) = $10
	*($9 + [176]) = [0]
	*($3) = $4
	*($13) = ($3 + [24])
	$4 = *($9 + [176])
	*($9 + [176]) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $41(($0 + [56]), ($9 + [176]), ($9 + [160]), ($9 + [156]))
	$4 = *($9 + [176])
	*($9 + [176]) = [0]
	if ( $4 ){ goto $label$8 }
	
.LABEL $label$9
	$global$0 = ($9 + [192])
	return 
	
.LABEL $label$8
	if ( (*($4 + [280]) & [1]) ){ goto $label$15 }
	if ( (*($4 + [268]) & [1]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*(($4 + [288])))
	if ( ((*($4 + [268]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($4 + [276])))
	if ( (*($4 + [256]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((*($4 + [256]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($4 + [264])))
	
.LABEL $label$11
	CALL _ZdlPv($4)
	$global$0 = ($9 + [192])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $139($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [296])) == (int_32)$0), [11083])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [11128])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11178])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [280]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [288])))
	if ( ((*($3 + [268]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($3 + [268]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [276])))
	if ( (*($3 + [256]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($3 + [256]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [264])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$15:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$16 }
	if ( ((*($5 + [280]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($5 + [288])))
	if ( ((*($5 + [268]) & [1]) == 0) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((*($5 + [268]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($5 + [276])))
	if ( (*($5 + [256]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	if ( ((*($5 + [256]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($5 + [264])))
	
.LABEL $label$17
	CALL _ZdlPv($5)
	
.LABEL $label$16
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$15 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [300])))
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$5 = ($global$0 - [96])
	$global$0 = $5
	$7 = *($4)
	$6 = CALL $150([8597])
	if ( ((int_32)$6 != (int_32)( *($4 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$1 }
	$8 = [0]
	if ( CALL $135($4, [0], [-1], [8597], $6) ){ goto $label$1 }
	CALL require_auth(*($1))
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$9 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$9 = $10
	$8 = [1]
	$6 = $7
	$7 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$9 = $10
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $6 ){ goto $label$6 }
	$8 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$8 = [0]
	
.LABEL $label$2
	CALL eosio_assert($8, [8603])
	$9 = *($1)
	if ( ((int_64)$9 == (int_64)0) ){ goto $label$10 }
	$6 = [0]
	$11 = *([0] + [10856])
	
.LOOP $label$12:
	*((($5 + [80]) + ($7 = $6))) = *(($11 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$9 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$7 == (int_32)[12]) )))))
	$6 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[11]) ){ goto $label$11 }
	$9 = ((int_64)$9 << (int_64)5)
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$12 }
	
.LABEL $label$11
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$9 }
	*($5 + [16]) = ($6 << [1])
	$11 = (($5 + [16]) | [1])
	goto $label$8 
	
.LABEL $label$10
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	*($5 + [16]) = [0]
	$7 = (($5 + [16]) | [1])
	goto $label$7 
	
.LABEL $label$9
	$8 = (($6 + [16]) & [-16])
	$11 = CALL _Znwj($8)
	*($5 + [16]) = ($8 | [1])
	*($5 + [24]) = $11
	*($5 + [20]) = $6
	
.LABEL $label$8
	$8 = ($7 + [1])
	$7 = [0]
	
.LOOP $label$13:
	*(($11 + $7)) = *((($5 + [80]) + $7))
	$7 = ($7 + [1])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$13 }
	$7 = ($11 + $6)
	
.LABEL $label$7
	$6 = [0]
	*($7) = [0]
	$7 = CALL $132(($5 + [16]), [0], [8631])
	$11 = ($7 + [8])
	*((($5 + [32]) + [8])) = *($11)
	*($5 + [32]) = *($7)
	*($7) = (int_64)0
	*($11) = [0]
	$7 = CALL $128(($5 + [32]), [8654])
	$11 = ($7 + [8])
	*((($5 + [48]) + [8])) = *($11)
	*($5 + [48]) = *($7)
	*($7) = (int_64)0
	*($11) = [0]
	$9 = *($2)
	if ( ((int_64)$9 == (int_64)0) ){ goto $label$17 }
	$11 = *([0] + [10856])
	
.LOOP $label$19:
	*((($5 + [80]) + ($7 = $6))) = *(($11 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$9 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$7 == (int_32)[12]) )))))
	$6 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[11]) ){ goto $label$18 }
	$9 = ((int_64)$9 << (int_64)5)
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$19 }
	
.LABEL $label$18
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$16 }
	*($5) = ($6 << [1])
	$11 = ($5 | [1])
	goto $label$15 
	
.LABEL $label$17
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	*($5) = [0]
	$7 = ($5 | [1])
	$6 = $7
	goto $label$14 
	
.LABEL $label$16
	$8 = (($6 + [16]) & [-16])
	$11 = CALL _Znwj($8)
	*($5) = ($8 | [1])
	*($5 + [8]) = $11
	*($5 + [4]) = $6
	
.LABEL $label$15
	$8 = ($7 + [1])
	$7 = [0]
	
.LOOP $label$20:
	*(($11 + $7)) = *((($5 + [80]) + $7))
	$7 = ($7 + [1])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$20 }
	$6 = ($11 + $6)
	$7 = ($5 | [1])
	
.LABEL $label$14
	*($6) = [0]
	$6 = *($5)
	$11 = ($6 & [1])
	$7 = CALL $130(($5 + [48]), ( *($5 + [8]) ? $7 : $11 ), ( *($5 + [4]) ? uint_32($6 >> [1]) : $11 ))
	$6 = ($7 + [8])
	*((($5 + [64]) + [8])) = *($6)
	*($5 + [64]) = *($7)
	*($7) = (int_64)0
	*($6) = [0]
	$7 = *($4)
	$11 = ($7 & [1])
	$6 = ($4 + [1])
	$7 = CALL $130(($5 + [64]), ( *($4 + [8]) ? $6 : $11 ), ( *(($4 + [4])) ? uint_32($7 >> [1]) : $11 ))
	$11 = ($7 + [8])
	*((($5 + [80]) + [8])) = *($11)
	*($5 + [80]) = *($7)
	*($7) = (int_64)0
	*($11) = [0]
	if ( (*($5 + [64]) & [1]) ){ goto $label$29 }
	if ( (*($5) & [1]) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	CALL _ZdlPv(*($5 + [72]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$27 }
	
.LABEL $label$28
	CALL _ZdlPv(*(($5 + [8])))
	$7 = [1]
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$7 = [1]
	if ( (*($5 + [48]) & [1]) ){ goto $label$25 }
	
.LABEL $label$26
	if ( (*($5 + [32]) & $7) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL _ZdlPv(*($5 + [56]))
	if ( ((*($5 + [32]) & $7) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*($5 + [40]))
	$7 = [1]
	if ( (*($5 + [16]) & [1]) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$7 = [1]
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*($5 + [24]))
	
.LABEL $label$21
	CALL eosio_assert(((int_64)*($3) > (int_64)999999), ( *($5 + [88]) ? (($5 + [80]) | $7) : (*($5 + [80]) & $7) ))
	*($5 + [64]) = (CASTING int_64)(int_32 CALL $147(( *(($4 + [8])) ? $6 : (*($4) & $7) )))
	*($5 + [48]) = *($3)
	CALL $33($0, $1, ($5 + [48]), ($5 + [64]))
	if ( ((*($5 + [80]) & $7) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*((($5 + [80]) + [8])))
	
.LABEL $label$1
	$global$0 = ($5 + [96])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [96])
	$global$0 = $4
	$5 = ($0 + [72])
	$6 = *($1)
	$8 = *(($0 + [100]))
	$7 = *(($0 + [96]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$4:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$6) ){ goto $label$3 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$5), [10050])
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	$9 = CALL db_find_i64(*($5), *(($0 + [80])), (int_64)-3886244364896174080, $6)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $34($5, $9)
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$5), [10050])
	
.LABEL $label$1
	CALL eosio_assert(($10 == 0), [9135])
	$11 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$7()), [10802])
	*(($9 = CALL _Znwj([80])) + [64]) = $5
	*($9 + [16]) = (int_64)0
	$6 = *($1)
	*($9) = $6
	*($9 + [8]) = $6
	*($9 + [40]) = *($2)
	*($9 + [24]) = CALL current_time()
	*($9 + [32]) = *($3)
	*($4 + [88]) = (($4 + [16]) + [64])
	*($4 + [84]) = ($4 + [16])
	*($4 + [80]) = ($4 + [16])
	CALL $35(($4 + [80]), $9)
	$6 = *($9)
	$10 = CALL db_store_i64(*(($0 + [80])), (int_64)-3886244364896174080, $11, $6, ($4 + [16]), [64])
	*($9 + [68]) = $10
	$8 = ($0 + [88])
	if ( (uint_64)($6 <= *($8)) ){ goto $label$5 }
	*($8) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($4 + [80]) = $9
	$6 = *($9)
	*($4 + [16]) = $6
	*($4 + [12]) = $10
	$7 = ($0 + [100])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [104]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $10
	*($4 + [80]) = [0]
	*($8) = $9
	*($7) = ($8 + [24])
	$9 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( $9 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $36(($0 + [96]), ($4 + [80]), ($4 + [16]), ($4 + [12]))
	$9 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( ($9 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($9)
	
.LABEL $label$6
	$global$0 = ($4 + [96])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [10646])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10692])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [40]))) = *(($3 + [40]))
	*(($6 = ($1 + [32]))) = *(($3 + [32]))
	*(($7 = ($1 + [24]))) = *(($3 + [24]))
	*(($8 = ($1 + [16]))) = *(($3 + [16]))
	*(($9 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [10743])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	*($4 + [76]) = $9
	*($4 + [72]) = $1
	*($4 + [80]) = $8
	*($4 + [84]) = $7
	*($4 + [88]) = $6
	*($4 + [92]) = $5
	CALL $106(($4 + [72]), ($4 + [64]))
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)3904809877311766528) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)3904809877311766529
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$7()), [10802])
	*(($5 = CALL _Znwj([64])) + [40]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = $1
	$3 = *($3)
	*($5) = *($3)
	*(($6 = ($5 + [8]))) = *(($3 + [8]))
	*(($7 = ($5 + [16]))) = *(($3 + [16]))
	*(($8 = ($5 + [24]))) = *(($3 + [24]))
	*($5 + [32]) = *(($3 + [32]))
	*($5 + [40]) = *(($3 + [40]))
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	*($4 + [76]) = $6
	*($4 + [72]) = $5
	*($4 + [80]) = $7
	*($4 + [84]) = $8
	*($4 + [88]) = ($5 + [32])
	*($4 + [92]) = ($5 + [40])
	CALL $106(($4 + [72]), ($4 + [64]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)3904809877311766528, $2, (int_64)3904809877311766528, $4, [48])
	*($5 + [52]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)3904809877311766528) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)3904809877311766529
	
.LABEL $label$1
	*($4 + [72]) = $5
	*($4) = (int_64)3904809877311766528
	*($4 + [48]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)3904809877311766528
	*($3 + [16]) = $6
	*($4 + [72]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $105(($1 + [24]), ($4 + [72]), $4, ($4 + [48]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [96])
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $127($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}