(data (i32.const 8192) "Invalid hex character\00Assertion failed: %s (%s: %s: %d)\n\00-+   0X0x\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8268) "0123456789abcdef\00(null)\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8378) "invalid sha256\00")
(data (i32.const 8400) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\ff\ff\ff\ff\ff\ff\ff\t\n\0b\0c\0d\0e\0f\10\ff\11\12\13\14\15\ff\16\17\18\19\1a\1b\1c\1d\1e\1f \ff\ff\ff\ff\ff\ff!\"#$%&\'()*+\ff,-./0123456789\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 8656) "carry == 0\00nan\00")
(data (i32.const 8671) "utils.hpp\00NAN\00")
(data (i32.const 8685) "DecodeBase58\00")
(data (i32.const 8698) "No delimiter in signature\00.\00")
(data (i32.const 8726) "SIG\00")
(data (i32.const 8730) "Signature Key has invalid prefix\00")
(data (i32.const 8763) "No curve in signature\00")
(data (i32.const 8785) "K1\00")
(data (i32.const 8788) "R1\00")
(data (i32.const 8791) "Incorrect curve\00%llu\00")
(data (i32.const 8812) "Signature has no data\00")
(data (i32.const 8834) "Decode signature failed\00")
(data (i32.const 8858) "Invalid signature\00")
(data (i32.const 8876) "Signature checksum mismatch\00")
(data (i32.const 8904) "EOS\00")
(data (i32.const 8908) "Decode public key failed\00")
(data (i32.const 8933) "Invalid public key\00")
(data (i32.const 8952) "Public key checksum mismatch\00")
(data (i32.const 8981) "-\00")
(data (i32.const 8983) "BigUnsigned::divideWithRemainder: Cannot write quotient and remainder into the same variable\00: no conversion\00")
(data (i32.const 9092) "BigUnsigned::operator %: division by zero\00")
(data (i32.const 9134) "BigUnsignedInABase::BigUnsignedInABase(const Digit *, Index, Base): A digit is too large for the specified base\00")
(data (i32.const 9246) "BigUnsignedInABase(std::string, Base): The default string conversion routines use the symbol set 0-9, A-Z and therefore support only up to base 36.  You tried a conversion with a base over 36; write your own string conversion routine.\00")
(data (i32.const 9481) "\n\nBigUnsignedInABase ctor, stringLen: \00")
(data (i32.const 9520) "symbolNumInString: \00")
(data (i32.const 9540) ", theSymbol:\00")
(data (i32.const 9553) "\n\n\00")
(data (i32.const 9556) "BigUnsignedInABase(std::string, Base): Bad symbol in input.  Only 0-9, A-Z, a-z are accepted.\00")
(data (i32.const 9650) "end_time error\00")
(data (i32.const 9665) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9716) "error reading iterator\00")
(data (i32.const 9739) "read\00")
(data (i32.const 9744) "get\00")
(data (i32.const 9748) "unexpected error in fixed_bytes constructor\00")
(data (i32.const 9792) "cannot create objects in table of another contract\00")
(data (i32.const 9843) "write\00")
(data (i32.const 9849) "cannot pass end iterator to modify\00")
(data (i32.const 9884) "object passed to modify is not in multi_index\00")
(data (i32.const 9930) "cannot modify objects in table of another contract\00")
(data (i32.const 9981) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10040) "cannot increment end iterator\00")
(data (i32.const 10070) "cannot pass end iterator to erase\00")
(data (i32.const 10104) "object passed to erase is not in multi_index\00")
(data (i32.const 10149) "cannot erase objects in table of another contract\00")
(data (i32.const 10199) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10252) "Bet should be in a \'clean\' state.\00")
(data (i32.const 10286) "Modulo should be within range.\00")
(data (i32.const 10317) "Mask should be within range.\00")
(data (i32.const 10346) "SIG_K1_\00")
(data (i32.const 10354) "High modulo range, bet_mask larger than modulo.\00")
(data (i32.const 10402) "Win probability out of range.\00")
(data (i32.const 10432) "Bet doesn\'t even cover house edge.\00")
(data (i32.const 10467) "Invalid token transfer\00")
(data (i32.const 10490) "Token not support.\00")
(data (i32.const 10509) "Amount should be within range.\00")
(data (i32.const 10540) "maxProfit limit violation.\00")
(data (i32.const 10567) "Settle account balance not enough.\00")
(data (i32.const 10602) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 10661) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 10710) "invalid symbol name\00")
(data (i32.const 10730) "config not set.\00")
(data (i32.const 10746) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10798) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10852) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10900) "Bet should be in an \'active\' state\00")
(data (i32.const 10935) "Bet win from ggs.one!\00")
(data (i32.const 10957) "min and max token\'s symbol must same.\00")
(data (i32.const 10995) "maxprofit and max token\'s symbol must same.\00")
(data (i32.const 11039) "min amount must lower or equal max amount.\00")
(data (i32.const 11082) "maxprofit amount not valid.\00")
(data (i32.const 11110) "bet:\00")
(data (i32.const 11115) "BigUnsigned constructor: Cannot construct a BigUnsigned from a negative number\00")
(data (i32.const 11194) "BigUnsigned::to<Primitive>: Value is too big to fit in the requested type\00")
(data (i32.const 11268) "2000000000100000000008000000000400000000020000000001\00")
(data (i32.const 11321) "1041041041041041041041041041041041041041041041041041041041041\00")
(data (i32.const 11383) "3F\00")
(data (i32.const 11386) "EOS62M5kVouCEU31xP736Txb4pe82FoncprqevPuagE6boCLxwsC8\00")
(data (i32.const 11440) "ta\00")
(data (i32.const 11443) "dfa\00")
(data (i32.const 11447) "secretsigner\00")
(data (i32.const 11460) "string is too long to be a valid name\00")
(data (i32.const 11498) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 11565) "character is not in allowed character set for names\00")
(data (i32.const 20060) "stoul\00-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 20085) "stoull\00INF\00")
(data (i32.const 20096) ": out of range\00")
(data (i32.const 20112) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 20208) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 22016) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 22032) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 22048) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 22064) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 22144) "\05\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\10\00\00\00\88-\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 22288) "\80V\00\00")
(data (i32.const 22304) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 22768) "0123456789ABCDEF")
(data (i32.const 22784) "inf\00")
(data (i32.const 22800) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "ripemd160" (func $fimport$4 (param i32 i32 i32)))
(import "env" "prints_l" (func $fimport$5 (param i32 i32)))
(import "env" "prints" (func $fimport$6 (param i32)))
(import "env" "printui" (func $fimport$7 (param i64)))
(import "env" "printi" (func $fimport$8 (param i64)))
(import "env" "action_data_size" (func $fimport$9 (result i32)))
(import "env" "read_action_data" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$11 (param i64)))
(import "env" "current_time" (func $fimport$12 (result i64)))
(import "env" "db_lowerbound_i64" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "__ashlti3" (func $fimport$15 (param i32 i64 i64 i32)))
(import "env" "assert_recover_key" (func $fimport$16 (param i32 i32 i32 i32 i32)))
(import "env" "sha256" (func $fimport$17 (param i32 i32 i32)))
(import "env" "__floatunsitf" (func $fimport$18 (param i32 i32)))
(import "env" "__fixunstfdi" (func $fimport$19 (param i64 i64) (result i64)))
(import "env" "db_find_i64" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "send_inline" (func $fimport$21 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$22 (result i64)))
(import "env" "db_get_i64" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$24 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$25 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$26 (param i32)))
(import "env" "db_idx256_find_primary" (func $fimport$27 (param i64 i64 i64 i32 i32 i64) (result i32)))
(import "env" "db_idx256_remove" (func $fimport$28 (param i32)))
(import "env" "db_idx64_find_primary" (func $fimport$29 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$30 (param i32)))
(import "env" "db_idx256_lowerbound" (func $fimport$31 (param i64 i64 i64 i32 i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$32 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$33 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$34 (param i64 i64 i64) (result i32)))
(import "env" "db_idx256_store" (func $fimport$35 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$36 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx256_update" (func $fimport$37 (param i32 i64 i32 i32)))
(import "env" "db_idx64_update" (func $fimport$38 (param i32 i64 i32)))
(import "env" "db_idx64_next" (func $fimport$39 (param i32 i32) (result i32)))
(import "env" "db_idx64_upperbound" (func $fimport$40 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$41))
(import "env" "__trunctfdf2" (func $fimport$42 (param i64 i64) (result f64)))
(import "env" "__extenddftf2" (func $fimport$43 (param i32 f64)))
(import "env" "__unordtf2" (func $fimport$44 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$46 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$47 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$48 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$49 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$50 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$51 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$52 (param i32 i32)))
(import "env" "__extendsftf2" (func $fimport$53 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$54 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$55 (param i64 i64 i64 i64) (result i32)))
(import "env" "__getf2" (func $fimport$56 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$57 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$58 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$59 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $14))
(export "_Znwj" (func $114))
(export "_ZdlPv" (func $116))
(export "_ZdaPv" (func $117))
(export "_Znaj" (func $115))
(export "_ZnwjSt11align_val_t" (func $118))
(export "_ZnajSt11align_val_t" (func $119))
(export "_ZdlPvSt11align_val_t" (func $120))
(export "_ZdaPvSt11align_val_t" (func $121))
(table $0 17 17 anyfunc)
(elem (i32.const 1) $15 $17 $19 $21 $23 $25 $27 $28 $29 $31 $33 $165 $167 $169 $170 $171)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 23057))
(global $global$2 i32 (i32.const 23057))


int_32 .FUNC $174 (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [128])
	$global$0 = $3
	*(($3 + [120])) = [0]
	*($3 + [112]) = (int_64)0
	$4 = CALL $191([8904])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($3 + [112]) = ($4 << [1])
	$5 = (($3 + [112]) | [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [112]) = ($6 | [1])
	*($3 + [120]) = $5
	*($3 + [116]) = $4
	
.LABEL $label$4
	CALL memcpy($5, [8904], $4)
	
.LABEL $label$3
	*(($5 + $4)) = [0]
	$4 = *($3 + [112])
	$5 = CALL $124(($3 + [96]), $1, ( *($3 + [116]) ? uint_32($4 >> [1]) : ($4 & [1]) ), [-1], $1)
	*($3 + [88]) = [0]
	*($3 + [80]) = (int_64)0
	CALL eosio_assert(CALL $2(( *($5 + [8]) ? ($5 + [1]) : (*($3 + [96]) & [1]) ), ($3 + [80])), [8908])
	CALL eosio_assert(((int_32)(*($3 + [84]) - *($3 + [80])) == (int_32)[37]), [8933])
	if ( (*($2) == 0) ){ goto $label$6 }
	CALL memmove(($3 + [40]), *($3 + [80]), [33])
	CALL ripemd160(($3 + [40]), [33], $3)
	CALL eosio_assert((CALL $189($3, (*($3 + [84]) + [-4]), [4]) == 0), [8952])
	
.LABEL $label$6
	*($0) = [0]
	$4 = *($3 + [80])
	*($0 + [1 align=1]) = *($4)
	*($0 + [9 align=1]) = *($4 + [8 align=1])
	*($0 + [13 align=1]) = *($4 + [12 align=1])
	*($0 + [21 align=1]) = *($4 + [20 align=1])
	*($0 + [29 align=1]) = *($4 + [28 align=1])
	*($0 + [33]) = *($4 + [32])
	if ( ($4 == 0) ){ goto $label$7 }
	*($3 + [84]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( (*($3 + [96]) & [1]) ){ goto $label$9 }
	if ( (*($3 + [112]) & [1]) ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	CALL _ZdlPv(*(($5 + [8])))
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$8
	CALL _ZdlPv(*($3 + [120]))
	$global$0 = ($3 + [128])
	return (unreachable)
	
.LABEL $label$2
	CALL $122(($3 + [112]))
	
.LABEL $label$1
	$global$0 = ($3 + [128])
}

int_32 .FUNC $176 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL $157($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

void .FUNC $177 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$6 = ($5) & [32767]
	if ( ((int_32)$6) == (int_32)[32767]) ){ goto $label$1 }
	if ( $6 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($4, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL $177(($4 + [16]), *($4), *(($4 + [8])), $3)
	$5 = (*($3) + [-120])
	$2 = *($4 + [24])
	$1 = *($4 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($5 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($5 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	*($3) = $5
	
.LABEL $label$1
	*($0) = $1
	*($0 + [8]) = $2
	$global$0 = ($4 + [32])
}

int_32 .FUNC $170 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($0 + [28])
	CALL prints_l($3, (*($0 + [20]) - $3))
	CALL prints_l($1, $2)
	return ((*($0 + [20]) + $2) - *($0 + [28]))
}

int_64 .FUNC $171 (int_32 $0, int_64 $1, int_32 $2)
{
	return (int_64)-1
}

int_32 .FUNC $172 (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	CALL eosio_assert(($2 <= [37]), [9246])
	*($0 + [12]) = $2
	$3 = *($1)
	$4 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	*($0 + [4]) = $4
	if ( ((uint_32)*($0) >= (uint_32)$4) ){ goto $label$1 }
	$3 = ($0 + [8])
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$2 }
	CALL _ZdaPv($5)
	
.LABEL $label$2
	*($0) = $4
	$5 = ($4 + $4)
	*($3) = CALL _Znaj(( [-1] ? $5 : ($5 <= $4) ))
	$4 = *(($0 + [4]))
	
.LABEL $label$1
	if ( ($4 == 0) ){ goto $label$3 }
	$6 = ($1 + [1])
	$7 = ($1 + [8])
	$8 = ($0 + [4])
	$3 = [-1]
	$5 = [0]
	$9 = [0]
	
.LOOP $label$4:
	$10 = *(((( *($7) ? $6 : (*($1) & [1]) ) + $4) + $3))
	if ( ((uint_32)(($10 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$6 }
	$10 = (int_32(($10 << [24]) >> [24]) + [-48])
	*((*(($0 + [8])) + $5)) = $10
	goto $label$5 
	
.LABEL $label$6
	if ( ((uint_32)(($10 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$10 = (int_32(($10 << [24]) >> [24]) + [-55])
	*((*(($0 + [8])) + $5)) = $10
	goto $label$5 
	
.LABEL $label$7
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$10 = (int_32(($10 << [24]) >> [24]) + [-87])
	*((*(($0 + [8])) + $5)) = $10
	goto $label$5 
	
.LABEL $label$8
	CALL prints([9481])
	CALL printui(*($8))
	CALL prints([9520])
	CALL printui((CASTING uint_64)(uint_32 ($4 + $3)))
	CALL prints([9540])
	CALL printi((int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	CALL prints([9553])
	CALL eosio_assert([0], [9556])
	$10 = *((*(($0 + [8])) + $5))
	
.LABEL $label$5
	CALL eosio_assert((($10 & [65535]) <= $2), [9134])
	$3 = ($3 + [-1])
	$5 = ($5 + [2])
	$4 = *($8)
	$9 = ($9 + [1])
	if ( ($9 <= $4) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$3 }
	$3 = ((*(($0 + [8])) + ($4 << [1])) + [-2])
	$5 = ($4 + [-1])
	$10 = ($0 + [4])
	
.LOOP $label$9:
	if ( *($3) ){ goto $label$3 }
	*($10) = $5
	$3 = ($3 + [-2])
	$5 = ($5 + [-1])
	if ( ((int_32)$5 != (int_32)[-1]) ){ goto $label$9 }
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $178 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$global$0 = $3
	*($3 + [284]) = $2
	*(($3 + [272])) = (int_64)0
	*(($3 + [264])) = (int_64)0
	*(($3 + [256])) = (int_64)0
	*($3 + [248]) = (int_64)0
	*($3 + [240]) = (int_64)0
	*($3 + [280]) = *($3 + [284])
	$4 = [0]
	$2 = [-1]
	if ( ((int_32)CALL $179([0], $1, ($3 + [280]), ($3 + [80]), ($3 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $158($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) <= (int_32)[0]) ){ goto $label$6 }
	$5 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	*($0) = ($2 & [-33])
	$5 = ($2 & [32])
	if ( *($0 + [48]) ){ goto $label$4 }
	
.LABEL $label$5
	*(($6 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($3 + [80])
	*($0 + [28]) = $3
	*($0 + [20]) = $3
	$7 = *($0 + [44])
	*($0 + [44]) = $3
	$2 = CALL $179($0, $1, ($3 + [280]), ($3 + [80]), ($3 + [240]))
	if ( ($7 == 0) ){ goto $label$3 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $7
	*($6) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$7 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $7 )
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $179($0, $1, ($3 + [280]), ($3 + [80]), ($3 + [240]))
	
.LABEL $label$3
	$1 = *($0)
	*($0) = ($1 | $5)
	$1 = ($1 & [32])
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $159($0)
	
.LABEL $label$7
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	$global$0 = ($3 + [288])
	return $2
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $143($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [176])
	$global$0 = $3
	$4 = [0]
	$5 = CALL $132($1, [95], [0])
	CALL eosio_assert(((int_32)$5 != (int_32)[-1]), [8698])
	$6 = CALL $124(($3 + [160]), $1, [0], $5, $1)
	$8 = *($3 + [160])
	$7 = CALL $191([8726])
	if ( ((int_32)$7 != (int_32)( *($6 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$1 }
	$4 = (CALL $133($6, [0], [-1], [8726], $7) == 0)
	
.LABEL $label$1
	CALL eosio_assert($4, [8730])
	$4 = ($5 + [1])
	$8 = CALL $132($1, [95], $4)
	CALL eosio_assert(((int_32)$8 != (int_32)[-1]), [8763])
	$4 = CALL $124(($3 + [144]), $1, $4, ($8 + ((int_32)$5 ^ (int_32)[-1])), $1)
	$5 = *($3 + [144])
	$7 = CALL $191([8785])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$4 }
	if ( (CALL $133($4, [0], [-1], [8785], $7) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = [0]
	$7 = *($3 + [144])
	$9 = CALL $191([8788])
	if ( ((int_32)$9 != (int_32)( *(($4 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$2 }
	$5 = (CALL $133($4, [0], [-1], [8788], $9) == 0)
	goto $label$2 
	
.LABEL $label$3
	$5 = [1]
	
.LABEL $label$2
	CALL eosio_assert($5, [8791])
	$5 = [0]
	$7 = *($3 + [144])
	$9 = CALL $191([8785])
	if ( ((int_32)$9 != (int_32)( *(($4 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$5 }
	$5 = (CALL $133($4, [0], [-1], [8785], $9) == 0)
	
.LABEL $label$5
	$1 = *($3 + [128])
	$8 = CALL $124(($3 + [128]), $1, ($8 + [1]), [-1], $1)
	CALL eosio_assert(((int_32)( *($8 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) ) != (int_32)[0]), [8812])
	*($3 + [120]) = [0]
	*($3 + [112]) = (int_64)0
	CALL eosio_assert(CALL $2(( *($8 + [8]) ? ($8 + [1]) : (*($3 + [128]) & [1]) ), ($3 + [112])), [8834])
	CALL eosio_assert(((int_32)(*($3 + [116]) - *($3 + [112])) == (int_32)[69]), [8858])
	if ( (*($2) == 0) ){ goto $label$6 }
	CALL memmove(($3 + [40]), *($3 + [112]), [65])
	*($3 + [106]) = [49]
	*($3 + [105]) = ( [75] ? [82] : $5 )
	CALL ripemd160(($3 + [40]), [67], $3)
	CALL eosio_assert((CALL $189($3, (*($3 + [116]) + [-4]), [4]) == 0), [8876])
	
.LABEL $label$6
	*($0) = ((int_32)$5 ^ (int_32)[1])
	$0 = ($0 + [1])
	$1 = [0]
	$5 = *($3 + [112])
	
.LOOP $label$7:
	*(($0 + $1)) = *(($5 + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[65]) ){ goto $label$7 }
	*($3 + [116]) = $5
	CALL _ZdlPv($5)
	if ( (*($3 + [128]) & [1]) ){ goto $label$12 }
	if ( (*($3 + [144]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*(($8 + [8])))
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3 + [160]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( (*($3 + [160]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	$global$0 = ($3 + [176])
	return 
	
.LABEL $label$8
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($3 + [176])
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $3 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *($0)
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$5 }
	*($0 + [4]) = $4
	CALL _ZdlPv($4)
	$3 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = [2147483647]
	if ( ((uint_32)$3 > (uint_32)[1073741822]) ){ goto $label$6 }
	$4 = ($3 << [1])
	$5 = ( $1 ? $4 : ($4 <= $1) )
	
.LABEL $label$6
	$4 = CALL _Znwj($5)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $5)
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($4) = *($2)
	$4 = (*($0) + [1])
	*($0) = $4
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$3 = (*($0 + [4]) - $4)
	$5 = ( $3 ? $1 : ($3 <= $1) )
	if ( ($5 == 0) ){ goto $label$8 }
	CALL memset($4, *($2), $5)
	
.LABEL $label$8
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$1 = ($3 - $1)
	$4 = ($0 + [4])
	$0 = *($4)
	
.LOOP $label$9:
	*($0) = *($2)
	$0 = (*($4) + [1])
	*($4) = $0
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = (*($0) + $1)
	return (unreachable)
	
.LABEL $label$1
	CALL $143($0)
}

int_32 .FUNC $189 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $188 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $49 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	$7 = ($global$0 - [128])
	$global$0 = $7
	*((($7 + [8]) + [24])) = *(($4 + [8]))
	*($7 + [16]) = $3
	*($7 + [8]) = $2
	*($7 + [24]) = *($4)
	$5 = CALL $123(($7 + [40]), $5)
	*($7 + [56]) = $1
	*($7 + [52]) = $6
	*($7 + [64]) = (int_64)-3617168760277827584
	*(($4 = CALL _Znwj([16]))) = $1
	*($4 + [8]) = (int_64)3617214756542218240
	*((($7 + [56]) + [36])) = [0]
	$6 = ($4 + [16])
	*((($7 + [56]) + [24])) = $6
	*(($7 + [76])) = $6
	*($7 + [72]) = $4
	*($7 + [84 align=4]) = (int_64)0
	$4 = *($5)
	$6 = ( *((($7 + [8]) + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [34])
	$1 = (CASTING uint_64)(uint_32 $6)
	$6 = ($7 + [84])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$1 }
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $70($6, $4)
	$6 = *(($7 + [88]))
	$4 = *(($7 + [84]))
	goto $label$2 
	
.LABEL $label$3
	$6 = [0]
	$4 = [0]
	
.LABEL $label$2
	*($7 + [116]) = $4
	*($7 + [112]) = $4
	*($7 + [120]) = $6
	*($7 + [96]) = ($7 + [112])
	*($7 + [104]) = ($7 + [8])
	CALL $96(($7 + [104]), ($7 + [96]))
	CALL $72(($7 + [112]), ($7 + [56]))
	$4 = *($7 + [112])
	CALL send_inline($4, (*($7 + [116]) - $4))
	$4 = *($7 + [112])
	if ( ($4 == 0) ){ goto $label$4 }
	*($7 + [116]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$4 = *($7 + [84])
	if ( ($4 == 0) ){ goto $label$5 }
	*(($7 + [88])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($7 + [72])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($7 + [76])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((*($7 + [40]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($7 + [48])))
	
.LABEL $label$7
	$global$0 = ($7 + [128])
}

int_64 .FUNC $48 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($0 + [216])
	$4 = *(($0 + [244]))
	$3 = *(($0 + [240]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($6 + [96]) == (int_32)$2), [9665])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($2), *(($0 + [224])), (int_64)4982871454518345728, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $61($2, $5)
	CALL eosio_assert(((int_32)*($6 + [96]) == (int_32)$2), [9665])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [10730])
	return *($6 + [32])
}

void .FUNC memory ()
{
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($1 + [216])
	$3 = *($1 + [168])
	$5 = *(($1 + [244]))
	$4 = *(($1 + [240]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$3) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [96]) == (int_32)$2), [9665])
	if ( ($7 == 0) ){ goto $label$1 }
	CALL $123($0, ($7 + [40]))
	return 
	
.LABEL $label$2
	$6 = CALL db_find_i64(*($2), *(($1 + [224])), (int_64)4982871454518345728, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $61($2, $6)
	CALL eosio_assert(((int_32)*($6 + [96]) == (int_32)$2), [9665])
	CALL $123($0, ($6 + [40]))
	return 
	
.LABEL $label$1
	$6 = ($1 + [132])
	CALL $56($1, *(($1 + [168])), $6)
	CALL $123($0, $6)
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [40]) = (int_64)0
	*(($3 + [24])) = *(($2 + [24]))
	*(($3 + [16])) = *(($2 + [16]))
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx256_lowerbound(*($2), *($2 + [8]), (int_64)4229443000054317056, $3, [2], ($3 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [40])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [208]) == (int_32)$7), [9665])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $38($7, CALL $fimport$20(*($7), *($7 + [8]), (int_64)4229443000054317056, $6))
	CALL eosio_assert(((int_32)*($4 + [208]) == (int_32)$7), [9665])
	
.LABEL $label$2
	*(($4 + [216])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [48])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($3 = (($2 + [64]) + [8]))) = *(($1 + [40]))
	*($2 + [64]) = *($1 + [32])
	$4 = *($1 + [24])
	$5 = *($1 + [16])
	$6 = *($1 + [8])
	$7 = *($1)
	$8 = CALL $123(($2 + [48]), ($1 + [48]))
	$9 = CALL $123(($2 + [32]), ($1 + [60]))
	$1 = CALL $123(($2 + [16]), ($1 + [72]))
	*(($2 + [8])) = *($3)
	*($2) = *($2 + [64])
	CALL $112($0, $7, $6, $5, $4, $2, $8, $9, $1)
	if ( (*($1) & [1]) ){ goto $label$5 }
	if ( (*($9) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($9) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($8) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($8) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($8 + [8]))
	$global$0 = ($2 + [80])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy(($4 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy(($4 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9739])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [40])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $50(*($1), ($4 + [48]))
	CALL $50(*($1), ($4 + [60]))
	CALL $50(*($1), ($4 + [72]))
	$global$0 = ($2 + [16])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [160])
	$global$0 = $2
	*(($3 = (($2 + [48]) + [24]))) = *(($1 + [24]))
	*(($4 = (($2 + [48]) + [16]))) = *(($1 + [16]))
	*($2 + [48]) = *($1)
	*($2 + [56]) = *(($1 + [8]))
	$5 = CALL $123(($2 + [32]), ($1 + [32]))
	*(($6 = (($2 + [16]) + [8]))) = *(($1 + [72]))
	*($2 + [16]) = *($1 + [64])
	$7 = *($1 + [56])
	$8 = *($1 + [48])
	$9 = CALL $123($2, ($1 + [80]))
	$1 = *($1 + [92])
	*((($2 + [80]) + [24])) = *($3)
	*((($2 + [80]) + [16])) = *($4)
	*((($2 + [120]) + [8])) = *($6)
	*($2 + [152]) = $8
	*($2 + [144]) = $7
	*($2 + [88]) = *($2 + [56])
	*($2 + [80]) = *($2 + [48])
	*($2 + [120]) = *($2 + [16])
	*($2 + [142]) = $1
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 ($2 + [80])), (int_32 $5), (int_32 ($2 + [152])), (int_32 ($2 + [144])), (int_32 ($2 + [120])), (int_32 $9), (int_32 ($2 + [142])), (int_32 $1))
	if ( (*($9) & [1]) ){ goto $label$4 }
	if ( (*($5) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($5 + [8]))
	$global$0 = ($2 + [160])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [160])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [9739])
	CALL memcpy($3, *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$0 = *($0)
	CALL $50(*($1), ($0 + [32]))
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy(($0 + [48]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy(($0 + [56]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($2 + [8]) = $0
	CALL $113(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$22()), [9792])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([240])) + [16]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [88]) = (int_64)0
	*($3 + [96]) = (int_64)0
	*($3 + [112]) = (int_64)0
	*($3 + [168]) = (int_64)0
	*($3 + [176]) = (int_64)0
	*($3 + [208]) = $1
	*(($3 + [40])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [72])) = (int_64)0
	*(($3 + [64])) = (int_64)0
	*(($3 + [56])) = (int_64)0
	*(($3 + [136])) = (int_64)0
	*(($3 + [128])) = (int_64)0
	*(($3 + [120])) = (int_64)0
	CALL $86(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [212])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $83(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$3 = ($global$0 - [96])
	$global$0 = $3
	$4 = *($1 + [8])
	$5 = [0]
	$6 = *($1)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$5 = [1]
	$9 = $1
	$1 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$1 < (int_32)[6])
	$9 = ($1 + [1])
	$1 = $9
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$1 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [10467])
	*($3 + [80]) = ($0 + [256])
	*($3) = $4
	CALL $58(($3 + [32]), ($3 + [80]), $3)
	$1 = *($3 + [36])
	if ( ($1 == 0) ){ goto $label$7 }
	$10 = *($3)
	if ( ((int_64)$10 != (int_64)*(($1 + [24]))) ){ goto $label$7 }
	$7 = *(($1 + [40]))
	$11 = *($1 + [48])
	$8 = *($1 + [32])
	$12 = *($1 + [16])
	$13 = *($1 + [8])
	$1 = [1]
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$11 = (int_64)0
	$7 = (int_64)0
	$8 = (int_64)0
	$10 = (int_64)0
	$12 = (int_64)0
	$13 = (int_64)0
	
.LABEL $label$6
	CALL eosio_assert($1, [10490])
	CALL eosio_assert(((int_64)$4 == (int_64)$10), [10602])
	$1 = [0]
	if ( ((int_64)$6 < (int_64)$12) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$4 == (int_64)$7), [10602])
	$1 = ((int_64)$6 <= (int_64)$8)
	
.LABEL $label$8
	CALL eosio_assert($1, [10509])
	CALL eosio_assert(((uint_64)((int_64)$11 + (int_64)$6) >= (uint_64)$2), [10540])
	*(($1 = (($3 + [16]) + [8]))) = *(($0 + [24]))
	*($3 + [16]) = *($0 + [16 align=4])
	$6 = *($0 + [8])
	$1 = *($1)
	*((($3 + [64]) + [8])) = $1
	*(($5 = (($3 + [80]) + [8]))) = $1
	$10 = *($3 + [16])
	*($3 + [80]) = $10
	*($3 + [64]) = $10
	$1 = *($5)
	*(($3 + [8])) = $1
	*((($3 + [32]) + [24])) = $1
	*($3 + [32]) = $13
	*($3 + [40]) = $6
	$6 = *($3 + [80])
	*($3 + [48]) = $6
	*($3) = $6
	CALL $85($3, ($3 + [32]), CALL $48($0, *($0 + [160])), (uint_64)$4 >> (uint_64)(int_64)8))
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$7), [10602])
	$7 = *($3)
	CALL eosio_assert((((uint_64)$7 >= (uint_64)$2) & ((int_64)$7 >= (int_64)$8)), [10567])
	$global$0 = ($3 + [96])
}

void .FUNC $167 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $166 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $165 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $164 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [12] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $166($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $166($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $166($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $166($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [22064]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $166($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $166($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $166($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $163 ()
{
	CALL $194([11636])
}

int_32 .FUNC $162 ()
{
	CALL $193([11636])
	return [11644]
}

int_32 .FUNC $161 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	$2 = CALL $178($0, $1, $2)
	$global$0 = ($3 + [16])
	return $2
}

int_32 .FUNC $160 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$5 }
	$1 = CALL $158($0)
	
.LABEL $label$5
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$6 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( (*(($0 + [20])) == 0) ){ goto $label$3 }
	
.LABEL $label$6
	$3 = *($0 + [8])
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$7 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($2 - $3))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$7
	*($0 + [16]) = (int_64)0
	$2 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	if ( (*([0] + [11632]) == 0) ){ goto $label$8 }
	$4 = CALL $160(*([0] + [11632]))
	
.LABEL $label$8
	$0 = *(CALL $162())
	if ( ($0 == 0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$11 }
	$1 = CALL $158($0)
	
.LABEL $label$11
	$3 = *($0 + [28])
	$2 = *($0 + [20])
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$12 }
	$5 = [0]
	if ( ((int_32)*(($0 + [76])) < (int_32)[0]) ){ goto $label$13 }
	$5 = CALL $158($0)
	$3 = *(($0 + [28]))
	$2 = *(($0 + [20]))
	
.LABEL $label$13
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$16 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( *(($0 + [20])) ){ goto $label$16 }
	$2 = [-1]
	if ( $5 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$3 = *($0 + [8])
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$17 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($2 - $3))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$17
	*($0 + [16]) = (int_64)0
	$2 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($5 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL $159($0)
	
.LABEL $label$14
	$4 = ($2 | $4)
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$18 }
	CALL $159($0)
	
.LABEL $label$18
	$0 = *($0 + [56])
	if ( $0 ){ goto $label$10 }
	
.LABEL $label$9
	CALL $163()
	return $4
	
.LABEL $label$3
	$2 = [-1]
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $159($0)
	
.LABEL $label$1
	return $2
}

int_32 .FUNC $169 (int_32 $0)
{
	return [0]
}

int_32 .FUNC $168 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $164([13], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $175 (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [2] ? [3] : (int_64)(((int_64)$2 | (int_64)$0) == 0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3665743729458675711, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$7), [9665])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $88($7, CALL $fimport$20(*($7), *($7 + [8]), (int_64)-3665743729458675712, $6))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$7), [9665])
	
.LABEL $label$2
	*(($4 + [76])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [144])
	$global$0 = $4
	*($4 + [128]) = $2
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [9884])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$22()), [9930])
	*($4 + [112]) = *($1 + [8])
	$5 = ($1 + [24])
	*($4 + [120]) = *($5)
	$6 = *($1)
	*($4 + [104]) = $6
	*($1 + [8]) = *(*($3))
	$7 = *($3 + [4])
	*($5) = *(($7 + [8]))
	*($1 + [16]) = *($7)
	$5 = *($3 + [8])
	*($1 + [32]) = *($5)
	*(($1 + [40])) = *(($5 + [8]))
	$3 = *($3 + [12])
	*($1 + [48]) = *($3)
	*(($1 + [56])) = *(($3 + [8]))
	CALL eosio_assert([1], [9981])
	*($4 + [96]) = ($4 + [64])
	*($4 + [92]) = $4
	*($4 + [88]) = $4
	*($4 + [136]) = ($4 + [88])
	*($4 + [68]) = ($1 + [8])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [16])
	*($4 + [76]) = ($1 + [32])
	*($4 + [80]) = ($1 + [48])
	CALL $108(($4 + [64]), ($4 + [136]))
	CALL db_update_i64(*($1 + [68]), $2, $4, [64])
	$3 = ($0 + [36])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [68]) = $1
	*($4 + [64]) = $0
	*($4 + [76]) = $1
	*($4 + [72]) = ($4 + [112])
	*($4 + [80]) = ($4 + [104])
	*($4 + [84]) = ($4 + [128])
	*($4 + [136]) = ($4 + [64])
	CALL $109(($4 + [136]), $3, ($3 + [1]))
	$global$0 = ($4 + [144])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $78($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $127($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $127($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $122($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $51 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	
.LOOP $label$1:
	$5 = *(($1 + $4))
	CALL $130($3, *((uint_32($5 >> [4]) + [8268])))
	CALL $130($3, *((($5 & [15]) + [8268])))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$1 }
	$4 = *($3)
	$5 = ($4 & [1])
	$6 = ( *(($3 + [8])) ? ($3 | [1]) : $5 )
	$7 = ( *($3 + [4]) ? uint_32($4 >> [1]) : $5 )
	if ( ($7 <= [4]) ){ goto $label$5 }
	$1 = $7
	$4 = $6
	$5 = $7
	
.LOOP $label$6:
	CALL memcpy(($3 + [12]), $4, [4])
	$8 = ((int_32)*($3 + [12]) * (int_32)[1540483477])
	$5 = ((int_32)((int_32)((int_32)uint_32($8 >> [24]) ^ (int_32)$8) * (int_32)[1540483477]) ^ (int_32)((int_32)$5 * (int_32)[1540483477]))
	$4 = ($4 + [4])
	$1 = ($1 + [-4])
	if ( ((uint_32)$1 > (uint_32)[3]) ){ goto $label$6 }
	$4 = ($7 + [-4])
	$1 = ($4 & [-4])
	$6 = (($6 + $1) + [4])
	$7 = ($4 - $1)
	if ( ((int_32)$7 == (int_32)[1]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$5 = $7
	if ( ((int_32)$7 == (int_32)[1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)[2]) ){ goto $label$7 }
	if ( ((int_32)$7 != (int_32)[3]) ){ goto $label$2 }
	$5 = ((int_32)(*($6 + [2]) << [16]) ^ (int_32)$5)
	
.LABEL $label$7
	$5 = ((int_32)(*($6 + [1]) << [8]) ^ (int_32)$5)
	
.LABEL $label$3
	$5 = ((int_32)((int_32)$5 ^ (int_32)*($6)) * (int_32)[1540483477])
	
.LABEL $label$2
	$4 = ((int_32)((int_32)uint_32($5 >> [13]) ^ (int_32)$5) * (int_32)[1540483477])
	$4 = ((int_32)uint_32($4 >> [15]) ^ (int_32)$4)
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$8
	$7 = ($4 + [-1640531527])
	$4 = [0]
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	
.LOOP $label$9:
	$5 = *(($2 + $4))
	CALL $130($3, *((uint_32($5 >> [4]) + [8268])))
	CALL $130($3, *((($5 & [15]) + [8268])))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$9 }
	$4 = *($3)
	$5 = ($4 & [1])
	$6 = ( *(($3 + [8])) ? ($3 | [1]) : $5 )
	$8 = ( *($3 + [4]) ? uint_32($4 >> [1]) : $5 )
	if ( ($8 <= [4]) ){ goto $label$13 }
	$1 = $8
	$4 = $6
	$5 = $8
	
.LOOP $label$14:
	CALL memcpy(($3 + [12]), $4, [4])
	$2 = ((int_32)*($3 + [12]) * (int_32)[1540483477])
	$5 = ((int_32)((int_32)((int_32)uint_32($2 >> [24]) ^ (int_32)$2) * (int_32)[1540483477]) ^ (int_32)((int_32)$5 * (int_32)[1540483477]))
	$4 = ($4 + [4])
	$1 = ($1 + [-4])
	if ( ((uint_32)$1 > (uint_32)[3]) ){ goto $label$14 }
	$4 = ($8 + [-4])
	$1 = ($4 & [-4])
	$6 = (($6 + $1) + [4])
	$8 = ($4 - $1)
	if ( ((int_32)$8 == (int_32)[1]) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	$5 = $8
	if ( ((int_32)$8 == (int_32)[1]) ){ goto $label$11 }
	
.LABEL $label$12
	if ( ((int_32)$8 == (int_32)[2]) ){ goto $label$15 }
	if ( ((int_32)$8 != (int_32)[3]) ){ goto $label$10 }
	$5 = ((int_32)(*($6 + [2]) << [16]) ^ (int_32)$5)
	
.LABEL $label$15
	$5 = ((int_32)(*($6 + [1]) << [8]) ^ (int_32)$5)
	
.LABEL $label$11
	$5 = ((int_32)((int_32)$5 ^ (int_32)*($6)) * (int_32)[1540483477])
	
.LABEL $label$10
	$4 = ((int_32)((int_32)uint_32($5 >> [13]) ^ (int_32)$5) * (int_32)[1540483477])
	$4 = ((int_32)(((($7 << [6]) + uint_32($7 >> [2])) + ((int_32)uint_32($4 >> [15]) ^ (int_32)$4)) + [-1640531527]) ^ (int_32)$7)
	if ( ((*($3) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$16
	$global$0 = ($3 + [16])
	return $4
}

int_64 .FUNC $52 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($0 + [216])
	$4 = *(($0 + [244]))
	$3 = *(($0 + [240]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($6 + [96]) == (int_32)$2), [9665])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($2), *(($0 + [224])), (int_64)4982871454518345728, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $61($2, $5)
	CALL eosio_assert(((int_32)*($6 + [96]) == (int_32)$2), [9665])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [10730])
	return *($6 + [8])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $143($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$4 = ($global$0 - [192])
	$global$0 = $4
	*(($5 = $4) + [96]) = $2
	CALL eosio_assert(((int_32)*($1 + [208]) == (int_32)$0), [9884])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$22()), [9930])
	$2 = *(($1 + [40]))
	*((($5 + [112]) + [24])) = $2
	$6 = *(($1 + [32]))
	*((($5 + [112]) + [16])) = $6
	*((($5 + [32]) + [16])) = $6
	*((($5 + [32]) + [24])) = $2
	$2 = *(($1 + [24]))
	*($5 + [120]) = $2
	$6 = *($1 + [16])
	*($5 + [112]) = $6
	*($5 + [32]) = $6
	*($5 + [40]) = $2
	*($5 + [64]) = *($1 + [184])
	*($5 + [72]) = *($1 + [160])
	*($5 + [80]) = *($1 + [8])
	$7 = *($1)
	*($5 + [24]) = $7
	*($1 + [162]) = ((int_64)*(*($3)) != (int_64)0)
	*($1 + [161]) = *(*($3 + [4]))
	*($1 + [144]) = *(*($3 + [8]))
	$8 = *($3 + [12])
	*(($1 + [136])) = *(($8 + [24]))
	*(($1 + [128])) = *(($8 + [16]))
	*(($1 + [120])) = *(($8 + [8]))
	*($1 + [112]) = *($8)
	$9 = *(*($3 + [16]) + [8])
	$10 = *(*($3))
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10661])
	$11 = ($1 + [112])
	$12 = ($1 + [144])
	$13 = ($1 + [161])
	$14 = ($1 + [162])
	$15 = ($1 + [8])
	$16 = ($1 + [160])
	$17 = ($1 + [184])
	$18 = ($1 + [16])
	$19 = ($0 + [36])
	$2 = (uint_64)$9 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$8 = [1]
	$20 = $3
	$3 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$3 < (int_32)[6])
	$20 = ($3 + [1])
	$3 = $20
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$3 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [10710])
	*(($1 + [176])) = $9
	*($1 + [168]) = $10
	*(($1 + [160])) = [1]
	*($1 + [192]) = CALL current_time()
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [9981])
	$8 = $4
	$3 = ($8 + [-208])
	$global$0 = $3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($8 + [-15])
	*($5 + [104]) = ($5 + [8])
	*($5 + [116]) = $15
	*($5 + [112]) = $1
	*($5 + [120]) = $18
	*($5 + [124]) = ($1 + [48])
	*($5 + [128]) = ($1 + [80])
	*($5 + [132]) = ($1 + [88])
	*($5 + [136]) = $11
	*($5 + [140]) = $12
	*($5 + [144]) = ($1 + [148])
	*($5 + [148]) = ($1 + [149])
	*($5 + [152]) = ($1 + [152])
	*($5 + [156]) = $16
	*($5 + [160]) = $13
	*($5 + [164]) = $14
	*($5 + [168]) = ($1 + [168])
	*($5 + [172]) = $17
	*($5 + [176]) = ($1 + [192])
	*($5 + [180]) = ($1 + [200])
	CALL $93(($5 + [112]), ($5 + [104]))
	CALL db_update_i64(*($1 + [212]), *($5 + [96]), $3, [193])
	$2 = *($5 + [24])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [116]) = $1
	*($5 + [112]) = $0
	*($5 + [124]) = $1
	*($5 + [120]) = ($5 + [32])
	*($5 + [128]) = ($5 + [24])
	*($5 + [132]) = ($5 + [96])
	*($5 + [104]) = ($5 + [112])
	CALL $99(($5 + [104]), $19, ($19 + [1]), ($19 + [2]), ($19 + [3]))
	$global$0 = ($5 + [192])
}

void .FUNC $55 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = $1
	CALL require_auth(*($0))
	$4 = ($0 + [216])
	$6 = *(($0 + [244]))
	$5 = *(($0 + [240]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)$4), [9665])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [224])), (int_64)4982871454518345728, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $61($4, $7)
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)$4), [9665])
	
.LABEL $label$2
	$1 = *($0)
	*($3 + [16]) = $2
	CALL eosio_assert([1], [9849])
	CALL $100($4, $8, $1, ($3 + [16]))
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [20]) = $2
	*($3 + [16]) = ($3 + [24])
	CALL $101(($3 + [8]), $4, $1, ($3 + [16]))
	$global$0 = ($3 + [32])
}

void .FUNC $56 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = $1
	CALL require_auth(*($0))
	$4 = ($0 + [216])
	$6 = *(($0 + [244]))
	$5 = *(($0 + [240]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)$4), [9665])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [224])), (int_64)4982871454518345728, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $61($4, $7)
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)$4), [9665])
	
.LABEL $label$2
	$1 = *($0)
	*($3 + [16]) = $2
	CALL eosio_assert([1], [9849])
	CALL $103($4, $8, $1, ($3 + [16]))
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [20]) = $2
	*($3 + [16]) = ($3 + [24])
	CALL $104(($3 + [8]), $4, $1, ($3 + [16]))
	$global$0 = ($3 + [32])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9739])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9739])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy(($0 + [40]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [9739])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [48])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $173 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *($2 + [20])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	if ( CALL $172($2) ){ goto $label$2 }
	$4 = *($2 + [20])
	if ( ((*(($2 + [16])) - $4) <= $1) ){ goto $label$1 }
	
.LABEL $label$3
	$6 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$5 }
	$6 = [0]
	$5 = $0
	$3 = [0]
	
.LOOP $label$6:
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$5 }
	$3 = ($3 + [1])
	$7 = ($5 + $1)
	$8 = ($5 + [-1])
	$5 = $8
	if ( ((int_32)*(($7 + [-1])) != (int_32)[10]) ){ goto $label$6 }
	$6 = (($1 - $3) + [1])
	$5 = CALL int_32 $2((int_32 $0), (int_32 $6), (int_32 *($2 + [36])))
	if ( ($5 <= $6) ){ goto $label$2 }
	$0 = (($8 + $1) + [1])
	$4 = *(($2 + [20]))
	$1 = ($3 + [-1])
	
.LABEL $label$5
	CALL memcpy($4, $0, $1)
	*(($3 = ($2 + [20]))) = (*($3) + $1)
	$5 = ($6 + $1)
	
.LABEL $label$2
	return $5
	return .LABEL $label$1
}

int_64 .FUNC $152 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC $153 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $156($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $152($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [22032])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [22016]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [22048]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $155($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

int_32 .FUNC $150 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = *($0)
	$6 = ((int_32)$5 == (int_32)[-1794895138])
	$4 = ((($3 << [24]) | (($3 << [8]) & [16711680])) | ((uint_32($3 >> [8]) & [65280]) | uint_32($3 >> [24])))
	$3 = *($0 + [8])
	$7 = ( $3 ? $4 : $6 )
	if ( ((uint_32)$7 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$10 = ($1 - ($7 << [2]))
	$8 = *($0 + [12])
	$9 = ( $8 ? ((($8 << [24]) | (($8 << [8]) & [16711680])) | ((uint_32($8 >> [8]) & [65280]) | uint_32($8 >> [24]))) : $6 )
	if ( ((uint_32)$9 >= (uint_32)$10) ){ goto $label$3 }
	$8 = *($0 + [16])
	$6 = ( $8 ? ((($8 << [24]) | (($8 << [8]) & [16711680])) | ((uint_32($8 >> [8]) & [65280]) | uint_32($8 >> [24]))) : $6 )
	if ( ((uint_32)$6 >= (uint_32)$10) ){ goto $label$2 }
	if ( ((($6 | $9) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$10 = uint_32($9 >> [2])
	if ( ((int_32)$5 != (int_32)[-1794895138]) ){ goto $label$16 }
	$9 = ($7 & [-2])
	$4 = ($0 + (($9 + $10) << [2]))
	$8 = *(($4 + [4]))
	if ( ((uint_32)$8 >= (uint_32)$1) ){ goto $label$15 }
	$11 = *($4)
	if ( ((uint_32)$11 >= (uint_32)($1 - $8)) ){ goto $label$14 }
	$7 = uint_32($7 >> [1])
	$4 = $7
	$12 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($8 + $11))) ){ goto $label$9 }
	$8 = CALL $190($2, ($0 + $8))
	if ( ($8 == 0) ){ goto $label$11 }
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$3 = ( $4 ? ($3 - $4) : $8 )
	$4 = uint_32($3 >> [1])
	$8 = ((int_32)$8 < (int_32)[0])
	$12 = ( $12 ? $7 : $8 )
	$7 = ($12 + $4)
	$9 = ($7 << [1])
	$11 = ($0 + (($9 + $10) << [2]))
	$8 = *(($11 + [4]))
	if ( ((uint_32)$8 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	if ( ($11 <= ($1 - $8)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$9 = ($4 & [-2])
	$8 = ($0 + (($9 + $10) << [2]))
	$3 = *(($8 + [4]))
	$3 = ((($3 << [24]) | (($3 << [8]) & [16711680])) | ((uint_32($3 >> [8]) & [65280]) | uint_32($3 >> [24])))
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$13 }
	$8 = *($8)
	$8 = ((($8 << [24]) | (($8 << [8]) & [16711680])) | ((uint_32($8 >> [8]) & [65280]) | uint_32($8 >> [24])))
	if ( ((uint_32)$8 >= (uint_32)($1 - $3)) ){ goto $label$12 }
	$11 = uint_32($4 >> [1])
	$7 = $11
	$12 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($3 + $8))) ){ goto $label$8 }
	$3 = CALL $190($2, ($0 + $3))
	if ( ($3 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$4 = ( $7 ? ($4 - $7) : $3 )
	$7 = uint_32($4 >> [1])
	$3 = ((int_32)$3 < (int_32)[0])
	$12 = ( $12 ? $11 : $3 )
	$11 = ($12 + $7)
	$9 = ($11 << [1])
	$8 = ($0 + (($9 + $10) << [2]))
	$3 = *(($8 + [4]))
	$3 = ((($3 << [24]) | (($3 << [8]) & [16711680])) | ((uint_32($3 >> [8]) & [65280]) | uint_32($3 >> [24])))
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	$8 = ((($8 << [24]) | (($8 << [8]) & [16711680])) | ((uint_32($8 >> [8]) & [65280]) | uint_32($8 >> [24])))
	if ( ($8 <= ($1 - $3)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$4 = ((int_32)$5 == (int_32)[-1794895138])
	$6 = ($0 + (($9 + uint_32($6 >> [2])) << [2]))
	$3 = *(($6 + [4]))
	$8 = ( $3 ? ((($3 << [24]) | (($3 << [8]) & [16711680])) | ((uint_32($3 >> [8]) & [65280]) | uint_32($3 >> [24]))) : $4 )
	if ( ((uint_32)$8 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$3 = *($6)
	$3 = ( $3 ? ((($3 << [24]) | (($3 << [8]) & [16711680])) | ((uint_32($3 >> [8]) & [65280]) | uint_32($3 >> [24]))) : $4 )
	if ( ((uint_32)$3 >= (uint_32)($1 - $8)) ){ goto $label$10 }
	return ( [0] ? ($0 + $8) : *(($0 + ($8 + $3))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL $150(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

int_64 .FUNC $156 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $157 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL $145()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL $145()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

void .FUNC $154 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	float_64 $6
	$5 = ($global$0 - [16])
	$global$0 = $5
	$6 = CALL __trunctfdf2($3, $4)
	CALL __extenddftf2($5, CALL $153(CALL $fimport$42($1, $2), $6))
	*($0 + [8]) = *(($5 + [8]))
	*($0) = *($5)
	$global$0 = ($5 + [16])
}

int_64 .FUNC $155 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_32 .FUNC $158 (int_32 $0)
{
	int_32 $1
	return $1
}

void .FUNC $159 (int_32 $0)
{
}

int_32 .FUNC $179 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_64 $29
	int_64 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	$5 = ($global$0 - [8128])
	$global$0 = $5
	$6 = (($5 + [704]) | [8])
	$7 = (($5 + [704]) | [9])
	$8 = ([-2] - ($5 + [704]))
	$9 = ($5 + [7664])
	$10 = (($5 + [692]) + [12])
	$11 = (($5 + [352]) + [54])
	$12 = (($5 + [352]) + [55])
	$13 = [0]
	$14 = [0]
	$15 = [0]
	
.LOOP $label$4:
	if ( ($0 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	$17 = $1
	if ( ((int_32)$15 > (int_32)([2147483647] - $14)) ){ goto $label$3 }
	$14 = ($15 + $14)
	$1 = *($17)
	if ( ($1 == 0) ){ goto $label$1 }
	$15 = $17
	$1 = ($1 & [255])
	if ( ($1 == 0) ){ goto $label$24 }
	
.LOOP $label$25:
	if ( ((int_32)$1 == (int_32)[37]) ){ goto $label$23 }
	$1 = *($15 + [1])
	$15 = ($15 + [1])
	$1 = ($1 & [255])
	if ( $1 ){ goto $label$25 }
	
.LABEL $label$24
	$1 = $15
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$22 }
	goto $label$3 
	
.LABEL $label$23
	$18 = $15
	
.LOOP $label$27:
	if ( ((int_32)*(($18 + [1])) != (int_32)[37]) ){ goto $label$26 }
	$15 = ($15 + [1])
	$19 = *($18 + [2])
	$1 = ($18 + [2])
	$18 = $1
	if ( ((int_32)$19 == (int_32)[37]) ){ goto $label$27 }
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	goto $label$22 
	
.LABEL $label$26
	$1 = $18
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	
.LABEL $label$22
	if ( (*($0) & [32]) ){ goto $label$28 }
	CALL $173($17, $15, $0)
	
.LABEL $label$28
	if ( $15 ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	
.LOOP $label$29:
	$17 = $1
	if ( ((int_32)$15 > (int_32)([2147483647] - $14)) ){ goto $label$3 }
	$14 = ($15 + $14)
	$15 = *($17)
	if ( ($15 == 0) ){ goto $label$31 }
	$1 = $17
	$15 = ($15 & [255])
	if ( ($15 == 0) ){ goto $label$33 }
	
.LOOP $label$34:
	if ( ((int_32)$15 == (int_32)[37]) ){ goto $label$32 }
	$15 = *($1 + [1])
	$1 = ($1 + [1])
	$15 = ($15 & [255])
	if ( $15 ){ goto $label$34 }
	
.LABEL $label$33
	$18 = ([2147483647] - $14)
	$15 = ($1 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$30 }
	goto $label$3 
	
.LABEL $label$32
	$18 = $1
	$15 = $1
	
.LOOP $label$36:
	if ( ((int_32)*(($15 + [1])) != (int_32)[37]) ){ goto $label$35 }
	$18 = ($18 + [1])
	$19 = *($15 + [2])
	$1 = ($15 + [2])
	$15 = $1
	if ( ((int_32)$19 == (int_32)[37]) ){ goto $label$36 }
	$18 = ([2147483647] - $14)
	$15 = ($18 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	goto $label$30 
	
.LABEL $label$35
	$1 = $15
	$18 = ([2147483647] - $14)
	$15 = ($18 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$30 }
	goto $label$3 
	
.LABEL $label$31
	if ( $0 ){ goto $label$1 }
	if ( ($13 == 0) ){ goto $label$46 }
	$1 = [1]
	$15 = *($4 + [4])
	if ( ($15 == 0) ){ goto $label$37 }
	CALL $180(($3 + [16]), $15, $2)
	$15 = *($4 + [8])
	if ( ($15 == 0) ){ goto $label$45 }
	CALL $180(($3 + [32]), $15, $2)
	$15 = *($4 + [12])
	if ( ($15 == 0) ){ goto $label$44 }
	CALL $180(($3 + [48]), $15, $2)
	$15 = *($4 + [16])
	if ( ($15 == 0) ){ goto $label$43 }
	CALL $180(($3 + [64]), $15, $2)
	$15 = *($4 + [20])
	if ( ($15 == 0) ){ goto $label$42 }
	CALL $180(($3 + [80]), $15, $2)
	$15 = *($4 + [24])
	if ( ($15 == 0) ){ goto $label$41 }
	CALL $180(($3 + [96]), $15, $2)
	$15 = *($4 + [28])
	if ( ($15 == 0) ){ goto $label$40 }
	CALL $180(($3 + [112]), $15, $2)
	$15 = *($4 + [32])
	if ( ($15 == 0) ){ goto $label$39 }
	CALL $180(($3 + [128]), $15, $2)
	$15 = *($4 + [36])
	if ( ($15 == 0) ){ goto $label$38 }
	CALL $180(($3 + [144]), $15, $2)
	$global$0 = ($5 + [8128])
	return [1]
	
.LABEL $label$46
	$global$0 = ($5 + [8128])
	return [0]
	
.LABEL $label$45
	$1 = [2]
	goto $label$37 
	
.LABEL $label$44
	$1 = [3]
	goto $label$37 
	
.LABEL $label$43
	$1 = [4]
	goto $label$37 
	
.LABEL $label$42
	$1 = [5]
	goto $label$37 
	
.LABEL $label$41
	$1 = [6]
	goto $label$37 
	
.LABEL $label$40
	$1 = [7]
	goto $label$37 
	
.LABEL $label$39
	$1 = [8]
	goto $label$37 
	
.LABEL $label$38
	$1 = [9]
	
.LABEL $label$37
	$15 = ($4 + ($1 << [2]))
	
.LOOP $label$47:
	if ( *($15) ){ goto $label$18 }
	$15 = ($15 + [4])
	$14 = [1]
	$1 = ($1 + [1])
	if ( ((uint_32)$1 <= (uint_32)[9]) ){ goto $label$47 }
	goto $label$1 
	
.LABEL $label$30
	if ( $15 ){ goto $label$29 }
	
.LABEL $label$19
	$15 = ($1 + [1])
	$16 = *($1 + [1])
	$20 = ($16 + [-48])
	if ( ((uint_32)$20 > (uint_32)[9]) ){ goto $label$50 }
	$19 = ((int_32)*($1 + [2]) == (int_32)[36])
	$15 = ( ($1 + [3]) ? $15 : $19 )
	$21 = ( $20 ? [-1] : $19 )
	$13 = ( [1] ? $13 : $19 )
	$22 = [0]
	$16 = *(($1 + ( [3] ? [1] : $19 )))
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$48 }
	goto $label$49 
	
.LABEL $label$50
	$21 = [-1]
	$22 = [0]
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$48 }
	
.LABEL $label$49
	$1 = ([1] << $1)
	if ( (($1 & [75913]) == 0) ){ goto $label$48 }
	$19 = ($15 + [1])
	$22 = [0]
	
.LOOP $label$51:
	$22 = ($1 | $22)
	$15 = $19
	$16 = *($15)
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 >= (uint_32)[32]) ){ goto $label$48 }
	$19 = ($15 + [1])
	$1 = ([1] << $1)
	if ( ($1 & [75913]) ){ goto $label$51 }
	
.LABEL $label$48
	if ( ((int_32)$16 != (int_32)[42]) ){ goto $label$57 }
	$1 = (*($15 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$56 }
	if ( ((int_32)*($15 + [2]) != (int_32)[36]) ){ goto $label$56 }
	*(($4 + ($1 << [2]))) = [10]
	$23 = ($15 + [3])
	$13 = [1]
	$20 = *((($3 + (*(($15 + [1])) << [4])) + [-768]))
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$52 }
	goto $label$55 
	
.LABEL $label$57
	$20 = [0]
	$19 = ($16 + [-48])
	if ( ((uint_32)$19 > (uint_32)[9]) ){ goto $label$54 }
	$1 = [0]
	
.LOOP $label$58:
	$20 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$59 }
	$1 = ((int_32)$1 * (int_32)[10])
	$20 = ( [-1] ? ($1 + $19) : ((int_32)$19 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$59
	$19 = *($15 + [1])
	$23 = ($15 + [1])
	$15 = $23
	$1 = $20
	$19 = ($19 + [-48])
	if ( ($19 <= [10]) ){ goto $label$58 }
	if ( ((int_32)$20 >= (int_32)[0]) ){ goto $label$52 }
	goto $label$3 
	
.LABEL $label$56
	if ( $13 ){ goto $label$18 }
	$23 = ($15 + [1])
	if ( ($0 == 0) ){ goto $label$53 }
	$15 = *($2)
	*($2) = ($15 + [4])
	$13 = [0]
	$20 = *($15)
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$52 }
	
.LABEL $label$55
	$20 = ([0] - $20)
	$22 = ($22 | [8192])
	goto $label$52 
	
.LABEL $label$54
	$23 = $15
	goto $label$52 
	
.LABEL $label$53
	$13 = [0]
	$20 = [0]
	
.LABEL $label$52
	$15 = [0]
	$16 = [-1]
	if ( ((int_32)*($23) != (int_32)[46]) ){ goto $label$66 }
	$19 = *($23 + [1])
	if ( ((int_32)$19 != (int_32)[42]) ){ goto $label$65 }
	$1 = (*($23 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$64 }
	if ( ((int_32)*($23 + [3]) != (int_32)[36]) ){ goto $label$64 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($23 + [4])
	$16 = *((($3 + (*(($23 + [2])) << [4])) + [-768]))
	goto $label$61 
	
.LABEL $label$66
	$1 = $23
	$24 = [0]
	goto $label$60 
	
.LABEL $label$65
	$1 = ($23 + [1])
	$25 = ($19 + [-48])
	if ( ((uint_32)$25 > (uint_32)[9]) ){ goto $label$63 }
	$23 = [0]
	$19 = $1
	
.LOOP $label$67:
	$16 = [-1]
	if ( ((uint_32)$23 > (uint_32)[214748364]) ){ goto $label$68 }
	$1 = ((int_32)$23 * (int_32)[10])
	$16 = ( [-1] ? ($1 + $25) : ((int_32)$25 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$68
	$24 = [1]
	$25 = *($19 + [1])
	$1 = ($19 + [1])
	$19 = $1
	$23 = $16
	$25 = ($25 + [-48])
	if ( ($25 <= [10]) ){ goto $label$67 }
	goto $label$60 
	
.LABEL $label$64
	if ( $13 ){ goto $label$18 }
	$1 = ($23 + [2])
	if ( ($0 == 0) ){ goto $label$62 }
	$19 = *($2)
	*($2) = ($19 + [4])
	$16 = *($19)
	goto $label$61 
	
.LABEL $label$63
	$24 = [1]
	$16 = [0]
	goto $label$60 
	
.LABEL $label$62
	$16 = [0]
	
.LABEL $label$61
	$24 = ((int_32)uint_32($16 >> [31]) ^ (int_32)[1])
	
.LABEL $label$60
	
.LOOP $label$69:
	$19 = $15
	$15 = (*($1) + [-65])
	if ( ((uint_32)$15 > (uint_32)[57]) ){ goto $label$18 }
	$1 = ($1 + [1])
	$15 = *(((((int_32)$19 * (int_32)[58]) + $15) + [22304]))
	if ( (($15 + [-1]) <= [8]) ){ goto $label$69 }
	if ( ($15 == 0) ){ goto $label$18 }
	if ( ((int_32)$15 != (int_32)[27]) ){ goto $label$72 }
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$18 }
	$15 = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$71 
	
.LABEL $label$72
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$73 }
	*(($4 + ($21 << [2]))) = $15
	$15 = ($3 + ($21 << [4]))
	*($5 + [424]) = *(($15 + [8]))
	*($5 + [416]) = *($15)
	$15 = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$71 
	
.LABEL $label$73
	if ( ($0 == 0) ){ goto $label$70 }
	CALL $180(($5 + [416]), $15, $2)
	
.LABEL $label$71
	$23 = ($22 & [-65537])
	$21 = ( $23 ? $22 : ($22 & [8192]) )
	$26 = [0]
	$27 = [8249]
	$15 = *(($1 + [-1]))
	$28 = ( ( ($15 & [-33]) ? $15 : ((int_32)($15 & [15]) == (int_32)[3]) ) ? $15 : $19 )
	$15 = ($28 + [-65])
	if ( ((uint_32)$15 > (uint_32)[55]) ){ goto $label$9 }
	$22 = $12
	goto $label$101 
	
.LABEL $label$101
	if ( ((int_32)$16 > (int_32)[-1]) ){ goto $label$102 }
	if ( $24 ){ goto $label$3 }
	
.LABEL $label$102
	$29 = *($5 + [424])
	$30 = *($5 + [416])
	*($5 + [748]) = [0]
	if ( (CALL $174($30, $29) == 0) ){ goto $label$103 }
	$31 = [1]
	$32 = [20066]
	$29 = ((int_64)$29 ^ (int_64)-9223372036854775808)
	if ( ((int_32)CALL $175($30, $29) <= (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$103
	if ( ($21 & [2048]) ){ goto $label$99 }
	$31 = ($21 & [1])
	$32 = ( [20072] ? [20067] : $31 )
	if ( ((int_32)CALL $175($30, $29) > (int_32)[1]) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$100
	$29 = *($5 + [416])
	if ( ((int_64)$29 <= (int_64)-1) ){ goto $label$86 }
	if ( ($21 & [2048]) ){ goto $label$84 }
	$26 = ($21 & [1])
	$27 = ( [8251] ? [8249] : $26 )
	if ( ((uint_64)$29 >= (uint_64)(int_64)4294967296) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$99
	$31 = [1]
	$32 = [20069]
	if ( ((int_32)CALL $175($30, $29) <= (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$98
	*((($5 + [344]) + [4])) = [0]
	*($5 + [344]) = *($5 + [416])
	*($5 + [416]) = ($5 + [344])
	$16 = [-1]
	$17 = ($5 + [344])
	goto $label$96 
	
.LABEL $label$97
	$17 = *($5 + [416])
	if ( ($16 == 0) ){ goto $label$80 }
	
.LABEL $label$96
	$15 = [0]
	$18 = $17
	
.LOOP $label$104:
	$19 = *($18)
	if ( ($19 == 0) ){ goto $label$82 }
	$19 = CALL $176(($5 + [340]), $19)
	$22 = ((int_32)$19 < (int_32)[0])
	if ( $22 ){ goto $label$83 }
	if ( ((uint_32)$19 > (uint_32)($16 - $15)) ){ goto $label$83 }
	$18 = ($18 + [4])
	$15 = ($19 + $15)
	if ( ((uint_32)$16 > (uint_32)$15) ){ goto $label$104 }
	goto $label$82 
	
.LABEL $label$95
	*((($5 + [352]) + [54])) = *($5 + [416])
	$16 = [1]
	$17 = $11
	$22 = $12
	$21 = $23
	goto $label$8 
	
.LABEL $label$94
	$17 = CALL $146(*(CALL $145()))
	goto $label$88 
	
.LABEL $label$93
	$15 = [0]
	$18 = ($19 & [255])
	if ( ((uint_32)$18 > (uint_32)[7]) ){ goto $label$4 }
	goto $label$105 
	
.LABEL $label$105
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$92
	$17 = $12
	$29 = *($5 + [416])
	if ( (int_64)($29 == 0) ){ goto $label$106 }
	$17 = $12
	
.LOOP $label$107:
	*(($17 = ($17 + [-1]))) = (((CASTING uint_32)(uint_64 $29) & [7]) | [48])
	$29 = (uint_64)$29 >> (uint_64)(int_64)3
	if ( ((int_64)$29) != (int_64)0) ){ goto $label$107 }
	
.LABEL $label$106
	if ( ($21 & [8]) ){ goto $label$81 }
	$26 = [0]
	$27 = [8249]
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$91
	$16 = ( $16 ? [8] : ((uint_32)$16 > (uint_32)[8]) )
	$21 = ($21 | [8])
	$28 = [120]
	
.LABEL $label$90
	$26 = [0]
	$27 = [8249]
	$29 = *($5 + [416])
	if ( (int_64)($29 == 0) ){ goto $label$108 }
	$15 = ($28 & [32])
	$17 = $12
	
.LOOP $label$109:
	*(($17 = ($17 + [-1]))) = (*((((CASTING uint_32)(uint_64 $29) & [15]) + [22768])) | $15)
	$29 = (uint_64)$29 >> (uint_64)(int_64)4
	if ( ((int_64)$29) != (int_64)0) ){ goto $label$109 }
	if ( (($21 & [8]) == 0) ){ goto $label$12 }
	if ( (int_64)(*($5 + [416]) == 0) ){ goto $label$12 }
	$27 = (int_32($28 >> [4]) + [8249])
	$26 = [2]
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$108
	$17 = $12
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$89
	$15 = *($5 + [416])
	$17 = ( $15 ? [8285] : $15 )
	
.LABEL $label$88
	$26 = [0]
	$15 = CALL $192($17, ( [2147483647] ? $16 : ((int_32)$16 < (int_32)[0]) ))
	$22 = ($17 + $15)
	if ( ((int_32)$16 <= (int_32)[-1]) ){ goto $label$85 }
	$21 = $23
	$16 = $15
	goto $label$8 
	
.LABEL $label$87
	$26 = [0]
	$27 = [8249]
	$29 = *($5 + [416])
	if ( (uint_64)($29 <= (int_64)4294967296) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$86
	$29 = (int_64)
	*($5 + [416]) = $29((int_64)0 - $29))
	$26 = [1]
	$27 = [8249]
	if ( ((uint_64)$29 >= (uint_64)(int_64)4294967296) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$85
	$21 = $23
	$16 = $15
	if ( (*($22) == 0) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$84
	$26 = [1]
	$27 = [8250]
	if ( (uint_64)($29 <= (int_64)4294967296) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$83
	if ( $22 ){ goto $label$2 }
	
.LABEL $label$82
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$3 }
	$23 = ($21 & [73728])
	if ( $23 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$81
	$15 = ($12 - $17)
	$27 = ( [8249] ? [8254] : ((int_32)$16 > (int_32)$15) )
	$26 = ((int_32)$16 <= (int_32)$15)
	goto $label$12 
	
.LABEL $label$80
	$15 = [0]
	$23 = ($21 & [73728])
	if ( ($23 == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$79
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$78
	*(*($5 + [416])) = (CASTING int_64)(int_32 $14)
	goto $label$4 
	
.LABEL $label$77
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$76
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$75
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$74
	*(*($5 + [416])) = (CASTING int_64)(int_32 $14)
	goto $label$4 
	
.LABEL $label$70
	$global$0 = ($5 + [8128])
	return [0]
	
.LABEL $label$18
	*(CALL $145()) = [22]
	goto $label$2 
	
.LABEL $label$17
	if ( ((int_32)$20 <= (int_32)$15) ){ goto $label$16 }
	$18 = ($25 <= [256])
	$25 = ($20 - $15)
	CALL memset(($5 + [432]), [32], ( $25 ? [256] : $18 ))
	$16 = *($0)
	$19 = ($16 & [32])
	if ( $18 ){ goto $label$111 }
	$18 = ($19 == 0)
	$19 = $25
	
.LOOP $label$112:
	if ( (($18 & [1]) == 0) ){ goto $label$113 }
	CALL $173(($5 + [432]), [256], $0)
	$16 = *($0)
	
.LABEL $label$113
	$22 = ($16 & [32])
	$18 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$112 }
	if ( $22 ){ goto $label$16 }
	$25 = ($25 & [255])
	goto $label$110 
	
.LABEL $label$111
	if ( $19 ){ goto $label$16 }
	
.LABEL $label$110
	CALL $173(($5 + [432]), $25, $0)
	
.LABEL $label$16
	if ( ($15 == 0) ){ goto $label$114 }
	$18 = [0]
	
.LOOP $label$115:
	$19 = *($17)
	if ( ($19 == 0) ){ goto $label$114 }
	$19 = CALL $176(($5 + [340]), $19)
	$18 = ($19 + $18)
	if ( ((uint_32)$18 > (uint_32)$15) ){ goto $label$114 }
	if ( (*($0) & [32]) ){ goto $label$116 }
	CALL $173(($5 + [340]), $19, $0)
	
.LABEL $label$116
	$17 = ($17 + [4])
	if ( ($18 <= $15) ){ goto $label$115 }
	
.LABEL $label$114
	if ( ((int_32)$23 != (int_32)[8192]) ){ goto $label$117 }
	if ( ((int_32)$20 <= (int_32)$15) ){ goto $label$117 }
	$18 = ($22 <= [256])
	$22 = ($20 - $15)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$119 }
	$18 = ($19 == 0)
	$19 = $22
	
.LOOP $label$120:
	if ( (($18 & [1]) == 0) ){ goto $label$121 }
	CALL $173(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$121
	$16 = ($17 & [32])
	$18 = ($16 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$120 }
	if ( $16 ){ goto $label$117 }
	$22 = ($22 & [255])
	goto $label$118 
	
.LABEL $label$119
	if ( $19 ){ goto $label$117 }
	
.LABEL $label$118
	CALL $173(($5 + [432]), $22, $0)
	
.LABEL $label$117
	$15 = ( $20 ? $15 : ((int_32)$20 > (int_32)$15) )
	goto $label$4 
	
.LABEL $label$15
	$30 = $29
	$17 = $12
	goto $label$13 
	
.LABEL $label$14
	$17 = $12
	
.LOOP $label$122:
	$30 = ((uint_64)$29 / (uint_64)(int_64)10)
	*(($17 = ($17 + [-1]))) = ((CASTING uint_32)(uint_64 (int_64))($29 - ((int_64)$30 * (int_64)10))) | [48])
	$15 = ((uint_64)$29 > (uint_64)(int_64)42949672959)
	$29 = $30
	if ( $15 ){ goto $label$122 }
	
.LABEL $label$13
	$15 = (CASTING uint_32)(uint_64 $30)
	if ( ($15 == 0) ){ goto $label$12 }
	
.LOOP $label$123:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($17 = ($17 + [-1]))) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$22 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $22 ){ goto $label$123 }
	
.LABEL $label$12
	if ( ($24 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$10
	$21 = ( ($21 & [-65537]) ? $21 : ((int_32)$16 > (int_32)[-1]) )
	$29 = *($5 + [416])
	if ( $16 ){ goto $label$124 }
	if ( ((int_64)($29 == 0) == 0) ){ goto $label$124 }
	$17 = $12
	$22 = $12
	$16 = [0]
	goto $label$8 
	
.LABEL $label$124
	$15 = (($12 - $17) + (int_64)($29 == 0))
	$16 = ( $16 ? $15 : ((int_32)$16 > (int_32)$15) )
	
.LABEL $label$9
	$22 = $12
	
.LABEL $label$8
	$24 = ($22 - $17)
	$28 = ( $24 ? $16 : ((int_32)$16 < (int_32)$24) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$3 }
	$25 = ($26 + $28)
	$15 = ( $25 ? $20 : ((int_32)$20 < (int_32)$25) )
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$125 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$125 }
	$18 = ($36 <= [256])
	$36 = ($15 - $25)
	CALL memset(($5 + [432]), [32], ( $36 ? [256] : $18 ))
	$22 = *($0)
	$19 = ($22 & [32])
	if ( $18 ){ goto $label$127 }
	$18 = ($19 == 0)
	$19 = $36
	
.LOOP $label$128:
	if ( (($18 & [1]) == 0) ){ goto $label$129 }
	CALL $173(($5 + [432]), [256], $0)
	$22 = *($0)
	
.LABEL $label$129
	$23 = ($22 & [32])
	$18 = ($23 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$128 }
	if ( $23 ){ goto $label$125 }
	$36 = ($36 & [255])
	goto $label$126 
	
.LABEL $label$127
	if ( $19 ){ goto $label$125 }
	
.LABEL $label$126
	CALL $173(($5 + [432]), $36, $0)
	
.LABEL $label$125
	if ( (*($0) & [32]) ){ goto $label$130 }
	CALL $173($27, $26, $0)
	
.LABEL $label$130
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$131 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$131 }
	$18 = ($26 <= [256])
	$26 = ($15 - $25)
	CALL memset(($5 + [432]), [48], ( $26 ? [256] : $18 ))
	$22 = *($0)
	$19 = ($22 & [32])
	if ( $18 ){ goto $label$133 }
	$18 = ($19 == 0)
	$19 = $26
	
.LOOP $label$134:
	if ( (($18 & [1]) == 0) ){ goto $label$135 }
	CALL $173(($5 + [432]), [256], $0)
	$22 = *($0)
	
.LABEL $label$135
	$23 = ($22 & [32])
	$18 = ($23 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$134 }
	if ( $23 ){ goto $label$131 }
	$26 = ($26 & [255])
	goto $label$132 
	
.LABEL $label$133
	if ( $19 ){ goto $label$131 }
	
.LABEL $label$132
	CALL $173(($5 + [432]), $26, $0)
	
.LABEL $label$131
	if ( ((int_32)$24 >= (int_32)$16) ){ goto $label$136 }
	$18 = ($23 <= [256])
	$23 = ($28 - $24)
	CALL memset(($5 + [432]), [48], ( $23 ? [256] : $18 ))
	$16 = *($0)
	$19 = ($16 & [32])
	if ( $18 ){ goto $label$138 }
	$18 = ($19 == 0)
	$19 = $23
	
.LOOP $label$139:
	if ( (($18 & [1]) == 0) ){ goto $label$140 }
	CALL $173(($5 + [432]), [256], $0)
	$16 = *($0)
	
.LABEL $label$140
	$22 = ($16 & [32])
	$18 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$139 }
	if ( $22 ){ goto $label$136 }
	$23 = ($23 & [255])
	goto $label$137 
	
.LABEL $label$138
	if ( $19 ){ goto $label$136 }
	
.LABEL $label$137
	CALL $173(($5 + [432]), $23, $0)
	
.LABEL $label$136
	if ( (*($0) & [32]) ){ goto $label$141 }
	CALL $173($17, $24, $0)
	
.LABEL $label$141
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$4 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$4 }
	$18 = ($16 <= [256])
	$16 = ($15 - $25)
	CALL memset(($5 + [432]), [32], ( $16 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$143 }
	$18 = ($19 == 0)
	$19 = $16
	
.LOOP $label$144:
	if ( (($18 & [1]) == 0) ){ goto $label$145 }
	CALL $173(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$145
	$20 = ($17 & [32])
	$18 = ($20 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$144 }
	if ( $20 ){ goto $label$4 }
	$16 = ($16 & [255])
	goto $label$142 
	
.LABEL $label$143
	if ( $19 ){ goto $label$4 }
	
.LABEL $label$142
	CALL $173(($5 + [432]), $16, $0)
	goto $label$4 
	
.LABEL $label$7
	$23 = CALL __unordtf2($30, $29, $30, $29)
	$16 = ($31 + [3])
	if ( ($21 & [8192]) ){ goto $label$146 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$146 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$148 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$149:
	if ( (($15 & [1]) == 0) ){ goto $label$150 }
	CALL $173(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$150
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$149 }
	if ( $17 ){ goto $label$146 }
	$22 = ($22 & [255])
	goto $label$147 
	
.LABEL $label$148
	if ( $18 ){ goto $label$146 }
	
.LABEL $label$147
	CALL $173(($5 + [432]), $22, $0)
	
.LABEL $label$146
	$15 = *($0)
	if ( ($15 & [32]) ){ goto $label$155 }
	CALL $173($32, $31, $0)
	if ( ((*($0) & [32]) == 0) ){ goto $label$154 }
	goto $label$153 
	
.LABEL $label$155
	if ( ($15 & [32]) ){ goto $label$153 }
	
.LABEL $label$154
	$15 = uint_32(($28 & [32]) >> [5])
	CALL $173(( ( [8667] ? [8681] : $15 ) ? ( [22784] ? [20092] : $15 ) : $23 ), [3], $0)
	if ( ((int_32)($21 & [73728]) != (int_32)[8192]) ){ goto $label$151 }
	goto $label$152 
	
.LABEL $label$153
	if ( ((int_32)($21 & [73728]) != (int_32)[8192]) ){ goto $label$151 }
	
.LABEL $label$152
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$151 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$157 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$158:
	if ( (($15 & [1]) == 0) ){ goto $label$159 }
	CALL $173(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$159
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$158 }
	if ( $17 ){ goto $label$151 }
	$22 = ($22 & [255])
	goto $label$156 
	
.LABEL $label$157
	if ( $18 ){ goto $label$151 }
	
.LABEL $label$156
	CALL $173(($5 + [432]), $22, $0)
	
.LABEL $label$151
	$15 = ( $20 ? $16 : ((int_32)$20 > (int_32)$16) )
	goto $label$5 
	
.LABEL $label$6
	CALL $177(($5 + [320]), $30, $29, ($5 + [748]))
	$30 = *($5 + [328])
	$29 = *($5 + [320])
	CALL __addtf3(($5 + [304]), $29, $30, $29, $30)
	$30 = *((($5 + [304]) + [8]))
	$29 = *($5 + [304])
	if ( (CALL __eqtf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$160 }
	*($5 + [748]) = (*($5 + [748]) + [-1])
	
.LABEL $label$160
	$33 = ($28 | [32])
	if ( ((int_32)$33 != (int_32)[97]) ){ goto $label$173 }
	$22 = ($28 & [32])
	$26 = ( ($32 + [9]) ? $32 : $22 )
	if ( ((uint_32)$16 > (uint_32)[26]) ){ goto $label$171 }
	if ( (([27] - $16) == 0) ){ goto $label$171 }
	$15 = ($16 + [-27])
	$34 = (int_64)4612248968380809216
	$35 = (int_64)0
	
.LOOP $label$174:
	CALL __multf3(($5 + [208]), $35, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($5 + [208]) + [8]))
	$35 = *($5 + [208])
	$15 = ($15 + [1])
	if ( $15 ){ goto $label$174 }
	if ( ((int_32)*($26) != (int_32)[45]) ){ goto $label$172 }
	CALL __subtf3(($5 + [160]), $29, ((int_64)$30 ^ (int_64)-9223372036854775808), $35, $34)
	CALL __addtf3(($5 + [144]), $35, $34, *($5 + [160]), *((($5 + [160]) + [8])))
	$30 = ((int_64)*((($5 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$29 = *($5 + [144])
	goto $label$171 
	
.LABEL $label$173
	$15 = ((int_32)$16 < (int_32)[0])
	if ( (CALL __netf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$176 }
	CALL __multf3(($5 + [288]), $29, $30, (int_64)0, (int_64)4619285842798575616)
	$22 = (*($5 + [748]) + [-28])
	*($5 + [748]) = $22
	$30 = *((($5 + [288]) + [8]))
	$29 = *($5 + [288])
	goto $label$175 
	
.LABEL $label$176
	$22 = *($5 + [748])
	
.LABEL $label$175
	$27 = ( [6] ? $16 : $15 )
	$36 = ( ($5 + [752]) ? $9 : ((int_32)$22 < (int_32)[0]) )
	$19 = $36
	
.LOOP $label$177:
	$15 = CALL __fixunstfsi($29, $30)
	CALL __floatunsitf(($5 + [272]), $15)
	CALL __subtf3(($5 + [256]), $29, $30, *($5 + [272]), *((($5 + [272]) + [8])))
	CALL __multf3(($5 + [240]), *($5 + [256]), *((($5 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($19) = $15
	$19 = ($19 + [4])
	$30 = *((($5 + [240]) + [8]))
	$29 = *($5 + [240])
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$177 }
	if ( ((int_32)$22 < (int_32)[1]) ){ goto $label$180 }
	$18 = $36
	
.LOOP $label$181:
	$17 = ( $22 ? [29] : ((int_32)$22 < (int_32)[29]) )
	$15 = ($19 + [-4])
	if ( ($15 <= $18) ){ goto $label$182 }
	$30 = (CASTING uint_64)(uint_32 $17)
	$29 = (int_64)0
	
.LOOP $label$183:
	$29 = ((uint_64)$29 / (uint_64)(int_64)1000000000)
	$29 = ((int_64)((int_64)*($15) << (int_64)$30) + (int_64)((int_64)$29 & (int_64)4294967295))
	*($15) = (int_64))($29 - ((int_64)$29 * (int_64)1000000000))
	$15 = ($15 + [-4])
	if ( ((uint_32)$15 >= (uint_32)$18) ){ goto $label$183 }
	$15 = (CASTING uint_32)(uint_64 $29)
	if ( ($15 == 0) ){ goto $label$182 }
	*(($18 = ($18 + [-4]))) = $15
	
.LABEL $label$182
	
.LOOP $label$185:
	$15 = $19
	if ( ((uint_32)$15 <= (uint_32)$18) ){ goto $label$184 }
	$19 = ($15 + [-4])
	if ( (*($19) == 0) ){ goto $label$185 }
	
.LABEL $label$184
	$19 = $15
	$22 = ($22 - $17)
	if ( ((int_32)$22 > (int_32)[0]) ){ goto $label$181 }
	*($5 + [748]) = $22
	if ( ((int_32)$22 > (int_32)[-1]) ){ goto $label$178 }
	goto $label$179 
	
.LABEL $label$180
	$15 = $19
	$18 = $36
	if ( ((int_32)$22 > (int_32)[-1]) ){ goto $label$178 }
	
.LABEL $label$179
	$26 = (((uint_32)($27 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$33 != (int_32)[102]) ){ goto $label$187 }
	$37 = ($36 + ($26 << [2]))
	
.LOOP $label$188:
	$19 = ([0] - $22)
	$23 = ( $19 ? [9] : ((int_32)$19 < (int_32)[9]) )
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$190 }
	$25 = uint_32([1000000000] >> $23)
	$24 = ((int_32)([-1] << $23) ^ (int_32)[-1])
	$17 = [0]
	$19 = $18
	
.LOOP $label$191:
	$16 = *($19)
	*($19) = (uint_32($16 >> $23) + $17)
	$17 = ((int_32)($16 & $24) * (int_32)$25)
	$19 = ($19 + [4])
	if ( ($19 <= $15) ){ goto $label$191 }
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	if ( ($17 == 0) ){ goto $label$189 }
	*($15) = $17
	$15 = ($15 + [4])
	goto $label$189 
	
.LABEL $label$190
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	
.LABEL $label$189
	$15 = ( $37 ? $15 : ((int_32)int_32(($15 - $36) >> [2]) > (int_32)$26) )
	$22 = ($23 + $22)
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$188 }
	goto $label$186 
	
.LABEL $label$187
	
.LOOP $label$192:
	$19 = ([0] - $22)
	$23 = ( $19 ? [9] : ((int_32)$19 < (int_32)[9]) )
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$194 }
	$25 = uint_32([1000000000] >> $23)
	$24 = ((int_32)([-1] << $23) ^ (int_32)[-1])
	$17 = [0]
	$19 = $18
	
.LOOP $label$195:
	$16 = *($19)
	*($19) = (uint_32($16 >> $23) + $17)
	$17 = ((int_32)($16 & $24) * (int_32)$25)
	$19 = ($19 + [4])
	if ( ($19 <= $15) ){ goto $label$195 }
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	if ( ($17 == 0) ){ goto $label$193 }
	*($15) = $17
	$15 = ($15 + [4])
	goto $label$193 
	
.LABEL $label$194
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	
.LABEL $label$193
	$15 = ( ($18 + ($26 << [2])) ? $15 : ((int_32)int_32(($15 - $18) >> [2]) > (int_32)$26) )
	$22 = ($23 + $22)
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$192 }
	
.LABEL $label$186
	*($5 + [748]) = $22
	
.LABEL $label$178
	$19 = [0]
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$196 }
	$19 = ((int_32)int_32(($36 - $18) >> [2]) * (int_32)[9])
	$16 = *($18)
	if ( ($16 <= [10]) ){ goto $label$196 }
	$17 = [10]
	
.LOOP $label$197:
	$19 = ($19 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( ((uint_32)$16 >= (uint_32)$17) ){ goto $label$197 }
	
.LABEL $label$196
	$23 = ((int_32)$33 == (int_32)[103])
	$25 = (((int_32)$27 != (int_32)[0]) & $23)
	$16 = ( [0] ? $19 : ((int_32)$33 == (int_32)[102]) )
	$17 = (($27 - $16) - $25)
	if ( ((int_32)$17 >= (int_32)(((int_32)int_32(($15 - $36) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$198 }
	$24 = ($17 + [147456])
	$26 = ((int_32)$24 / (int_32)[9])
	$37 = ($36 + ($26 << [2]))
	$22 = ($37 + [-65532])
	$17 = [10]
	$26 = ((int_32)$26 * (int_32)[9])
	if ( ((int_32)($24 - $26) > (int_32)[7]) ){ goto $label$199 }
	$16 = (((($27 + ([0] - $25)) + [147455]) - $16) - $26)
	$17 = [10]
	
.LOOP $label$200:
	$17 = ((int_32)$17 * (int_32)[10])
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$200 }
	
.LABEL $label$199
	$24 = ((uint_32)$25 / (uint_32)$17)
	$25 = *($22)
	$16 = ($25 - ((int_32)$24 * (int_32)$17))
	$26 = ($22 + [4])
	if ( ((int_32)$26 != (int_32)$15) ){ goto $label$202 }
	if ( ($16 == 0) ){ goto $label$201 }
	
.LABEL $label$202
	if ( ($24 & [1]) ){ goto $label$204 }
	$29 = (int_64)4643211215818981376
	$30 = (int_64)0
	if ( ((uint_32)$22 <= (uint_32)$18) ){ goto $label$203 }
	if ( ((int_32)$17 != (int_32)[1000000000]) ){ goto $label$203 }
	if ( ((*(($22 + [-4])) & [1]) == 0) ){ goto $label$203 }
	
.LABEL $label$204
	$29 = (int_64)4643211215818981376
	$30 = (int_64)1
	
.LABEL $label$203
	$34 = (int_64)4611123068473966592
	$24 = uint_32($17 >> [1])
	if ( ($16 <= $24) ){ goto $label$205 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$16 == (int_32)$24) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$15) )
	
.LABEL $label$205
	if ( ($31 == 0) ){ goto $label$206 }
	if ( ((int_32)*($32) != (int_32)[45]) ){ goto $label$206 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$29 = ((int_64)$29 ^ (int_64)-9223372036854775808)
	
.LABEL $label$206
	CALL __addtf3(($5 + [224]), $30, $29, (int_64)0, $34)
	$16 = ($25 - $16)
	*($22) = $16
	if ( (CALL __eqtf2(*($5 + [224]), *((($5 + [224]) + [8])), $30, $29) == 0) ){ goto $label$201 }
	$19 = ($16 + $17)
	*($22) = $19
	if ( ($19 <= [1000000000]) ){ goto $label$207 }
	$19 = ($37 + [-65536])
	
.LOOP $label$208:
	*(($19 + [4])) = [0]
	if ( ((uint_32)$19 >= (uint_32)$18) ){ goto $label$209 }
	*(($18 = ($18 + [-4]))) = [0]
	
.LABEL $label$209
	$17 = (*($19) + [1])
	*($19) = $17
	$19 = ($19 + [-4])
	if ( ((uint_32)$17 > (uint_32)[999999999]) ){ goto $label$208 }
	$22 = ($19 + [4])
	
.LABEL $label$207
	$19 = ((int_32)int_32(($36 - $18) >> [2]) * (int_32)[9])
	$16 = *($18)
	if ( ($16 <= [10]) ){ goto $label$201 }
	$17 = [10]
	
.LOOP $label$210:
	$19 = ($19 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( ((uint_32)$16 >= (uint_32)$17) ){ goto $label$210 }
	
.LABEL $label$201
	$17 = ($22 + [4])
	$15 = ( $17 ? $15 : ((uint_32)$15 > (uint_32)$17) )
	
.LABEL $label$198
	$22 = ([0] - $19)
	
.LOOP $label$213:
	$16 = $15
	if ( ((uint_32)$16 <= (uint_32)$18) ){ goto $label$212 }
	$15 = ($16 + [-4])
	if ( (*($15) == 0) ){ goto $label$213 }
	$24 = [1]
	if ( $23 ){ goto $label$211 }
	goto $label$162 
	
.LABEL $label$212
	$24 = [0]
	if ( ($23 == 0) ){ goto $label$162 }
	
.LABEL $label$211
	$15 = ($27 + ($27 == 0))
	if ( ((int_32)$15 <= (int_32)$19) ){ goto $label$170 }
	if ( ((int_32)$19 < (int_32)[-4]) ){ goto $label$170 }
	$28 = ($28 + [-1])
	$27 = (($15 + [-1]) - $19)
	$23 = ($21 & [8])
	if ( ($23 == 0) ){ goto $label$169 }
	goto $label$161 
	
.LABEL $label$172
	CALL __addtf3(($5 + [192]), $29, $30, $35, $34)
	CALL __subtf3(($5 + [176]), *($5 + [192]), *((($5 + [192]) + [8])), $35, $34)
	$30 = *((($5 + [176]) + [8]))
	$29 = *($5 + [176])
	
.LABEL $label$171
	$19 = $10
	$15 = int_32($23 >> [31])
	$23 = *($5 + [748])
	$15 = ((int_32)($23 + $15) ^ (int_32)$15)
	if ( ($15 == 0) ){ goto $label$215 }
	$18 = [0]
	
.LOOP $label$216:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [692]) + $18) + [11])) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$18 = ($18 + [-1])
	$17 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $17 ){ goto $label$216 }
	$19 = ((($5 + [692]) + $18) + [12])
	if ( $18 ){ goto $label$214 }
	
.LABEL $label$215
	*(($19 = ($19 + [-1]))) = [48]
	
.LABEL $label$214
	$25 = ($31 | [2])
	*(($24 = ($19 + [-2]))) = ($28 + [15])
	*(($19 + [-1])) = ( [45] ? [43] : ((int_32)$23 < (int_32)[0]) )
	if ( ($21 & [8]) ){ goto $label$217 }
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$168 }
	$15 = ($5 + [704])
	
.LOOP $label$218:
	$18 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [80]), $18)
	CALL __subtf3(($5 + [64]), $29, $30, *($5 + [80]), *((($5 + [80]) + [8])))
	CALL __multf3(($5 + [48]), *($5 + [64]), *((($5 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($15) = (*(($18 + [22768])) | $22)
	$30 = *((($5 + [48]) + [8]))
	$29 = *($5 + [48])
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$219 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$219
	$15 = $18
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$218 }
	goto $label$167 
	
.LABEL $label$217
	$15 = ($5 + [704])
	
.LOOP $label$220:
	$18 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [128]), $18)
	CALL __subtf3(($5 + [112]), $29, $30, *($5 + [128]), *((($5 + [128]) + [8])))
	CALL __multf3(($5 + [96]), *($5 + [112]), *((($5 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($15) = (*(($18 + [22768])) | $22)
	$30 = *((($5 + [96]) + [8]))
	$29 = *($5 + [96])
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$221 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$221
	$15 = $18
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$220 }
	goto $label$167 
	
.LABEL $label$170
	$27 = ($15 + [-1])
	$28 = ($28 + [-2])
	$23 = ($21 & [8])
	if ( $23 ){ goto $label$161 }
	
.LABEL $label$169
	$15 = [9]
	if ( ($24 == 0) ){ goto $label$222 }
	$23 = *(($16 + [-4]))
	if ( ($23 == 0) ){ goto $label$222 }
	$15 = [0]
	if ( ((uint_32)$23 % (uint_32)[10]) ){ goto $label$222 }
	$17 = [10]
	$15 = [0]
	
.LOOP $label$223:
	$15 = ($15 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( (((uint_32)$23 % (uint_32)$17) == 0) ){ goto $label$223 }
	
.LABEL $label$222
	$17 = (((int_32)int_32(($16 - $36) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($28 | [32]) != (int_32)[102]) ){ goto $label$166 }
	$23 = [0]
	$15 = ($17 - $15)
	$15 = ( $15 ? [0] : ((int_32)$15 > (int_32)[0]) )
	$27 = ( $27 ? $15 : ((int_32)$27 < (int_32)$15) )
	goto $label$161 
	
.LABEL $label$168
	$18 = ($5 + [704])
	
.LOOP $label$224:
	$19 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [32]), $19)
	CALL __subtf3(($5 + [16]), $29, $30, *($5 + [32]), *((($5 + [32]) + [8])))
	CALL __multf3($5, *($5 + [16]), *((($5 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($15 = $18)) = (*(($19 + [22768])) | $22)
	$30 = *(($5 + [8]))
	$29 = *($5)
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$225 }
	if ( (CALL __eqtf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$225 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$225
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$224 }
	
.LABEL $label$167
	$15 = [-1]
	$22 = ($10 - $24)
	if ( ((int_32)(([2147483645] - $25) - $22) < (int_32)$16) ){ goto $label$5 }
	$23 = ($18 - ($5 + [704]))
	$28 = ( ( ($16 + [2]) ? $23 : ((int_32)($8 + $18) < (int_32)$16) ) ? $23 : $16 )
	$16 = (($22 + $25) + $28)
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$163 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$163 }
	$15 = ($27 <= [256])
	$27 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $27 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$165 }
	$15 = ($18 == 0)
	$18 = $27
	
.LOOP $label$226:
	if ( (($15 & [1]) == 0) ){ goto $label$227 }
	CALL $173(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$227
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$226 }
	if ( $17 ){ goto $label$163 }
	$27 = ($27 & [255])
	goto $label$164 
	
.LABEL $label$166
	$23 = [0]
	$15 = (($17 + $19) - $15)
	$15 = ( $15 ? [0] : ((int_32)$15 > (int_32)[0]) )
	$27 = ( $27 ? $15 : ((int_32)$27 < (int_32)$15) )
	goto $label$161 
	
.LABEL $label$165
	if ( $18 ){ goto $label$163 }
	
.LABEL $label$164
	CALL $173(($5 + [432]), $27, $0)
	
.LABEL $label$163
	if ( (*($0) & [32]) ){ goto $label$228 }
	CALL $173($26, $25, $0)
	
.LABEL $label$228
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$229 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$229 }
	$15 = ($25 <= [256])
	$25 = ($20 - $16)
	CALL memset(($5 + [432]), [48], ( $25 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$231 }
	$15 = ($18 == 0)
	$18 = $25
	
.LOOP $label$232:
	if ( (($15 & [1]) == 0) ){ goto $label$233 }
	CALL $173(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$233
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$232 }
	if ( $17 ){ goto $label$229 }
	$25 = ($25 & [255])
	goto $label$230 
	
.LABEL $label$231
	if ( $18 ){ goto $label$229 }
	
.LABEL $label$230
	CALL $173(($5 + [432]), $25, $0)
	
.LABEL $label$229
	if ( (*($0) & [32]) ){ goto $label$234 }
	CALL $173(($5 + [704]), $23, $0)
	
.LABEL $label$234
	$23 = ($28 - $23)
	if ( ((int_32)$23 < (int_32)[1]) ){ goto $label$235 }
	$15 = ($23 <= [256])
	CALL memset(($5 + [432]), [48], ( $23 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$237 }
	$15 = ($18 == 0)
	$18 = $23
	
.LOOP $label$238:
	if ( (($15 & [1]) == 0) ){ goto $label$239 }
	CALL $173(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$239
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$238 }
	if ( $17 ){ goto $label$235 }
	$23 = ($23 & [255])
	goto $label$236 
	
.LABEL $label$237
	if ( $18 ){ goto $label$235 }
	
.LABEL $label$236
	CALL $173(($5 + [432]), $23, $0)
	
.LABEL $label$235
	if ( (*($0) & [32]) ){ goto $label$240 }
	CALL $173($24, $22, $0)
	
.LABEL $label$240
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$241 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$241 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$243 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$244:
	if ( (($15 & [1]) == 0) ){ goto $label$245 }
	CALL $173(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$245
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$244 }
	if ( $17 ){ goto $label$241 }
	$22 = ($22 & [255])
	goto $label$242 
	
.LABEL $label$243
	if ( $18 ){ goto $label$241 }
	
.LABEL $label$242
	CALL $173(($5 + [432]), $22, $0)
	
.LABEL $label$241
	$15 = ( $20 ? $16 : ((int_32)$20 > (int_32)$16) )
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$162
	$23 = ($21 & [8])
	
.LABEL $label$161
	$15 = [-1]
	$25 = ($27 | $23)
	if ( ((int_32)$27 > (int_32)( [2147483645] ? [2147483646] : $25 )) ){ goto $label$5 }
	$26 = (($27 + ((int_32)$25 != (int_32)[0])) + [1])
	$33 = ((int_32)($28 | [32]) != (int_32)[102])
	if ( $33 ){ goto $label$247 }
	if ( ((int_32)$19 > (int_32)([2147483647] - $26)) ){ goto $label$5 }
	$19 = ( $19 ? [0] : ((int_32)$19 > (int_32)[0]) )
	goto $label$246 
	
.LABEL $label$247
	$17 = $10
	$38 = ((int_32)$19 < (int_32)[0])
	$15 = ( $22 ? $19 : $38 )
	if ( ($15 == 0) ){ goto $label$248 }
	
.LOOP $label$249:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($17 = ($17 + [-1]))) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$22 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $22 ){ goto $label$249 }
	
.LABEL $label$248
	if ( ((int_32)($10 - $17) > (int_32)[1]) ){ goto $label$250 }
	$15 = ($17 + [-1])
	
.LOOP $label$251:
	*($15) = [48]
	$19 = ($10 - $15)
	$17 = ($15 + [-1])
	$15 = $17
	if ( ((int_32)$19 < (int_32)[2]) ){ goto $label$251 }
	$17 = ($17 + [1])
	
.LABEL $label$250
	*(($37 = ($17 + [-2]))) = $28
	$15 = [-1]
	*(($17 + [-1])) = ( [45] ? [43] : $38 )
	$19 = ($10 - $37)
	if ( ((int_32)$19 > (int_32)([2147483647] - $26)) ){ goto $label$5 }
	
.LABEL $label$246
	$15 = [-1]
	$19 = ($19 + $26)
	if ( ((int_32)$19 > (int_32)((int_32)$31 ^ (int_32)[2147483647])) ){ goto $label$5 }
	$26 = ($19 + $31)
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$252 }
	if ( ((int_32)$20 <= (int_32)$26) ){ goto $label$252 }
	$15 = ($28 <= [256])
	$28 = ($20 - $26)
	CALL memset(($5 + [432]), [32], ( $28 ? [256] : $15 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $15 ){ goto $label$254 }
	$15 = ($19 == 0)
	$19 = $28
	
.LOOP $label$255:
	if ( (($15 & [1]) == 0) ){ goto $label$256 }
	CALL $173(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$256
	$22 = ($17 & [32])
	$15 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$255 }
	if ( $22 ){ goto $label$252 }
	$28 = ($28 & [255])
	goto $label$253 
	
.LABEL $label$254
	if ( $19 ){ goto $label$252 }
	
.LABEL $label$253
	CALL $173(($5 + [432]), $28, $0)
	
.LABEL $label$252
	if ( (*($0) & [32]) ){ goto $label$257 }
	CALL $173($32, $31, $0)
	
.LABEL $label$257
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$258 }
	if ( ((int_32)$20 <= (int_32)$26) ){ goto $label$258 }
	$15 = ($28 <= [256])
	$28 = ($20 - $26)
	CALL memset(($5 + [432]), [48], ( $28 ? [256] : $15 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $15 ){ goto $label$260 }
	$15 = ($19 == 0)
	$19 = $28
	
.LOOP $label$261:
	if ( (($15 & [1]) == 0) ){ goto $label$262 }
	CALL $173(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$262
	$22 = ($17 & [32])
	$15 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$261 }
	if ( $22 ){ goto $label$258 }
	$28 = ($28 & [255])
	goto $label$259 
	
.LABEL $label$260
	if ( $19 ){ goto $label$258 }
	
.LABEL $label$259
	CALL $173(($5 + [432]), $28, $0)
	
.LABEL $label$258
	if ( $33 ){ goto $label$273 }
	$23 = ( $36 ? $18 : ((uint_32)$18 > (uint_32)$36) )
	$22 = $23
	
.LOOP $label$274:
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$276 }
	$18 = [0]
	
.LOOP $label$277:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($6 + $18)) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$18 = ($18 + [-1])
	$17 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $17 ){ goto $label$277 }
	goto $label$275 
	
.LABEL $label$276
	$18 = [0]
	
.LABEL $label$275
	$15 = ($7 + $18)
	if ( ((int_32)$22 == (int_32)$23) ){ goto $label$281 }
	if ( ((uint_32)$15 <= (uint_32)($5 + [704])) ){ goto $label$280 }
	
.LOOP $label$282:
	*(($15 = ($15 + [-1]))) = [48]
	if ( ((uint_32)$15 > (uint_32)($5 + [704])) ){ goto $label$282 }
	$15 = ($5 + [704])
	if ( ((*($0) & [32]) == 0) ){ goto $label$279 }
	goto $label$278 
	
.LABEL $label$281
	if ( $18 ){ goto $label$280 }
	*(($15 = ($15 + [-1]))) = [48]
	
.LABEL $label$280
	if ( (*($0) & [32]) ){ goto $label$278 }
	
.LABEL $label$279
	CALL $173($15, ($7 - $15), $0)
	
.LABEL $label$278
	$22 = ($22 + [4])
	if ( ((uint_32)$22 <= (uint_32)$36) ){ goto $label$274 }
	if ( ($25 == 0) ){ goto $label$283 }
	if ( (*($0) & [32]) ){ goto $label$283 }
	CALL $173([8724], [1], $0)
	
.LABEL $label$283
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$272 }
	if ( ((uint_32)$22 >= (uint_32)$16) ){ goto $label$271 }
	
.LOOP $label$284:
	$15 = $7
	$18 = *($22)
	if ( ($18 == 0) ){ goto $label$286 }
	$15 = $7
	
.LOOP $label$287:
	$19 = ((uint_32)$18 / (uint_32)[10])
	*(($15 = ($15 + [-1]))) = (($18 - ((int_32)$19 * (int_32)[10])) | [48])
	$17 = ((uint_32)$18 > (uint_32)[9])
	$18 = $19
	if ( $17 ){ goto $label$287 }
	if ( ((uint_32)$15 <= (uint_32)($5 + [704])) ){ goto $label$285 }
	
.LABEL $label$286
	
.LOOP $label$288:
	*(($15 = ($15 + [-1]))) = [48]
	if ( ((uint_32)$15 > (uint_32)($5 + [704])) ){ goto $label$288 }
	
.LABEL $label$285
	if ( (*($0) & [32]) ){ goto $label$289 }
	CALL $173($15, ( $27 ? [9] : ((int_32)$27 < (int_32)[9]) ), $0)
	
.LABEL $label$289
	$15 = ($27 + [-9])
	if ( ((int_32)$27 < (int_32)[10]) ){ goto $label$270 }
	$27 = $15
	$22 = ($22 + [4])
	if ( ($22 <= $16) ){ goto $label$284 }
	goto $label$270 
	
.LABEL $label$273
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$266 }
	$25 = ( $16 ? ($18 + [4]) : $24 )
	if ( ($23 == 0) ){ goto $label$268 }
	$22 = $18
	
.LOOP $label$290:
	$17 = $7
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$292 }
	$19 = [0]
	
.LOOP $label$293:
	$17 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [704]) + $19) + [8])) = (($15 - ((int_32)$17 * (int_32)[10])) | [48])
	$19 = ($19 + [-1])
	$16 = ((uint_32)$15 > (uint_32)[9])
	$15 = $17
	if ( $16 ){ goto $label$293 }
	$17 = ((($5 + [704]) + $19) + [9])
	if ( $19 ){ goto $label$291 }
	
.LABEL $label$292
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$291
	if ( ((int_32)$22 == (int_32)$18) ){ goto $label$295 }
	if ( ((uint_32)$17 <= (uint_32)($5 + [704])) ){ goto $label$294 }
	
.LOOP $label$296:
	*(($17 = ($17 + [-1]))) = [48]
	if ( ((uint_32)$17 > (uint_32)($5 + [704])) ){ goto $label$296 }
	goto $label$294 
	
.LABEL $label$295
	$15 = *($0)
	if ( ($15 & [32]) ){ goto $label$297 }
	CALL $173($17, [1], $0)
	$15 = *($0)
	
.LABEL $label$297
	$17 = ($17 + [1])
	if ( ($15 & [32]) ){ goto $label$294 }
	CALL $173([8724], [1], $0)
	
.LABEL $label$294
	$15 = ($7 - $17)
	if ( (*($0) & [32]) ){ goto $label$298 }
	CALL $173($17, ( $15 ? $27 : ((int_32)$27 > (int_32)$15) ), $0)
	
.LABEL $label$298
	$27 = ($27 - $15)
	$22 = ($22 + [4])
	if ( ((uint_32)$22 >= (uint_32)$25) ){ goto $label$267 }
	if ( ((int_32)$27 > (int_32)[-1]) ){ goto $label$290 }
	goto $label$267 
	
.LABEL $label$272
	$15 = $27
	if ( ((int_32)$15 >= (int_32)[1]) ){ goto $label$269 }
	goto $label$265 
	
.LABEL $label$271
	$15 = $27
	
.LABEL $label$270
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$265 }
	
.LABEL $label$269
	$18 = ($15 <= [256])
	CALL memset(($5 + [432]), [48], ( $15 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$300 }
	$18 = ($19 == 0)
	$19 = $15
	
.LOOP $label$301:
	if ( (($18 & [1]) == 0) ){ goto $label$302 }
	CALL $173(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$302
	$16 = ($17 & [32])
	$18 = ($16 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$301 }
	if ( $16 ){ goto $label$265 }
	$15 = ($15 & [255])
	goto $label$299 
	
.LABEL $label$300
	if ( $19 ){ goto $label$265 }
	
.LABEL $label$299
	CALL $173(($5 + [432]), $15, $0)
	if ( ((int_32)$21 == (int_32)[8192]) ){ goto $label$264 }
	goto $label$263 
	
.LABEL $label$268
	$22 = $18
	
.LOOP $label$303:
	$17 = $7
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$305 }
	$19 = [0]
	
.LOOP $label$306:
	$17 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [704]) + $19) + [8])) = (($15 - ((int_32)$17 * (int_32)[10])) | [48])
	$19 = ($19 + [-1])
	$16 = ((uint_32)$15 > (uint_32)[9])
	$15 = $17
	if ( $16 ){ goto $label$306 }
	$17 = ((($5 + [704]) + $19) + [9])
	if ( $19 ){ goto $label$304 }
	
.LABEL $label$305
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$304
	if ( ((int_32)$22 == (int_32)$18) ){ goto $label$308 }
	if ( ((uint_32)$17 <= (uint_32)($5 + [704])) ){ goto $label$307 }
	
.LOOP $label$309:
	*(($17 = ($17 + [-1]))) = [48]
	if ( ((uint_32)$17 > (uint_32)($5 + [704])) ){ goto $label$309 }
	goto $label$307 
	
.LABEL $label$308
	if ( (*($0) & [32]) ){ goto $label$310 }
	CALL $173($17, [1], $0)
	
.LABEL $label$310
	$17 = ($17 + [1])
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$307 }
	if ( (*($0) & [32]) ){ goto $label$307 }
	CALL $173([8724], [1], $0)
	
.LABEL $label$307
	$15 = ($7 - $17)
	if ( (*($0) & [32]) ){ goto $label$311 }
	CALL $173($17, ( $15 ? $27 : ((int_32)$27 > (int_32)$15) ), $0)
	
.LABEL $label$311
	$27 = ($27 - $15)
	$22 = ($22 + [4])
	if ( ((uint_32)$22 >= (uint_32)$25) ){ goto $label$267 }
	if ( ((int_32)$27 > (int_32)[-1]) ){ goto $label$303 }
	
.LABEL $label$267
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$266 }
	$18 = ($27 <= [256])
	CALL memset(($5 + [432]), [48], ( $27 ? [256] : $18 ))
	$19 = *($0)
	$15 = ($19 & [32])
	if ( $18 ){ goto $label$313 }
	$15 = ($15 == 0)
	$18 = $27
	
.LOOP $label$314:
	if ( (($15 & [1]) == 0) ){ goto $label$315 }
	CALL $173(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$315
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$314 }
	if ( $17 ){ goto $label$266 }
	$27 = ($27 & [255])
	goto $label$312 
	
.LABEL $label$313
	if ( $15 ){ goto $label$266 }
	
.LABEL $label$312
	CALL $173(($5 + [432]), $27, $0)
	
.LABEL $label$266
	if ( (*($0) & [32]) ){ goto $label$265 }
	CALL $173($37, ($10 - $37), $0)
	
.LABEL $label$265
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$263 }
	
.LABEL $label$264
	if ( ((int_32)$20 <= (int_32)$26) ){ goto $label$263 }
	$15 = ($16 <= [256])
	$16 = ($20 - $26)
	CALL memset(($5 + [432]), [32], ( $16 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$317 }
	$15 = ($18 == 0)
	$18 = $16
	
.LOOP $label$318:
	if ( (($15 & [1]) == 0) ){ goto $label$319 }
	CALL $173(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$319
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$318 }
	if ( $17 ){ goto $label$263 }
	$16 = ($16 & [255])
	goto $label$316 
	
.LABEL $label$317
	if ( $18 ){ goto $label$263 }
	
.LABEL $label$316
	CALL $173(($5 + [432]), $16, $0)
	
.LABEL $label$263
	$15 = ( $20 ? $26 : ((int_32)$20 > (int_32)$26) )
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	
.LABEL $label$3
	*(CALL $145()) = [75]
	
.LABEL $label$2
	$14 = [-1]
	
.LABEL $label$1
	$global$0 = ($5 + [8128])
	$15
	$18
	return $14
}

void .FUNC $183 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = (*($2) + [16])
	*(($2 = *($1))) = $1
	$3 = *($0 + [48])
	$0 = *($0)
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [52])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *(($0 + [48]))
	$3 = ( *(($0 + [52])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$3 = *($0 + [60])
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [64])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *(($0 + [60]))
	$3 = ( *(($0 + [64])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$3 = *($0 + [72])
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [76])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *(($0 + [72]))
	$0 = ( *(($0 + [76])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	*($2) = ($0 + $1)
	
.LABEL $label$6
}

int_32 .FUNC $68 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10040])
	$2 = *($0 + [4])
	$3 = *($2 + [72])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-3665743729458675712, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [72]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [9665])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $88($6, CALL $fimport$20(*($6), *($6 + [8]), (int_64)-3665743729458675712, $5))
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [9665])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [72])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $197($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $110(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [10104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$22()), [10149])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10199])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [68]))
	$6 = *(($1 + [72]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3665743729458675712, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [76]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3665743729458675711, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_upperbound(*($2), *($2 + [8]), (int_64)-3665743729458675712, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$7), [9665])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $88($7, CALL $fimport$20(*($7), *($7 + [8]), (int_64)-3665743729458675712, $6))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$7), [9665])
	
.LABEL $label$2
	*(($4 + [72])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3665743729458675712, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$7), [9665])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $88($7, CALL $fimport$20(*($7), *($7 + [8]), (int_64)-3665743729458675712, $6))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$7), [9665])
	
.LABEL $label$2
	*(($4 + [72])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9716])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $197($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([112])) + [16]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [64]) = (int_64)0
	*($5 + [96]) = $0
	*(($5 + [88])) = (int_64)0
	*(($5 + [80])) = (int_64)0
	*(($5 + [72])) = (int_64)0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [64])
	CALL $77(($3 + [40]), ($3 + [32]))
	*($5 + [100]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $76(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $200($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$22()), [9792])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([80])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = $1
	CALL $106(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [68])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $90(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10040])
	$2 = *($0 + [4])
	$3 = *(($2 + [76]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-3665743729458675711, ($1 + [8]), *($2))
	*((*(($0 + [4])) + [76])) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [9665])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $88($6, CALL $fimport$20(*($6), *($6 + [8]), (int_64)-3665743729458675712, $5))
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [9665])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [76])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [10104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$22()), [10149])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10199])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [48])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [100]))
}

int_32 .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = $1
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = $1
	$4 = ($4 & [1])
	$4 = *($0)
	if ( (( *($0 + [4]) ? uint_32($4 >> [1]) : $4 ) == 0) ){ goto $label$1 }
	$6 = ($0 + [1])
	$5 = ($0 + [8])
	$4 = ( *($5) ? $6 : $4 )
	$7 = ($2 + [-1])
	$3 = $1
	
.LOOP $label$2:
	$8 = *($4)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$3 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$4 }
	$2 = ($8 + [-87])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$2 = ($8 + [-55])
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	CALL eosio_assert([0], [8192])
	
.LABEL $label$3
	$9 = ($2 << [4])
	*($3) = $9
	$11 = uint_32($11 >> [1])
	$12 = ($0 + [4])
	$13 = *($12)
	$11 = *($0)
	$2 = ($11 & [1])
	$8 = *($5)
	$10 = ($4 + [1])
	if ( ((int_32)$10 == (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$9 }
	$8 = *($10)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$7 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$8 }
	$2 = ($8 + [-87])
	goto $label$7 
	
.LABEL $label$9
	$4 = $10
	$3 = ($3 + [1])
	if ( $7 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$8
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$10 }
	$2 = ($8 + [-55])
	goto $label$7 
	
.LABEL $label$10
	$2 = [0]
	CALL eosio_assert([0], [8192])
	$9 = *($3)
	
.LABEL $label$7
	*($3) = ($9 | $2)
	$4 = ($4 + [2])
	$2 = *($0)
	$11 = uint_32($2 >> [1])
	$2 = ($2 & [1])
	$13 = *($12)
	$8 = *($5)
	$3 = ($3 + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	$7 = ($7 + [-1])
	if ( ((int_32)$4 != (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$2 }
	
.LABEL $label$1
	return ($3 - $1)
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9739])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9739])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($0, *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [9739])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9716])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $197($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [48])
	CALL $89(($3 + [40]), ($3 + [32]))
	*($5 + [68]) = $1
	*($5 + [72 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $90(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $200($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9716])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $197($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9739])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9739])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $91(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $200($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [304])
	$global$0 = $2
	$3 = *($0)
	CALL $92(*($0 + [4]), $1)
	*($2 + [216]) = ($2 + [193])
	*($2 + [212]) = $2
	*($2 + [208]) = $2
	*($2 + [224]) = ($2 + [208])
	*($2 + [236]) = ($1 + [8])
	*($2 + [232]) = $1
	*($2 + [240]) = ($1 + [16])
	*($2 + [244]) = ($1 + [48])
	*($2 + [248]) = ($1 + [80])
	*($2 + [252]) = ($1 + [88])
	*($2 + [256]) = ($1 + [112])
	*($2 + [260]) = ($1 + [144])
	*($2 + [264]) = ($1 + [148])
	*($2 + [268]) = ($1 + [149])
	*($2 + [272]) = ($1 + [152])
	*($2 + [276]) = ($1 + [160])
	*($2 + [280]) = ($1 + [161])
	*($2 + [284]) = ($1 + [162])
	*($2 + [288]) = ($1 + [168])
	*($2 + [292]) = ($1 + [184])
	*($2 + [296]) = ($1 + [192])
	*($2 + [300]) = ($1 + [200])
	CALL $93(($2 + [232]), ($2 + [224]))
	$4 = *($1)
	*($1 + [212]) = CALL db_store_i64(*($3 + [8]), (int_64)4229443000054317056, *(*($0 + [8])), $4, $2, [193])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($2 + [236]) = $1
	*($2 + [244]) = $1
	*($2 + [240]) = *(($0 + [8]))
	*($2 + [232]) = $3
	*($2 + [224]) = ($2 + [232])
	CALL $94(($2 + [224]), ($3 + [36]), ($3 + [37]), ($3 + [38]), ($3 + [39]))
	$global$0 = ($2 + [304])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	$5 = [0]
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$6 = *($1)
	*($4 + [8]) = $6
	*($4 + [16]) = $2
	$1 = CALL db_find_i64($6, $2, (int_64)3607749779137757184, $3)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$4 }
	$5 = CALL $87(($4 + [8]), $1)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($4 + [8])), [9665])
	*(($0 + [8])) = *(($5 + [8]))
	*($0) = *($5)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$3 }
	$7 = ($4 + [36])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$5:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$5 }
	$5 = *(($4 + [32]))
	goto $label$1 
	
.LABEL $label$4
	*($0) = (int_64)0
	*($0 + [8]) = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [10661])
	$2 = ((int_64)$3 & (int_64)72057594037927935)
	
.LOOP $label$8:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$7 = [1]
	$0 = $5
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$0 = ((int_32)$5 < (int_32)[6])
	$1 = ($5 + [1])
	$5 = $1
	if ( $0 ){ goto $label$10 }
	$7 = [1]
	$5 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($7, [10710])
	
.LABEL $label$3
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$2
	$5 = $1
	
.LABEL $label$1
	*($7) = $1
	CALL _ZdlPv($5)
	$global$0 = ($4 + [48])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = *($6 + [4])
	$8 = *($7 + [216])
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$2 }
	$8 = *($6)
	*(($5 + [24])) = (int_64)0
	*(($5 + [16])) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	$8 = CALL db_idx256_find_primary(*($8), *($8 + [8]), (int_64)4229443000054317056, $5, [2], *($7))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx256_remove($8)
	
.LABEL $label$1
	$6 = *($0)
	$7 = *($6 + [4])
	$8 = *(($7 + [220]))
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$4 }
	$8 = *($6)
	$8 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)4229443000054317057, $5, *($7))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($8)
	
.LABEL $label$3
	$6 = *($0)
	$7 = *($6 + [4])
	$8 = *(($7 + [224]))
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$6 }
	$8 = *($6)
	$8 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)4229443000054317058, $5, *($7))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($8)
	
.LABEL $label$5
	$8 = *($0)
	$6 = *($8 + [4])
	$0 = *(($6 + [228]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$8 }
	$0 = *($8)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229443000054317059, $5, *($6))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL db_idx64_remove($0)
	
.LABEL $label$7
	$global$0 = ($5 + [32])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $143($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [112])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$5 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [9739])
	CALL memcpy(($2 + [80]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$6 = (int_64)0
	$4 = [16]
	$3 = [0]
	$7 = ($2 + [48])
	$8 = (int_64)0
	
.LOOP $label$2:
	$9 = (($2 + [80]) + $3)
	if ( ($4 <= [2]) ){ goto $label$3 }
	$6 = ((int_64)$6 | (int_64)*($9))
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56))
	$4 = ($4 + [-1])
	$6 = ((int_64)$6 << (int_64)8)
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$4 == (int_32)[1]), [9748])
	*($7 + [8]) = $8
	*($7) = ((int_64)$6 | (int_64)*($9))
	$4 = [16]
	$7 = ($7 + [16])
	$6 = (int_64)0
	$8 = (int_64)0
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = [16]
	if ( ((int_32)$4 == (int_32)[16]) ){ goto $label$4 }
	if ( ($4 <= [2]) ){ goto $label$5 }
	CALL __ashlti3(($2 + [32]), $6, $8, (($4 << [3]) + [-8]))
	$8 = *(($2 + [40]))
	$6 = *($2 + [32])
	
.LABEL $label$5
	*($7) = $6
	*($7 + [8]) = $8
	
.LABEL $label$4
	*($5) = *($2 + [48])
	*(($5 + [8])) = *($2 + [56])
	*(($5 + [24])) = *((($2 + [48]) + [24]))
	*(($5 + [16])) = *((($2 + [48]) + [16]))
	$5 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [9739])
	CALL memcpy(($2 + [80]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$6 = (int_64)0
	$4 = [0]
	$7 = ($2 + [48])
	$8 = (int_64)0
	
.LOOP $label$7:
	$9 = (($2 + [80]) + $4)
	if ( ($3 <= [2]) ){ goto $label$8 }
	$6 = ((int_64)$6 | (int_64)*($9))
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56))
	$3 = ($3 + [-1])
	$6 = ((int_64)$6 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$3 == (int_32)[1]), [9748])
	*($7 + [8]) = $8
	*($7) = ((int_64)$6 | (int_64)*($9))
	$3 = [16]
	$7 = ($7 + [16])
	$6 = (int_64)0
	$8 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$7 }
	
.LABEL $label$6
	$4 = [16]
	if ( ((int_32)$3 == (int_32)[16]) ){ goto $label$9 }
	if ( ($3 <= [2]) ){ goto $label$10 }
	CALL __ashlti3(($2 + [16]), $6, $8, (($3 << [3]) + [-8]))
	$8 = *(($2 + [24]))
	$6 = *($2 + [16])
	
.LABEL $label$10
	*($7) = $6
	*($7 + [8]) = $8
	
.LABEL $label$9
	*($5) = *($2 + [48])
	*(($5 + [8])) = *($2 + [56])
	*(($5 + [24])) = *((($2 + [48]) + [24]))
	*(($5 + [16])) = *((($2 + [48]) + [16]))
	$9 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($9, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$9 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($9, *($3 + [4]), [8])
	$7 = (*($3 + [4]) + [8])
	*($3 + [4]) = $7
	$6 = (int_64)0
	*($2 + [80]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $7) > (uint_32)[7]), [9739])
	CALL memcpy(($2 + [80]), *($3 + [4]), [8])
	*($9 + [8]) = *($2 + [80])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$5 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [9739])
	CALL memcpy(($2 + [80]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$3 = [0]
	$7 = ($2 + [48])
	$8 = (int_64)0
	
.LOOP $label$12:
	$9 = (($2 + [80]) + $3)
	if ( ($4 <= [2]) ){ goto $label$13 }
	$6 = ((int_64)$6 | (int_64)*($9))
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56))
	$4 = ($4 + [-1])
	$6 = ((int_64)$6 << (int_64)8)
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert(((int_32)$4 == (int_32)[1]), [9748])
	*($7 + [8]) = $8
	*($7) = ((int_64)$6 | (int_64)*($9))
	$4 = [16]
	$7 = ($7 + [16])
	$6 = (int_64)0
	$8 = (int_64)0
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)$4 == (int_32)[16]) ){ goto $label$14 }
	if ( ($4 <= [2]) ){ goto $label$15 }
	CALL __ashlti3($2, $6, $8, (($4 << [3]) + [-8]))
	$8 = *(($2 + [8]))
	$6 = *($2)
	
.LABEL $label$15
	*($7) = $6
	*($7 + [8]) = $8
	
.LABEL $label$14
	*($5) = *($2 + [48])
	*(($5 + [8])) = *($2 + [56])
	*(($5 + [24])) = *((($2 + [48]) + [24]))
	*(($5 + [16])) = *((($2 + [48]) + [16]))
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9739])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9739])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9739])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9739])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9739])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [52])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9739])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [56])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($3, *($4 + [4]), [8])
	$9 = (*($4 + [4]) + [8])
	*($4 + [4]) = $9
	*($2 + [80]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $9) > (uint_32)[7]), [9739])
	CALL memcpy(($2 + [80]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [80])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [60])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [64])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [68])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [112])
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	*($2 + [11]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [10]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [9]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [8]) = (uint_64)$3 >> (uint_64)(int_64)56)
	$4 = *(($1 + [8]))
	*($2 + [3]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($2 + [2]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($2 + [1]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($2) = (uint_64)$4 >> (uint_64)(int_64)56)
	$5 = (CASTING uint_32)(uint_64 $3)
	*($2 + [15]) = $5
	*($2 + [14]) = uint_32($5 >> [8])
	*($2 + [13]) = uint_32($5 >> [16])
	*($2 + [12]) = uint_32($5 >> [24])
	$5 = (CASTING uint_32)(uint_64 $4)
	*($2 + [7]) = $5
	*($2 + [6]) = uint_32($5 >> [8])
	*($2 + [5]) = uint_32($5 >> [16])
	*($2 + [4]) = uint_32($5 >> [24])
	$3 = *(($1 + [24]))
	*($2 + [23]) = $3
	$4 = *($1 + [16])
	*($2 + [27]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($2 + [26]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($2 + [25]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($2 + [24]) = (uint_64)$4 >> (uint_64)(int_64)56)
	*($2 + [19]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [18]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [17]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [16]) = (uint_64)$3 >> (uint_64)(int_64)56)
	$1 = (CASTING uint_32)(uint_64 $3)
	*($2 + [22]) = uint_32($1 >> [8])
	*($2 + [21]) = uint_32($1 >> [16])
	*($2 + [20]) = uint_32($1 >> [24])
	$1 = (CASTING uint_32)(uint_64 $4)
	*($2 + [31]) = $1
	*($2 + [30]) = uint_32($1 >> [8])
	*($2 + [29]) = uint_32($1 >> [16])
	*($2 + [28]) = uint_32($1 >> [24])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [9843])
	CALL memcpy(*($0 + [4]), $2, [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$global$0 = ($2 + [32])
	return $0
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9843])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9843])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $182 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $181($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	return CALL $151($0, $1)
}

void .FUNC $148 (int_32 $0)
{
}

int_32 .FUNC $145 ()
{
	return [11624]
}

int_32 .FUNC $144 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

void .FUNC $147 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $2
	*($4 + [8]) = $3
	*($4 + [4]) = $1
	*($4) = $0
	CALL $161(*([0] + [22288]), [8214], $4)
	CALL $160([0])
	CALL abort()
	(unreachable)
}

int_32 .FUNC $146 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL $149([20208], *([0] + [20]))
	$1 = [0]
	
.LOOP $label$4:
	if ( ((int_32)*(($1 + [20112])) == (int_32)$0) ){ goto $label$3 }
	$2 = [87]
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[87]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$1 = [20208]
	
.LOOP $label$5:
	$0 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $0 ){ goto $label$5 }
	$1 = $3
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	return CALL $149($3, *([0] + [20]))
	return .LABEL $label$1
}

void .FUNC $141 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $140 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $191($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $126($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $143 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $142 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $70($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9843])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9843])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $98(CALL $97($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [9884])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$22()), [9930])
	*($1 + [8]) = *(*($3))
	$6 = *($1)
	CALL eosio_assert([1], [9981])
	$3 = *($1 + [40])
	$7 = ( *(($1 + [44])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [72])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [40])
	$9 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $197($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [28]) = $9
	*($5 + [40]) = $7
	*($5 + [24]) = $1
	*($5 + [32]) = ($1 + [16])
	*($5 + [36]) = ($1 + [32])
	*($5 + [44]) = ($1 + [64])
	CALL $79(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [100]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $200($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $143($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($0 + [4]), ($4 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($0 + [4]), ($4 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($0 + [4]), ($4 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($0 + [4]), ($4 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($4 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9843])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $80(*($1), ($4 + [48]))
	CALL $80(*($1), ($4 + [60]))
	CALL $80(*($1), ($4 + [72]))
	$global$0 = ($2 + [16])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $143($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	$6 = (int_64)0
	*($2 + [48]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9739])
	CALL memcpy(($2 + [48]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [48])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $50(*($1), *($0 + [16]))
	$5 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [9739])
	CALL memcpy(($2 + [48]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = [16]
	$0 = [0]
	$3 = ($2 + [16])
	$7 = (int_64)0
	
.LOOP $label$2:
	$1 = (($2 + [48]) + $0)
	if ( ($4 <= [2]) ){ goto $label$3 }
	$6 = ((int_64)$6 | (int_64)*($1))
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56))
	$4 = ($4 + [-1])
	$6 = ((int_64)$6 << (int_64)8)
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$4 == (int_32)[1]), [9748])
	*($3 + [8]) = $7
	*($3) = ((int_64)$6 | (int_64)*($1))
	$4 = [16]
	$3 = ($3 + [16])
	$6 = (int_64)0
	$7 = (int_64)0
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[16]) ){ goto $label$4 }
	if ( ($4 <= [2]) ){ goto $label$5 }
	CALL __ashlti3($2, $6, $7, (($4 << [3]) + [-8]))
	$7 = *(($2 + [8]))
	$6 = *($2)
	
.LABEL $label$5
	*($3) = $6
	*($3 + [8]) = $7
	
.LABEL $label$4
	*($5) = *($2 + [16])
	*(($5 + [8])) = *($2 + [24])
	*(($5 + [24])) = *((($2 + [16]) + [24]))
	*(($5 + [16])) = *((($2 + [16]) + [16]))
	$global$0 = ($2 + [80])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$22()), [9792])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([112])) + [16]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48]) = [0]
	*($3 + [64]) = (int_64)0
	*($3 + [96]) = $1
	*(($3 + [88])) = (int_64)0
	*(($3 + [80])) = (int_64)0
	*(($3 + [72])) = (int_64)0
	CALL $75(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [100])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $76(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$4 = *($1 + [40])
	$5 = ( *(($1 + [44])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [72])
	$6 = (CASTING uint_64)(uint_32 $5)
	$7 = ($1 + [40])
	$8 = ($1 + [8])
	$5 = *($0)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $197($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = $8
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = ($1 + [32])
	*($3 + [40]) = $7
	*($3 + [44]) = ($1 + [64])
	CALL $79(($3 + [24]), ($3 + [16]))
	$6 = *($1)
	*($1 + [100]) = CALL db_store_i64(*($5 + [8]), (int_64)4982871454518345728, *(*($0 + [8])), $6, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $200($2)
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9744])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $70($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9739])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $80(*($1), *($0 + [16]))
	CALL $81(*($1), *($0 + [20]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9843])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9843])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [64])
	$global$0 = $5
	$6 = *($0)
	$7 = *($6)
	$8 = *($6 + [4])
	*((($5 + [32]) + [24])) = *(($8 + [40]))
	*(($5 + [48])) = *(($8 + [32]))
	*($5 + [40]) = *(($8 + [24]))
	*($5 + [32]) = *($8 + [16])
	if ( (CALL $189(*($6 + [8]), ($5 + [32]), [32]) == 0) ){ goto $label$1 }
	$8 = *(*($6 + [12]) + [216])
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$2 }
	*(($5 + [24])) = (int_64)0
	*(($5 + [16])) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	$8 = CALL db_idx256_find_primary(*($7), *($7 + [8]), (int_64)4229443000054317056, $5, [2], *(*($6 + [16])))
	*(*(($6 + [12])) + [216]) = $8
	
.LABEL $label$2
	CALL db_idx256_update($8, *(*($6 + [20])), ($5 + [32]), [2])
	
.LABEL $label$1
	$6 = *($0)
	$7 = *($6)
	*($5 + [32]) = *(*($6 + [4]) + [184])
	if ( (CALL $189((*($6 + [8]) + [32]), ($5 + [32]), [8]) == 0) ){ goto $label$3 }
	$8 = *((*($6 + [12]) + [220]))
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$4 }
	$8 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)4229443000054317057, $5, *(*($6 + [16])))
	*((*(($6 + [12])) + [220])) = $8
	
.LABEL $label$4
	CALL db_idx64_update($8, *(*($6 + [20])), ($5 + [32]))
	
.LABEL $label$3
	$6 = *($0)
	$7 = *($6)
	*($5 + [32]) = *(*($6 + [4]) + [160])
	if ( (CALL $189((*($6 + [8]) + [40]), ($5 + [32]), [8]) == 0) ){ goto $label$5 }
	$8 = *((*($6 + [12]) + [224]))
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$6 }
	$8 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)4229443000054317058, $5, *(*($6 + [16])))
	*((*(($6 + [12])) + [224])) = $8
	
.LABEL $label$6
	CALL db_idx64_update($8, *(*($6 + [20])), ($5 + [32]))
	
.LABEL $label$5
	$0 = *($0)
	$8 = *($0)
	*($5 + [32]) = *(*($0 + [4]) + [8])
	if ( (CALL $189((*($0 + [8]) + [48]), ($5 + [32]), [8]) == 0) ){ goto $label$7 }
	$6 = *((*($0 + [12]) + [228]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$8 }
	$6 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)4229443000054317059, $5, *(*($0 + [16])))
	*((*(($0 + [12])) + [228])) = $6
	
.LABEL $label$8
	CALL db_idx64_update($6, *(*($0 + [20])), ($5 + [32]))
	
.LABEL $label$7
	$global$0 = ($5 + [64])
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = *($6 + [12])
	$8 = *($7)
	$9 = *(*($6 + [8]))
	$10 = *(*($6) + [8])
	*(($5 + [24])) = *(($7 + [40]))
	*(($5 + [16])) = *(($7 + [32]))
	*($5 + [8]) = *(($7 + [24]))
	*($5) = *($7 + [16])
	$7 = CALL db_idx256_store($10, (int_64)4229443000054317056, $9, $8, $5, [2])
	*(*($6 + [4]) + [216]) = $7
	$7 = *($0)
	$6 = *($7 + [12])
	$8 = *($6)
	$9 = *(*($7 + [8]))
	$10 = *(*($7) + [8])
	*($5) = *($6 + [184])
	$6 = CALL db_idx64_store($10, (int_64)4229443000054317057, $9, $8, $5)
	*((*($7 + [4]) + [220])) = $6
	$7 = *($0)
	$6 = *($7 + [12])
	$8 = *($6)
	$9 = *(*($7 + [8]))
	$10 = *(*($7) + [8])
	*($5) = *($6 + [160])
	$6 = CALL db_idx64_store($10, (int_64)4229443000054317058, $9, $8, $5)
	*((*($7 + [4]) + [224])) = $6
	$0 = *($0)
	$7 = *($0 + [12])
	$8 = *($7)
	$9 = *(*($0 + [8]))
	$10 = *(*($0) + [8])
	*($5) = *($7 + [8])
	$7 = CALL db_idx64_store($10, (int_64)4229443000054317059, $9, $8, $5)
	*((*($0 + [4]) + [228])) = $7
	$global$0 = ($5 + [32])
}

int_32 .FUNC $95 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [212]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10852])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4229443000054317056)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10798])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10798])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $38(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $80(*($1), ($0 + [32]))
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[1]), [9843])
	CALL memcpy(*($4 + [4]), ($0 + [44]), [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9843])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9843])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9843])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $143($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $143($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = ($3 + [192])
	$5 = *($4)
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$6 = ($3 + [176])
	$7 = CALL db_lowerbound_i64(*($6), *(($3 + [184])), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL $38($6, $7)
	*($2 + [12]) = [0]
	*($2 + [8]) = $6
	$5 = *(*(CALL $95(($2 + [8])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [192])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [10746])
	*($1) = *($4)
	*($1 + [8]) = *(*($0 + [4]))
	$3 = *($0 + [8])
	*(($1 + [40])) = *(($3 + [24]))
	*(($1 + [32])) = *(($3 + [16]))
	*(($1 + [24])) = *(($3 + [8]))
	*($1 + [16]) = *($3)
	$3 = *($0 + [12])
	*($1 + [48]) = *($3)
	*(($1 + [72])) = *(($3 + [24]))
	*(($1 + [64])) = *(($3 + [16]))
	*(($1 + [56])) = *(($3 + [8]))
	$3 = *($0 + [16])
	*($1 + [88]) = *($3)
	*(($1 + [96])) = *(($3 + [8]))
	*($1 + [148]) = *(*($0 + [20]))
	*($1 + [152]) = *(*($0 + [24]))
	*($1 + [149]) = *(*($0 + [28]))
	*($1 + [80]) = *(*($0 + [32]))
	*($1 + [160]) = [0]
	*($1 + [184]) = CALL current_time()
	$global$0 = ($2 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $81(*($1), *($0 + [8]))
	CALL $81(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $81(*($1), *($0 + [24]))
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9843])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9843])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9843])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9843])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9843])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [52])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9843])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [56])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [60])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [64])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [68])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($0 + [4]), $4, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_64 .FUNC $138 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $191([20085])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [20085], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $145())
	*(CALL $145()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $186($4, ($3 + [12]), $2)
	$0 = CALL $145()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $135($3)
	
.LABEL $label$1
	CALL $136($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $139 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $128(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $168(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8807], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $128(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $128(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $129($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $131 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $132 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $188(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $189(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $134 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = CALL $191($1)
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, $1, $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$3 = ($2 + [1])
	$5 = (*($2) & [1])
	$2 = *($2 + [8])
	$6 = *($0)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$9 }
	$1 = [10]
	$3 = ( $2 ? $3 : $5 )
	$2 = uint_32($6 >> [1])
	if ( (([10] - $2) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$3 = ( $2 ? $3 : $5 )
	$2 = *(($0 + [4]))
	$1 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($1 - $2) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $126($0, $1, (($2 + $4) - $1), $2, $2, [0], $4, $3)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ( *(($0 + [8])) ? ($0 + [1]) : $7 )
	CALL memcpy(($5 + $2), $3, $4)
	$2 = ($2 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*(($5 + $2)) = [0]
	(unreachable)
}

void .FUNC $135 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $140($1, $0, [20096])
	CALL $141()
	(unreachable)
}

void .FUNC $136 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $140($1, $0, [9076])
	CALL $142()
	(unreachable)
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $191([20060])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [20060], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $145())
	*(CALL $145()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $187($4, ($3 + [12]), $2)
	$5 = CALL $145()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $135($3)
	
.LABEL $label$1
	CALL $136($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $200 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [20048])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19856]
	$3 = (((int_32)$1 * (int_32)[12]) + [19856])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $181 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $129 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $128 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $129($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	CALL eosio_assert([1], [11115])
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = [0]
	$3 = *($1 + [12])
	if ( ($3 == 0) ){ goto $label$1 }
	*($2 + [32]) = [1]
	$4 = CALL $197([4])
	*(($2 + [40])) = $4
	*($4) = $3
	*($2 + [36]) = [1]
	
.LABEL $label$1
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$3 = *($1 + [4])
	if ( ($3 == 0) ){ goto $label$2 }
	$4 = (($3 << [1]) + [-2])
	
.LOOP $label$3:
	CALL $9(($2 + [16]), $0, ($2 + [32]))
	*(($5 = ($2 + [8]))) = [0]
	*($2) = (int_64)0
	$6 = *((*(($1 + [8])) + $4))
	if ( ($6 == 0) ){ goto $label$4 }
	*($2) = [1]
	$7 = CALL $197([4])
	*($5) = $7
	*($7) = $6
	*($2 + [4]) = [1]
	
.LABEL $label$4
	$3 = ($3 + [-1])
	CALL $10($0, ($2 + [16]), $2)
	$5 = *($5)
	if ( ($5 == 0) ){ goto $label$5 }
	CALL _ZdaPv($5)
	
.LABEL $label$5
	$4 = ($4 + [-2])
	if ( $3 ){ goto $label$3 }
	$3 = *(($2 + [24]))
	if ( ($3 == 0) ){ goto $label$2 }
	CALL _ZdaPv($3)
	
.LABEL $label$2
	$3 = *(($2 + [40]))
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdaPv($3)
	
.LABEL $label$6
	$global$0 = ($2 + [48])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$3 = ($global$0 - [16])
	$global$0 = $3
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$6 }
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$6 }
	$4 = *($1 + [4])
	if ( ($4 == 0) ){ goto $label$5 }
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$5 }
	$6 = ($5 + $4)
	*($0 + [4]) = $6
	if ( ((uint_32)*($0) >= (uint_32)$6) ){ goto $label$7 }
	$4 = *($0 + [8])
	if ( ($4 == 0) ){ goto $label$8 }
	CALL _ZdaPv($4)
	
.LABEL $label$8
	*($0) = $6
	$7 = ((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)2)
	*(($0 + [8])) = CALL _Znaj(( [-1] ? (CASTING uint_32)(uint_64 $7) : (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)) ))
	$6 = *(($0 + [4]))
	
.LABEL $label$7
	if ( ($6 == 0) ){ goto $label$9 }
	$4 = *($0 + [8])
	$5 = [0]
	
.LOOP $label$10:
	*($4) = [0]
	$4 = ($4 + [4])
	$5 = ($5 + [1])
	if ( ($5 <= $6) ){ goto $label$10 }
	
.LABEL $label$9
	$8 = *(($1 + [4]))
	if ( ($8 == 0) ){ goto $label$4 }
	$9 = ($0 + [8])
	$10 = *($2 + [8])
	$11 = ($10 + [-4])
	$2 = *(($2 + [4]))
	$12 = *($1 + [8])
	$13 = [0]
	
.LOOP $label$11:
	$14 = ($13 << [2])
	$15 = ($12 + $14)
	$16 = [0]
	
.LOOP $label$12:
	if ( ((*($15) & ([1] << $16)) == 0) ){ goto $label$13 }
	$17 = *($9)
	if ( ($16 == 0) ){ goto $label$15 }
	$18 = ([32] - $16)
	$5 = ($17 + $14)
	$19 = [0]
	$20 = $11
	$4 = [0]
	
.LOOP $label$16:
	$21 = *($5)
	$1 = [0]
	if ( ($4 == 0) ){ goto $label$17 }
	$1 = uint_32(*($20) >> $18)
	
.LABEL $label$17
	$22 = [0]
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$18 }
	$22 = (*(($20 + [4])) << $16)
	
.LABEL $label$18
	$22 = ($22 | $1)
	$1 = ($22 + $21)
	if ( (($19 & [1]) == 0) ){ goto $label$20 }
	$1 = ($1 + [1])
	$19 = (($1 <= $21) | ($1 == 0))
	goto $label$19 
	
.LABEL $label$20
	$19 = ($1 <= $22)
	
.LABEL $label$19
	*($5) = $1
	$20 = ($20 + [4])
	$5 = ($5 + [4])
	$4 = ($4 + [1])
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$16 }
	$4 = ($13 + $4)
	if ( $19 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$4 = ($17 + $14)
	$19 = [0]
	$21 = $10
	$1 = [0]
	
.LOOP $label$21:
	$22 = *($4)
	$20 = [0]
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$22 }
	$20 = *($21)
	
.LABEL $label$22
	$5 = ($20 + $22)
	if ( (($19 & [1]) == 0) ){ goto $label$24 }
	$5 = ($5 + [1])
	$19 = (($5 <= $22) | ($5 == 0))
	goto $label$23 
	
.LABEL $label$24
	$19 = ($5 <= $20)
	
.LABEL $label$23
	*($4) = $5
	$21 = ($21 + [4])
	$4 = ($4 + [4])
	$1 = ($1 + [1])
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$21 }
	$4 = ($13 + $1)
	if ( ($19 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$4 = ($17 + ($4 << [2]))
	
.LOOP $label$25:
	$5 = (*($4) + [1])
	*($4) = $5
	$4 = ($4 + [4])
	if ( ($5 == 0) ){ goto $label$25 }
	
.LABEL $label$13
	$16 = ($16 + [1])
	if ( ((int_32)$16 != (int_32)[32]) ){ goto $label$12 }
	$13 = ($13 + [1])
	if ( ($13 <= $8) ){ goto $label$11 }
	goto $label$3 
	
.LABEL $label$6
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	CALL $9($3, $1, $2)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$26 }
	$1 = *($3 + [4])
	*($0 + [4]) = $1
	if ( ((uint_32)*($0) >= (uint_32)$1) ){ goto $label$27 }
	$4 = *($0 + [8])
	if ( ($4 == 0) ){ goto $label$28 }
	CALL _ZdaPv($4)
	
.LABEL $label$28
	*($0) = $1
	$7 = ((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)2)
	*(($0 + [8])) = CALL _Znaj(( [-1] ? (CASTING uint_32)(uint_64 $7) : (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)) ))
	$1 = *(($0 + [4]))
	
.LABEL $label$27
	if ( ($1 == 0) ){ goto $label$26 }
	$4 = *($0 + [8])
	$5 = *(($3 + [8]))
	
.LOOP $label$29:
	*($4) = *($5)
	$5 = ($5 + [4])
	$4 = ($4 + [4])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$29 }
	
.LABEL $label$26
	$4 = *(($3 + [8]))
	if ( ($4 == 0) ){ goto $label$2 }
	CALL _ZdaPv($4)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	*($0 + [4]) = [0]
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$9 = ($0 + [8])
	
.LABEL $label$3
	$4 = ($6 + [-1])
	if ( (*((*($9) + ($4 << [2]))) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $4
	$global$0 = ($3 + [16])
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $122 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $200($0)
	
.LABEL $label$1
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( (CALL $144(int_32(($3 << [24]) >> [24])) == 0) ){ goto $label$3 }
	$3 = *($0 + [1])
	$4 = ($0 + [1])
	$0 = $4
	if ( $3 ){ goto $label$4 }
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)[49]) ){ goto $label$2 }
	$3 = [0]
	
.LOOP $label$5:
	$4 = ($0 + $3)
	$5 = ($3 + [1])
	$3 = $5
	if ( ((int_32)*(($4 + [1])) == (int_32)[49]) ){ goto $label$5 }
	$4 = ($0 + $5)
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	$4 = $0
	
.LABEL $label$1
	$0 = ((uint_32)((int_32)CALL $191($4) * (int_32)[733]) / (uint_32)[1000])
	$6 = ($0 + [1])
	$7 = CALL _Znwj($6)
	$8 = ($7 + $0)
	$0 = [0]
	
.LOOP $label$6:
	*(($7 + $0)) = [0]
	$0 = ($0 + [1])
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$17 }
	$3 = [0]
	
.LOOP $label$18:
	$9 = $3
	$10 = $4
	if ( CALL $144(int_32(($0 << [24]) >> [24])) ){ goto $label$16 }
	$0 = *($10)
	$11 = *(($0 + [8400]))
	if ( ((int_32)$11 == (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$0 != (int_32)[49]) ){ goto $label$20 }
	$3 = [0]
	if ( ($9 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$3 = [0]
	$0 = $8
	
.LOOP $label$22:
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$21 }
	$4 = (((int_32)*($0) * (int_32)[58]) + $11)
	*($0) = $4
	$3 = ($3 + [1])
	$0 = ($0 + [-1])
	$11 = ((int_32)$4 / (int_32)[256])
	if ( ((uint_32)($4 + [255]) > (uint_32)[510]) ){ goto $label$22 }
	if ( ($3 <= $9) ){ goto $label$22 }
	goto $label$19 
	
.LABEL $label$21
	if ( $11 ){ goto $label$9 }
	
.LABEL $label$19
	$4 = ($10 + [1])
	$0 = *($10 + [1])
	if ( $0 ){ goto $label$18 }
	goto $label$15 
	
.LABEL $label$17
	$3 = [0]
	goto $label$15 
	
.LABEL $label$16
	$3 = $9
	$4 = $10
	
.LABEL $label$15
	$9 = ($7 + $6)
	$0 = ($4 + [-1])
	
.LOOP $label$23:
	$0 = ($0 + [1])
	if ( CALL $144(*($0)) ){ goto $label$23 }
	$4 = [0]
	if ( *($0) ){ goto $label$13 }
	$4 = ($7 + ($6 - $3))
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$12 }
	$0 = $4
	if ( *($4) ){ goto $label$10 }
	$6 = ([0] - $3)
	$0 = [-1]
	$11 = $8
	
.LOOP $label$24:
	$4 = $11
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$11 }
	$0 = ($0 + [-1])
	$11 = ($4 + [1])
	if ( (*((($4 + $6) + [2])) == 0) ){ goto $label$24 }
	$0 = (($4 - $3) + [2])
	$4 = (($11 - $3) + [1])
	goto $label$10 
	
.LABEL $label$14
	$4 = [0]
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$12
	$0 = $9
	goto $label$10 
	
.LABEL $label$11
	$0 = (($4 - $3) + [2])
	$4 = $0
	
.LABEL $label$10
	$3 = (($9 - $4) + $5)
	$11 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $11) >= (uint_32)$3) ){ goto $label$25 }
	$4 = *($1 + [4])
	$4 = *($1)
	$11 = (*($1 + [4]) - $4)
	$10 = CALL _Znwj($3)
	$12 = ($10 + ($4 - $11))
	$6 = ($12 - $11)
	$3 = ($10 + $3)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$26 }
	CALL memcpy($6, $4, $11)
	$4 = *($1)
	
.LABEL $label$26
	*($1) = $6
	*(($1 + [4])) = $12
	*(($1 + [8])) = $3
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	*($2 + [15]) = [0]
	CALL $3($1, $5, ($2 + [15]))
	if ( ((int_32)$0 == (int_32)$9) ){ goto $label$27 }
	$6 = ($8 + [1])
	$9 = ($1 + [8])
	$4 = ($1 + [4])
	
.LOOP $label$28:
	$3 = ($0 + [1])
	$11 = *($4)
	if ( ((int_32)$11 == (int_32)*($9)) ){ goto $label$29 }
	*($11) = *($0)
	*($4) = (*($4) + [1])
	$0 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	CALL $4($1, $0)
	$0 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$28 }
	
.LABEL $label$27
	$4 = [1]
	if ( $7 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $147([8656], [8671], [169], [8685])
	
.LABEL $label$8
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($2 + [16])
	(unreachable)
	return $4
}

void .FUNC $126 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $126($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $124 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$11 }
	if ( ((int_64)$2 > (int_64)-4417018958259388417) ){ goto $label$10 }
	if ( ((int_64)$2 <= (int_64)-4417038158911766529) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-4417038158911766528) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-4417025181311041536) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-4417018958259421184) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [1]
	*($3 + [16]) = *($3 + [152])
	CALL $16($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [2]
	*($3 + [80]) = *($3 + [88])
	CALL $18($0, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 <= (int_64)5378012970202693631) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)5378012970202693632) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)5378311985366564864) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)5378222249222340608) ){ goto $label$1 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [3]
	*($3) = *($3 + [168])
	CALL $20($1, $1, $3)
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-6031299439862218752) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-4417303804429467648) ){ goto $label$1 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [4]
	*($3 + [40]) = *($3 + [128])
	CALL $22($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)-4417018958259388416) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-4417017204164263936) ){ goto $label$1 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [5]
	*($3 + [56]) = *($3 + [112])
	CALL $24($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [124]) = [0]
	*($3 + [120]) = [6]
	*($3 + [48]) = *($3 + [120])
	CALL $26($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [140]) = [0]
	*($3 + [136]) = [7]
	*($3 + [32]) = *($3 + [136])
	CALL $22($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [108]) = [0]
	*($3 + [104]) = [8]
	*($3 + [64]) = *($3 + [104])
	CALL $22($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [100]) = [0]
	*($3 + [96]) = [9]
	*($3 + [72]) = *($3 + [96])
	CALL $30($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [164]) = [0]
	*($3 + [160]) = [10]
	*($3 + [8]) = *($3 + [160])
	CALL $32($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [148]) = [0]
	*($3 + [144]) = [11]
	*($3 + [24]) = *($3 + [144])
	CALL $34($1, $1, ($3 + [24]))
	
.LABEL $label$1
	CALL $148([0])
	$global$0 = ($3 + [176])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$8 = ($global$0 - [48])
	$global$0 = $8
	CALL $33($0, $1, $2)
	$9 = CALL $48($0, *($0 + [152]))
	*(($1 = (($8 + [32]) + [8]))) = *(($5 + [8]))
	*($8 + [32]) = *($5)
	$10 = *($4)
	$11 = *($3)
	$5 = CALL $123(($8 + [16]), $6)
	$7 = *($7)
	*(($8 + [8])) = *($1)
	*($8) = *($8 + [32])
	CALL $49($0, $9, $11, $10, $8, $5, $7)
	if ( ((*($5) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$1
	$global$0 = ($8 + [48])
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [464])
	$global$0 = $3
	*(($4 = $3) + [456]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $197($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [376])) = (int_64)0
	*(($4 + [368])) = (int_64)0
	*($4 + [360]) = (int_64)0
	*($4 + [352]) = (int_64)0
	*($4 + [384]) = (int_64)0
	*($4 + [392]) = [0]
	*($4 + [400]) = (int_64)0
	*($4 + [408]) = (int_64)0
	*($4 + [416]) = (int_64)0
	*($4 + [424]) = (int_64)0
	*($4 + [432]) = (int_64)0
	*($4 + [440]) = [0]
	*($4 + [444]) = [0]
	*($4 + [340]) = $2
	*($4 + [336]) = $2
	*($4 + [344]) = ($2 + $5)
	*($4 + [16]) = ($4 + [336])
	*($4 + [40]) = ($4 + [352])
	CALL $46(($4 + [40]), ($4 + [16]))
	$3 = *($4 + [344])
	*((($4 + [24]) + [8])) = $3
	*(($4 + [8])) = $3
	$6 = *($4 + [336])
	*($4) = $6
	*($4 + [24]) = $6
	$3 = CALL $35(($4 + [40]), $0, $1, $4)
	*($4 + [16]) = $3
	*($4 + [20]) = ($4 + [456])
	CALL $47(($4 + [16]), ($4 + [352]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $200($2)
	
.LABEL $label$4
	CALL $36($3)
	if ( ((*(($4 + [432])) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [440])))
	
.LABEL $label$5
	if ( ((*(($4 + [384])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [392])))
	
.LABEL $label$6
	$global$0 = ($4 + [464])
	return [1]
}

void .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	$1 = ($global$0 - [304])
	$global$0 = $1
	CALL $65(($1 + [224]))
	$2 = *((($1 + [224]) + [24]))
	*($1 + [88]) = *($0 + [8])
	*($1 + [208]) = ($0 + [256])
	CALL $66(($1 + [176]), ($1 + [208]), ($1 + [88]))
	CALL $67(($1 + [288]), ($1 + [208]), ($1 + [88]))
	$3 = *($1 + [292])
	$4 = *($1 + [176])
	*($1) = $4
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$3 == (int_32)$5)) ){ goto $label$4 }
	if ( ((int_64)*(($5 + [24])) == (int_64)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	CALL $68($1)
	$5 = *($1 + [4])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$3 }
	if ( ((int_64)*(($5 + [24])) != (int_64)$2) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ((int_32)*($1 + [292]) == (int_32)$5) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)*($1 + [292]) == (int_32)$3) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = [0]
	if ( ((uint_64)((int_64)*($1 + [240]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$2 = (uint_64)*((($1 + [224]) + [24])) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $4
	$3 = [1]
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $4
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$5 < (int_32)[6])
	$6 = ($5 + [1])
	$5 = $6
	if ( $3 ){ goto $label$10 }
	$3 = [1]
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [10467])
	if ( ((int_64)*($1 + [232]) != (int_64)*($0)) ){ goto $label$1 }
	*(($1 + [216])) = [0]
	*($1 + [208]) = (int_64)0
	$5 = CALL $191([11110])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$22 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$25 }
	*($1 + [208]) = ($5 << [1])
	$6 = (($1 + [208]) | [1])
	$3 = $6
	if ( $5 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$6 = (($5 + [16]) & [-16])
	$3 = CALL _Znwj($6)
	*($1 + [208]) = ($6 | [1])
	*($1 + [216]) = $3
	*($1 + [212]) = $5
	$6 = (($1 + [208]) | [1])
	
.LABEL $label$24
	CALL memcpy($3, [11110], $5)
	
.LABEL $label$23
	$7 = [0]
	*(($3 + $5)) = [0]
	$5 = ($5 & [1])
	$5 = *($1 + [208])
	$3 = ( *($1 + [212]) ? uint_32($5 >> [1]) : $5 )
	$8 = ($1 + [256])
	if ( CALL $133($8, [0], $3, ( *($1 + [216]) ? $6 : $5 ), $3) ){ goto $label$11 }
	$9 = [-1]
	$5 = CALL $124(($1 + [192]), $8, [4], [-1], $8)
	$10 = ($5 + [1])
	$8 = *($5 + [8])
	$3 = *($1 + [192])
	$11 = *($5 + [4])
	$6 = CALL $191([8981])
	if ( ($6 == 0) ){ goto $label$26 }
	$3 = ( $11 ? uint_32($3 >> [1]) : $7 )
	$7 = ($3 & [1])
	$12 = ( $8 ? $10 : $7 )
	$8 = ($12 + $3)
	if ( ((int_32)$3 < (int_32)$6) ){ goto $label$28 }
	$7 = $12
	
.LOOP $label$29:
	$3 = (($3 - $6) + [1])
	if ( ($3 == 0) ){ goto $label$28 }
	$3 = CALL $188($7, [45], $3)
	if ( ($3 == 0) ){ goto $label$28 }
	if ( (CALL $189($3, [8981], $6) == 0) ){ goto $label$27 }
	$7 = ($3 + [1])
	$3 = ($8 - $7)
	if ( ((int_32)$3 >= (int_32)$6) ){ goto $label$29 }
	
.LABEL $label$28
	$3 = $8
	
.LABEL $label$27
	$7 = ( [-1] ? ($3 - $12) : ((int_32)$3 == (int_32)$8) )
	
.LABEL $label$26
	$6 = *($1 + [192])
	$8 = *(($5 + [4]))
	$12 = ($5 + [8])
	$11 = *($12)
	$3 = CALL $191([8981])
	$13 = ($7 + [1])
	$6 = ($6 & [1])
	$8 = ( $8 ? uint_32($6 >> [1]) : $6 )
	if ( ($8 <= $13) ){ goto $label$30 }
	$9 = $13
	if ( ($3 == 0) ){ goto $label$30 }
	$9 = ($11 + $13)
	$11 = ( $11 ? $10 : $6 )
	$8 = ($11 + $8)
	$6 = ($8 - $9)
	if ( ((int_32)$6 < (int_32)$3) ){ goto $label$32 }
	
.LOOP $label$33:
	$6 = (($6 - $3) + [1])
	if ( ($6 == 0) ){ goto $label$32 }
	$6 = CALL $188($9, [45], $6)
	if ( ($6 == 0) ){ goto $label$32 }
	if ( (CALL $189($6, [8981], $3) == 0) ){ goto $label$31 }
	$9 = ($6 + [1])
	$6 = ($8 - $9)
	if ( ((int_32)$6 >= (int_32)$3) ){ goto $label$33 }
	
.LABEL $label$32
	$6 = $8
	
.LABEL $label$31
	$9 = ( [-1] ? ($6 - $11) : ((int_32)$6 == (int_32)$8) )
	
.LABEL $label$30
	$11 = *($1 + [192])
	$14 = ($5 + [4])
	$15 = *($14)
	$12 = *($12)
	$3 = CALL $191([8981])
	$6 = [-1]
	$8 = [-1]
	$15 = ($9 + [1])
	$11 = ($11 & [1])
	$16 = ( $15 ? uint_32($11 >> [1]) : $11 )
	if ( ($16 <= $15) ){ goto $label$34 }
	$8 = $15
	if ( ($3 == 0) ){ goto $label$34 }
	$11 = ($17 + $15)
	$17 = ( $12 ? $10 : $11 )
	$12 = ($17 + $16)
	$8 = ($12 - $11)
	if ( ((int_32)$8 < (int_32)$3) ){ goto $label$36 }
	
.LOOP $label$37:
	$8 = (($8 - $3) + [1])
	if ( ($8 == 0) ){ goto $label$36 }
	$8 = CALL $188($11, [45], $8)
	if ( ($8 == 0) ){ goto $label$36 }
	if ( (CALL $189($8, [8981], $3) == 0) ){ goto $label$35 }
	$11 = ($8 + [1])
	$8 = ($12 - $11)
	if ( ((int_32)$8 >= (int_32)$3) ){ goto $label$37 }
	
.LABEL $label$36
	$8 = $12
	
.LABEL $label$35
	$8 = ( [-1] ? ($8 - $17) : ((int_32)$8 == (int_32)$12) )
	
.LABEL $label$34
	$11 = *($1 + [192])
	$12 = *($14)
	$16 = ($5 + [8])
	$17 = *($16)
	$3 = CALL $191([8981])
	$14 = ($8 + [1])
	$11 = ($11 & [1])
	$12 = ( $12 ? uint_32($11 >> [1]) : $11 )
	if ( ($12 <= $14) ){ goto $label$38 }
	$6 = $14
	if ( ($3 == 0) ){ goto $label$38 }
	$11 = ($17 + $14)
	$17 = ( $17 ? $10 : $11 )
	$12 = ($17 + $12)
	$6 = ($12 - $11)
	if ( ((int_32)$6 < (int_32)$3) ){ goto $label$40 }
	
.LOOP $label$41:
	$6 = (($6 - $3) + [1])
	if ( ($6 == 0) ){ goto $label$40 }
	$6 = CALL $188($11, [45], $6)
	if ( ($6 == 0) ){ goto $label$40 }
	if ( (CALL $189($6, [8981], $3) == 0) ){ goto $label$39 }
	$11 = ($6 + [1])
	$6 = ($12 - $11)
	if ( ((int_32)$6 >= (int_32)$3) ){ goto $label$41 }
	
.LABEL $label$40
	$6 = $12
	
.LABEL $label$39
	$6 = ( [-1] ? ($6 - $17) : ((int_32)$6 == (int_32)$12) )
	
.LABEL $label$38
	$12 = *($1 + [192])
	$17 = *(($5 + [4]))
	$16 = *($16)
	$3 = CALL $191([8981])
	$11 = [-1]
	$12 = ($6 + [1])
	$18 = ($12 & [1])
	$17 = ( $17 ? uint_32($12 >> [1]) : $18 )
	if ( ($17 <= $12) ){ goto $label$42 }
	$11 = $12
	if ( ($3 == 0) ){ goto $label$42 }
	$10 = ($18 + $12)
	$18 = ( $16 ? $10 : $18 )
	$16 = ($18 + $17)
	$11 = ($16 - $10)
	if ( ((int_32)$11 < (int_32)$3) ){ goto $label$44 }
	
.LOOP $label$45:
	$11 = (($11 - $3) + [1])
	if ( ($11 == 0) ){ goto $label$44 }
	$11 = CALL $188($10, [45], $11)
	if ( ($11 == 0) ){ goto $label$44 }
	if ( (CALL $189($11, [8981], $3) == 0) ){ goto $label$43 }
	$10 = ($11 + [1])
	$11 = ($16 - $10)
	if ( ((int_32)$11 >= (int_32)$3) ){ goto $label$45 }
	
.LABEL $label$44
	$11 = $16
	
.LABEL $label$43
	$11 = ( [-1] ? ($11 - $18) : ((int_32)$11 == (int_32)$16) )
	
.LABEL $label$42
	$3 = CALL $124($1, $5, [0], $7, $5)
	$4 = CALL $138($3, [0], [10])
	if ( ((*($1) & [1]) == 0) ){ goto $label$46 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$46
	$3 = CALL $124($1, $5, $13, ($9 + ((int_32)$7 ^ (int_32)[-1])), $5)
	$19 = CALL $138($3, [0], [10])
	if ( ((*($1) & [1]) == 0) ){ goto $label$47 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$47
	$3 = ($1 + [240])
	$7 = [0]
	$10 = CALL $124($1, $5, ($11 + [1]), [-1], $5)
	$20 = CALL $138($10, [0], [10])
	if ( ((*($1) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*($10 + [8]))
	
.LABEL $label$48
	*(($10 = (($1 + [176]) + [8]))) = *(($3 + [8]))
	*($1 + [176]) = *($3)
	$9 = CALL $124(($1 + [160]), $5, $15, ($8 + ((int_32)$9 ^ (int_32)[-1])), $5)
	$8 = CALL $124(($1 + [144]), $5, $14, ($6 + ((int_32)$8 ^ (int_32)[-1])), $5)
	$6 = CALL $124(($1 + [128]), $5, $12, ($11 + ((int_32)$6 ^ (int_32)[-1])), $5)
	$21 = *($1 + [224])
	$2 = *($0)
	*(($1 + [40])) = *($10)
	*($1 + [8]) = $21
	*($1) = $20
	*($1 + [16]) = $4
	*($1 + [24]) = $19
	*($1 + [32]) = *($1 + [176])
	CALL $123(($1 + [48]), $8)
	CALL $123(($1 + [60]), $9)
	CALL $123(($1 + [72]), $6)
	*($1 + [96]) = (int_64)-6031299439862218752
	*($1 + [88]) = $2
	*(($3 = CALL _Znwj([16]))) = $2
	*($3 + [8]) = (int_64)3617214756542218240
	*(($1 + [124])) = [0]
	$0 = ($3 + [16])
	*(($1 + [112])) = $0
	*(($1 + [108])) = $0
	*($1 + [104]) = $3
	*($1 + [116 align=4]) = (int_64)0
	*($1 + [272]) = [32]
	*($1 + [280]) = ($1 + [272])
	*($1 + [288]) = $1
	CALL $69(($1 + [288]), ($1 + [280]))
	$3 = *($1 + [272])
	if ( ($3 == 0) ){ goto $label$50 }
	$0 = ($1 + [116])
	CALL $70($0, $3)
	$7 = *((($1 + [88]) + [32]))
	$3 = *($0)
	goto $label$49 
	
.LABEL $label$50
	$3 = [0]
	
.LABEL $label$49
	*($1 + [292]) = $3
	*($1 + [288]) = $3
	*($1 + [296]) = $7
	*($1 + [272]) = ($1 + [288])
	*($1 + [280]) = $1
	CALL $71(($1 + [280]), ($1 + [272]))
	CALL $72(($1 + [288]), ($1 + [88]))
	$3 = *($1 + [288])
	CALL send_inline($3, (*($1 + [292]) - $3))
	$3 = *($1 + [288])
	if ( ($3 == 0) ){ goto $label$51 }
	*($1 + [292]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$51
	$3 = *($1 + [116])
	if ( ($3 == 0) ){ goto $label$52 }
	*(($1 + [120])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$52
	$3 = *($1 + [104])
	if ( ($3 == 0) ){ goto $label$53 }
	*(($1 + [108])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$53
	if ( (*($1 + [72]) & [1]) ){ goto $label$55 }
	if ( (*($1 + [60]) & [1]) ){ goto $label$54 }
	goto $label$21 
	
.LABEL $label$55
	CALL _ZdlPv(*(($1 + [80])))
	if ( ((*($1 + [60]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$54
	CALL _ZdlPv(*(($1 + [68])))
	$3 = [1]
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	CALL $122(($1 + [208]))
	
.LABEL $label$21
	$3 = [1]
	if ( (*($1 + [48]) & [1]) ){ goto $label$19 }
	
.LABEL $label$20
	if ( (*($1 + [128]) & $3) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL _ZdlPv(*(($1 + [56])))
	if ( ((*($1 + [128]) & $3) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*($6 + [8]))
	$3 = [1]
	if ( ((*($1 + [144]) & [1]) == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$3 = [1]
	if ( (*($1 + [144]) & [1]) ){ goto $label$15 }
	
.LABEL $label$16
	if ( (*($1 + [160]) & $3) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($1 + [160]) & $3) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*($9 + [8]))
	if ( (*($1 + [192]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((*($1 + [192]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$11
	if ( ((*($1 + [208]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($1 + [216])))
	
.LABEL $label$1
	if ( ((*($1 + [256]) & [1]) == 0) ){ goto $label$56 }
	CALL _ZdlPv(*(($1 + [264])))
	
.LABEL $label$56
	$global$0 = ($1 + [304])
	(unreachable)
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [16])
	$global$0 = $3
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$6 }
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$6 }
	$4 = *($2 + [4])
	$5 = *($1 + [4])
	if ( ($5 == 0) ){ goto $label$5 }
	if ( ($4 == 0) ){ goto $label$4 }
	$4 = ($5 <= $4)
	$6 = ( $2 ? $1 : $4 )
	$7 = (*($6 + [4]) + [1])
	*($0 + [4]) = $7
	$1 = ( $1 ? $2 : $4 )
	if ( ((uint_32)*($0) >= (uint_32)$7) ){ goto $label$7 }
	$4 = *($0 + [8])
	if ( ($4 == 0) ){ goto $label$8 }
	CALL _ZdaPv($4)
	
.LABEL $label$8
	*($0) = $7
	$8 = ((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)2)
	*(($0 + [8])) = CALL _Znaj(( [-1] ? (CASTING uint_32)(uint_64 $8) : (CASTING uint_32)(uint_64 (uint_64)$8 >> (uint_64)(int_64)32)) ))
	
.LABEL $label$7
	$9 = *($1 + [4])
	if ( ($9 == 0) ){ goto $label$2 }
	$10 = *($0 + [8])
	$11 = *($1 + [8])
	$12 = *($6 + [8])
	$7 = [0]
	$4 = [0]
	$5 = [0]
	
.LOOP $label$9:
	$13 = *(($12 + $7))
	$2 = *(($11 + $7))
	$1 = ($2 + $13)
	if ( (($5 & [1]) == 0) ){ goto $label$11 }
	$1 = ($1 + [1])
	$5 = (($1 <= $13) | ($1 == 0))
	goto $label$10 
	
.LABEL $label$11
	$5 = ($1 <= $2)
	
.LABEL $label$10
	*(($10 + $7)) = $1
	$7 = ($7 + [4])
	$4 = ($4 + [1])
	if ( ($4 <= $9) ){ goto $label$9 }
	$13 = *(($6 + [4]))
	if ( (((int_32)$5 ^ (int_32)[1]) | ((uint_32)$4 >= (uint_32)$13)) ){ goto $label$1 }
	$1 = (*($0 + [8]) + $7)
	$7 = (*($6 + [8]) + $7)
	
.LOOP $label$12:
	$2 = (*($7) + [1])
	*($1) = $2
	$4 = ($4 + [1])
	$5 = ($2 == 0)
	if ( $2 ){ goto $label$1 }
	$1 = ($1 + [4])
	$7 = ($7 + [4])
	if ( ($4 <= $13) ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$6
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	CALL $10($3, $1, $2)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$13 }
	$4 = *($3 + [4])
	*($0 + [4]) = $4
	if ( ((uint_32)*($0) >= (uint_32)$4) ){ goto $label$14 }
	$7 = *($0 + [8])
	if ( ($7 == 0) ){ goto $label$15 }
	CALL _ZdaPv($7)
	
.LABEL $label$15
	*($0) = $4
	$8 = ((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)2)
	*(($0 + [8])) = CALL _Znaj(( [-1] ? (CASTING uint_32)(uint_64 $8) : (CASTING uint_32)(uint_64 (uint_64)$8 >> (uint_64)(int_64)32)) ))
	$4 = *(($0 + [4]))
	
.LABEL $label$14
	if ( ($4 == 0) ){ goto $label$13 }
	$7 = *($0 + [8])
	$1 = *(($3 + [8]))
	
.LOOP $label$16:
	*($7) = *($1)
	$1 = ($1 + [4])
	$7 = ($7 + [4])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$16 }
	
.LABEL $label$13
	$7 = *(($3 + [8]))
	if ( ($7 == 0) ){ goto $label$3 }
	CALL _ZdaPv($7)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	*($0 + [4]) = $4
	if ( ((uint_32)*($0) >= (uint_32)$4) ){ goto $label$17 }
	$7 = *($0 + [8])
	if ( ($7 == 0) ){ goto $label$18 }
	CALL _ZdaPv($7)
	
.LABEL $label$18
	*($0) = $4
	$8 = ((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)2)
	*(($0 + [8])) = CALL _Znaj(( [-1] ? (CASTING uint_32)(uint_64 $8) : (CASTING uint_32)(uint_64 (uint_64)$8 >> (uint_64)(int_64)32)) ))
	$4 = *(($0 + [4]))
	
.LABEL $label$17
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($0 + [8])
	$1 = *($2 + [8])
	
.LOOP $label$19:
	*($7) = *($1)
	$1 = ($1 + [4])
	$7 = ($7 + [4])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$19 }
	goto $label$3 
	
.LABEL $label$4
	*($0 + [4]) = $5
	$7 = *($0 + [8])
	if ( ((uint_32)*($0) >= (uint_32)$5) ){ goto $label$20 }
	if ( ($7 == 0) ){ goto $label$21 }
	CALL _ZdaPv($7)
	
.LABEL $label$21
	*($0) = $5
	$8 = ((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)2)
	$7 = CALL _Znaj(( [-1] ? (CASTING uint_32)(uint_64 $8) : (CASTING uint_32)(uint_64 (uint_64)$8 >> (uint_64)(int_64)32)) )
	*(($0 + [8])) = $7)
	$5 = *(($0 + [4]))
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$20
	$1 = *($1 + [8])
	
.LOOP $label$22:
	*($7) = *($1)
	$1 = ($1 + [4])
	$7 = ($7 + [4])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$22 }
	
.LABEL $label$3
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$2
	$13 = *(($6 + [4]))
	$5 = [0]
	$4 = [0]
	
.LABEL $label$1
	if ( ((uint_32)$4 >= (uint_32)$13) ){ goto $label$23 }
	$2 = ($13 - $4)
	$1 = ($4 << [2])
	$7 = (*($0 + [8]) + $1)
	$1 = (*($6 + [8]) + $1)
	
.LOOP $label$24:
	*($7) = *($1)
	$7 = ($7 + [4])
	$1 = ($1 + [4])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$24 }
	$4 = $13
	
.LABEL $label$23
	if ( ($5 == 0) ){ goto $label$25 }
	*((*($0 + [8]) + ($4 << [2]))) = [1]
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$25
	*(($7 = ($0 + [4]))) = (*($7) + [-1])
	$global$0 = ($3 + [16])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL eosio_assert(((int_32)$0 != (int_32)$2), [8983])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$4 }
	$4 = *($1 + [4])
	if ( ($4 == 0) ){ goto $label$3 }
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$4) ){ goto $label$2 }
	*($2 + [4]) = [0]
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$6 = *($1 + [4])
	*($3 + [4]) = $6
	*($3) = $6
	$7 = ((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)2)
	$4 = CALL _Znaj(( [-1] ? (CASTING uint_32)(uint_64 $7) : (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)) )
	*($3 + [8]) = $4)
	if ( ($6 == 0) ){ goto $label$5 }
	$8 = *($1 + [8])
	
.LOOP $label$6:
	*($4) = *($8)
	$8 = ($8 + [4])
	$4 = ($4 + [4])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$6 }
	
.LABEL $label$5
	CALL $11($0, $3, $2)
	$4 = *(($3 + [8]))
	if ( ($4 == 0) ){ goto $label$1 }
	CALL _ZdaPv($4)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	*($2 + [4]) = [0]
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$2
	$4 = $5
	$8 = ($5 + [1])
	if ( ((uint_32)*($0) >= (uint_32)$8) ){ goto $label$7 }
	*($0) = $8
	$6 = ($0 + [8])
	$9 = *($6)
	$7 = ((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)2)
	$4 = CALL _Znaj(( [-1] ? (CASTING uint_32)(uint_64 $7) : (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)) )
	*($6) = $4)
	$6 = *(($0 + [4]))
	if ( ($6 == 0) ){ goto $label$10 }
	$8 = $9
	
.LOOP $label$11:
	*($4) = *($8)
	$8 = ($8 + [4])
	$4 = ($4 + [4])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ($9 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdaPv($9)
	$4 = *(($0 + [4]))
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	$4 = ($4 + [1])
	*(($0 + [4])) = $4
	*((*(($0 + [8])) + ($5 << [2]))) = [0]
	$7 = ((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)2)
	$10 = CALL _Znaj(( [-1] ? (CASTING uint_32)(uint_64 $7) : (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)) ))
	$11 = (($5 - *(($1 + [4]))) + [1])
	*($2 + [4]) = $11
	if ( ((uint_32)*($2) >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($2 + [8])
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdaPv($4)
	
.LABEL $label$13
	*($2) = $11
	$7 = ((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)2)
	*(($2 + [8])) = CALL _Znaj(( [-1] ? (CASTING uint_32)(uint_64 $7) : (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)) ))
	$11 = *(($2 + [4]))
	
.LABEL $label$12
	$12 = *($2 + [8])
	if ( ($11 == 0) ){ goto $label$15 }
	$4 = [0]
	
.LOOP $label$16:
	*($12) = [0]
	$12 = ($12 + [4])
	$4 = ($4 + [1])
	if ( ($4 <= $11) ){ goto $label$16 }
	$4 = ($11 << [2])
	$13 = *(($0 + [8]))
	$14 = (($13 + $4) + [-4])
	$15 = ($10 + [-4])
	$16 = ($13 + [-4])
	$17 = (($10 + $4) + [-4])
	$9 = *(($1 + [4]))
	$12 = *($2 + [8])
	$18 = $11
	
.LOOP $label$17:
	*(($20 = ($12 + (($18 = (($19 = $18) + [-1])) << [2])))) = [0]
	$21 = [32]
	
.LOOP $label$18:
	$22 = *(($1 + [8]))
	$4 = $21
	$21 = ($4 + [-1])
	if ( ($21 == 0) ){ goto $label$21 }
	$23 = ([33] - $4)
	$24 = ($22 + [-4])
	$8 = [0]
	$25 = $17
	$26 = $14
	$4 = [0]
	
.LOOP $label$22:
	$6 = *($26)
	$27 = [0]
	if ( ($8 == 0) ){ goto $label$23 }
	$27 = uint_32(*($24) >> $23)
	
.LABEL $label$23
	$22 = [0]
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$24 }
	$22 = (*(($24 + [4])) << $21)
	
.LABEL $label$24
	$4 = ($4 & [1])
	$27 = ($22 | $27)
	$22 = ($6 - $27)
	$28 = ($22 + [-1])
	*($25) = ( $28 ? $22 : $4 )
	$4 = ( ((uint_32)$28 >= (uint_32)$6) ? ($6 <= $27) : $4 )
	$25 = ($25 + [4])
	$26 = ($26 + [4])
	$24 = ($24 + [4])
	$8 = ($8 + [1])
	if ( ((uint_32)$8 <= (uint_32)$9) ){ goto $label$22 }
	$8 = (($19 + $8) + [-1])
	if ( ((uint_32)$8 >= (uint_32)$5) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	$8 = [0]
	$25 = [0]
	$4 = [0]
	
.LOOP $label$25:
	$6 = *(($14 + $8))
	$24 = [0]
	if ( ((int_32)$9 == (int_32)$25) ){ goto $label$26 }
	$24 = *(($22 + $8))
	
.LABEL $label$26
	$4 = ($4 & [1])
	$26 = ($6 - $24)
	$27 = ($26 + [-1])
	*(($17 + $8)) = ( $27 ? $26 : $4 )
	$4 = ( ((uint_32)$27 >= (uint_32)$6) ? ($6 <= $24) : $4 )
	$8 = ($8 + [4])
	$25 = ($25 + [1])
	if ( ((uint_32)$25 <= (uint_32)$9) ){ goto $label$25 }
	$8 = (($19 + $25) + [-1])
	if ( ((uint_32)$8 >= (uint_32)$5) ){ goto $label$19 }
	
.LABEL $label$20
	if ( ($4 == 0) ){ goto $label$19 }
	$4 = ($8 << [2])
	$6 = ($10 + $4)
	$24 = ($13 + $4)
	
.LOOP $label$27:
	$25 = *($24)
	*($6) = ($25 + [-1])
	$4 = ($25 == 0)
	$8 = ($8 + [1])
	if ( ((uint_32)$8 >= (uint_32)$5) ){ goto $label$19 }
	$6 = ($6 + [4])
	$24 = ($24 + [4])
	if ( ($25 == 0) ){ goto $label$27 }
	
.LABEL $label$19
	if ( $4 ){ goto $label$28 }
	*($20) = (*($20) | ([1] << $21))
	if ( ((uint_32)$8 <= (uint_32)$18) ){ goto $label$28 }
	$6 = ($8 << [2])
	$4 = ($15 + $6)
	$6 = ($16 + $6)
	
.LOOP $label$29:
	*($6) = *($4)
	$4 = ($4 + [-4])
	$6 = ($6 + [-4])
	$8 = ($8 + [-1])
	if ( ((uint_32)$8 > (uint_32)$18) ){ goto $label$29 }
	
.LABEL $label$28
	if ( $21 ){ goto $label$18 }
	$17 = ($17 + [-4])
	$14 = ($14 + [-4])
	if ( $18 ){ goto $label$17 }
	goto $label$14 
	
.LABEL $label$15
	$11 = [0]
	
.LABEL $label$14
	$4 = ($11 + [-1])
	if ( *(($12 + ($4 << [2]))) ){ goto $label$30 }
	*(($2 + [4])) = $4
	
.LABEL $label$30
	$6 = ($0 + [4])
	$4 = *($6)
	if ( ($4 == 0) ){ goto $label$31 }
	$8 = ($4 + [-1])
	$4 = (*(($0 + [8])) + ($8 << [2]))
	
.LOOP $label$32:
	if ( *($4) ){ goto $label$31 }
	*($6) = $8
	$4 = ($4 + [-4])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$32 }
	
.LABEL $label$31
	if ( ($10 == 0) ){ goto $label$1 }
	CALL _ZdaPv($10)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$2 }
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$2 }
	$5 = *($2 + [4])
	$4 = *($1 + [4])
	$6 = ( $4 ? $5 : ($4 <= $5) )
	*($0 + [4]) = $6
	if ( ((uint_32)*($0) >= (uint_32)$6) ){ goto $label$3 }
	$4 = *($0 + [8])
	if ( ($4 == 0) ){ goto $label$4 }
	CALL _ZdaPv($4)
	
.LABEL $label$4
	*($0) = $6
	$7 = ((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)2)
	*(($0 + [8])) = CALL _Znaj(( [-1] ? (CASTING uint_32)(uint_64 $7) : (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)) ))
	$6 = *(($0 + [4]))
	
.LABEL $label$3
	if ( ($6 == 0) ){ goto $label$1 }
	$4 = *($0 + [8])
	$2 = *($2 + [8])
	$1 = *($1 + [8])
	$5 = [0]
	
.LOOP $label$5:
	*($4) = (*($2) & *($1))
	$4 = ($4 + [4])
	$2 = ($2 + [4])
	$1 = ($1 + [4])
	$5 = ($5 + [1])
	if ( ($5 <= $6) ){ goto $label$5 }
	$2 = ($6 + [-1])
	$4 = (*($0 + [8]) + ($2 << [2]))
	$1 = ($0 + [4])
	
.LOOP $label$6:
	if ( *($4) ){ goto $label$1 }
	*($1) = $2
	$4 = ($4 + [-4])
	$2 = ($2 + [-1])
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	CALL $12($3, $1, $2)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$7 }
	$1 = *($3 + [4])
	*($0 + [4]) = $1
	if ( ((uint_32)*($0) >= (uint_32)$1) ){ goto $label$8 }
	$4 = *($0 + [8])
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdaPv($4)
	
.LABEL $label$9
	*($0) = $1
	$7 = ((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)2)
	*(($0 + [8])) = CALL _Znaj(( [-1] ? (CASTING uint_32)(uint_64 $7) : (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)) ))
	$1 = *(($0 + [4]))
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$7 }
	$4 = *($0 + [8])
	$2 = *(($3 + [8]))
	
.LOOP $label$10:
	*($4) = *($2)
	$2 = ($2 + [4])
	$4 = ($4 + [4])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$10 }
	
.LABEL $label$7
	$4 = *(($3 + [8]))
	if ( ($4 == 0) ){ goto $label$1 }
	CALL _ZdaPv($4)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($2 + [4]) != (int_32)[0]), [9092])
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$1 }
	$5 = *($1 + [4])
	*(($4 = ($0 + [4]))) = $5
	if ( ($5 == 0) ){ goto $label$1 }
	*($0) = $5
	$6 = ((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)2)
	$5 = CALL _Znaj(( [-1] ? (CASTING uint_32)(uint_64 $6) : (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)32)) )
	*(($0 + [8])) = $5)
	$4 = *($4)
	if ( ($4 == 0) ){ goto $label$1 }
	$1 = *($1 + [8])
	
.LOOP $label$2:
	*($5) = *($1)
	$1 = ($1 + [4])
	$5 = ($5 + [4])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$2 }
	
.LABEL $label$1
	CALL $11($0, $2, $3)
	$5 = *(($3 + [8]))
	if ( ($5 == 0) ){ goto $label$3 }
	CALL _ZdaPv($5)
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

int_64 .FUNC $185 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $184($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $145()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $184($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [22801]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $183($0, (int_64)0)
	*(CALL $145()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $184($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $184($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $184($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $184($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [22801])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [22801]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [22801]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $184($0)
	$5 = *(($6 + [22801]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $184($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [22801]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8259]))
	$8 = (int_64)0
	$5 = *(($6 + [22801]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [22801]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $184($0)
	$5 = *(($6 + [22801]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $184($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [22801]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $183($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [22801]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [22801]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $184($0) + [22801]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $145()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $145()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $145()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [336])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $197($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [16])) = $3
	*($4 + [28]) = $2
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $35(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $200($2)
	
.LABEL $label$6
	CALL $36($8)
	$global$0 = ($4 + [336])
	return [1]
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = ((uint_64)$2 % (uint_64)(int_64)1000)
	*($3) = $4
	if ( (int_64)($4 == 0) ){ goto $label$2 }
	CALL $37($0, *($0 + [168]), $3)
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	if ( (int_64)($2 == 0) ){ goto $label$3 }
	$5 = ((uint_64)((int_64)CALL current_time() + (int_64)-129600000000) > (uint_64)$2)
	
.LABEL $label$3
	CALL eosio_assert($5, [9650])
	$5 = CALL db_lowerbound_i64(*($0 + [176]), *(($0 + [184])), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = ($0 + [176])
	$0 = CALL $38($6, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	$7 = ([1] - $1)
	
.LOOP $label$4:
	$5 = $7
	if ( ((uint_64)*($0 + [184]) >= (uint_64)$2) ){ goto $label$1 }
	if ( (*($0 + [160]) == 0) ){ goto $label$6 }
	$1 = [0]
	$7 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($7, [10070])
	CALL eosio_assert($7, [10040])
	$7 = CALL db_next_i64(*($0 + [212]), ($3 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	$1 = CALL $38($6, $7)
	
.LABEL $label$7
	CALL $39($6, $0)
	if ( $1 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$6
	CALL eosio_assert([1], [10040])
	$1 = [0]
	$0 = CALL db_next_i64(*($0 + [212]), ($3 + [8]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$8 }
	$1 = CALL $38($6, $0)
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$5
	$7 = ($5 + [1])
	$0 = $1
	if ( $5 ){ goto $label$4 }
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $184 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $182($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_32 .FUNC $187 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $183($3, (int_64)0)
	$4 = CALL $185($3, $2, [1], (int_64)4294967295)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_64 .FUNC $186 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $183($3, (int_64)0)
	$4 = CALL $185($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

void .FUNC $180 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	
.LABEL $label$18
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$16
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$15
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$9
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$8
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$2
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($3, *($1))
	*($0 + [8]) = *(($3 + [8]))
	*($0) = *($3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$4 = *($1)
	*($0 + [8]) = *($1 + [8])
	*($0) = $4
	$global$0 = ($3 + [16])
	$1
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $200($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $197($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11620])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $197($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $112 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$9 = ($global$0 - [80])
	$global$0 = $9
	$0 = *($0 + [4])
	$10 = *($0 + [4])
	$11 = (*($0) + int_32($10 >> [1]))
	$12 = *($0)
	if ( (($10 & [1]) == 0) ){ goto $label$1 }
	$12 = *((*($11) + $12))
	
.LABEL $label$1
	*(($10 = (($9 + [64]) + [8]))) = *(($5 + [8]))
	*($9 + [64]) = *($5)
	$5 = CALL $123(($9 + [48]), $6)
	$0 = CALL $123(($9 + [32]), $7)
	$6 = CALL $123(($9 + [16]), $8)
	*(($9 + [8])) = *($10)
	*($9) = *($9 + [64])
	CALL void $11((int_32 $1), (int_64 $2), (int_64 $3), (int_64 $4), (int_64 $9), (int_32 $5), (int_32 $0), (int_32 $6), (int_32 $12))
	if ( (*($6) & [1]) ){ goto $label$6 }
	if ( (*($0) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($0) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($0 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($5) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($9 + [80])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*($5 + [8]))
	$global$0 = ($9 + [80])
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy(($3 + [64]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9739])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [72]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	CALL $50(*($1), ($0 + [80]))
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[1]), [9739])
	CALL memcpy(($0 + [92]), *($4 + [4]), [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	$global$0 = ($2 + [16])
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9739])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9739])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $50(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [11460])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [11565])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [11498])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [11565])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $195(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [11620])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $195(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL require_auth(*($0))
	*($2 + [16]) = ($0 + [256])
	*($2 + [8]) = *($1 + [8])
	CALL $58(($2 + [24]), ($2 + [16]), ($2 + [8]))
	$0 = *($2 + [28])
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((int_64)*($2 + [8]) != (int_64)*(($0 + [24]))) ){ goto $label$1 }
	*($2 + [24]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)32) | (int_64)*($2 + [24]))
	CALL eosio_assert([1], [10070])
	CALL $63(($2 + [24]))
	CALL $64(*($2 + [16]), $0)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [216])
	$4 = *($1)
	$6 = *(($0 + [244]))
	$5 = *(($0 + [240]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$1 = ($6 + [-24])
	$7 = *($1)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$4 }
	$6 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [96]) == (int_32)$3), [9665])
	goto $label$2 
	
.LABEL $label$3
	$1 = CALL db_find_i64(*($3), *(($0 + [224])), (int_64)4982871454518345728, $4)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $61($3, $1)
	CALL eosio_assert(((int_32)*($7 + [96]) == (int_32)$3), [9665])
	
.LABEL $label$2
	CALL eosio_assert([1], [10070])
	CALL eosio_assert([1], [10040])
	$1 = CALL db_next_i64(*($7 + [100]), ($2 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$6 }
	CALL $61($3, $1)
	
.LABEL $label$6
	CALL $62($3, $7)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	CALL $55($0, *($0 + [160]), $1)
}

int_32 .FUNC $20 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [352])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $197($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [344]) = (int_64)0
	*($4 + [336]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[3]), [9739])
	CALL memcpy(($4 + [336]), $2, [4])
	CALL eosio_assert(((uint_32)($7 + [-4]) > (uint_32)[7]), [9739])
	CALL memcpy((($4 + [336]) + [8]), ($2 + [4]), [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [12])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $35(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [344])
	$9 = *($4 + [336])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $9), (int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $200($2)
	
.LABEL $label$5
	CALL $36($8)
	$global$0 = ($4 + [352])
	return [1]
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [48])
	$global$0 = $5
	CALL require_auth(*($0))
	$7 = *($2 + [8])
	$6 = *($1 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$7), [10957])
	$8 = *($4 + [8])
	CALL eosio_assert(((int_64)$7 == (int_64)$8), [10995])
	CALL eosio_assert(((int_64)*($1) <= (int_64)*($2)), [11039])
	$9 = [0]
	if ( ((uint_64)((int_64)*($4) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$11 = $10
	$10 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$10 < (int_32)[6])
	$11 = ($10 + [1])
	$10 = $11
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$10 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [11082])
	$9 = ($0 + [256])
	*($5 + [40]) = $9
	*($5 + [32]) = $6
	CALL $58(($5 + [8]), ($5 + [40]), ($5 + [32]))
	$10 = *($5 + [12])
	if ( ($10 == 0) ){ goto $label$6 }
	if ( ((int_64)*($5 + [32]) != (int_64)*(($10 + [24]))) ){ goto $label$6 }
	$7 = *($0)
	*($5 + [12]) = $1
	*($5 + [8]) = $3
	*($5 + [16]) = $2
	*($5 + [20]) = $4
	CALL eosio_assert([1], [9849])
	CALL $59(*($5 + [40]), $10, $7, ($5 + [8]))
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$6
	$7 = *($0)
	*($5 + [12]) = $3
	*($5 + [8]) = $0
	*($5 + [16]) = $1
	*($5 + [20]) = $2
	*($5 + [24]) = $4
	CALL $60(($5 + [32]), $9, $7, ($5 + [8]))
	$global$0 = ($5 + [48])
}

int_32 .FUNC $22 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [352])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $197($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [336]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9739])
	CALL memcpy(($4 + [336]), $2, [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [8])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $35(($4 + [40]), $0, $1, ($4 + [8]))
	*($4 + [344]) = *($4 + [336])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [344])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $200($2)
	
.LABEL $label$6
	CALL $36($8)
	$global$0 = ($4 + [352])
	return [1]
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	CALL $56($0, *($0 + [168]), $1)
}

int_32 .FUNC $24 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [608])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $197($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [424]))) = (int_64)0
	*(($8 = ($4 + [448]))) = (int_64)0
	*($4 + [408]) = (int_64)0
	*($4 + [400]) = (int_64)0
	*($4 + [416]) = (int_64)0
	*($4 + [432]) = (int_64)0
	*($4 + [440]) = (int_64)0
	*($4 + [388]) = $2
	*($4 + [384]) = $2
	*($4 + [392]) = ($2 + $7)
	*($4 + [584]) = ($4 + [384])
	*($4 + [88]) = ($4 + [400])
	CALL $57(($4 + [88]), ($4 + [584]))
	$9 = *($4 + [392])
	*((($4 + [72]) + [8])) = $9
	*((($4 + [56]) + [8])) = $9
	$10 = *($4 + [384])
	*($4 + [56]) = $10
	*($4 + [72]) = $10
	$9 = CALL $35(($4 + [88]), $0, $1, ($4 + [56]))
	*(($11 = (($4 + [488]) + [8]))) = *($4 + [408])
	*(($12 = (($4 + [472]) + [8]))) = *($3)
	*(($3 = (($4 + [456]) + [8]))) = *($8)
	*($4 + [488]) = *($4 + [400])
	*($4 + [472]) = *($4 + [416])
	*($4 + [456]) = *($4 + [440])
	$0 = *($4 + [432])
	*((($4 + [536]) + [8])) = *($3)
	*((($4 + [520]) + [8])) = *($12)
	*((($4 + [504]) + [8])) = *($11)
	*($4 + [600]) = $0
	*($4 + [536]) = *($4 + [456])
	*($4 + [520]) = *($4 + [472])
	*($4 + [504]) = *($4 + [488])
	$3 = (($4 + [88]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$0 = *((($4 + [504]) + [8]))
	*((($4 + [584]) + [8])) = $0
	$1 = *((($4 + [520]) + [8]))
	*((($4 + [568]) + [8])) = $1
	$10 = *((($4 + [536]) + [8]))
	*((($4 + [552]) + [8])) = $10
	*((($4 + [40]) + [8])) = $0
	*((($4 + [24]) + [8])) = $1
	*((($4 + [8]) + [8])) = $10
	$0 = *($4 + [504])
	*($4 + [584]) = $0
	$1 = *($4 + [520])
	*($4 + [568]) = $1
	*($4 + [40]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [536])
	*($4 + [8]) = $0
	*($4 + [552]) = $0
	CALL void $3((int_32 ($4 + [40])), (int_32 ($4 + [24])), (int_32 ($4 + [600])), (int_32 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $200($2)
	
.LABEL $label$6
	CALL $36($9)
	$global$0 = ($4 + [608])
	return [1]
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	CALL $55($0, *($0 + [152]), $1)
}

int_32 .FUNC $26 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [384])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $197($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [360]) = [0]
	*($4 + [352]) = (int_64)0
	*($4 + [340]) = $2
	*($4 + [336]) = $2
	*($4 + [344]) = ($2 + $7)
	CALL $50(($4 + [336]), ($4 + [352]))
	$3 = *($4 + [344])
	*((($4 + [24]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$8 = *($4 + [336])
	*($4 + [8]) = $8
	*($4 + [24]) = $8
	$9 = CALL $35(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$10 = CALL $123(($4 + [368]), ($4 + [352]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $10), (int_32 $6))
	if ( ((*($4 + [368]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($10 + [8]))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $200($2)
	
.LABEL $label$6
	CALL $36($9)
	if ( ((*($4 + [352]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [360])))
	
.LABEL $label$7
	$global$0 = ($4 + [384])
	return [1]
}

void .FUNC $101 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$22()), [9792])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([112])) + [16]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48]) = [0]
	*($3 + [64]) = (int_64)0
	*($3 + [96]) = $1
	*(($3 + [88])) = (int_64)0
	*(($3 + [80])) = (int_64)0
	*(($3 + [72])) = (int_64)0
	CALL $102(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [100])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $76(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [9884])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$22()), [9930])
	*($1 + [32]) = *(*($3))
	$6 = *($1)
	CALL eosio_assert([1], [9981])
	$3 = *($1 + [40])
	$7 = ( *(($1 + [44])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [72])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [40])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $197($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [40]) = $7
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [32]) = ($1 + [16])
	*($5 + [36]) = ($1 + [32])
	*($5 + [44]) = ($1 + [64])
	CALL $79(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [100]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $200($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

void .FUNC $103 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [9884])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$22()), [9930])
	$6 = *($1)
	$7 = ($1 + [40])
	CALL $125($7, *($3))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9981])
	$3 = *($1 + [40])
	$8 = ( *(($1 + [44])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [72])
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $197($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [40]) = $7
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [32]) = ($1 + [16])
	*($5 + [36]) = ($1 + [32])
	*($5 + [44]) = ($1 + [64])
	CALL $79(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [100]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $200($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [32]) = *(*($4 + [4]))
	$4 = *($1 + [40])
	$5 = ( *(($1 + [44])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [72])
	$6 = (CASTING uint_64)(uint_32 $5)
	$7 = ($1 + [40])
	$5 = *($0)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $197($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = ($1 + [32])
	*($3 + [40]) = $7
	*($3 + [44]) = ($1 + [64])
	CALL $79(($3 + [24]), ($3 + [16]))
	$6 = *($1)
	*($1 + [100]) = CALL db_store_i64(*($5 + [8]), (int_64)4982871454518345728, *(*($0 + [8])), $6, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $200($2)
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [40])
	CALL $125($6, *($4 + [4]))
	$4 = *($1 + [40])
	$7 = ( *(($1 + [44])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [72])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $197($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = ($1 + [32])
	*($3 + [40]) = $6
	*($3 + [44]) = ($1 + [64])
	CALL $79(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [100]) = CALL db_store_i64(*($5 + [8]), (int_64)4982871454518345728, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $200($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$22()), [9792])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([112])) + [16]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48]) = [0]
	*($3 + [64]) = (int_64)0
	*($3 + [96]) = $1
	*(($3 + [88])) = (int_64)0
	*(($3 + [80])) = (int_64)0
	*(($3 + [72])) = (int_64)0
	CALL $105(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [100])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $76(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $107 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [68]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10852])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3665743729458675712)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10798])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10798])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $88(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [272])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [256])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [264])), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $88($9, $10)
	*($3 + [28]) = [0]
	*($3 + [24]) = $9
	$8 = *(*(CALL $107(($3 + [24])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [272])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [10746])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	$7 = *($5 + [8])
	*(($6 = ($1 + [24]))) = *(($7 + [8]))
	*($1 + [16]) = *($7)
	$7 = *($5 + [12])
	*($1 + [32]) = *($7)
	*(($1 + [40])) = *(($7 + [8]))
	$5 = *($5 + [16])
	*($1 + [48]) = *($5)
	*(($1 + [56])) = *(($5 + [8]))
	$2 = $2
	$5 = ($2 + [-64])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = $2
	*($3 + [16]) = $3
	$2 = ($1 + [8])
	*($3 + [28]) = $2
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = ($1 + [32])
	*($3 + [40]) = ($1 + [48])
	CALL $108(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)-3665743729458675712, *(*($0 + [8])), $8, $5, [64])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$5 = ($4 + [8])
	$8 = *($5)
	$0 = *(($0 + [8]))
	$11 = *($0)
	$12 = *($1)
	*($3 + [24]) = *($2)
	*($1 + [72]) = CALL db_idx64_store($8, (int_64)-3665743729458675712, $11, $12, ($3 + [24]))
	$8 = *($0)
	$11 = *($5)
	$12 = *($1)
	*($3 + [24]) = *($6)
	*(($1 + [76])) = CALL db_idx64_store($11, (int_64)-3665743729458675711, $8, $12, ($3 + [24]))
	$global$0 = ($3 + [48])
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [8])
	if ( (CALL $189(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [72])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3665743729458675712, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [72]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *((*($4 + [4]) + [24]))
	if ( (CALL $189((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [76]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-3665743729458675711, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [76])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), $0, [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *($0 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [9843])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [112])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9716])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $197($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([240])) + [16]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [168]) = (int_64)0
	*($5 + [176]) = (int_64)0
	*($5 + [208]) = $0
	*(($5 + [40])) = (int_64)0
	*(($5 + [32])) = (int_64)0
	*(($5 + [24])) = (int_64)0
	*(($5 + [72])) = (int_64)0
	*(($5 + [64])) = (int_64)0
	*(($5 + [56])) = (int_64)0
	*(($5 + [136])) = (int_64)0
	*(($5 + [128])) = (int_64)0
	*(($5 + [120])) = (int_64)0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [80])
	*($3 + [60]) = ($5 + [88])
	*($3 + [64]) = ($5 + [112])
	*($3 + [68]) = ($5 + [144])
	*($3 + [72]) = ($5 + [148])
	*($3 + [76]) = ($5 + [149])
	*($3 + [80]) = ($5 + [152])
	*($3 + [84]) = ($5 + [160])
	*($3 + [88]) = ($5 + [161])
	*($3 + [92]) = ($5 + [162])
	*($3 + [96]) = ($5 + [168])
	*($3 + [100]) = ($5 + [184])
	*($3 + [104]) = ($5 + [192])
	*($3 + [108]) = ($5 + [200])
	CALL $82(($3 + [40]), ($3 + [32]))
	*($5 + [212]) = $1
	*($5 + [216 align=4]) = (int_64)-1
	*($5 + [224 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $83(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $200($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [112])
	return $5
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [208]) == (int_32)$0), [10104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$22()), [10149])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10199])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [212]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $84(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]), ($0 + [39]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $36 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [280]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [284])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [280]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [240]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [244])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [48])))
	
.LABEL $label$11
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [240]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [200]))
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [204])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	CALL _ZdlPv($4)
	
.LABEL $label$16
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$15 }
	$3 = *(($0 + [200]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	if ( ((*($0 + [132]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($0 + [140])))
	
.LABEL $label$17
	$3 = *(($0 + [128]))
	if ( ($3 == 0) ){ goto $label$18 }
	CALL _ZdaPv($3)
	
.LABEL $label$18
	$3 = *(($0 + [116]))
	if ( ($3 == 0) ){ goto $label$19 }
	CALL _ZdaPv($3)
	
.LABEL $label$19
	$3 = *(($0 + [104]))
	if ( ($3 == 0) ){ goto $label$20 }
	CALL _ZdaPv($3)
	
.LABEL $label$20
	$2 = *($0 + [84])
	if ( ($2 == 0) ){ goto $label$21 }
	$5 = ($0 + [88])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($4 + [-12])
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$25 }
	*(($4 + [-8])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$25
	$4 = $3
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [84]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $2
	
.LABEL $label$22
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$2 = *($0 + [72])
	if ( ($2 == 0) ){ goto $label$26 }
	$5 = ($0 + [76])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($4 + [-12])
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$30 }
	*(($4 + [-8])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$30
	$4 = $3
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$29 }
	$3 = *(($0 + [72]))
	goto $label$27 
	
.LABEL $label$28
	$3 = $2
	
.LABEL $label$27
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$26
	return $0
}

void .FUNC $37 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = $1
	CALL require_auth(*($0))
	$4 = ($0 + [216])
	$6 = *(($0 + [244]))
	$5 = *(($0 + [240]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)$4), [9665])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [224])), (int_64)4982871454518345728, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $61($4, $7)
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)$4), [9665])
	
.LABEL $label$2
	$1 = *($0)
	*($3 + [16]) = $2
	CALL eosio_assert([1], [9849])
	CALL $73($4, $8, $1, ($3 + [16]))
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [20]) = $2
	*($3 + [16]) = ($3 + [24])
	CALL $74(($3 + [8]), $4, $1, ($3 + [16]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $34 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [480])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $197($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [352]) + [24]))) = (int_64)0
	*(($8 = (($4 + [352]) + [16]))) = (int_64)0
	*($4 + [360]) = (int_64)0
	*($4 + [352]) = (int_64)0
	*($4 + [384]) = (int_64)0
	*($4 + [392]) = [0]
	*($4 + [344]) = ($2 + $7)
	*($4 + [336]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[31]), [9739])
	CALL memcpy(($4 + [352]), $2, [32])
	*($4 + [340]) = ($2 + [32])
	$9 = (($4 + [352]) + [32])
	CALL $50(($4 + [336]), $9)
	$10 = *($4 + [344])
	*((($4 + [24]) + [8])) = $10
	*((($4 + [8]) + [8])) = $10
	$11 = *($4 + [336])
	*($4 + [8]) = $11
	*($4 + [24]) = $11
	$10 = CALL $35(($4 + [40]), $0, $1, ($4 + [8]))
	*(($12 = (($4 + [416]) + [24]))) = *($3)
	*(($13 = (($4 + [416]) + [16]))) = *($8)
	*($4 + [424]) = *($4 + [360])
	*($4 + [416]) = *($4 + [352])
	$3 = CALL $123(($4 + [400]), $9)
	*((($4 + [448]) + [24])) = *($12)
	*((($4 + [448]) + [16])) = *($13)
	*($4 + [456]) = *($4 + [424])
	*($4 + [448]) = *($4 + [416])
	$8 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($8) + $6))
	
.LABEL $label$4
	CALL void $8((int_32 ($4 + [448])), (int_32 $3), (int_32 $6))
	if ( ((*($4 + [400]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $200($2)
	
.LABEL $label$6
	CALL $36($10)
	if ( ((*(($4 + [384])) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [392])))
	
.LABEL $label$7
	$global$0 = ($4 + [480])
	return [1]
}

int_32 .FUNC $35 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [224])
	$global$0 = $4
	*(($5 = (($4 + [208]) + [8]))) = *(($3 + [8]))
	*($4 + [208]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*((($4 + [160]) + [8])) = $3
	$2 = *($4 + [208])
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4 + [160]) = $2
	*($0 + [40]) = (int_64)2
	*($0 + [32]) = (int_64)2
	*($0 + [48]) = (int_64)100
	*($0 + [56]) = (int_64)40
	CALL $154(($4 + [32]), (int_64)0, (int_64)4611686018427387904, (int_64)0, (int_64)4612882287078408192)
	*($0 + [64]) = CALL __fixunstfdi(*($4 + [32]), *($4 + [40]))
	*(($3 = CALL _Znwj([4]))) = [1363093535]
	*($4 + [160]) = $3
	$3 = ($3 + [4])
	*($4 + [168]) = $3
	*($4 + [164]) = $3
	*(($5 = (($4 + [160]) + [20]))) = [0]
	*($4 + [150 align=1]) = [908599062]
	*($4 + [154 align=1]) = [18495]
	*($4 + [156]) = [81]
	*($4 + [172 align=4]) = (int_64)0
	*(($3 = CALL _Znwj([7]))) = [908599062]
	*($3 + [4]) = [63]
	$6 = ($3 + [7])
	*($5) = $6
	*($3 + [5 align=1]) = *($4 + [155 align=1])
	*(($7 = ($4 + [176]))) = $6
	*($4 + [172]) = $3
	*(($5 = ($4 + [192]))) = [0]
	*($4 + [135 align=1]) = (int_64)2891908111920205060
	*($4 + [143 align=1]) = [1363689270]
	*($4 + [184]) = (int_64)0
	*(($3 = CALL _Znwj([12]))) = [370347268]
	*($3 + [4]) = [27]
	*(($6 = ($4 + [204]))) = [0]
	$8 = ($3 + [12])
	*($5) = $8
	*($3 + [5 align=1]) = *($4 + [140 align=1])
	*($3 + [9 align=1]) = *($4 + [144 align=1])
	*($3 + [11]) = *($4 + [146])
	*(($4 + [188])) = $8
	*($4 + [184]) = $3
	*($4 + [196 align=4]) = (int_64)0
	*(($3 = CALL _Znwj([20]))) = (int_64)1951770660078946308
	*($3 + [8 align=1]) = (int_64)4338710456251589151
	*($3 + [16 align=1]) = [1363689535]
	*($0 + [72 align=4]) = (int_64)0
	*(($5 = ($0 + [80]))) = [0]
	$8 = ($3 + [20])
	*($6) = $8
	*(($4 + [200])) = $8
	*($4 + [196]) = $3
	$3 = CALL _Znwj([48])
	*($0 + [72]) = $3
	*(($6 = ($0 + [76]))) = $3
	*($3) = (int_64)0
	*($3 + [8]) = [0]
	*($5) = ($3 + [48])
	$5 = (*($4 + [164]) - *($4 + [160]))
	if ( ($5 == 0) ){ goto $label$7 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	$8 = CALL _Znwj($5)
	*($3) = $8
	*(($9 = ($3 + [4]))) = $8
	*(($3 + [8])) = ($8 + $5)
	$5 = *($4 + [160])
	$3 = (*($4 + [164]) - $5)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($8, $5, $3)
	*($9) = (*($9) + $3)
	
.LABEL $label$7
	$5 = *($6)
	$3 = ($5 + [12])
	*($6) = $3
	*($5 + [12 align=4]) = (int_64)0
	*(($5 + [20])) = [0]
	$6 = (*($7) - *($4 + [172]))
	if ( ($6 == 0) ){ goto $label$8 }
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	$3 = CALL _Znwj($6)
	*(($5 + [12])) = $3
	*(($5 + [20])) = ($3 + $6)
	*(($5 = ($5 + [16]))) = $3
	$8 = *((($4 + [160]) + [12]))
	$6 = (*((($4 + [160]) + [16])) - $8)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($3, $8, $6)
	*($5) = (*($5) + $6)
	
.LABEL $label$8
	$5 = *($6)
	$3 = ($5 + [12])
	*(($6 = ($0 + [76]))) = $3
	*($5 + [12 align=4]) = (int_64)0
	*(($5 + [20])) = [0]
	$8 = (*(($4 + [188])) - *($4 + [184]))
	if ( ($8 == 0) ){ goto $label$9 }
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$3 = CALL _Znwj($8)
	*(($5 + [12])) = $3
	*(($5 + [20])) = ($3 + $8)
	*(($5 = ($5 + [16]))) = $3
	$7 = *(($4 + [184]))
	$8 = (*(($4 + [188])) - $7)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($3, $7, $8)
	*($5) = (*($5) + $8)
	
.LABEL $label$9
	$5 = *($6)
	$3 = ($5 + [12])
	*($6) = $3
	*($5 + [12 align=4]) = (int_64)0
	*(($5 + [20])) = [0]
	$6 = *($4 + [196])
	$8 = (*(($4 + [200])) - $6)
	if ( ($8 == 0) ){ goto $label$10 }
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$3 = CALL _Znwj($8)
	*(($5 + [12])) = $3
	*(($5 + [20])) = ($3 + $8)
	*(($5 = ($5 + [16]))) = $3
	$6 = *(($4 + [196]))
	$8 = (*(($4 + [200])) - $6)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($3, $6, $8)
	*($5) = (*($5) + $8)
	$6 = *($4 + [196])
	
.LABEL $label$10
	*(($3 = ($0 + [76]))) = (*($3) + [12])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($4 + [200])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$11
	$3 = *($4 + [184])
	if ( ($3 == 0) ){ goto $label$12 }
	*(($4 + [188])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$12
	$3 = *($4 + [172])
	if ( ($3 == 0) ){ goto $label$13 }
	*(($4 + [176])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$13
	$3 = *($4 + [160])
	if ( ($3 == 0) ){ goto $label$14 }
	*($4 + [164]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$14
	*($4 + [168]) = [0]
	*($4 + [160]) = (int_64)0
	*(($3 = CALL _Znwj([4]))) = [504565770]
	*($4 + [160]) = $3
	$3 = ($3 + [4])
	*($4 + [168]) = $3
	*($4 + [164]) = $3
	*(($5 = (($4 + [160]) + [20]))) = [0]
	*($4 + [150 align=1]) = (int_64)1951205506857765380
	*($4 + [158 align=1]) = [8222]
	*($4 + [172 align=4]) = (int_64)0
	*(($3 = CALL _Znwj([10]))) = [269158916]
	*($3 + [4]) = [18]
	$6 = ($3 + [10])
	*($5) = $6
	*($3 + [5 align=1]) = *($4 + [155 align=1])
	*($3 + [9]) = *($4 + [159])
	*(($7 = ($4 + [176]))) = $6
	*($4 + [172]) = $3
	*(($5 = ($4 + [192]))) = [0]
	*($4 + [135 align=1]) = (int_64)1301552430022263810
	*($4 + [143 align=1]) = [454497299]
	*($4 + [147 align=1]) = [8222]
	*($4 + [149]) = [34]
	*($4 + [184]) = (int_64)0
	*(($3 = CALL _Znwj([15]))) = [134611970]
	*($3 + [4]) = [10]
	*(($6 = ($4 + [204]))) = [0]
	$8 = ($3 + [15])
	*($5) = $8
	*($3 + [5 align=1]) = *($4 + [140 align=1])
	*($3 + [9 align=1]) = *($4 + [144 align=1])
	*($3 + [11 align=1]) = *($4 + [146 align=1])
	*(($4 + [188])) = $8
	*($4 + [184]) = $3
	*($4 + [196 align=4]) = (int_64)0
	*(($3 = CALL _Znwj([19]))) = (int_64)1011913570868659202
	*($3 + [8 align=1]) = (int_64)2025237836731716112
	*($3 + [16 align=1]) = [8222]
	*($3 + [18]) = [34]
	*($0 + [84 align=4]) = (int_64)0
	*(($5 = ($0 + [92]))) = [0]
	$8 = ($3 + [19])
	*($6) = $8
	*(($4 + [200])) = $8
	*($4 + [196]) = $3
	$3 = CALL _Znwj([48])
	*($0 + [84]) = $3
	*(($6 = ($0 + [88]))) = $3
	*($3) = (int_64)0
	*($3 + [8]) = [0]
	*($5) = ($3 + [48])
	$5 = (*($4 + [164]) - *($4 + [160]))
	if ( ($5 == 0) ){ goto $label$15 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$8 = CALL _Znwj($5)
	*($3) = $8
	*(($9 = ($3 + [4]))) = $8
	*(($3 + [8])) = ($8 + $5)
	$5 = *($4 + [160])
	$3 = (*($4 + [164]) - $5)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$15 }
	CALL memcpy($8, $5, $3)
	*($9) = (*($9) + $3)
	
.LABEL $label$15
	$5 = *($6)
	$3 = ($5 + [12])
	*($6) = $3
	*($5 + [12 align=4]) = (int_64)0
	*(($5 + [20])) = [0]
	$6 = (*($7) - *($4 + [172]))
	if ( ($6 == 0) ){ goto $label$16 }
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$3 = CALL _Znwj($6)
	*(($5 + [12])) = $3
	*(($5 + [20])) = ($3 + $6)
	*(($5 = ($5 + [16]))) = $3
	$8 = *((($4 + [160]) + [12]))
	$6 = (*((($4 + [160]) + [16])) - $8)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($3, $8, $6)
	*($5) = (*($5) + $6)
	
.LABEL $label$16
	$5 = *($6)
	$3 = ($5 + [12])
	*(($6 = ($0 + [88]))) = $3
	*($5 + [12 align=4]) = (int_64)0
	*(($5 + [20])) = [0]
	$8 = (*(($4 + [188])) - *($4 + [184]))
	if ( ($8 == 0) ){ goto $label$17 }
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$3 = CALL _Znwj($8)
	*(($5 + [12])) = $3
	*(($5 + [20])) = ($3 + $8)
	*(($5 = ($5 + [16]))) = $3
	$7 = *(($4 + [184]))
	$8 = (*(($4 + [188])) - $7)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$17 }
	CALL memcpy($3, $7, $8)
	*($5) = (*($5) + $8)
	
.LABEL $label$17
	$5 = *($6)
	$3 = ($5 + [12])
	*($6) = $3
	*($5 + [12 align=4]) = (int_64)0
	*(($5 + [20])) = [0]
	$6 = *($4 + [196])
	$8 = (*(($4 + [200])) - $6)
	if ( ($8 == 0) ){ goto $label$18 }
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$3 = CALL _Znwj($8)
	*(($5 + [12])) = $3
	*(($5 + [20])) = ($3 + $8)
	*(($5 = ($5 + [16]))) = $3
	$6 = *(($4 + [196]))
	$8 = (*(($4 + [200])) - $6)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$18 }
	CALL memcpy($3, $6, $8)
	*($5) = (*($5) + $8)
	$6 = *($4 + [196])
	
.LABEL $label$18
	*(($3 = ($0 + [88]))) = (*($3) + [12])
	if ( ($6 == 0) ){ goto $label$19 }
	*(($4 + [200])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	$3 = *($4 + [184])
	if ( ($3 == 0) ){ goto $label$20 }
	*(($4 + [188])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$20
	$3 = *($4 + [172])
	if ( ($3 == 0) ){ goto $label$21 }
	*(($4 + [176])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$3 = *($4 + [160])
	if ( ($3 == 0) ){ goto $label$22 }
	*($4 + [164]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$22
	*(($4 + [168])) = [0]
	*($4 + [160]) = (int_64)0
	$3 = CALL $191([11268])
	if ( ((uint_32)$3 > (uint_32)[-17]) ){ goto $label$4 }
	$6 = ($0 + [96])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$25 }
	*($4 + [160]) = ($3 << [1])
	$5 = (($4 + [160]) | [1])
	if ( $3 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($4 + [160]) = ($8 | [1])
	*($4 + [168]) = $5
	*($4 + [164]) = $3
	
.LABEL $label$24
	CALL memcpy($5, [11268], $3)
	
.LABEL $label$23
	*(($5 + $3)) = [0]
	$3 = CALL $7(($4 + [112]), ($4 + [160]), [16])
	CALL $8($6, $3)
	$3 = *($3 + [8])
	if ( ($3 == 0) ){ goto $label$26 }
	CALL _ZdaPv($3)
	
.LABEL $label$26
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*($4 + [168]))
	
.LABEL $label$27
	*(($4 + [168])) = [0]
	*($4 + [160]) = (int_64)0
	$3 = CALL $191([11321])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	$6 = ($0 + [108])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$30 }
	*($4 + [160]) = ($3 << [1])
	$5 = (($4 + [160]) | [1])
	if ( $3 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($4 + [160]) = ($8 | [1])
	*($4 + [168]) = $5
	*($4 + [164]) = $3
	
.LABEL $label$29
	CALL memcpy($5, [11321], $3)
	
.LABEL $label$28
	*(($5 + $3)) = [0]
	$3 = CALL $7(($4 + [96]), ($4 + [160]), [16])
	CALL $8($6, $3)
	$3 = *($3 + [8])
	if ( ($3 == 0) ){ goto $label$31 }
	CALL _ZdaPv($3)
	
.LABEL $label$31
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*($4 + [168]))
	
.LABEL $label$32
	*(($4 + [168])) = [0]
	*($4 + [160]) = (int_64)0
	$3 = CALL $191([11383])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$6 = ($0 + [120])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$35 }
	*($4 + [160]) = ($3 << [1])
	$5 = (($4 + [160]) | [1])
	if ( $3 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($4 + [160]) = ($8 | [1])
	*($4 + [168]) = $5
	*($4 + [164]) = $3
	
.LABEL $label$34
	CALL memcpy($5, [11383], $3)
	
.LABEL $label$33
	*(($5 + $3)) = [0]
	$3 = CALL $7(($4 + [80]), ($4 + [160]), [16])
	CALL $8($6, $3)
	$3 = *($3 + [8])
	if ( ($3 == 0) ){ goto $label$36 }
	CALL _ZdaPv($3)
	
.LABEL $label$36
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*($4 + [168]))
	
.LABEL $label$37
	*($0 + [132 align=4]) = (int_64)0
	*(($0 + [140])) = [0]
	$5 = ($0 + [132])
	$3 = CALL $191([11386])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$40 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0 + [132]) = ($6 | [1])
	*(($0 + [140])) = $5
	*(($0 + [136])) = $3
	
.LABEL $label$39
	CALL memcpy($5, [11386], $3)
	
.LABEL $label$38
	*(($5 + $3)) = [0]
	*($0 + [144]) = (int_64)50000000
	*($4 + [72]) = [11440]
	*($4 + [76]) = CALL $191([11440])
	*($4 + [24]) = *($4 + [72])
	CALL $111(($0 + [152]), ($4 + [24]))
	*($4 + [64]) = [11443]
	*($4 + [68]) = CALL $191([11443])
	*($4 + [16]) = *($4 + [64])
	CALL $111(($0 + [160]), ($4 + [16]))
	*($4 + [56]) = [11447]
	*($4 + [60]) = CALL $191([11447])
	*($4 + [8]) = *($4 + [56])
	CALL $111(($0 + [168]), ($4 + [8]))
	*(($0 + [192])) = (int_64)-1
	*(($0 + [200])) = (int_64)0
	*(($0 + [208])) = (int_64)0
	*(($0 + [232])) = (int_64)-1
	*(($0 + [240])) = (int_64)0
	*(($0 + [248])) = [0]
	*(($0 + [272])) = (int_64)-1
	*(($0 + [280])) = (int_64)0
	*(($0 + [288])) = [0]
	*(($0 + [292])) = [0]
	$2 = *($0)
	*($0 + [176]) = $2
	*(($0 + [184])) = $2
	*($0 + [216]) = $2
	*(($0 + [224])) = $2
	*($0 + [256]) = $2
	*(($0 + [264])) = $2
	$global$0 = ($4 + [224])
	return $0
	
.LABEL $label$6
	CALL $143($3)
	
.LABEL $label$5
	CALL $143($3)
	
.LABEL $label$4
	CALL $122(($4 + [160]))
	
.LABEL $label$3
	CALL $122(($4 + [160]))
	
.LABEL $label$2
	CALL $122(($4 + [160]))
	
.LABEL $label$1
	CALL $122($5)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $32 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [448])
	$global$0 = $3
	*(($4 = $3) + [440]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $197($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [392])) = (int_64)0
	*(($4 + [408])) = (int_64)0
	*(($4 + [416])) = (int_64)0
	*(($4 + [432])) = [0]
	*($4 + [360]) = (int_64)0
	*($4 + [352]) = (int_64)0
	*($4 + [368]) = (int_64)0
	*($4 + [376]) = (int_64)0
	*($4 + [384]) = (int_64)0
	*($4 + [400]) = (int_64)0
	*($4 + [424]) = (int_64)0
	*($4 + [340]) = $2
	*($4 + [336]) = $2
	*($4 + [344]) = ($2 + $5)
	*($4 + [16]) = ($4 + [336])
	*($4 + [40]) = ($4 + [352])
	CALL $40(($4 + [40]), ($4 + [16]))
	$3 = *($4 + [344])
	*((($4 + [24]) + [8])) = $3
	*(($4 + [8])) = $3
	$6 = *($4 + [336])
	*($4) = $6
	*($4 + [24]) = $6
	$3 = CALL $35(($4 + [40]), $0, $1, $4)
	*($4 + [16]) = $3
	*($4 + [20]) = ($4 + [440])
	CALL $41(($4 + [16]), ($4 + [352]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $200($2)
	
.LABEL $label$4
	CALL $36($3)
	if ( (*($4 + [424]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [412]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [432])))
	if ( ((*($4 + [412]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [420])))
	$2 = [1]
	if ( ((*($4 + [400]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [400]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [448])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [408])))
	$global$0 = ($4 + [448])
	return $2
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$3 = ($global$0 - [592])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL sha256($1, [32], ($3 + [544]))
	$4 = (int_64)0
	$5 = [16]
	$6 = [0]
	$7 = ($3 + [512])
	$8 = (int_64)0
	
.LOOP $label$2:
	$9 = (($3 + [544]) + $6)
	if ( ($5 <= [2]) ){ goto $label$3 }
	$4 = ((int_64)$4 | (int_64)*($9))
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$5 = ($5 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$5 == (int_32)[1]), [9748])
	*($7 + [8]) = $8
	*($7) = ((int_64)$4 | (int_64)*($9))
	$5 = [16]
	$7 = ($7 + [16])
	$4 = (int_64)0
	$8 = (int_64)0
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = [16]
	if ( ((int_32)$5 == (int_32)[16]) ){ goto $label$4 }
	if ( ($5 <= [2]) ){ goto $label$5 }
	CALL __ashlti3(($3 + [168]), $4, $8, (($5 << [3]) + [-8]))
	$8 = *(($3 + [176]))
	$4 = *($3 + [168])
	
.LABEL $label$5
	*($7) = $4
	*($7 + [8]) = $8
	
.LABEL $label$4
	$4 = (int_64)0
	$5 = [0]
	$7 = ($3 + [480])
	$8 = (int_64)0
	
.LOOP $label$7:
	$9 = ($1 + $5)
	if ( ($6 <= [2]) ){ goto $label$8 }
	$4 = ((int_64)$4 | (int_64)*($9))
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$6 = ($6 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$6 == (int_32)[1]), [9748])
	$10 = *($9)
	*($7 + [8]) = $8
	*($7) = ((int_64)$4 | (int_64)$10)
	$6 = [16]
	$7 = ($7 + [16])
	$4 = (int_64)0
	$8 = (int_64)0
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$6 == (int_32)[16]) ){ goto $label$9 }
	if ( ($6 <= [2]) ){ goto $label$10 }
	CALL __ashlti3(($3 + [152]), $4, $8, (($6 << [3]) + [-8]))
	$8 = *(($3 + [160]))
	$4 = *($3 + [152])
	
.LABEL $label$10
	*($7) = $4
	*($7 + [8]) = $8
	
.LABEL $label$9
	CALL $43(($3 + [464]), $0)
	$11 = CALL $48($0, *($0 + [160]))
	$12 = CALL $48($0, *($0 + [152]))
	$5 = CALL $124(($3 + [352]), $2, [10], [1], $2)
	$13 = CALL $137($5, [0], [10])
	if ( ((*($3 + [352]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$11
	CALL $125($2, CALL $131($2, [10], [1]))
	*($3 + [352]) = [1]
	CALL $6(($3 + [424]), ($3 + [464]), ($3 + [352]))
	*($3 + [288]) = [1]
	CALL $5(($3 + [352]), $2, ($3 + [288]))
	CALL assert_recover_key($1, ($3 + [352]), [66], ($3 + [424]), [34])
	*($3 + [344]) = ($0 + [176])
	CALL $42(($3 + [288]), ($3 + [344]), ($3 + [512]))
	$6 = *($3 + [292])
	if ( ($6 == 0) ){ goto $label$13 }
	if ( ((int_64)((int_64)((int_64)*($3 + [512]) ^ (int_64)*($6 + [16])) | (int_64)((int_64)*($3 + [520]) ^ (int_64)*(($6 + [24])))) != (int_64)0) ){ goto $label$13 }
	if ( ((int_64)(((int_64)((int_64)*($3 + [528]) ^ (int_64)*(($6 + [32]))) | (int_64)((int_64)*((($3 + [512]) + [24])) ^ (int_64)*(($6 + [40])))) == 0) == 0) ){ goto $label$13 }
	$5 = (*($6 + [160]) == 0)
	goto $label$12 
	
.LABEL $label$13
	$6 = [0]
	$5 = [0]
	
.LABEL $label$12
	CALL eosio_assert($5, [10900])
	*(($3 + [336])) = *(($6 + [96]))
	*($3 + [328]) = *($6 + [88])
	$4 = *($6 + [152])
	$14 = *($6 + [80])
	$5 = *($6 + [148])
	$9 = *($6 + [149])
	*(($3 + [312])) = *(($6 + [72]))
	*(($3 + [304])) = *(($6 + [64]))
	*($3 + [296]) = *(($6 + [56]))
	*($3 + [288]) = *($6 + [48])
	CALL memcpy(($3 + [256]), ($3 + [288]), [32])
	$2 = [0]
	$8 = *($3 + [328])
	CALL eosio_assert((((uint_32)$9 <= (uint_32)$5) & ((int_32)$9 != (int_32)[0])), [10402])
	$15 = ((uint_64)((int_64)$8 * (int_64)*($0 + [32])) / (uint_64)(int_64)100)
	$10 = *($0 + [40])
	$10 = ( $10 ? $15 : (uint_64)($15 <= $10) )
	CALL eosio_assert(((uint_64)$8 >= (uint_64)$10), [10432])
	$1 = CALL $51($0, $1, ($3 + [256]))
	*($3 + [252]) = $1
	$7 = ((uint_32)$1 % (uint_32)$5)
	*($3 + [251]) = $7
	$10 = (CASTING uint_64)(uint_32 $5)
	$16 = ((uint_64)((int_64))($8 - $10) * (int_64)$10) / (uint_64)(CASTING uint_64)(uint_32 $9))
	$8 = CALL $52($0, *($0 + [168]))
	$15 = CALL current_time()
	$17 = ((uint_64)$8 / (uint_64)(int_64)10)
	$8 = (int_64)
	if ( (int_64)($8($8 - ((int_64)$17 * (int_64)10))) == 0) ){ goto $label$14 }
	$2 = (uint_64)(((uint_64)((uint_64)$15 / (uint_64)(int_64)1000000) % (uint_64)$8) <= (int_64))($8 - ((uint_64)$17 % (uint_64)(int_64)10)))
	
.LABEL $label$14
	*($3 + [240]) = (int_64)0
	if ( ((uint_64)*($0 + [56]) >= (uint_64)$10) ){ goto $label$33 }
	$2 = ($7 + [1])
	*($3 + [251]) = $2
	$5 = ($13 + [-1])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$31 }
	$9 = *($9 + [4])
	$9 = (*($0 + [72]) + ((int_32)$5 * (int_32)[12]))
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$32 }
	$7 = ($2 & [255])
	
.LOOP $label$34:
	if ( ((int_32)*($5) == (int_32)$7) ){ goto $label$32 }
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$34 }
	goto $label$31 
	
.LABEL $label$33
	CALL __floatunsitf(($3 + [112]), $7)
	CALL $154(($3 + [128]), (int_64)0, (int_64)4611686018427387904, *($3 + [112]), *(($3 + [120])))
	if ( (int_64)(((int_64)$4 & (int_64)CALL __fixunstfdi(*($3 + [128]), *($3 + [136]))) == 0) ){ goto $label$15 }
	$9 = ($13 + [-1])
	if ( ((uint_32)$9 > (uint_32)[3]) ){ goto $label$30 }
	if ( ((int_32)$5 != (int_32)[36]) ){ goto $label$30 }
	$7 = *($7 + [4])
	$7 = (*($0 + [84]) + ((int_32)$9 * (int_32)[12]))
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$29 }
	$1 = (*($3 + [251]) & [255])
	
.LOOP $label$35:
	if ( ((int_32)*($9) == (int_32)$1) ){ goto $label$29 }
	$9 = ($9 + [1])
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$35 }
	goto $label$17 
	
.LABEL $label$32
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$31 }
	$8 = ((int_64)(CASTING uint_64)(uint_32 $2) & (int_64)255)
	if ( (uint_64)($4 <= $8) ){ goto $label$31 }
	$10 = ((int_64)((int_64)$4 + (int_64)$8) + (int_64)((int_64)(CASTING uint_64)(uint_32 ((uint_32)($2 & [255]) / (uint_32)[10])) * (int_64)-10))
	$10 = ( $4 ? $10 : ((uint_64)$10 > (uint_64)(int_64)100) )
	$2 = (CASTING uint_32)(uint_64 $10)
	*($3 + [251]) = $2
	*($3 + [252]) = ($1 + (CASTING uint_32)(uint_64 (int_64))($10 - $8)))
	
.LABEL $label$31
	if ( ((uint_64)$4 <= (uint_64)((int_64)(CASTING uint_64)(uint_32 $2) & (int_64)255)) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$30
	if ( ((int_32)$5 != (int_32)[6]) ){ goto $label$28 }
	$7 = [0]
	$1 = ($3 + [88])
	$9 = [0]
	
.LOOP $label$36:
	CALL __floatunsitf(($3 + [80]), $9)
	CALL $154(($3 + [96]), (int_64)0, (int_64)4611686018427387904, *($3 + [80]), *($1))
	$7 = ($7 + ((int_64)((int_64)$4 & (int_64)CALL __fixunstfdi(*($3 + [96]), *($3 + [104]))) != (int_64)0))
	$9 = ($9 + [1])
	if ( ($9 <= $5) ){ goto $label$36 }
	if ( ($13 == 0) ){ goto $label$38 }
	if ( ((int_32)($7 & [255]) == (int_32)[5]) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($2 == 0) ){ goto $label$17 }
	if ( ((uint_32)(($7 + [-1]) & [255]) > (uint_32)[2]) ){ goto $label$17 }
	
.LABEL $label$37
	CALL $139(($3 + [216]), CALL $fimport$12())
	$9 = *($3 + [216])
	$7 = ($9 & [1])
	$18 = ( *($3 + [224]) ? (($3 + [216]) | [1]) : $7 )
	$13 = ( *($3 + [220]) ? uint_32($9 >> [1]) : $7 )
	if ( ($13 <= [4]) ){ goto $label$27 }
	$1 = $13
	$9 = $18
	$7 = $13
	
.LOOP $label$39:
	CALL memcpy(($3 + [588]), $9, [4])
	$2 = ((int_32)*($3 + [588]) * (int_32)[1540483477])
	$7 = ((int_32)((int_32)((int_32)uint_32($2 >> [24]) ^ (int_32)$2) * (int_32)[1540483477]) ^ (int_32)((int_32)$7 * (int_32)[1540483477]))
	$9 = ($9 + [4])
	$1 = ($1 + [-4])
	if ( ((uint_32)$1 > (uint_32)[3]) ){ goto $label$39 }
	$9 = ($13 + [-4])
	$1 = ($9 & [-4])
	$18 = (($18 + $1) + [4])
	$13 = ($9 - $1)
	if ( ((int_32)$13 != (int_32)[1]) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$29
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$17 }
	$9 = [0]
	*($3 + [224]) = [0]
	*($3 + [216]) = (int_64)0
	$7 = (($3 + [48]) + [8])
	
.LOOP $label$41:
	CALL __floatunsitf(($3 + [48]), $9)
	CALL $154(($3 + [64]), (int_64)0, (int_64)4611686018427387904, *($3 + [48]), *($7))
	if ( ((int_64)((int_64)$4 & (int_64)CALL __fixunstfdi(*($3 + [64]), *($3 + [72]))) == (int_64)0) ){ goto $label$42 }
	$9 = ($9 + [1])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	*($3 + [588]) = $9
	$1 = *($3 + [220])
	if ( ((uint_32)$1 >= (uint_32)*((($3 + [216]) + [8]))) ){ goto $label$43 }
	*($1) = $9
	*($3 + [220]) = (*($3 + [220]) + [1])
	$9 = ($9 + [1])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$43
	CALL $53(($3 + [216]), ($3 + [588]))
	$9 = ($9 + [1])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$41 }
	
.LABEL $label$40
	$5 = *($3 + [216])
	$9 = (*($3 + [220]) - $5)
	if ( ($9 == 0) ){ goto $label$23 }
	$9 = ($5 + ((uint_32)*($3 + [252]) % (uint_32)$9))
	goto $label$22 
	
.LABEL $label$28
	if ( ((int_32)$5 != (int_32)[2]) ){ goto $label$17 }
	if ( ($2 == 0) ){ goto $label$17 }
	CALL $139(($3 + [216]), CALL $fimport$12())
	$9 = *($3 + [216])
	$7 = ($9 & [1])
	$18 = ( *($3 + [224]) ? (($3 + [216]) | [1]) : $7 )
	$13 = ( *($3 + [220]) ? uint_32($9 >> [1]) : $7 )
	if ( ($13 <= [4]) ){ goto $label$21 }
	$1 = $13
	$9 = $18
	$7 = $13
	
.LOOP $label$44:
	CALL memcpy(($3 + [588]), $9, [4])
	$2 = ((int_32)*($3 + [588]) * (int_32)[1540483477])
	$7 = ((int_32)((int_32)((int_32)uint_32($2 >> [24]) ^ (int_32)$2) * (int_32)[1540483477]) ^ (int_32)((int_32)$7 * (int_32)[1540483477]))
	$9 = ($9 + [4])
	$1 = ($1 + [-4])
	if ( ((uint_32)$1 > (uint_32)[3]) ){ goto $label$44 }
	$9 = ($13 + [-4])
	$1 = ($9 & [-4])
	$18 = (($18 + $1) + [4])
	$13 = ($9 - $1)
	if ( ((int_32)$13 != (int_32)[1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$27
	$7 = $13
	if ( ((int_32)$13 == (int_32)[1]) ){ goto $label$25 }
	
.LABEL $label$26
	if ( ((int_32)$13 == (int_32)[2]) ){ goto $label$45 }
	if ( ((int_32)$13 != (int_32)[3]) ){ goto $label$24 }
	$7 = ((int_32)(*($18 + [2]) << [16]) ^ (int_32)$7)
	
.LABEL $label$45
	$7 = ((int_32)(*($18 + [1]) << [8]) ^ (int_32)$7)
	
.LABEL $label$25
	$7 = ((int_32)((int_32)$7 ^ (int_32)*($18)) * (int_32)[1540483477])
	
.LABEL $label$24
	$7 = ((int_32)((int_32)uint_32($7 >> [13]) ^ (int_32)$7) * (int_32)[1540483477])
	$9 = *($3 + [252])
	$9 = ((int_32)(((($9 << [6]) + uint_32($9 >> [2])) + ((int_32)uint_32($7 >> [15]) ^ (int_32)$7)) + [-1640531527]) ^ (int_32)$9)
	*($3 + [252]) = $9
	if ( ((*($3 + [216]) & [1]) == 0) ){ goto $label$46 }
	CALL _ZdlPv(*(($3 + [224])))
	$9 = *($3 + [252])
	
.LABEL $label$46
	*($3 + [251]) = ((uint_32)$9 % (uint_32)$5)
	goto $label$17 
	
.LABEL $label$23
	$9 = ($3 + [251])
	
.LABEL $label$22
	$7 = *($3 + [251])
	$9 = *($9)
	*($3 + [251]) = $9
	*($3 + [252]) = (($9 - $7) + *($3 + [252]))
	if ( ($5 == 0) ){ goto $label$17 }
	*($3 + [220]) = $5
	CALL _ZdlPv($5)
	goto $label$17 
	
.LABEL $label$21
	$7 = $13
	if ( ((int_32)$13 == (int_32)[1]) ){ goto $label$19 }
	
.LABEL $label$20
	if ( ((int_32)$13 == (int_32)[2]) ){ goto $label$47 }
	if ( ((int_32)$13 != (int_32)[3]) ){ goto $label$18 }
	$7 = ((int_32)(*($18 + [2]) << [16]) ^ (int_32)$7)
	
.LABEL $label$47
	$7 = ((int_32)(*($18 + [1]) << [8]) ^ (int_32)$7)
	
.LABEL $label$19
	$7 = ((int_32)((int_32)$7 ^ (int_32)*($18)) * (int_32)[1540483477])
	
.LABEL $label$18
	$7 = ((int_32)((int_32)uint_32($7 >> [13]) ^ (int_32)$7) * (int_32)[1540483477])
	$9 = *($3 + [252])
	$9 = ((int_32)(((($9 << [6]) + uint_32($9 >> [2])) + ((int_32)uint_32($7 >> [15]) ^ (int_32)$7)) + [-1640531527]) ^ (int_32)$9)
	*($3 + [252]) = $9
	if ( ((*($3 + [216]) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*(($3 + [224])))
	$9 = *($3 + [252])
	
.LABEL $label$48
	*($3 + [251]) = ((uint_32)$9 % (uint_32)$5)
	
.LABEL $label$17
	CALL __floatunsitf(($3 + [16]), *($3 + [251]))
	CALL $154(($3 + [32]), (int_64)0, (int_64)4611686018427387904, *($3 + [16]), *(($3 + [24])))
	if ( (int_64)(((int_64)$4 & (int_64)CALL __fixunstfdi(*($3 + [32]), *($3 + [40]))) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	*($3 + [240]) = $16
	
.LABEL $label$15
	$5 = [0]
	$4 = *($0)
	*($3 + [220]) = ($3 + [251])
	*($3 + [216]) = ($3 + [240])
	*($3 + [224]) = ($3 + [252])
	*($3 + [228]) = ($3 + [480])
	*($3 + [232]) = ($3 + [328])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9849])
	CALL $54(*($3 + [344]), $6, $4, ($3 + [216]))
	$4 = *($3 + [240])
	if ( (int_64)($4 == 0) ){ goto $label$50 }
	$8 = *($3 + [336])
	*($3 + [208]) = $8
	*($3 + [200]) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10661])
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$8 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$54 }
	$4 = $8
	$6 = [1]
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$54
	$4 = $8
	
.LOOP $label$55:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$52 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$9 = ($5 + [1])
	$5 = $9
	if ( $6 ){ goto $label$55 }
	$6 = [1]
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$52
	$6 = [0]
	
.LABEL $label$51
	CALL eosio_assert($6, [10710])
	*(($3 + [192])) = [0]
	*($3 + [184]) = (int_64)0
	$5 = CALL $191([10935])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$49 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$58 }
	*($3 + [184]) = ($5 << [1])
	$6 = (($3 + [184]) | [1])
	if ( $5 ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	$9 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($9)
	*($3 + [184]) = ($9 | [1])
	*($3 + [192]) = $6
	*($3 + [188]) = $5
	
.LABEL $label$57
	CALL memcpy($6, [10935], $5)
	
.LABEL $label$56
	*(($6 + $5)) = [0]
	*(($3 + [8])) = *((($3 + [200]) + [8]))
	*($3) = *($3 + [200])
	CALL $49($0, $12, $11, $14, $3, ($3 + [184]), [0])
	if ( ((*($3 + [184]) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*($3 + [192]))
	
.LABEL $label$50
	if ( ((*($3 + [464]) & [1]) == 0) ){ goto $label$59 }
	CALL _ZdlPv(*($3 + [472]))
	
.LABEL $label$59
	$global$0 = ($3 + [592])
	return (unreachable)
	
.LABEL $label$49
	CALL $122(($3 + [184]))
}

int_32 .FUNC $30 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [416])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $197($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [360]) = (int_64)0
	*($4 + [352]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9739])
	CALL memcpy(($4 + [352]), $2, [8])
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9739])
	CALL memcpy(($4 + [56]), ($2 + [8]), [8])
	*($4 + [360]) = *($4 + [56])
	$3 = ($2 + $7)
	*((($4 + [24]) + [8])) = $3
	*($4 + [44]) = ($2 + [16])
	*($4 + [40]) = $2
	*($4 + [48]) = $3
	*($4 + [24]) = *($4 + [40])
	$8 = CALL $35(($4 + [56]), $0, $1, ($4 + [24]))
	*(($3 = (($4 + [368]) + [8]))) = *($4 + [360])
	*($4 + [368]) = *($4 + [352])
	*((($4 + [384]) + [8])) = *($3)
	*($4 + [384]) = *($4 + [368])
	$3 = (($4 + [56]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$0 = *((($4 + [384]) + [8]))
	*((($4 + [400]) + [8])) = $0
	*((($4 + [8]) + [8])) = $0
	$0 = *($4 + [384])
	*($4 + [8]) = $0
	*($4 + [400]) = $0
	CALL void $3((int_32 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $200($2)
	
.LABEL $label$6
	CALL $36($8)
	$global$0 = ($4 + [416])
	return [1]
}

void .FUNC $31 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$9 = ($global$0 - [480])
	$global$0 = $9
	*($9 + [464]) = $1
	*($9 + [472]) = $2
	*($9 + [456]) = $4
	CALL require_auth(*($0))
	$10 = *($7)
	CALL eosio_assert(((int_32)( *($7 + [4]) ? uint_32($10 >> [1]) : ($10 & [1]) ) == (int_32)[64]), [8378])
	CALL $1($7, ($9 + [416]), [32])
	$4 = (int_64)0
	$7 = [16]
	$10 = [0]
	$11 = ($9 + [384])
	$2 = (int_64)0
	
.LOOP $label$2:
	$12 = (($9 + [416]) + $10)
	if ( ($7 <= [2]) ){ goto $label$3 }
	$4 = ((int_64)$4 | (int_64)*($12))
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$7 = ($7 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$10 = ($10 + [1])
	if ( ((int_32)$10 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$7 == (int_32)[1]), [9748])
	$1 = *($12)
	*($11 + [8]) = $2
	*($11) = ((int_64)$4 | (int_64)$1)
	$7 = [16]
	$11 = ($11 + [16])
	$4 = (int_64)0
	$2 = (int_64)0
	$10 = ($10 + [1])
	if ( ((int_32)$10 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$4 }
	if ( ($7 <= [2]) ){ goto $label$5 }
	CALL __ashlti3(($9 + [32]), $4, $2, (($7 << [3]) + [-8]))
	$2 = *(($9 + [40]))
	$4 = *($9 + [32])
	
.LABEL $label$5
	*($11) = $4
	*($11 + [8]) = $2
	
.LABEL $label$4
	$13 = ($0 + [176])
	*($9 + [376]) = $13
	CALL $42(($9 + [248]), ($9 + [376]), ($9 + [384]))
	$12 = [0]
	$10 = [0]
	$7 = *($9 + [252])
	if ( ($7 == 0) ){ goto $label$6 }
	$10 = [0]
	if ( ((int_64)((int_64)((int_64)*($9 + [384]) ^ (int_64)*($7 + [16])) | (int_64)((int_64)*($9 + [392]) ^ (int_64)*(($7 + [24])))) != (int_64)0) ){ goto $label$6 }
	$10 = ( $7 ? [0] : (int_64)(((int_64)((int_64)*($9 + [400]) ^ (int_64)*(($7 + [32]))) | (int_64)((int_64)*((($9 + [384]) + [24])) ^ (int_64)*(($7 + [40])))) == 0) )
	
.LABEL $label$6
	CALL eosio_assert(($10 == 0), [10252])
	$4 = *($9 + [456])
	if ( (uint_64)($4 <= (int_64)2) ){ goto $label$7 }
	$12 = ((uint_64)$4 <= (uint_64)*($0 + [48]))
	
.LABEL $label$7
	CALL eosio_assert($12, [10286])
	if ( (int_64)($3 == 0) ){ goto $label$9 }
	$7 = ((uint_64)*($0 + [64]) > (uint_64)$3)
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [10317])
	CALL $43(($9 + [360]), $0)
	*($9 + [248]) = [1]
	CALL $6(($9 + [320]), ($9 + [360]), ($9 + [248]))
	CALL $134(($9 + [56]), [10346], $8)
	*($9 + [128]) = [1]
	CALL $5(($9 + [248]), ($9 + [56]), ($9 + [128]))
	if ( ((*($9 + [56]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($9 + [64]))
	$4 = *($9 + [456])
	
.LABEL $label$10
	CALL assert_recover_key(($9 + [416]), ($9 + [248]), [66], ($9 + [320]), [34])
	*($9 + [232]) = $3
	if ( ((uint_64)$4 <= (uint_64)*($0 + [56])) ){ goto $label$12 }
	CALL eosio_assert((((int_64)$3 != (int_64)0) & ((uint_64)$4 >= (uint_64)$3)), [10354])
	$1 = ((int_64)$3 + (int_64)-1)
	*($9 + [240]) = $1
	goto $label$11 
	
.LABEL $label$12
	CALL $139(($9 + [128]), $3)
	$7 = CALL $7(($9 + [216]), ($9 + [128]), [10])
	CALL $8(($9 + [56]), $7)
	$7 = *($7 + [8])
	if ( ($7 == 0) ){ goto $label$13 }
	CALL _ZdaPv($7)
	
.LABEL $label$13
	if ( ((*($9 + [128]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($9 + [136]))
	
.LABEL $label$14
	*($9 + [192]) = [0]
	$4 = (int_64)0
	*($9 + [184]) = (int_64)0
	CALL $9(($9 + [184]), ($9 + [56]), ($0 + [96]))
	*($9 + [208]) = [0]
	*($9 + [200]) = (int_64)0
	CALL $12(($9 + [200]), ($9 + [184]), ($0 + [108]))
	CALL $13(($9 + [128]), ($9 + [200]), ($0 + [120]))
	$7 = *($9 + [132])
	if ( ($7 == 0) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)[1]) ){ goto $label$16 }
	$7 = *(*($9 + [136]))
	if ( ((int_32)($7 & [65535]) != (int_32)$7) ){ goto $label$16 }
	$4 = (CASTING uint_64)(uint_32 $7)
	goto $label$15 
	
.LABEL $label$16
	CALL eosio_assert([0], [11194])
	
.LABEL $label$15
	*($9 + [240]) = ((int_64)$4 & (int_64)65535)
	$7 = *($9 + [136])
	if ( ($7 == 0) ){ goto $label$17 }
	CALL _ZdaPv($7)
	
.LABEL $label$17
	$7 = *((($9 + [200]) + [8]))
	if ( ($7 == 0) ){ goto $label$18 }
	CALL _ZdaPv($7)
	
.LABEL $label$18
	$7 = *((($9 + [184]) + [8]))
	if ( ($7 == 0) ){ goto $label$19 }
	CALL _ZdaPv($7)
	
.LABEL $label$19
	$7 = *($9 + [64])
	if ( ($7 == 0) ){ goto $label$20 }
	CALL _ZdaPv($7)
	
.LABEL $label$20
	$1 = *($9 + [240])
	
.LABEL $label$11
	$4 = (int_64)0
	$2 = *($5)
	$14 = *($9 + [456])
	CALL eosio_assert((((uint_64)$1 <= (uint_64)$14) & ((int_64)$1 != (int_64)0)), [10402])
	$15 = ((uint_64)((int_64)$2 * (int_64)*($0 + [32])) / (uint_64)(int_64)100)
	$3 = *($0 + [40])
	$15 = ( $3 ? $15 : (uint_64)($15 <= $3) )
	CALL eosio_assert(((uint_64)$2 >= (uint_64)$15), [10432])
	$16 = *(($5 + [8]))
	*((($9 + [168]) + [8])) = $16
	$3 = *($5)
	*((($9 + [16]) + [8])) = $16
	*($9 + [16]) = $3
	*($9 + [168]) = $3
	CALL $44($0, ($9 + [16]), ((uint_64)((int_64)$14 * (int_64))($2 - $15)) / (uint_64)$1))
	$7 = *($6)
	CALL eosio_assert(((int_32)( *($6 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ) == (int_32)[64]), [8378])
	CALL $1($6, ($9 + [128]), [32])
	$7 = [16]
	$10 = [0]
	$11 = ($9 + [96])
	$2 = (int_64)0
	
.LOOP $label$22:
	$12 = (($9 + [128]) + $10)
	if ( ($7 <= [2]) ){ goto $label$23 }
	$4 = ((int_64)$4 | (int_64)*($12))
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$7 = ($7 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$10 = ($10 + [1])
	if ( ((int_32)$10 != (int_32)[32]) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	CALL eosio_assert(((int_32)$7 == (int_32)[1]), [9748])
	$1 = *($12)
	*($11 + [8]) = $2
	*($11) = ((int_64)$4 | (int_64)$1)
	$7 = [16]
	$11 = ($11 + [16])
	$4 = (int_64)0
	$2 = (int_64)0
	$10 = ($10 + [1])
	if ( ((int_32)$10 != (int_32)[32]) ){ goto $label$22 }
	
.LABEL $label$21
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$24 }
	if ( ($7 <= [2]) ){ goto $label$25 }
	CALL __ashlti3($9, $4, $2, (($7 << [3]) + [-8]))
	$2 = *(($9 + [8]))
	$4 = *($9)
	
.LABEL $label$25
	*($11) = $4
	*($11 + [8]) = $2
	
.LABEL $label$24
	$4 = *($0)
	*($9 + [56]) = $0
	*($9 + [72]) = $5
	*($9 + [60]) = ($9 + [464])
	*($9 + [64]) = ($9 + [384])
	*($9 + [68]) = ($9 + [96])
	*($9 + [76]) = ($9 + [456])
	*($9 + [80]) = ($9 + [232])
	*($9 + [84]) = ($9 + [240])
	*($9 + [88]) = ($9 + [472])
	CALL $45(($9 + [48]), $13, $4, ($9 + [56]))
	if ( ((*($9 + [360]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*($9 + [368]))
	
.LABEL $label$26
	$global$0 = ($9 + [480])
}

int_32 .FUNC $198 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $199($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8292])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $199 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11656]) == 0) ){ goto $label$2 }
	$2 = *([0] + [11660])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [11656]) = [1]
	$2 = ($2 << [16])
	*([0] + [11660]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11660])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [11660]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [11656]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [11656]) = [1]
	$3 = ($3 << [16])
	*([0] + [11660]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11660])
	
.LABEL $label$10
	*([0] + [11660]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $196 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $197($1)
	
.LABEL $label$2
	*(CALL $145()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $197(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $200($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $197 (int_32 $0)
{
	return CALL $198([11664], $0)
}

void .FUNC $194 (int_32 $0)
{
	*($0) = [0]
}

int_32 .FUNC $195 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $145())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $196($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $192 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL $188($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

void .FUNC $193 (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC $190 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($1)
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((int_32)$3 != (int_32)($2 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$2 = *($1)
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$3 == (int_32)($2 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($3 - ($2 & [255]))
}

int_32 .FUNC $191 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}