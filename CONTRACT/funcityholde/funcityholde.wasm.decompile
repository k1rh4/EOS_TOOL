(data (i32.const 8192) "EOS\00")
(data (i32.const 8196) "eosio.token\00")
(data (i32.const 8208) "transfer\00")
(data (i32.const 8217) "match\00")
(data (i32.const 8223) "exitroom\00")
(data (i32.const 8232) "playerauth\00")
(data (i32.const 8243) "exitplayer\00")
(data (i32.const 8254) "cancelbuy\00")
(data (i32.const 8264) "extend pool\00")
(data (i32.const 8276) "player1 not exist\00")
(data (i32.const 8294) "player1 match already\00")
(data (i32.const 8316) "player1 amount not buy in\00")
(data (i32.const 8342) "player1 status not busy\00")
(data (i32.const 8366) "player2 not exist\00")
(data (i32.const 8384) "player2 match already\00")
(data (i32.const 8406) "player2 amount not buy in\00")
(data (i32.const 8432) "player2 status not busy\00")
(data (i32.const 8456) "buy \e5\8f\82\e6\95\b0\e5\8f\af\e8\83\bd\e4\bc\a0\e9\80\92\e8\b4\9f\e6\95\b0\00")
(data (i32.const 8485) "balance \e5\8f\82\e6\95\b0\e5\8f\af\e8\83\bd\e4\bc\a0\e9\80\92\e8\b4\9f\e6\95\b0\00")
(data (i32.const 8518) "player not exist\00")
(data (i32.const 8535) "player is free, not need exitroom\00")
(data (i32.const 8569) "the player is not buyin\00")
(data (i32.const 8593) "the player buy is not match\00")
(data (i32.const 8621) "the gametype is not right\00")
(data (i32.const 8647) "the room_id is not right\00")
(data (i32.const 8672) "funcityhofee\00")
(data (i32.const 8685) "the game is begin, can\'t cancel buy\00")
(data (i32.const 8721) "you not buy in\00")
(data (i32.const 8736) "cancel buy in\00")
(data (i32.const 8750) "string is too long to be a valid name\00")
(data (i32.const 8788) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8855) "character is not in allowed character set for names\00")
(data (i32.const 8907) "string is too long to be a valid symbol_code\00")
(data (i32.const 8952) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9005) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9054) "invalid symbol name\00")
(data (i32.const 9074) "room id:\00")
(data (i32.const 9083) " player: \00")
(data (i32.const 9093) " referral reward! - funcity.one\00")
(data (i32.const 9128) "\ac#\00\00")
(data (i32.const 9132) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9165) "write\00")
(data (i32.const 9171) " fee! - funcity.one\00")
(data (i32.const 9191) " settlement! - funcity.one\00")
(data (i32.const 9218) "read\00")
(data (i32.const 9223) "get\00")
(data (i32.const 9227) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9278) "error reading iterator\00")
(data (i32.const 9301) "cannot pass end iterator to modify\00")
(data (i32.const 9336) "object passed to modify is not in multi_index\00")
(data (i32.const 9382) "cannot modify objects in table of another contract\00")
(data (i32.const 9433) "updater cannot change primary key when modifying an object\00")
(data (i32.const 17908) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "sha256" (func $fimport$2 (param i32 i32 i32)))
(import "env" "memset" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "ripemd160" (func $fimport$5 (param i32 i32 i32)))
(import "env" "action_data_size" (func $fimport$6 (result i32)))
(import "env" "read_action_data" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$8 (param i64)))
(import "env" "db_find_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$10 (result i64)))
(import "env" "db_update_i64" (func $fimport$11 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$12 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$13 (param i32 i64 i32)))
(import "env" "current_time" (func $fimport$14 (result i64)))
(import "env" "is_account" (func $fimport$15 (param i64) (result i32)))
(import "env" "send_inline" (func $fimport$16 (param i32 i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$18))
(import "env" "prints_l" (func $fimport$19 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$26 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$27 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$29 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$30 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$31 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$34 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$36 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$37 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$38 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $2))
(export "_Znwj" (func $36))
(export "_ZdlPv" (func $38))
(export "_Znaj" (func $37))
(export "_ZdaPv" (func $39))
(export "_ZnwjSt11align_val_t" (func $40))
(export "_ZnajSt11align_val_t" (func $41))
(export "_ZdlPvSt11align_val_t" (func $42))
(export "_ZdaPvSt11align_val_t" (func $43))
(table $0 7 7 anyfunc)
(elem (i32.const 1) $4 $6 $8 $10 $12 $14)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17994))
(global $global$2 i32 (i32.const 17994))


int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9278])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $58($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([112])) + [88]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [96]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [48])
	*($3 + [44]) = ($5 + [56])
	*($3 + [48]) = ($5 + [64])
	*($3 + [52]) = ($5 + [72])
	*($3 + [56]) = ($5 + [80])
	*($3 + [60]) = ($5 + [88])
	CALL $33(($3 + [32]), ($3 + [24]))
	*($5 + [104]) = [-1]
	*($5 + [100]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $34(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $61($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9165])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [9165])
	CALL memcpy(*($3 + [4]), $2, [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9165])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9165])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9165])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9165])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9165])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9165])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9165])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9165])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9165])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9165])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9165])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9165])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9165])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $35(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $55([9074])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$4
	CALL memcpy($6, [9074], $5)
	
.LABEL $label$3
	*(($6 + $5)) = [0]
	*($4 + [24]) = [0]
	*($4 + [16]) = (int_64)0
	$6 = (($4 + [16]) | [1])
	
.LOOP $label$6:
	$8 = ((uint_64)$3 / (uint_64)(int_64)10)
	$5 = (CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$8 * (int_64)10))
	CALL $1(($4 + [32]), int_32((( ($5) | [48]) ? ($5 + [55]) : ($5 <= [10]) ) << [24]) >> [24]), ($4 + [16]))
	if ( (*($4 + [16]) & [1]) ){ goto $label$8 }
	*($4 + [16]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($4 + [16]) + [8]))) = [0]
	*($4 + [20]) = [0]
	
.LABEL $label$7
	CALL $47(($4 + [16]), [0])
	*((($4 + [16]) + [8])) = *((($4 + [32]) + [8]))
	*($4 + [16]) = *($4 + [32])
	$5 = ((uint_64)$3 > (uint_64)(int_64)9)
	$3 = $8
	if ( $5 ){ goto $label$6 }
	$5 = *($4 + [16])
	$7 = ($5 & [1])
	CALL $49($0, ( *((($4 + [16]) + [8])) ? $6 : $7 ), ( *($4 + [20]) ? uint_32($5 >> [1]) : $7 ))
	CALL $48($0, [9083])
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$12 }
	$6 = [0]
	$7 = *([0] + [9128])
	
.LOOP $label$14:
	*((($4 + [32]) + ($5 = $6))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$6 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$13 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$14 }
	
.LABEL $label$13
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$11 }
	*($4) = ($6 << [1])
	$7 = ($4 | [1])
	goto $label$10 
	
.LABEL $label$12
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	*($4) = [0]
	$5 = ($4 | [1])
	$6 = $5
	goto $label$9 
	
.LABEL $label$11
	$9 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($4) = ($9 | [1])
	*($4 + [8]) = $7
	*($4 + [4]) = $6
	
.LABEL $label$10
	$9 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$15:
	*(($7 + $5)) = *((($4 + [32]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$15 }
	$6 = ($7 + $6)
	$5 = ($4 | [1])
	
.LABEL $label$9
	*($6) = [0]
	$6 = *($4)
	$7 = ($6 & [1])
	CALL $49($0, ( *($4 + [8]) ? $5 : $7 ), ( *($4 + [4]) ? uint_32($6 >> [1]) : $7 ))
	CALL $48($0, [9093])
	if ( (*($4) & [1]) ){ goto $label$17 }
	if ( (*($4 + [16]) & [1]) ){ goto $label$16 }
	goto $label$1 
	
.LABEL $label$17
	CALL _ZdlPv(*(($4 + [8])))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($4 + [24])))
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9218])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9218])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9218])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9218])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9218])
	CALL memcpy(($3 + [32]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $26($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9165])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9165])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $30(CALL $29($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $26($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $28(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $55([9074])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$4
	CALL memcpy($6, [9074], $5)
	
.LABEL $label$3
	*(($6 + $5)) = [0]
	*($4 + [24]) = [0]
	*($4 + [16]) = (int_64)0
	$6 = (($4 + [16]) | [1])
	
.LOOP $label$6:
	$8 = ((uint_64)$3 / (uint_64)(int_64)10)
	$5 = (CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$8 * (int_64)10))
	CALL $1(($4 + [32]), int_32((( ($5) | [48]) ? ($5 + [55]) : ($5 <= [10]) ) << [24]) >> [24]), ($4 + [16]))
	if ( (*($4 + [16]) & [1]) ){ goto $label$8 }
	*($4 + [16]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($4 + [16]) + [8]))) = [0]
	*($4 + [20]) = [0]
	
.LABEL $label$7
	CALL $47(($4 + [16]), [0])
	*((($4 + [16]) + [8])) = *((($4 + [32]) + [8]))
	*($4 + [16]) = *($4 + [32])
	$5 = ((uint_64)$3 > (uint_64)(int_64)9)
	$3 = $8
	if ( $5 ){ goto $label$6 }
	$5 = *($4 + [16])
	$7 = ($5 & [1])
	CALL $49($0, ( *((($4 + [16]) + [8])) ? $6 : $7 ), ( *($4 + [20]) ? uint_32($5 >> [1]) : $7 ))
	CALL $48($0, [9083])
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$12 }
	$6 = [0]
	$7 = *([0] + [9128])
	
.LOOP $label$14:
	*((($4 + [32]) + ($5 = $6))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$6 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$13 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$14 }
	
.LABEL $label$13
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$11 }
	*($4) = ($6 << [1])
	$7 = ($4 | [1])
	goto $label$10 
	
.LABEL $label$12
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	*($4) = [0]
	$5 = ($4 | [1])
	$6 = $5
	goto $label$9 
	
.LABEL $label$11
	$9 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($4) = ($9 | [1])
	*($4 + [8]) = $7
	*($4 + [4]) = $6
	
.LABEL $label$10
	$9 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$15:
	*(($7 + $5)) = *((($4 + [32]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$15 }
	$6 = ($7 + $6)
	$5 = ($4 | [1])
	
.LABEL $label$9
	*($6) = [0]
	$6 = *($4)
	$7 = ($6 & [1])
	CALL $49($0, ( *($4 + [8]) ? $5 : $7 ), ( *($4 + [4]) ? uint_32($6 >> [1]) : $7 ))
	CALL $48($0, [9191])
	if ( (*($4) & [1]) ){ goto $label$17 }
	if ( (*($4 + [16]) & [1]) ){ goto $label$16 }
	goto $label$1 
	
.LABEL $label$17
	CALL _ZdlPv(*(($4 + [8])))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($4 + [24])))
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $55([9074])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$4
	CALL memcpy($6, [9074], $5)
	
.LABEL $label$3
	*(($6 + $5)) = [0]
	*($4 + [24]) = [0]
	*($4 + [16]) = (int_64)0
	$6 = (($4 + [16]) | [1])
	
.LOOP $label$6:
	$8 = ((uint_64)$3 / (uint_64)(int_64)10)
	$5 = (CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$8 * (int_64)10))
	CALL $1(($4 + [32]), int_32((( ($5) | [48]) ? ($5 + [55]) : ($5 <= [10]) ) << [24]) >> [24]), ($4 + [16]))
	if ( (*($4 + [16]) & [1]) ){ goto $label$8 }
	*($4 + [16]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($4 + [16]) + [8]))) = [0]
	*($4 + [20]) = [0]
	
.LABEL $label$7
	CALL $47(($4 + [16]), [0])
	*((($4 + [16]) + [8])) = *((($4 + [32]) + [8]))
	*($4 + [16]) = *($4 + [32])
	$5 = ((uint_64)$3 > (uint_64)(int_64)9)
	$3 = $8
	if ( $5 ){ goto $label$6 }
	$5 = *($4 + [16])
	$7 = ($5 & [1])
	CALL $49($0, ( *((($4 + [16]) + [8])) ? $6 : $7 ), ( *($4 + [20]) ? uint_32($5 >> [1]) : $7 ))
	CALL $48($0, [9083])
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$12 }
	$6 = [0]
	$7 = *([0] + [9128])
	
.LOOP $label$14:
	*((($4 + [32]) + ($5 = $6))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$6 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$13 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$14 }
	
.LABEL $label$13
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$11 }
	*($4) = ($6 << [1])
	$7 = ($4 | [1])
	goto $label$10 
	
.LABEL $label$12
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	*($4) = [0]
	$5 = ($4 | [1])
	$6 = $5
	goto $label$9 
	
.LABEL $label$11
	$9 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($4) = ($9 | [1])
	*($4 + [8]) = $7
	*($4 + [4]) = $6
	
.LABEL $label$10
	$9 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$15:
	*(($7 + $5)) = *((($4 + [32]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$15 }
	$6 = ($7 + $6)
	$5 = ($4 | [1])
	
.LABEL $label$9
	*($6) = [0]
	$6 = *($4)
	$7 = ($6 & [1])
	CALL $49($0, ( *($4 + [8]) ? $5 : $7 ), ( *($4 + [4]) ? uint_32($6 >> [1]) : $7 ))
	CALL $48($0, [9171])
	if ( (*($4) & [1]) ){ goto $label$17 }
	if ( (*($4 + [16]) & [1]) ){ goto $label$16 }
	goto $label$1 
	
.LABEL $label$17
	CALL _ZdlPv(*(($4 + [8])))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($4 + [24])))
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9165])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9165])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [16]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9165])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9165])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9165])
	CALL memcpy(*($4 + [4]), ($0 + [32]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $51($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $46($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $55($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $46($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $61($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $56(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9492])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $56(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $44 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $51 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9504]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9508])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9504]) = [1]
	$2 = ($2 << [16])
	*([0] + [9508]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9508])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9508]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9504]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9504]) = [1]
	$3 = ($3 << [16])
	*([0] + [9508]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9508])
	
.LABEL $label$10
	*([0] + [9508]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $8 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$6 = ($global$0 - [208])
	$global$0 = $6
	CALL require_auth(*($0))
	CALL eosio_assert((uint_64)($2 <= (int_64)10000000000), [8456])
	CALL eosio_assert((uint_64)($3 <= (int_64)10000000000), [8485])
	$7 = ($0 + [32])
	$9 = *(($0 + [60]))
	$8 = *(($0 + [56]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	
.LOOP $label$4:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$3 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($11 + [96]) == (int_32)$7), [9227])
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	$10 = CALL db_find_i64(*($7), *(($0 + [40])), (int_64)-4851762761677406208, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $18($7, $10)
	CALL eosio_assert(((int_32)*($11 + [96]) == (int_32)$7), [9227])
	
.LABEL $label$1
	$10 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($10, [8518])
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)[1]), [8535])
	CALL eosio_assert(((int_64)*($11 + [72]) != (int_64)0), [8569])
	CALL eosio_assert(((int_64)*($11 + [72]) == (int_64)$2), [8593])
	CALL eosio_assert(((int_64)*($11 + [64]) == (int_64)$5), [8621])
	CALL eosio_assert(((int_64)*($11 + [80]) == (int_64)$4), [8647])
	$12 = *($0)
	CALL eosio_assert($10, [9301])
	CALL eosio_assert(((int_32)*($11 + [96]) == (int_32)$7), [9336])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL eosio_assert0()), [9382])
	*($11 + [48]) = [0]
	$10 = ($11 + [56])
	*($6 + [24]) = *($10)
	$5 = *($11)
	$13 = CALL current_time()
	*($11 + [72]) = (int_64)0
	*($11 + [80]) = (int_64)0
	*($10) = ((int_64)((uint_64)$13 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($11)), [9433])
	*($6 + [48]) = (($6 + [96]) + [81])
	*($6 + [44]) = ($6 + [96])
	*($6 + [40]) = ($6 + [96])
	*($6 + [192]) = ($6 + [40])
	*($6 + [60]) = ($11 + [16])
	*($6 + [56]) = $11
	*($6 + [64]) = ($11 + [48])
	*($6 + [68]) = $10
	*($6 + [72]) = ($11 + [64])
	*($6 + [76]) = ($11 + [72])
	*($6 + [80]) = ($11 + [80])
	*($6 + [84]) = ($11 + [88])
	CALL $19(($6 + [56]), ($6 + [192]))
	CALL db_update_i64(*($11 + [100]), $12, ($6 + [96]), [81])
	$9 = ($0 + [48])
	if ( (uint_64)($5 <= *($9)) ){ goto $label$5 }
	*($9) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($6 + [56]) = *($10)
	if ( (CALL $54(($6 + [24]), ($6 + [56]), [8]) == 0) ){ goto $label$6 }
	$9 = ($11 + [104])
	$10 = *($9)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$7 }
	$10 = CALL db_idx64_find_primary(*(($0 + [32])), *(($0 + [40])), (int_64)-4851762761677406208, ($6 + [192]), $5)
	*($9) = $10
	
.LABEL $label$7
	CALL db_idx64_update($10, $12, ($6 + [56]))
	
.LABEL $label$6
	if ( ((uint_64)$3 <= (uint_64)$2) ){ goto $label$17 }
	$5 = (int_64)
	$2 = ((int_64)$5($3 - $2)) << (int_64)1
	$14 = ((uint_64)$2) / (uint_64)(int_64)100
	$13 = $14)
	$12 = *($11 + [88])
	if ( ((int_64)$12 == (int_64)*($0)) ){ goto $label$12 }
	$13 = $14
	if ( (CALL is_account($12) == 0) ){ goto $label$12 }
	$15 = ((uint_64)$2 / (uint_64)(int_64)1000)
	$13 = (int_64))($14 - $15)
	if ( (uint_64)($2 <= (int_64)1000) ){ goto $label$12 }
	*($6 + [48]) = (int_64)3617214756542218240
	*($6 + [40]) = *($0)
	$10 = CALL $55([8192])
	if ( ($10 <= [8]) ){ goto $label$16 }
	CALL eosio_assert([0], [8907])
	goto $label$15 
	
.LABEL $label$17
	$5 = (int_64))($2 - $3)
	if ( (int_64)($3 == 0) ){ goto $label$10 }
	*($6 + [48]) = (int_64)3617214756542218240
	*($6 + [40]) = *($0)
	$11 = CALL $55([8192])
	if ( ($11 <= [8]) ){ goto $label$20 }
	CALL eosio_assert([0], [8907])
	goto $label$19 
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$2 = (int_64)0
	
.LOOP $label$21:
	$10 = *(($11 + [8191]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$22 }
	CALL eosio_assert([0], [8952])
	
.LABEL $label$22
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$21 }
	$13 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$11 
	
.LABEL $label$18
	$13 = (int_64)4
	goto $label$11 
	
.LABEL $label$16
	if ( ($10 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$2 = (int_64)0
	
.LOOP $label$23:
	$9 = *(($10 + [8191]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$24 }
	CALL eosio_assert([0], [8952])
	
.LABEL $label$24
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$23 }
	$12 = ((int_64)$2 << (int_64)8)
	goto $label$13 
	
.LABEL $label$14
	$12 = (int_64)0
	
.LABEL $label$13
	CALL eosio_assert([1], [9005])
	$2 = (uint_64)$12 >> (uint_64)(int_64)8)
	$16 = ((int_64)$12 | (int_64)4)
	$10 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$12 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$28 }
	$2 = $12
	$9 = [1]
	$8 = $10
	$10 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$28
	$2 = $12
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$26 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$9 = ((int_32)$10 < (int_32)[6])
	$8 = ($10 + [1])
	$10 = $8
	if ( $9 ){ goto $label$29 }
	$9 = [1]
	$10 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$9 = [0]
	
.LABEL $label$25
	CALL eosio_assert($9, [9054])
	CALL $21(($6 + [24]), $0, $1, $4)
	$2 = *(($11 + [88]))
	*(($6 + [120])) = $16
	$11 = ($6 + [32])
	*(($6 + [136])) = *($11)
	*($11) = [0]
	*($6 + [96]) = *($0)
	$12 = *($6 + [24])
	*($6 + [24]) = (int_64)0
	*($6 + [112]) = $15
	*($6 + [128]) = $12
	*($6 + [104]) = $2
	$11 = CALL $22(($6 + [56]), ($6 + [40]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($6 + [96]))
	CALL $23(($6 + [192]), $11)
	$10 = *($6 + [192])
	CALL send_inline($10, (*($6 + [196]) - $10))
	$10 = *($6 + [192])
	if ( ($10 == 0) ){ goto $label$30 }
	*($6 + [196]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$30
	$10 = *($11 + [28])
	if ( ($10 == 0) ){ goto $label$31 }
	*(($11 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$31
	$10 = *($11 + [16])
	if ( ($10 == 0) ){ goto $label$32 }
	*(($11 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$32
	if ( ((*(($6 + [128])) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*(($6 + [136])))
	
.LABEL $label$33
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($6 + [32])))
	
.LABEL $label$12
	if ( (int_64)($13 == 0) ){ goto $label$34 }
	*($6 + [48]) = (int_64)3617214756542218240
	*($6 + [40]) = *($0)
	*($6 + [8]) = [8672]
	*($6 + [12]) = CALL $55([8672])
	*($6) = *($6 + [8])
	$8 = CALL $3(($6 + [16]), $6)
	$11 = CALL $55([8192])
	if ( ($11 <= [8]) ){ goto $label$38 }
	CALL eosio_assert([0], [8907])
	goto $label$37 
	
.LABEL $label$38
	if ( ($11 == 0) ){ goto $label$36 }
	
.LABEL $label$37
	$2 = (int_64)0
	
.LOOP $label$39:
	$10 = *(($11 + [8191]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$40 }
	CALL eosio_assert([0], [8952])
	
.LABEL $label$40
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$39 }
	$12 = ((int_64)$2 << (int_64)8)
	goto $label$35 
	
.LABEL $label$36
	$12 = (int_64)0
	
.LABEL $label$35
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9005])
	$2 = (uint_64)$12 >> (uint_64)(int_64)8)
	$15 = ((int_64)$12 | (int_64)4)
	$11 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$12 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$44 }
	$2 = $12
	$10 = [1]
	$9 = $11
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$44
	$2 = $12
	
.LOOP $label$45:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$42 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$10 = ((int_32)$11 < (int_32)[6])
	$9 = ($11 + [1])
	$11 = $9
	if ( $10 ){ goto $label$45 }
	$10 = [1]
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$10 = [0]
	
.LABEL $label$41
	CALL eosio_assert($10, [9054])
	CALL $24(($6 + [24]), $0, $1, $4)
	*(($6 + [120])) = $15
	$11 = ($6 + [32])
	*(($6 + [136])) = *($11)
	*($11) = [0]
	*($6 + [112]) = $13
	*($6 + [96]) = *($0)
	*($6 + [104]) = *($8)
	*($6 + [128]) = *($6 + [24])
	*($6 + [24]) = (int_64)0
	$11 = CALL $22(($6 + [56]), ($6 + [40]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($6 + [96]))
	CALL $23(($6 + [192]), $11)
	$10 = *($6 + [192])
	CALL send_inline($10, (*($6 + [196]) - $10))
	$10 = *($6 + [192])
	if ( ($10 == 0) ){ goto $label$46 }
	*($6 + [196]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$46
	$10 = *($11 + [28])
	if ( ($10 == 0) ){ goto $label$47 }
	*(($11 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$47
	$10 = *($11 + [16])
	if ( ($10 == 0) ){ goto $label$48 }
	*(($11 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$48
	if ( ((*(($6 + [128])) & [1]) == 0) ){ goto $label$49 }
	CALL _ZdlPv(*(($6 + [136])))
	
.LABEL $label$49
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($6 + [32])))
	
.LABEL $label$34
	$12 = (int_64))($3 - $14)
	*($6 + [48]) = (int_64)3617214756542218240
	*($6 + [40]) = *($0)
	$11 = CALL $55([8192])
	if ( ($11 <= [8]) ){ goto $label$53 }
	CALL eosio_assert([0], [8907])
	goto $label$52 
	
.LABEL $label$53
	if ( ($11 == 0) ){ goto $label$51 }
	
.LABEL $label$52
	$2 = (int_64)0
	
.LOOP $label$54:
	$10 = *(($11 + [8191]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$55 }
	CALL eosio_assert([0], [8952])
	
.LABEL $label$55
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$54 }
	$13 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$50 
	
.LABEL $label$51
	$13 = (int_64)4
	
.LABEL $label$50
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9005])
	$2 = (uint_64)$13 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$58:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$57 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$59 }
	$2 = $3
	$10 = [1]
	$9 = $11
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$58 }
	goto $label$56 
	
.LABEL $label$59
	$2 = $3
	
.LOOP $label$60:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$57 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$10 = ((int_32)$11 < (int_32)[6])
	$9 = ($11 + [1])
	$11 = $9
	if ( $10 ){ goto $label$60 }
	$10 = [1]
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$58 }
	goto $label$56 
	
.LABEL $label$57
	$10 = [0]
	
.LABEL $label$56
	CALL eosio_assert($10, [9054])
	CALL $25(($6 + [24]), $0, $1, $4)
	*(($6 + [120])) = $13
	$11 = ($6 + [32])
	*(($6 + [136])) = *($11)
	*($11) = [0]
	*($6 + [104]) = $1
	*($6 + [112]) = $12
	*($6 + [96]) = *($0)
	*($6 + [128]) = *($6 + [24])
	*($6 + [24]) = (int_64)0
	$11 = CALL $22(($6 + [56]), ($6 + [40]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($6 + [96]))
	CALL $23(($6 + [192]), $11)
	$10 = *($6 + [192])
	CALL send_inline($10, (*($6 + [196]) - $10))
	$10 = *($6 + [192])
	if ( ($10 == 0) ){ goto $label$61 }
	*($6 + [196]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$61
	$10 = *($11 + [28])
	if ( ($10 == 0) ){ goto $label$62 }
	*(($11 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$62
	$10 = *($11 + [16])
	if ( ($10 == 0) ){ goto $label$63 }
	*(($11 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$63
	if ( ((*(($6 + [128])) & [1]) == 0) ){ goto $label$64 }
	CALL _ZdlPv(*(($6 + [136])))
	
.LABEL $label$64
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$65 }
	CALL _ZdlPv(*(($6 + [32])))
	
.LABEL $label$65
	$8 = [0]
	if ( (int_64)($5 == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$11
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9005])
	$2 = (uint_64)$13 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$68:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$67 }
	$12 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$69 }
	$2 = $12
	$10 = [1]
	$9 = $11
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$68 }
	goto $label$66 
	
.LABEL $label$69
	$2 = $12
	
.LOOP $label$70:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$67 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$10 = ((int_32)$11 < (int_32)[6])
	$9 = ($11 + [1])
	$11 = $9
	if ( $10 ){ goto $label$70 }
	$10 = [1]
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$68 }
	goto $label$66 
	
.LABEL $label$67
	$10 = [0]
	
.LABEL $label$66
	CALL eosio_assert($10, [9054])
	CALL $25(($6 + [24]), $0, $1, $4)
	*(($6 + [120])) = $13
	$11 = ($6 + [32])
	*(($6 + [136])) = *($11)
	*($11) = [0]
	*($6 + [104]) = $1
	*($6 + [112]) = $3
	*($6 + [96]) = *($0)
	*($6 + [128]) = *($6 + [24])
	*($6 + [24]) = (int_64)0
	$11 = CALL $22(($6 + [56]), ($6 + [40]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($6 + [96]))
	CALL $23(($6 + [192]), $11)
	$10 = *($6 + [192])
	CALL send_inline($10, (*($6 + [196]) - $10))
	$10 = *($6 + [192])
	if ( ($10 == 0) ){ goto $label$71 }
	*($6 + [196]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$71
	$10 = *($11 + [28])
	if ( ($10 == 0) ){ goto $label$72 }
	*(($11 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$72
	$10 = *($11 + [16])
	if ( ($10 == 0) ){ goto $label$73 }
	*(($11 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$73
	if ( ((*(($6 + [128])) & [1]) == 0) ){ goto $label$74 }
	CALL _ZdlPv(*(($6 + [136])))
	
.LABEL $label$74
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($6 + [32])))
	
.LABEL $label$10
	$8 = [1]
	if ( (int_64)($5 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$13 = *($0)
	$11 = CALL $55([8192])
	if ( ($11 <= [8]) ){ goto $label$78 }
	CALL eosio_assert([0], [8907])
	goto $label$77 
	
.LABEL $label$78
	if ( ($11 == 0) ){ goto $label$76 }
	
.LABEL $label$77
	$2 = (int_64)0
	
.LOOP $label$79:
	$10 = *(($11 + [8191]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$80 }
	CALL eosio_assert([0], [8952])
	
.LABEL $label$80
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$79 }
	$12 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$75 
	
.LABEL $label$76
	$12 = (int_64)4
	
.LABEL $label$75
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9005])
	$2 = (uint_64)$12 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$83:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$82 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$84 }
	$2 = $3
	$10 = [1]
	$9 = $11
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$83 }
	goto $label$81 
	
.LABEL $label$84
	$2 = $3
	
.LOOP $label$85:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$82 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$10 = ((int_32)$11 < (int_32)[6])
	$9 = ($11 + [1])
	$11 = $9
	if ( $10 ){ goto $label$85 }
	$10 = [1]
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$83 }
	goto $label$81 
	
.LABEL $label$82
	$10 = [0]
	
.LABEL $label$81
	CALL eosio_assert($10, [9054])
	*((($6 + [56]) + [16])) = $12
	*($6 + [64]) = $5
	*($6 + [56]) = $1
	*($6 + [80]) = $8
	*($6 + [88]) = $4
	*($6 + [96]) = (int_64)6820287565398121776
	*($6 + [104]) = (int_64)7864012039751467008
	*(($11 = CALL _Znwj([16]))) = $13
	*($11 + [8]) = (int_64)3617214756542218240
	*(($6 + [132])) = [0]
	$10 = ($11 + [16])
	*(($6 + [120])) = $10
	*(($6 + [116])) = $10
	*($6 + [112]) = $11
	*($6 + [124 align=4]) = (int_64)0
	CALL $26(($6 + [124]), [33])
	$11 = *(($6 + [128]))
	$10 = *($6 + [124])
	*($6 + [44]) = $10
	*($6 + [40]) = $10
	*($6 + [48]) = $11
	*($6 + [24]) = ($6 + [40])
	*($6 + [192]) = ($6 + [56])
	CALL $27(($6 + [192]), ($6 + [24]))
	CALL $23(($6 + [40]), ($6 + [96]))
	$11 = *($6 + [40])
	CALL send_inline($11, (*($6 + [44]) - $11))
	$11 = *($6 + [40])
	if ( ($11 == 0) ){ goto $label$86 }
	*($6 + [44]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$86
	$11 = *($6 + [124])
	if ( ($11 == 0) ){ goto $label$87 }
	*(($6 + [128])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$87
	$11 = *($6 + [112])
	if ( ($11 == 0) ){ goto $label$8 }
	*(($6 + [116])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$8
	$global$0 = ($6 + [208])
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $58($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [112]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [92]) = $2
	*($4 + [88]) = $2
	*($4 + [96]) = ($2 + $7)
	*($4 + [176]) = ($4 + [88])
	*($4 + [16]) = ($4 + [104])
	CALL $20(($4 + [16]), ($4 + [176]))
	*(($3 = ($4 + [8]))) = *($4 + [96])
	*($4) = *($4 + [88])
	$3 = *($3)
	*((($4 + [144]) + [8])) = $3
	*(($8 = (($4 + [160]) + [8]))) = $3
	$9 = *($4)
	*($4 + [160]) = $9
	*($4 + [144]) = $9
	$3 = *($8)
	*((($4 + [176]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [160])
	*($4 + [32]) = $1
	*($4 + [176]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*($4 + [48]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [136])
	$1 = *($4 + [128])
	$9 = *($4 + [120])
	$10 = *($4 + [112])
	$11 = *($4 + [104])
	if ( ($5 & [1]) ){ goto $label$8 }
	CALL void $3((int_32 $11), (int_64 $10), (int_64 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL void $3((int_32 $11), (int_64 $10), (int_64 $9), (int_64 $1), (int_64 $0), (int_64 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $61($2)
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$3 = ($4 + [76])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($4 + [72]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $5
	
.LABEL $label$9
	*($3) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($4 + [192])
	return [1]
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [160])
	$global$0 = $5
	CALL require_auth(*($0))
	$6 = ($0 + [32])
	$8 = *(($0 + [60]))
	$7 = *(($0 + [56]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$4:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$3 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($10 + [96]) == (int_32)$6), [9227])
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	$9 = CALL db_find_i64(*($6), *(($0 + [40])), (int_64)-4851762761677406208, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $18($6, $9)
	CALL eosio_assert(((int_32)*($10 + [96]) == (int_32)$6), [9227])
	
.LABEL $label$1
	$7 = [0]
	$11 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($11, [8276])
	CALL eosio_assert((int_64)(*($10 + [80]) == 0), [8294])
	CALL eosio_assert(((uint_64)*($10 + [72]) > (uint_64)(int_64)9999), [8316])
	CALL eosio_assert(((int_32)*($10 + [48]) == (int_32)[1]), [8342])
	$8 = *(($0 + [60]))
	$12 = *(($0 + [56]))
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$8:
	$9 = ($8 + [-24])
	$13 = *($9)
	if ( ((int_64)*($13) == (int_64)$2) ){ goto $label$7 }
	$8 = $9
	if ( ((int_32)$12 != (int_32)$9) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($13 + [96]) == (int_32)$6), [9227])
	$7 = $13
	goto $label$5 
	
.LABEL $label$6
	$9 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)-4851762761677406208, $2)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$5 }
	$7 = CALL $18($6, $9)
	CALL eosio_assert(((int_32)*($7 + [96]) == (int_32)$6), [9227])
	
.LABEL $label$5
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [8366])
	CALL eosio_assert((int_64)(*($7 + [80]) == 0), [8384])
	CALL eosio_assert(((uint_64)*($7 + [72]) > (uint_64)(int_64)9999), [8406])
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)[1]), [8432])
	$2 = *($0)
	CALL eosio_assert($11, [9301])
	CALL eosio_assert(((int_32)*($10 + [96]) == (int_32)$6), [9336])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL eosio_assert0()), [9382])
	*($10 + [80]) = $4
	$9 = ($10 + [56])
	*($5 + [112]) = *($9)
	$1 = *($10)
	CALL eosio_assert([1], [9433])
	$12 = ($5 + [81])
	*($5 + [104]) = $12
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	*($5 + [120]) = ($5 + [96])
	*($5 + [132]) = ($10 + [16])
	*($5 + [128]) = $10
	*($5 + [136]) = ($10 + [48])
	*($5 + [140]) = $9
	*($5 + [144]) = ($10 + [64])
	*($5 + [148]) = ($10 + [72])
	*($5 + [152]) = ($10 + [80])
	*($5 + [156]) = ($10 + [88])
	CALL $19(($5 + [128]), ($5 + [120]))
	CALL db_update_i64(*($10 + [100]), $2, $5, [81])
	$13 = ($0 + [48])
	if ( (uint_64)($1 <= *($13)) ){ goto $label$9 }
	*($13) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($5 + [128]) = *($9)
	if ( (CALL $54(($5 + [112]), ($5 + [128]), [8]) == 0) ){ goto $label$10 }
	$10 = ($10 + [104])
	$9 = *($10)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$11 }
	$9 = CALL db_idx64_find_primary(*(($0 + [32])), *(($0 + [40])), (int_64)-4851762761677406208, ($5 + [120]), $1)
	*($10) = $9
	
.LABEL $label$11
	CALL db_idx64_update($9, $2, ($5 + [128]))
	
.LABEL $label$10
	$2 = *($0)
	CALL eosio_assert($8, [9301])
	CALL eosio_assert(((int_32)*($7 + [96]) == (int_32)$6), [9336])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL eosio_assert0()), [9382])
	*($7 + [80]) = $4
	$9 = ($7 + [56])
	*($5 + [112]) = *($9)
	$1 = *($7)
	CALL eosio_assert([1], [9433])
	*($5 + [104]) = $12
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	*($5 + [120]) = ($5 + [96])
	*($5 + [132]) = ($7 + [16])
	*($5 + [128]) = $7
	*($5 + [136]) = ($7 + [48])
	*($5 + [140]) = $9
	*($5 + [144]) = ($7 + [64])
	*($5 + [148]) = ($7 + [72])
	*($5 + [152]) = ($7 + [80])
	*($5 + [156]) = ($7 + [88])
	CALL $19(($5 + [128]), ($5 + [120]))
	CALL db_update_i64(*($7 + [100]), $2, $5, [81])
	$10 = ($0 + [48])
	if ( (uint_64)($1 <= *($10)) ){ goto $label$12 }
	*($10) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*($5 + [128]) = *($9)
	if ( (CALL $54(($5 + [112]), ($5 + [128]), [8]) == 0) ){ goto $label$13 }
	$10 = ($7 + [104])
	$9 = *($10)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$14 }
	$9 = CALL db_idx64_find_primary(*(($0 + [32])), *(($0 + [40])), (int_64)-4851762761677406208, ($5 + [120]), $1)
	*($10) = $9
	
.LABEL $label$14
	CALL db_idx64_update($9, $2, ($5 + [128]))
	
.LABEL $label$13
	$global$0 = ($5 + [160])
}

int_32 .FUNC $7 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $58($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [100]) = $2
	*($4 + [96]) = $2
	*($4 + [104]) = ($2 + $7)
	*($4 + [176]) = ($4 + [96])
	*($4 + [24]) = ($4 + [112])
	CALL $17(($4 + [24]), ($4 + [176]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [104])
	*($4 + [8]) = *($4 + [96])
	$3 = *($3)
	*((($4 + [144]) + [8])) = $3
	*(($8 = (($4 + [160]) + [8]))) = $3
	$9 = *($4 + [8])
	*($4 + [160]) = $9
	*($4 + [144]) = $9
	$3 = *($8)
	*((($4 + [176]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [160])
	*($4 + [40]) = $1
	*($4 + [176]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*($4 + [56]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [136])
	$1 = *($4 + [128])
	$9 = *($4 + [120])
	$10 = *($4 + [112])
	if ( ($5 & [1]) ){ goto $label$8 }
	CALL void $3((int_32 $10), (int_64 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL void $3((int_32 $10), (int_64 $9), (int_64 $1), (int_64 $0), (int_64 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $61($2)
	$5 = *(($4 + [80]))
	if ( ($5 == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$5 = *(($4 + [80]))
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$3 = ($4 + [84])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($4 + [80]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $5
	
.LABEL $label$9
	*($3) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($4 + [192])
	return [1]
}

void .FUNC $4 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$5 = *($0)
	if ( ((int_64)$5 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$5 != (int_64)$2) ){ goto $label$1 }
	$0 = *($4)
	$6 = CALL $55([8264])
	if ( ((int_32)$6 != (int_32)( *($4 + [4]) ? uint_32($0 >> [1]) : ($0 & [1]) )) ){ goto $label$1 }
	CALL $50($4, [0], [-1], [8264], $6)
	
.LABEL $label$1
}

int_32 .FUNC $5 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [208])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $58($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [104]) + [24])) = (int_64)0
	*((($4 + [104]) + [40])) = [0]
	*($4 + [112]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [92]) = $2
	*($4 + [88]) = $2
	*($4 + [96]) = ($2 + $5)
	*($4 + [192]) = ($4 + [88])
	*($4 + [16]) = ($4 + [104])
	CALL $15(($4 + [16]), ($4 + [192]))
	*(($3 = ($4 + [8]))) = *($4 + [96])
	*($4) = *($4 + [88])
	$3 = *($3)
	*((($4 + [160]) + [8])) = $3
	*(($6 = (($4 + [176]) + [8]))) = $3
	$7 = *($4)
	*($4 + [176]) = $7
	*($4 + [160]) = $7
	$3 = *($6)
	*((($4 + [192]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [176])
	*($4 + [32]) = $1
	*($4 + [192]) = $1
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($3 = ($4 + [72]))) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*($4 + [48]) = $0
	*($4 + [196]) = ($4 + [152])
	*($4 + [192]) = ($4 + [16])
	CALL $16(($4 + [192]), ($4 + [104]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $61($2)
	
.LABEL $label$4
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [72]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [144])))
	
.LABEL $label$10
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 apply)
{
	int_32 $3
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL memory()
	*($3 + [208]) = [8196]
	*($3 + [212]) = CALL $55([8196])
	*($3 + [96]) = *($3 + [208])
	CALL $3(($3 + [216]), ($3 + [96]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$2 }
	*($3 + [192]) = [8208]
	*($3 + [196]) = CALL $55([8208])
	*($3 + [88]) = *($3 + [192])
	CALL $3(($3 + [200]), ($3 + [88]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [1]
	*($3) = *($3 + [184])
	CALL $5($0, (int_64)6138663591592764928, $3)
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	*($3 + [176]) = [8217]
	*($3 + [180]) = CALL $55([8217])
	*($3 + [80]) = *($3 + [176])
	CALL $3(($3 + [216]), ($3 + [80]))
	if ( ((int_64)$2 != (int_64)-7948142508041568256) ){ goto $label$3 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [2]
	*($3 + [8]) = *($3 + [168])
	CALL $7($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [160]) = [8223]
	*($3 + [164]) = CALL $55([8223])
	*($3 + [72]) = *($3 + [160])
	CALL $3(($3 + [216]), ($3 + [72]))
	if ( ((int_64)$2 != (int_64)6295359182828732416) ){ goto $label$4 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [3]
	*($3 + [16]) = *($3 + [152])
	CALL $9($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [144]) = [8232]
	*($3 + [148]) = CALL $55([8232])
	*($3 + [64]) = *($3 + [144])
	CALL $3(($3 + [216]), ($3 + [64]))
	if ( ((int_64)$2 != (int_64)-6030912139008720896) ){ goto $label$5 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [4]
	*($3 + [24]) = *($3 + [136])
	CALL $11($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [128]) = [8243]
	*($3 + [132]) = CALL $55([8243])
	*($3 + [56]) = *($3 + [128])
	CALL $3(($3 + [216]), ($3 + [56]))
	if ( ((int_64)$2 != (int_64)6295358024468250624) ){ goto $label$6 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [5]
	*($3 + [32]) = *($3 + [120])
	CALL $13($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [112]) = [8254]
	*($3 + [116]) = CALL $55([8254])
	*($3 + [48]) = *($3 + [112])
	CALL $3(($3 + [216]), ($3 + [48]))
	if ( ((int_64)$2 != (int_64)4730614989913587712) ){ goto $label$1 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [6]
	*($3 + [40]) = *($3 + [104])
	CALL $13($1, $1, ($3 + [40]))
	
.LABEL $label$1
	CALL $53([0])
	$global$0 = ($3 + [224])
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8750])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8855])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8788])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8855])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($3 + [15]) = $1
	$1 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($4 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = (($4 + [17]) & [-16])
	$1 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($3 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $49($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $44($0)
}

void .FUNC $14 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [192])
	$global$0 = $2
	CALL require_auth($1)
	$3 = ($0 + [32])
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [96]) == (int_32)$3), [9227])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)-4851762761677406208, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $18($3, $6)
	CALL eosio_assert(((int_32)*($7 + [96]) == (int_32)$3), [9227])
	
.LABEL $label$1
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [8518])
	CALL eosio_assert((int_64)(*($7 + [80]) == 0), [8685])
	CALL eosio_assert(((int_64)*($7 + [72]) != (int_64)0), [8721])
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)[1]), [8721])
	*($2 + [32]) = (int_64)3617214756542218240
	*($2 + [24]) = *($0)
	$9 = *($7 + [72])
	$6 = CALL $55([8192])
	if ( ($6 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [8907])
	goto $label$7 
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$10 = (int_64)0
	
.LOOP $label$9:
	$5 = *(($6 + [8191]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [8952])
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$9 }
	$11 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)4)
	goto $label$5 
	
.LABEL $label$6
	$11 = (int_64)4
	
.LABEL $label$5
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9005])
	$10 = (uint_64)$11 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$12 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$10 = $12
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$10 = $12
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$15 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [0]
	
.LABEL $label$11
	CALL eosio_assert($5, [9054])
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$6 = CALL $55([8736])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$19 }
	*($2 + [8]) = ($6 << [1])
	$5 = (($2 + [8]) | [1])
	if ( $6 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [8]) = ($4 | [1])
	*($2 + [16]) = $5
	*($2 + [12]) = $6
	
.LABEL $label$18
	CALL memcpy($5, [8736], $6)
	
.LABEL $label$17
	*(($5 + $6)) = [0]
	*(($2 + [104])) = $11
	$6 = ($2 + [16])
	*(($2 + [120])) = *($6)
	*($6) = [0]
	*($2 + [88]) = $1
	*($2 + [96]) = $9
	*($2 + [80]) = *($0)
	*($2 + [112]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$6 = CALL $22(($2 + [40]), ($2 + [24]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($2 + [80]))
	CALL $23(($2 + [176]), $6)
	$5 = *($2 + [176])
	CALL send_inline($5, (*($2 + [180]) - $5))
	$5 = *($2 + [176])
	if ( ($5 == 0) ){ goto $label$20 }
	*($2 + [180]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$20
	$5 = *($6 + [28])
	if ( ($5 == 0) ){ goto $label$21 }
	*(($6 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$21
	$5 = *($6 + [16])
	if ( ($5 == 0) ){ goto $label$22 }
	*(($6 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$22
	if ( ((*(($2 + [112])) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($2 + [120])))
	
.LABEL $label$23
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$24
	$1 = *($0)
	CALL eosio_assert($8, [9301])
	CALL eosio_assert(((int_32)*($7 + [96]) == (int_32)$3), [9336])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL eosio_assert0()), [9382])
	*($7 + [48]) = [0]
	$6 = ($7 + [56])
	*($2 + [8]) = *($6)
	$10 = *($7)
	$12 = CALL current_time()
	*($7 + [72]) = (int_64)0
	*($6) = ((int_64)((uint_64)$12 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$10 == (int_64)*($7)), [9433])
	*($2 + [32]) = (($2 + [80]) + [81])
	*($2 + [28]) = ($2 + [80])
	*($2 + [24]) = ($2 + [80])
	*($2 + [176]) = ($2 + [24])
	*($2 + [44]) = ($7 + [16])
	*($2 + [40]) = $7
	*($2 + [48]) = ($7 + [48])
	*($2 + [52]) = $6
	*($2 + [56]) = ($7 + [64])
	*($2 + [60]) = ($7 + [72])
	*($2 + [64]) = ($7 + [80])
	*($2 + [68]) = ($7 + [88])
	CALL $19(($2 + [40]), ($2 + [176]))
	CALL db_update_i64(*($7 + [100]), $1, ($2 + [80]), [81])
	$5 = ($0 + [48])
	if ( (uint_64)($10 <= *($5)) ){ goto $label$25 }
	*($5) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$25
	*($2 + [40]) = *($6)
	if ( (CALL $54(($2 + [8]), ($2 + [40]), [8]) == 0) ){ goto $label$26 }
	$5 = ($7 + [104])
	$6 = *($5)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$27 }
	$6 = CALL db_idx64_find_primary(*(($0 + [32])), *(($0 + [40])), (int_64)-4851762761677406208, ($2 + [176]), $10)
	*($5) = $6
	
.LABEL $label$27
	CALL db_idx64_update($6, $1, ($2 + [40]))
	
.LABEL $label$26
	$global$0 = ($2 + [192])
	return (unreachable)
	
.LABEL $label$16
	CALL $44(($2 + [8]))
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9218])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9218])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9218])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9218])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $31(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $45(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $45(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9218])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9218])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9218])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9218])
	CALL memcpy(($0 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $10 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL require_auth($1)
	$4 = ($0 + [32])
	$6 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)$4), [9227])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)-4851762761677406208, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $18($4, $7)
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)$4), [9227])
	
.LABEL $label$1
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [8518])
	$9 = *($0)
	CALL eosio_assert($7, [9301])
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)$4), [9336])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL eosio_assert0()), [9382])
	*($8 + [16]) = *($2)
	*(($8 + [24])) = *(($2 + [8]))
	*(($8 + [32])) = *(($2 + [16]))
	*(($8 + [40])) = *(($2 + [24]))
	$7 = ($8 + [56])
	*($3 + [112]) = *($7)
	$1 = *($8)
	*($7) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [9433])
	*($3 + [104]) = ($3 + [81])
	*($3 + [100]) = $3
	*($3 + [96]) = $3
	*($3 + [120]) = ($3 + [96])
	*($3 + [132]) = ($8 + [16])
	*($3 + [128]) = $8
	*($3 + [136]) = ($8 + [48])
	*($3 + [140]) = $7
	*($3 + [144]) = ($8 + [64])
	*($3 + [148]) = ($8 + [72])
	*($3 + [152]) = ($8 + [80])
	*($3 + [156]) = ($8 + [88])
	CALL $19(($3 + [128]), ($3 + [120]))
	CALL db_update_i64(*($8 + [100]), $9, $3, [81])
	$6 = ($0 + [48])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$5 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($3 + [128]) = *($7)
	if ( (CALL $54(($3 + [112]), ($3 + [128]), [8]) == 0) ){ goto $label$6 }
	$8 = ($8 + [104])
	$7 = *($8)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$7 }
	$7 = CALL db_idx64_find_primary(*(($0 + [32])), *(($0 + [40])), (int_64)-4851762761677406208, ($3 + [120]), $1)
	*($8) = $7
	
.LABEL $label$7
	CALL db_idx64_update($7, $9, ($3 + [128]))
	
.LABEL $label$6
	$global$0 = ($3 + [160])
}

int_32 .FUNC $11 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $58($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [112]) + [40]))) = (int_64)0
	*(($8 = (($4 + [112]) + [32]))) = (int_64)0
	*(($9 = (($4 + [112]) + [24]))) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [112]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9218])
	CALL memcpy(($4 + [112]), $2, [8])
	CALL eosio_assert(((uint_32)($7 + [-8]) > (uint_32)[31]), [9218])
	CALL memcpy((($4 + [112]) + [16]), ($2 + [8]), [32])
	*(($4 + [60])) = ($2 + [40])
	*((($4 + [40]) + [24])) = ($2 + $7)
	*((($4 + [40]) + [40])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [108])) = [0]
	*($4 + [48]) = $1
	*($4 + [40]) = $0
	*($4 + [56]) = $2
	*($4 + [72]) = $0
	*(($10 = (($4 + [160]) + [16]))) = *($8)
	*(($8 = (($4 + [160]) + [24]))) = *($3)
	*($4 + [160]) = *($4 + [128])
	*($4 + [168]) = *($9)
	$0 = *($4 + [112])
	*((($4 + [192]) + [24])) = *($8)
	*((($4 + [192]) + [16])) = *($10)
	*($4 + [200]) = *($4 + [168])
	*($4 + [192]) = *($4 + [160])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$1 = *((($4 + [192]) + [24]))
	*((($4 + [224]) + [24])) = $1
	$11 = *((($4 + [192]) + [16]))
	*((($4 + [224]) + [16])) = $11
	*(($4 + [16])) = $11
	*(($4 + [24])) = $1
	$1 = *($4 + [200])
	*($4 + [232]) = $1
	$11 = *($4 + [192])
	*($4) = $11
	*($4 + [224]) = $11
	*($4 + [8]) = $1
	CALL void $3((int_32 $0), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $61($2)
	
.LABEL $label$5
	$5 = *(($4 + [96]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($4 + [100])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($4 + [96]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [32])
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [96]) == (int_32)$3), [9227])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)-4851762761677406208, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $18($3, $6)
	CALL eosio_assert(((int_32)*($7 + [96]) == (int_32)$3), [9227])
	
.LABEL $label$1
	$8 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9301])
	CALL eosio_assert(((int_32)*($7 + [96]) == (int_32)$3), [9336])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL eosio_assert0()), [9382])
	*($7 + [48]) = [0]
	$6 = ($7 + [56])
	*($2 + [112]) = *($6)
	$1 = *($7)
	$9 = CALL current_time()
	*($7 + [72]) = (int_64)0
	*($7 + [80]) = (int_64)0
	*($6) = ((int_64)((uint_64)$9 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$1 == (int_64)*($7)), [9433])
	*($2 + [104]) = ($2 + [81])
	*($2 + [100]) = $2
	*($2 + [96]) = $2
	*($2 + [120]) = ($2 + [96])
	*($2 + [132]) = ($7 + [16])
	*($2 + [128]) = $7
	*($2 + [136]) = ($7 + [48])
	*($2 + [140]) = $6
	*($2 + [144]) = ($7 + [64])
	*($2 + [148]) = ($7 + [72])
	*($2 + [152]) = ($7 + [80])
	*($2 + [156]) = ($7 + [88])
	CALL $19(($2 + [128]), ($2 + [120]))
	CALL db_update_i64(*($7 + [100]), $8, $2, [81])
	$5 = ($0 + [48])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$5 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($2 + [128]) = *($6)
	if ( (CALL $54(($2 + [112]), ($2 + [128]), [8]) == 0) ){ goto $label$6 }
	$7 = ($7 + [104])
	$6 = *($7)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$7 }
	$6 = CALL db_idx64_find_primary(*(($0 + [32])), *(($0 + [40])), (int_64)-4851762761677406208, ($2 + [120]), $1)
	*($7) = $6
	
.LABEL $label$7
	CALL db_idx64_update($6, $8, ($2 + [128]))
	
.LABEL $label$6
	$global$0 = ($2 + [160])
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $58($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9218])
	CALL memcpy(($4 + [72]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [72])
	if ( ($5 & [1]) ){ goto $label$8 }
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL void $3((int_32 $0), (int_64 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $61($2)
	$5 = *(($4 + [56]))
	if ( ($5 == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$5 = *(($4 + [56]))
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$3 = ($4 + [60])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($4 + [56]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $5
	
.LABEL $label$9
	*($3) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
	return [1]
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $58($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9492])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $58($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $51($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9165])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9165])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9223])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $26($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9218])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9218])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [9218])
	CALL memcpy($2, *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9218])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9218])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9218])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9218])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9218])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9218])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9165])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9165])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $32($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $47($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $47($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $44($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $58 (int_32 $0)
{
	return CALL $59([9512], $0)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $60($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [17908])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17896])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17704]
	$3 = (((int_32)$1 * (int_32)[12]) + [17704])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $54(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $61($0)
	
.LABEL $label$1
}

int_32 .FUNC $52 ()
{
	return [9496]
}

void .FUNC $53 (int_32 $0)
{
}

int_32 .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $56 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $52())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $57($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $58($1)
	
.LABEL $label$2
	*(CALL $52()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $58(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $61($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}