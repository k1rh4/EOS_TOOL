(data (i32.const 4) " g\00\00")
(data (i32.const 32) ",\00")
(data (i32.const 48) " \00")
(data (i32.const 64) "unable to find key\00")
(data (i32.const 96) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 160) "error reading iterator\00")
(data (i32.const 192) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 256) "invalid symbol name\00")
(data (i32.const 288) "read\00")
(data (i32.const 304) "must have entry for token. (claim token first)\00")
(data (i32.const 352) "below min return\00")
(data (i32.const 448) "connector not found\00")
(data (i32.const 480) "invalid quantity\00")
(data (i32.const 512) "zero quantity is disallowed\00")
(data (i32.const 544) "invalid memo format\00")
(data (i32.const 576) "converter not created yet\00")
(data (i32.const 608) "converter is disabled\00")
(data (i32.const 640) "converter can only receive from network contract\00")
(data (i32.const 704) "wrong converter\00")
(data (i32.const 720) "cannot convert to self\00")
(data (i32.const 752) "must go through the relay token\00")
(data (i32.const 784) "\'to\' connector disabled\00")
(data (i32.const 816) "\'from\' connector disabled\00")
(data (i32.const 848) "unknown \'from\' contract\00")
(data (i32.const 880) "active\00")
(data (i32.const 896) "retire\00")
(data (i32.const 912) "destroy on conversion\00")
(data (i32.const 944) "issue\00")
(data (i32.const 960) "conversion fee\00")
(data (i32.const 976) "smarttoken must be final currency\00")
(data (i32.const 1024) "stats = \00")
(data (i32.const 1040) " \n\00")
(data (i32.const 1056) "convert\00")
(data (i32.const 1072) "transfer\00")
(data (i32.const 1088) "write\00")
(data (i32.const 1104) "initial\00")
(data (i32.const 1120) "cannot pass end iterator to modify\00")
(data (i32.const 1168) "object passed to modify is not in multi_index\00")
(data (i32.const 1216) "cannot modify objects in table of another contract\00")
(data (i32.const 1280) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1344) "cannot create objects in table of another contract\00")
(data (i32.const 1408) "must be under 1000\00")
(data (i32.const 1440) "create\00")
(data (i32.const 1456) "setconnector\00")
(data (i32.const 1472) "get\00")
(data (i32.const 9872) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 9968) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 9984) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 10000) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$6 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$7 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$8 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$9 (param i32)))
(import "env" "memcpy" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "printdf" (func $fimport$12 (param f64)))
(import "env" "printi" (func $fimport$13 (param i64)))
(import "env" "prints" (func $fimport$14 (param i32)))
(import "env" "printui" (func $fimport$15 (param i64)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$17 (param i64)))
(import "env" "require_auth2" (func $fimport$18 (param i64 i64)))
(import "env" "send_inline" (func $fimport$19 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_" (func $5))
(export "_Z9buildMemo20memoConvertStructure" (func $7))
(export "_Z9parseMemoNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $8))
(export "_Z7nextHop20memoConvertStructure" (func $10))
(export "_Z11get_balanceyyy" (func $11))
(export "_Z10get_supplyyy" (func $16))
(export "_Z19convert_to_exchangedddx" (func $22))
(export "_Z21convert_from_exchangedddx" (func $23))
(export "_Z13quick_convertddd" (func $24))
(export "_Z4stofPKc" (func $25))
(export "_Z11verifyEntryyyN5eosio5assetE" (func $26))
(export "_Z15verifyMinReturnN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE" (func $27))
(export "_ZN15BancorConverter15lookupConnectorEyNS_6cstateE" (func $28))
(export "_ZN15BancorConverter7convertEyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEy" (func $32))
(export "_ZN15BancorConverter2onERKN5eosio8currency8transferEy" (func $44))
(export "_ZN15BancorConverter8oncreateERKNS_6createEy" (func $45))
(export "_ZN15BancorConverter14onsetconnectorERKNS_12setconnectorEy" (func $47))
(export "_ZN15BancorConverter5applyEyy" (func $49))
(export "apply" (func $58))
(export "malloc" (func $59))
(export "free" (func $62))
(export "pow" (func $75))
(export "sqrt" (func $76))
(export "fabs" (func $77))
(export "scalbn" (func $78))
(export "memchr" (func $79))
(export "memcmp" (func $80))
(export "strlen" (func $81))
(table $0 0 anyfunc)




int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [160])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $63([56])
	CALL $19($6)
	*($6 + [44]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [16])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [32])
	*($8 + [44]) = ($6 + [40])
	CALL $20(($8 + [32]), ($8 + [24]))
	*($6 + [48]) = $1
	*($8 + [24]) = $6
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8
	*($8 + [32]) = $5)
	$7 = *($6 + [48])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $21(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $64($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9860])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9668]
	$1 = (((int_32)$2 * (int_32)[12]) + [9668])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $19 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [192])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [256])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [192])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [256])
	return $0
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $67($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $65 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1088])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1088])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $63($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $63($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $64($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [160])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $63([80])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [192])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [256])
	*($4 + [64]) = $0
	CALL $30(($8 + [32]), $4)
	*($4 + [68]) = $1
	*($8 + [24]) = $4
	$7 = (uint_64)*(($4 + [16])) >> (uint_64)(int_64)8
	*($8 + [16]) = $7)
	$6 = *($4 + [68])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $31($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $64($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC _ZN15BancorConverter15lookupConnectorEyNS_6cstateE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_64)(uint_64)*(($2 + [24])) >> (uint_64)(int_64)8) != (int_64)$1) ){ goto $label$6 }
	$6 = ($2 + [16])
	$5 = [0]
	if ( *([0] + [369]) ){ goto $label$3 }
	*([0] + [392]) = (int_64)1398362884
	*([0] + [384]) = (int_64)0
	CALL eosio_assert([1], [192])
	$1 = (uint_64)*([0] + [392]) >> (uint_64)(int_64)8)
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$4 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *(($0 + [80]))
	$6 = *(($0 + [84]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$10 }
	$5 = ($6 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$11:
	if ( ((int_64)(uint_64)*((*($5) + [16])) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$10 }
	$6 = $5
	$2 = ($5 + [-24])
	$5 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$2 = ($0 + [56])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$2 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$2), [96])
	goto $label$1 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [256])
	*([0] + [369]) = [1]
	
.LABEL $label$3
	*([0] + [416]) = (int_64)0
	*([0] + [400]) = (int_64)0
	*([0] + [376]) = *($2 + [8])
	*([0] + [384]) = *($6)
	*([0] + [396]) = *(($6 + [12]))
	*([0] + [392]) = *(($6 + [8]))
	*([0] + [388]) = *(($6 + [4]))
	*([0] + [408]) = *($2 + [32])
	return [376]
	
.LABEL $label$2
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4983009938033344512, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $29($2, $6)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$2), [96])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [448])
	return $5
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $63(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $72($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $64($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $64($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [288])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [288])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy(($5 + [15]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($0) = ((int_32)*($5 + [15]) != (int_32)[0])
	*([0] + [4]) = ($5 + [16])
}

int_64 .FUNC _Z21convert_from_exchangedddx (float_64 $0, float_64 $1, float_64 $2, int_64 $3)
{
	return ((float_64)((float_64)CALL pow(((float_64)((float_64)$1 / (float_64)(float_64))($2 - $1)) + (float_64)(float_64)1), ((float_64)(float_64)1e3 / (float_64)(CASTING float_64)(int_64 $3))) + (float_64)(float_64)-1) * (float_64)$0)
}

int_64 .FUNC _Z19convert_to_exchangedddx (float_64 $0, float_64 $1, float_64 $2, int_64 $3)
{
	return !(float_64)((float_64)(float_64))((float_64)1 - CALL pow(((float_64)((float_64)$1 / (float_64)((float_64)$0 + (float_64)$1)) + (float_64)(float_64)1), ((float_64)(CASTING float_64)(int_64 $3) / (float_64)(float_64)1e3))) * (float_64)$2)
}

int_32 .FUNC _Z4stofPKc (int_32 $0)
{
	float_32 $1
	float_32 $2
	int_32 $3
	int_32 $4
	$4 = ((int_32)*($0) == (int_32)[45])
	$0 = ( ($0 + [1]) ? $0 : $4 )
	$2 = ( (float_32)-1 ? (float_32)1 : $4 )
	$3 = [0]
	$1 = (float_32)0
	
.LOOP $label$2:
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)[46]) ){ goto $label$3 }
	if ( ($4 == 0) ){ goto $label$1 }
	$4 = (int_32(($4 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$4 }
	$2 = ( ((float_32)$2 / (float_32)(float_32)10) ? $2 : $3 )
	$1 = ((float_32)((float_32)$1 * (float_32)(float_32)10) + (float_32)(CASTING float_32)(int_32 $4))
	
.LABEL $label$4
	$0 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$3 = [1]
	$0 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$1
	return ((float_32)$1 * (float_32)$2)
}

int_64 .FUNC _Z13quick_convertddd (float_64 $0, float_64 $1, float_64 $2)
{
	return ((float_64)((float_64)$1 / (float_64)((float_64)$0 + (float_64)$1)) * (float_64)$2)
}

void .FUNC _Z15verifyMinReturnN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	float_32 $2
	float_32 $3
	int_32 $4
	int_32 $5
	float_64 $6
	if ( (*($1) & [1]) ){ goto $label$2 }
	$1 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($1 + [8])
	
.LABEL $label$1
	$5 = ((int_32)*($1) == (int_32)[45])
	$1 = ( ($1 + [1]) ? $1 : $5 )
	$3 = ( (float_32)-1 ? (float_32)1 : $5 )
	$4 = [0]
	$2 = (float_32)0
	
.LOOP $label$4:
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)[46]) ){ goto $label$5 }
	if ( ($5 == 0) ){ goto $label$3 }
	$5 = (int_32(($5 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$6 }
	$3 = ( ((float_32)$3 / (float_32)(float_32)10) ? $3 : $4 )
	$2 = ((float_32)((float_32)$2 * (float_32)(float_32)10) + (float_32)(CASTING float_32)(int_32 $5))
	
.LABEL $label$6
	$1 = ($1 + [1])
	goto $label$4 
	
.LABEL $label$5
	$4 = [1]
	$1 = ($1 + [1])
	goto $label$4 
	
.LABEL $label$3
	$6 = CALL pow((float_64)10, (CASTING float_64)(uint_64 *($0 + [8])))
	CALL eosio_assert(((int_64)*($0) >= (int_64)(Rounds 0)(((float_64)$6 * (float_64)(PROMOTE float_64)(float_32 ((float_32)$2 * (float_32)$3))))), [352])
}

void .FUNC _Z11verifyEntryyyN5eosio5assetE (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	$6 = [0]
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$4 = *($2 + [8])
	*($7 + [16]) = $0
	*($7 + [8]) = $1
	$2 = CALL db_find_i64($1, $0, (int_64)3607749779137757184, (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_32)$2) < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $13(($7 + [8]), $2) + [16]) == (int_32)($7 + [8])), [96])
	$6 = [1]
	
.LABEL $label$1
	CALL eosio_assert($6, [304])
	$3 = *($7 + [32])
	if ( ($3 == 0) ){ goto $label$2 }
	$5 = ($7 + [36])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL $64($2)
	
.LABEL $label$6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$5 }
	$6 = *(($7 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$6 = $3
	
.LABEL $label$3
	*($5) = $3
	CALL $64($6)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $63($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC _ZN15BancorConverter5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1072]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $50($9)
	CALL _ZN15BancorConverter2onERKN5eosio8currency8transferEy($0, $9, $1)
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $64(*(($9 + [40])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*($0 + [8]) != (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1440]
	$7 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$14 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$3 = ($3 + [165])
	goto $label$12 
	
.LABEL $label$14
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$10
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$9 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$15 }
	CALL $51($9)
	CALL _ZN15BancorConverter8oncreateERKNS_6createEy($0, $9, $6)
	goto $label$7 
	
.LABEL $label$15
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [1456]
	$7 = (int_64)0
	
.LOOP $label$16:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$17 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$3 = ($3 + [165])
	goto $label$18 
	
.LABEL $label$19
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	CALL $52($9)
	CALL _ZN15BancorConverter14onsetconnectorERKNS_12setconnectorEy($0, $9, $6)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [64])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	*($3 + [15]) = *($1 + [32])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1088])
	CALL memcpy(*($0 + [4]), ($3 + [15]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $67($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $63(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $64($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $63(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $72($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $64($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $64($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [288])
	CALL memcpy(($3 + [13]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [32]) = ((int_32)*($3 + [13]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [288])
	CALL memcpy(($3 + [14]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [33]) = ((int_32)*($3 + [14]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [288])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [48]) = ((int_32)*($3 + [15]) != (int_32)[0])
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1088])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1088])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1088])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1088])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1088])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC _ZN15BancorConverter14onsetconnectorERKNS_12setconnectorEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [96])
	*([0] + [4]) = $10
	CALL require_auth(*($0 + [8]))
	CALL eosio_assert((uint_64)(*($1 + [40]) <= (int_64)1000), [1408])
	$9 = (uint_64)*(($1 + [16])) >> (uint_64)(int_64)8)
	$3 = *(($0 + [80]))
	$7 = *(($0 + [84]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*((*($6) + [16])) >> (uint_64)(int_64)8) == (int_64)$9) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [56])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$7 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$4), [96])
	$8 = *(($0 + [8]))
	if ( $6 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4983009938033344512, $9)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL $29($4, $6)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$4), [96])
	$8 = *(($0 + [8]))
	
.LABEL $label$6
	CALL eosio_assert([1], [1120])
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$4), [1168])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$2()), [1216])
	*($6) = *($1)
	$5 = ($6 + [16])
	$9 = *($5)
	*(($6 + [20])) = *(($1 + [20]))
	*($5) = *(($1 + [16]))
	*(($6 + [12])) = *(($1 + [12]))
	*($6 + [8]) = *($1 + [8])
	*($6 + [24]) = *($1 + [24])
	*($6 + [32]) = *($1 + [32])
	*($6 + [40]) = *(($1 + [40]))
	*($6 + [48]) = *($1 + [48])
	*($6 + [56]) = *($1 + [56])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$9) == (int_64)(uint_64)*($5) >> (uint_64)(int_64)8)), [1280])
	*($10 + [88]) = (($10 + [16]) + [57])
	*($10 + [84]) = ($10 + [16])
	*($10 + [80]) = ($10 + [16])
	CALL $48(($10 + [80]), $6)
	CALL db_update_i64(*($6 + [68]), $8, ($10 + [16]), [57])
	$6 = ($0 + [72])
	if ( (uint_64)($9 <= *($6)) ){ goto $label$3 }
	*($6) = ((int_64)$9 + (int_64)1)
	goto $label$3 
	
.LABEL $label$5
	$8 = *(($0 + [8]))
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$2()), [1344])
	*(($5 = CALL $63([80])) + [16]) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [192])
	$3 = ($5 + [8])
	$9 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [256])
	*($5 + [64]) = $4
	*($5) = *($1)
	*(($3 + [12])) = *(($1 + [20]))
	*(($3 + [8])) = *(($1 + [16]))
	*(($3 + [4])) = *(($1 + [12]))
	*($3) = *($1 + [8])
	*($5 + [24]) = *($1 + [24])
	*($5 + [32]) = *($1 + [32])
	*($5 + [40]) = *(($1 + [40]))
	*($5 + [48]) = *($1 + [48])
	*($5 + [56]) = *($1 + [56])
	*($10 + [88]) = (($10 + [16]) + [57])
	*($10 + [84]) = ($10 + [16])
	*($10 + [80]) = ($10 + [16])
	CALL $48(($10 + [80]), $5)
	$6 = ($5 + [16])
	$9 = (uint_64)*($6) >> (uint_64)(int_64)8
	$7 = CALL db_store_i64(*(($0 + [64])), (int_64)4983009938033344512, $8, $9), ($10 + [16]), [57]
	*($5 + [68]) = $7)
	$1 = ($0 + [72])
	if ( (uint_64)($9 <= *($1)) ){ goto $label$13 }
	*($1) = ((int_64)$9 + (int_64)1)
	
.LABEL $label$13
	*($10 + [80]) = $5
	$9 = (uint_64)*($6) >> (uint_64)(int_64)8
	*($10 + [16]) = $9)
	*($10 + [12]) = $7
	$1 = ($0 + [84])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [88]))) ){ goto $label$15 }
	*($6 + [8]) = $9
	*($6 + [16]) = $7
	*($10 + [80]) = [0]
	*($6) = $5
	*($1) = ($6 + [24])
	goto $label$14 
	
.LABEL $label$15
	CALL $31(($0 + [80]), ($10 + [80]), ($10 + [16]), ($10 + [12]))
	
.LABEL $label$14
	$6 = *($10 + [80])
	*($10 + [80]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $64($6)
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [96])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	*($3 + [13]) = *($1 + [32])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1088])
	CALL memcpy(*($0 + [4]), ($3 + [13]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($3 + [14]) = *($1 + [33])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1088])
	CALL memcpy(*($0 + [4]), ($3 + [14]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	*($3 + [15]) = *($1 + [48])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1088])
	CALL memcpy(*($0 + [4]), ($3 + [15]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC _ZN15BancorConverter8oncreateERKNS_6createEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	CALL require_auth(*($0 + [8]))
	$10 = *($0 + [8])
	$3 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$10) ){ goto $label$1 }
	$8 = $7
	$5 = ($7 + [-24])
	$7 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$7 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*(($7 + [52])) == (int_32)$4), [96])
	$9 = *(($0 + [8]))
	if ( $7 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$7 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)5058224800300793856, $10)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$5 }
	$7 = CALL $33($4, $7)
	CALL eosio_assert(((int_32)*($7 + [52]) == (int_32)$4), [96])
	$9 = *(($0 + [8]))
	
.LABEL $label$6
	CALL eosio_assert([1], [1120])
	CALL eosio_assert(((int_32)*($7 + [52]) == (int_32)$4), [1168])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [1216])
	*($7 + [8]) = *($1)
	*(($7 + [28])) = *(($1 + [20]))
	*(($7 + [24])) = *(($1 + [16]))
	*(($7 + [20])) = *(($1 + [12]))
	*($7 + [16]) = *($1 + [8])
	$10 = *($7)
	*($7 + [32]) = *($1 + [24])
	*($7 + [33]) = *($1 + [25])
	*($7 + [40]) = *($1 + [32])
	*($7 + [48]) = *($1 + [40])
	$6 = *(($0 + [8]))
	*($7) = $6
	CALL eosio_assert(((int_64)$10 == (int_64)$6), [1280])
	*($11 + [56]) = ($11 + [43])
	*($11 + [52]) = $11
	*($11 + [48]) = $11
	CALL $46(($11 + [48]), $7)
	CALL db_update_i64(*($7 + [56]), $9, $11, [43])
	$7 = ($0 + [32])
	if ( (uint_64)($10 <= *($7)) ){ goto $label$3 }
	*($7) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	goto $label$3 
	
.LABEL $label$5
	$9 = *(($0 + [8]))
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$2()), [1344])
	*(($5 = CALL $63([64])) + [24]) = (int_64)1398362884
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [192])
	$3 = ($5 + [16])
	$10 = (int_64)5462355
	$7 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$8 = [0]
	
.LABEL $label$8
	CALL eosio_assert($8, [256])
	*($5 + [52]) = $4
	*($5 + [8]) = *($1)
	*(($3 + [12])) = *(($1 + [20]))
	*(($3 + [8])) = *(($1 + [16]))
	*(($3 + [4])) = *(($1 + [12]))
	*($3) = *($1 + [8])
	*($5 + [32]) = *($1 + [24])
	*($5 + [33]) = *($1 + [25])
	*($5 + [40]) = *($1 + [32])
	*($5 + [48]) = *($1 + [40])
	*($5) = *(($0 + [8]))
	*($11 + [56]) = ($11 + [43])
	*($11 + [52]) = $11
	*($11 + [48]) = $11
	CALL $46(($11 + [48]), $5)
	$10 = *($5)
	$8 = CALL db_store_i64(*(($0 + [24])), (int_64)5058224800300793856, $9, $10, $11, [43])
	*($5 + [56]) = $8
	$7 = ($0 + [32])
	if ( (uint_64)($10 <= *($7)) ){ goto $label$13 }
	*($7) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($11 + [48]) = $5
	$10 = *($5)
	*($11) = $10
	*($11 + [44]) = $8
	$4 = ($0 + [44])
	$7 = *($4)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [48]))) ){ goto $label$15 }
	*($7 + [8]) = $10
	*($7 + [16]) = $8
	*($11 + [48]) = [0]
	*($7) = $5
	*($4) = ($7 + [24])
	goto $label$14 
	
.LABEL $label$15
	CALL $43(($0 + [40]), ($11 + [48]), $11, ($11 + [44]))
	
.LABEL $label$14
	$7 = *($11 + [48])
	*($11 + [48]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $64($7)
	
.LABEL $label$3
	*([0] + [4]) = ($11 + [64])
}

void .FUNC _ZN15BancorConverter2onERKN5eosio8currency8transferEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$3 = *($0 + [8])
	if ( ((int_64)*($1) == (int_64)$3) ){ goto $label$1 }
	if ( ((int_64)*($1 + [8]) != (int_64)$3) ){ goto $label$1 }
	$4 = ($1 + [32])
	$6 = *($1 + [32])
	$7 = ($1 + [36])
	$5 = CALL strlen([1104])
	if ( ((int_32)$5 != (int_32)( *($7) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$2 }
	if ( (CALL $71($4, [0], [-1], [1104], $5) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = *($4)
	$5 = CALL strlen([960])
	if ( ((int_32)$5 != (int_32)( *($7) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$3 }
	if ( (CALL $71($4, [0], [-1], [960], $5) == 0) ){ goto $label$1 }
	
.LABEL $label$3
	*(($8 + [44])) = *(($1 + [28]))
	*(($6 = (($8 + [32]) + [8]))) = *(($1 + [24]))
	*($8 + [32]) = *($1 + [16])
	*($8 + [36]) = *(($1 + [20]))
	$3 = *($1)
	CALL $73(($8 + [16]), $4)
	*(($8 + [8])) = *($6)
	*($8) = *($8 + [32])
	CALL _ZN15BancorConverter7convertEyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEy($0, $3, $8, ($8 + [16]), $2)
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL $64(*($8 + [24]))
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $72 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $51 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [16])) = (int_64)1398362884
	*($0 + [8]) = (int_64)0
	CALL eosio_assert([1], [192])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [256])
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $54($6, $0)
	*([0] + [4]) = ($6 + [16])
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	return CALL $69($0, $1, CALL $81($1))
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [9984])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [9968]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [10000]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $61($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9872])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC _Z9parseMemoNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	*($0) = (int_64)0
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [24 align=4]) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = [0]
	*(($0 + [44])) = [0]
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	$4 = CALL strlen([32])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$7 }
	*($5 + [32]) = ($4 << [1])
	$2 = (($5 + [32]) | [1])
	if ( $4 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$3 = (($4 + [16]) & [-16])
	$2 = CALL $63($3)
	*($5 + [32]) = ($3 | [1])
	*($5 + [40]) = $2
	*($5 + [36]) = $4
	
.LABEL $label$6
	CALL memcpy($2, [32], $4)
	
.LABEL $label$5
	*(($2 + $4)) = [0]
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_(($5 + [48]), $1, ($5 + [32]))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL $64(*($5 + [40]))
	
.LABEL $label$8
	CALL $66(($0 + [12]), *($5 + [48]))
	$2 = *($5 + [48])
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	$4 = CALL strlen([48])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	$1 = ($2 + [12])
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$11 }
	*($5 + [16]) = ($4 << [1])
	$2 = (($5 + [16]) | [1])
	if ( $4 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$3 = (($4 + [16]) & [-16])
	$2 = CALL $63($3)
	*($5 + [16]) = ($3 | [1])
	*($5 + [24]) = $2
	*($5 + [20]) = $4
	
.LABEL $label$10
	CALL memcpy($2, [48], $4)
	
.LABEL $label$9
	*(($2 + $4)) = [0]
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_(($5 + [32]), $1, ($5 + [16]))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL $64(*($5 + [24]))
	
.LABEL $label$12
	$4 = *($5 + [32])
	if ( ((int_32)(*($5 + [36]) - $4) != (int_32)[12]) ){ goto $label$14 }
	$2 = *($4)
	$1 = CALL strlen([16])
	if ( ((int_32)$1 != (int_32)( *($4 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$14 }
	if ( (CALL $71($4, [0], [-1], [16], $1) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$2 = *($5 + [48])
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	$4 = CALL strlen([48])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	$1 = ($2 + [12])
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$17 }
	*($5) = ($4 << [1])
	$2 = ($5 | [1])
	if ( $4 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$3 = (($4 + [16]) & [-16])
	$2 = CALL $63($3)
	*($5) = ($3 | [1])
	*($5 + [8]) = $2
	*($5 + [4]) = $4
	
.LABEL $label$16
	CALL memcpy($2, [48], $4)
	
.LABEL $label$15
	*(($2 + $4)) = [0]
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_(($5 + [16]), $1, _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_)
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$18 }
	$3 = ($0 + [4])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$20 }
	$2 = ([0] - $1)
	$4 = ($4 + [-12])
	
.LOOP $label$21:
	if ( ((*($4) & [1]) == 0) ){ goto $label$22 }
	CALL $64(*(($4 + [8])))
	
.LABEL $label$22
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $2) != (int_32)[-12]) ){ goto $label$21 }
	$4 = *($0)
	goto $label$19 
	
.LABEL $label$20
	$4 = $1
	
.LABEL $label$19
	*($3) = $1
	CALL $64($4)
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$18
	*($0) = *($5 + [16])
	*(($0 + [8])) = *($5 + [24])
	*($5 + [20]) = [0]
	*($5 + [24]) = [0]
	*($5 + [16]) = [0]
	if ( ((*($5) & [1]) == 0) ){ goto $label$1 }
	CALL $64(*($5 + [8]))
	goto $label$1 
	
.LABEL $label$13
	CALL $9($0, [0], [0])
	goto $label$1 
	
.LABEL $label$4
	CALL $65(($5 + [32]))
	
.LABEL $label$3
	CALL $65(($5 + [16]))
	
.LABEL $label$2
	CALL $65($5)
	
.LABEL $label$1
	CALL $66(($0 + [36]), (*($5 + [48]) + [24]))
	CALL $66(($0 + [24]), (*($5 + [48]) + [36]))
	$2 = *($5 + [32])
	if ( ($2 == 0) ){ goto $label$23 }
	$4 = *($5 + [36])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$25 }
	$0 = ([0] - $2)
	$4 = ($4 + [-12])
	
.LOOP $label$26:
	if ( ((*($4) & [1]) == 0) ){ goto $label$27 }
	CALL $64(*(($4 + [8])))
	
.LABEL $label$27
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $0) != (int_32)[-12]) ){ goto $label$26 }
	$4 = *($5 + [32])
	goto $label$24 
	
.LABEL $label$25
	$4 = $2
	
.LABEL $label$24
	*($5 + [36]) = $2
	CALL $64($4)
	
.LABEL $label$23
	$2 = *($5 + [48])
	if ( ($2 == 0) ){ goto $label$28 }
	$4 = *($5 + [52])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$30 }
	$0 = ([0] - $2)
	$4 = ($4 + [-12])
	
.LOOP $label$31:
	if ( ((*($4) & [1]) == 0) ){ goto $label$32 }
	CALL $64(*(($4 + [8])))
	
.LABEL $label$32
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $0) != (int_32)[-12]) ){ goto $label$31 }
	$4 = *($5 + [48])
	goto $label$29 
	
.LABEL $label$30
	$4 = $2
	
.LABEL $label$29
	*($5 + [52]) = $2
	CALL $64($4)
	
.LABEL $label$28
	*([0] + [4]) = ($5 + [64])
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$7 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($7 - $6) / (int_32)[12])) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$5 = ([0] - $6)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $64(*(($7 + [8])))
	
.LABEL $label$8
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $5) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$7 = ($1 + ((int_32)$4 * (int_32)[12]))
	$5 = ( $7 ? $2 : ((uint_32)$3 > (uint_32)$4) )
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $66($6, $1)
	$6 = ($6 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	$1 = ($0 + [4])
	$6 = *($1)
	
.LOOP $label$12:
	CALL $73($6, $7)
	$6 = (*($1) + [12])
	*($1) = $6
	$7 = ($7 + [12])
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$13 }
	$7 = ([0] - $6)
	$1 = ($1 + [-12])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $64(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $7) != (int_32)[-12]) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $6
	return 
	
.LABEL $label$5
	$7 = $6
	
.LABEL $label$4
	*(($0 + [4])) = $6
	CALL $64($7)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$6 = [357913941]
	$7 = ((int_32)$7 / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$16 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	
.LABEL $label$16
	$7 = ((int_32)$6 * (int_32)[12])
	$6 = CALL $63($7)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $7)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$17:
	CALL $73($6, $1)
	$6 = (*($7) + [12])
	*($7) = $6
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $72($0)
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($6 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $63(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $72($0)
	
.LABEL $label$1
	$6 = ($4 + ((int_32)$2 * (int_32)[12]))
	CALL $73($6, $1)
	$2 = ($4 + ((int_32)$5 * (int_32)[12]))
	$3 = ($6 + [12])
	$5 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$5 = ($4 + [-12])
	
.LOOP $label$7:
	*(($6 + [-12])) = *($5)
	$4 = ($5 + [8])
	*(($6 + [-4])) = *($4)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	$6 = ($6 + [-12])
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	$6 = ([0] - $4)
	$5 = ($5 + [-12])
	
.LOOP $label$9:
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $64(*(($5 + [8])))
	
.LABEL $label$10
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $64($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _Z9buildMemo20memoConvertStructure (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = CALL strlen([16])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$5 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $63($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$4
	CALL memcpy($6, [16], $2)
	
.LABEL $label$3
	$5 = [0]
	*(($6 + $2)) = [0]
	$2 = *($1)
	if ( ((int_32)*($1 + [4]) == (int_32)$2) ){ goto $label$6 }
	$6 = [0]
	
.LOOP $label$7:
	if ( ($5 == 0) ){ goto $label$8 }
	CALL $70($7, [48])
	$2 = *($1)
	
.LABEL $label$8
	$3 = *($2)
	$4 = ($3 & [1])
	$2 = ($2 + $5)
	CALL $69($7, ( *(($2 + [8])) ? ($2 + [1]) : $4 ), ( *(($2 + [4])) ? uint_32($3 >> [1]) : $4 ))
	$5 = ($5 + [12])
	$2 = *($1)
	$6 = ($6 + [1])
	if ( ($6 <= ((int_32)(*(($1 + [4])) - $2) / (int_32)[12])) ){ goto $label$7 }
	
.LABEL $label$6
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL strlen([16])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$11 }
	*($0) = ($5 << [1])
	$2 = ($0 + [1])
	if ( $5 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$6 = (($5 + [16]) & [-16])
	$2 = CALL $63($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $5
	
.LABEL $label$10
	CALL memcpy($2, [16], $5)
	
.LABEL $label$9
	*(($2 + $5)) = [0]
	$5 = *($1 + [12])
	$2 = ($5 & [1])
	CALL $69($0, ( *(($1 + [20])) ? ($1 + [13]) : $2 ), ( *(($1 + [16])) ? uint_32($5 >> [1]) : $2 ))
	CALL $70($0, [32])
	$5 = *($7)
	$2 = ($5 & [1])
	CALL $69($0, ( *($7 + [8]) ? ($7 | [1]) : $2 ), ( *($7 + [4]) ? uint_32($5 >> [1]) : $2 ))
	CALL $70($0, [32])
	$5 = *($1 + [36])
	$2 = ($5 & [1])
	CALL $69($0, ( *(($1 + [44])) ? ($1 + [37]) : $2 ), ( *(($1 + [40])) ? uint_32($5 >> [1]) : $2 ))
	CALL $70($0, [32])
	$5 = *($1 + [24])
	$2 = ($5 & [1])
	CALL $69($0, ( *(($1 + [32])) ? ($1 + [25]) : $2 ), ( *(($1 + [28])) ? uint_32($5 >> [1]) : $2 ))
	if ( ((*($7) & [1]) == 0) ){ goto $label$12 }
	CALL $64(*(($7 + [8])))
	
.LABEL $label$12
	*([0] + [4]) = ($7 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $65($7)
	
.LABEL $label$1
	CALL $65($0)
	(unreachable)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [16])
	*([0] + [4]) = $14
	$11 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($2 + [1])
	$3 = ($1 + [1])
	$12 = *($1 + [4])
	$7 = *($1)
	$8 = ($2 + [4])
	
.LOOP $label$1:
	$9 = ($7 & [1])
	$12 = ( $12 ? uint_32(($7 & [254]) >> [1]) : $9 )
	if ( ($12 <= $11) ){ goto $label$3 }
	$13 = $11
	$10 = ($7 & [1])
	$7 = *($2)
	$7 = ( *($8) ? uint_32($7 >> [1]) : $10 )
	if ( ($7 == 0) ){ goto $label$2 }
	$12 = ($5 + $11)
	$5 = ( *(($1 + [8])) ? $3 : $9 )
	$9 = ($5 + $12)
	$13 = ($9 - $12)
	if ( ((int_32)$13 < (int_32)$7) ){ goto $label$3 }
	$6 = ( *(($2 + [8])) ? $4 : $10 )
	$10 = *($6)
	
.LOOP $label$4:
	$13 = (($13 - $7) + [1])
	if ( ($13 == 0) ){ goto $label$3 }
	$13 = CALL memchr($12, $10, $13)
	if ( ($13 == 0) ){ goto $label$3 }
	if ( (CALL memcmp($13, $6, $7) == 0) ){ goto $label$5 }
	$12 = ($13 + [1])
	$13 = ($9 - $12)
	if ( ((int_32)$13 >= (int_32)$7) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$13 == (int_32)$9) ){ goto $label$3 }
	$13 = ($13 - $5)
	if ( ((int_32)$13 != (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = *($1)
	if ( ($7 & [1]) ){ goto $label$6 }
	$13 = uint_32($7 >> [1])
	goto $label$2 
	
.LABEL $label$6
	$13 = *(($1 + [4]))
	
.LABEL $label$2
	CALL $74($14, $1, $11, ($13 - $11), $1)
	$11 = ($0 + [4])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)*(($0 + [8]))) ){ goto $label$8 }
	CALL $73($7, $14)
	*($11) = (*($11) + [12])
	goto $label$7 
	
.LABEL $label$8
	CALL $6($0, $14)
	
.LABEL $label$7
	$11 = *($2)
	$9 = *($8)
	if ( ((*($14) & [1]) == 0) ){ goto $label$9 }
	CALL $64(*(($14 + [8])))
	
.LABEL $label$9
	$7 = *($1)
	$12 = *(($1 + [4]))
	$10 = ( $12 ? uint_32($7 >> [1]) : ($7 & [1]) )
	if ( ((uint_32)$13 >= (uint_32)$10) ){ goto $label$10 }
	$11 = (( $9 ? uint_32($11 >> [1]) : ($11 & [1]) ) + $13)
	if ( ($11 <= $10) ){ goto $label$1 }
	
.LABEL $label$10
	*([0] + [4]) = ($14 + [16])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [192])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [256])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [288])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $63(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $72($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $64($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $64($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _Z10get_supplyyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*(($6 + [40])) = [0]
	*($6 + [8]) = $1
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	*($6 + [16]) = $2
	$4 = CALL $17(($6 + [8]), $2, [64])
	*($0) = *($4)
	*(($0 + [8])) = *(($4 + [8]))
	$3 = *($6 + [32])
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($6 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL $64($4)
	
.LABEL $label$5
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($6 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $3
	
.LABEL $label$2
	*($5) = $3
	CALL $64($0)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $17 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*(($6 + [44])) == (int_32)$0), [96])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $18($0, $5)
	CALL eosio_assert(((int_32)*($6 + [44]) == (int_32)$0), [96])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC _Z7nextHop20memoConvertStructure (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($0) = (int_64)0
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [24 align=4]) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	$6 = [0]
	*(($0 + [40])) = [0]
	*(($0 + [44])) = [0]
	*($10 + [8]) = [0]
	*($10) = (int_64)0
	$3 = (*($1 + [4]) - *($1))
	$9 = ((int_32)$3 / (int_32)[12])
	$7 = [0]
	$8 = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((uint_32)$9 >= (uint_32)[357913942]) ){ goto $label$1 }
	$8 = CALL $63($3)
	$6 = ($8 + ((int_32)$9 * (int_32)[12]))
	*(($10 + [8])) = $6
	*($10) = $8
	*($10 + [4]) = $8
	$9 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$5 }
	$7 = $8
	
.LOOP $label$6:
	CALL $73($7, $3)
	$7 = ($7 + [12])
	$3 = ($3 + [12])
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$6 }
	*($10 + [4]) = $7
	$2 = *($0)
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$7 = $8
	
.LABEL $label$4
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$8 }
	$9 = ([0] - $2)
	$3 = ($3 + [-12])
	
.LOOP $label$9:
	if ( ((*($3) & [1]) == 0) ){ goto $label$10 }
	CALL $64(*(($3 + [8])))
	
.LABEL $label$10
	$3 = ($3 + [-12])
	if ( ((int_32)($3 + $9) != (int_32)[-12]) ){ goto $label$9 }
	$3 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$3 = $2
	
.LABEL $label$7
	*($4) = $2
	CALL $64($3)
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$2
	*($0) = $8
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	$9 = ($8 + [36])
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$12 }
	$9 = ($7 + [-36])
	
.LOOP $label$13:
	if ( (*($8) & [1]) ){ goto $label$15 }
	*($8) = [0]
	goto $label$14 
	
.LABEL $label$15
	*(*(($8 + [8]))) = [0]
	*(($8 + [4])) = [0]
	
.LABEL $label$14
	CALL $68($8, [0])
	$3 = ($8 + [36])
	$5 = *($3)
	*(($8 + [40])) = [0]
	*($3) = [0]
	$3 = ($8 + [44])
	*(($8 + [8])) = *($3)
	*($8) = $5
	*($3) = [0]
	$8 = ($8 + [12])
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$13 }
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$11 }
	
.LABEL $label$12
	
.LOOP $label$16:
	$3 = ($9 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$17 }
	CALL $64(*(($9 + [-4])))
	
.LABEL $label$17
	$9 = $3
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$16 }
	
.LABEL $label$11
	*(($0 + [4])) = $8
	CALL $66(($0 + [12]), ($1 + [12]))
	CALL $66(($0 + [36]), ($1 + [36]))
	CALL $66(($0 + [24]), ($1 + [24]))
	*([0] + [4]) = ($10 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $72($10)
}

void .FUNC _Z11get_balanceyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*(($7 + [40])) = [0]
	*($7 + [16]) = $2
	*($7 + [8]) = $1
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$5 = CALL $12(($7 + [8]), $3, [64])
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$4 = *($7 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$6 = ($7 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $64($5)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($7 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $4
	
.LABEL $label$2
	*($6) = $4
	CALL $64($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $12 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [96])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $13($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [96])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [160])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $63([32])
	$6 = CALL $14($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $15(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $64($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $63([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [24])
	$2 = (CASTING uint_64)(uint_32 $1)
	$5 = ($4 + [24])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $37($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = $1
	CALL eosio_assert(((int_32)($1 - $8) > (int_32)[7]), [1088])
	CALL memcpy($8, $4, [8])
	$6 = ($8 + [8])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [1088])
	CALL memcpy($6, ($4 + [8]), [8])
	$6 = ($8 + [16])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [1088])
	CALL memcpy($6, ($4 + [16]), [8])
	*($9 + [4]) = ($8 + [24])
	CALL $39($9, $5)
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $63($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $72($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $64($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $63([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [16])
	$1 = ( *(($4 + [20])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [16])
	$2 = (CASTING uint_64)(uint_32 $1)
	$5 = ($4 + [16])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $37($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = $1
	CALL eosio_assert(((int_32)($1 - $8) > (int_32)[7]), [1088])
	CALL memcpy($8, $4, [8])
	$6 = ($8 + [8])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [1088])
	CALL memcpy($6, ($4 + [8]), [8])
	*($9 + [4]) = ($8 + [16])
	CALL $39($9, $5)
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $37($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [1088])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [1088])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $41(CALL $40($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC _ZN15BancorConverter7convertEyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEy (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	float_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	float_64 $19
	float_64 $20
	float_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	float_64 $25
	int_64 $26
	float_32 $27
	float_32 $28
	int_32 $29
	float_64 $30
	float_64 $31
	int_32 $32
	int_32 $33
	int_64 $34
	int_64 $35
	float_64 $36
	int_64 $37
	int_32 $38
	$38 = (*([0] + [4]) - [624])
	*([0] + [4]) = $38
	$14 = *($2 + [8])
	$32 = [0]
	$22 = *($2)
	if ( ((uint_64)((int_64)$22 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$34 = (uint_64)$14 >> (uint_64)(int_64)8)
	$33 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $34) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$34 = (uint_64)$34 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$34) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$34 = (uint_64)$34 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$34) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$33 = ($33 + [1])
	if ( ((int_32)$33 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$32 = [1]
	$33 = ($33 + [1])
	if ( ((int_32)$33 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$32 = [0]
	
.LABEL $label$1
	CALL eosio_assert($32, [480])
	CALL eosio_assert(((int_64)$22 != (int_64)0), [512])
	$36 = CALL pow((float_64)10, (CASTING float_64)(uint_64 ((int_64)$14 & (int_64)255)))
	CALL $73(($38 + [536]), $3)
	CALL _Z9parseMemoNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(($38 + [552]), ($38 + [536]))
	if ( ((*($38 + [536]) & [1]) == 0) ){ goto $label$6 }
	CALL $64(*($38 + [544]))
	
.LABEL $label$6
	CALL eosio_assert(((uint_32)((int_32)(*($38 + [556]) - *($38 + [552])) / (int_32)[12]) > (uint_32)[2]), [544])
	$34 = *($0 + [8])
	$6 = *(($0 + [40]))
	$3 = *(($0 + [44]))
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$33 = ($3 + [-24])
	$8 = ([0] - $6)
	
.LOOP $label$8:
	if ( ((int_64)*(*($33)) == (int_64)$34) ){ goto $label$7 }
	$3 = $33
	$32 = ($33 + [-24])
	$33 = $32
	if ( ((int_32)($32 + $8) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$33 = ($0 + [16])
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$10 }
	$6 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*(($6 + [52])) == (int_32)$33), [96])
	goto $label$9 
	
.LABEL $label$10
	$6 = [0]
	$32 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)5058224800300793856, $34)
	if ( ((int_32)$32 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $33($33, $32)
	CALL eosio_assert(((int_32)*($6 + [52]) == (int_32)$33), [96])
	
.LABEL $label$9
	$25 = (CASTING float_64)(int_64 $22)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [576])
	CALL eosio_assert(*($6 + [33]), [608])
	CALL eosio_assert(((int_64)*($6 + [40]) == (int_64)$1), [640])
	$33 = *($38 + [552])
	if ( (*($33) & [1]) ){ goto $label$12 }
	$33 = ($33 + [1])
	goto $label$11 
	
.LABEL $label$12
	$33 = *($33 + [8])
	
.LABEL $label$11
	$5 = ((float_64)$25 / (float_64)$36)
	$32 = [-1]
	
.LOOP $label$13:
	$3 = ($33 + $32)
	$8 = ($32 + [1])
	$32 = $8
	if ( *(($3 + [1])) ){ goto $label$13 }
	$37 = (CASTING uint_64)(uint_32 $8)
	$34 = (int_64)0
	$1 = (int_64)59
	$23 = (int_64)0
	
.LOOP $label$14:
	$35 = (int_64)0
	if ( ((uint_64)$34 >= (uint_64)$37) ){ goto $label$15 }
	$32 = *($33)
	if ( ((uint_32)(($32 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$32 = ($32 + [165])
	goto $label$16 
	
.LABEL $label$17
	$32 = ( ($32 + [208]) ? [0] : ((($32 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$35 = (int_64)((int_64)(CASTING uint_64)(uint_32 $32) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	if ( ((uint_64)$34 > (uint_64)(int_64)11) ){ goto $label$19 }
	$35 = ((int_64)((int_64)$35 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	goto $label$18 
	
.LABEL $label$19
	$35 = ((int_64)$35 & (int_64)15)
	
.LABEL $label$18
	$33 = ($33 + [1])
	$34 = ((int_64)$34 + (int_64)1)
	$23 = ((int_64)$35 | (int_64)$23)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$14 }
	CALL eosio_assert(((int_64)$23 == (int_64)*(($0 + [8]))), [704])
	$7 = *($38 + [552])
	if ( (*($7 + [12]) & [1]) ){ goto $label$21 }
	$32 = (($7 + [12]) + [1])
	goto $label$20 
	
.LABEL $label$21
	$32 = *(($7 + [20]))
	
.LABEL $label$20
	$23 = (uint_64)$14 >> (uint_64)(int_64)8)
	$33 = [-1]
	
.LOOP $label$22:
	$3 = ($32 + $33)
	$8 = ($33 + [1])
	$33 = $8
	if ( *(($3 + [1])) ){ goto $label$22 }
	if ( ($8 == 0) ){ goto $label$24 }
	$1 = (CASTING uint_64)(uint_32 $8)
	$34 = (int_64)8
	$35 = (int_64)0
	
.LOOP $label$25:
	$33 = *($32)
	if ( ((uint_32)(($33 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$35 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $33) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$34 & (int_64)4294967288)) | (int_64)$35)
	
.LABEL $label$26
	$32 = ($32 + [1])
	$34 = ((int_64)$34 + (int_64)8)
	$1 = ((int_64)$1 + (int_64)-1)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$35 = (int_64)0
	
.LABEL $label$23
	if ( (*($7 + [24]) & [1]) ){ goto $label$28 }
	$32 = (($7 + [24]) + [1])
	goto $label$27 
	
.LABEL $label$28
	$32 = *(($7 + [32]))
	
.LABEL $label$27
	$37 = (uint_64)$35 >> (uint_64)(int_64)8)
	$33 = [-1]
	
.LOOP $label$29:
	$3 = ($32 + $33)
	$8 = ($33 + [1])
	$33 = $8
	if ( *(($3 + [1])) ){ goto $label$29 }
	$35 = (int_64)0
	if ( ($8 == 0) ){ goto $label$30 }
	$1 = (CASTING uint_64)(uint_32 $8)
	$34 = (int_64)8
	$35 = (int_64)0
	
.LOOP $label$31:
	$33 = *($32)
	if ( ((uint_32)(($33 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$35 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $33) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$34 & (int_64)4294967288)) | (int_64)$35)
	
.LABEL $label$32
	$32 = ($32 + [1])
	$34 = ((int_64)$34 + (int_64)8)
	$1 = ((int_64)$1 + (int_64)-1)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$31 }
	
.LABEL $label$30
	$35 = (uint_64)$35 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$23 != (int_64)$35)), [720])
	$26 = (uint_64)*(($6 + [24])) >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$37 == (int_64)$26)), [752])
	CALL memcpy(($38 + [480]), $6, [56])
	CALL memcpy(($38 + [72]), ($38 + [480]), [56])
	$33 = CALL _ZN15BancorConverter15lookupConnectorEyNS_6cstateE($0, $23, ($38 + [72]))
	$12 = *($33 + [56])
	$11 = *($33 + [48])
	$10 = *($33 + [40])
	$9 = *($33 + [24])
	$23 = *($33 + [8])
	$34 = *(($33 + [16]))
	$1 = *($33)
	$32 = *($33 + [32])
	CALL memcpy(($38 + [424]), $6, [56])
	CALL memcpy(($38 + [16]), ($38 + [424]), [56])
	$33 = CALL _ZN15BancorConverter15lookupConnectorEyNS_6cstateE($0, $35, ($38 + [16]))
	$18 = *($33 + [56])
	$17 = *($33 + [48])
	$16 = *($33 + [40])
	$15 = *($33 + [24])
	$35 = *($33 + [8])
	$13 = *($33)
	$14 = *(($33 + [16]))
	CALL eosio_assert(*($33 + [32]), [784])
	CALL eosio_assert($32, [816])
	CALL eosio_assert(((int_64)$1 == (int_64)$4), [848])
	$8 = ($0 + [8])
	$37 = *($8)
	*(($7 = ($38 + [408]))) = [0]
	*($38 + [384]) = $37
	*($38 + [376]) = $1
	*($38 + [392]) = (int_64)-1
	*($38 + [400]) = (int_64)0
	$37 = (uint_64)$14 >> (uint_64)(int_64)8)
	$4 = (uint_64)$34 >> (uint_64)(int_64)8
	$1 = *(CALL $12(($38 + [376]), $4), [64]))
	$3 = *($38 + [400])
	if ( ($3 == 0) ){ goto $label$33 }
	$29 = ($38 + [404])
	$33 = *($29)
	if ( ((int_32)$33 == (int_32)$3) ){ goto $label$35 }
	
.LOOP $label$36:
	$33 = ($33 + [-24])
	$32 = *($33)
	*($33) = [0]
	if ( ($32 == 0) ){ goto $label$37 }
	CALL $64($32)
	
.LABEL $label$37
	if ( ((int_32)$3 != (int_32)$33) ){ goto $label$36 }
	$33 = *(($38 + [400]))
	goto $label$34 
	
.LABEL $label$35
	$33 = $3
	
.LABEL $label$34
	*($29) = $3
	CALL $64($33)
	
.LABEL $label$33
	$36 = CALL pow((float_64)10, (CASTING float_64)(uint_64 ((int_64)$34 & (int_64)255)))
	$34 = *($8)
	*($7) = [0]
	*($38 + [384]) = $34
	*($38 + [376]) = $13
	*($38 + [392]) = (int_64)-1
	*($38 + [400]) = (int_64)0
	$34 = (int_64))(((int_64)$1 + (int_64)$23) - $22)
	$1 = *(CALL $12(($38 + [376]), $37, [64]))
	$3 = *($38 + [400])
	if ( ($3 == 0) ){ goto $label$38 }
	$8 = ($38 + [404])
	$33 = *($8)
	if ( ((int_32)$33 == (int_32)$3) ){ goto $label$40 }
	
.LOOP $label$41:
	$33 = ($33 + [-24])
	$32 = *($33)
	*($33) = [0]
	if ( ($32 == 0) ){ goto $label$42 }
	CALL $64($32)
	
.LABEL $label$42
	if ( ((int_32)$3 != (int_32)$33) ){ goto $label$41 }
	$33 = *(($38 + [400]))
	goto $label$39 
	
.LABEL $label$40
	$33 = $3
	
.LABEL $label$39
	*($8) = $3
	CALL $64($33)
	
.LABEL $label$38
	$25 = (CASTING float_64)(int_64 $34)
	$20 = (CASTING float_64)(uint_64 ((int_64)$14 & (int_64)255))
	$21 = CALL pow((float_64)10, $20)
	$8 = ($6 + [24])
	$34 = *($8)
	$23 = *($6 + [8])
	*((($38 + [376]) + [32])) = [0]
	*($38 + [376]) = $23
	*($38 + [392]) = (int_64)-1
	*($38 + [400]) = (int_64)0
	$30 = (CASTING float_64)(int_64 ((int_64)$1 + (int_64)$35))
	$34 = (uint_64)$34 >> (uint_64)(int_64)8
	*($38 + [384]) = $34)
	$34 = *(CALL $17(($38 + [376]), $34, [64]))
	$3 = *($38 + [400])
	if ( ($3 == 0) ){ goto $label$43 }
	$7 = ($38 + [404])
	$33 = *($7)
	if ( ((int_32)$33 == (int_32)$3) ){ goto $label$45 }
	
.LOOP $label$46:
	$33 = ($33 + [-24])
	$32 = *($33)
	*($33) = [0]
	if ( ($32 == 0) ){ goto $label$47 }
	CALL $64($32)
	
.LABEL $label$47
	if ( ((int_32)$3 != (int_32)$33) ){ goto $label$46 }
	$33 = *(($38 + [400]))
	goto $label$44 
	
.LABEL $label$45
	$33 = $3
	
.LABEL $label$44
	*($7) = $3
	CALL $64($33)
	
.LABEL $label$43
	$19 = ((float_64)$25 / (float_64)$36)
	$21 = ((float_64)$30 / (float_64)$21)
	$1 = *($6 + [16])
	$36 = CALL pow((float_64)10, (CASTING float_64)(uint_64 *($8)))
	$33 = ( *((($38 + [552]) + [32])) ? ($38 + [577]) : (*($38 + [576]) & [1]) )
	$34 = ((int_64)$1 + (int_64)$34)
	$7 = (($38 + [552]) + [24])
	$32 = [-1]
	
.LOOP $label$48:
	$3 = ($33 + $32)
	$8 = ($32 + [1])
	$32 = $8
	if ( *(($3 + [1])) ){ goto $label$48 }
	$36 = ((float_64)(CASTING float_64)(int_64 $34) / (float_64)$36)
	$22 = (CASTING uint_64)(uint_32 $8)
	$34 = (int_64)0
	$1 = (int_64)59
	$23 = (int_64)0
	
.LOOP $label$49:
	$35 = (int_64)0
	if ( ((uint_64)$34 >= (uint_64)$22) ){ goto $label$50 }
	$32 = *($33)
	if ( ((uint_32)(($32 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$32 = ($32 + [165])
	goto $label$51 
	
.LABEL $label$52
	$32 = ( ($32 + [208]) ? [0] : ((($32 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$35 = (int_64)((int_64)(CASTING uint_64)(uint_32 $32) << (int_64)56) >> (int_64)56)
	
.LABEL $label$50
	if ( ((uint_64)$34 > (uint_64)(int_64)11) ){ goto $label$54 }
	$35 = ((int_64)((int_64)$35 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	goto $label$53 
	
.LABEL $label$54
	$35 = ((int_64)$35 & (int_64)15)
	
.LABEL $label$53
	$33 = ($33 + [1])
	$34 = ((int_64)$34 + (int_64)1)
	$23 = ((int_64)$35 | (int_64)$23)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$49 }
	if ( ((int_64)$4 != (int_64)$26) ){ goto $label$67 }
	$4 = *(($0 + [8]))
	$34 = (int_64)0
	$35 = (int_64)59
	$33 = [880]
	$22 = (int_64)0
	
.LOOP $label$68:
	if ( ((uint_64)$34 > (uint_64)(int_64)5) ){ goto $label$73 }
	$32 = *($33)
	if ( ((uint_32)(($32 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$72 }
	$32 = ($32 + [165])
	goto $label$71 
	
.LABEL $label$73
	$1 = (int_64)0
	if ( ((uint_64)$34 <= (uint_64)(int_64)11) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$72
	$32 = ( ($32 + [208]) ? [0] : ((($32 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$71
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $32) << (int_64)56) >> (int_64)56)
	
.LABEL $label$70
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$35 & (int_64)4294967295))
	
.LABEL $label$69
	$33 = ($33 + [1])
	$34 = ((int_64)$34 + (int_64)1)
	$22 = ((int_64)$1 | (int_64)$22)
	$35 = ((int_64)$35 + (int_64)-5)
	if ( ((int_64)$35 != (int_64)-6) ){ goto $label$68 }
	*($38 + [184]) = $22
	*($38 + [176]) = $4
	$4 = *(($6 + [8]))
	$34 = (int_64)0
	$35 = (int_64)59
	$33 = [896]
	$22 = (int_64)0
	
.LOOP $label$74:
	if ( ((uint_64)$34 > (uint_64)(int_64)5) ){ goto $label$79 }
	$32 = *($33)
	if ( ((uint_32)(($32 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$78 }
	$32 = ($32 + [165])
	goto $label$77 
	
.LABEL $label$79
	$1 = (int_64)0
	if ( ((uint_64)$34 <= (uint_64)(int_64)11) ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$78
	$32 = ( ($32 + [208]) ? [0] : ((($32 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$77
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $32) << (int_64)56) >> (int_64)56)
	
.LABEL $label$76
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$35 & (int_64)4294967295))
	
.LABEL $label$75
	$33 = ($33 + [1])
	$34 = ((int_64)$34 + (int_64)1)
	$22 = ((int_64)$1 | (int_64)$22)
	$35 = ((int_64)$35 + (int_64)-5)
	if ( ((int_64)$35 != (int_64)-6) ){ goto $label$74 }
	*(($38 + [616])) = [0]
	*($38 + [608]) = (int_64)0
	$33 = CALL strlen([912])
	if ( ((uint_32)$33 >= (uint_32)[-16]) ){ goto $label$59 }
	if ( ((uint_32)$33 >= (uint_32)[11]) ){ goto $label$66 }
	*($38 + [608]) = ($33 << [1])
	$32 = (($38 + [608]) | [1])
	if ( $33 ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$67
	$25 = ((float_64)$5 + (float_64)$19)
	if ( ((int_64)$9 != (int_64)$15) ){ goto $label$80 }
	if ( ((int_64)$37 == (int_64)$26) ){ goto $label$80 }
	if ( ((int_64)$10 != (int_64))((int_64)0 - $16)) ){ goto $label$80 }
	$30 = ((float_64)((float_64)$5 / (float_64)$25) * (float_64)$21)
	$8 = [0]
	$25 = (float_64)0
	goto $label$55 
	
.LABEL $label$80
	$25 = ((float_64)$36 * (float_64)(float_64))((float_64)1 - CALL pow(((float_64)((float_64)$5 / (float_64)$25) + (float_64)(float_64)1), ((float_64)(CASTING float_64)(int_64 $9) / (float_64)(float_64)1e3)))
	$36 = (float_64))($36 - $25))
	$25 = !(float_64)$25
	if ( (int_64)($10 == 0) ){ goto $label$63 }
	$30 = ((float_64)((float_64)(CASTING float_64)(uint_64 $10) / (float_64)(float_64)1e3) * (float_64)$25)
	if ( (int_64)($12 == 0) ){ goto $label$81 }
	$31 = (CASTING float_64)(uint_64 $12)
	if ( (((float_64)$30 <= (float_64)$31) | (((float_64)$30 != (float_64)$30) | ((float_64)$31 != (float_64)$31))) ){ goto $label$81 }
	$30 = $31
	
.LABEL $label$81
	$4 = (Rounds 0)(((float_64)$30 * (float_64)CALL pow((float_64)10, (CASTING float_64)(uint_64 *(($6 + [24]))))))
	if ( ((int_64)$4 < (int_64)1) ){ goto $label$63 }
	$24 = *(($0 + [8]))
	$34 = (int_64)0
	$35 = (int_64)59
	$33 = [880]
	$22 = (int_64)0
	
.LOOP $label$82:
	if ( ((uint_64)$34 > (uint_64)(int_64)5) ){ goto $label$87 }
	$32 = *($33)
	if ( ((uint_32)(($32 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$86 }
	$32 = ($32 + [165])
	goto $label$85 
	
.LABEL $label$87
	$1 = (int_64)0
	if ( ((uint_64)$34 <= (uint_64)(int_64)11) ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$86
	$32 = ( ($32 + [208]) ? [0] : ((($32 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$85
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $32) << (int_64)56) >> (int_64)56)
	
.LABEL $label$84
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$35 & (int_64)4294967295))
	
.LABEL $label$83
	$33 = ($33 + [1])
	$34 = ((int_64)$34 + (int_64)1)
	$22 = ((int_64)$1 | (int_64)$22)
	$35 = ((int_64)$35 + (int_64)-5)
	if ( ((int_64)$35 != (int_64)-6) ){ goto $label$82 }
	*($38 + [184]) = $22
	*($38 + [176]) = $24
	$24 = *(($6 + [8]))
	$34 = (int_64)0
	$35 = (int_64)59
	$33 = [944]
	$22 = (int_64)0
	
.LOOP $label$88:
	if ( ((uint_64)$34 > (uint_64)(int_64)4) ){ goto $label$93 }
	$32 = *($33)
	if ( ((uint_32)(($32 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$92 }
	$32 = ($32 + [165])
	goto $label$91 
	
.LABEL $label$93
	$1 = (int_64)0
	if ( ((uint_64)$34 <= (uint_64)(int_64)11) ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$92
	$32 = ( ($32 + [208]) ? [0] : ((($32 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$91
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $32) << (int_64)56) >> (int_64)56)
	
.LABEL $label$90
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$35 & (int_64)4294967295))
	
.LABEL $label$89
	$33 = ($33 + [1])
	$34 = ((int_64)$34 + (int_64)1)
	$22 = ((int_64)$1 | (int_64)$22)
	$35 = ((int_64)$35 + (int_64)-5)
	if ( ((int_64)$35 != (int_64)-6) ){ goto $label$88 }
	$1 = *(($6 + [24]))
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [192])
	$34 = (uint_64)$1 >> (uint_64)(int_64)8)
	$33 = [0]
	
.LOOP $label$94:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $34) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$62 }
	$34 = (uint_64)$34 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$34) & (int_64)255) != (int_64)0) ){ goto $label$95 }
	
.LOOP $label$96:
	$34 = (uint_64)$34 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$34) & (int_64)255) != (int_64)0) ){ goto $label$62 }
	$33 = ($33 + [1])
	if ( ((int_32)$33 < (int_32)[7]) ){ goto $label$96 }
	
.LABEL $label$95
	$32 = [1]
	$33 = ($33 + [1])
	if ( ((int_32)$33 < (int_32)[7]) ){ goto $label$94 }
	goto $label$61 
	
.LABEL $label$66
	$3 = (($33 + [16]) & [-16])
	$32 = CALL $63($3)
	*($38 + [608]) = ($3 | [1])
	*($38 + [616]) = $32
	*($38 + [612]) = $33
	
.LABEL $label$65
	CALL memcpy($32, [912], $33)
	
.LABEL $label$64
	*(($32 + $33)) = [0]
	*((($38 + [128]) + [8])) = *(($2 + [8]))
	$33 = (($38 + [608]) + [8])
	*(($38 + [152])) = *($33)
	*($38 + [128]) = *($2)
	*($38 + [144]) = *($38 + [608])
	*($38 + [608]) = [0]
	*($38 + [612]) = [0]
	*($33) = [0]
	$33 = CALL $34(($38 + [376]), ($38 + [176]), $4, $22, ($38 + [128]))
	CALL $35(($38 + [216]), $33)
	$32 = *($38 + [216])
	CALL send_inline($32, (*($38 + [220]) - $32))
	$32 = *($38 + [216])
	if ( ($32 == 0) ){ goto $label$97 }
	*($38 + [220]) = $32
	CALL $64($32)
	
.LABEL $label$97
	$32 = *($33 + [28])
	if ( ($32 == 0) ){ goto $label$98 }
	*(($33 + [32])) = $32
	CALL $64($32)
	
.LABEL $label$98
	$32 = *($33 + [16])
	if ( ($32 == 0) ){ goto $label$99 }
	*(($33 + [20])) = $32
	CALL $64($32)
	
.LABEL $label$99
	if ( ((*(($38 + [144])) & [1]) == 0) ){ goto $label$100 }
	CALL $64(*(($38 + [152])))
	
.LABEL $label$100
	if ( ((*($38 + [608]) & [1]) == 0) ){ goto $label$101 }
	CALL $64(*(($38 + [616])))
	
.LABEL $label$101
	$36 = (float_64))($36 - $5)
	$25 = $5
	
.LABEL $label$63
	if ( ((int_64)$37 != (int_64)$26) ){ goto $label$60 }
	goto $label$56 
	
.LABEL $label$62
	$32 = [0]
	
.LABEL $label$61
	CALL eosio_assert($32, [256])
	*(($38 + [616])) = [0]
	*($38 + [608]) = (int_64)0
	$33 = CALL strlen([960])
	if ( ((uint_32)$33 >= (uint_32)[-16]) ){ goto $label$57 }
	if ( ((uint_32)$33 >= (uint_32)[11]) ){ goto $label$104 }
	*($38 + [608]) = ($33 << [1])
	$32 = (($38 + [608]) | [1])
	if ( $33 ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$104
	$3 = (($33 + [16]) & [-16])
	$32 = CALL $63($3)
	*($38 + [608]) = ($3 | [1])
	*($38 + [616]) = $32
	*($38 + [612]) = $33
	
.LABEL $label$103
	CALL memcpy($32, [960], $33)
	
.LABEL $label$102
	*(($32 + $33)) = [0]
	*(($38 + [144])) = $1
	*(($38 + [156])) = *($38 + [612])
	*($38 + [136]) = $4
	$33 = ($38 + [616])
	*(($38 + [160])) = *($33)
	*($38 + [128]) = $11
	*($38 + [152]) = *($38 + [608])
	*($38 + [608]) = [0]
	*($38 + [612]) = [0]
	*($33) = [0]
	$33 = CALL $36(($38 + [376]), ($38 + [176]), $24, $22, ($38 + [128]))
	CALL $35(($38 + [216]), $33)
	$32 = *($38 + [216])
	CALL send_inline($32, (*($38 + [220]) - $32))
	$32 = *($38 + [216])
	if ( ($32 == 0) ){ goto $label$105 }
	*($38 + [220]) = $32
	CALL $64($32)
	
.LABEL $label$105
	$32 = *($33 + [28])
	if ( ($32 == 0) ){ goto $label$106 }
	*(($33 + [32])) = $32
	CALL $64($32)
	
.LABEL $label$106
	$32 = *($33 + [16])
	if ( ($32 == 0) ){ goto $label$107 }
	*(($33 + [20])) = $32
	CALL $64($32)
	
.LABEL $label$107
	if ( ((*(($38 + [152])) & [1]) == 0) ){ goto $label$108 }
	CALL $64(*(($38 + [160])))
	
.LABEL $label$108
	if ( ((*($38 + [608]) & [1]) == 0) ){ goto $label$109 }
	CALL $64(*(($38 + [616])))
	
.LABEL $label$109
	$25 = (float_64))($25 - $30)
	if ( ((int_64)$37 == (int_64)$26) ){ goto $label$56 }
	
.LABEL $label$60
	if ( (int_64)($16 == 0) ){ goto $label$110 }
	$30 = ((float_64)((float_64)(CASTING float_64)(uint_64 $16) / (float_64)(float_64)1e3) * (float_64)$25)
	if ( (int_64)($18 == 0) ){ goto $label$111 }
	$31 = (CASTING float_64)(uint_64 $18)
	if ( (((float_64)$30 <= (float_64)$31) | (((float_64)$30 != (float_64)$30) | ((float_64)$31 != (float_64)$31))) ){ goto $label$111 }
	$30 = $31
	
.LABEL $label$111
	$26 = (Rounds 0)(((float_64)$30 * (float_64)CALL pow((float_64)10, (CASTING float_64)(uint_64 *(($6 + [24]))))))
	if ( ((int_64)$26 < (int_64)1) ){ goto $label$110 }
	$4 = *(($0 + [8]))
	$34 = (int_64)0
	$35 = (int_64)59
	$33 = [880]
	$22 = (int_64)0
	
.LOOP $label$112:
	if ( ((uint_64)$34 > (uint_64)(int_64)5) ){ goto $label$117 }
	$32 = *($33)
	if ( ((uint_32)(($32 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$116 }
	$32 = ($32 + [165])
	goto $label$115 
	
.LABEL $label$117
	$1 = (int_64)0
	if ( ((uint_64)$34 <= (uint_64)(int_64)11) ){ goto $label$114 }
	goto $label$113 
	
.LABEL $label$116
	$32 = ( ($32 + [208]) ? [0] : ((($32 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$115
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $32) << (int_64)56) >> (int_64)56)
	
.LABEL $label$114
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$35 & (int_64)4294967295))
	
.LABEL $label$113
	$33 = ($33 + [1])
	$34 = ((int_64)$34 + (int_64)1)
	$22 = ((int_64)$1 | (int_64)$22)
	$35 = ((int_64)$35 + (int_64)-5)
	if ( ((int_64)$35 != (int_64)-6) ){ goto $label$112 }
	*($38 + [184]) = $22
	*($38 + [176]) = $4
	$4 = *(($6 + [8]))
	$34 = (int_64)0
	$35 = (int_64)59
	$33 = [944]
	$22 = (int_64)0
	
.LOOP $label$118:
	if ( ((uint_64)$34 > (uint_64)(int_64)4) ){ goto $label$123 }
	$32 = *($33)
	if ( ((uint_32)(($32 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$122 }
	$32 = ($32 + [165])
	goto $label$121 
	
.LABEL $label$123
	$1 = (int_64)0
	if ( ((uint_64)$34 <= (uint_64)(int_64)11) ){ goto $label$120 }
	goto $label$119 
	
.LABEL $label$122
	$32 = ( ($32 + [208]) ? [0] : ((($32 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$121
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $32) << (int_64)56) >> (int_64)56)
	
.LABEL $label$120
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$35 & (int_64)4294967295))
	
.LABEL $label$119
	$33 = ($33 + [1])
	$34 = ((int_64)$34 + (int_64)1)
	$22 = ((int_64)$1 | (int_64)$22)
	$35 = ((int_64)$35 + (int_64)-5)
	if ( ((int_64)$35 != (int_64)-6) ){ goto $label$118 }
	$1 = *(($6 + [24]))
	CALL eosio_assert((uint_64)(((int_64)$26 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [192])
	$34 = (uint_64)$1 >> (uint_64)(int_64)8)
	$33 = [0]
	
.LOOP $label$126:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $34) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$125 }
	$34 = (uint_64)$34 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$34) & (int_64)255) != (int_64)0) ){ goto $label$127 }
	
.LOOP $label$128:
	$34 = (uint_64)$34 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$34) & (int_64)255) != (int_64)0) ){ goto $label$125 }
	$33 = ($33 + [1])
	if ( ((int_32)$33 < (int_32)[7]) ){ goto $label$128 }
	
.LABEL $label$127
	$32 = [1]
	$33 = ($33 + [1])
	if ( ((int_32)$33 < (int_32)[7]) ){ goto $label$126 }
	goto $label$124 
	
.LABEL $label$125
	$32 = [0]
	
.LABEL $label$124
	CALL eosio_assert($32, [256])
	*(($38 + [616])) = [0]
	*($38 + [608]) = (int_64)0
	$33 = CALL strlen([960])
	if ( ((uint_32)$33 >= (uint_32)[-16]) ){ goto $label$58 }
	if ( ((uint_32)$33 >= (uint_32)[11]) ){ goto $label$131 }
	*($38 + [608]) = ($33 << [1])
	$32 = (($38 + [608]) | [1])
	if ( $33 ){ goto $label$130 }
	goto $label$129 
	
.LABEL $label$131
	$3 = (($33 + [16]) & [-16])
	$32 = CALL $63($3)
	*($38 + [608]) = ($3 | [1])
	*($38 + [616]) = $32
	*($38 + [612]) = $33
	
.LABEL $label$130
	CALL memcpy($32, [960], $33)
	
.LABEL $label$129
	*(($32 + $33)) = [0]
	*(($38 + [144])) = $1
	*(($38 + [156])) = *($38 + [612])
	*($38 + [136]) = $26
	$33 = ($38 + [616])
	*(($38 + [160])) = *($33)
	*($38 + [128]) = $17
	*($38 + [152]) = *($38 + [608])
	*($38 + [608]) = [0]
	*($38 + [612]) = [0]
	*($33) = [0]
	$33 = CALL $36(($38 + [376]), ($38 + [176]), $4, $22, ($38 + [128]))
	CALL $35(($38 + [216]), $33)
	$32 = *($38 + [216])
	CALL send_inline($32, (*($38 + [220]) - $32))
	$32 = *($38 + [216])
	if ( ($32 == 0) ){ goto $label$132 }
	*($38 + [220]) = $32
	CALL $64($32)
	
.LABEL $label$132
	$32 = *($33 + [28])
	if ( ($32 == 0) ){ goto $label$133 }
	*(($33 + [32])) = $32
	CALL $64($32)
	
.LABEL $label$133
	$32 = *($33 + [16])
	if ( ($32 == 0) ){ goto $label$134 }
	*(($33 + [20])) = $32
	CALL $64($32)
	
.LABEL $label$134
	if ( ((*(($38 + [152])) & [1]) == 0) ){ goto $label$135 }
	CALL $64(*(($38 + [160])))
	
.LABEL $label$135
	if ( ((*($38 + [608]) & [1]) == 0) ){ goto $label$136 }
	CALL $64(*(($38 + [616])))
	
.LABEL $label$136
	$25 = (float_64))($25 - $30)
	
.LABEL $label$110
	$30 = ((float_64)$21 * (float_64)((float_64)CALL pow(((float_64)((float_64)$25 / (float_64)(float_64))($36 - $25)) + (float_64)(float_64)1), ((float_64)(float_64)1e3 / (float_64)(CASTING float_64)(int_64 $15))) + (float_64)(float_64)-1))
	$8 = [0]
	goto $label$55 
	
.LABEL $label$59
	CALL $65(($38 + [608]))
	
.LABEL $label$58
	CALL $65(($38 + [608]))
	
.LABEL $label$57
	CALL $65(($38 + [608]))
	
.LABEL $label$56
	CALL eosio_assert(((int_32)(*($38 + [556]) - *($38 + [552])) == (int_32)[36]), [976])
	$8 = [1]
	$30 = $25
	
.LABEL $label$55
	$31 = CALL pow((float_64)10, $20)
	CALL prints([1024])
	CALL printdf($19)
	CALL prints([48])
	CALL printdf($21)
	CALL prints([48])
	CALL printdf($36)
	CALL prints([48])
	CALL printdf($5)
	CALL prints([48])
	CALL printdf($25)
	CALL prints([48])
	$26 = (Rounds 0)(((float_64)$30 * (float_64)$31))
	CALL printi($26)
	CALL prints([48])
	CALL printui($9)
	CALL prints([48])
	CALL printui($15)
	CALL prints([48])
	CALL printui($18)
	CALL prints([48])
	CALL printui($12)
	CALL prints([48])
	CALL printui($16)
	CALL prints([48])
	CALL printui($10)
	CALL prints([1040])
	*($38 + [328]) = (int_64)0
	*($38 + [336]) = [0]
	$33 = (*($38 + [556]) - *($38 + [552]))
	$3 = ((int_32)$33 / (int_32)[12])
	if ( ($33 == 0) ){ goto $label$140 }
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$139 }
	$32 = CALL $63($33)
	*(($38 + [336])) = ($32 + ((int_32)$3 * (int_32)[12]))
	*($38 + [328]) = $32
	*($38 + [332]) = $32
	$3 = *($38 + [556])
	$33 = *($38 + [552])
	if ( ((int_32)$33 == (int_32)$3) ){ goto $label$140 }
	
.LOOP $label$141:
	CALL $73($32, $33)
	$32 = (*($38 + [332]) + [12])
	*($38 + [332]) = $32
	$33 = ($33 + [12])
	if ( ((int_32)$3 != (int_32)$33) ){ goto $label$141 }
	
.LABEL $label$140
	CALL $73((($38 + [328]) + [12]), (($38 + [552]) + [12]))
	$33 = ($38 + [352])
	CALL $73($33, $7)
	$7 = (($38 + [552]) + [36])
	CALL $73((($38 + [328]) + [36]), $7)
	CALL _Z7nextHop20memoConvertStructure(($38 + [376]), ($38 + [328]))
	if ( ((*($38 + [364]) & [1]) == 0) ){ goto $label$142 }
	CALL $64(*(($38 + [372])))
	
.LABEL $label$142
	if ( ((*($33) & [1]) == 0) ){ goto $label$143 }
	CALL $64(*(($38 + [360])))
	
.LABEL $label$143
	if ( ((*(($38 + [340])) & [1]) == 0) ){ goto $label$144 }
	CALL $64(*(($38 + [348])))
	
.LABEL $label$144
	$3 = *($38 + [328])
	if ( ($3 == 0) ){ goto $label$145 }
	$33 = *($38 + [332])
	if ( ((int_32)$33 == (int_32)$3) ){ goto $label$147 }
	$32 = ([0] - $3)
	$33 = ($33 + [-12])
	
.LOOP $label$148:
	if ( ((*($33) & [1]) == 0) ){ goto $label$149 }
	CALL $64(*(($33 + [8])))
	
.LABEL $label$149
	$33 = ($33 + [-12])
	if ( ((int_32)($33 + $32) != (int_32)[-12]) ){ goto $label$148 }
	$33 = *($38 + [328])
	goto $label$146 
	
.LABEL $label$147
	$33 = $3
	
.LABEL $label$146
	*($38 + [332]) = $3
	CALL $64($33)
	
.LABEL $label$145
	*($38 + [264]) = (int_64)0
	*($38 + [272]) = [0]
	$33 = (*($38 + [380]) - *($38 + [376]))
	$3 = ((int_32)$33 / (int_32)[12])
	if ( ($33 == 0) ){ goto $label$150 }
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$138 }
	$32 = CALL $63($33)
	*(($38 + [272])) = ($32 + ((int_32)$3 * (int_32)[12]))
	*($38 + [264]) = $32
	*($38 + [268]) = $32
	$3 = *($38 + [380])
	$33 = *($38 + [376])
	if ( ((int_32)$33 == (int_32)$3) ){ goto $label$150 }
	
.LOOP $label$151:
	CALL $73($32, $33)
	$32 = (*($38 + [268]) + [12])
	*($38 + [268]) = $32
	$33 = ($33 + [12])
	if ( ((int_32)$3 != (int_32)$33) ){ goto $label$151 }
	
.LABEL $label$150
	CALL $73((($38 + [264]) + [12]), (($38 + [376]) + [12]))
	$33 = (($38 + [264]) + [24])
	CALL $73($33, (($38 + [376]) + [24]))
	CALL $73((($38 + [264]) + [36]), (($38 + [376]) + [36]))
	CALL _Z9buildMemo20memoConvertStructure(($38 + [312]), ($38 + [264]))
	if ( ((*($38 + [300]) & [1]) == 0) ){ goto $label$152 }
	CALL $64(*(($38 + [308])))
	
.LABEL $label$152
	if ( ((*($33) & [1]) == 0) ){ goto $label$153 }
	CALL $64(*(($38 + [296])))
	
.LABEL $label$153
	if ( ((*(($38 + [276])) & [1]) == 0) ){ goto $label$154 }
	CALL $64(*(($38 + [284])))
	
.LABEL $label$154
	$3 = *($38 + [264])
	if ( ($3 == 0) ){ goto $label$155 }
	$33 = *($38 + [268])
	if ( ((int_32)$33 == (int_32)$3) ){ goto $label$157 }
	$32 = ([0] - $3)
	$33 = ($33 + [-12])
	
.LOOP $label$158:
	if ( ((*($33) & [1]) == 0) ){ goto $label$159 }
	CALL $64(*(($33 + [8])))
	
.LABEL $label$159
	$33 = ($33 + [-12])
	if ( ((int_32)($33 + $32) != (int_32)[-12]) ){ goto $label$158 }
	$33 = *($38 + [264])
	goto $label$156 
	
.LABEL $label$157
	$33 = $3
	
.LABEL $label$156
	*($38 + [268]) = $3
	CALL $64($33)
	
.LABEL $label$155
	CALL eosio_assert((uint_64)(((int_64)$26 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [192])
	$33 = [0]
	
.LOOP $label$162:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $37) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$161 }
	$37 = (uint_64)$37 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$37) & (int_64)255) != (int_64)0) ){ goto $label$163 }
	
.LOOP $label$164:
	$37 = (uint_64)$37 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$37) & (int_64)255) != (int_64)0) ){ goto $label$161 }
	$33 = ($33 + [1])
	if ( ((int_32)$33 < (int_32)[7]) ){ goto $label$164 }
	
.LABEL $label$163
	$32 = [1]
	$33 = ($33 + [1])
	if ( ((int_32)$33 < (int_32)[7]) ){ goto $label$162 }
	goto $label$160 
	
.LABEL $label$161
	$32 = [0]
	
.LABEL $label$160
	CALL eosio_assert($32, [256])
	if ( ((int_32)*($38 + [380]) != (int_32)*($38 + [376])) ){ goto $label$169 }
	CALL $73(($38 + [248]), $7)
	$32 = ((int_32)*($33) == (int_32)[45])
	$33 = ( *($38 + [256]) ? (($38 + [248]) | [1]) : (*($38 + [248]) & [1]) )
	$33 = ( ($33 + [1]) ? $33 : $32 )
	$28 = ( (float_32)-1 ? (float_32)1 : $32 )
	$3 = [0]
	$27 = (float_32)0
	
.LOOP $label$170:
	$32 = *($33)
	if ( ((int_32)$32 == (int_32)[46]) ){ goto $label$171 }
	if ( ($32 == 0) ){ goto $label$168 }
	$32 = (int_32(($32 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$32 > (uint_32)[9]) ){ goto $label$172 }
	$28 = ( ((float_32)$28 / (float_32)(float_32)10) ? $28 : $3 )
	$27 = ((float_32)((float_32)$27 * (float_32)(float_32)10) + (float_32)(CASTING float_32)(int_32 $32))
	
.LABEL $label$172
	$33 = ($33 + [1])
	goto $label$170 
	
.LABEL $label$171
	$3 = [1]
	$33 = ($33 + [1])
	goto $label$170 
	
.LABEL $label$169
	$23 = *(($6 + [40]))
	if ( $8 ){ goto $label$167 }
	goto $label$166 
	
.LABEL $label$168
	CALL eosio_assert(((int_64)$26 >= (int_64)(Rounds 0)(((float_64)(PROMOTE float_64)(float_32 ((float_32)$27 * (float_32)$28)) * (float_64)CALL $75((float_64)10, $20)))), [352])
	if ( ((*($38 + [248]) & [1]) == 0) ){ goto $label$173 }
	CALL $64(*(($38 + [256])))
	
.LABEL $label$173
	if ( (*($6 + [48]) == 0) ){ goto $label$174 }
	*($38 + [240]) = $14
	*(($38 + [8])) = $14
	*($38 + [232]) = $26
	*($38) = $26
	CALL _Z11verifyEntryyyN5eosio5assetE($23, $13, $38)
	
.LABEL $label$174
	*(($38 + [136])) = [0]
	*($38 + [128]) = (int_64)0
	$33 = CALL strlen([1056])
	if ( ((uint_32)$33 >= (uint_32)[-16]) ){ goto $label$137 }
	if ( ((uint_32)$33 >= (uint_32)[11]) ){ goto $label$177 }
	*($38 + [128]) = ($33 << [1])
	$32 = (($38 + [128]) | [1])
	if ( $33 ){ goto $label$176 }
	goto $label$175 
	
.LABEL $label$177
	$3 = (($33 + [16]) & [-16])
	$32 = CALL $63($3)
	*($38 + [128]) = ($3 | [1])
	*($38 + [136]) = $32
	*($38 + [132]) = $33
	
.LABEL $label$176
	CALL memcpy($32, [1056], $33)
	
.LABEL $label$175
	*(($32 + $33)) = [0]
	if ( (*($38 + [312]) & [1]) ){ goto $label$179 }
	*($38 + [312]) = [0]
	goto $label$178 
	
.LABEL $label$179
	*(*($38 + [320])) = [0]
	*($38 + [316]) = [0]
	
.LABEL $label$178
	CALL $68(($38 + [312]), [0])
	*((($38 + [312]) + [8])) = *((($38 + [128]) + [8]))
	*($38 + [312]) = *($38 + [128])
	if ( ($8 == 0) ){ goto $label$166 }
	
.LABEL $label$167
	$22 = *(($0 + [8]))
	$34 = (int_64)0
	$35 = (int_64)59
	$33 = [880]
	$37 = (int_64)0
	
.LOOP $label$180:
	if ( ((uint_64)$34 > (uint_64)(int_64)5) ){ goto $label$185 }
	$32 = *($33)
	if ( ((uint_32)(($32 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$184 }
	$32 = ($32 + [165])
	goto $label$183 
	
.LABEL $label$185
	$1 = (int_64)0
	if ( ((uint_64)$34 <= (uint_64)(int_64)11) ){ goto $label$182 }
	goto $label$181 
	
.LABEL $label$184
	$32 = ( ($32 + [208]) ? [0] : ((($32 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$183
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $32) << (int_64)56) >> (int_64)56)
	
.LABEL $label$182
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$35 & (int_64)4294967295))
	
.LABEL $label$181
	$33 = ($33 + [1])
	$34 = ((int_64)$34 + (int_64)1)
	$37 = ((int_64)$1 | (int_64)$37)
	$35 = ((int_64)$35 + (int_64)-5)
	if ( ((int_64)$35 != (int_64)-6) ){ goto $label$180 }
	*($38 + [224]) = $37
	*($38 + [216]) = $22
	$34 = (int_64)0
	$35 = (int_64)59
	$33 = [944]
	$37 = (int_64)0
	
.LOOP $label$186:
	if ( ((uint_64)$34 > (uint_64)(int_64)4) ){ goto $label$191 }
	$32 = *($33)
	if ( ((uint_32)(($32 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$190 }
	$32 = ($32 + [165])
	goto $label$189 
	
.LABEL $label$191
	$1 = (int_64)0
	if ( ((uint_64)$34 <= (uint_64)(int_64)11) ){ goto $label$188 }
	goto $label$187 
	
.LABEL $label$190
	$32 = ( ($32 + [208]) ? [0] : ((($32 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$189
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $32) << (int_64)56) >> (int_64)56)
	
.LABEL $label$188
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$35 & (int_64)4294967295))
	
.LABEL $label$187
	$33 = ($33 + [1])
	$34 = ((int_64)$34 + (int_64)1)
	$37 = ((int_64)$1 | (int_64)$37)
	$35 = ((int_64)$35 + (int_64)-5)
	if ( ((int_64)$35 != (int_64)-6) ){ goto $label$186 }
	*(($38 + [192])) = $14
	*($38 + [184]) = $26
	*($38 + [176]) = $23
	CALL $73(($38 + [200]), ($38 + [312]))
	$33 = CALL $36(($38 + [128]), ($38 + [216]), $13, $37, ($38 + [176]))
	CALL $35(($38 + [608]), $33)
	$32 = *($38 + [608])
	CALL send_inline($32, (*($38 + [612]) - $32))
	$32 = *($38 + [608])
	if ( ($32 == 0) ){ goto $label$192 }
	*($38 + [612]) = $32
	CALL $64($32)
	
.LABEL $label$192
	$32 = *($33 + [28])
	if ( ($32 == 0) ){ goto $label$193 }
	*(($33 + [32])) = $32
	CALL $64($32)
	
.LABEL $label$193
	$32 = *($33 + [16])
	if ( ($32 == 0) ){ goto $label$194 }
	*(($33 + [20])) = $32
	CALL $64($32)
	
.LABEL $label$194
	if ( ((*($38 + [200]) & [1]) == 0) ){ goto $label$165 }
	CALL $64(*(($38 + [208])))
	goto $label$165 
	
.LABEL $label$166
	$16 = *(($0 + [8]))
	$34 = (int_64)0
	$35 = (int_64)59
	$33 = [880]
	$37 = (int_64)0
	
.LOOP $label$195:
	if ( ((uint_64)$34 > (uint_64)(int_64)5) ){ goto $label$200 }
	$32 = *($33)
	if ( ((uint_32)(($32 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$199 }
	$32 = ($32 + [165])
	goto $label$198 
	
.LABEL $label$200
	$1 = (int_64)0
	if ( ((uint_64)$34 <= (uint_64)(int_64)11) ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$199
	$32 = ( ($32 + [208]) ? [0] : ((($32 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$198
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $32) << (int_64)56) >> (int_64)56)
	
.LABEL $label$197
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$35 & (int_64)4294967295))
	
.LABEL $label$196
	$33 = ($33 + [1])
	$34 = ((int_64)$34 + (int_64)1)
	$37 = ((int_64)$1 | (int_64)$37)
	$35 = ((int_64)$35 + (int_64)-5)
	if ( ((int_64)$35 != (int_64)-6) ){ goto $label$195 }
	$34 = (int_64)0
	$35 = (int_64)59
	$33 = [1072]
	$22 = (int_64)0
	
.LOOP $label$201:
	if ( ((uint_64)$34 > (uint_64)(int_64)7) ){ goto $label$206 }
	$32 = *($33)
	if ( ((uint_32)(($32 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$205 }
	$32 = ($32 + [165])
	goto $label$204 
	
.LABEL $label$206
	$1 = (int_64)0
	if ( ((uint_64)$34 <= (uint_64)(int_64)11) ){ goto $label$203 }
	goto $label$202 
	
.LABEL $label$205
	$32 = ( ($32 + [208]) ? [0] : ((($32 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$204
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $32) << (int_64)56) >> (int_64)56)
	
.LABEL $label$203
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$35 & (int_64)4294967295))
	
.LABEL $label$202
	$33 = ($33 + [1])
	$34 = ((int_64)$34 + (int_64)1)
	$22 = ((int_64)$1 | (int_64)$22)
	$35 = ((int_64)$35 + (int_64)-5)
	if ( ((int_64)$35 != (int_64)-6) ){ goto $label$201 }
	*((($38 + [128]) + [24])) = $14
	*($38 + [136]) = $23
	*($38 + [128]) = $16
	*($38 + [144]) = $26
	CALL $73((($38 + [128]) + [32]), ($38 + [312]))
	*(($32 = (($38 + [176]) + [24]))) = [0]
	*($38 + [184]) = $22
	*($38 + [176]) = $13
	*($38 + [192]) = (int_64)0
	*(($33 = CALL $63([16]))) = $16
	*($33 + [8]) = $37
	*((($38 + [176]) + [32])) = [0]
	$3 = ($33 + [16])
	*($32) = $3
	*(($38 + [196])) = $3
	*($38 + [192]) = $33
	*($38 + [204]) = [0]
	*((($38 + [176]) + [36])) = [0]
	$33 = *($38 + [160])
	$32 = ( *((($38 + [128]) + [36])) ? uint_32($33 >> [1]) : ($33 & [1]) )
	$33 = ($32 + [32])
	$34 = (CASTING uint_64)(uint_32 $32)
	$32 = ($38 + [204])
	
.LOOP $label$207:
	$33 = ($33 + [1])
	$34 = (uint_64)$34 >> (uint_64)(int_64)7
	if ( ((int_64)$34) != (int_64)0) ){ goto $label$207 }
	if ( ($33 == 0) ){ goto $label$209 }
	CALL $37($32, $33)
	$32 = *(($38 + [208]))
	$33 = *(($38 + [204]))
	goto $label$208 
	
.LABEL $label$209
	$32 = [0]
	$33 = [0]
	
.LABEL $label$208
	*($38 + [220]) = $33
	*($38 + [216]) = $33
	*($38 + [224]) = $32
	*($38 + [600]) = ($38 + [216])
	*($38 + [608]) = ($38 + [128])
	CALL $38(($38 + [608]), ($38 + [600]))
	CALL $35(($38 + [216]), ($38 + [176]))
	$33 = *($38 + [216])
	CALL send_inline($33, (*($38 + [220]) - $33))
	$33 = *($38 + [216])
	if ( ($33 == 0) ){ goto $label$210 }
	*($38 + [220]) = $33
	CALL $64($33)
	
.LABEL $label$210
	$33 = *($38 + [204])
	if ( ($33 == 0) ){ goto $label$211 }
	*(($38 + [208])) = $33
	CALL $64($33)
	
.LABEL $label$211
	$33 = *($38 + [192])
	if ( ($33 == 0) ){ goto $label$212 }
	*(($38 + [196])) = $33
	CALL $64($33)
	
.LABEL $label$212
	if ( ((*($38 + [160]) & [1]) == 0) ){ goto $label$165 }
	CALL $64(*(($38 + [168])))
	
.LABEL $label$165
	if ( ((*($38 + [312]) & [1]) == 0) ){ goto $label$213 }
	CALL $64(*($38 + [320]))
	
.LABEL $label$213
	if ( ((*(($38 + [412])) & [1]) == 0) ){ goto $label$214 }
	CALL $64(*(($38 + [420])))
	
.LABEL $label$214
	if ( ((*(($38 + [400])) & [1]) == 0) ){ goto $label$215 }
	CALL $64(*(($38 + [408])))
	
.LABEL $label$215
	if ( ((*(($38 + [388])) & [1]) == 0) ){ goto $label$216 }
	CALL $64(*(($38 + [396])))
	
.LABEL $label$216
	$3 = *($38 + [376])
	if ( ($3 == 0) ){ goto $label$217 }
	$33 = *($38 + [380])
	if ( ((int_32)$33 == (int_32)$3) ){ goto $label$219 }
	$32 = ([0] - $3)
	$33 = ($33 + [-12])
	
.LOOP $label$220:
	if ( ((*($33) & [1]) == 0) ){ goto $label$221 }
	CALL $64(*(($33 + [8])))
	
.LABEL $label$221
	$33 = ($33 + [-12])
	if ( ((int_32)($33 + $32) != (int_32)[-12]) ){ goto $label$220 }
	$33 = *($38 + [376])
	goto $label$218 
	
.LABEL $label$219
	$33 = $3
	
.LABEL $label$218
	*($38 + [380]) = $3
	CALL $64($33)
	
.LABEL $label$217
	if ( ((*(($38 + [588])) & [1]) == 0) ){ goto $label$222 }
	CALL $64(*(($38 + [596])))
	
.LABEL $label$222
	if ( ((*(($38 + [576])) & [1]) == 0) ){ goto $label$223 }
	CALL $64(*(($38 + [584])))
	
.LABEL $label$223
	if ( ((*(($38 + [564])) & [1]) == 0) ){ goto $label$224 }
	CALL $64(*(($38 + [572])))
	
.LABEL $label$224
	$3 = *($38 + [552])
	if ( ($3 == 0) ){ goto $label$225 }
	$33 = *($38 + [556])
	if ( ((int_32)$33 == (int_32)$3) ){ goto $label$227 }
	$32 = ([0] - $3)
	$33 = ($33 + [-12])
	
.LOOP $label$228:
	if ( ((*($33) & [1]) == 0) ){ goto $label$229 }
	CALL $64(*(($33 + [8])))
	
.LABEL $label$229
	$33 = ($33 + [-12])
	if ( ((int_32)($33 + $32) != (int_32)[-12]) ){ goto $label$228 }
	$33 = *($38 + [552])
	goto $label$226 
	
.LABEL $label$227
	$33 = $3
	
.LABEL $label$226
	*($38 + [556]) = $3
	CALL $64($33)
	
.LABEL $label$225
	*([0] + [4]) = ($38 + [624])
	return (unreachable)
	
.LABEL $label$139
	CALL $72(($38 + [328]))
	
.LABEL $label$138
	CALL $72(($38 + [264]))
	
.LABEL $label$137
	CALL $65(($38 + [128]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [160])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $63([64])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [192])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [256])
	*($4 + [52]) = $0
	CALL $42(($8 + [32]), $4)
	*($4 + [56]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [56])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $43($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $64($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [288])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [32]) = ((int_32)*($3 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $63(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $72($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $64($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $64($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [96])
	*([0] + [4]) = $3
	*(($3 + [24])) = $0
	*(($3 + [32])) = (int_64)-1
	*(($3 + [40])) = (int_64)0
	*($3 + [8]) = $0
	*($3) = $0
	*($3 + [16]) = $0
	*(($3 + [48])) = [0]
	*($3 + [56]) = $0
	*(($3 + [64])) = $0
	*(($3 + [72])) = (int_64)-1
	*(($3 + [80])) = [0]
	*(($3 + [84])) = [0]
	*(($3 + [88])) = [0]
	CALL _ZN15BancorConverter5applyEyy($3, $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $60([1476], $0)
}

int_32 .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9958]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9960])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9958]) = [1]
	$7 = ($7 << [16])
	*([0] + [9960]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9960])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9960]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9958]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9958]) = [1]
	$3 = ($3 << [16])
	*([0] + [9960]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9960])
	
.LABEL $label$8
	*([0] + [9960]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9964])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $64 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [192])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [256])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $55($6, $0)
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1088])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1088])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1088])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $39(*($1), ($0 + [32]))
}

void .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [16])) = (int_64)1398362884
	*($0 + [8]) = (int_64)0
	CALL eosio_assert([1], [192])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [256])
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $53($6, $0)
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [288])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [32]) = ((int_32)*($3 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [288])
	CALL memcpy(($3 + [13]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [24]) = ((int_32)*($3 + [13]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [288])
	CALL memcpy(($3 + [14]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [25]) = ((int_32)*($3 + [14]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [288])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [40]) = ((int_32)*($3 + [15]) != (int_32)[0])
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $56($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $57($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $68($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $63($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $68($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $64($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $65($7)
	return (unreachable)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1472])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $37($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [288])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}