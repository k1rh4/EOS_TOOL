(data (i32.const 8192) "contract has initialized\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8226) "no special symbol\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8330) "contract not initialize\00")
(data (i32.const 8354) "Bet paused!\00")
(data (i32.const 8366) "Bet doesn\'t exist\00")
(data (i32.const 8384) "invild symbol\00stoull\00")
(data (i32.const 8405) "EOS\00")
(data (i32.const 8409) "transfer dividend to tokenpool\00")
(data (i32.const 8440) "no enough asset to payout, need add jackpot\00")
(data (i32.const 8484) "Bet id: \00")
(data (i32.const 8493) " -- Winner! Play: dice.gamesky.io\00")
(data (i32.const 8527) "SKY\00")
(data (i32.const 8532) "invalid player name\00")
(data (i32.const 8552) "contract is not involved in this transfer\00%llu\00")
(data (i32.const 8599) "must bet between min and max\00")
(data (i32.const 8628) "-\00")
(data (i32.const 8630) "bet paused!\00")
(data (i32.const 8642) "Roll must be >= 2, <= 96.\00")
(data (i32.const 8668) "bet less than max\00")
(data (i32.const 8686) ":\00")
(data (i32.const 8688) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8737) "invalid symbol name\00")
(data (i32.const 8757) "string is too long to be a valid symbol_code\00")
(data (i32.const 8802) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8855) "active")
(data (i32.const 8861) "transfer")
(data (i32.const 8869) "write\00: out of range\00")
(data (i32.const 8890) "betreceipt")
(data (i32.const 8900) "\c8\"\00\00")
(data (i32.const 8904) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 8937) "mine")
(data (i32.const 8941) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9000) "string is too long to be a valid name\00")
(data (i32.const 9038) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9105) "character is not in allowed character set for names\00")
(data (i32.const 9157) "eosio.token")
(data (i32.const 9168) "gameskytoken")
(data (i32.const 9180) "oasis.x")
(data (i32.const 9187) "error reading iterator\00")
(data (i32.const 9210) "read\00")
(data (i32.const 9215) "cannot create objects in table of another contract\00")
(data (i32.const 9266) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9318) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9372) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9420) "cannot pass end iterator to modify\00")
(data (i32.const 9455) "object passed to modify is not in multi_index\00")
(data (i32.const 9501) "cannot modify objects in table of another contract\00")
(data (i32.const 9552) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9611) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9662) "get\00")
(data (i32.const 9666) "attempt to add asset with different symbol\00")
(data (i32.const 9709) "addition underflow\00")
(data (i32.const 9728) "addition overflow\00")
(data (i32.const 9746) "cannot pass end iterator to erase\00")
(data (i32.const 9780) "cannot increment end iterator\00")
(data (i32.const 9810) "object passed to erase is not in multi_index\00")
(data (i32.const 9855) "cannot erase objects in table of another contract\00")
(data (i32.const 9905) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9958) "gameskypools")
(data (i32.const 9970) "gameskybank1")
(data (i32.const 18400) ": no conversion\00")
(data (i32.const 18416) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 18496) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$5 (param i32 i64 i32 i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "assert_recover_key" (func $fimport$7 (param i32 i32 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$8 (param i32 i32)))
(import "env" "current_time" (func $fimport$9 (result i64)))
(import "env" "send_deferred" (func $fimport$10 (param i32 i64 i32 i32 i32)))
(import "env" "db_next_i64" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$12 (param i64)))
(import "env" "is_account" (func $fimport$13 (param i64) (result i32)))
(import "env" "action_data_size" (func $fimport$14 (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$18 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$20 (param i64 i64 i64) (result i32)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "abort" (func $fimport$22))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$24 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$35 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$36 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$39 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$41 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$42 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$43 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $39))
(export "_Znwj" (func $71))
(export "_ZdlPv" (func $73))
(export "_Znaj" (func $72))
(export "_ZdaPv" (func $74))
(export "_ZnwjSt11align_val_t" (func $75))
(export "_ZnajSt11align_val_t" (func $76))
(export "_ZdlPvSt11align_val_t" (func $77))
(export "_ZdaPvSt11align_val_t" (func $78))
(table $0 11 11 anyfunc)
(elem (i32.const 1) $36 $12 $14 $1 $9 $8 $7 $35 $101 $103)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18753))
(global $global$2 i32 (i32.const 18753))


int_32 .FUNC $98 ()
{
	return [9988]
}

void .FUNC $99 (int_32 $0)
{
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $113($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $83($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $95 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $96 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $97 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $90 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $94($1, $0, [8875])
	CALL $95()
	(unreachable)
}

void .FUNC $91 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $94($1, $0, [18400])
	CALL $96()
	(unreachable)
}

int_64 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $113([8398])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8398], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $98())
	*(CALL $98()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $110($4, ($3 + [12]), $2)
	$0 = CALL $98()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $90($3)
	
.LABEL $label$1
	CALL $91($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $93 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $86(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $104(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8594], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $86(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $86(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $116($1)
	
.LABEL $label$2
	*(CALL $98()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $116(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $119($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $97($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [68]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [76])))
	
.LABEL $label$11
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [64])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9210])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0)
	$5 = *($1)
	$0 = *($5 + [4])
	$2 = [0]
	$6 = (int_64)0
	$7 = ($5 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($0 <= *(($5 + [8]))), [9662])
	$0 = *($7)
	$3 = *($0)
	$0 = ($0 + [1])
	*($7) = $0
	$2 = ($2 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($3 & [127]) << $2)))
	$2 = ($2 + [7])
	if ( ($3 & [128]) ){ goto $label$1 }
	*($4 + [8]) = $6
	CALL eosio_assert(((uint_32)(*(($5 + [8])) - $0) > (uint_32)[64]), [9210])
	$3 = ($5 + [4])
	CALL memcpy(($4 + [12]), *($3), [65])
	*($3) = (*($3) + [65])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [9210])
	CALL memcpy(($4 + [80]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [9210])
	CALL memcpy(($4 + [112]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9210])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9210])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9210])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [9210])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [32])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $43 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $116($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [160]) + [32]))) = [0]
	*(($8 = (($4 + [160]) + [24]))) = (int_64)0
	*(($9 = (($4 + [160]) + [16]))) = (int_64)0
	*(($10 = (($4 + [160]) + [8]))) = (int_64)0
	*($4 + [160]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[33]), [9210])
	CALL memcpy(($4 + [160]), $2, [34])
	*(($4 + [84])) = ($2 + [34])
	*((($4 + [64]) + [24])) = ($2 + $7)
	*($4 + [72]) = $1
	*($4 + [64]) = $0
	*($4 + [80]) = $2
	*($4 + [96]) = (int_64)150
	*($4 + [104]) = (int_64)40
	*($4 + [112]) = (int_64)50
	*($4 + [244]) = [12]
	*($4 + [240]) = [9958]
	*($4 + [56]) = *($4 + [240])
	*($4 + [120]) = *(CALL $16(($4 + [280]), ($4 + [56])))
	*($4 + [244]) = [12]
	*($4 + [240]) = [9970]
	*($4 + [48]) = *($4 + [240])
	$0 = *(CALL $16(($4 + [280]), ($4 + [48])))
	*($4 + [136]) = (int_64)10000
	*($4 + [128]) = $0
	*($4 + [144]) = (int_64)50
	*($4 + [152]) = (int_64)86400
	*(($11 = (($4 + [200]) + [32]))) = *($3)
	*(($3 = (($4 + [200]) + [24]))) = *($8)
	*(($8 = (($4 + [200]) + [16]))) = *($9)
	*(($9 = (($4 + [200]) + [8]))) = *($10)
	*($4 + [200]) = *($4 + [160])
	*((($4 + [240]) + [32])) = *($11)
	*((($4 + [240]) + [24])) = *($3)
	*((($4 + [240]) + [16])) = *($8)
	*((($4 + [240]) + [8])) = *($9)
	*($4 + [240]) = *($4 + [200])
	$3 = (($4 + [64]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	*(($5 = (($4 + [280]) + [32]))) = *((($4 + [240]) + [32]))
	$0 = *((($4 + [240]) + [24]))
	*((($4 + [280]) + [24])) = $0
	$1 = *((($4 + [240]) + [16]))
	*((($4 + [280]) + [16])) = $1
	$12 = *((($4 + [240]) + [8]))
	*((($4 + [280]) + [8])) = $12
	*((($4 + [8]) + [8])) = $12
	*((($4 + [8]) + [16])) = $1
	*((($4 + [8]) + [24])) = $0
	*((($4 + [8]) + [32])) = *($5)
	$0 = *($4 + [240])
	*($4 + [8]) = $0
	*($4 + [280]) = $0
	CALL void $3((int_32 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $119($2)
	
.LABEL $label$5
	$global$0 = ($4 + [320])
	return [1]
}

int_32 .FUNC $42 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [848])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $116($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [288]) = (int_64)0
	CALL memset((($4 + [288]) | [12]), [0], [68])
	*(($3 = ($4 + [392]))) = (int_64)0
	*(($8 = ($4 + [384]))) = (int_64)0
	*(($9 = ($4 + [376]))) = (int_64)0
	*(($10 = ($4 + [424]))) = (int_64)0
	*(($11 = ($4 + [416]))) = (int_64)0
	*(($12 = ($4 + [408]))) = (int_64)0
	*($4 + [368]) = (int_64)0
	*($4 + [296]) = [0]
	*($4 + [400]) = (int_64)0
	*($4 + [276]) = $2
	*($4 + [272]) = $2
	*($4 + [280]) = ($2 + $7)
	*($4 + [776]) = ($4 + [272])
	*($4 + [176]) = ($4 + [288])
	CALL $49(($4 + [176]), ($4 + [776]))
	*(($13 = (($4 + [160]) + [8]))) = *($4 + [280])
	*($4 + [160]) = *($4 + [272])
	*(($14 = (($4 + [568]) + [8]))) = *($13)
	*($4 + [568]) = *($4 + [160])
	$13 = *($14)
	*((($4 + [776]) + [8])) = $13
	*((($4 + [176]) + [24])) = $13
	*($4 + [176]) = $0
	*($4 + [184]) = $1
	$0 = *($4 + [568])
	*($4 + [192]) = $0
	*($4 + [776]) = $0
	*($4 + [216]) = (int_64)40
	*($4 + [208]) = (int_64)150
	*($4 + [224]) = (int_64)50
	*($4 + [500]) = [12]
	*($4 + [496]) = [9958]
	*($4 + [152]) = *($4 + [496])
	*($4 + [232]) = *(CALL $16(($4 + [776]), ($4 + [152])))
	*($4 + [500]) = [12]
	*($4 + [496]) = [9970]
	*($4 + [144]) = *($4 + [496])
	$0 = *(CALL $16(($4 + [776]), ($4 + [144])))
	*($4 + [248]) = (int_64)10000
	*($4 + [240]) = $0
	*($4 + [256]) = (int_64)50
	*($4 + [264]) = (int_64)86400
	$0 = *($4 + [288])
	CALL memcpy(($4 + [496]), (($4 + [288]) | [8]), [72])
	*(($13 = (($4 + [464]) + [24]))) = *($3)
	*(($3 = (($4 + [464]) + [16]))) = *($8)
	*(($8 = (($4 + [432]) + [16]))) = *($11)
	*(($11 = (($4 + [432]) + [24]))) = *($10)
	*($4 + [472]) = *($9)
	*($4 + [464]) = *($4 + [368])
	*($4 + [432]) = *($4 + [400])
	*($4 + [440]) = *($12)
	*((($4 + [672]) + [24])) = *($11)
	*((($4 + [672]) + [16])) = *($8)
	*((($4 + [640]) + [16])) = *($3)
	*((($4 + [640]) + [24])) = *($13)
	*($4 + [680]) = *($4 + [440])
	*($4 + [672]) = *($4 + [432])
	*($4 + [640]) = *($4 + [464])
	*($4 + [648]) = *($4 + [472])
	CALL memcpy(($4 + [568]), ($4 + [496]), [72])
	$3 = (($4 + [176]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL memcpy(($4 + [776]), ($4 + [568]), [72])
	*(($5 = (($4 + [736]) + [24]))) = *((($4 + [640]) + [24]))
	*(($8 = (($4 + [736]) + [16]))) = *((($4 + [640]) + [16]))
	*(($9 = (($4 + [704]) + [16]))) = *((($4 + [672]) + [16]))
	*(($10 = (($4 + [704]) + [24]))) = *((($4 + [672]) + [24]))
	*($4 + [744]) = *($4 + [648])
	*($4 + [736]) = *($4 + [640])
	*($4 + [704]) = *($4 + [672])
	*($4 + [712]) = *($4 + [680])
	CALL memcpy(($4 + [72]), ($4 + [776]), [72])
	*((($4 + [32]) + [24])) = *($5)
	*((($4 + [32]) + [16])) = *($8)
	*(($4 + [16])) = *($9)
	*(($4 + [24])) = *($10)
	*($4 + [40]) = *($4 + [744])
	*($4 + [32]) = *($4 + [736])
	*($4) = *($4 + [704])
	*($4 + [8]) = *($4 + [712])
	CALL void $3((int_32 $0), (int_64 ($4 + [72])), (int_32 ($4 + [32])), (int_32 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $119($2)
	
.LABEL $label$5
	$global$0 = ($4 + [848])
	return [1]
}

int_32 .FUNC $41 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $116($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [200]))) = (int_64)0
	*(($8 = ($4 + [216]))) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [172]) = $2
	*($4 + [168]) = $2
	*($4 + [176]) = ($2 + $7)
	*($4 + [304]) = ($4 + [168])
	*($4 + [72]) = ($4 + [184])
	CALL $48(($4 + [72]), ($4 + [304]))
	*(($9 = (($4 + [56]) + [8]))) = *($4 + [176])
	*($4 + [56]) = *($4 + [168])
	*(($10 = (($4 + [288]) + [8]))) = *($9)
	*($4 + [288]) = *($4 + [56])
	$9 = *($10)
	*((($4 + [304]) + [8])) = $9
	*(($4 + [96])) = $9
	*($4 + [72]) = $0
	*($4 + [80]) = $1
	$0 = *($4 + [288])
	*($4 + [88]) = $0
	*($4 + [304]) = $0
	*($4 + [112]) = (int_64)40
	*($4 + [104]) = (int_64)150
	*($4 + [120]) = (int_64)50
	*($4 + [276]) = [12]
	*($4 + [272]) = [9958]
	*($4 + [48]) = *($4 + [272])
	*($4 + [128]) = *(CALL $16(($4 + [304]), ($4 + [48])))
	*($4 + [276]) = [12]
	*($4 + [272]) = [9970]
	*($4 + [40]) = *($4 + [272])
	$0 = *(CALL $16(($4 + [304]), ($4 + [40])))
	*($4 + [144]) = (int_64)10000
	*($4 + [136]) = $0
	*($4 + [152]) = (int_64)50
	*($4 + [160]) = (int_64)86400
	*(($9 = (($4 + [240]) + [8]))) = *($3)
	*(($3 = (($4 + [224]) + [8]))) = *($8)
	*($4 + [240]) = *($4 + [192])
	*($4 + [224]) = *($4 + [208])
	$0 = *($4 + [184])
	*((($4 + [272]) + [8])) = *($3)
	*((($4 + [256]) + [8])) = *($9)
	*($4 + [272]) = *($4 + [224])
	*($4 + [256]) = *($4 + [240])
	$3 = (($4 + [72]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [256]) + [8]))
	*((($4 + [304]) + [8])) = $1
	$11 = *((($4 + [272]) + [8]))
	*((($4 + [288]) + [8])) = $11
	*((($4 + [24]) + [8])) = $1
	*((($4 + [8]) + [8])) = $11
	$1 = *($4 + [256])
	*($4 + [304]) = $1
	$11 = *($4 + [272])
	*($4 + [288]) = $11
	*($4 + [24]) = $1
	*($4 + [8]) = $11
	CALL void $3((int_32 $0), (int_64 ($4 + [24])), (int_32 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $119($2)
	
.LABEL $label$6
	$global$0 = ($4 + [320])
	return [1]
}

int_32 .FUNC $40 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [240])
	$global$0 = $3
	*(($4 = $3) + [192]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $116($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [144]) + [24])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [132]) = $2
	*($4 + [128]) = $2
	*($4 + [136]) = ($2 + $5)
	*($4 + [216]) = ($4 + [128])
	*($4 + [32]) = ($4 + [144])
	CALL $46(($4 + [32]), ($4 + [216]))
	*(($3 = (($4 + [16]) + [8]))) = *($4 + [136])
	*($4 + [16]) = *($4 + [128])
	*(($6 = (($4 + [200]) + [8]))) = *($3)
	*($4 + [200]) = *($4 + [16])
	$3 = *($6)
	*((($4 + [216]) + [8])) = $3
	*((($4 + [32]) + [24])) = $3
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$0 = *($4 + [200])
	*($4 + [48]) = $0
	*($4 + [216]) = $0
	*($4 + [72]) = (int_64)40
	*($4 + [64]) = (int_64)150
	*($4 + [80]) = (int_64)50
	*($4 + [236]) = [12]
	*($4 + [232]) = [9958]
	*($4 + [8]) = *($4 + [232])
	*($4 + [88]) = *(CALL $16(($4 + [216]), ($4 + [8])))
	*($4 + [236]) = [12]
	*($4 + [232]) = [9970]
	*($4) = *($4 + [232])
	$0 = *(CALL $16(($4 + [216]), $4))
	*($4 + [104]) = (int_64)10000
	*($4 + [96]) = $0
	*($4 + [112]) = (int_64)50
	*($4 + [120]) = (int_64)86400
	*($4 + [220]) = ($4 + [192])
	*($4 + [216]) = ($4 + [32])
	CALL $47(($4 + [216]), ($4 + [144]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [176]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $119($2)
	$2 = [1]
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [184])))
	$global$0 = ($4 + [240])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [240])
	return $2
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $80(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $80(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9210])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9210])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9210])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $50(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $45 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [480])
	$global$0 = $3
	*(($4 = $3) + [432]) = *($2)
	$5 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$5 = CALL $116($2)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$2
	CALL read_action_data($5, $2)
	
.LABEL $label$1
	*((($4 + [144]) + [24])) = (int_64)0
	*(($4 + [176])) = (int_64)0
	*(($4 + [192])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [248])) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [200]) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [216]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [240]) = (int_64)0
	CALL memset(($4 + [260]), [0], [68])
	*(($4 + [360])) = (int_64)0
	*(($4 + [352])) = (int_64)0
	*(($4 + [344])) = (int_64)0
	*(($4 + [392])) = (int_64)0
	*(($4 + [384])) = (int_64)0
	*(($4 + [376])) = (int_64)0
	*(($4 + [416])) = [0]
	*($4 + [336]) = (int_64)0
	*($4 + [256]) = [0]
	*($4 + [368]) = (int_64)0
	*($4 + [400]) = (int_64)0
	*($4 + [408]) = (int_64)0
	*($4 + [132]) = $5
	*($4 + [128]) = $5
	*($4 + [136]) = ($5 + $2)
	*($4 + [456]) = ($4 + [128])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [9210])
	CALL memcpy(($4 + [144]), *($4 + [132]), [8])
	$3 = (*($4 + [132]) + [8])
	*($4 + [132]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [136]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy((($4 + [144]) | [8]), *($4 + [132]), [8])
	*($4 + [132]) = (*($4 + [132]) + [8])
	CALL $50(($4 + [128]), ($4 + [160]))
	CALL $50(($4 + [128]), ($4 + [172]))
	*($4 + [32]) = ($4 + [144])
	CALL $51(($4 + [32]), ($4 + [456]))
	*(($3 = (($4 + [16]) + [8]))) = *($4 + [136])
	*($4 + [16]) = *($4 + [128])
	*(($6 = (($4 + [440]) + [8]))) = *($3)
	*($4 + [440]) = *($4 + [16])
	$3 = *($6)
	*((($4 + [456]) + [8])) = $3
	*((($4 + [32]) + [24])) = $3
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$0 = *($4 + [440])
	*($4 + [48]) = $0
	*($4 + [456]) = $0
	*($4 + [72]) = (int_64)40
	*($4 + [64]) = (int_64)150
	*($4 + [80]) = (int_64)50
	*($4 + [476]) = [12]
	*($4 + [472]) = [9958]
	*($4 + [8]) = *($4 + [472])
	*($4 + [88]) = *(CALL $16(($4 + [456]), ($4 + [8])))
	*($4 + [476]) = [12]
	*($4 + [472]) = [9970]
	*($4) = *($4 + [472])
	$0 = *(CALL $16(($4 + [456]), $4))
	*($4 + [104]) = (int_64)10000
	*($4 + [96]) = $0
	*($4 + [112]) = (int_64)50
	*($4 + [120]) = (int_64)86400
	*($4 + [460]) = ($4 + [432])
	*($4 + [456]) = ($4 + [32])
	CALL $52(($4 + [456]), ($4 + [144]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$12 }
	$2 = [1]
	if ( (*($4 + [408]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $119($5)
	$2 = [1]
	if ( ((*($4 + [408]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($4 + [416])))
	if ( ((*($4 + [216]) & $2) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( (*($4 + [216]) & $2) ){ goto $label$8 }
	
.LABEL $label$9
	$2 = [1]
	if ( (*($4 + [172]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [224])))
	$2 = [1]
	if ( ((*($4 + [172]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [180])))
	if ( (*($4 + [160]) & $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($4 + [160]) & $2) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [168])))
	
.LABEL $label$4
	$global$0 = ($4 + [480])
	return [1]
}

int_32 .FUNC $44 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $116($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9210])
	CALL memcpy(($4 + [16]), $2, [1])
	$8 = *($4 + [16])
	*(($4 + [36])) = ($2 + [1])
	*(($4 + [40])) = ($2 + $7)
	*($4 + [24]) = $1
	*($4 + [16]) = $0
	*($4 + [32]) = $2
	*($4 + [48]) = (int_64)150
	*($4 + [56]) = (int_64)40
	*($4 + [64]) = (int_64)50
	*($4 + [116]) = [12]
	*($4 + [112]) = [9958]
	*($4 + [8]) = *($4 + [112])
	*($4 + [72]) = *(CALL $16(($4 + [120]), ($4 + [8])))
	*($4 + [116]) = [12]
	*($4 + [112]) = [9970]
	*($4) = *($4 + [112])
	$0 = *(CALL $16(($4 + [120]), $4))
	*($4 + [88]) = (int_64)10000
	*($4 + [80]) = $0
	*($4 + [96]) = (int_64)50
	*($4 + [104]) = (int_64)86400
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $119($2)
	
.LABEL $label$5
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [112])
	$global$0 = $2
	CALL require_auth(*($0))
	*((($2 + [8]) + [32])) = [0]
	*($2 + [24]) = (int_64)-1
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	*($2 + [32]) = (int_64)0
	$4 = [0]
	$5 = CALL db_lowerbound_i64($3, $3, (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $2(($2 + [8]), $5)
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [8192])
	$6 = *($0)
	CALL eosio_assert($5, [9420])
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)($2 + [8])), [9455])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$3()), [9501])
	*($4 + [8 align=1]) = *($1)
	*(($4 + [16])) = *(($1 + [8]))
	*(($4 + [24])) = *(($1 + [16]))
	*(($4 + [32])) = *(($1 + [24]))
	*(($4 + [40])) = *(($1 + [32]))
	$3 = *($4)
	CALL eosio_assert([1], [9552])
	CALL eosio_assert([1], [8869])
	CALL memcpy(($2 + [48]), $4, [8])
	CALL eosio_assert([1], [8869])
	CALL memcpy((($2 + [48]) | [8]), ($4 + [8]), [34])
	*($2 + [111]) = *($4 + [42])
	CALL eosio_assert([1], [8869])
	CALL memcpy(($2 + [90]), ($2 + [111]), [1])
	CALL eosio_assert([1], [8869])
	CALL memcpy(($2 + [91]), ($4 + [48]), [8])
	CALL db_update_i64(*($4 + [60]), $6, ($2 + [48]), [51])
	$4 = (($2 + [8]) + [16])
	if ( (uint_64)($3 <= *($4)) ){ goto $label$2 }
	*($4) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$0 = *($2 + [32])
	if ( ($0 == 0) ){ goto $label$3 }
	$5 = ($2 + [36])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	CALL _ZdlPv($1)
	
.LABEL $label$7
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$6 }
	$4 = *(($2 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$4 = $0
	
.LABEL $label$4
	*($5) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$global$0 = ($2 + [112])
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL require_auth(*($0))
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	*($4 + [16]) = $5
	$6 = [0]
	$7 = CALL db_find_i64($5, $5, (int_64)-4060986516896743424, (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$7) < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $10(($4 + [8]), $7)
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)($4 + [8])), [9611])
	
.LABEL $label$1
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [8226])
	$8 = *($0)
	CALL eosio_assert($7, [9420])
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)($4 + [8])), [9455])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$3()), [9501])
	$0 = ($6 + [16])
	$5 = *($0)
	*($0) = *(($2 + [8]))
	*($6) = $1
	*($6 + [8]) = *($2)
	*($6 + [24]) = *($3)
	*(($6 + [32])) = *(($3 + [8]))
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($0) >> (uint_64)(int_64)8)), [9552])
	*($4 + [136]) = (($4 + [48]) + [80])
	*($4 + [132]) = ($4 + [48])
	*($4 + [128]) = ($4 + [48])
	CALL $11(($4 + [128]), $6)
	CALL db_update_i64(*($6 + [84]), $8, ($4 + [48]), [80])
	$6 = (($4 + [8]) + [16])
	if ( (uint_64)($5 <= *($6)) ){ goto $label$2 }
	*($6) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$2
	$0 = *($4 + [32])
	if ( ($0 == 0) ){ goto $label$3 }
	$3 = ($4 + [36])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$5 }
	
.LOOP $label$6:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$6 }
	$6 = *(($4 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$6 = $0
	
.LABEL $label$4
	*($3) = $0
	CALL _ZdlPv($6)
	
.LABEL $label$3
	$global$0 = ($4 + [144])
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $97($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [112])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	*($2 + [32]) = (int_64)0
	$4 = [0]
	$5 = CALL db_lowerbound_i64($3, $3, (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $2(($2 + [8]), $5)
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [8192])
	$6 = *($0)
	CALL eosio_assert($5, [9420])
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)($2 + [8])), [9455])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$3()), [9501])
	*($4 + [42]) = $1
	$3 = *($4)
	CALL eosio_assert([1], [9552])
	CALL eosio_assert([1], [8869])
	CALL memcpy(($2 + [48]), $4, [8])
	CALL eosio_assert([1], [8869])
	CALL memcpy((($2 + [48]) | [8]), ($4 + [8]), [34])
	*($2 + [111]) = *($4 + [42])
	CALL eosio_assert([1], [8869])
	CALL memcpy(($2 + [90]), ($2 + [111]), [1])
	CALL eosio_assert([1], [8869])
	CALL memcpy(($2 + [91]), ($4 + [48]), [8])
	CALL db_update_i64(*($4 + [60]), $6, ($2 + [48]), [51])
	$4 = ($2 + [24])
	if ( (uint_64)($3 <= *($4)) ){ goto $label$2 }
	*($4) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$1 = *($2 + [32])
	if ( ($1 == 0) ){ goto $label$3 }
	$5 = ($2 + [36])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$6 }
	$4 = *(($2 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$4 = $1
	
.LABEL $label$4
	*($5) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$global$0 = ($2 + [112])
}

void .FUNC $4 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $97($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	*(($4 = $2) + [28]) = [11]
	*($4 + [24]) = [9157]
	*($4) = *($4 + [24])
	*($1) = *(CALL $16(($4 + [8]), $4))
	$5 = CALL $113([8405])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8757])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [8404]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8802])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert([1], [8688])
	$8 = ((int_64)$6 & (int_64)72057594037927935)
	$9 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $6
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$8 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [8737])
	*(($1 + [16])) = $9
	*($1 + [8]) = (int_64)1000
	$5 = CALL $113([8405])
	if ( ($5 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [8757])
	goto $label$14 
	
.LABEL $label$15
	if ( ($5 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$6 = (int_64)0
	
.LOOP $label$16:
	$7 = *(($5 + [8404]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [8802])
	
.LABEL $label$17
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$16 }
	goto $label$12 
	
.LABEL $label$13
	$6 = (int_64)0
	
.LABEL $label$12
	CALL eosio_assert([1], [8688])
	$8 = ((int_64)$6 & (int_64)72057594037927935)
	$9 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	$5 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$8 = $6
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$8 = $6
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$22 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$7 = [0]
	
.LABEL $label$18
	CALL eosio_assert($7, [8737])
	*(($1 + [32])) = $9
	*($1 + [24]) = (int_64)1000000
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$5 = CALL $113([8405])
	if ( ($5 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [8757])
	goto $label$25 
	
.LABEL $label$26
	if ( ($5 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$6 = (int_64)0
	
.LOOP $label$27:
	$7 = *(($5 + [8404]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [8802])
	
.LABEL $label$28
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$27 }
	goto $label$23 
	
.LABEL $label$24
	$6 = (int_64)0
	
.LABEL $label$23
	CALL eosio_assert([1], [8688])
	$8 = ((int_64)$6 & (int_64)72057594037927935)
	$9 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	$5 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$8 = $6
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$8 = $6
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$33 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$7 = [0]
	
.LABEL $label$29
	CALL eosio_assert($7, [8737])
	*(($1 + [56])) = $9
	$6 = (int_64)0
	*($1 + [48]) = (int_64)0
	$5 = CALL $113([8405])
	if ( ($5 <= [8]) ){ goto $label$36 }
	CALL eosio_assert([0], [8757])
	goto $label$35 
	
.LABEL $label$36
	if ( ($5 == 0) ){ goto $label$34 }
	
.LABEL $label$35
	$6 = (int_64)0
	
.LOOP $label$37:
	$7 = *(($5 + [8404]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$38 }
	CALL eosio_assert([0], [8802])
	
.LABEL $label$38
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$37 }
	
.LABEL $label$34
	CALL eosio_assert([1], [8688])
	$8 = ((int_64)$6 & (int_64)72057594037927935)
	$9 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	$5 = [0]
	
.LOOP $label$41:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$40 }
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$42 }
	$8 = $6
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$42
	$8 = $6
	
.LOOP $label$43:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$40 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$43 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$40
	$7 = [0]
	
.LABEL $label$39
	CALL eosio_assert($7, [8737])
	*(($1 + [72])) = $9
	*($1 + [64]) = (int_64)0
	$7 = $2
	$5 = ($7 + [-80])
	$global$0 = $5
	*($4 + [12]) = $5
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	CALL $11(($4 + [8]), $1)
	$8 = (uint_64)*(($1 + [16])) >> (uint_64)(int_64)8
	*($1 + [84]) = CALL db_store_i64(*($3 + [8]), (int_64)-4060986516896743424, *(*($0 + [8])), $8), $5, [80])
	if ( (uint_64)($8 <= *($3 + [16])) ){ goto $label$44 }
	*(($3 + [16])) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$44
	$global$0 = ($4 + [32])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9187])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $116($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [56]) = $0
	CALL $59(($3 + [32]), $5)
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $4(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $119($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5 + [8])
	$7 = *($5)
	$8 = *($7 + [16])
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = CALL db_lowerbound_i64(*($7), *($7 + [8]), (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	CALL $2($7, $9)
	*($3 + [4]) = [0]
	*($3) = $7
	$8 = *(*(CALL $60($3) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($7 + [16])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [9266])
	*($1) = *(($7 + [16]))
	$7 = *($5 + [4])
	*($1 + [8 align=1]) = *($7)
	*(($1 + [40])) = *(($7 + [32]))
	*(($1 + [32])) = *(($7 + [24]))
	*(($1 + [24])) = *(($7 + [16]))
	*(($1 + [16])) = *(($7 + [8]))
	*($1 + [42]) = [0]
	*($1 + [48]) = *($6 + [72])
	$7 = $2
	$2 = ($7 + [-64])
	$global$0 = $2
	CALL eosio_assert([1], [8869])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8869])
	CALL memcpy(($7 + [-56]), ($1 + [8]), [34])
	*($3 + [15]) = *($1 + [42])
	CALL eosio_assert([1], [8869])
	CALL memcpy(($7 + [-22]), ($3 + [15]), [1])
	CALL eosio_assert([1], [8869])
	CALL memcpy(($7 + [-21]), ($1 + [48]), [8])
	$8 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)7235159551873908736, *(*($0 + [8])), $8, $2, [51])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [128])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	*(($4 = ($2 + [80]))) = [0]
	*($2 + [64]) = (int_64)-1
	$5 = *($0)
	*($2 + [48]) = $5
	*($2 + [56]) = $5
	*($2 + [72]) = (int_64)0
	$6 = CALL db_lowerbound_i64($5, $5, (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $2(($2 + [48]), $6)
	goto $label$1 
	
.LABEL $label$2
	$3 = [1]
	
.LABEL $label$1
	CALL eosio_assert($3, [8192])
	$5 = *($0)
	*($2 + [100]) = $1
	*($2 + [104]) = $0
	*($2 + [96]) = ($2 + [48])
	*($2 + [120]) = $5
	CALL eosio_assert(((int_64)*($2 + [48]) == (int_64)CALL $fimport$3()), [9215])
	*($2 + [12]) = ($2 + [96])
	*($2 + [8]) = ($2 + [48])
	*($2 + [16]) = ($2 + [120])
	*(($3 = CALL _Znwj([72])) + [56]) = ($2 + [48])
	CALL $3(($2 + [8]), $3)
	*($2 + [112]) = $3
	$5 = *($3)
	*($2 + [8]) = $5
	$6 = *($3 + [60])
	*($2 + [92]) = $6
	$7 = ($2 + [76])
	$1 = *($7)
	if ( ((uint_32)$1 >= (uint_32)*($4)) ){ goto $label$5 }
	*($1 + [8]) = $5
	*($1 + [16]) = $6
	*($2 + [112]) = [0]
	*($1) = $3
	*($7) = ($1 + [24])
	$3 = *($2 + [112])
	$1 = [0]
	*($2 + [112]) = [0]
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $4(($2 + [72]), ($2 + [112]), ($2 + [8]), ($2 + [92]))
	$3 = *($2 + [112])
	$1 = [0]
	*($2 + [112]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	*(($4 = ($2 + [40]))) = $1
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$5 = *($0)
	*($2 + [8]) = $5
	*($2 + [16]) = $5
	*($2 + [120]) = $5
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$3()), [9215])
	*($2 + [100]) = $2
	*($2 + [96]) = ($2 + [8])
	*($2 + [104]) = ($2 + [120])
	*(($0 = CALL _Znwj([96])) + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [56]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [72]) = (int_64)0
	*($0 + [80]) = ($2 + [8])
	CALL $5(($2 + [96]), $0)
	*($2 + [112]) = $0
	$5 = (uint_64)*($0 + [16]) >> (uint_64)(int_64)8
	*($2 + [96]) = $5)
	$1 = *($0 + [84])
	*($2 + [92]) = $1
	$6 = ($2 + [36])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*($4)) ){ goto $label$8 }
	*($3 + [8]) = $5
	*($3 + [16]) = $1
	*($2 + [112]) = [0]
	*($3) = $0
	*($6) = ($3 + [24])
	$0 = *($2 + [112])
	*($2 + [112]) = [0]
	if ( $0 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $6(($2 + [32]), ($2 + [112]), ($2 + [96]), ($2 + [92]))
	$0 = *($2 + [112])
	*($2 + [112]) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$1 = *($2 + [32])
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = ($2 + [36])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$13 }
	CALL _ZdlPv($3)
	
.LABEL $label$13
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($2 + [32]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $1
	
.LABEL $label$10
	*($4) = $1
	CALL _ZdlPv($0)
	
.LABEL $label$9
	$1 = *($2 + [72])
	if ( ($1 == 0) ){ goto $label$14 }
	$4 = ($2 + [76])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$16 }
	
.LOOP $label$17:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$18 }
	CALL _ZdlPv($3)
	
.LABEL $label$18
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$17 }
	$0 = *(($2 + [72]))
	goto $label$15 
	
.LABEL $label$16
	$0 = $1
	
.LABEL $label$15
	*($4) = $1
	CALL _ZdlPv($0)
	
.LABEL $label$14
	$global$0 = ($2 + [128])
}

void .FUNC $14 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	$5 = ($global$0 - [800])
	$global$0 = $5
	CALL require_auth(*($0))
	$6 = [0]
	*((($5 + [728]) + [32])) = [0]
	*($5 + [744]) = (int_64)-1
	$7 = *($0)
	*($5 + [728]) = $7
	*($5 + [736]) = $7
	*($5 + [752]) = (int_64)0
	$8 = [0]
	$9 = CALL db_lowerbound_i64($7, $7, (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $2(($5 + [728]), $9)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8330])
	CALL eosio_assert(((int_32)*($8 + [42]) ^ (int_32)[1]), [8354])
	*((($5 + [688]) + [32])) = [0]
	*($5 + [704]) = (int_64)-1
	*($5 + [712]) = (int_64)0
	$7 = *($0)
	*($5 + [688]) = $7
	*($5 + [696]) = $7
	$9 = CALL db_find_i64($7, $7, (int_64)3617214760481193984, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $15(($5 + [688]), $9)
	CALL eosio_assert(((int_32)*($6 + [88]) == (int_32)($5 + [688])), [9611])
	
.LABEL $label$2
	$10 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($10, [8366])
	$11 = ($5 + [678])
	$7 = *($2)
	$12 = ($5 + [608])
	
.LOOP $label$3:
	$9 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$13 = ((int_64)$7) != (int_64)0
	*($5 + [80]) = (($13) << [7]) | ($9 & [127]))
	$9 = $12
	CALL eosio_assert(((int_32)($11 - $9) > (int_32)[0]), [8869])
	CALL memcpy($9, ($5 + [80]), [1])
	$12 = ($9 + [1])
	if ( $13 ){ goto $label$3 }
	CALL eosio_assert(((int_32)($11 - $12) > (int_32)[64]), [8869])
	CALL memcpy($12, ($2 + [4]), [65])
	CALL assert_recover_key($3, ($5 + [608]), (($9 + [66]) - ($5 + [608])), ($8 + [8]), [34])
	*((($5 + [568]) + [32])) = [0]
	*($5 + [584]) = (int_64)-1
	$14 = (int_64)0
	*($5 + [592]) = (int_64)0
	$7 = *($0)
	*($5 + [568]) = $7
	*($5 + [576]) = $7
	$11 = [0]
	$9 = CALL db_find_i64($7, $7, (int_64)-4060986516896743424, (uint_64)*(($6 + [32])) >> (uint_64)(int_64)8)
	if ( ((int_32)$9) < (int_32)[0]) ){ goto $label$4 }
	$11 = CALL $10(($5 + [568]), $9)
	CALL eosio_assert(((int_32)*($11 + [80]) == (int_32)($5 + [568])), [9611])
	
.LABEL $label$4
	$8 = ($6 + [24])
	$15 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($15, [8384])
	$7 = ((int_64)((uint_64)((int_64)((int_64)((int_64)*($4 + [30]) << (int_64)8) | (int_64)((int_64)*($4 + [29]) << (int_64)16)) | (int_64)*($4 + [31])) % (uint_64)(int_64)100) + (int_64)1)
	*($5 + [560]) = $7
	$1 = *($6 + [48])
	if ( ((uint_64)$7 >= (uint_64)$1) ){ goto $label$5 }
	$14 = ((uint_64)((int_64)((uint_64)((int_64))((int_64)10000 - *($0 + [32])) * (int_64)100) / (uint_64)((int_64)$1 + (int_64)-1)) * (int_64)*($8)) / (uint_64)(int_64)10000)
	
.LABEL $label$5
	*($5 + [552]) = *(($6 + [32]))
	*($5 + [544]) = $14
	CALL eosio_assert([1], [8688])
	$7 = (uint_64)*($5 + [552]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $1
	$12 = [1]
	$13 = $9
	$9 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $1
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$12 = ((int_32)$9 < (int_32)[6])
	$13 = ($9 + [1])
	$9 = $13
	if ( $12 ){ goto $label$10 }
	$12 = [1]
	$9 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$12 = [0]
	
.LABEL $label$6
	CALL eosio_assert($12, [8737])
	$1 = (uint_64)*(($6 + [32])) >> (uint_64)(int_64)8)
	$9 = CALL $113([8405])
	if ( ($9 <= [8]) ){ goto $label$23 }
	CALL eosio_assert([0], [8757])
	goto $label$22 
	
.LABEL $label$23
	if ( ($9 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	$7 = (int_64)0
	
.LOOP $label$24:
	$12 = *(($9 + [8404]))
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$25 }
	CALL eosio_assert([0], [8802])
	
.LABEL $label$25
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$24 }
	if ( ((int_64)$1 != (int_64)$7) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$19 }
	
.LABEL $label$20
	$7 = *($0 + [40])
	$1 = *($8)
	$16 = *($0)
	*($5 + [396]) = [6]
	*($5 + [392]) = [8855]
	*($5 + [56]) = *($5 + [392])
	$17 = *(CALL $16(($5 + [80]), ($5 + [56])))
	$18 = *($11)
	*($5 + [392]) = [8861]
	*($5 + [396]) = [8]
	*($5 + [48]) = *($5 + [392])
	$19 = ((uint_64)((int_64)$7 * (int_64)$1) / (uint_64)(int_64)10000)
	$20 = *(CALL $16(($5 + [80]), ($5 + [48])))
	$9 = CALL $113([8405])
	if ( ($9 <= [8]) ){ goto $label$29 }
	CALL eosio_assert([0], [8757])
	goto $label$28 
	
.LABEL $label$29
	if ( ($9 == 0) ){ goto $label$27 }
	
.LABEL $label$28
	$1 = (int_64)0
	
.LOOP $label$30:
	$12 = *(($9 + [8404]))
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$31 }
	CALL eosio_assert([0], [8802])
	
.LABEL $label$31
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$30 }
	goto $label$26 
	
.LABEL $label$27
	$1 = (int_64)0
	
.LABEL $label$26
	CALL eosio_assert([1], [8688])
	$7 = ((int_64)$1 & (int_64)72057594037927935)
	$21 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	$9 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$1 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$7 = $1
	$12 = [1]
	$13 = $9
	$9 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$7 = $1
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$12 = ((int_32)$9 < (int_32)[6])
	$13 = ($9 + [1])
	$9 = $13
	if ( $12 ){ goto $label$36 }
	$12 = [1]
	$9 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$12 = [0]
	
.LABEL $label$32
	CALL eosio_assert($12, [8737])
	*(($5 + [384])) = [0]
	*($5 + [376]) = (int_64)0
	$9 = CALL $113([8409])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$39 }
	*($5 + [376]) = ($9 << [1])
	$12 = (($5 + [376]) | [1])
	if ( $9 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$13 = (($9 + [16]) & [-16])
	$12 = CALL _Znwj($13)
	*($5 + [376]) = ($13 | [1])
	*($5 + [384]) = $12
	*($5 + [380]) = $9
	
.LABEL $label$38
	CALL memcpy($12, [8409], $9)
	
.LABEL $label$37
	*(($12 + $9)) = [0]
	*((($5 + [80]) + [24])) = $21
	*(($12 = (($5 + [392]) + [24]))) = [0]
	$9 = ($5 + [384])
	*(($5 + [120])) = *($9)
	*($9) = [0]
	*($5 + [96]) = $19
	*($5 + [392]) = $18
	*($5 + [400]) = $20
	*($5 + [408]) = (int_64)0
	*($5 + [80]) = *($0)
	*($5 + [88]) = *($0 + [56])
	*($5 + [112]) = *($5 + [376])
	*($5 + [376]) = (int_64)0
	*(($9 = CALL _Znwj([16]))) = $16
	*($9 + [8]) = $17
	*((($5 + [392]) + [36])) = [0]
	$13 = ($9 + [16])
	*($12) = $13
	*(($5 + [412])) = $13
	*($5 + [408]) = $9
	*($5 + [420 align=4]) = (int_64)0
	$9 = *($5 + [112])
	$12 = ( *((($5 + [80]) + [36])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($12 + [32])
	$7 = (CASTING uint_64)(uint_32 $12)
	$12 = ($5 + [420])
	
.LOOP $label$40:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$40 }
	if ( ($9 == 0) ){ goto $label$42 }
	CALL $17($12, $9)
	$12 = *(($5 + [424]))
	$9 = *(($5 + [420]))
	goto $label$41 
	
.LABEL $label$42
	$12 = [0]
	$9 = [0]
	
.LABEL $label$41
	*($5 + [460]) = $9
	*($5 + [456]) = $9
	*($5 + [464]) = $12
	*($5 + [528]) = ($5 + [456])
	*($5 + [768]) = ($5 + [80])
	CALL $18(($5 + [768]), ($5 + [528]))
	CALL $19(($5 + [456]), ($5 + [392]))
	$9 = *($5 + [456])
	CALL send_inline($9, (*($5 + [460]) - $9))
	$9 = *($5 + [456])
	if ( ($9 == 0) ){ goto $label$43 }
	*($5 + [460]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$43
	$9 = *($5 + [420])
	if ( ($9 == 0) ){ goto $label$44 }
	*(($5 + [424])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$44
	$9 = *($5 + [408])
	if ( ($9 == 0) ){ goto $label$45 }
	*(($5 + [412])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$45
	if ( ((*(($5 + [112])) & [1]) == 0) ){ goto $label$46 }
	CALL _ZdlPv(*(($5 + [120])))
	
.LABEL $label$46
	if ( ((*($5 + [376]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($5 + [384])))
	
.LABEL $label$19
	$1 = *($0)
	CALL eosio_assert($15, [9420])
	CALL eosio_assert(((int_32)*($11 + [80]) == (int_32)($5 + [568])), [9455])
	CALL eosio_assert(((int_64)*($5 + [568]) == (int_64)CALL $fimport$3()), [9501])
	$9 = ($11 + [16])
	$7 = *($9)
	$12 = ($6 + [32])
	CALL eosio_assert(((int_64)*($12) == (int_64)*(($11 + [56]))), [9666])
	$16 = ((int_64)*($11 + [48]) + (int_64)*($6 + [24]))
	*($11 + [48]) = $16
	CALL eosio_assert(((int_64)$16 > (int_64)-4611686018427387904), [9709])
	CALL eosio_assert(((int_64)*($11 + [48]) < (int_64)4611686018427387904), [9728])
	CALL eosio_assert(((int_64)*(($5 + [552])) == (int_64)*(($11 + [72]))), [9666])
	$16 = ((int_64)*($11 + [64]) + (int_64)*($5 + [544]))
	*($11 + [64]) = $16
	CALL eosio_assert(((int_64)$16 > (int_64)-4611686018427387904), [9709])
	CALL eosio_assert(((int_64)*($11 + [64]) < (int_64)4611686018427387904), [9728])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$7) == (int_64)(uint_64)*($9) >> (uint_64)(int_64)8)), [9552])
	*($5 + [400]) = (($5 + [80]) + [80])
	*($5 + [396]) = ($5 + [80])
	*($5 + [392]) = ($5 + [80])
	CALL $11(($5 + [392]), $11)
	CALL db_update_i64(*($11 + [84]), $1, ($5 + [80]), [80])
	$9 = (($5 + [568]) + [16])
	if ( (uint_64)($7 <= *($9)) ){ goto $label$47 }
	*($9) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$47
	CALL eosio_assert((uint_64)($14 <= CALL $20($0, (uint_64)*($12) >> (uint_64)(int_64)8))), [8440])
	if ( (int_64)($14 == 0) ){ goto $label$11 }
	$7 = *($0)
	*($5 + [396]) = [6]
	*($5 + [392]) = [8855]
	*($5 + [40]) = *($5 + [392])
	$1 = *(CALL $16(($5 + [80]), ($5 + [40])))
	$14 = *($11)
	*($5 + [392]) = [8861]
	*($5 + [396]) = [8]
	*($5 + [32]) = *($5 + [392])
	$16 = *(CALL $16(($5 + [80]), ($5 + [32])))
	*((($5 + [768]) + [8])) = [0]
	*($5 + [768]) = (int_64)0
	$9 = CALL $113([8484])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$49 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$52 }
	*($5 + [768]) = ($9 << [1])
	$12 = (($5 + [768]) | [1])
	if ( $9 ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	$13 = (($9 + [16]) & [-16])
	$12 = CALL _Znwj($13)
	*($5 + [768]) = ($13 | [1])
	*($5 + [776]) = $12
	*($5 + [772]) = $9
	
.LABEL $label$51
	CALL memcpy($12, [8484], $9)
	
.LABEL $label$50
	*(($12 + $9)) = [0]
	CALL $93(($5 + [528]), *($6))
	$9 = *($5 + [528])
	$12 = ($9 & [1])
	$9 = CALL $88(($5 + [768]), ( *($5 + [536]) ? (($5 + [528]) | [1]) : $12 ), ( *($5 + [532]) ? uint_32($9 >> [1]) : $12 ))
	$12 = ($9 + [8])
	*((($5 + [376]) + [8])) = *($12)
	*($5 + [376]) = *($9)
	*($9) = (int_64)0
	*($12) = [0]
	*((($5 + [512]) + [8])) = [0]
	*($5 + [512]) = (int_64)0
	$9 = CALL $113([8493])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$48 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$55 }
	*($5 + [512]) = ($9 << [1])
	$13 = (($5 + [512]) | [1])
	$12 = $13
	if ( $9 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	$13 = (($9 + [16]) & [-16])
	$12 = CALL _Znwj($13)
	*($5 + [512]) = ($13 | [1])
	*($5 + [520]) = $12
	*($5 + [516]) = $9
	$13 = (($5 + [512]) | [1])
	
.LABEL $label$54
	CALL memcpy($12, [8493], $9)
	
.LABEL $label$53
	*(($12 + $9)) = [0]
	$9 = *($5 + [512])
	$12 = ($9 & [1])
	$9 = CALL $88(($5 + [376]), ( *($5 + [520]) ? $13 : $12 ), ( *($5 + [516]) ? uint_32($9 >> [1]) : $12 ))
	$17 = *($9)
	$12 = *($9 + [8])
	*($9 + [4 align=4]) = (int_64)0
	*($9) = [0]
	$18 = *($6 + [8])
	*((($5 + [80]) + [24])) = *(($5 + [552]))
	*(($5 + [120])) = $12
	*($5 + [408]) = [0]
	*($5 + [392]) = $14
	*($5 + [96]) = *($5 + [544])
	*($5 + [112]) = $17
	*($5 + [400]) = $16
	*($5 + [80]) = *($0)
	*($5 + [88]) = $18
	*(($12 = ($5 + [412]))) = [0]
	*(($13 = (($5 + [392]) + [24]))) = [0]
	*(($9 = CALL _Znwj([16]))) = $7
	*($9 + [8]) = $1
	*((($5 + [392]) + [36])) = [0]
	$11 = ($9 + [16])
	*($13) = $11
	*($12) = $11
	*($5 + [408]) = $9
	*($5 + [420 align=4]) = (int_64)0
	$9 = *($5 + [112])
	$12 = ( *((($5 + [80]) + [36])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($12 + [32])
	$7 = (CASTING uint_64)(uint_32 $12)
	$12 = ($5 + [420])
	
.LOOP $label$56:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$56 }
	if ( ($9 == 0) ){ goto $label$58 }
	CALL $17($12, $9)
	$12 = *(($5 + [424]))
	$9 = *(($5 + [420]))
	goto $label$57 
	
.LABEL $label$58
	$12 = [0]
	$9 = [0]
	
.LABEL $label$57
	*($5 + [460]) = $9
	*($5 + [456]) = $9
	*($5 + [464]) = $12
	*($5 + [368]) = ($5 + [456])
	*($5 + [64]) = ($5 + [80])
	CALL $18(($5 + [64]), ($5 + [368]))
	CALL $19(($5 + [456]), ($5 + [392]))
	$9 = *($5 + [456])
	CALL send_inline($9, (*($5 + [460]) - $9))
	$9 = *($5 + [456])
	if ( ($9 == 0) ){ goto $label$59 }
	*($5 + [460]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$59
	$9 = *($5 + [420])
	if ( ($9 == 0) ){ goto $label$60 }
	*(($5 + [424])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$60
	$9 = *($5 + [408])
	if ( ($9 == 0) ){ goto $label$61 }
	*(($5 + [412])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$61
	if ( (*($5 + [112]) & [1]) ){ goto $label$63 }
	if ( (*($5 + [512]) & [1]) ){ goto $label$62 }
	goto $label$17 
	
.LABEL $label$63
	CALL _ZdlPv(*(($5 + [120])))
	if ( ((*($5 + [512]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$62
	CALL _ZdlPv(*(($5 + [520])))
	$9 = [1]
	if ( ((*($5 + [376]) & [1]) == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$49
	CALL $79(($5 + [768]))
	
.LABEL $label$48
	CALL $79(($5 + [512]))
	
.LABEL $label$18
	CALL $79(($5 + [376]))
	
.LABEL $label$17
	$9 = [1]
	if ( (*($5 + [376]) & [1]) ){ goto $label$15 }
	
.LABEL $label$16
	if ( (*($5 + [528]) & $9) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*($5 + [384]))
	if ( ((*($5 + [528]) & $9) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($5 + [536])))
	if ( (*($5 + [768]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((*($5 + [768]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*($5 + [776]))
	
.LABEL $label$11
	$1 = (uint_64)*(($6 + [32])) >> (uint_64)(int_64)8)
	$9 = CALL $113([8405])
	if ( ($9 <= [8]) ){ goto $label$68 }
	CALL eosio_assert([0], [8757])
	goto $label$67 
	
.LABEL $label$68
	if ( ($9 == 0) ){ goto $label$66 }
	
.LABEL $label$67
	$7 = (int_64)0
	
.LOOP $label$69:
	$12 = *(($9 + [8404]))
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$70 }
	CALL eosio_assert([0], [8802])
	
.LABEL $label$70
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$69 }
	if ( ((int_64)$1 != (int_64)$7) ){ goto $label$64 }
	goto $label$65 
	
.LABEL $label$66
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$64 }
	
.LABEL $label$65
	$1 = *($6 + [8])
	$14 = *(($8 + [8]))
	*((($5 + [496]) + [8])) = $14
	$16 = *($6 + [16])
	$7 = *($8)
	*((($5 + [16]) + [8])) = $14
	*($5 + [496]) = $7
	*($5 + [16]) = $7
	CALL $21($0, $1, $16, ($5 + [16]))
	
.LABEL $label$64
	*(($13 = ($5 + [488]))) = [0]
	*($5 + [472]) = (int_64)-1
	*($5 + [480]) = (int_64)0
	$7 = *($0)
	*($5 + [456]) = $7
	*($5 + [464]) = $7
	*($5 + [80]) = $6
	*($5 + [88]) = $3
	*($5 + [92]) = $2
	*($5 + [96]) = $4
	*($5 + [84]) = ($5 + [544])
	*($5 + [100]) = ($5 + [560])
	*($5 + [376]) = $7
	CALL eosio_assert(((int_64)$7 == (int_64)CALL $fimport$3()), [9215])
	*($5 + [396]) = ($5 + [80])
	*($5 + [392]) = ($5 + [456])
	*($5 + [400]) = ($5 + [376])
	*(($9 = CALL _Znwj([288])) + [16]) = (int_64)0
	*($9 + [8]) = (int_64)0
	*($9 + [24]) = (int_64)0
	*($9 + [32]) = (int_64)0
	*($9 + [56 align=4]) = (int_64)0
	*($9 + [64]) = [0]
	*($9 + [80]) = (int_64)0
	*($9 + [88]) = (int_64)0
	*($9 + [96 align=4]) = (int_64)0
	*($9 + [104]) = [0]
	*($9 + [144]) = [0]
	*($9 + [264]) = ($5 + [456])
	CALL $22(($5 + [392]), $9)
	*($5 + [768]) = $9
	$7 = *($9)
	*($5 + [392]) = $7
	$11 = *($9 + [268])
	*($5 + [528]) = $11
	$15 = ($5 + [484])
	$12 = *($15)
	if ( ((uint_32)$12 >= (uint_32)*($13)) ){ goto $label$73 }
	*($12 + [8]) = $7
	*($12 + [16]) = $11
	*($5 + [768]) = [0]
	*($12) = $9
	*($15) = ($12 + [24])
	$9 = *($5 + [768])
	$12 = [0]
	*($5 + [768]) = [0]
	if ( ($9 == 0) ){ goto $label$71 }
	goto $label$72 
	
.LABEL $label$73
	CALL $23(($5 + [480]), ($5 + [768]), ($5 + [392]), ($5 + [528]))
	$9 = *($5 + [768])
	$12 = [0]
	*($5 + [768]) = [0]
	if ( ($9 == 0) ){ goto $label$71 }
	
.LABEL $label$72
	if ( ((*($9 + [96]) & [1]) == 0) ){ goto $label$74 }
	CALL _ZdlPv(*(($9 + [104])))
	
.LABEL $label$74
	if ( ((*($9 + [56]) & [1]) == 0) ){ goto $label$75 }
	CALL _ZdlPv(*(($9 + [64])))
	
.LABEL $label$75
	CALL _ZdlPv($9)
	
.LABEL $label$71
	$7 = CALL current_time()
	*(($5 + [420])) = (int_64)0
	*(($5 + [436])) = (int_64)0
	*(($5 + [444])) = (int_64)0
	*($5 + [404]) = $12
	*($5 + [408]) = $12
	*($5 + [412 align=4]) = (int_64)0
	*($5 + [428 align=4]) = (int_64)0
	*($5 + [392]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	*(($5 + [536])) = $12
	*($5 + [528]) = (int_64)0
	$9 = CALL $113([8405])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$78 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$81 }
	*($5 + [528]) = ($9 << [1])
	$12 = (($5 + [528]) | [1])
	if ( $9 ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$81
	$13 = (($9 + [16]) & [-16])
	$12 = CALL _Znwj($13)
	*($5 + [528]) = ($13 | [1])
	*($5 + [536]) = $12
	*($5 + [532]) = $9
	
.LABEL $label$80
	CALL memcpy($12, [8405], $9)
	
.LABEL $label$79
	*(($12 + $9)) = [0]
	$1 = (uint_64)*(($6 + [32])) >> (uint_64)(int_64)8)
	$9 = CALL $113([8527])
	if ( ($9 <= [8]) ){ goto $label$84 }
	CALL eosio_assert([0], [8757])
	goto $label$83 
	
.LABEL $label$84
	if ( ($9 == 0) ){ goto $label$82 }
	
.LABEL $label$83
	$7 = (int_64)0
	
.LOOP $label$85:
	$12 = *(($9 + [8526]))
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$86 }
	CALL eosio_assert([0], [8802])
	
.LABEL $label$86
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$85 }
	if ( ((int_64)$1 != (int_64)$7) ){ goto $label$76 }
	goto $label$77 
	
.LABEL $label$82
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$78
	CALL $79(($5 + [528]))
	
.LABEL $label$77
	CALL $85(($5 + [528]), [8527])
	
.LABEL $label$76
	$7 = *($0)
	*($5 + [380]) = [6]
	*($5 + [376]) = [8855]
	*($5 + [8]) = *($5 + [376])
	*($5 + [384]) = *(CALL $16(($5 + [80]), ($5 + [8])))
	*($5 + [376]) = $7
	*($5 + [772]) = [10]
	*($5 + [768]) = [8890]
	*($5) = *($5 + [768])
	*($5 + [368]) = *(CALL $16(($5 + [80]), $5))
	$7 = *($6 + [8])
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$90 }
	$12 = [0]
	$13 = *([0] + [8900])
	
.LOOP $label$92:
	*((($5 + [80]) + ($9 = $12))) = *(($13 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$9 == (int_32)[12]) )))))
	$12 = ($9 + [1])
	if ( ((uint_32)$9 > (uint_32)[11]) ){ goto $label$91 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$92 }
	
.LABEL $label$91
	*(($5 + [520])) = [0]
	*($5 + [512]) = (int_64)0
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$89 }
	*($5 + [512]) = ($12 << [1])
	$13 = (($5 + [512]) | [1])
	goto $label$88 
	
.LABEL $label$90
	*(($5 + [520])) = [0]
	*($5 + [512]) = (int_64)0
	*($5 + [512]) = [0]
	$9 = (($5 + [512]) | [1])
	goto $label$87 
	
.LABEL $label$89
	$11 = (($12 + [16]) & [-16])
	$13 = CALL _Znwj($11)
	*($5 + [512]) = ($11 | [1])
	*($5 + [520]) = $13
	*($5 + [516]) = $12
	
.LABEL $label$88
	$11 = ($9 + [1])
	$9 = [0]
	
.LOOP $label$93:
	*(($13 + $9)) = *((($5 + [80]) + $9))
	$9 = ($9 + [1])
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$93 }
	$9 = ($13 + $12)
	
.LABEL $label$87
	$12 = [0]
	*($9) = [0]
	$7 = *($6 + [16])
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$97 }
	$13 = *([0] + [8900])
	
.LOOP $label$99:
	*((($5 + [80]) + ($9 = $12))) = *(($13 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$9 == (int_32)[12]) )))))
	$12 = ($9 + [1])
	if ( ((uint_32)$9 > (uint_32)[11]) ){ goto $label$98 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$99 }
	
.LABEL $label$98
	*(($5 + [72])) = [0]
	*($5 + [64]) = (int_64)0
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$96 }
	*($5 + [64]) = ($12 << [1])
	$13 = (($5 + [64]) | [1])
	goto $label$95 
	
.LABEL $label$97
	*(($5 + [72])) = [0]
	*($5 + [64]) = (int_64)0
	*($5 + [64]) = [0]
	$9 = (($5 + [64]) | [1])
	goto $label$94 
	
.LABEL $label$96
	$11 = (($12 + [16]) & [-16])
	$13 = CALL _Znwj($11)
	*($5 + [64]) = ($11 | [1])
	*($5 + [72]) = $13
	*($5 + [68]) = $12
	
.LABEL $label$95
	$11 = ($9 + [1])
	$9 = [0]
	
.LOOP $label$100:
	*(($13 + $9)) = *((($5 + [80]) + $9))
	$9 = ($9 + [1])
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$100 }
	$9 = ($13 + $12)
	
.LABEL $label$94
	$12 = [0]
	*($9) = [0]
	$7 = *(($6 + [8]))
	$1 = *($6)
	$9 = (($5 + [512]) + [8])
	*((($5 + [80]) + [24])) = *($9)
	$13 = (($5 + [64]) + [8])
	*((($5 + [80]) + [36])) = *($13)
	*($9) = [0]
	*($13) = [0]
	*($5 + [80]) = $1
	*($5 + [108 align=4]) = *($5 + [64])
	*($5 + [96]) = *($5 + [512])
	*($5 + [88]) = $7
	*($5 + [64]) = (int_64)0
	*($5 + [512]) = (int_64)0
	*((($5 + [80]) + [48])) = *(($8 + [8]))
	*($5 + [120]) = *($8)
	*($5 + [136]) = *($6 + [40])
	*($5 + [144]) = *(($6 + [48]))
	CALL $80((($5 + [80]) + [72]), ($6 + [56]))
	$7 = *($6 + [80])
	*(($5 + [184])) = *((($5 + [544]) + [8]))
	*($5 + [168]) = $7
	*($5 + [176]) = *($5 + [544])
	CALL memcpy(($5 + [192]), $2, [72])
	*(($5 + [296])) = *(($3 + [24]))
	*(($5 + [288])) = *(($3 + [16]))
	*(($5 + [280])) = *(($3 + [8]))
	*(($5 + [312])) = *(($4 + [8]))
	*(($5 + [320])) = *(($4 + [16]))
	*(($5 + [328])) = *(($4 + [24]))
	*($5 + [272]) = *($3)
	*($5 + [304]) = *($4)
	*($5 + [336]) = *($5 + [560])
	CALL $80(($5 + [344]), ($5 + [528]))
	$9 = *(($5 + [432]))
	if ( ((uint_32)$9 >= (uint_32)*(($5 + [436]))) ){ goto $label$105 }
	$7 = *($0)
	*($9 + [8]) = *($5 + [368])
	*($9) = $7
	*($9 + [16 align=4]) = (int_64)0
	*(($11 = ($9 + [24]))) = [0]
	$13 = CALL _Znwj([16])
	*($9 + [16]) = $13
	$4 = ($13 + [16])
	*($11) = $4
	*(($13 + [8])) = *((($5 + [376]) + [8]))
	*($13) = *($5 + [376])
	*(($9 + [20])) = $4
	*($9 + [28 align=4]) = (int_64)0
	*(($9 + [36])) = [0]
	*($5 + [784]) = [0]
	*($5 + [792]) = ($5 + [784])
	*($5 + [768]) = ($5 + [80])
	CALL $24(($5 + [768]), ($5 + [792]))
	$13 = *($5 + [784])
	if ( ($13 == 0) ){ goto $label$104 }
	$11 = ($9 + [28])
	CALL $17($11, $13)
	$12 = *(($9 + [32]))
	$9 = *($11)
	goto $label$103 
	
.LABEL $label$105
	CALL $25(($5 + [428]), ($5 + [376]), $0, ($5 + [368]), ($5 + [80]))
	$9 = [1]
	if ( (*($5 + [344]) & [1]) ){ goto $label$102 }
	goto $label$101 
	
.LABEL $label$104
	$9 = [0]
	
.LABEL $label$103
	*($5 + [772]) = $9
	*($5 + [768]) = $9
	*($5 + [776]) = $12
	*($5 + [784]) = ($5 + [768])
	CALL eosio_assert(((int_32)($12 - $9) > (int_32)[7]), [8869])
	CALL memcpy(*($5 + [772]), ($5 + [80]), [8])
	$9 = (*($5 + [772]) + [8])
	*($5 + [772]) = $9
	CALL eosio_assert(((int_32)(*($5 + [776]) - $9) > (int_32)[7]), [8869])
	CALL memcpy(*($5 + [772]), (($5 + [80]) | [8]), [8])
	*($5 + [772]) = (*($5 + [772]) + [8])
	CALL $26(($5 + [768]), ($5 + [96]))
	CALL $26(($5 + [768]), (($5 + [80]) + [28]))
	*($5 + [792]) = ($5 + [80])
	CALL $27(($5 + [792]), ($5 + [784]))
	*(($9 = (($5 + [392]) + [40]))) = (*($9) + [40])
	$9 = [1]
	if ( ((*($5 + [344]) & [1]) == 0) ){ goto $label$101 }
	
.LABEL $label$102
	CALL _ZdlPv(*(($5 + [352])))
	
.LABEL $label$101
	if ( ((*($5 + [152]) & $9) == 0) ){ goto $label$106 }
	CALL _ZdlPv(*(($5 + [160])))
	
.LABEL $label$106
	if ( ((*(($5 + [108])) & [1]) == 0) ){ goto $label$107 }
	CALL _ZdlPv(*(($5 + [116])))
	
.LABEL $label$107
	if ( ((*(($5 + [96])) & [1]) == 0) ){ goto $label$108 }
	CALL _ZdlPv(*(($5 + [104])))
	
.LABEL $label$108
	$7 = *($0)
	*(($5 + [412])) = [5]
	*($5 + [88]) = (int_64)0
	*($5 + [80]) = *($6)
	CALL $28(($5 + [376]), ($5 + [392]))
	$9 = *($5 + [376])
	CALL send_deferred(($5 + [80]), $7, $9, (*($5 + [380]) - $9), [0])
	$9 = *($5 + [376])
	if ( ($9 == 0) ){ goto $label$109 }
	*($5 + [380]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$109
	if ( ((uint_64)*($6) <= (uint_64)((int_64)*($0 + [72]) + (int_64)*($0 + [80]))) ){ goto $label$110 }
	$9 = [0]
	$12 = CALL db_lowerbound_i64(*($5 + [456]), *(($5 + [464])), (int_64)4229853544465301504, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$111 }
	$9 = CALL $29(($5 + [456]), $12)
	
.LABEL $label$111
	$12 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($12, [9746])
	CALL eosio_assert($12, [9780])
	$12 = CALL db_next_i64(*($9 + [268]), ($5 + [80]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$112 }
	CALL $29(($5 + [456]), $12)
	
.LABEL $label$112
	CALL $30(($5 + [456]), $9)
	
.LABEL $label$110
	CALL eosio_assert($10, [9746])
	CALL eosio_assert($10, [9780])
	$9 = CALL db_next_i64(*($6 + [92]), ($5 + [80]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$113 }
	CALL $15(($5 + [688]), $9)
	
.LABEL $label$113
	CALL $31(($5 + [688]), $6)
	if ( ((*($5 + [528]) & [1]) == 0) ){ goto $label$114 }
	CALL _ZdlPv(*($5 + [536]))
	
.LABEL $label$114
	CALL $32(($5 + [392]))
	$13 = *($5 + [480])
	if ( ($13 == 0) ){ goto $label$115 }
	$11 = ($5 + [484])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$117 }
	
.LOOP $label$118:
	$12 = ($12 + [-24])
	$9 = *($12)
	*($12) = [0]
	if ( ($9 == 0) ){ goto $label$119 }
	if ( ((*($9 + [96]) & [1]) == 0) ){ goto $label$120 }
	CALL _ZdlPv(*(($9 + [104])))
	
.LABEL $label$120
	if ( ((*($9 + [56]) & [1]) == 0) ){ goto $label$121 }
	CALL _ZdlPv(*(($9 + [64])))
	
.LABEL $label$121
	CALL _ZdlPv($9)
	
.LABEL $label$119
	if ( ((int_32)$13 != (int_32)$12) ){ goto $label$118 }
	$9 = *(($5 + [480]))
	goto $label$116 
	
.LABEL $label$117
	$9 = $13
	
.LABEL $label$116
	*($11) = $13
	CALL _ZdlPv($9)
	
.LABEL $label$115
	$13 = *($5 + [592])
	if ( ($13 == 0) ){ goto $label$122 }
	$11 = ($5 + [596])
	$9 = *($11)
	if ( ((int_32)$9 == (int_32)$13) ){ goto $label$124 }
	
.LOOP $label$125:
	$9 = ($9 + [-24])
	$12 = *($9)
	*($9) = [0]
	if ( ($12 == 0) ){ goto $label$126 }
	CALL _ZdlPv($12)
	
.LABEL $label$126
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$125 }
	$9 = *(($5 + [592]))
	goto $label$123 
	
.LABEL $label$124
	$9 = $13
	
.LABEL $label$123
	*($11) = $13
	CALL _ZdlPv($9)
	
.LABEL $label$122
	$13 = *($5 + [712])
	if ( ($13 == 0) ){ goto $label$127 }
	$11 = ($5 + [716])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$129 }
	
.LOOP $label$130:
	$12 = ($12 + [-24])
	$9 = *($12)
	*($12) = [0]
	if ( ($9 == 0) ){ goto $label$131 }
	if ( ((*($9 + [68]) & [1]) == 0) ){ goto $label$132 }
	CALL _ZdlPv(*(($9 + [76])))
	
.LABEL $label$132
	if ( ((*($9 + [56]) & [1]) == 0) ){ goto $label$133 }
	CALL _ZdlPv(*(($9 + [64])))
	
.LABEL $label$133
	CALL _ZdlPv($9)
	
.LABEL $label$131
	if ( ((int_32)$13 != (int_32)$12) ){ goto $label$130 }
	$9 = *(($5 + [712]))
	goto $label$128 
	
.LABEL $label$129
	$9 = $13
	
.LABEL $label$128
	*($11) = $13
	CALL _ZdlPv($9)
	
.LABEL $label$127
	$13 = *($5 + [752])
	if ( ($13 == 0) ){ goto $label$134 }
	$11 = ($5 + [756])
	$9 = *($11)
	if ( ((int_32)$9 == (int_32)$13) ){ goto $label$136 }
	
.LOOP $label$137:
	$9 = ($9 + [-24])
	$12 = *($9)
	*($9) = [0]
	if ( ($12 == 0) ){ goto $label$138 }
	CALL _ZdlPv($12)
	
.LABEL $label$138
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$137 }
	$9 = *(($5 + [752]))
	goto $label$135 
	
.LABEL $label$136
	$9 = $13
	
.LABEL $label$135
	*($11) = $13
	CALL _ZdlPv($9)
	
.LABEL $label$134
	$global$0 = ($5 + [800])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9187])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $116($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([104])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72 align=4]) = (int_64)0
	*($5 + [88]) = $0
	CALL $62(($3 + [32]), $5)
	*($5 + [92]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $38(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $119($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [68]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [76])))
	
.LABEL $label$10
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [64])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9000])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9105])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9038])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9105])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $97($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9187])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $116($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = $0
	CALL $61(($3 + [32]), $5)
	*($5 + [84]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [16]) >> (uint_64)(int_64)8
	*($3 + [16]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $6(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $119($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [56]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [72]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [112])
	$global$0 = $4
	*($4 + [64]) = $1
	CALL require_auth(*($0))
	*(($5 = ($4 + [56]))) = [0]
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	$1 = *($0)
	*($4 + [24]) = $1
	*($4 + [32]) = $1
	*($4 + [12]) = $2
	*($4 + [16]) = $3
	*($4 + [8]) = ($4 + [64])
	*($4 + [104]) = $1
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$3()), [9215])
	*($4 + [84]) = ($4 + [8])
	*($4 + [80]) = ($4 + [24])
	*($4 + [88]) = ($4 + [104])
	*(($0 = CALL _Znwj([96])) + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [56]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [72]) = (int_64)0
	*($0 + [80]) = ($4 + [24])
	CALL $13(($4 + [80]), $0)
	*($4 + [96]) = $0
	$1 = (uint_64)*($0 + [16]) >> (uint_64)(int_64)8
	*($4 + [80]) = $1)
	$2 = *($0 + [84])
	*($4 + [76]) = $2
	$6 = ($4 + [52])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*($5)) ){ goto $label$3 }
	*($3 + [8]) = $1
	*($3 + [16]) = $2
	*($4 + [96]) = [0]
	*($3) = $0
	*($6) = ($3 + [24])
	$0 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $6(($4 + [48]), ($4 + [96]), ($4 + [80]), ($4 + [76]))
	$0 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$2 = *($4 + [48])
	if ( ($2 == 0) ){ goto $label$4 }
	$5 = ($4 + [52])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($4 + [48]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $2
	
.LABEL $label$5
	*($5) = $2
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($4 + [112])
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = *($4 + [4])
	*(($1 + [16])) = *(($6 + [8]))
	*($1 + [8]) = *($6)
	$6 = *($4 + [8])
	*($1 + [24]) = *($6)
	*(($1 + [32])) = *(($6 + [8]))
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$7 = *(*($4 + [4]) + [8])
	CALL eosio_assert([1], [8688])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$10 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [8737])
	*(($1 + [56])) = $7
	*($1 + [48]) = (int_64)0
	$7 = *(*(($4 + [4])) + [8])
	CALL eosio_assert([1], [8688])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$8 = $9
	$10 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$8 = $9
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $10 ){ goto $label$10 }
	$10 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	
.LABEL $label$6
	CALL eosio_assert($10, [8737])
	*(($1 + [72])) = $7
	*($1 + [64]) = (int_64)0
	$10 = $2
	$6 = ($10 + [-80])
	$global$0 = $6
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = $10
	CALL $11($3, $1)
	$8 = (uint_64)*(($1 + [16])) >> (uint_64)(int_64)8
	*($1 + [84]) = CALL db_store_i64(*($5 + [8]), (int_64)-4060986516896743424, *(*($0 + [8])), $8), $6, [80])
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$11 }
	*(($5 + [16])) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$11
	$global$0 = ($3 + [16])
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $114(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9984])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $114(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8869])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8869])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8869])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $26(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $17($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8869])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8869])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $54(CALL $53($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8869])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [8869])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $54($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9210])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[33]), [9210])
	CALL memcpy(($1 + [8]), *($0 + [4]), [34])
	$3 = (*($0 + [4]) + [34])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [9210])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($1 + [42]) = ((int_32)*($2 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $63($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $84($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $84($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $79($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9210])
	CALL memcpy(($3 + [40]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9210])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($3 + [48])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9210])
	CALL memcpy(($4 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9210])
	CALL memcpy(($4 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $50(*($1), ($4 + [72]))
	*($2) = $4
	CALL $70($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$2 = ($global$0 - [816])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = CALL $80(($2 + [392]), ($1 + [16]))
	$6 = CALL $80(($2 + [376]), ($1 + [28]))
	*(($7 = (($2 + [360]) + [8]))) = *(($1 + [48]))
	*($2 + [360]) = *($1 + [40])
	$8 = *($1 + [56])
	$9 = *($1 + [64])
	$10 = CALL $80(($2 + [344]), ($1 + [72]))
	*(($11 = (($2 + [328]) + [8]))) = *(($1 + [104]))
	*($2 + [328]) = *($1 + [96])
	$12 = *($1 + [88])
	CALL memcpy(($2 + [256]), ($1 + [112]), [72])
	*(($13 = (($2 + [224]) + [24]))) = *(($1 + [216]))
	*(($14 = (($2 + [224]) + [16]))) = *(($1 + [208]))
	*(($15 = (($2 + [192]) + [16]))) = *(($1 + [240]))
	*(($16 = (($2 + [192]) + [24]))) = *(($1 + [248]))
	*($2 + [232]) = *(($1 + [200]))
	*($2 + [224]) = *($1 + [192])
	*($2 + [192]) = *($1 + [224])
	*($2 + [200]) = *(($1 + [232]))
	$17 = *($1 + [256])
	$1 = CALL $80(($2 + [176]), ($1 + [264]))
	*((($2 + [544]) + [24])) = *($16)
	*((($2 + [544]) + [16])) = *($15)
	*((($2 + [512]) + [16])) = *($14)
	*((($2 + [512]) + [24])) = *($13)
	*($2 + [552]) = *($2 + [200])
	*($2 + [544]) = *($2 + [192])
	*($2 + [512]) = *($2 + [224])
	*($2 + [520]) = *($2 + [232])
	CALL memcpy(($2 + [440]), ($2 + [256]), [72])
	*((($2 + [424]) + [8])) = *($11)
	*((($2 + [408]) + [8])) = *($7)
	*($2 + [424]) = *($2 + [328])
	*($2 + [408]) = *($2 + [360])
	$0 = *($0 + [4])
	$11 = *($0 + [4])
	$7 = (*($0) + int_32($11 >> [1]))
	$0 = *($0)
	if ( (($11 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$11 = CALL $80(($2 + [800]), $5)
	$13 = CALL $80(($2 + [784]), $6)
	*(($16 = (($2 + [768]) + [8]))) = *((($2 + [408]) + [8]))
	*($2 + [768]) = *($2 + [408])
	$14 = CALL $80(($2 + [752]), $10)
	*(($18 = (($2 + [736]) + [8]))) = *((($2 + [424]) + [8]))
	*($2 + [736]) = *($2 + [424])
	CALL memcpy(($2 + [664]), ($2 + [440]), [72])
	*(($19 = (($2 + [624]) + [24]))) = *((($2 + [512]) + [24]))
	*(($20 = (($2 + [624]) + [16]))) = *((($2 + [512]) + [16]))
	*(($21 = (($2 + [592]) + [16]))) = *((($2 + [544]) + [16]))
	*(($22 = (($2 + [592]) + [24]))) = *((($2 + [544]) + [24]))
	*($2 + [632]) = *($2 + [520])
	*($2 + [624]) = *($2 + [512])
	*($2 + [592]) = *($2 + [544])
	*($2 + [600]) = *($2 + [552])
	$15 = CALL $80(($2 + [576]), $1)
	*((($2 + [160]) + [8])) = *($16)
	*((($2 + [144]) + [8])) = *($18)
	*($2 + [160]) = *($2 + [768])
	*($2 + [144]) = *($2 + [736])
	CALL memcpy(($2 + [72]), ($2 + [664]), [72])
	*((($2 + [32]) + [24])) = *($19)
	*((($2 + [32]) + [16])) = *($20)
	*(($2 + [16])) = *($21)
	*(($2 + [24])) = *($22)
	*($2 + [40]) = *($2 + [632])
	*($2 + [32]) = *($2 + [624])
	*($2) = *($2 + [592])
	*($2 + [8]) = *($2 + [600])
	CALL void $7((int_32 $4), (int_64 $3), (int_64 $11), (int_32 $13), (int_32 ($2 + [160])), (int_32 $8), (int_64 $9), (int_64 $14), (int_32 $12), (int_64 ($2 + [144])), (int_32 ($2 + [72])), (int_32 ($2 + [32])), (int_32 $2), (int_32 $17), (int_64 $15), (int_32 $0))
	if ( (*($2 + [576]) & [1]) ){ goto $label$16 }
	if ( (*($2 + [752]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*($15 + [8]))
	if ( ((*($2 + [752]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*($14 + [8]))
	$0 = [1]
	if ( ((*($2 + [784]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$0 = [1]
	if ( (*($2 + [784]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( (*($2 + [800]) & $0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($13 + [8]))
	if ( ((*($2 + [800]) & $0) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($11 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($10) & $0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($10) & $0) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($10 + [8]))
	$1 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($6) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($5) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($5 + [8]))
	$global$0 = ($2 + [816])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [816])
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8869])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8869])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8869])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8869])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8869])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8869])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8869])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [16]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8869])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8869])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8869])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8869])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8869])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8869])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8869])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8869])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8869])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8869])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $54(CALL $53($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $116 (int_32 $0)
{
	return CALL $117([10004], $0)
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $118($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8244])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $114 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $98())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $115($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $35 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6, int_64 $7, int_32 $8, int_64 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13, int_64 $14, int_32 $15)
{
	int_32 $16
	$16 = ($global$0 - [32])
	$global$0 = $16
	CALL require_auth(*($0))
	*($16 + [20]) = [0]
	*($16 + [16]) = [8941]
	*($16 + [8]) = *($16 + [16])
	if ( ((int_64)*(CALL $16(($16 + [24]), ($16 + [8]))) != (int_64)$2) ){ goto $label$1 }
	CALL require_recipient(*($0 + [64]))
	$global$0 = ($16 + [32])
	return 
	
.LABEL $label$1
	CALL require_recipient($2)
	$global$0 = ($16 + [32])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $113 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_64 .FUNC $110 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $107($3, (int_64)0)
	$4 = CALL $109($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

int_32 .FUNC $111 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $118 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9996]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10000])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9996]) = [1]
	$2 = ($2 << [16])
	*([0] + [10000]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10000])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10000]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9996]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9996]) = [1]
	$3 = ($3 << [16])
	*([0] + [10000]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10000])
	
.LABEL $label$10
	*([0] + [10000]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $119 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18388])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18196]
	$3 = (((int_32)$1 * (int_32)[12]) + [18196])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9187])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $116($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([288])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64]) = [0]
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96 align=4]) = (int_64)0
	*($5 + [104]) = [0]
	*($5 + [144]) = [0]
	*($5 + [264]) = $0
	CALL $67(($3 + [32]), $5)
	*($5 + [268]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $23(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $119($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [104])))
	
.LABEL $label$10
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [64])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $55($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $17($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $56($2, $1)
	CALL $58(CALL $57(CALL $57($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $107 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $106 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $105($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $21 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$4 = ($global$0 - [144])
	$global$0 = $4
	$5 = *($0)
	*($4 + [44]) = [6]
	*($4 + [40]) = [8855]
	*($4 + [32]) = *($4 + [40])
	$6 = *(CALL $16(($4 + [72]), ($4 + [32])))
	$7 = *($0 + [56])
	*($4 + [44]) = [4]
	*($4 + [40]) = [8937]
	*($4 + [24]) = *($4 + [40])
	$8 = *(CALL $16(($4 + [72]), ($4 + [24])))
	*((($4 + [40]) + [16])) = *(($3 + [8]))
	*($4 + [40]) = $1
	*($4 + [72]) = $7
	*($4 + [80]) = $8
	*($4 + [48]) = *($3)
	*($4 + [64]) = *($0)
	*(($9 = CALL _Znwj([16]))) = $5
	*($9 + [8]) = $6
	*(($4 + [108])) = [0]
	$10 = ($9 + [16])
	*(($4 + [96])) = $10
	*(($4 + [92])) = $10
	*($4 + [88]) = $9
	*($4 + [100 align=4]) = (int_64)0
	CALL $17(($4 + [100]), [32])
	$9 = *((($4 + [72]) + [32]))
	$10 = *($4 + [100])
	*($4 + [132]) = $10
	*($4 + [128]) = $10
	*($4 + [136]) = $9
	*($4 + [112]) = ($4 + [128])
	*($4 + [120]) = ($4 + [40])
	CALL $34(($4 + [120]), ($4 + [112]))
	CALL $19(($4 + [128]), ($4 + [72]))
	$9 = *($4 + [128])
	CALL send_inline($9, (*($4 + [132]) - $9))
	$9 = *($4 + [128])
	if ( ($9 == 0) ){ goto $label$1 }
	*($4 + [132]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$1
	$9 = *($4 + [100])
	if ( ($9 == 0) ){ goto $label$2 }
	*(($4 + [104])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$2
	$9 = *($4 + [88])
	if ( ($9 == 0) ){ goto $label$3 }
	*(($4 + [92])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$3
	*($4 + [44]) = [0]
	*($4 + [40]) = [8941]
	*($4 + [16]) = *($4 + [40])
	if ( ((int_64)*(CALL $16(($4 + [72]), ($4 + [16]))) == (int_64)$2) ){ goto $label$4 }
	$6 = *($0)
	*($4 + [44]) = [6]
	*($4 + [40]) = [8855]
	*($4 + [8]) = *($4 + [40])
	$7 = *(CALL $16(($4 + [72]), ($4 + [8])))
	$8 = *(($0 + [56]))
	*($4 + [44]) = [4]
	*($4 + [40]) = [8937]
	*($4) = *($4 + [40])
	$11 = *(CALL $16(($4 + [72]), $4))
	$12 = ((uint_64)((int_64)*($0 + [48]) * (int_64)*($3)) / (uint_64)(int_64)100)
	$9 = CALL $113([8405])
	if ( ($9 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [8757])
	goto $label$7 
	
.LABEL $label$8
	if ( ($9 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = (int_64)0
	
.LOOP $label$9:
	$3 = *(($9 + [8404]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [8802])
	
.LABEL $label$10
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$9 }
	goto $label$5 
	
.LABEL $label$6
	$5 = (int_64)0
	
.LABEL $label$5
	CALL eosio_assert([1], [8688])
	$1 = ((int_64)$5 & (int_64)72057594037927935)
	$13 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	$9 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$5 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$1 = $5
	$3 = [1]
	$10 = $9
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$1 = $5
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$9 < (int_32)[6])
	$10 = ($9 + [1])
	$9 = $10
	if ( $3 ){ goto $label$15 }
	$3 = [1]
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [8737])
	*((($4 + [40]) + [16])) = $13
	*($4 + [48]) = $12
	*($4 + [40]) = $2
	*($4 + [72]) = $8
	*($4 + [80]) = $11
	*($4 + [64]) = *($0)
	*(($9 = CALL _Znwj([16]))) = $6
	*($9 + [8]) = $7
	*(($4 + [108])) = [0]
	$3 = ($9 + [16])
	*(($4 + [96])) = $3
	*(($4 + [92])) = $3
	*($4 + [88]) = $9
	*($4 + [100 align=4]) = (int_64)0
	CALL $17(($4 + [100]), [32])
	$9 = *((($4 + [72]) + [32]))
	$3 = *($4 + [100])
	*($4 + [132]) = $3
	*($4 + [128]) = $3
	*($4 + [136]) = $9
	*($4 + [112]) = ($4 + [128])
	*($4 + [120]) = ($4 + [40])
	CALL $34(($4 + [120]), ($4 + [112]))
	CALL $19(($4 + [128]), ($4 + [72]))
	$9 = *($4 + [128])
	CALL send_inline($9, (*($4 + [132]) - $9))
	$9 = *($4 + [128])
	if ( ($9 == 0) ){ goto $label$16 }
	*($4 + [132]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$16
	$9 = *($4 + [100])
	if ( ($9 == 0) ){ goto $label$17 }
	*(($4 + [104])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$17
	$9 = *($4 + [88])
	if ( ($9 == 0) ){ goto $label$4 }
	*(($4 + [92])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$4
	$global$0 = ($4 + [144])
}

int_64 .FUNC $20 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$global$0 = $2
	*((($2 + [40]) + [32])) = [0]
	*($2 + [56]) = (int_64)-1
	$3 = (int_64)0
	*($2 + [64]) = (int_64)0
	$4 = *($0)
	*($2 + [40]) = $4
	*($2 + [48]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)-4060986516896743424, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $10(($2 + [40]), $5)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)($2 + [40])), [9611])
	$4 = *($5)
	*(($2 + [32])) = [0]
	*($2) = $4
	$6 = *($0)
	*($2 + [8]) = $6
	*($2 + [16]) = (int_64)-1
	$3 = (int_64)0
	*($2 + [24]) = (int_64)0
	$0 = CALL db_find_i64($4, $6, (int_64)3607749779137757184, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $33($2, $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$2), [9611])
	$3 = *($0)
	$7 = *($2 + [24])
	if ( ($7 == 0) ){ goto $label$2 }
	$8 = ($2 + [28])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$6 }
	CALL _ZdlPv($5)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($2 + [24]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $7
	
.LABEL $label$3
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$7 = *($2 + [64])
	if ( ($7 == 0) ){ goto $label$1 }
	$8 = ($2 + [68])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	CALL _ZdlPv($5)
	
.LABEL $label$10
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($2 + [64]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $7
	
.LABEL $label$7
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [80])
	return $3
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $97($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [104])))
	
.LABEL $label$11
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [64])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($4)
	*($1) = *($5)
	*($1 + [8]) = *($5 + [8])
	*($1 + [16]) = *($5 + [16])
	$6 = *($0)
	*(($1 + [32])) = *(($5 + [32]))
	*($1 + [24]) = *($5 + [24])
	$5 = *($4)
	*($1 + [40]) = *($5 + [40])
	*($1 + [48]) = *($5 + [48])
	CALL $82(($1 + [56]), ($5 + [56]))
	*($1 + [72]) = *(*($4) + [80])
	$5 = *($4 + [4])
	*(($1 + [88])) = *(($5 + [8]))
	*($1 + [80]) = *($5)
	CALL $82(($1 + [96]), (*($4) + [68]))
	$5 = *($4 + [8])
	*($1 + [112]) = *($5)
	*(($1 + [136])) = *(($5 + [24]))
	*(($1 + [128])) = *(($5 + [16]))
	*(($1 + [120])) = *(($5 + [8]))
	CALL memcpy(($1 + [144]), *($4 + [12]), [69])
	$5 = *($4 + [16])
	*($1 + [224]) = *($5)
	*(($1 + [248])) = *(($5 + [24]))
	*(($1 + [240])) = *(($5 + [16]))
	*(($1 + [232])) = *(($5 + [8]))
	*($1 + [256]) = *(*($4 + [20]))
	$4 = *($1 + [56])
	$5 = ( *(($1 + [60])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [217])
	$7 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	$5 = *(($1 + [96]))
	$5 = ( *(($1 + [100])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$4 = ($5 + $4)
	$7 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	$7 = *($1 + [144])
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ($4 <= [513]) ){ goto $label$5 }
	$5 = CALL $116($4)
	goto $label$4 
	
.LABEL $label$5
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$4
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $4)
	CALL $64($3, $1)
	$7 = *($1)
	*($1 + [268]) = CALL db_store_i64(*($6 + [8]), (int_64)4229853544465301504, *(*($0 + [8])), $7, $5, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$7 >= (uint_64)*($6 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $119($5)
	if ( (uint_64)($7 <= *($6 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $97($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	$3 = [0]
	*(($8 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$10 = ($2 + [16])
	*($8) = $10
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $10
	*($5 + [16]) = [0]
	*($5 + [24]) = ($5 + [16])
	*($5) = $4
	$9 = ((int_32)$9 * (int_32)[40])
	CALL $24($5, ($5 + [24]))
	$2 = *($5 + [16])
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = ($7 + [28])
	CALL $17($1, $2)
	$3 = *(($7 + [32]))
	$2 = *($1)
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	
.LABEL $label$5
	$11 = ($6 + $9)
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $3
	*($5 + [16]) = $5
	CALL eosio_assert(((int_32)($3 - $2) > (int_32)[7]), [8869])
	CALL memcpy(*($5 + [4]), $4, [8])
	$2 = (*($5 + [4]) + [8])
	*($5 + [4]) = $2
	CALL eosio_assert(((int_32)(*($5 + [8]) - $2) > (int_32)[7]), [8869])
	CALL memcpy(*($5 + [4]), ($4 + [8]), [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL $26($5, ($4 + [16]))
	CALL $26($5, ($4 + [28]))
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $27(($5 + [24]), ($5 + [16]))
	$4 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$8 }
	$10 = ($4 - $8)
	$3 = [0]
	
.LOOP $label$9:
	$2 = ($8 + $3)
	*((($4 = ($7 + $3)) + [-32])) = *(($2 + [-32]))
	*(($4 + [-40])) = *(($2 + [-40]))
	*(($9 = ($4 + [-24]))) = (int_64)0
	*(($1 = ($4 + [-16]))) = [0]
	$6 = ($2 + [-24])
	*($9) = *($6)
	$9 = ($2 + [-16])
	*($1) = *($9)
	*($9) = [0]
	*(($9 = ($4 + [-12]))) = (int_64)0
	*(($4 = ($4 + [-4]))) = [0]
	$1 = ($2 + [-12])
	*($9) = *($1)
	*($6) = (int_64)0
	$2 = ($2 + [-4])
	*($4) = *($2)
	*($2) = [0]
	*($1) = (int_64)0
	$3 = ($3 + [-40])
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$9 }
	$7 = ($7 + $3)
	$4 = *(($0 + [4]))
	$9 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$9 = $4
	
.LABEL $label$7
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = *(($4 + [-12]))
	if ( ($2 == 0) ){ goto $label$12 }
	*(($4 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$2 = ($4 + [-40])
	$3 = *(($4 + [-24]))
	if ( ($3 == 0) ){ goto $label$13 }
	*(($4 + [-20])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$13
	$4 = $2
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($9 == 0) ){ goto $label$14 }
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$4 = (*($3) + [16])
	*(($3 = *($1))) = $4
	$5 = *($0 + [16])
	$0 = *($0)
	$6 = (CASTING uint_64)(uint_32 ( *(($0 + [20])) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	*($3) = $4
	$5 = *(($0 + [16]))
	$5 = ( *(($0 + [20])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$2 }
	$4 = ($5 + $4)
	*($3) = $4
	
.LABEL $label$2
	$5 = *($0 + [28])
	$6 = (CASTING uint_64)(uint_32 ( *(($0 + [32])) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	*($3) = $4
	$5 = *(($0 + [28]))
	$5 = ( *(($0 + [32])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$4 }
	*($3) = ($5 + $4)
	
.LABEL $label$4
	*($2 + [8]) = $0
	CALL $65(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8869])
	CALL memcpy(*($4 + [4]), ($3 + [40]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *(($3 + [48]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8869])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($4 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($4 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $26(*($1), ($4 + [72]))
	*($2) = $4
	CALL $66($2, $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8869])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8869])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_64 .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $108($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $98()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $108($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18497]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $107($0, (int_64)0)
	*(CALL $98()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $108($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $108($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $108($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $108($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18497])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18497]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18497]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $108($0)
	$5 = *(($6 + [18497]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $108($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18497]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8217]))
	$8 = (int_64)0
	$5 = *(($6 + [18497]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18497]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $108($0)
	$5 = *(($6 + [18497]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $108($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18497]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $107($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18497]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18497]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $108($0) + [18497]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $98()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $98()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $98()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $26(CALL $26($0, ($1 + [56])), ($1 + [68]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $97($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $108 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $106($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = (*($2) + [32])
	*(($2 = *($1))) = $1
	$3 = *($0 + [72])
	$0 = *($0)
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [76])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *(($0 + [72]))
	$3 = ( *(($0 + [76])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	*($2) = ($1 + [24])
	$1 = ($1 + [161])
	$4 = *($0 + [112])
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($0 + [264])
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [268])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$4:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$4 }
	*($2) = $1
	$0 = *(($0 + [264]))
	$0 = ( *(($0 + [268])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$5 }
	*($2) = ($0 + $1)
	
.LABEL $label$5
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $26($0, ($1 + [56]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [88]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$4 = CALL $26($0, ($1 + [96]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [8869])
	CALL memcpy(*($4 + [4]), ($1 + [112]), [32])
	$3 = (*($4 + [4]) + [32])
	*($4 + [4]) = $3
	$5 = *($1 + [144])
	$0 = ($4 + [4])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$7 = ((int_64)$5) != (int_64)0
	*($2 + [8]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*(($4 + [8])) - $3) > (int_32)[0]), [8869])
	CALL memcpy(*($0), ($2 + [8]), [1])
	$3 = (*($0) + [1])
	*($0) = $3
	if ( $7 ){ goto $label$1 }
	$6 = ($4 + [8])
	CALL eosio_assert(((int_32)(*($6) - $3) > (int_32)[64]), [8869])
	$0 = ($4 + [4])
	CALL memcpy(*($0), ($1 + [148]), [65])
	$3 = (*($0) + [65])
	*($0) = $3
	CALL eosio_assert(((int_32)(*($6) - $3) > (int_32)[31]), [8869])
	CALL memcpy(*($0), ($1 + [224]), [32])
	$3 = (*($0) + [32])
	*($0) = $3
	CALL eosio_assert(((int_32)(*($6) - $3) > (int_32)[7]), [8869])
	CALL memcpy(*($0), ($1 + [256]), [8])
	*($0) = (*($0) + [8])
	$global$0 = ($2 + [16])
	return $4
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9210])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	$4 = (int_64)0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $50($0, ($1 + [56]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9210])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [88])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$5 = CALL $50($0, ($1 + [96]))
	CALL eosio_assert(((uint_32)(*($5 + [8]) - *($5 + [4])) > (uint_32)[31]), [9210])
	CALL memcpy(($1 + [112]), *($5 + [4]), [32])
	$3 = (*($5 + [4]) + [32])
	*($5 + [4]) = $3
	$6 = [0]
	$7 = ($5 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *(($5 + [8]))), [9662])
	$3 = *($7)
	$0 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$6 = ($6 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($0 & [127]) << $6)))
	$6 = ($6 + [7])
	if ( ($0 & [128]) ){ goto $label$1 }
	*($1 + [144]) = $4
	$6 = ($5 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[64]), [9210])
	$0 = ($5 + [4])
	CALL memcpy(($1 + [148]), *($0), [65])
	$3 = (*($0) + [65])
	*($0) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[31]), [9210])
	CALL memcpy(($1 + [224]), *($0), [32])
	$3 = (*($0) + [32])
	*($0) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($1 + [256]), *($0), [8])
	*($0) = (*($0) + [8])
	$global$0 = ($2 + [16])
	return $5
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8869])
	CALL memcpy(*($4 + [4]), ($3 + [88]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$5 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8869])
	CALL memcpy(*($4 + [4]), ($5 + [96]), [8])
	$0 = (*($4 + [4]) + [8])
	*($4 + [4]) = $0
	*($2) = *(($5 + [104]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $0) > (int_32)[7]), [8869])
	CALL memcpy(*($4 + [4]), $2, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$6 = *($5 + [112])
	$7 = *($1)
	$0 = *($7 + [4])
	$4 = ($7 + [4])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$8 = ((int_64)$6) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($7 + [8])) - $0) > (int_32)[0]), [8869])
	CALL memcpy(*($4), ($2 + [15]), [1])
	$0 = (*($4) + [1])
	*($4) = $0
	if ( $8 ){ goto $label$1 }
	CALL eosio_assert(((int_32)(*(($7 + [8])) - $0) > (int_32)[64]), [8869])
	$4 = ($7 + [4])
	CALL memcpy(*($4), ($5 + [116]), [65])
	*($4) = (*($4) + [65])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [8869])
	CALL memcpy(*($4 + [4]), ($5 + [192]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [8869])
	CALL memcpy(*($4 + [4]), ($5 + [224]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8869])
	CALL memcpy(*($4 + [4]), ($5 + [256]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $26(*($1), ($5 + [264]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9210])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [56])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [72])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [60]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9372])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7235159551873908736)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9318])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9318])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $2(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9662])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $17($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9210])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9210])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9210])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $50(CALL $50($0, ($1 + [56])), ($1 + [68]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9210])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $101 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [9] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $102($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $102($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $102($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $102($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18416]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $102($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $102($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $102($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_32 .FUNC $105 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $100([10], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $112(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $88 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $83($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $87($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $113($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $83($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $83($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $83($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $81 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $119($0)
	
.LABEL $label$1
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9210])
	CALL memcpy(($3 + [88]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$5 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9210])
	CALL memcpy(($5 + [96]), *($4 + [4]), [8])
	$0 = (*($4 + [4]) + [8])
	*($4 + [4]) = $0
	$6 = (int_64)0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]), [9210])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($5 + [104])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$7 = *($1)
	$0 = *($7 + [4])
	$3 = [0]
	$8 = ($7 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($0 <= *(($7 + [8]))), [9662])
	$0 = *($8)
	$4 = *($0)
	$0 = ($0 + [1])
	*($8) = $0
	$3 = ($3 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($4 & [128]) ){ goto $label$1 }
	*($5 + [112]) = $6
	CALL eosio_assert(((uint_32)(*(($7 + [8])) - $0) > (uint_32)[64]), [9210])
	$4 = ($7 + [4])
	CALL memcpy(($5 + [116]), *($4), [65])
	*($4) = (*($4) + [65])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [9210])
	CALL memcpy(($5 + [192]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [9210])
	CALL memcpy(($5 + [224]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9210])
	CALL memcpy(($5 + [256]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $50(*($1), ($5 + [264]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $116($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9984])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $116($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $119($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL memory()
	*($3 + [164]) = [11]
	*($3 + [160]) = [9157]
	*($3 + [88]) = *($3 + [160])
	CALL $16(($3 + [168]), ($3 + [88]))
	if ( ((int_64)$1 == (int_64)6138663591592764928) ){ goto $label$3 }
	*($3 + [164]) = [12]
	*($3 + [160]) = [9168]
	*($3 + [80]) = *($3 + [160])
	CALL $16(($3 + [168]), ($3 + [80]))
	if ( ((int_64)$1 == (int_64)7035937925273752880) ){ goto $label$3 }
	*($3 + [164]) = [7]
	*($3 + [160]) = [9180]
	*($3 + [72]) = *($3 + [160])
	CALL $16(($3 + [168]), ($3 + [72]))
	if ( ((int_64)$1 != (int_64)-6795672337388666880) ){ goto $label$2 }
	
.LABEL $label$3
	*($3 + [164]) = [8]
	*($3 + [160]) = [8861]
	*($3 + [64]) = *($3 + [160])
	CALL $16(($3 + [168]), ($3 + [64]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [1]
	*($3) = *($3 + [152])
	CALL $40($0, $1, $3)
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)-3075276113332541169) ){ goto $label$9 }
	if ( ((int_64)$2 > (int_64)4229853260945440767) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-3075276113332541168) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)3626399668466352128) ){ goto $label$1 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [2]
	*($3 + [24]) = *($3 + [128])
	CALL $41($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-7297699337563275264) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-6217917475468607488) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4994130327835885568) ){ goto $label$1 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [3]
	*($3 + [48]) = *($3 + [104])
	CALL $42($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)4229853260945440768) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)8421049960203129232) ){ goto $label$1 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [4]
	*($3 + [8]) = *($3 + [144])
	CALL $43($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [124]) = [0]
	*($3 + [120]) = [5]
	*($3 + [32]) = *($3 + [120])
	CALL $41($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [140]) = [0]
	*($3 + [136]) = [6]
	*($3 + [16]) = *($3 + [136])
	CALL $43($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [116]) = [0]
	*($3 + [112]) = [7]
	*($3 + [40]) = *($3 + [112])
	CALL $44($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [100]) = [0]
	*($3 + [96]) = [8]
	*($3 + [56]) = *($3 + [96])
	CALL $45($1, $1, ($3 + [56]))
	
.LABEL $label$1
	CALL $99([0])
	$global$0 = ($3 + [176])
}

void .FUNC $36 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$5 = ($global$0 - [448])
	$global$0 = $5
	*($5 + [360]) = $1
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$1 }
	$7 = *($4)
	$6 = CALL $113([8531])
	if ( ((int_32)$6 != (int_32)( *($4 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$2 }
	if ( (CALL $89($4, [0], [-1], [8531], $6) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert(CALL $fimport$13($1), [8532])
	CALL eosio_assert(((int_64)*($0) == (int_64)$2), [8552])
	*((($5 + [320]) + [32])) = [0]
	*($5 + [336]) = (int_64)-1
	$1 = *($0)
	*($5 + [320]) = $1
	*($5 + [328]) = $1
	*($5 + [344]) = (int_64)0
	$7 = CALL db_lowerbound_i64($1, $1, (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $2(($5 + [320]), $7)
	*((($5 + [280]) + [32])) = [0]
	*($5 + [296]) = (int_64)-1
	*($5 + [304]) = (int_64)0
	$1 = *($0)
	*($5 + [280]) = $1
	*($5 + [288]) = $1
	$7 = CALL db_find_i64($1, $1, (int_64)-4060986516896743424, (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$7) < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $10(($5 + [280]), $7)
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)($5 + [280])), [9611])
	$9 = ($3 + [8])
	CALL eosio_assert(((int_64)*(($7 + [16])) == (int_64)*($9)), [8941])
	$6 = [0]
	if ( ((int_64)*($7 + [8]) > (int_64)*($3)) ){ goto $label$4 }
	CALL eosio_assert(((int_64)*(($7 + [32])) == (int_64)*($9)), [8941])
	$6 = ((int_64)*($7 + [24]) >= (int_64)*($3))
	
.LABEL $label$4
	CALL eosio_assert($6, [8599])
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$6 }
	$7 = uint_32($7 >> [1])
	$10 = ($4 + [1])
	goto $label$5 
	
.LABEL $label$6
	$7 = *(($4 + [4]))
	$10 = *($4 + [8])
	
.LABEL $label$5
	$11 = [0]
	$6 = CALL $113([8628])
	if ( ($6 == 0) ){ goto $label$7 }
	$12 = ($10 + $7)
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$9 }
	$9 = $10
	
.LOOP $label$10:
	$7 = (($7 - $6) + [1])
	if ( ($7 == 0) ){ goto $label$9 }
	$7 = CALL $111($9, [45], $7)
	if ( ($7 == 0) ){ goto $label$9 }
	if ( (CALL $112($7, [8628], $6) == 0) ){ goto $label$8 }
	$9 = ($7 + [1])
	$7 = ($12 - $9)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$10 }
	
.LABEL $label$9
	$7 = $12
	
.LABEL $label$8
	$11 = ( [-1] ? ($7 - $10) : ((int_32)$7 == (int_32)$12) )
	
.LABEL $label$7
	$12 = CALL $81(($5 + [264]), $4, [0], $11, $4)
	*(($5 + [376])) = [0]
	*($5 + [368]) = (int_64)0
	$7 = CALL $113([8531])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$27 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$30 }
	*($5 + [368]) = ($7 << [1])
	$6 = (($5 + [368]) | [1])
	if ( $7 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$9 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($9)
	*($5 + [368]) = ($9 | [1])
	*($5 + [376]) = $6
	*($5 + [372]) = $7
	
.LABEL $label$29
	CALL memcpy($6, [8531], $7)
	
.LABEL $label$28
	$10 = [0]
	*(($6 + $7)) = [0]
	$15 = ($7 & [1])
	$7 = *($5 + [368])
	$9 = ($7 & [1])
	$7 = *($5 + [264])
	$13 = uint_32($7 >> [1])
	$14 = ( *($12 + [4]) ? $13 : $9 )
	if ( ((int_32)$14 != (int_32)( *($5 + [372]) ? uint_32($7 >> [1]) : $15 )) ){ goto $label$33 }
	$7 = ( *($5 + [376]) ? (($5 + [368]) | [1]) : $15 )
	$6 = ($12 + [1])
	if ( $9 ){ goto $label$35 }
	if ( ($14 == 0) ){ goto $label$34 }
	$10 = [0]
	$9 = ([0] - $13)
	
.LOOP $label$36:
	if ( ((int_32)*($6) != (int_32)*($7)) ){ goto $label$33 }
	$7 = ($7 + [1])
	$6 = ($6 + [1])
	$9 = ($9 + [1])
	if ( $9 ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$35
	if ( ($14 == 0) ){ goto $label$34 }
	$10 = (CALL $112(( *($12 + [8]) ? $6 : $9 ), $7, $14) == 0)
	if ( (*($5 + [368]) & [1]) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$10 = [1]
	
.LABEL $label$33
	if ( ($15 == 0) ){ goto $label$31 }
	
.LABEL $label$32
	CALL _ZdlPv(*($5 + [376]))
	
.LABEL $label$31
	if ( $10 ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($8 + [42]) ^ (int_32)[1]), [8630])
	$1 = CALL $92($12, [0], [10])
	*($5 + [256]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)-2) <= (int_64)95), [8642])
	CALL eosio_assert((uint_64)(((uint_64)((int_64)((uint_64)((int_64))((int_64)10000 - *($0 + [32])) * (int_64)100) / (uint_64)((int_64)*($5 + [256]) + (int_64)-1)) * (int_64)*($3)) / (uint_64)(int_64)10000) <= ((int_64)CALL $20($0, (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)) + (int_64)*($3))), [8668])
	*((($5 + [240]) + [8])) = [0]
	*($5 + [240]) = (int_64)0
	$7 = CALL $113([8531])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$39 }
	*($5 + [240]) = ($7 << [1])
	$6 = (($5 + [240]) | [1])
	if ( $7 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$9 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($9)
	*($5 + [240]) = ($9 | [1])
	*($5 + [248]) = $6
	*($5 + [244]) = $7
	
.LABEL $label$38
	CALL memcpy($6, [8531], $7)
	
.LABEL $label$37
	*(($6 + $7)) = [0]
	*(($5 + [232])) = [0]
	*($5 + [224]) = (int_64)0
	$7 = CALL $113([8531])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$42 }
	*($5 + [224]) = ($7 << [1])
	$6 = (($5 + [224]) | [1])
	if ( $7 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$9 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($9)
	*($5 + [224]) = ($9 | [1])
	*($5 + [232]) = $6
	*($5 + [228]) = $7
	
.LABEL $label$41
	CALL memcpy($6, [8531], $7)
	
.LABEL $label$40
	$9 = [0]
	*(($6 + $7)) = [0]
	if ( ((int_32)$11 == (int_32)[-1]) ){ goto $label$43 }
	$6 = CALL $81(($5 + [368]), $4, ($11 + [1]), [-1], $4)
	$7 = *($5 + [368])
	$10 = *($6 + [8])
	$11 = *($6 + [4])
	$4 = CALL $113([8628])
	if ( ($4 == 0) ){ goto $label$48 }
	$9 = ($7 & [1])
	$7 = ( $11 ? uint_32($7 >> [1]) : $9 )
	if ( ((int_32)$7 < (int_32)$4) ){ goto $label$47 }
	$10 = ( $10 ? ($6 + [1]) : $9 )
	$11 = ($10 + $7)
	$9 = $10
	
.LOOP $label$49:
	$7 = (($7 - $4) + [1])
	if ( ($7 == 0) ){ goto $label$47 }
	$7 = CALL $111($9, [45], $7)
	if ( ($7 == 0) ){ goto $label$47 }
	if ( (CALL $112($7, [8628], $4) == 0) ){ goto $label$50 }
	$9 = ($7 + [1])
	$7 = ($11 - $9)
	if ( ((int_32)$7 >= (int_32)$4) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$50
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$47 }
	$9 = ($7 - $10)
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$47 }
	
.LABEL $label$48
	CALL $81(($5 + [40]), $6, [0], $9, $6)
	if ( (*($5 + [240]) & [1]) ){ goto $label$46 }
	*($5 + [240]) = [0]
	goto $label$45 
	
.LABEL $label$47
	CALL $82(($5 + [240]), $6)
	if ( (*($5 + [368]) & [1]) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	*(*($5 + [248])) = [0]
	*($5 + [244]) = [0]
	
.LABEL $label$45
	CALL $84(($5 + [240]), [0])
	*((($5 + [240]) + [8])) = *((($5 + [40]) + [8]))
	*($5 + [240]) = *($5 + [40])
	CALL $81(($5 + [40]), $6, ($9 + [1]), [-1], $6)
	if ( (*($5 + [224]) & [1]) ){ goto $label$52 }
	*($5 + [224]) = [0]
	goto $label$51 
	
.LABEL $label$52
	*(*($5 + [232])) = [0]
	*($5 + [228]) = [0]
	
.LABEL $label$51
	CALL $84(($5 + [224]), [0])
	*((($5 + [224]) + [8])) = *((($5 + [40]) + [8]))
	*($5 + [224]) = *($5 + [40])
	if ( ((*($5 + [368]) & [1]) == 0) ){ goto $label$43 }
	
.LABEL $label$44
	CALL _ZdlPv(*(($6 + [8])))
	
.LABEL $label$43
	*($5 + [44]) = [0]
	*($5 + [40]) = [8941]
	*($5 + [32]) = *($5 + [40])
	*($5 + [216]) = *(CALL $16(($5 + [368]), ($5 + [32])))
	$4 = ($4 & [1])
	$4 = *($5 + [240])
	$6 = uint_32($4 >> [1])
	$7 = *($5 + [244])
	$9 = CALL $113([8531])
	if ( ((int_32)$9 != (int_32)( $7 ? $6 : $4 )) ){ goto $label$54 }
	if ( (CALL $89(($5 + [240]), [0], [-1], [8531], $9) == 0) ){ goto $label$53 }
	$4 = *($5 + [240])
	$6 = uint_32($4 >> [1])
	$4 = ($4 & [1])
	$7 = *($5 + [244])
	
.LABEL $label$54
	*($5 + [204]) = ( $7 ? $6 : $4 )
	$7 = (($5 + [240]) | [1])
	*($5 + [200]) = ( *($5 + [248]) ? $7 : $4 )
	*($5 + [24]) = *($5 + [200])
	if ( (CALL is_account(*(CALL $16(($5 + [208]), ($5 + [24])))) == 0) ){ goto $label$53 }
	$4 = *($5 + [240])
	$6 = ($4 & [1])
	$9 = ($5 + [248])
	*($5 + [192]) = ( *($9) ? $7 : $6 )
	*($5 + [196]) = ( *($5 + [244]) ? uint_32($4 >> [1]) : $6 )
	*($5 + [16]) = *($5 + [192])
	if ( ((int_64)*(CALL $16(($5 + [368]), ($5 + [16]))) == (int_64)*($5 + [360])) ){ goto $label$53 }
	$4 = *($5 + [240])
	$6 = ($4 & [1])
	*($5 + [184]) = ( *($9) ? $7 : $6 )
	*($5 + [188]) = ( *($5 + [244]) ? uint_32($4 >> [1]) : $6 )
	*($5 + [8]) = *($5 + [184])
	*($5 + [216]) = *(CALL $16(($5 + [368]), ($5 + [8])))
	
.LABEL $label$53
	*($5 + [176]) = *($8 + [48])
	$2 = *($0)
	CALL eosio_assert([1], [9420])
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)($5 + [320])), [9455])
	CALL eosio_assert(((int_64)*($5 + [320]) == (int_64)CALL $fimport$3()), [9501])
	*($8 + [48]) = ((int_64)*($8 + [48]) + (int_64)1)
	$1 = *($8)
	CALL eosio_assert([1], [9552])
	CALL eosio_assert([1], [8869])
	CALL memcpy(($5 + [368]), $8, [8])
	CALL eosio_assert([1], [8869])
	CALL memcpy((($5 + [368]) | [8]), ($8 + [8]), [34])
	*($5 + [40]) = *(($8 + [42]))
	CALL eosio_assert([1], [8869])
	CALL memcpy((($5 + [368]) + [42]), ($5 + [40]), [1])
	CALL eosio_assert([1], [8869])
	CALL memcpy(($5 + [411]), ($8 + [48]), [8])
	CALL db_update_i64(*($8 + [60]), $2, ($5 + [368]), [51])
	$4 = ($5 + [336])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$55 }
	*($4) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$55
	*(($5 + [400])) = [0]
	*($5 + [384]) = (int_64)-1
	*($5 + [392]) = (int_64)0
	$1 = *($0)
	*($5 + [368]) = $1
	*($5 + [376]) = $1
	*($5 + [168]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL $93(($5 + [120]), *($5 + [176]))
	*((($5 + [104]) + [8])) = [0]
	*($5 + [104]) = (int_64)0
	$4 = CALL $113([8686])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$58 }
	*($5 + [104]) = ($4 << [1])
	$6 = (($5 + [104]) | [1])
	$7 = $6
	if ( $4 ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	$6 = (($4 + [16]) & [-16])
	$7 = CALL _Znwj($6)
	*($5 + [104]) = ($6 | [1])
	*($5 + [112]) = $7
	*($5 + [108]) = $4
	$6 = (($5 + [104]) | [1])
	
.LABEL $label$57
	CALL memcpy($7, [8686], $4)
	
.LABEL $label$56
	*(($7 + $4)) = [0]
	$4 = *($5 + [104])
	$7 = ($4 & [1])
	$4 = CALL $88(($5 + [120]), ( *($5 + [112]) ? $6 : $7 ), ( *($5 + [108]) ? uint_32($4 >> [1]) : $7 ))
	$7 = ($4 + [8])
	*((($5 + [136]) + [8])) = *($7)
	*($5 + [136]) = *($4)
	*($4) = (int_64)0
	*($7) = [0]
	$4 = *($5 + [224])
	$7 = ($4 & [1])
	$4 = CALL $88(($5 + [136]), ( *($5 + [232]) ? (($5 + [224]) | [1]) : $7 ), ( *($5 + [228]) ? uint_32($4 >> [1]) : $7 ))
	$7 = ($4 + [8])
	*((($5 + [432]) + [8])) = *($7)
	*($5 + [432]) = *($4)
	*($4) = (int_64)0
	*($7) = [0]
	*((($5 + [88]) + [8])) = [0]
	*($5 + [88]) = (int_64)0
	$4 = CALL $113([8686])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$61 }
	*($5 + [88]) = ($4 << [1])
	$6 = (($5 + [88]) | [1])
	$7 = $6
	if ( $4 ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$61
	$6 = (($4 + [16]) & [-16])
	$7 = CALL _Znwj($6)
	*($5 + [88]) = ($6 | [1])
	*($5 + [96]) = $7
	*($5 + [92]) = $4
	$6 = (($5 + [88]) | [1])
	
.LABEL $label$60
	CALL memcpy($7, [8686], $4)
	
.LABEL $label$59
	*(($7 + $4)) = [0]
	$4 = *($5 + [88])
	$7 = ($4 & [1])
	$4 = CALL $88(($5 + [432]), ( *($5 + [96]) ? $6 : $7 ), ( *($5 + [92]) ? uint_32($4 >> [1]) : $7 ))
	$7 = ($4 + [8])
	*((($5 + [40]) + [8])) = *($7)
	*($5 + [40]) = *($4)
	*($4) = (int_64)0
	*($7) = [0]
	CALL $93(($5 + [72]), *($5 + [168]))
	$4 = *($5 + [72])
	$7 = ($4 & [1])
	$4 = CALL $88(($5 + [40]), ( *($5 + [80]) ? (($5 + [72]) | [1]) : $7 ), ( *($5 + [76]) ? uint_32($4 >> [1]) : $7 ))
	$7 = ($4 + [8])
	*((($5 + [152]) + [8])) = *($7)
	*($5 + [152]) = *($4)
	*($4) = (int_64)0
	*($7) = [0]
	if ( (*($5 + [72]) & [1]) ){ goto $label$63 }
	if ( (*($5 + [40]) & [1]) ){ goto $label$62 }
	goto $label$22 
	
.LABEL $label$63
	CALL _ZdlPv(*((($5 + [72]) + [8])))
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$22 }
	
.LABEL $label$62
	CALL _ZdlPv(*($5 + [48]))
	$4 = [1]
	if ( ((*($5 + [88]) & [1]) == 0) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$27
	CALL $79(($5 + [368]))
	
.LABEL $label$26
	CALL $79(($5 + [240]))
	
.LABEL $label$25
	CALL $79(($5 + [224]))
	
.LABEL $label$24
	CALL $79(($5 + [104]))
	
.LABEL $label$23
	CALL $79(($5 + [88]))
	
.LABEL $label$22
	$4 = [1]
	if ( (*($5 + [88]) & [1]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( (*($5 + [432]) & $4) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL _ZdlPv(*(($5 + [96])))
	if ( ((*($5 + [432]) & $4) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*($5 + [440]))
	$4 = [1]
	if ( ((*($5 + [136]) & [1]) == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$4 = [1]
	if ( (*($5 + [136]) & [1]) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($5 + [104]) & $4) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*($5 + [144]))
	if ( ((*($5 + [104]) & $4) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($5 + [112])))
	if ( (*($5 + [120]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( ((*($5 + [120]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*($5 + [128]))
	
.LABEL $label$12
	$1 = *($0)
	*($5 + [52]) = $3
	*($5 + [44]) = ($5 + [360])
	*($5 + [40]) = ($5 + [176])
	*($5 + [48]) = ($5 + [216])
	*($5 + [56]) = ($5 + [256])
	*($5 + [60]) = ($5 + [224])
	*($5 + [64]) = ($5 + [152])
	*($5 + [68]) = ($5 + [168])
	*($5 + [136]) = $1
	CALL eosio_assert(((int_64)*($5 + [368]) == (int_64)CALL $fimport$3()), [9215])
	*($5 + [436]) = ($5 + [40])
	*($5 + [432]) = ($5 + [368])
	*($5 + [440]) = ($5 + [136])
	*(($0 = CALL _Znwj([104])) + [16]) = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [56 align=4]) = (int_64)0
	*($0 + [64 align=4]) = (int_64)0
	*($0 + [72 align=4]) = (int_64)0
	*($0 + [88]) = ($5 + [368])
	CALL $37(($5 + [432]), $0)
	*($5 + [120]) = $0
	$1 = *($0)
	*($5 + [432]) = $1
	$3 = *($0 + [92])
	*($5 + [104]) = $3
	$7 = ($5 + [396])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($5 + [400]))) ){ goto $label$66 }
	*($4 + [8]) = $1
	*($4 + [16]) = $3
	*($5 + [120]) = [0]
	*($4) = $0
	*($7) = ($4 + [24])
	$0 = *($5 + [120])
	*($5 + [120]) = [0]
	if ( $0 ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$66
	CALL $38(($5 + [392]), ($5 + [120]), ($5 + [432]), ($5 + [104]))
	$0 = *($5 + [120])
	*($5 + [120]) = [0]
	if ( ($0 == 0) ){ goto $label$64 }
	
.LABEL $label$65
	if ( ((*($0 + [68]) & [1]) == 0) ){ goto $label$67 }
	CALL _ZdlPv(*(($0 + [76])))
	
.LABEL $label$67
	if ( ((*($0 + [56]) & [1]) == 0) ){ goto $label$68 }
	CALL _ZdlPv(*(($0 + [64])))
	
.LABEL $label$68
	CALL _ZdlPv($0)
	
.LABEL $label$64
	if ( ((*($5 + [152]) & [1]) == 0) ){ goto $label$69 }
	CALL _ZdlPv(*($5 + [160]))
	
.LABEL $label$69
	$3 = *($5 + [392])
	if ( ($3 == 0) ){ goto $label$70 }
	$7 = ($5 + [396])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$72 }
	
.LOOP $label$73:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$74 }
	if ( ((*($0 + [68]) & [1]) == 0) ){ goto $label$75 }
	CALL _ZdlPv(*(($0 + [76])))
	
.LABEL $label$75
	if ( ((*($0 + [56]) & [1]) == 0) ){ goto $label$76 }
	CALL _ZdlPv(*(($0 + [64])))
	
.LABEL $label$76
	CALL _ZdlPv($0)
	
.LABEL $label$74
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$73 }
	$0 = *(($5 + [392]))
	goto $label$71 
	
.LABEL $label$72
	$0 = $3
	
.LABEL $label$71
	*($7) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$70
	if ( ((*($5 + [224]) & [1]) == 0) ){ goto $label$77 }
	CALL _ZdlPv(*(($5 + [232])))
	
.LABEL $label$77
	if ( ((*($5 + [240]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($5 + [248]))
	
.LABEL $label$11
	if ( ((*($5 + [264]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($12 + [8]))
	
.LABEL $label$3
	$3 = *($5 + [304])
	if ( ($3 == 0) ){ goto $label$78 }
	$7 = ($5 + [308])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$80 }
	
.LOOP $label$81:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$82 }
	CALL _ZdlPv($4)
	
.LABEL $label$82
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$81 }
	$0 = *(($5 + [304]))
	goto $label$79 
	
.LABEL $label$80
	$0 = $3
	
.LABEL $label$79
	*($7) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$78
	$3 = *($5 + [344])
	if ( ($3 == 0) ){ goto $label$1 }
	$7 = ($5 + [348])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$84 }
	
.LOOP $label$85:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$86 }
	CALL _ZdlPv($4)
	
.LABEL $label$86
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$85 }
	$0 = *(($5 + [344]))
	goto $label$83 
	
.LABEL $label$84
	$0 = $3
	
.LABEL $label$83
	*($7) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($5 + [448])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [16]) = *(*($4 + [8]))
	$5 = *($0)
	$6 = *($4 + [12])
	*(($1 + [32])) = *(($6 + [8]))
	*($1 + [24]) = *($6)
	*($1 + [40]) = (int_64)1
	*($1 + [48]) = *(*($4 + [16]))
	CALL $82(($1 + [56]), *($4 + [20]))
	CALL $82(($1 + [68]), *($4 + [24]))
	*($1 + [80]) = *(*($4 + [28]))
	$4 = *($1 + [56])
	$6 = ( *(($1 + [60])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [64])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	$6 = *(($1 + [68]))
	$6 = ( *(($1 + [72])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$4 = ($6 + $4)
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $116($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL $69($3, $1)
	$7 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($5 + [8]), (int_64)3617214760481193984, *(*($0 + [8])), $7, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $119($2)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $79 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9187])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $116($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9210])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9210])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $68(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $119($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9810])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9855])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9905])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [104])))
	
.LABEL $label$10
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [64])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [104])))
	
.LABEL $label$14
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [64])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [268])))
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [9810])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9855])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9905])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [68]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [76])))
	
.LABEL $label$10
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [64])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((*($5 + [68]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [76])))
	
.LABEL $label$14
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [64])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [92]))
}