(data (i32.const 4) "\a0h\00\00")
(data (i32.const 16) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 80) "invalid symbol name\00")
(data (i32.const 112) "unexpected asset symbol input\00")
(data (i32.const 144) "invalid sell eos\00")
(data (i32.const 176) "invalid sell dep\00")
(data (i32.const 208) "only accepts EOS or FOS\00")
(data (i32.const 240) "invalid bet num\00")
(data (i32.const 256) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 320) "game id already exist!\00")
(data (i32.const 352) "cannot create objects in table of another contract\00")
(data (i32.const 416) "cannot pass end iterator to erase\00")
(data (i32.const 464) "cannot increment end iterator\00")
(data (i32.const 496) "cannot pass end iterator to modify\00")
(data (i32.const 544) "object passed to modify is not in multi_index\00")
(data (i32.const 592) "cannot modify objects in table of another contract\00")
(data (i32.const 656) "updater cannot change primary key when modifying an object\00")
(data (i32.const 720) "write\00")
(data (i32.const 736) "object passed to erase is not in multi_index\00")
(data (i32.const 784) "cannot erase objects in table of another contract\00")
(data (i32.const 848) "attempt to remove object that was not in multi_index\00")
(data (i32.const 912) "error reading iterator\00")
(data (i32.const 944) "read\00")
(data (i32.const 960) "cannot choose more than 4 colors\00")
(data (i32.const 1008) ",\00")
(data (i32.const 1024) "invalid! 1 \00")
(data (i32.const 1040) "invalid!\00")
(data (i32.const 1056) "invalid! 2\00")
(data (i32.const 1072) "invalid\00")
(data (i32.const 1088) "invalid 3\00")
(data (i32.const 1104) "get\00")
(data (i32.const 1120) "invailed\00")
(data (i32.const 1136) "bj type invalid\00")
(data (i32.const 1152) "card num invalid\00")
(data (i32.const 1184) "<\00\00\00\c8\00\00\00&\02\00\00\8a\02\00\00\00\00\00\00\0f\00\00\00Z\00\00\00\ea\01\00\000\02\00\00X\02\00\00\00\00\00\00d\00\00\00Z\00\00\00^\01\00\00\f4\01\00\00\00\00\00\00d\00\00\00d\00\00\00\a0\00\00\00\9a\01\00\00\00\00\00\00d\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 1296) " real_per:\00")
(data (i32.const 1312) "invalid bj per\00")
(data (i32.const 1328) "\0b\00\00\00%\00\00\00\0c\00\00\00\0e\00\00\00\05\00\00\00")
(data (i32.const 1360) "bj index table empty\00")
(data (i32.const 1392) "bj index quatity err\00")
(data (i32.const 1424) "multiplication overflow\00")
(data (i32.const 1456) "multiplication underflow\00")
(data (i32.const 1488) "divide by zero\00")
(data (i32.const 1504) "signed division overflow\00")
(data (i32.const 1536) "global is empty\00")
(data (i32.const 1552) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1616) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1664) "eosio.token\00")
(data (i32.const 1680) "farmeosbank4\00")
(data (i32.const 1696) "coming\00")
(data (i32.const 1712) "farmeostest3\00")
(data (i32.const 1728) "onerror\00")
(data (i32.const 1744) "eosio\00")
(data (i32.const 1760) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 1824) "farmeosbankx\00")
(data (i32.const 1840) "transfer\00")
(data (i32.const 10256) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 10352) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 10368) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 10384) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$1))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_end_i64" (func $fimport$5 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$11 (param i32)))
(import "env" "db_store_i64" (func $fimport$12 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$13 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$14 (param i32 i32)))
(import "env" "memcpy" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$17 (param i32)))
(import "env" "printui" (func $fimport$18 (param i64)))
(import "env" "read_action_data" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$20 (param i64)))
(import "env" "require_auth2" (func $fimport$21 (param i64 i64)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN14exchange_state19convert_to_exchangeERNS_9connectorEN5eosio5assetE" (func $5))
(export "_ZN14exchange_state21convert_from_exchangeERNS_9connectorEN5eosio5assetE" (func $6))
(export "_ZN14exchange_state7convertEN5eosio5assetENS0_11symbol_typeE" (func $7))
(export "_ZN14exchange_state21GetSupplyCurrentPriceEv" (func $8))
(export "_ZN7farmeos8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $9))
(export "_ZN7farmeos10record_betEyN5eosio5assetEymmyRm" (func $10))
(export "_ZN7farmeos11record_roulEyN5eosio5assetEymmyRm" (func $21))
(export "_ZN7farmeos11record_mineEyN5eosio5assetEymmyRmNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERNS3_6vectorIcS8_EE" (func $28))
(export "_ZN7farmeos9record_bjEyN5eosio5assetEymmyRmNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERNS3_6vectorIcS8_EE" (func $45))
(export "_ZN7farmeos3betEyN5eosio5assetEymmymNSt3__16vectorIcNS2_9allocatorIcEEEE" (func $58))
(export "_ZN7farmeos10update_betEyxmy" (func $63))
(export "_ZN7farmeos12update_roulsEyxmy" (func $64))
(export "_ZN7farmeos12update_minesEyxmy" (func $65))
(export "_ZN7farmeos9update_bjEyxNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEym" (func $66))
(export "_ZN7farmeos6updateEmy" (func $69))
(export "_ZN7farmeos10updatelineExx" (func $74))
(export "_ZN7farmeos8updatebjExx" (func $76))
(export "_ZN7farmeos5cleanEl" (func $79))
(export "_ZN7farmeos8updateuiEy" (func $80))
(export "_ZN7farmeos5loginEy" (func $82))
(export "apply" (func $83))
(export "malloc" (func $96))
(export "free" (func $99))
(export "pow" (func $109))
(export "sqrt" (func $110))
(export "fabs" (func $111))
(export "scalbn" (func $112))
(export "atoi" (func $113))
(export "memchr" (func $114))
(export "memcmp" (func $115))
(export "strlen" (func $116))
(table $0 9 9 anyfunc)
(elem (i32.const 0) $117 $9 $80 $76 $79 $82 $74 $69 $58)



int_32 .FUNC $98 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10342]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10344])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10342]) = [1]
	$7 = ($7 << [16])
	*([0] + [10344]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10344])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10344]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10342]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10342]) = [1]
	$3 = ($3 << [16])
	*([0] + [10344]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10344])
	
.LABEL $label$8
	*([0] + [10344]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10236])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10044]
	$1 = (((int_32)$2 * (int_32)[12]) + [10044])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [944])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [944])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [944])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $40(*($1), ($0 + [32]))
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $107(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $107(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $101(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $101(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $97([1852], $0)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $98($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10256])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $90 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [232]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [236])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL $101($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$2 = *(($0 + [232]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $101($2)
	
.LABEL $label$1
	$1 = *(($0 + [192]))
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($0 + [196])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	if ( ((*($2 + [88]) & [1]) == 0) ){ goto $label$11 }
	CALL $101(*(($2 + [96])))
	
.LABEL $label$11
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$12 }
	CALL $101(*(($2 + [48])))
	
.LABEL $label$12
	CALL $101($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$2 = *(($0 + [192]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $101($2)
	
.LABEL $label$6
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$13 }
	$3 = ($0 + [156])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$17 }
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$18 }
	CALL $101(*(($4 + [88])))
	
.LABEL $label$18
	CALL $101($4)
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($0 + [152]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $1
	
.LABEL $label$14
	*($3) = $1
	CALL $101($2)
	
.LABEL $label$13
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$19 }
	$3 = ($0 + [116])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$21 }
	
.LOOP $label$22:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$23 }
	CALL $101($4)
	
.LABEL $label$23
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$22 }
	$2 = *(($0 + [112]))
	goto $label$20 
	
.LABEL $label$21
	$2 = $1
	
.LABEL $label$20
	*($3) = $1
	CALL $101($2)
	
.LABEL $label$19
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$24 }
	$3 = ($0 + [76])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$26 }
	
.LOOP $label$27:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$28 }
	CALL $101($4)
	
.LABEL $label$28
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$27 }
	$2 = *(($0 + [72]))
	goto $label$25 
	
.LABEL $label$26
	$2 = $1
	
.LABEL $label$25
	*($3) = $1
	CALL $101($2)
	
.LABEL $label$24
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$29 }
	$3 = ($0 + [36])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$31 }
	
.LOOP $label$32:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$33 }
	CALL $101($4)
	
.LABEL $label$33
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$32 }
	$2 = *(($0 + [32]))
	goto $label$30 
	
.LABEL $label$31
	$2 = $1
	
.LABEL $label$30
	*($3) = $1
	CALL $101($2)
	
.LABEL $label$29
	return $0
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [944])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [944])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [944])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [944])
	CALL memcpy(($0 + [32]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	*($4 + [8]) = $0
	CALL $93(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [96])
	*([0] + [4]) = $13
	*((($13 + [32]) + [12])) = *(($1 + [20]))
	*(($9 = (($13 + [32]) + [8]))) = *(($1 + [16]))
	*($13 + [32]) = *($1 + [8])
	*($13 + [36]) = *(($1 + [12]))
	$2 = *($1)
	$7 = *($1 + [48])
	$6 = *($1 + [40])
	$5 = *($1 + [36])
	$4 = *($1 + [32])
	$3 = *($1 + [24])
	$11 = [0]
	*($13 + [16]) = [0]
	*($13 + [20]) = [0]
	*($13 + [24]) = [0]
	$8 = (*(($1 + [56])) - *($1 + [52]))
	if ( ($8 == 0) ){ goto $label$6 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	$12 = CALL $100($8)
	*(($13 + [24])) = ($12 + $8)
	*($13 + [16]) = $12
	*($13 + [20]) = $12
	$11 = *(($1 + [52]))
	$1 = (*(($1 + [56])) - $11)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($12, $11, $1)
	$11 = ($12 + $1)
	*($13 + [20]) = $11
	goto $label$4 
	
.LABEL $label$6
	$12 = [0]
	$8 = [0]
	goto $label$3 
	
.LABEL $label$5
	$11 = $12
	
.LABEL $label$4
	$8 = $12
	
.LABEL $label$3
	*((($13 + [48]) + [8])) = *($9)
	*($13 + [48]) = *($13 + [32])
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$9 = (*(*($0)) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($9) + $1))
	
.LABEL $label$7
	*(($10 = (($13 + [80]) + [8]))) = *((($13 + [48]) + [8]))
	*($13 + [80]) = *($13 + [48])
	*($13 + [64]) = [0]
	*($13 + [72]) = [0]
	*($13 + [68]) = [0]
	$0 = ($11 - $8)
	if ( ($0 == 0) ){ goto $label$8 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$1 }
	$8 = CALL $100($0)
	*(($13 + [72])) = ($8 + $0)
	*($13 + [64]) = $8
	*($13 + [68]) = $8
	$11 = ($11 - $12)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($8, $12, $11)
	*($13 + [68]) = ($8 + $11)
	
.LABEL $label$8
	*(($13 + [8])) = *($10)
	*($13) = *($13 + [80])
	CALL void $9((int_32 $2), (int_64 $13), (int_32 $3), (int_64 $4), (int_32 $5), (int_32 $6), (int_64 $7), (int_32 ($13 + [64])), (int_32 $1))
	$1 = *($13 + [64])
	if ( ($1 == 0) ){ goto $label$9 }
	*($13 + [68]) = $1
	CALL $101($1)
	
.LABEL $label$9
	$1 = *($13 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	*($13 + [20]) = $1
	CALL $101($1)
	
.LABEL $label$10
	*([0] + [4]) = ($13 + [96])
	return (unreachable)
	
.LABEL $label$2
	CALL $106(($13 + [16]))
	
.LABEL $label$1
	CALL $106(($13 + [64]))
	(unreachable)
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy(($3 + [36]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy(($0 + [40]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy(($0 + [48]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	CALL $41(*($1), ($0 + [52]))
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [720])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [720])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_32 $18
	int_32 $19
	$18 = (*([0] + [4]) - [80])
	*([0] + [4]) = $18
	$19 = *($0 + [4])
	*($1) = *(*($19))
	*($1 + [8]) = *(*($19 + [4]))
	$2 = *($0)
	*($1 + [16]) = *(*($19 + [8]))
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [32]) = *(*($19 + [12]))
	$16 = *($19 + [16])
	*($1 + [56]) = *($16)
	*(($1 + [64])) = *(($16 + [8]))
	$8 = ($1 + [88])
	CALL $103($8, *($19 + [20]))
	*(($19 = $18) + [16]) = [0]
	*($19) = ($19 + [16])
	$3 = ($1 + [8])
	*($19 + [28]) = $3
	*($19 + [24]) = $1
	$4 = ($1 + [16])
	*($19 + [32]) = $4
	$5 = ($1 + [24])
	*($19 + [36]) = $5
	$6 = ($1 + [32])
	*($19 + [40]) = $6
	$9 = ($1 + [36])
	*($19 + [44]) = $9
	$10 = ($1 + [40])
	*($19 + [48]) = $10
	$7 = ($1 + [56])
	*($19 + [52]) = $7
	$11 = ($1 + [72])
	*($19 + [56]) = $11
	*($19 + [60]) = $8
	$12 = ($1 + [100])
	*($19 + [64]) = $12
	$13 = ($1 + [104])
	*($19 + [68]) = $13
	$14 = ($1 + [112])
	*($19 + [72]) = $14
	$15 = ($1 + [120])
	*($19 + [76]) = $15
	CALL $53(($19 + [24]), $19)
	$16 = *($19 + [16])
	if ( ($16 <= [513]) ){ goto $label$2 }
	$18 = CALL malloc($16)
	goto $label$1 
	
.LABEL $label$2
	$18 = ($18 - (($16 + [15]) & [-16]))
	*([0] + [4]) = $18
	
.LABEL $label$1
	*($19 + [4]) = $18
	*($19) = $18
	*($19 + [8]) = ($18 + $16)
	*($19 + [16]) = $19
	*($19 + [28]) = $3
	*($19 + [24]) = $1
	*($19 + [32]) = $4
	*($19 + [36]) = $5
	*($19 + [40]) = $6
	*($19 + [44]) = $9
	*($19 + [48]) = $10
	*($19 + [52]) = $7
	*($19 + [56]) = $11
	*($19 + [60]) = $8
	*($19 + [64]) = $12
	*($19 + [68]) = $13
	*($19 + [72]) = $14
	*($19 + [76]) = $15
	CALL $54(($19 + [24]), ($19 + [16]))
	$17 = *($1)
	*($1 + [128]) = CALL db_store_i64(*($2 + [8]), (int_64)4318952042648305664, *(*($0 + [8])), $17, $18, $16)
	if ( ($16 <= [513]) ){ goto $label$3 }
	CALL free($18)
	
.LABEL $label$3
	if ( (uint_64)($17 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$17 + (int_64)1) : ((uint_64)$17 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($19 + [80])
}

int_32 .FUNC $48 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [40 align=4]) = (int_64)0
	*($0 + [56]) = (int_64)0
	$2 = [0]
	*(($0 + [48])) = [0]
	*(($3 = ($0 + [64]))) = (int_64)1397703940
	CALL eosio_assert([1], [16])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [80])
	*(($2 = ($0 + [80]))) = (int_64)1397703940
	*($0 + [72]) = (int_64)0
	CALL eosio_assert([1], [16])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [80])
	*(($0 + [96])) = [0]
	*($0 + [88 align=4]) = (int_64)0
	return $0
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($6 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $100(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$6 = ($4 + ((int_32)$2 * (int_32)[12]))
	CALL $107($6, $1)
	$2 = ($4 + ((int_32)$5 * (int_32)[12]))
	$3 = ($6 + [12])
	$5 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$5 = ($4 + [-12])
	
.LOOP $label$7:
	*(($6 + [-12])) = *($5)
	$4 = ($5 + [8])
	*(($6 + [-4])) = *($4)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	$6 = ($6 + [-12])
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	$6 = ([0] - $4)
	$5 = ($5 + [-12])
	
.LOOP $label$9:
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $101(*(($5 + [8])))
	
.LABEL $label$10
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $101($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $100($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $106($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $101($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1104])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $42($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [944])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $41($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $105($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $100($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $105($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $101($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $102($7)
	return (unreachable)
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [912])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $100([48])) + [32]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [4])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [8])
	*($8 + [52]) = ($6 + [16])
	*($8 + [56]) = ($6 + [24])
	CALL $55(($8 + [40]), ($8 + [32]))
	*($6 + [36]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $56(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $101($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [912])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $100([136])
	CALL $48($6)
	*($6 + [124]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [32])
	*($8 + [60]) = ($6 + [36])
	*($8 + [64]) = ($6 + [40])
	*($8 + [68]) = ($6 + [56])
	*($8 + [72]) = ($6 + [72])
	*($8 + [76]) = ($6 + [88])
	*($8 + [80]) = ($6 + [100])
	*($8 + [84]) = ($6 + [104])
	*($8 + [88]) = ($6 + [112])
	*($8 + [92]) = ($6 + [120])
	CALL $57(($8 + [40]), ($8 + [32]))
	*($6 + [128]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [128])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $50(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$10 }
	CALL $101(*(($4 + [96])))
	
.LABEL $label$10
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL $101(*(($4 + [48])))
	
.LABEL $label$11
	CALL $101($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [96])
	return $6
}

void .FUNC _ZN7farmeos9record_bjEyN5eosio5assetEymmyRmNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERNS3_6vectorIcS8_EE (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5, int_64 $6, int_32 $7, int_32 $8, int_32 $9)
{
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [256])
	*([0] + [4]) = $14
	*($14 + [88]) = $1
	*($14 + [80]) = $3
	*($14 + [76]) = $4
	*($14 + [64]) = $6
	*($14 + [56]) = [0]
	*($14 + [48]) = (int_64)0
	CALL $107(($14 + [32]), $8)
	*(($14 + [24])) = [0]
	*($14 + [16]) = (int_64)0
	$4 = CALL strlen([1008])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($14 + [16]) = ($4 << [1])
	$13 = (($14 + [16]) | [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$11 = (($4 + [16]) & [-16])
	$13 = CALL $100($11)
	*($14 + [16]) = ($11 | [1])
	*($14 + [24]) = $13
	*($14 + [20]) = $4
	
.LABEL $label$3
	CALL memcpy($13, [1008], $4)
	
.LABEL $label$2
	*(($13 + $4)) = [0]
	CALL $29($0, ($14 + [32]), ($14 + [16]), ($14 + [48]))
	if ( ((*($14 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $101(*($14 + [24]))
	
.LABEL $label$5
	if ( ((*($14 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $101(*($14 + [40]))
	
.LABEL $label$6
	CALL eosio_assert(((int_32)(*($14 + [52]) - *($14 + [48])) == (int_32)[24]), [1120])
	$4 = *($14 + [48])
	if ( (*($4) & [1]) ){ goto $label$8 }
	$4 = ($4 + [1])
	goto $label$7 
	
.LABEL $label$8
	$4 = *($4 + [8])
	
.LABEL $label$7
	$4 = CALL atoi($4)
	$13 = ($4 + [-1])
	CALL eosio_assert(($13 <= [5]), [1136])
	*($14 + [96]) = $4
	$11 = *($9 + [4])
	if ( ((uint_32)$11 >= (uint_32)*($9 + [8])) ){ goto $label$10 }
	*($11) = $4
	*(($4 = ($9 + [4]))) = (*($4) + [1])
	goto $label$9 
	
.LABEL $label$10
	CALL $30($9, ($14 + [96]))
	
.LABEL $label$9
	$4 = *($14 + [48])
	if ( (*($4 + [12]) & [1]) ){ goto $label$12 }
	$4 = (($4 + [12]) + [1])
	goto $label$11 
	
.LABEL $label$12
	$4 = *(($4 + [20]))
	
.LABEL $label$11
	$4 = CALL atoi($4)
	CALL eosio_assert((($4 + [-1]) <= [5]), [1152])
	*($14 + [96]) = $4
	$11 = ($9 + [4])
	$10 = *($11)
	if ( ((uint_32)$10 >= (uint_32)*(($9 + [8]))) ){ goto $label$14 }
	*($10) = $4
	*($11) = (*($11) + [1])
	goto $label$13 
	
.LABEL $label$14
	CALL $30($9, ($14 + [96]))
	
.LABEL $label$13
	CALL prints([1296])
	$9 = ((((int_32)$13 * (int_32)[5]) + $4) + [-1])
	CALL printui(*((($9 << [2]) + [1184])))
	CALL eosio_assert((uint_32([3111919] >> $9) & [1]), [1312])
	*($7) = *((($13 << [2]) + [1328]))
	$6 = *($14 + [64])
	$11 = *(($0 + [192]))
	$13 = *(($0 + [196]))
	if ( ((int_32)$13 == (int_32)$11) ){ goto $label$15 }
	$9 = ($13 + [-24])
	$7 = ([0] - $11)
	
.LOOP $label$16:
	if ( ((int_64)*(*($9)) == (int_64)$6) ){ goto $label$15 }
	$13 = $9
	$4 = ($9 + [-24])
	$9 = $4
	if ( ((int_32)($4 + $7) != (int_32)[-24]) ){ goto $label$16 }
	
.LABEL $label$15
	$7 = ($0 + [168])
	if ( ((int_32)$13 == (int_32)$11) ){ goto $label$18 }
	$9 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [124]) == (int_32)$7), [256])
	goto $label$17 
	
.LABEL $label$18
	$9 = [0]
	$4 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)4318952042648305664, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$17 }
	$9 = CALL $46($7, $4)
	CALL eosio_assert(((int_32)*($9 + [124]) == (int_32)$7), [256])
	
.LABEL $label$17
	CALL eosio_assert(($9 == 0), [320])
	$4 = ($0 + [208])
	$13 = [0]
	$9 = ($0 + [216])
	$11 = CALL db_lowerbound_i64(*($0 + [208]), *($9), (int_64)4313661929819209728, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$19 }
	CALL $47($4, $11)
	$13 = [1]
	
.LABEL $label$19
	CALL eosio_assert($13, [1360])
	CALL eosio_assert(((int_64)*(CALL $47($4, CALL $fimport$8(*($4), *($9), (int_64)4313661929819209728, (int_64)0)) + [16]) == (int_64)*($2)), [1392])
	$9 = CALL $47($4, CALL $fimport$8(*($4), *($9), (int_64)4313661929819209728, (int_64)0))
	$11 = *($9 + [4])
	$6 = *($0)
	*($14 + [112]) = $2
	*($14 + [116]) = $8
	*($14 + [100]) = ($14 + [88])
	*($14 + [96]) = ($14 + [64])
	*($14 + [104]) = ($14 + [80])
	*($14 + [108]) = ($14 + [76])
	*($14 + [232]) = $6
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$3()), [352])
	*($14 + [176]) = $7
	*($14 + [180]) = ($14 + [96])
	*($14 + [184]) = ($14 + [232])
	$13 = CALL $100([136])
	CALL $48($13)
	*($13 + [124]) = $7
	CALL $49(($14 + [176]), $13)
	*($14 + [248]) = $13
	$6 = *($13)
	*($14 + [176]) = $6
	$10 = *($13 + [128])
	*($14 + [228]) = $10
	$12 = ($0 + [196])
	$8 = *($12)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [200]))) ){ goto $label$21 }
	*($8 + [8]) = $6
	*($8 + [16]) = $10
	*($14 + [248]) = [0]
	*($8) = $13
	*($12) = ($8 + [24])
	goto $label$20 
	
.LABEL $label$21
	CALL $50(($0 + [192]), ($14 + [248]), ($14 + [176]), ($14 + [228]))
	
.LABEL $label$20
	$13 = *($14 + [248])
	*($14 + [248]) = [0]
	if ( ($13 == 0) ){ goto $label$22 }
	if ( ((*($13 + [88]) & [1]) == 0) ){ goto $label$23 }
	CALL $101(*(($13 + [96])))
	
.LABEL $label$23
	if ( ((*($13 + [40]) & [1]) == 0) ){ goto $label$24 }
	CALL $101(*(($13 + [48])))
	
.LABEL $label$24
	CALL $101($13)
	
.LABEL $label$22
	$8 = ($9 + [4])
	$13 = ($11 + [1])
	if ( ($13 <= [201]) ){ goto $label$25 }
	$13 = [0]
	$10 = CALL db_lowerbound_i64(*(($0 + [168])), *(($0 + [176])), (int_64)4318952042648305664, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$26 }
	$13 = CALL $46($7, $10)
	
.LABEL $label$26
	$10 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($10, [416])
	CALL eosio_assert($10, [464])
	$10 = CALL db_next_i64(*($13 + [128]), ($14 + [96]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$27 }
	CALL $46($7, $10)
	
.LABEL $label$27
	CALL $51($7, $13)
	$13 = $11
	
.LABEL $label$25
	$1 = *($0)
	CALL eosio_assert([1], [496])
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$4), [544])
	CALL eosio_assert(((int_64)*(($0 + [208])) == (int_64)CALL $fimport$3()), [592])
	*(($9 + [4])) = $13
	$6 = *($2)
	CALL __multi3($14, $6, (int_64)$6 >> (int_64)63), (int_64)985, (int_64)0)
	$4 = *($9)
	$6 = *(($14 + [8]))
	$3 = *($14)
	CALL eosio_assert(( (uint_64)($3 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [1424])
	CALL eosio_assert(( ((uint_64)$3 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [1456])
	CALL eosio_assert([1], [1488])
	CALL eosio_assert([1], [1504])
	*($9 + [8]) = ((int_64)*($9 + [8]) + (int_64)((int_64)$3 / (int_64)1000))
	CALL eosio_assert(((int_32)$4 == (int_32)*($9)), [656])
	*($14 + [240]) = (($14 + [96]) + [32])
	*($14 + [236]) = ($14 + [96])
	*($14 + [232]) = ($14 + [96])
	*($14 + [248]) = ($14 + [232])
	*($14 + [180]) = $8
	*($14 + [176]) = $9
	*($14 + [184]) = ($9 + [8])
	*($14 + [188]) = ($9 + [16])
	*($14 + [192]) = ($9 + [24])
	CALL $52(($14 + [176]), ($14 + [248]))
	CALL db_update_i64(*(($9 + [36])), $1, ($14 + [96]), [32])
	$9 = ($0 + [224])
	$6 = (CASTING uint_64)(uint_32 $4)
	if ( (uint_64)($6 <= *($9)) ){ goto $label$28 }
	*($9) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$28
	$4 = ($0 + [8])
	$9 = [0]
	$13 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$29 }
	$9 = CALL $12($4, $13)
	
.LABEL $label$29
	$3 = *($0)
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [496])
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$4), [544])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$3()), [592])
	*($9 + [16]) = ((int_64)*($9 + [16]) + (int_64)1)
	$6 = *($9)
	CALL eosio_assert([1], [656])
	*($14 + [240]) = (($14 + [96]) + [76])
	*($14 + [236]) = ($14 + [96])
	*($14 + [232]) = ($14 + [96])
	*($14 + [248]) = ($14 + [232])
	*($14 + [180]) = ($9 + [8])
	*($14 + [176]) = $9
	*($14 + [184]) = ($9 + [16])
	*($14 + [188]) = ($9 + [24])
	*($14 + [192]) = ($9 + [32])
	*($14 + [196]) = ($9 + [36])
	*($14 + [200]) = ($9 + [40])
	*($14 + [204]) = ($9 + [44])
	*($14 + [208]) = ($9 + [48])
	*($14 + [212]) = ($9 + [56])
	*($14 + [216]) = ($9 + [64])
	*($14 + [220]) = ($9 + [72])
	CALL $17(($14 + [176]), ($14 + [248]))
	CALL db_update_i64(*($9 + [84]), $3, ($14 + [96]), [76])
	$9 = ($0 + [24])
	if ( (uint_64)($6 <= *($9)) ){ goto $label$30 }
	*($9) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$30
	$4 = *($14 + [48])
	if ( ($4 == 0) ){ goto $label$31 }
	$9 = *($14 + [52])
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$33 }
	$0 = ([0] - $4)
	$9 = ($9 + [-12])
	
.LOOP $label$34:
	if ( ((*($9) & [1]) == 0) ){ goto $label$35 }
	CALL $101(*(($9 + [8])))
	
.LABEL $label$35
	$9 = ($9 + [-12])
	if ( ((int_32)($9 + $0) != (int_32)[-12]) ){ goto $label$34 }
	$9 = *($14 + [48])
	goto $label$32 
	
.LABEL $label$33
	$9 = $4
	
.LABEL $label$32
	*($14 + [52]) = $4
	CALL $101($9)
	
.LABEL $label$31
	*([0] + [4]) = ($14 + [256])
	return (unreachable)
	
.LABEL $label$1
	CALL $102(($14 + [16]))
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $100(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $101(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $101($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN14exchange_state21GetSupplyCurrentPriceEv (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	$3 = *(($1 + [24]))
	*($0 + [8]) = $3
	$2 = (Rounds 0)(((float_64)*(($1 + [32])) * (float_64)((float_64)(CASTING float_64)(int_64 *($1 + [16])) / (float_64)(CASTING float_64)(int_64 *($1)))))
	*($0) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [16])
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$0 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	CALL eosio_assert($0, [80])
}

void .FUNC _ZN7farmeos8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	$5 = *($0)
	if ( ((int_64)$5 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$5 != (int_64)$2) ){ goto $label$1 }
	$0 = [1]
	$1 = *($3 + [8])
	if ( ((int_64)$1 == (int_64)1397703940) ){ goto $label$2 }
	$0 = ((int_64)$1 == (int_64)1397704196)
	
.LABEL $label$2
	CALL eosio_assert($0, [208])
	
.LABEL $label$1
}

void .FUNC _ZN14exchange_state21convert_from_exchangeERNS_9connectorEN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	float_64 $5
	int_64 $6
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($1 + [8])), [112])
	$4 = *($2)
	$6 = *($3)
	$5 = CALL pow(((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(CASTING float_64)(int_64 (int_64))(*($1) - $6))) + (float_64)(float_64)1), ((float_64)(float_64)1 / (float_64)*($2 + [16])))
	*($1) = (int_64))(*($1) - $6)
	$6 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $4) * (float_64)((float_64)$5 + (float_64)(float_64)-1)))
	*($0) = $6
	*($2) = (int_64))(*($2) - $6)
	$4 = *($2 + [8])
	*($0 + [8]) = $4
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [16])
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$1 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	
.LABEL $label$1
	CALL eosio_assert($1, [80])
}

void .FUNC _ZN14exchange_state7convertEN5eosio5assetENS0_11symbol_typeE (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_64 $4
	float_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$7 = *(($1 + [24]))
	$4 = *($2 + [8])
	if ( ((int_64)$4 != (int_64)*($1 + [8])) ){ goto $label$6 }
	if ( ((int_64)$7 != (int_64)$3) ){ goto $label$5 }
	$6 = ($2 + [8])
	*(($8 = (($9 + [16]) + [8]))) = *($6)
	$7 = *($2)
	*(($9 + [12])) = *((($9 + [16]) + [12]))
	*(($9 + [8])) = *($8)
	*($9 + [16]) = $7
	*($9 + [4]) = *($9 + [20])
	*($9) = *($9 + [16])
	CALL _ZN14exchange_state21convert_from_exchangeERNS_9connectorEN5eosio5assetE(($9 + [32]), $1, ($1 + [16]), $9)
	*($6) = *((($9 + [32]) + [8]))
	*($2) = *($9 + [32])
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$4 != (int_64)$7) ){ goto $label$4 }
	$7 = *($1)
	$8 = ($1 + [16])
	$3 = *($2)
	$5 = (CASTING float_64)(int_64 $3)
	$5 = CALL pow(((float_64)((float_64)((float_64)$5 / (float_64)(float_64)1e4) / (float_64)((float_64)((float_64)$5 + (float_64)(CASTING float_64)(int_64 *($8))) / (float_64)(float_64)1e4)) + (float_64)(float_64)1), *(($1 + [32])))
	*($8) = ((int_64)$3 + (int_64)*($8))
	$3 = (Rounds 0)(((float_64)((float_64)((float_64)(CASTING float_64)(int_64 $7) / (float_64)(float_64)1e4) * (float_64)((float_64)$5 + (float_64)(float_64)-1)) * (float_64)(float_64)1e4))
	*($1) = ((int_64)$3 + (int_64)*($1))
	$4 = *(($1 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [16])
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$5
	CALL eosio_assert([0], [176])
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [144])
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	
.LABEL $label$2
	CALL eosio_assert($8, [80])
	*(($2 + [8])) = $4
	*($2) = $3
	
.LABEL $label$1
	*($0) = *($2)
	*(($0 + [8])) = *(($2 + [8]))
	*([0] + [4]) = ($9 + [48])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN14exchange_state19convert_to_exchangeERNS_9connectorEN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	float_64 $5
	int_64 $6
	$6 = *($1)
	$4 = *($3)
	$5 = (CASTING float_64)(int_64 $4)
	$5 = CALL pow(((float_64)((float_64)((float_64)$5 / (float_64)(float_64)1e4) / (float_64)((float_64)((float_64)(CASTING float_64)(int_64 *($2)) + (float_64)$5) / (float_64)(float_64)1e4)) + (float_64)(float_64)1), *($2 + [16]))
	*($2) = ((int_64)$4 + (int_64)*($2))
	$6 = (Rounds 0)(((float_64)((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(float_64)1e4) * (float_64)((float_64)$5 + (float_64)(float_64)-1)) * (float_64)(float_64)1e4))
	*($0) = $6
	$4 = *($1 + [8])
	*($0 + [8]) = $4
	*($1) = ((int_64)$6 + (int_64)*($1))
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [16])
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$2 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [80])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $100(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $101($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $101($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [848])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $101($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $101($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [108]))
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC _ZN7farmeos10record_betEyN5eosio5assetEymmyRm (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5, int_64 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [176])
	*([0] + [4]) = $15
	if ( ((int_32)$4 != (int_32)[1]) ){ goto $label$2 }
	CALL eosio_assert((($5 + [-2]) <= [96]), [240])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert((($5 + [-4]) <= [96]), [240])
	
.LABEL $label$1
	*($7) = ( ($5 + [-1]) ? ([100] - $5) : ((int_32)$4 == (int_32)[1]) )
	$8 = *(($0 + [72]))
	$13 = *(($0 + [76]))
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$3 }
	$7 = ($13 + [-24])
	$9 = ([0] - $8)
	
.LOOP $label$4:
	if ( ((int_64)*(*($7)) == (int_64)$6) ){ goto $label$3 }
	$13 = $7
	$10 = ($7 + [-24])
	$7 = $10
	if ( ((int_32)($10 + $9) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	$9 = ($0 + [48])
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$6 }
	$7 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)$9), [256])
	$14 = ($0 + [56])
	goto $label$5 
	
.LABEL $label$6
	$7 = [0]
	$14 = ($0 + [56])
	$10 = CALL db_find_i64(*(($0 + [48])), *($14), (int_64)4229865212519383040, $6)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$5 }
	$7 = CALL $11($9, $10)
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)$9), [256])
	
.LABEL $label$5
	CALL eosio_assert(($7 == 0), [320])
	$11 = ($0 + [8])
	$10 = CALL $12($11, CALL $fimport$8(*($0 + [8]), *(($0 + [16])), (int_64)7235159550150574080, (int_64)0))
	$8 = *($10 + [36])
	$12 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$3()), [352])
	$7 = CALL $100([120])
	CALL $13($7)
	*($7 + [104]) = $9
	*($7 + [8]) = $1
	*($7) = $6
	*($7 + [16]) = $3
	$6 = CALL current_time()
	*($7 + [32]) = $4
	*($7 + [36]) = $5
	*(($7 + [60])) = *(($2 + [12]))
	*(($7 + [56])) = *(($2 + [8]))
	*(($7 + [52])) = *(($2 + [4]))
	*($7 + [48]) = *($2)
	*($7 + [24]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($7 + [40]) = [0]
	*($15 + [112]) = ($15 + [96])
	*($15 + [108]) = $15
	*($15 + [104]) = $15
	*($15 + [120]) = ($15 + [104])
	*($15 + [132]) = ($7 + [8])
	*($15 + [128]) = $7
	*($15 + [136]) = ($7 + [16])
	*($15 + [140]) = ($7 + [24])
	*($15 + [144]) = ($7 + [32])
	*($15 + [148]) = ($7 + [36])
	*($15 + [152]) = ($7 + [40])
	*($15 + [156]) = ($7 + [48])
	*($15 + [160]) = ($7 + [64])
	*($15 + [164]) = ($7 + [80])
	*($15 + [168]) = ($7 + [88])
	*($15 + [172]) = ($7 + [96])
	CALL $14(($15 + [128]), ($15 + [120]))
	$6 = *($7)
	$2 = CALL db_store_i64(*($14), (int_64)4229865212519383040, $12, $6, $15, [96])
	*($7 + [108]) = $2
	$13 = ($0 + [64])
	if ( (uint_64)($6 <= *($13)) ){ goto $label$7 }
	*($13) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($15 + [128]) = $7
	$6 = *($7)
	*($15) = $6
	*($15 + [104]) = $2
	$5 = ($0 + [76])
	$13 = *($5)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [80]))) ){ goto $label$9 }
	*($13 + [8]) = $6
	*($13 + [16]) = $2
	*($15 + [128]) = [0]
	*($13) = $7
	*($5) = ($13 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $15(($0 + [72]), ($15 + [128]), $15, ($15 + [104]))
	
.LABEL $label$8
	$7 = *($15 + [128])
	*($15 + [128]) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL $101($7)
	
.LABEL $label$10
	$13 = ($10 + [36])
	$7 = ($8 + [1])
	if ( ($7 <= [201]) ){ goto $label$11 }
	$7 = [0]
	$2 = CALL db_lowerbound_i64(*($9), *($14), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$12 }
	$7 = CALL $11($9, $2)
	
.LABEL $label$12
	$2 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($2, [416])
	CALL eosio_assert($2, [464])
	$2 = CALL db_next_i64(*($7 + [108]), $15)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$13 }
	CALL $11($9, $2)
	
.LABEL $label$13
	CALL $16($9, $7)
	$7 = $8
	
.LABEL $label$11
	$1 = *($0)
	CALL eosio_assert([1], [496])
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)$11), [544])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$3()), [592])
	*(($10 + [36])) = $7
	*($10 + [16]) = ((int_64)*($10 + [16]) + (int_64)1)
	$6 = *($10)
	CALL eosio_assert([1], [656])
	*($15 + [112]) = ($15 + [76])
	*($15 + [108]) = $15
	*($15 + [104]) = $15
	*($15 + [120]) = ($15 + [104])
	*($15 + [132]) = ($10 + [8])
	*($15 + [128]) = $10
	*($15 + [136]) = ($10 + [16])
	*($15 + [140]) = ($10 + [24])
	*($15 + [144]) = ($10 + [32])
	*($15 + [148]) = $13
	*($15 + [152]) = ($10 + [40])
	*($15 + [156]) = ($10 + [44])
	*($15 + [160]) = ($10 + [48])
	*($15 + [164]) = ($10 + [56])
	*($15 + [168]) = ($10 + [64])
	*($15 + [172]) = ($10 + [72])
	CALL $17(($15 + [128]), ($15 + [120]))
	CALL db_update_i64(*($10 + [84]), $1, $15, [76])
	$7 = ($0 + [24])
	if ( (uint_64)($6 <= *($7)) ){ goto $label$14 }
	*($7) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*([0] + [4]) = ($15 + [176])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [912])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $100([120])
	CALL $13($6)
	*($6 + [104]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [16])
	*($8 + [44]) = ($6 + [24])
	*($8 + [48]) = ($6 + [32])
	*($8 + [52]) = ($6 + [36])
	*($8 + [56]) = ($6 + [40])
	*($8 + [60]) = ($6 + [48])
	*($8 + [64]) = ($6 + [64])
	*($8 + [68]) = ($6 + [80])
	*($8 + [72]) = ($6 + [88])
	*($8 + [76]) = ($6 + [96])
	CALL $20(($8 + [32]), ($8 + [24]))
	*($6 + [108]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [108])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $15(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $101($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
	return $6
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [912])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $100([96])) + [80]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [16])
	*($8 + [44]) = ($6 + [24])
	*($8 + [48]) = ($6 + [32])
	*($8 + [52]) = ($6 + [36])
	*($8 + [56]) = ($6 + [40])
	*($8 + [60]) = ($6 + [44])
	*($8 + [64]) = ($6 + [48])
	*($8 + [68]) = ($6 + [56])
	*($8 + [72]) = ($6 + [64])
	*($8 + [76]) = ($6 + [72])
	CALL $18(($8 + [32]), ($8 + [24]))
	*($6 + [84]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [84])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $19(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $101($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
	return $6
}

int_32 .FUNC $13 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [48]) = (int_64)0
	*(($2 = ($0 + [56]))) = (int_64)1397703940
	CALL eosio_assert([1], [16])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [80])
	*(($2 = ($0 + [72]))) = (int_64)1397703940
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [16])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [80])
	return $0
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [544])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [592])
	$4 = *($1)
	$5 = *(*($3))
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$1 }
	*($1 + [56]) = $5
	
.LABEL $label$1
	$6 = ($1 + [72])
	$5 = *(*($3 + [4]))
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$2 }
	*($6) = $5
	
.LABEL $label$2
	CALL eosio_assert([1], [656])
	$8 = $8
	$3 = ($8 + [-80])
	*([0] + [4]) = $3
	*($7 + [12]) = $3
	*($7 + [8]) = $3
	*($7 + [16]) = ($8 + [-4])
	*($7 + [24]) = ($7 + [8])
	*($7 + [32]) = $1
	*($7 + [36]) = ($1 + [8])
	*($7 + [40]) = ($1 + [16])
	*($7 + [44]) = ($1 + [24])
	*($7 + [48]) = ($1 + [32])
	*($7 + [52]) = ($1 + [36])
	*($7 + [56]) = ($1 + [40])
	*($7 + [60]) = ($1 + [44])
	*($7 + [64]) = ($1 + [48])
	*($7 + [68]) = ($1 + [56])
	*($7 + [72]) = ($1 + [64])
	*($7 + [76]) = $6
	CALL $17(($7 + [32]), ($7 + [24]))
	CALL db_update_i64(*($1 + [84]), $2, $3, [76])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [80])
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $100(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $101($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $101($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN7farmeos3betEyN5eosio5assetEymmymNSt3__16vectorIcNS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5, int_64 $6, int_32 $7, int_32 $8)
{
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [224])
	*([0] + [4]) = $16
	CALL require_auth(*($0))
	$15 = [0]
	$13 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$1 }
	$15 = CALL $12(($0 + [8]), $13)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [1536])
	*($16 + [72]) = [0]
	*($16 + [64]) = (int_64)0
	*($16 + [56]) = (int_64)0
	*($16 + [79]) = [0]
	*((($16 + [16]) + [32])) = [0]
	*($16 + [32]) = (int_64)-1
	*($16 + [40]) = (int_64)0
	$9 = *($0)
	*($16 + [16]) = $9
	*($16 + [24]) = $9
	$15 = CALL db_find_i64($9, $9, (int_64)-3020376800539705344, $1)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $59(($16 + [16]), $15) + [72]) == (int_32)($16 + [16])), [256])
	goto $label$2 
	
.LABEL $label$3
	$14 = *($0)
	CALL eosio_assert(((int_64)$9 == (int_64)CALL $fimport$3()), [352])
	*(($15 = CALL $100([88])) + [72]) = ($16 + [16])
	*($15) = $1
	*($15 + [44]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($16 + [160]) = (($16 + [80]) + [72])
	*($16 + [156]) = ($16 + [80])
	*($16 + [152]) = ($16 + [80])
	*($16 + [168]) = ($16 + [152])
	*($16 + [180]) = ($15 + [8])
	*($16 + [176]) = $15
	*($16 + [184]) = ($15 + [12])
	*($16 + [188]) = ($15 + [16])
	*($16 + [192]) = ($15 + [24])
	*($16 + [196]) = ($15 + [32])
	*($16 + [200]) = ($15 + [36])
	*($16 + [204]) = ($15 + [40])
	*($16 + [208]) = ($15 + [44])
	*($16 + [212]) = ($15 + [48])
	*($16 + [216]) = ($15 + [56])
	*($16 + [220]) = ($15 + [64])
	CALL $60(($16 + [176]), ($16 + [168]))
	$9 = *($15)
	$12 = CALL db_store_i64(*((($16 + [16]) + [8])), (int_64)-3020376800539705344, $14, $9, ($16 + [80]), [72])
	*($15 + [76]) = $12
	$13 = (($16 + [16]) + [16])
	if ( (uint_64)($9 <= *($13)) ){ goto $label$4 }
	*($13) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($16 + [176]) = $15
	$9 = *($15)
	*($16 + [80]) = $9
	*($16 + [152]) = $12
	$11 = ($16 + [44])
	$13 = *($11)
	if ( ((uint_32)$13 >= (uint_32)*(($16 + [48]))) ){ goto $label$6 }
	*($13 + [8]) = $9
	*($13 + [16]) = $12
	*($16 + [176]) = [0]
	*($13) = $15
	*($11) = ($13 + [24])
	goto $label$5 
	
.LABEL $label$6
	CALL $61(($16 + [40]), ($16 + [176]), ($16 + [80]), ($16 + [152]))
	
.LABEL $label$5
	$15 = *($16 + [176])
	*($16 + [176]) = [0]
	if ( ($15 == 0) ){ goto $label$2 }
	CALL $101($15)
	
.LABEL $label$2
	$10 = *(($16 + [40]))
	$12 = *(($16 + [44]))
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$7 }
	$15 = ($12 + [-24])
	$11 = ([0] - $10)
	
.LOOP $label$8:
	if ( ((int_64)*(*($15)) == (int_64)$1) ){ goto $label$7 }
	$12 = $15
	$13 = ($15 + [-24])
	$15 = $13
	if ( ((int_32)($13 + $11) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$10 }
	$15 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [72]) == (int_32)($16 + [16])), [256])
	goto $label$9 
	
.LABEL $label$10
	$15 = [0]
	$13 = CALL db_find_i64(*($16 + [16]), *(($16 + [24])), (int_64)-3020376800539705344, $1)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$9 }
	$15 = CALL $59(($16 + [16]), $13)
	CALL eosio_assert(((int_32)*($15 + [72]) == (int_32)($16 + [16])), [256])
	
.LABEL $label$9
	$9 = *($0)
	*($16 + [88]) = $2
	*($16 + [84]) = ($16 + [56])
	*($16 + [80]) = ($16 + [79])
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [496])
	CALL $62(($16 + [16]), $15, $9, ($16 + [80]))
	if ( ((uint_32)($4 + [-1]) > (uint_32)[1]) ){ goto $label$13 }
	CALL _ZN7farmeos10update_betEyxmy($0, $1, $1, $15, $1)
	$12 = *($16 + [40])
	if ( $12 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[11]) ){ goto $label$14 }
	CALL _ZN7farmeos12update_roulsEyxmy($0, $1, $1, $15, $1)
	$12 = *($16 + [40])
	if ( $12 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	if ( ((uint_32)($4 + [-21]) > (uint_32)[3]) ){ goto $label$15 }
	CALL _ZN7farmeos12update_minesEyxmy($0, $1, $1, $15, $1)
	$12 = *($16 + [40])
	if ( $12 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$15
	if ( ((int_32)$4 != (int_32)[31]) ){ goto $label$16 }
	CALL $107($16, ($16 + [64]))
	CALL _ZN7farmeos9update_bjEyxNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEym($0, $1, $1, $15, $1, $15)
	if ( ((*($16) & [1]) == 0) ){ goto $label$16 }
	CALL $101(*($16 + [8]))
	
.LABEL $label$16
	$12 = *($16 + [40])
	if ( ($12 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$11 = ($16 + [44])
	$15 = *($11)
	if ( ((int_32)$15 == (int_32)$12) ){ goto $label$18 }
	
.LOOP $label$19:
	$15 = ($15 + [-24])
	$13 = *($15)
	*($15) = [0]
	if ( ($13 == 0) ){ goto $label$20 }
	CALL $101($13)
	
.LABEL $label$20
	if ( ((int_32)$12 != (int_32)$15) ){ goto $label$19 }
	$15 = *(($16 + [40]))
	goto $label$17 
	
.LABEL $label$18
	$15 = $12
	
.LABEL $label$17
	*($11) = $12
	CALL $101($15)
	
.LABEL $label$11
	if ( ((*($16 + [64]) & [1]) == 0) ){ goto $label$21 }
	CALL $101(*(($16 + [72])))
	
.LABEL $label$21
	*([0] + [4]) = ($16 + [224])
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [912])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $100([88])) + [72]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [12])
	*($8 + [44]) = ($6 + [16])
	*($8 + [48]) = ($6 + [24])
	*($8 + [52]) = ($6 + [32])
	*($8 + [56]) = ($6 + [36])
	*($8 + [60]) = ($6 + [40])
	*($8 + [64]) = ($6 + [44])
	*($8 + [68]) = ($6 + [48])
	*($8 + [72]) = ($6 + [56])
	*($8 + [76]) = ($6 + [64])
	CALL $68(($8 + [32]), ($8 + [24]))
	*($6 + [76]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [76])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $61(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $101($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
	return $6
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $100(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [88]) & [1]) == 0) ){ goto $label$11 }
	CALL $101(*(($1 + [96])))
	
.LABEL $label$11
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$12 }
	CALL $101(*(($1 + [48])))
	
.LABEL $label$12
	CALL $101($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $101($6)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [124]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$4 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($4)) == (int_64)$2) ){ goto $label$1 }
	$7 = $4
	$8 = ($4 + [-24])
	$4 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [848])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$7 }
	CALL $101(*(($4 + [96])))
	
.LABEL $label$7
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$8 }
	CALL $101(*(($4 + [48])))
	
.LABEL $label$8
	CALL $101($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$11 }
	CALL $101(*(($4 + [96])))
	
.LABEL $label$11
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$12 }
	CALL $101(*(($4 + [48])))
	
.LABEL $label$12
	CALL $101($4)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [128]))
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [4])
	$4 = *($2)
	$2 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $4)
	
.LABEL $label$2
	*(($4 = *($1))) = (*($4) + [16])
	*(($4 = *($1))) = (*($4) + [16])
	$4 = *($2)
	$2 = *($0 + [36])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$0 = *($1)
	$4 = *($0)
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($0) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	*($0) = ($2 + $4)
	
.LABEL $label$4
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [4])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	CALL $38(*($1), *($0 + [24]))
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $38(*($1), *($0 + [36]))
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [52])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($0 + [4]), $2, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $100(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [80]) & [1]) == 0) ){ goto $label$11 }
	CALL $101(*(($1 + [88])))
	
.LABEL $label$11
	CALL $101($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $101($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $100(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $101($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $101($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	CALL $40(*($1), *($0 + [24]))
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [944])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [944])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $40(*($1), *($0 + [36]))
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [52])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $117 ()
{
	(unreachable)
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [848])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$7 }
	CALL $101(*(($4 + [88])))
	
.LABEL $label$7
	CALL $101($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$10 }
	CALL $101(*(($4 + [88])))
	
.LABEL $label$10
	CALL $101($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [116]))
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_32 .FUNC atoi (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$3 = *($0)
	$1 = int_32(($3 << [24]) >> [24])
	$2 = ($1 + [-9])
	$4 = ($0 + [1])
	$0 = $4
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$1 }
	$0 = $4
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$1 = [1]
	goto $label$4 
	
.LABEL $label$5
	$1 = [0]
	
.LABEL $label$4
	$3 = *($4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-1])
	$1 = [0]
	
.LABEL $label$2
	$2 = [0]
	$3 = (int_32(($3 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($4 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $3)
	$3 = *($0)
	$0 = ($0 + [1])
	$3 = ($3 + [-48])
	if ( ($3 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $1 )
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [32])
	*([0] + [4]) = $14
	$10 = *($3 + [4])
	if ( ((int_32)$10 == (int_32)*($3 + [8])) ){ goto $label$2 }
	CALL $107($10, $1)
	*(($1 = ($3 + [4]))) = (*($1) + [12])
	goto $label$1 
	
.LABEL $label$2
	CALL $43($3, $1)
	
.LABEL $label$1
	$1 = *($2)
	if ( ($1 & [1]) ){ goto $label$4 }
	$12 = uint_32($1 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$12 = *($2 + [4])
	
.LABEL $label$3
	*($14 + [24]) = [0]
	*($14 + [16]) = (int_64)0
	$5 = ($2 + [1])
	$4 = (($14 + [16]) | [1])
	
.LOOP $label$6:
	$11 = ($3 + [4])
	CALL $103(($14 + [16]), (*($11) + [-12]))
	$9 = *($14 + [16])
	$13 = ($9 & [1])
	$10 = [0]
	$7 = ($1 & [1])
	$1 = *($2)
	$1 = ( *(($2 + [4])) ? uint_32($1 >> [1]) : $7 )
	if ( ($1 == 0) ){ goto $label$7 }
	$10 = ( *($14 + [20]) ? uint_32($9 >> [1]) : $13 )
	if ( ((int_32)$10 < (int_32)$1) ){ goto $label$5 }
	$6 = ( *((($14 + [16]) + [8])) ? $4 : $13 )
	$8 = ($6 + $10)
	$7 = ( *(($2 + [8])) ? $5 : $7 )
	$9 = *($7)
	$13 = $6
	
.LOOP $label$8:
	$10 = (($10 - $1) + [1])
	if ( ($10 == 0) ){ goto $label$5 }
	$10 = CALL memchr($13, $9, $10)
	if ( ($10 == 0) ){ goto $label$5 }
	if ( (CALL memcmp($10, $7, $1) == 0) ){ goto $label$9 }
	$13 = ($10 + [1])
	$10 = ($8 - $13)
	if ( ((int_32)$10 >= (int_32)$1) ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$9
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$5 }
	$10 = ($10 - $6)
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$5 }
	
.LABEL $label$7
	CALL $108($14, ($14 + [16]), [0], $10, ($14 + [16]))
	$13 = *($11)
	$1 = ($13 + [-12])
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*(($13 + [-4]))) = [0]
	*(($13 + [-8])) = [0]
	
.LABEL $label$10
	CALL $105($1, [0])
	$13 = ($14 + [8])
	*(($1 + [8])) = *($13)
	*($1) = *($14)
	$10 = *($14 + [16])
	$1 = ($10 + $12)
	CALL $108($14, ($14 + [16]), $1, (( *($14 + [20]) ? uint_32($10 >> [1]) : ($10 & [1]) ) - $1), ($14 + [16]))
	$1 = *($11)
	if ( ($1 <= *(($3 + [8]))) ){ goto $label$12 }
	CALL $44($3, $14)
	if ( ((*($14) & [1]) == 0) ){ goto $label$6 }
	CALL $101(*($13))
	goto $label$6 
	
.LABEL $label$12
	*($1) = *($14)
	*(($1 + [8])) = *($13)
	*($13) = [0]
	*($14) = [0]
	*($14 + [4]) = [0]
	*($11) = (*($11) + [12])
	goto $label$6 
	
.LABEL $label$5
	if ( ((*($14 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL $101(*(($14 + [24])))
	
.LABEL $label$13
	*([0] + [4]) = ($14 + [32])
}

void .FUNC _ZN7farmeos11record_mineEyN5eosio5assetEymmyRmNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERNS3_6vectorIcS8_EE (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5, int_64 $6, int_32 $7, int_32 $8, int_32 $9)
{
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [240])
	*([0] + [4]) = $19
	*($19 + [72]) = $1
	*($19 + [64]) = $3
	*($19 + [60]) = $4
	*($19 + [48]) = $6
	*($19 + [40]) = [0]
	*($19 + [32]) = (int_64)0
	CALL $107(($19 + [16]), $8)
	*(($19 + [8])) = [0]
	*($19) = (int_64)0
	$4 = CALL strlen([1008])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($19) = ($4 << [1])
	$18 = ($19 | [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$14 = (($4 + [16]) & [-16])
	$18 = CALL $100($14)
	*($19) = ($14 | [1])
	*($19 + [8]) = $18
	*($19 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($18, [1008], $4)
	
.LABEL $label$2
	*(($18 + $4)) = [0]
	CALL $29($0, ($19 + [16]), $19, ($19 + [32]))
	if ( ((*($19) & [1]) == 0) ){ goto $label$5 }
	CALL $101(*($19 + [8]))
	
.LABEL $label$5
	if ( ((*($19 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL $101(*($19 + [24]))
	
.LABEL $label$6
	$15 = [1]
	$4 = *($19 + [60])
	if ( ((uint_32)($4 + [-21]) > (uint_32)[1]) ){ goto $label$8 }
	$4 = (*($19 + [36]) - *($19 + [32]))
	CALL eosio_assert((((int_32)$4 != (int_32)[0]) & (((int_32)$4 / (int_32)[12]) <= [11])), [1024])
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)($4 + [-23]) >= (uint_32)[2]) ){ goto $label$9 }
	$15 = [0]
	$4 = (*($19 + [36]) - *($19 + [32]))
	CALL eosio_assert((((int_32)$4 != (int_32)[0]) & (((int_32)$4 / (int_32)[12]) <= [6])), [1040])
	goto $label$7 
	
.LABEL $label$9
	$15 = [1]
	
.LABEL $label$7
	$4 = *($19 + [32])
	if ( ((int_32)*($19 + [36]) == (int_32)$4) ){ goto $label$10 }
	$11 = ( [10] ? [5] : $15 )
	$10 = (($19 + [80]) | [1])
	$16 = [0]
	$13 = (($19 + [80]) + [8])
	$14 = ($9 + [4])
	
.LOOP $label$11:
	CALL $107(($19 + [80]), ($4 + ((int_32)$16 * (int_32)[12])))
	$4 = *($19 + [80])
	$4 = (( *($19 + [84]) ? uint_32($4 >> [1]) : ($4 & [1]) ) + [-2])
	if ( ($15 == 0) ){ goto $label$13 }
	CALL eosio_assert(($4 <= [10]), [1056])
	goto $label$12 
	
.LABEL $label$13
	CALL eosio_assert(($4 <= [5]), [1040])
	
.LABEL $label$12
	$4 = ($18 & [1])
	$18 = *($19 + [80])
	if ( (( *($19 + [84]) ? uint_32($18 >> [1]) : $4 ) <= [2]) ){ goto $label$14 }
	$17 = *($13)
	$12 = ((int_32)int_32(((*(( $17 ? $10 : $4 )) << [24]) + [-805306368]) >> [24]) * (int_32)$11)
	$4 = [2]
	
.LOOP $label$15:
	$18 = (uint_32((((*(((( $17 ? $10 : ($18 & [1]) ) + $4) + [-1])) + $12) << [24]) + [-805306368]) >> [24]) + [1])
	*($19 + [176]) = $18
	$17 = *($14)
	if ( ((uint_32)$17 >= (uint_32)*(($9 + [8]))) ){ goto $label$17 }
	*($17) = $18
	*($14) = (*($14) + [1])
	goto $label$16 
	
.LABEL $label$17
	CALL $30($9, ($19 + [176]))
	
.LABEL $label$16
	$18 = *($19 + [80])
	if ( ((uint_32)$4 >= (uint_32)( *($19 + [84]) ? uint_32($18 >> [1]) : ($18 & [1]) )) ){ goto $label$14 }
	$4 = ($4 + [1])
	$17 = *($13)
	goto $label$15 
	
.LABEL $label$14
	if ( (($18 & [1]) == 0) ){ goto $label$18 }
	CALL $101(*($13))
	
.LABEL $label$18
	$4 = *($19 + [32])
	$16 = ($16 + [1])
	if ( ($16 <= ((int_32)(*($19 + [36]) - $4) / (int_32)[12])) ){ goto $label$11 }
	
.LABEL $label$10
	$4 = (*($19 + [60]) + [-21])
	if ( ((uint_32)$4 > (uint_32)[3]) ){ goto $label$19 }
	goto $label$23 
	
.LABEL $label$23
	$18 = *($9)
	$4 = *($9 + [4])
	*($7) = ($4 - $18)
	CALL eosio_assert(((($4 + [-1]) - $18) <= [95]), [1072])
	goto $label$19 
	
.LABEL $label$22
	$18 = *($9)
	$4 = *($9 + [4])
	*($7) = (([100] - $4) + $18)
	CALL eosio_assert(((($4 + [-5]) - $18) <= [95]), [1088])
	goto $label$19 
	
.LABEL $label$21
	$18 = *($9)
	$4 = *($9 + [4])
	*($7) = (($4 - $18) << [2])
	CALL eosio_assert(((($4 + [-1]) - $18) <= [24]), [1072])
	goto $label$19 
	
.LABEL $label$20
	$18 = *($9)
	$4 = *($9 + [4])
	*($7) = ([100] - (($4 - $18) << [2]))
	CALL eosio_assert(((($4 + [-1]) - $18) <= [24]), [1072])
	
.LABEL $label$19
	$6 = *($19 + [48])
	$10 = *(($0 + [152]))
	$14 = *(($0 + [156]))
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$24 }
	$4 = ($14 + [-24])
	$17 = ([0] - $10)
	
.LOOP $label$25:
	if ( ((int_64)*(*($4)) == (int_64)$6) ){ goto $label$24 }
	$14 = $4
	$18 = ($4 + [-24])
	$4 = $18
	if ( ((int_32)($18 + $17) != (int_32)[-24]) ){ goto $label$25 }
	
.LABEL $label$24
	$17 = ($0 + [128])
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$27 }
	$4 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$17), [256])
	goto $label$26 
	
.LABEL $label$27
	$4 = [0]
	$18 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)-7807363788000198656, $6)
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$26 }
	$4 = CALL $31($17, $18)
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$17), [256])
	
.LABEL $label$26
	CALL eosio_assert(($4 == 0), [320])
	$13 = ($0 + [8])
	$4 = CALL $12($13, CALL $fimport$8(*($0 + [8]), *(($0 + [16])), (int_64)7235159550150574080, (int_64)0))
	$10 = *($4 + [44])
	$6 = *($0)
	*($19 + [96]) = $9
	*($19 + [100]) = $2
	*($19 + [104]) = $8
	*($19 + [84]) = ($19 + [72])
	*($19 + [80]) = ($19 + [48])
	*($19 + [88]) = ($19 + [64])
	*($19 + [92]) = ($19 + [60])
	*($19 + [160]) = $6
	CALL eosio_assert(((int_64)*(($0 + [128])) == (int_64)CALL $fimport$3()), [352])
	*($19 + [176]) = $17
	*($19 + [180]) = ($19 + [80])
	*($19 + [184]) = ($19 + [160])
	$18 = CALL $100([128])
	CALL $32($18)
	*($18 + [112]) = $17
	CALL $33(($19 + [176]), $18)
	*($19 + [232]) = $18
	$6 = *($18)
	*($19 + [176]) = $6
	$9 = *($18 + [116])
	*($19 + [228]) = $9
	$12 = ($0 + [156])
	$14 = *($12)
	if ( ((uint_32)$14 >= (uint_32)*(($0 + [160]))) ){ goto $label$29 }
	*($14 + [8]) = $6
	*($14 + [16]) = $9
	*($19 + [232]) = [0]
	*($14) = $18
	*($12) = ($14 + [24])
	goto $label$28 
	
.LABEL $label$29
	CALL $34(($0 + [152]), ($19 + [232]), ($19 + [176]), ($19 + [228]))
	
.LABEL $label$28
	$18 = *($19 + [232])
	*($19 + [232]) = [0]
	if ( ($18 == 0) ){ goto $label$30 }
	if ( ((*($18 + [80]) & [1]) == 0) ){ goto $label$31 }
	CALL $101(*(($18 + [88])))
	
.LABEL $label$31
	CALL $101($18)
	
.LABEL $label$30
	$14 = ($4 + [44])
	$18 = ($10 + [1])
	if ( ($18 <= [201]) ){ goto $label$32 }
	$18 = [0]
	$9 = CALL db_lowerbound_i64(*(($0 + [128])), *(($0 + [136])), (int_64)-7807363788000198656, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$33 }
	$18 = CALL $31($17, $9)
	
.LABEL $label$33
	$9 = ((int_32)$18 != (int_32)[0])
	CALL eosio_assert($9, [416])
	CALL eosio_assert($9, [464])
	$9 = CALL db_next_i64(*($18 + [116]), ($19 + [80]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$34 }
	CALL $31($17, $9)
	
.LABEL $label$34
	CALL $35($17, $18)
	$18 = $10
	
.LABEL $label$32
	$3 = *($0)
	CALL eosio_assert([1], [496])
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$13), [544])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$3()), [592])
	*(($4 + [44])) = $18
	*($4 + [16]) = ((int_64)*($4 + [16]) + (int_64)1)
	$6 = *($4)
	CALL eosio_assert([1], [656])
	*($19 + [168]) = (($19 + [80]) + [76])
	*($19 + [164]) = ($19 + [80])
	*($19 + [160]) = ($19 + [80])
	*($19 + [232]) = ($19 + [160])
	*($19 + [180]) = ($4 + [8])
	*($19 + [176]) = $4
	*($19 + [184]) = ($4 + [16])
	*($19 + [188]) = ($4 + [24])
	*($19 + [192]) = ($4 + [32])
	*($19 + [196]) = ($4 + [36])
	*($19 + [200]) = ($4 + [40])
	*($19 + [204]) = $14
	*($19 + [208]) = ($4 + [48])
	*($19 + [212]) = ($4 + [56])
	*($19 + [216]) = ($4 + [64])
	*($19 + [220]) = ($4 + [72])
	CALL $17(($19 + [176]), ($19 + [232]))
	CALL db_update_i64(*($4 + [84]), $3, ($19 + [80]), [76])
	$4 = ($0 + [24])
	if ( (uint_64)($6 <= *($4)) ){ goto $label$35 }
	*($4) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$35
	$14 = *($19 + [32])
	if ( ($14 == 0) ){ goto $label$36 }
	$4 = *($19 + [36])
	if ( ((int_32)$4 == (int_32)$14) ){ goto $label$38 }
	$18 = ([0] - $14)
	$4 = ($4 + [-12])
	
.LOOP $label$39:
	if ( ((*($4) & [1]) == 0) ){ goto $label$40 }
	CALL $101(*(($4 + [8])))
	
.LABEL $label$40
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $18) != (int_32)[-12]) ){ goto $label$39 }
	$4 = *($19 + [32])
	goto $label$37 
	
.LABEL $label$38
	$4 = $14
	
.LABEL $label$37
	*($19 + [36]) = $14
	CALL $101($4)
	
.LABEL $label$36
	*([0] + [4]) = ($19 + [240])
	return (unreachable)
	
.LABEL $label$1
	CALL $102($19)
	$4
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $100($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $106 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZN7farmeos11record_roulEyN5eosio5assetEymmyRm (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5, int_64 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [176])
	*([0] + [4]) = $15
	CALL eosio_assert((($5 + [-1]) <= [63]), [240])
	$10 = ($5 & [4])
	$11 = ($5 & [2])
	$8 = ($5 & [1])
	$13 = ( ($8 + [3]) ? $8 : $11 )
	$13 = ( ($13 + [9]) ? $13 : $10 )
	$8 = (( ($8 + [1]) ? $8 : $11 ) + uint_32($10 >> [2]))
	if ( (($5 & [8]) == 0) ){ goto $label$1 }
	$8 = ($8 + [1])
	$13 = ($13 + [15])
	
.LABEL $label$1
	if ( (($5 & [16]) == 0) ){ goto $label$2 }
	$13 = ($13 + [24])
	$8 = (($8 & [255]) + [1])
	
.LABEL $label$2
	if ( (($5 & [32]) == 0) ){ goto $label$3 }
	$13 = ($13 + [48])
	$8 = (($8 & [255]) + [1])
	
.LABEL $label$3
	CALL eosio_assert(((($8 + [-1]) & [255]) <= [4]), [960])
	*($7) = $13
	$10 = *(($0 + [112]))
	$7 = *(($0 + [116]))
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$4 }
	$13 = ($7 + [-24])
	$11 = ([0] - $10)
	
.LOOP $label$5:
	if ( ((int_64)*(*($13)) == (int_64)$6) ){ goto $label$4 }
	$7 = $13
	$8 = ($13 + [-24])
	$13 = $8
	if ( ((int_32)($8 + $11) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	$11 = ($0 + [88])
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$7 }
	$13 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [104]) == (int_32)$11), [256])
	$14 = ($0 + [96])
	goto $label$6 
	
.LABEL $label$7
	$13 = [0]
	$14 = ($0 + [96])
	$8 = CALL db_find_i64(*(($0 + [88])), *($14), (int_64)-4812909840449929216, $6)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$13 = CALL $22($11, $8)
	CALL eosio_assert(((int_32)*($13 + [104]) == (int_32)$11), [256])
	
.LABEL $label$6
	CALL eosio_assert(($13 == 0), [320])
	$9 = ($0 + [8])
	$8 = CALL $12($9, CALL $fimport$8(*($0 + [8]), *(($0 + [16])), (int_64)7235159550150574080, (int_64)0))
	$10 = *($8 + [40])
	$12 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$3()), [352])
	$13 = CALL $100([120])
	CALL $23($13)
	*($13 + [104]) = $11
	*($13 + [8]) = $1
	*($13) = $6
	*($13 + [16]) = $3
	$6 = CALL current_time()
	*($13 + [32]) = $4
	*($13 + [36]) = $5
	*(($13 + [60])) = *(($2 + [12]))
	*(($13 + [56])) = *(($2 + [8]))
	*(($13 + [52])) = *(($2 + [4]))
	*($13 + [48]) = *($2)
	*($13 + [24]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($13 + [40]) = [0]
	*($15 + [112]) = ($15 + [96])
	*($15 + [108]) = $15
	*($15 + [104]) = $15
	*($15 + [120]) = ($15 + [104])
	*($15 + [132]) = ($13 + [8])
	*($15 + [128]) = $13
	*($15 + [136]) = ($13 + [16])
	*($15 + [140]) = ($13 + [24])
	*($15 + [144]) = ($13 + [32])
	*($15 + [148]) = ($13 + [36])
	*($15 + [152]) = ($13 + [40])
	*($15 + [156]) = ($13 + [48])
	*($15 + [160]) = ($13 + [64])
	*($15 + [164]) = ($13 + [80])
	*($15 + [168]) = ($13 + [88])
	*($15 + [172]) = ($13 + [96])
	CALL $24(($15 + [128]), ($15 + [120]))
	$6 = *($13)
	$5 = CALL db_store_i64(*($14), (int_64)-4812909840449929216, $12, $6, $15, [96])
	*($13 + [108]) = $5
	$7 = ($0 + [104])
	if ( (uint_64)($6 <= *($7)) ){ goto $label$8 }
	*($7) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($15 + [128]) = $13
	$6 = *($13)
	*($15) = $6
	*($15 + [104]) = $5
	$2 = ($0 + [116])
	$7 = *($2)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [120]))) ){ goto $label$10 }
	*($7 + [8]) = $6
	*($7 + [16]) = $5
	*($15 + [128]) = [0]
	*($7) = $13
	*($2) = ($7 + [24])
	goto $label$9 
	
.LABEL $label$10
	CALL $25(($0 + [112]), ($15 + [128]), $15, ($15 + [104]))
	
.LABEL $label$9
	$13 = *($15 + [128])
	*($15 + [128]) = [0]
	if ( ($13 == 0) ){ goto $label$11 }
	CALL $101($13)
	
.LABEL $label$11
	$7 = ($8 + [40])
	$13 = ($10 + [1])
	if ( ($13 <= [201]) ){ goto $label$12 }
	$13 = [0]
	$5 = CALL db_lowerbound_i64(*($11), *($14), (int_64)-4812909840449929216, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$13 }
	$13 = CALL $22($11, $5)
	
.LABEL $label$13
	$5 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($5, [416])
	CALL eosio_assert($5, [464])
	$5 = CALL db_next_i64(*($13 + [108]), $15)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$14 }
	CALL $22($11, $5)
	
.LABEL $label$14
	CALL $26($11, $13)
	$13 = $10
	
.LABEL $label$12
	$1 = *($0)
	CALL eosio_assert([1], [496])
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$9), [544])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$3()), [592])
	*(($8 + [40])) = $13
	*($8 + [16]) = ((int_64)*($8 + [16]) + (int_64)1)
	$6 = *($8)
	CALL eosio_assert([1], [656])
	*($15 + [112]) = ($15 + [76])
	*($15 + [108]) = $15
	*($15 + [104]) = $15
	*($15 + [120]) = ($15 + [104])
	*($15 + [132]) = ($8 + [8])
	*($15 + [128]) = $8
	*($15 + [136]) = ($8 + [16])
	*($15 + [140]) = ($8 + [24])
	*($15 + [144]) = ($8 + [32])
	*($15 + [148]) = ($8 + [36])
	*($15 + [152]) = $7
	*($15 + [156]) = ($8 + [44])
	*($15 + [160]) = ($8 + [48])
	*($15 + [164]) = ($8 + [56])
	*($15 + [168]) = ($8 + [64])
	*($15 + [172]) = ($8 + [72])
	CALL $17(($15 + [128]), ($15 + [120]))
	CALL db_update_i64(*($8 + [84]), $1, $15, [76])
	$13 = ($0 + [24])
	if ( (uint_64)($6 <= *($13)) ){ goto $label$15 }
	*($13) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*([0] + [4]) = ($15 + [176])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [944])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [944])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $23 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [48]) = (int_64)0
	*(($2 = ($0 + [56]))) = (int_64)1397703940
	CALL eosio_assert([1], [16])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [80])
	*(($2 = ($0 + [72]))) = (int_64)1397703940
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [16])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [80])
	return $0
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [912])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $100([120])
	CALL $23($6)
	*($6 + [104]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [16])
	*($8 + [44]) = ($6 + [24])
	*($8 + [48]) = ($6 + [32])
	*($8 + [52]) = ($6 + [36])
	*($8 + [56]) = ($6 + [40])
	*($8 + [60]) = ($6 + [48])
	*($8 + [64]) = ($6 + [64])
	*($8 + [68]) = ($6 + [80])
	*($8 + [72]) = ($6 + [88])
	*($8 + [76]) = ($6 + [96])
	CALL $27(($8 + [32]), ($8 + [24]))
	*($6 + [108]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [108])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $25(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $101($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
	return $6
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $100(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $101($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $101($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [944])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [944])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [848])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $101($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $101($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [108]))
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [10368])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [10352]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [10384]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

void .FUNC _ZN7farmeos6updateEmy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [176])
	*([0] + [4]) = $10
	CALL require_auth(*($0))
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [1664]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$6 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$1 }
	*($10 + [16]) = $8
	CALL $70($10, ($10 + [16]), *($0), (int_64)1397703940)
	$3 = ($0 + [8])
	$4 = ($0 + [16])
	$5 = CALL db_lowerbound_i64(*($0 + [8]), *($4), (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$5 = CALL $12($3, $5)
	$9 = *($0)
	CALL eosio_assert([1], [496])
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$3), [544])
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$3()), [592])
	*($5 + [24]) = $2
	*($5 + [8]) = $1
	$7 = *($5)
	CALL eosio_assert([1], [656])
	*($10 + [112]) = (($10 + [16]) + [76])
	*($10 + [108]) = ($10 + [16])
	*($10 + [104]) = ($10 + [16])
	*($10 + [120]) = ($10 + [104])
	*($10 + [132]) = ($5 + [8])
	*($10 + [128]) = $5
	*($10 + [136]) = ($5 + [16])
	*($10 + [140]) = ($5 + [24])
	*($10 + [144]) = ($5 + [32])
	*($10 + [148]) = ($5 + [36])
	*($10 + [152]) = ($5 + [40])
	*($10 + [156]) = ($5 + [44])
	*($10 + [160]) = ($5 + [48])
	*($10 + [164]) = ($5 + [56])
	*($10 + [168]) = ($5 + [64])
	*($10 + [172]) = ($5 + [72])
	CALL $17(($10 + [128]), ($10 + [120]))
	CALL db_update_i64(*($5 + [84]), $9, ($10 + [16]), [76])
	$5 = ($0 + [24])
	if ( (uint_64)($7 <= *($5)) ){ goto $label$7 }
	*($5) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	goto $label$7 
	
.LABEL $label$8
	$9 = *($0)
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$3()), [352])
	*(($5 = CALL $100([96])) + [80]) = $3
	*($5 + [8]) = $1
	*($5 + [24]) = $2
	$7 = *($10)
	*($5 + [64]) = $7
	*($5 + [72]) = $7
	*($5 + [56]) = $7
	*($10 + [112]) = (($10 + [16]) + [76])
	*($10 + [108]) = ($10 + [16])
	*($10 + [104]) = ($10 + [16])
	*($10 + [120]) = ($10 + [104])
	*($10 + [132]) = ($5 + [8])
	*($10 + [128]) = $5
	*($10 + [136]) = ($5 + [16])
	*($10 + [140]) = ($5 + [24])
	*($10 + [144]) = ($5 + [32])
	*($10 + [148]) = ($5 + [36])
	*($10 + [152]) = ($5 + [40])
	*($10 + [156]) = ($5 + [44])
	*($10 + [160]) = ($5 + [48])
	*($10 + [164]) = ($5 + [56])
	*($10 + [168]) = ($5 + [64])
	*($10 + [172]) = ($5 + [72])
	CALL $17(($10 + [128]), ($10 + [120]))
	$7 = *($5)
	$1 = CALL db_store_i64(*($4), (int_64)7235159550150574080, $9, $7, ($10 + [16]), [76])
	*($5 + [84]) = $1
	$3 = ($0 + [24])
	if ( (uint_64)($7 <= *($3)) ){ goto $label$9 }
	*($3) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($10 + [128]) = $5
	$7 = *($5)
	*($10 + [16]) = $7
	*($10 + [104]) = $1
	$3 = *(($0 + [36]))
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [40]))) ){ goto $label$11 }
	*($3 + [8]) = $7
	*($3 + [16]) = $1
	*($10 + [128]) = [0]
	*($3) = $5
	*(($0 + [36])) = ($3 + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $19(($0 + [32]), ($10 + [128]), ($10 + [16]), ($10 + [104]))
	
.LABEL $label$10
	$5 = *($10 + [128])
	*($10 + [128]) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $101($5)
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [176])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $108 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $100($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC _ZN7farmeos12update_minesEyxmy (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [224])
	*([0] + [4]) = $10
	*((($10 + [40]) + [32])) = [0]
	*($10 + [56]) = (int_64)-1
	*($10 + [64]) = (int_64)0
	$6 = *($0)
	*($10 + [40]) = $6
	*($10 + [48]) = $6
	$9 = [0]
	$5 = CALL db_find_i64($6, $6, (int_64)-3020376800539705344, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $59(($10 + [40]), $5)
	CALL eosio_assert(((int_32)*($9 + [72]) == (int_32)($10 + [40])), [256])
	
.LABEL $label$1
	$5 = *($9 + [40])
	*(($10 + [32])) = [0]
	*($10 + [8]) = $1
	*($10 + [16]) = (int_64)-1
	*($10 + [24]) = (int_64)0
	$6 = *($0)
	*($10) = $6
	if ( ($5 <= [11]) ){ goto $label$2 }
	$8 = [0]
	$7 = CALL db_lowerbound_i64($6, $1, (int_64)-7807363788000198656, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $31($10, $7)
	
.LABEL $label$3
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [416])
	CALL eosio_assert($7, [464])
	$7 = CALL db_next_i64(*($8 + [116]), ($10 + [80]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	CALL $31($10, $7)
	
.LABEL $label$4
	CALL $35($10, $8)
	$5 = ($5 + [-1])
	$6 = *($0)
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [496])
	CALL eosio_assert(((int_32)*($9 + [72]) == (int_32)($10 + [40])), [544])
	CALL eosio_assert(((int_64)*($10 + [40]) == (int_64)CALL $fimport$3()), [592])
	*($9 + [40]) = $5
	$1 = *($9)
	CALL eosio_assert([1], [656])
	*($10 + [160]) = (($10 + [80]) + [72])
	*($10 + [156]) = ($10 + [80])
	*($10 + [152]) = ($10 + [80])
	*($10 + [168]) = ($10 + [152])
	*($10 + [180]) = ($9 + [8])
	*($10 + [176]) = $9
	*($10 + [184]) = ($9 + [12])
	*($10 + [188]) = ($9 + [16])
	*($10 + [192]) = ($9 + [24])
	*($10 + [196]) = ($9 + [32])
	*($10 + [200]) = ($9 + [36])
	*($10 + [204]) = ($9 + [40])
	*($10 + [208]) = ($9 + [44])
	*($10 + [212]) = ($9 + [48])
	*($10 + [216]) = ($9 + [56])
	*($10 + [220]) = ($9 + [64])
	CALL $60(($10 + [176]), ($10 + [168]))
	CALL db_update_i64(*($9 + [76]), $6, ($10 + [80]), [72])
	$9 = (($10 + [40]) + [16])
	if ( (uint_64)($1 <= *($9)) ){ goto $label$5 }
	*($9) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$0 = *($10 + [24])
	if ( ($0 == 0) ){ goto $label$6 }
	$8 = ($10 + [28])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$11 }
	CALL $101(*(($5 + [88])))
	
.LABEL $label$11
	CALL $101($5)
	
.LABEL $label$10
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$9 }
	$9 = *(($10 + [24]))
	goto $label$7 
	
.LABEL $label$8
	$9 = $0
	
.LABEL $label$7
	*($8) = $0
	CALL $101($9)
	
.LABEL $label$6
	$0 = *($10 + [64])
	if ( ($0 == 0) ){ goto $label$12 }
	$8 = ($10 + [68])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$14 }
	
.LOOP $label$15:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$16 }
	CALL $101($5)
	
.LABEL $label$16
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$15 }
	$9 = *(($10 + [64]))
	goto $label$13 
	
.LABEL $label$14
	$9 = $0
	
.LABEL $label$13
	*($8) = $0
	CALL $101($9)
	
.LABEL $label$12
	*([0] + [4]) = ($10 + [224])
}

void .FUNC _ZN7farmeos12update_roulsEyxmy (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [224])
	*([0] + [4]) = $10
	*((($10 + [40]) + [32])) = [0]
	*($10 + [56]) = (int_64)-1
	*($10 + [64]) = (int_64)0
	$6 = *($0)
	*($10 + [40]) = $6
	*($10 + [48]) = $6
	$9 = [0]
	$5 = CALL db_find_i64($6, $6, (int_64)-3020376800539705344, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $59(($10 + [40]), $5)
	CALL eosio_assert(((int_32)*($9 + [72]) == (int_32)($10 + [40])), [256])
	
.LABEL $label$1
	$5 = *($9 + [36])
	*(($10 + [32])) = [0]
	*($10 + [8]) = $1
	*($10 + [16]) = (int_64)-1
	*($10 + [24]) = (int_64)0
	$6 = *($0)
	*($10) = $6
	if ( ($5 <= [11]) ){ goto $label$2 }
	$8 = [0]
	$7 = CALL db_lowerbound_i64($6, $1, (int_64)-4812909840449929216, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $22($10, $7)
	
.LABEL $label$3
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [416])
	CALL eosio_assert($7, [464])
	$7 = CALL db_next_i64(*($8 + [108]), ($10 + [80]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	CALL $22($10, $7)
	
.LABEL $label$4
	CALL $26($10, $8)
	$5 = ($5 + [-1])
	$6 = *($0)
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [496])
	CALL eosio_assert(((int_32)*($9 + [72]) == (int_32)($10 + [40])), [544])
	CALL eosio_assert(((int_64)*($10 + [40]) == (int_64)CALL $fimport$3()), [592])
	*($9 + [36]) = $5
	$1 = *($9)
	CALL eosio_assert([1], [656])
	*($10 + [160]) = (($10 + [80]) + [72])
	*($10 + [156]) = ($10 + [80])
	*($10 + [152]) = ($10 + [80])
	*($10 + [168]) = ($10 + [152])
	*($10 + [180]) = ($9 + [8])
	*($10 + [176]) = $9
	*($10 + [184]) = ($9 + [12])
	*($10 + [188]) = ($9 + [16])
	*($10 + [192]) = ($9 + [24])
	*($10 + [196]) = ($9 + [32])
	*($10 + [200]) = ($9 + [36])
	*($10 + [204]) = ($9 + [40])
	*($10 + [208]) = ($9 + [44])
	*($10 + [212]) = ($9 + [48])
	*($10 + [216]) = ($9 + [56])
	*($10 + [220]) = ($9 + [64])
	CALL $60(($10 + [176]), ($10 + [168]))
	CALL db_update_i64(*($9 + [76]), $6, ($10 + [80]), [72])
	$9 = (($10 + [40]) + [16])
	if ( (uint_64)($1 <= *($9)) ){ goto $label$5 }
	*($9) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$0 = *($10 + [24])
	if ( ($0 == 0) ){ goto $label$6 }
	$8 = ($10 + [28])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	CALL $101($5)
	
.LABEL $label$10
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$9 }
	$9 = *(($10 + [24]))
	goto $label$7 
	
.LABEL $label$8
	$9 = $0
	
.LABEL $label$7
	*($8) = $0
	CALL $101($9)
	
.LABEL $label$6
	$0 = *($10 + [64])
	if ( ($0 == 0) ){ goto $label$11 }
	$8 = ($10 + [68])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$13 }
	
.LOOP $label$14:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	CALL $101($5)
	
.LABEL $label$15
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$14 }
	$9 = *(($10 + [64]))
	goto $label$12 
	
.LABEL $label$13
	$9 = $0
	
.LABEL $label$12
	*($8) = $0
	CALL $101($9)
	
.LABEL $label$11
	*([0] + [4]) = ($10 + [224])
}

int_32 .FUNC $67 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [128]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1616])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4318952042648305664)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1552])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1552])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $46(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC _ZN7farmeos9update_bjEyxNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEym (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	*(($10 + [48])) = [0]
	*($10 + [32]) = (int_64)-1
	$7 = *($0)
	*($10 + [16]) = $7
	*($10 + [24]) = $1
	*($10 + [40]) = (int_64)0
	$0 = CALL db_lowerbound_i64($7, $1, (int_64)4318952042648305664, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	CALL $46(($10 + [16]), $0)
	*($10 + [12]) = [0]
	*($10 + [8]) = ($10 + [16])
	CALL $67(($10 + [8]))
	
.LABEL $label$1
	*($10 + [4]) = [0]
	*($10) = ($10 + [16])
	$9 = ($10 + [24])
	if ( ((*(*(CALL $67($10) + [4]) + [120]) - *(CALL $46(($10 + [16]), CALL $fimport$8(*($10 + [16]), *($9), (int_64)4318952042648305664, (int_64)0)) + [120])) <= [11]) ){ goto $label$2 }
	$0 = [0]
	$9 = CALL db_lowerbound_i64(*($10 + [16]), *($9), (int_64)4318952042648305664, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $46(($10 + [16]), $9)
	
.LABEL $label$3
	$9 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($9, [416])
	CALL eosio_assert($9, [464])
	$9 = CALL db_next_i64(*($0 + [128]), ($10 + [56]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$4 }
	CALL $46(($10 + [16]), $9)
	
.LABEL $label$4
	CALL $51(($10 + [16]), $0)
	
.LABEL $label$2
	$6 = *($10 + [40])
	if ( ($6 == 0) ){ goto $label$5 }
	$8 = ($10 + [44])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	$9 = ($9 + [-24])
	$0 = *($9)
	*($9) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	if ( ((*($0 + [88]) & [1]) == 0) ){ goto $label$10 }
	CALL $101(*(($0 + [96])))
	
.LABEL $label$10
	if ( ((*($0 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL $101(*(($0 + [48])))
	
.LABEL $label$11
	CALL $101($0)
	
.LABEL $label$9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$8 }
	$0 = *(($10 + [40]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $6
	
.LABEL $label$6
	*($8) = $6
	CALL $101($0)
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [64])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $100(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $101($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $101($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC _ZN7farmeos10update_betEyxmy (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [224])
	*([0] + [4]) = $10
	*((($10 + [40]) + [32])) = [0]
	*($10 + [56]) = (int_64)-1
	*($10 + [64]) = (int_64)0
	$6 = *($0)
	*($10 + [40]) = $6
	*($10 + [48]) = $6
	$9 = [0]
	$5 = CALL db_find_i64($6, $6, (int_64)-3020376800539705344, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $59(($10 + [40]), $5)
	CALL eosio_assert(((int_32)*($9 + [72]) == (int_32)($10 + [40])), [256])
	
.LABEL $label$1
	$5 = *($9 + [32])
	*(($10 + [32])) = [0]
	*($10 + [8]) = $1
	*($10 + [16]) = (int_64)-1
	*($10 + [24]) = (int_64)0
	$6 = *($0)
	*($10) = $6
	if ( ($5 <= [11]) ){ goto $label$2 }
	$8 = [0]
	$7 = CALL db_lowerbound_i64($6, $1, (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $11($10, $7)
	
.LABEL $label$3
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [416])
	CALL eosio_assert($7, [464])
	$7 = CALL db_next_i64(*($8 + [108]), ($10 + [80]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	CALL $11($10, $7)
	
.LABEL $label$4
	CALL $16($10, $8)
	$5 = ($5 + [-1])
	$6 = *($0)
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [496])
	CALL eosio_assert(((int_32)*($9 + [72]) == (int_32)($10 + [40])), [544])
	CALL eosio_assert(((int_64)*($10 + [40]) == (int_64)CALL $fimport$3()), [592])
	*($9 + [32]) = $5
	$1 = *($9)
	CALL eosio_assert([1], [656])
	*($10 + [160]) = (($10 + [80]) + [72])
	*($10 + [156]) = ($10 + [80])
	*($10 + [152]) = ($10 + [80])
	*($10 + [168]) = ($10 + [152])
	*($10 + [180]) = ($9 + [8])
	*($10 + [176]) = $9
	*($10 + [184]) = ($9 + [12])
	*($10 + [188]) = ($9 + [16])
	*($10 + [192]) = ($9 + [24])
	*($10 + [196]) = ($9 + [32])
	*($10 + [200]) = ($9 + [36])
	*($10 + [204]) = ($9 + [40])
	*($10 + [208]) = ($9 + [44])
	*($10 + [212]) = ($9 + [48])
	*($10 + [216]) = ($9 + [56])
	*($10 + [220]) = ($9 + [64])
	CALL $60(($10 + [176]), ($10 + [168]))
	CALL db_update_i64(*($9 + [76]), $6, ($10 + [80]), [72])
	$9 = (($10 + [40]) + [16])
	if ( (uint_64)($1 <= *($9)) ){ goto $label$5 }
	*($9) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$0 = *($10 + [24])
	if ( ($0 == 0) ){ goto $label$6 }
	$8 = ($10 + [28])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	CALL $101($5)
	
.LABEL $label$10
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$9 }
	$9 = *(($10 + [24]))
	goto $label$7 
	
.LABEL $label$8
	$9 = $0
	
.LABEL $label$7
	*($8) = $0
	CALL $101($9)
	
.LABEL $label$6
	$0 = *($10 + [64])
	if ( ($0 == 0) ){ goto $label$11 }
	$8 = ($10 + [68])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$13 }
	
.LOOP $label$14:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	CALL $101($5)
	
.LABEL $label$15
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$14 }
	$9 = *(($10 + [64]))
	goto $label$12 
	
.LABEL $label$13
	$9 = $0
	
.LABEL $label$12
	*($8) = $0
	CALL $101($9)
	
.LABEL $label$11
	*([0] + [4]) = ($10 + [224])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [544])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [592])
	$4 = *($1)
	if ( (*(*($3)) == 0) ){ goto $label$2 }
	*($1 + [8]) = (*($1 + [8]) + [1])
	*($1 + [24]) = ((int_64)*(*($3 + [4])) + (int_64)*($1 + [24]))
	$6 = ($1 + [12])
	$5 = ($1 + [24])
	$7 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($1 + [12]) = (*($1 + [12]) + [1])
	$5 = ($1 + [24])
	$7 = ($1 + [8])
	$6 = ($1 + [12])
	
.LABEL $label$1
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3 + [8])))
	CALL eosio_assert([1], [656])
	$9 = $9
	$3 = ($9 + [-80])
	*([0] + [4]) = $3
	*($8 + [12]) = $3
	*($8 + [8]) = $3
	*($8 + [16]) = ($9 + [-8])
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = $7
	*($8 + [32]) = $1
	*($8 + [40]) = $6
	*($8 + [44]) = ($1 + [16])
	*($8 + [48]) = $5
	*($8 + [52]) = ($1 + [32])
	*($8 + [56]) = ($1 + [36])
	*($8 + [60]) = ($1 + [40])
	*($8 + [64]) = ($1 + [44])
	*($8 + [68]) = ($1 + [48])
	*($8 + [72]) = ($1 + [56])
	*($8 + [76]) = ($1 + [64])
	CALL $60(($8 + [32]), ($8 + [24]))
	CALL db_update_i64(*($1 + [76]), $2, $3, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
}

void .FUNC $101 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $100 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10348])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $104($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $102 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $100(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $101($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $100($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $101($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [944])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [944])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [944])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [944])
	CALL memcpy(($5 + [8]), $3, [4])
	$6 = *($5 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 $6), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$4 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	*($6) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [944])
	CALL memcpy($6, $4, [4])
	CALL eosio_assert(((uint_32)($1 + [-4]) > (uint_32)[7]), [944])
	$7 = ($6 + [8])
	CALL memcpy($7, ($4 + [4]), [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($4)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *($7)
	$4 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $4), (int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [112])
	*([0] + [4]) = $4
	*(($5 = $4) + [76]) = $0
	*($5 + [64]) = *($1)
	*($5 + [68]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [16])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	CALL eosio_assert([1], [16])
	$3 = (int_64)5462355
	
.LOOP $label$5:
	$4 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($4, [80])
	*(($5 + [56])) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [84]) = $0
	*($5 + [80]) = $0
	*($5 + [88]) = ($0 + $2)
	*($5 + [96]) = ($5 + [80])
	*($5 + [104]) = $5
	CALL $91(($5 + [104]), ($5 + [96]))
	if ( ($2 <= [513]) ){ goto $label$8 }
	CALL free($0)
	
.LABEL $label$8
	*($5 + [84]) = ($5 + [64])
	*($5 + [80]) = ($5 + [76])
	CALL $92(($5 + [80]), $5)
	$1 = *(($5 + [52]))
	if ( ($1 == 0) ){ goto $label$9 }
	*(($5 + [56])) = $1
	CALL $101($1)
	
.LABEL $label$9
	*([0] + [4]) = ($5 + [112])
	return [1]
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [16])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [80])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $94(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $95(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $101(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [384])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1728]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1744]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [1760])
	
.LABEL $label$7
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1664]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$23 }
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [1824]
	$7 = (int_64)0
	
.LOOP $label$24:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$25 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$25
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$24 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$22 }
	
.LABEL $label$23
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1840]
	$7 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$33 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$3 = ($3 + [165])
	goto $label$31 
	
.LABEL $label$33
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$29
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$28 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$22
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$20 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1840]
	$7 = (int_64)0
	
.LOOP $label$34:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$39 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$3 = ($3 + [165])
	goto $label$37 
	
.LABEL $label$39
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$35
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$34 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$20 }
	
.LABEL $label$21
	*(($9 + [152])) = $0
	*(($9 + [160])) = (int_64)-1
	*(($9 + [168])) = (int_64)0
	*(($9 + [176])) = [0]
	*($9 + [144]) = $0
	*($9 + [136]) = $0
	*($9 + [184]) = $0
	*(($9 + [192])) = $0
	*(($9 + [200])) = (int_64)-1
	*(($9 + [208])) = [0]
	*(($9 + [212])) = [0]
	*(($9 + [216])) = [0]
	*($9 + [224]) = $0
	*(($9 + [232])) = $0
	*(($9 + [240])) = (int_64)-1
	*(($9 + [248])) = [0]
	*(($9 + [252])) = [0]
	*(($9 + [256])) = [0]
	*($9 + [264]) = $0
	*(($9 + [272])) = $0
	*(($9 + [280])) = (int_64)-1
	*(($9 + [288])) = [0]
	*(($9 + [292])) = [0]
	*(($9 + [296])) = [0]
	*($9 + [304]) = $0
	*(($9 + [312])) = $0
	*(($9 + [320])) = (int_64)-1
	*(($9 + [328])) = [0]
	*(($9 + [332])) = [0]
	*(($9 + [336])) = [0]
	*($9 + [344]) = $0
	*(($9 + [352])) = $0
	*(($9 + [360])) = (int_64)-1
	*(($9 + [368])) = [0]
	*(($9 + [372])) = [0]
	*(($9 + [376])) = [0]
	if ( ((int_64)$2 > (int_64)-3075276117358510081) ){ goto $label$47 }
	if ( ((int_64)$2 > (int_64)-3075276126730321921) ){ goto $label$46 }
	if ( ((int_64)$2 == (int_64)-8279611178955571200) ){ goto $label$44 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$40 }
	*($9 + [132]) = [0]
	*($9 + [128]) = [1]
	*($9 + [8 align=4]) = *($9 + [128])
	CALL $84(($9 + [136]), ($9 + [8]))
	goto $label$40 
	
.LABEL $label$47
	if ( ((int_64)$2 > (int_64)4229443000054317055) ){ goto $label$45 }
	if ( ((int_64)$2 == (int_64)-3075276117358510080) ){ goto $label$43 }
	if ( ((int_64)$2 != (int_64)-3075276112536797184) ){ goto $label$40 }
	*($9 + [92]) = [0]
	*($9 + [88]) = [2]
	*($9 + [48 align=4]) = *($9 + [88])
	CALL $89(($9 + [136]), ($9 + [48]))
	goto $label$40 
	
.LABEL $label$46
	if ( ((int_64)$2 == (int_64)-3075276126730321920) ){ goto $label$42 }
	if ( ((int_64)$2 != (int_64)-3075276122720567296) ){ goto $label$40 }
	*($9 + [100]) = [0]
	*($9 + [96]) = [3]
	*($9 + [40 align=4]) = *($9 + [96])
	CALL $88(($9 + [136]), ($9 + [40]))
	goto $label$40 
	
.LABEL $label$45
	if ( ((int_64)$2 == (int_64)4229443000054317056) ){ goto $label$41 }
	if ( ((int_64)$2 != (int_64)4923676291099525120) ){ goto $label$40 }
	*($9 + [108]) = [0]
	*($9 + [104]) = [4]
	*($9 + [32 align=4]) = *($9 + [104])
	CALL $87(($9 + [136]), ($9 + [32]))
	goto $label$40 
	
.LABEL $label$44
	*($9 + [84]) = [0]
	*($9 + [80]) = [5]
	*($9 + [56 align=4]) = *($9 + [80])
	CALL $89(($9 + [136]), ($9 + [56]))
	goto $label$40 
	
.LABEL $label$43
	*($9 + [76]) = [0]
	*($9 + [72]) = [6]
	*($9 + [64 align=4]) = *($9 + [72])
	CALL $88(($9 + [136]), ($9 + [64]))
	goto $label$40 
	
.LABEL $label$42
	*($9 + [116]) = [0]
	*($9 + [112]) = [7]
	*($9 + [24 align=4]) = *($9 + [112])
	CALL $86(($9 + [136]), ($9 + [24]))
	goto $label$40 
	
.LABEL $label$41
	*($9 + [124]) = [0]
	*($9 + [120]) = [8]
	*($9 + [16 align=4]) = *($9 + [120])
	CALL $85(($9 + [136]), ($9 + [16]))
	
.LABEL $label$40
	CALL $90(($9 + [136]))
	
.LABEL $label$20
	*([0] + [4]) = ($9 + [384])
}

void .FUNC _ZN7farmeos5loginEy (int_32 $0, int_64 $1)
{
	CALL require_auth($1)
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [80])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [544])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [592])
	$3 = *($1)
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [1680]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	*($1 + [64]) = $8
	CALL eosio_assert([1], [656])
	$4 = $11
	$5 = ($4 + [-80])
	*([0] + [4]) = $5
	*($10 + [12]) = $5
	*($10 + [8]) = $5
	*($10 + [16]) = ($4 + [-8])
	*($10 + [24]) = ($10 + [8])
	*($10 + [36]) = ($1 + [8])
	*($10 + [32]) = $1
	*($10 + [40]) = ($1 + [12])
	*($10 + [44]) = ($1 + [16])
	*($10 + [48]) = ($1 + [24])
	*($10 + [52]) = ($1 + [32])
	*($10 + [56]) = ($1 + [36])
	*($10 + [60]) = ($1 + [40])
	*($10 + [64]) = ($1 + [44])
	*($10 + [68]) = ($1 + [48])
	*($10 + [72]) = ($1 + [56])
	*($10 + [76]) = ($1 + [64])
	CALL $60(($10 + [32]), ($10 + [24]))
	CALL db_update_i64(*($1 + [76]), $2, $5, [72])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [80])
}

void .FUNC _ZN7farmeos8updateuiEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$4 = *($0)
	*($6 + [8]) = $4
	*($6 + [16]) = $4
	$3 = CALL db_find_i64($4, $4, (int_64)-3020376800539705344, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $59(($6 + [8]), $3)
	CALL eosio_assert(((int_32)*($3 + [72]) == (int_32)($6 + [8])), [256])
	$4 = *($0)
	CALL eosio_assert([1], [496])
	CALL $81(($6 + [8]), $3, $4)
	
.LABEL $label$1
	$2 = *($6 + [32])
	if ( ($2 == 0) ){ goto $label$2 }
	$5 = ($6 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL $101($3)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($6 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $2
	
.LABEL $label$3
	*($5) = $2
	CALL $101($0)
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [16])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [80])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [944])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $100(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $101($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $101($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$9 = [0]
	*(($10 + [40])) = [0]
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	$7 = *($1)
	*($10 + [8]) = $7
	*($10 + [16]) = $2
	$8 = (uint_64)$3 >> (uint_64)(int_64)8
	$1 = CALL db_find_i64($7, $2, (int_64)3607749779137757184, $8)
	if ( ((int_32)$1) < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $71(($10 + [8]), $1) + [16]) == (int_32)($10 + [8])), [256])
	$4 = *(($10 + [32]))
	$6 = *(($10 + [36]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$6 }
	$9 = ($6 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)(uint_64)*(*($9) + [8]) >> (uint_64)(int_64)8) == (int_64)$8) ){ goto $label$6 }
	$6 = $9
	$1 = ($9 + [-24])
	$9 = $1
	if ( ((int_32)($1 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	$9 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($10 + [8])), [256])
	goto $label$3 
	
.LABEL $label$5
	*($0 + [8]) = $3
	*($0) = (int_64)0
	CALL eosio_assert([1], [16])
	
.LOOP $label$9:
	$1 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$1 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($1, [80])
	$6 = *($10 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$9 = [0]
	$1 = CALL db_find_i64(*($10 + [8]), *(($10 + [16])), (int_64)3607749779137757184, $8)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $71(($10 + [8]), $1)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($10 + [8])), [256])
	
.LABEL $label$3
	*($0) = *($9)
	*(($0 + [8])) = *(($9 + [8]))
	$6 = *($10 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($10 + [36])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$13 }
	
.LOOP $label$14:
	$9 = ($9 + [-24])
	$1 = *($9)
	*($9) = [0]
	if ( ($1 == 0) ){ goto $label$15 }
	CALL $101($1)
	
.LABEL $label$15
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$14 }
	$9 = *(($10 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$9 = $6
	
.LABEL $label$12
	*($5) = $6
	CALL $101($9)
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [912])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $100([32])
	$6 = CALL $72($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $73(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $101($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC _ZN7farmeos8updatebjExx (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	*($9 + [64]) = $1
	*($9 + [56]) = $2
	$2 = (int_64)0
	$1 = (int_64)59
	$6 = [1680]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	*(($3 = ($9 + [48]))) = [0]
	*($9 + [32]) = (int_64)-1
	$2 = *($0)
	*($9 + [16]) = $2
	*($9 + [24]) = $2
	*($9 + [40]) = (int_64)0
	$6 = CALL db_lowerbound_i64($2, $2, (int_64)4313661929819209728, (int_64)0)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$7 }
	$6 = CALL $47(($9 + [16]), $6)
	$2 = *($0)
	*($9 + [84]) = ($9 + [56])
	*($9 + [80]) = ($9 + [64])
	CALL eosio_assert([1], [496])
	CALL $78(($9 + [16]), $6, $2, ($9 + [80]))
	$0 = *($9 + [40])
	if ( $0 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = *($0)
	*($9 + [12]) = ($9 + [56])
	*($9 + [8]) = ($9 + [64])
	*($9 + [104]) = $1
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$3()), [352])
	*($9 + [84]) = ($9 + [8])
	*($9 + [80]) = ($9 + [16])
	*($9 + [88]) = ($9 + [104])
	*(($6 = CALL $100([48])) + [32]) = ($9 + [16])
	CALL $77(($9 + [80]), $6)
	*($9 + [96]) = $6
	$2 = *($6)
	*($9 + [80]) = $2
	$5 = *($6 + [36])
	*($9 + [76]) = $5
	$4 = ($9 + [44])
	$0 = *($4)
	if ( ((uint_32)$0 >= (uint_32)*($3)) ){ goto $label$9 }
	*($0 + [8]) = $2
	*($0 + [16]) = $5
	*($9 + [96]) = [0]
	*($0) = $6
	*($4) = ($0 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $56(($9 + [40]), ($9 + [96]), ($9 + [80]), ($9 + [76]))
	
.LABEL $label$8
	$6 = *($9 + [96])
	*($9 + [96]) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $101($6)
	
.LABEL $label$10
	$0 = *($9 + [40])
	if ( ($0 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$5 = ($9 + [44])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$13:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$14 }
	CALL $101($3)
	
.LABEL $label$14
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$13 }
	$6 = *(($9 + [40]))
	goto $label$11 
	
.LABEL $label$12
	$6 = $0
	
.LABEL $label$11
	*($5) = $0
	CALL $101($6)
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [112])
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [48])
	$7 = $6
	*([0] + [4]) = $6
	$2 = *($0)
	$3 = *($0 + [4])
	$5 = *(*($3))
	if ( ((int_64)$5 == (int_64)-1) ){ goto $label$1 }
	*($1 + [8]) = $5
	
.LABEL $label$1
	$4 = ($1 + [16])
	$5 = *(*($3 + [4]))
	if ( ((int_64)$5 == (int_64)-1) ){ goto $label$2 }
	*($4) = $5
	
.LABEL $label$2
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$3 = $6
	$6 = ($3 + [-32])
	*([0] + [4]) = $6
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = $3
	*($7 + [16]) = $7
	*($7 + [28]) = ($1 + [4])
	*($7 + [24]) = $1
	*($7 + [32]) = ($1 + [8])
	*($7 + [36]) = $4
	*($7 + [40]) = ($1 + [24])
	CALL $52(($7 + [24]), ($7 + [16]))
	$5 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)4313661929819209728, *(*($0 + [8])), $5, $6, [32])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC _ZN7farmeos10updatelineExx (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($6 + [24]) = $1
	*($6 + [16]) = $2
	CALL require_auth(*($0))
	$3 = ($0 + [8])
	$5 = [0]
	$4 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $12($3, $4)
	
.LABEL $label$1
	$2 = *($0)
	*($6 + [12]) = ($6 + [16])
	*($6 + [8]) = ($6 + [24])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [496])
	CALL $75($3, $5, $2, ($6 + [8]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [944])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [944])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $40(*($1), *($0 + [36]))
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [944])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [944])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [4])
	*(($2 = *($1))) = (*($2) + [4])
	*(($2 = *($1))) = (*($2) + [4])
	*(($2 = *($1))) = (*($2) + [16])
	*(($2 = *($1))) = (*($2) + [16])
	$0 = *($2)
	$2 = *($0 + [36])
	$4 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$3 = *($1)
	$0 = *($3)
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($3) = $0
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $0)
	
.LABEL $label$2
	*(($0 = *($1))) = (*($0) + [4])
	*(($0 = *($1))) = (*($0) + [8])
	*(($0 = *($1))) = (*($0) + [8])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $38(*($1), *($0 + [36]))
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [720])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [720])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [544])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [592])
	$4 = *($1)
	$5 = *(*($3))
	if ( ((int_64)$5 == (int_64)-1) ){ goto $label$1 }
	*($1 + [8]) = $5
	
.LABEL $label$1
	$5 = (CASTING uint_64)(uint_32 $4)
	$7 = ($1 + [16])
	$6 = *(*($3 + [4]))
	if ( ((int_64)$6 == (int_64)-1) ){ goto $label$2 }
	*($7) = $6
	
.LABEL $label$2
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_32)$4 == (int_32)*($1)), [656])
	$9 = $9
	$3 = ($9 + [-32])
	*([0] + [4]) = $3
	*($8 + [4]) = $3
	*($8) = $3
	*($8 + [8]) = $9
	*($8 + [16]) = $8
	*($8 + [28]) = ($1 + [4])
	*($8 + [24]) = $1
	*($8 + [32]) = ($1 + [8])
	*($8 + [36]) = $7
	*($8 + [40]) = ($1 + [24])
	CALL $52(($8 + [24]), ($8 + [16]))
	CALL db_update_i64(*(($1 + [36])), $2, $3, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
}

void .FUNC _ZN7farmeos5cleanEl (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	CALL require_auth(*($0))
	if ( ((int_32)$1 != (int_32)[1]) ){ goto $label$1 }
	CALL prints([1696])
	$2 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$0 = [1712]
	$7 = (int_64)0
	
.LOOP $label$2:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$3 }
	$1 = *($0)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$1 = ($1 + [165])
	goto $label$4 
	
.LABEL $label$5
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$3
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$2 }
	*(($9 + [32])) = [0]
	*($9 + [16]) = (int_64)-1
	*($9 + [8]) = $7
	*($9) = $2
	*($9 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($2, $7, (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$1 = ($9 + [8])
	
.LOOP $label$6:
	CALL $11($9, $0)
	$0 = [0]
	$3 = CALL db_lowerbound_i64(*($9), *($1), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	$0 = CALL $11($9, $3)
	
.LABEL $label$7
	$3 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($3, [416])
	CALL eosio_assert($3, [464])
	$3 = CALL db_next_i64(*($0 + [108]), ($9 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	CALL $11($9, $3)
	
.LABEL $label$8
	CALL $16($9, $0)
	$0 = CALL db_lowerbound_i64(*($9), *($1), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$3 = *($9 + [24])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($9 + [28])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $101($1)
	
.LABEL $label$12
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($9 + [24]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $3
	
.LABEL $label$9
	*($4) = $3
	CALL $101($0)
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [48])
}

int_32 .FUNC $32 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [48]) = (int_64)0
	*(($2 = ($0 + [56]))) = (int_64)1397703940
	CALL eosio_assert([1], [16])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [80])
	*(($2 = ($0 + [72]))) = (int_64)1397703940
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [16])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [80])
	*(($0 + [88])) = [0]
	*($0 + [80 align=4]) = (int_64)0
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_32 $19
	$18 = (*([0] + [4]) - [80])
	*([0] + [4]) = $18
	$19 = *($0 + [4])
	*($1) = *(*($19))
	*($1 + [8]) = *(*($19 + [4]))
	$2 = *($0)
	*($1 + [16]) = *(*($19 + [8]))
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [32]) = *(*($19 + [12]))
	$15 = *($19 + [16])
	*($1 + [36]) = (*($15 + [4]) - *($15))
	$15 = *($19 + [20])
	$16 = *(($15 + [8]))
	$17 = *($15)
	*($1 + [40]) = [0]
	*($1 + [48]) = $17
	*(($1 + [56])) = $16
	$10 = ($1 + [80])
	CALL $103($10, *($19 + [24]))
	*(($19 = $18) + [16]) = [0]
	*($19) = ($19 + [16])
	$3 = ($1 + [8])
	*($19 + [28]) = $3
	*($19 + [24]) = $1
	$4 = ($1 + [16])
	*($19 + [32]) = $4
	$5 = ($1 + [24])
	*($19 + [36]) = $5
	$6 = ($1 + [32])
	*($19 + [40]) = $6
	$7 = ($1 + [36])
	*($19 + [44]) = $7
	$9 = ($1 + [40])
	*($19 + [48]) = $9
	$8 = ($1 + [48])
	*($19 + [52]) = $8
	$11 = ($1 + [64])
	*($19 + [56]) = $11
	*($19 + [60]) = $10
	$12 = ($1 + [92])
	*($19 + [64]) = $12
	$13 = ($1 + [96])
	*($19 + [68]) = $13
	$14 = ($1 + [104])
	*($19 + [72]) = $14
	CALL $36(($19 + [24]), $19)
	$15 = *($19 + [16])
	if ( ($15 <= [513]) ){ goto $label$2 }
	$18 = CALL malloc($15)
	goto $label$1 
	
.LABEL $label$2
	$18 = ($18 - (($15 + [15]) & [-16]))
	*([0] + [4]) = $18
	
.LABEL $label$1
	*($19 + [4]) = $18
	*($19) = $18
	*($19 + [8]) = ($18 + $15)
	*($19 + [16]) = $19
	*($19 + [28]) = $3
	*($19 + [24]) = $1
	*($19 + [32]) = $4
	*($19 + [36]) = $5
	*($19 + [40]) = $6
	*($19 + [44]) = $7
	*($19 + [48]) = $9
	*($19 + [52]) = $8
	*($19 + [56]) = $11
	*($19 + [60]) = $10
	*($19 + [64]) = $12
	*($19 + [68]) = $13
	*($19 + [72]) = $14
	CALL $37(($19 + [24]), ($19 + [16]))
	$16 = *($1)
	*($1 + [116]) = CALL db_store_i64(*($2 + [8]), (int_64)-7807363788000198656, *(*($0 + [8])), $16, $18, $15)
	if ( ($15 <= [513]) ){ goto $label$3 }
	CALL free($18)
	
.LABEL $label$3
	if ( (uint_64)($16 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$16 + (int_64)1) : ((uint_64)$16 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($19 + [80])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ($5 - $4)
	$7 = ($3 + [1])
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$2 = (*($0 + [8]) - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $100($6)
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	*(($3 = ($7 + $3))) = *($1)
	$5 = ($5 - $4)
	$1 = ($3 - $5)
	$6 = ($7 + $6)
	$7 = ($3 + [1])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $101($4)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [912])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $100([128])
	CALL $32($6)
	*($6 + [112]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [32])
	*($8 + [60]) = ($6 + [36])
	*($8 + [64]) = ($6 + [40])
	*($8 + [68]) = ($6 + [48])
	*($8 + [72]) = ($6 + [64])
	*($8 + [76]) = ($6 + [80])
	*($8 + [80]) = ($6 + [92])
	*($8 + [84]) = ($6 + [96])
	*($8 + [88]) = ($6 + [104])
	CALL $39(($8 + [40]), ($8 + [32]))
	*($6 + [116]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [116])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $34(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$10 }
	CALL $101(*(($4 + [88])))
	
.LABEL $label$10
	CALL $101($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [96])
	return $6
}