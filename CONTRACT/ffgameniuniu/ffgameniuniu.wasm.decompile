(data (i32.const 4) "`\81\00\00")
(data (i32.const 16) "Invalid hex character\00")
(data (i32.const 48) "0123456789abcdef\00")
(data (i32.const 80) "invalid sha256\00")
(data (i32.const 96) "invalid sha1\00")
(data (i32.const 112) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\ff\ff\ff\ff\ff\ff\ff\t\n\0b\0c\0d\0e\0f\10\ff\11\12\13\14\15\ff\16\17\18\19\1a\1b\1c\1d\1e\1f \ff\ff\ff\ff\ff\ff!\"#$%&\'()*+\ff,-./0123456789\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 368) "carry == 0\00")
(data (i32.const 384) "./utils.hpp\00")
(data (i32.const 400) "DecodeBase58\00")
(data (i32.const 416) "SIG_K1_\00")
(data (i32.const 432) "EOS\00")
(data (i32.const 448) "invalid first pos\00")
(data (i32.const 480) "parse memo error\00")
(data (i32.const 512) "eosio.token\00")
(data (i32.const 528) "transfer\00")
(data (i32.const 544) "it is not my action.\00")
(data (i32.const 576) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 640) "invalid symbol name\00")
(data (i32.const 672) "read\00")
(data (i32.const 688) "ffgamemanage\00")
(data (i32.const 704) "invalid type\00")
(data (i32.const 720) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 784) "cannot pass end iterator to modify\00")
(data (i32.const 832) "cannot create objects in table of another contract\00")
(data (i32.const 896) "write\00")
(data (i32.const 912) "object passed to modify is not in multi_index\00")
(data (i32.const 960) "cannot modify objects in table of another contract\00")
(data (i32.const 1024) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1088) "error reading iterator\00")
(data (i32.const 1120) "ffgamemarket\00")
(data (i32.const 1136) "100016 room not found\00")
(data (i32.const 1168) "100063 not room master\00")
(data (i32.const 1200) "100064 no amount to withdraw\00")
(data (i32.const 1232) "attempt to subtract asset with different symbol\00")
(data (i32.const 1280) "subtraction underflow\00")
(data (i32.const 1312) "subtraction overflow\00")
(data (i32.const 1344) "Withdraw From FFgame\00")
(data (i32.const 1376) "active\00")
(data (i32.const 1392) "ffgameiologs\00")
(data (i32.const 1408) "niuwithdraw\00")
(data (i32.const 1424) "get\00")
(data (i32.const 1440) "cannot pass end iterator to erase\00")
(data (i32.const 1488) "scoreboard\00")
(data (i32.const 1504) "object passed to erase is not in multi_index\00")
(data (i32.const 1552) "cannot erase objects in table of another contract\00")
(data (i32.const 1616) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1680) "cannot increment end iterator\00")
(data (i32.const 1712) "niureveal\00")
(data (i32.const 1728) "no permission\00")
(data (i32.const 1744) "clearplayer\00")
(data (i32.const 1760) "100000 The game has been suspended\00")
(data (i32.const 1808) "100013 invalid room status\00")
(data (i32.const 1840) "100033 game id do not match\00")
(data (i32.const 1872) "100049 poker info not found\00")
(data (i32.const 1904) "playerlog\00")
(data (i32.const 1920) "startbet\00")
(data (i32.const 1936) "niuresult\00")
(data (i32.const 1952) "next primary key in table is at autoincrement limit\00")
(data (i32.const 2016) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 2080) "cannot decrement iterator at beginning of table\00")
(data (i32.const 2128) "attempt to add asset with different symbol\00")
(data (i32.const 2176) "addition underflow\00")
(data (i32.const 2208) "addition overflow\00")
(data (i32.const 2240) "invalid payout multiple\00")
(data (i32.const 2272) "multiplication overflow\00")
(data (i32.const 2304) "multiplication underflow\00")
(data (i32.const 2336) "divide by zero\00")
(data (i32.const 2352) "signed division overflow\00")
(data (i32.const 2384) "ffgamebonus1\00")
(data (i32.const 2400) "deposit\00")
(data (i32.const 2416) "ffgametokens\00")
(data (i32.const 2432) "mining\00")
(data (i32.const 2448) "100036 token contract not found\00")
(data (i32.const 2480) "100058 card already exist\00")
(data (i32.const 2512) "opencard\00")
(data (i32.const 2544) "00\00")
(data (i32.const 2560) "0\00")
(data (i32.const 2576) "100021 this game has closed\00")
(data (i32.const 2608) "100017 not betting time\00")
(data (i32.const 2640) "100039 invalid asset type\00")
(data (i32.const 2672) "100005 invalid bet type\00")
(data (i32.const 2704) "100054 banker can not bet\00")
(data (i32.const 2736) "100032 number of player exceeds limit\00")
(data (i32.const 2784) "niubet\00")
(data (i32.const 2800) ":\00")
(data (i32.const 2816) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 2880) "100035 quantity too small\00")
(data (i32.const 2912) "100048 pledge pool overdraw\00")
(data (i32.const 2944) "100008 balance pool overdraw\00")
(data (i32.const 2976) "100059 invalid bet memo\00")
(data (i32.const 3008) "100037 invalid contract\00")
(data (i32.const 3040) "100003 invalid quantity\00")
(data (i32.const 3072) "100040 token contract exist\00")
(data (i32.const 3104) "100041 token not allowed\00")
(data (i32.const 3136) "room banker not empty\00")
(data (i32.const 3168) "niuclear\00")
(data (i32.const 3184) "100010 close room apply exist\00")
(data (i32.const 3216) "100004 invalid room owner\00")
(data (i32.const 3248) "100051 not in the banker list\00")
(data (i32.const 3280) "100052 pledge amount error\00")
(data (i32.const 3312) "removebk\00")
(data (i32.const 3328) "100043 invalid room level\00")
(data (i32.const 3360) "100056 you are already a banker\00")
(data (i32.const 3392) "100050 already in the banker list\00")
(data (i32.const 3440) "100044 asset not enought\00")
(data (i32.const 3472) "100057 banker already exist\00")
(data (i32.const 3504) "pushbk\00")
(data (i32.const 3520) "100042 player pledge not found\00")
(data (i32.const 3552) "100047 unable to claim\00")
(data (i32.const 3584) "Claim From FFgame\00")
(data (i32.const 3616) "stopbet\00")
(data (i32.const 3632) "niuexit\00")
(data (i32.const 3648) "pledge\00")
(data (i32.const 3664) "100066 the number of rooms exceeds the limit\00")
(data (i32.const 3712) "100062 invalid amount for create room\00")
(data (i32.const 3760) "100018 invalid room code\00")
(data (i32.const 3792) "createroom\00")
(data (i32.const 3808) "100061 invalid create room memo\00")
(data (i32.const 12240) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 12336) "stoi\00")
(data (i32.const 12352) ": no conversion\00")
(data (i32.const 12368) ": out of range\00")
(data (i32.const 12384) "%d\00")
(data (i32.const 12400) "%lu\00")
(data (i32.const 12416) "%lld\00")
(data (i32.const 12432) "%llu\00")
(data (i32.const 12448) "p?\00\00")
(data (i32.const 12464) "Assertion failed: %s (%s: %s: %d)\n\00")
(data (i32.const 12500) "\e80\00\00")
(data (i32.const 12520) "\05\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\16\00\00\00\881\00\00\00\04\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 13712) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 14176) "0123456789ABCDEF")
(data (i32.const 14192) "-+   0X0x\00")
(data (i32.const 14208) "(null)\00")
(data (i32.const 14224) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 14256) "inf\00")
(data (i32.const 14272) "INF\00")
(data (i32.const 14288) "nan\00")
(data (i32.const 14304) "NAN\00")
(data (i32.const 14320) ".\00")
(data (i32.const 14336) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 14432) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 16240) "\05\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\16\00\00\00\08@\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 16400) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 16416) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 16432) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 16448) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 16720) "\00\01\02\04\07\03\06\05\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$2 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$3 (param i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$4 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$5 (param i32 i32)))
(import "env" "__floatunsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__multi3" (func $fimport$8 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$12))
(import "env" "action_data_size" (func $fimport$13 (result i32)))
(import "env" "current_receiver" (func $fimport$14 (result i64)))
(import "env" "current_time" (func $fimport$15 (result i64)))
(import "env" "db_end_i64" (func $fimport$16 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$19 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$20 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$21 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$22 (param i32)))
(import "env" "db_idx64_store" (func $fimport$23 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$24 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$28 (param i32)))
(import "env" "db_store_i64" (func $fimport$29 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$30 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$31 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$32 (param i32)))
(import "env" "is_account" (func $fimport$33 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$34 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$35 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$36 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$37 (param i32 i32)))
(import "env" "read_action_data" (func $fimport$38 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$39 (param i64)))
(import "env" "require_auth2" (func $fimport$40 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$41 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$42 (param i32 i32)))
(import "env" "sha256" (func $fimport$43 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "now" (func $0))
(export "_ZeqRK11checksum256S1_" (func $1))
(export "_ZeqRK11checksum160S1_" (func $2))
(export "_ZneRK11checksum160S1_" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z13uint64_stringy" (func $5))
(export "_Z8from_hexc" (func $7))
(export "_Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj" (func $8))
(export "_Z6to_hexPKcm" (func $9))
(export "_Z13sha256_to_hexRK11checksum256" (func $10))
(export "_Z11sha1_to_hexRK11checksum160" (func $11))
(export "_Z11uint64_hashRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $12))
(export "_Z11uint64_hashRK11checksum256" (func $13))
(export "_Z13str_to_sha256RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $14))
(export "_Z13hex_to_sha256RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $15))
(export "_Z11hex_to_sha1RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $16))
(export "_Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE" (func $17))
(export "_Z13decode_base58RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIhNS3_IhEEEE" (func $20))
(export "_Z10str_to_sigNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $21))
(export "_Z10str_to_pubNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $22))
(export "_Z7all_numNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $23))
(export "_Z15string_uint64_tPKcRKj" (func $24))
(export "_Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb" (func $25))
(export "apply" (func $26))
(export "_ZN6niuniu8transferERKyS1_RKN5eosio5assetERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE" (func $27))
(export "_ZN6niuniu10tptransferERKyN5eosio8currency8transferE" (func $30))
(export "_ZN6niuniu8startbetERKyS1_" (func $31))
(export "_ZN6niuniu7stopbetERKyS1_" (func $33))
(export "_ZN6niuniu9cstartbetERKyS1_" (func $34))
(export "_ZN6niuniu8cstopbetERKyS1_" (func $35))
(export "_ZN6niuniu5claimERKyS1_" (func $36))
(export "_ZN6niuniu6pushbkERKyS1_" (func $37))
(export "_ZN6niuniu8removebkERKyS1_" (func $38))
(export "_ZN6niuniu9closeroomERKy" (func $39))
(export "_ZN6niuniu8tokenregERKhRKyRKN5eosio5assetES7_S7_RKNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEES3_" (func $41))
(export "_ZN6niuniu3betERKN5eosio5assetERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE" (func $43))
(export "_ZN6niuniu6revealERKyS1_RKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_SA_" (func $45))
(export "_ZN6niuniu8opencardERKyS1_RKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_SA_" (func $47))
(export "_ZN6niuniu11clearplayerERKyS1_S1_S1_" (func $48))
(export "_ZN6niuniu9playerlogERKyS1_" (func $50))
(export "_ZN6niuniu10scoreboardERKyS1_S1_" (func $51))
(export "_ZN6niuniu8withdrawERKyS1_" (func $53))
(export "_ZN6niuniu7settingERKyS1_RKN5eosio5assetE" (func $54))
(export "malloc" (func $325))
(export "free" (func $328))
(export "_ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji" (func $344))
(export "_ZNSt3__19to_stringEi" (func $347))
(export "_ZNSt3__19to_stringEm" (func $349))
(export "_ZNSt3__19to_stringEx" (func $350))
(export "_ZNSt3__19to_stringEy" (func $351))
(export "isspace" (func $355))
(export "__errno_location" (func $356))
(export "__assert_fail" (func $357))
(export "fprintf" (func $358))
(export "fflush" (func $359))
(export "__ofl_lock" (func $360))
(export "__lockfile" (func $361))
(export "__unlockfile" (func $362))
(export "__ofl_unlock" (func $363))
(export "__unlock" (func $364))
(export "__lock" (func $365))
(export "__stdio_close" (func $366))
(export "__stdout_write" (func $367))
(export "__stdio_seek" (func $368))
(export "__stdio_write" (func $369))
(export "vfprintf" (func $370))
(export "__fwritex" (func $372))
(export "strerror" (func $374))
(export "strnlen" (func $375))
(export "wctomb" (func $376))
(export "__signbitl" (func $377))
(export "__fpclassifyl" (func $378))
(export "frexpl" (func $379))
(export "wcrtomb" (func $380))
(export "memchr" (func $381))
(export "__lctrans" (func $382))
(export "__lctrans_impl" (func $383))
(export "__mo_lookup" (func $384))
(export "strcmp" (func $385))
(export "__towrite" (func $386))
(export "pow" (func $387))
(export "sqrt" (func $388))
(export "fabs" (func $389))
(export "scalbn" (func $390))
(export "snprintf" (func $391))
(export "vsnprintf" (func $392))
(export "strtol" (func $394))
(export "__shlim" (func $395))
(export "__intscan" (func $396))
(export "__shgetc" (func $397))
(export "__uflow" (func $398))
(export "__toread" (func $399))
(export "memcmp" (func $400))
(export "strlen" (func $401))
(table $0 24 24 anyfunc)
(elem (i32.const 0) $402 $27 $35 $50 $41 $51 $48 $38 $43 $31 $39 $34 $47 $33 $45 $36 $37 $53 $54 $393 $366 $367 $368 $369)



void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$8 = *($0)
	$2 = int_32(($6 - $8) >> [4])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$7 = ($7 - $8)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($7 >> [3])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$7 = CALL $329(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$8 = ($0 + [4])
	
.LOOP $label$8:
	*($6 + [8]) = (int_64)1398362884
	*($6) = (int_64)0
	CALL eosio_assert([1], [576])
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$7 = [0]
	
.LABEL $label$9
	CALL eosio_assert($7, [640])
	$6 = (*($8) + [16])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $352($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$3 = ($7 + ($6 << [4]))
	$2 = ($7 + ($2 << [4]))
	$8 = $2
	
.LOOP $label$14:
	*($8 + [8]) = (int_64)1398362884
	*($8) = (int_64)0
	CALL eosio_assert([1], [576])
	$5 = (uint_64)*($8 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$7 = [0]
	
.LABEL $label$15
	CALL eosio_assert($7, [640])
	$8 = ($8 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$14 }
	$6 = *($0)
	$4 = ($0 + [4])
	$7 = (*($4) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$20 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$20
	*($0) = $1
	*($4) = $8
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $330($6)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1424])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $121($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [672])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [672])
	CALL memcpy(($7 + [8]), *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC __unlock (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $126 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $329(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $329([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $81(($8 + [28]), [32])
	$2 = *($2)
	$1 = *($8 + [28])
	*($9 + [4]) = $1
	*($9) = $1
	*($9 + [8]) = $2
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	CALL $127(($9 + [24]), ($9 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $330($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $330($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $330($6)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [32])
	(unreachable)
}

int_32 .FUNC $189 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [640])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [576])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [640])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [576])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [640])
	*(($0 + [64])) = [0]
	*($0 + [56 align=4]) = (int_64)0
	return $0
}

int_32 .FUNC $188 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1088])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $329([96])
	$4 = CALL $189($6)
	*($6 + [80]) = $0
	CALL $190(($8 + [32]), $4)
	*($6 + [84]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [84])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $191(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$10 }
	CALL $330(*(($4 + [64])))
	
.LABEL $label$10
	CALL $330($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$7 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($8 + [16]) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [32]) = (int_64)0
	*($8 + [44]) = $1
	*($8 + [40]) = $1
	*($8 + [48]) = ($1 + $3)
	*($8 + [64]) = ($8 + [40])
	*($8 + [72]) = ($8 + [8])
	CALL $122(($8 + [72]), ($8 + [64]))
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	$4 = *(($8 + [32]))
	$5 = *(($8 + [24]))
	$6 = *(($8 + [16]))
	*($8 + [40]) = *($8 + [8])
	*($8 + [72]) = $6
	*($8 + [64]) = $5
	*($8 + [56]) = $4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 ($8 + [40])), (int_32 ($8 + [72])), (int_32 ($8 + [64])), (int_32 ($8 + [56])), (int_32 $7))
	*([0] + [4]) = ($8 + [80])
	return [1]
}

void .FUNC _ZN6niuniu11clearplayerERKyS1_S1_S1_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	CALL require_auth(*($1))
	$5 = *($1)
	$8 = (int_64)0
	$7 = (int_64)59
	$1 = [688]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$6 = *($1)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$6 = ($6 + [165])
	goto $label$3 
	
.LABEL $label$4
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$1 = ($1 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	$1 = [1]
	if ( ((int_64)$5 == (int_64)$9) ){ goto $label$5 }
	$1 = ((int_64)$5 == (int_64)*($0))
	
.LABEL $label$5
	CALL eosio_assert($1, [1728])
	CALL $123($0, $2, $3, $4)
}

int_32 .FUNC $264 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $265 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $329(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $330($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $330($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $266 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [320])
	*([0] + [4]) = $14
	$8 = ($0 + [128])
	*($14 + [240]) = $8
	CALL $255(($14 + [32]), ($14 + [240]), $2)
	$9 = [1]
	$7 = [1]
	$5 = *($14 + [36])
	if ( ($5 == 0) ){ goto $label$1 }
	$7 = ((int_64)*($5 + [16]) != (int_64)*($2))
	
.LABEL $label$1
	CALL eosio_assert($7, [3392])
	CALL $164(($14 + [240]), $0, ($1 + [72]))
	CALL $258(($14 + [224]), $0, ($14 + [240]), ($1 + [80]))
	$4 = ($0 + [8])
	*($14 + [216]) = $4
	CALL $267(($14 + [208]), ($14 + [216]), $2)
	$7 = *($14 + [212])
	if ( ($7 == 0) ){ goto $label$2 }
	$9 = ((int_64)*($7 + [16]) != (int_64)*($2))
	
.LABEL $label$2
	CALL eosio_assert($9, [3360])
	*($14 + [184]) = (int_64)-1
	$9 = [0]
	*($14 + [192]) = [0]
	$11 = *($14 + [240])
	$13 = *($0)
	*($14 + [168]) = $13
	*($14 + [176]) = $11
	*(($14 + [196])) = [0]
	*((($14 + [168]) + [32])) = [0]
	$7 = CALL db_find_i64($13, $11, (int_64)-6029028902599393280, *($2))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $165(($14 + [168]), $7)
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)($14 + [168])), [720])
	
.LABEL $label$3
	$7 = ($9 + [16])
	*((($14 + [152]) + [8])) = *($7)
	*($14 + [152]) = *($9 + [8])
	*((($14 + [136]) + [8])) = *(($9 + [32]))
	*($14 + [136]) = *($9 + [24])
	CALL eosio_assert(((int_64)*($7) == (int_64)*($14 + [232])), [2816])
	CALL eosio_assert(((int_64)*($9 + [8]) >= (int_64)*($14 + [224])), [3440])
	if ( (*($1 + [81]) == 0) ){ goto $label$5 }
	$11 = *($0)
	*($14 + [32]) = ($14 + [224])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [784])
	CALL $270(($14 + [168]), $9, $11, ($14 + [32]))
	$11 = *($0)
	*($14 + [36]) = $1
	*($14 + [32]) = $0
	*($14 + [40]) = $2
	CALL $271(($14 + [16]), $8, $11, ($14 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$7 = ($9 + [8])
	*((($14 + [32]) + [8])) = *(($7 + [8]))
	*($14 + [32]) = *($7)
	$11 = *($0)
	*($14 + [16]) = ($14 + [32])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [784])
	CALL $268(($14 + [168]), $9, $11, ($14 + [16]))
	CALL eosio_assert((int_64)(*($1 + [16]) == 0), [3472])
	$11 = *($1)
	$3 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$6 }
	$9 = ($8 + [-24])
	$5 = ([0] - $3)
	
.LOOP $label$7:
	if ( ((int_64)*(*($9)) == (int_64)$11) ){ goto $label$6 }
	$8 = $9
	$7 = ($9 + [-24])
	$9 = $7
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$9 }
	$9 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [136]) == (int_32)$4), [720])
	goto $label$8 
	
.LABEL $label$9
	$9 = [0]
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4816283142123945984, $11)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$8 }
	$9 = CALL $74($4, $7)
	CALL eosio_assert(((int_32)*($9 + [136]) == (int_32)$4), [720])
	
.LABEL $label$8
	$11 = *($0)
	*($14 + [16]) = $2
	*($14 + [20]) = ($14 + [32])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [784])
	CALL $269($4, $9, $11, ($14 + [16]))
	*($14 + [16]) = [3]
	$9 = ($1 + [8])
	CALL $137($0, $1, $9, ($14 + [16]))
	CALL $138($0, $1, $9)
	
.LABEL $label$4
	$11 = *($2)
	$4 = *(($14 + [192]))
	$8 = *(($14 + [196]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$10 }
	$9 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$11:
	if ( ((int_64)*(*($9)) == (int_64)$11) ){ goto $label$10 }
	$8 = $9
	$7 = ($9 + [-24])
	$9 = $7
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$13 }
	$9 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)($14 + [168])), [720])
	goto $label$12 
	
.LABEL $label$13
	$9 = [0]
	$7 = CALL db_find_i64(*($14 + [168]), *(($14 + [176])), (int_64)-6029028902599393280, $11)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$12 }
	$9 = CALL $165(($14 + [168]), $7)
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)($14 + [168])), [720])
	
.LABEL $label$12
	*($14 + [32]) = *($2)
	*($14 + [40]) = *($1)
	*($14 + [48]) = *(($1 + [81]))
	*($14 + [49]) = *(($1 + [80]))
	*($14 + [56]) = *(($1 + [72]))
	*(($14 + [72])) = *((($14 + [152]) + [8]))
	*($14 + [64]) = *($14 + [152])
	*(($14 + [88])) = *((($14 + [136]) + [8]))
	*($14 + [80]) = *($14 + [136])
	*((($14 + [32]) + [72])) = *(($9 + [16]))
	*($14 + [96]) = *($9 + [8])
	*(($14 + [120])) = *(($9 + [32]))
	*($14 + [112]) = *($9 + [24])
	*($14 + [128]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [1376]
	$12 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$19 }
	$7 = *($9)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$7 = ($7 + [165])
	goto $label$17 
	
.LABEL $label$19
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$15
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$14 }
	*($14 + [24]) = $12
	*($14 + [16]) = $6
	$11 = (int_64)0
	$13 = (int_64)59
	$9 = [1392]
	$12 = (int_64)0
	
.LOOP $label$20:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$21 }
	$7 = *($9)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$7 = ($7 + [165])
	goto $label$22 
	
.LABEL $label$23
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$21
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$10 | (int_64)$12)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$20 }
	*($14 + [8]) = $12
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [3504]
	$12 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$29 }
	$7 = *($9)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$7 = ($7 + [165])
	goto $label$27 
	
.LABEL $label$29
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$25
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$24 }
	*($14) = $12
	CALL $272($0, ($14 + [16]), ($14 + [8]), $14, ($14 + [32]))
	$8 = *($14 + [192])
	if ( ($8 == 0) ){ goto $label$30 }
	$0 = ($14 + [196])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$32 }
	
.LOOP $label$33:
	$9 = ($9 + [-24])
	$7 = *($9)
	*($9) = [0]
	if ( ($7 == 0) ){ goto $label$34 }
	CALL $330($7)
	
.LABEL $label$34
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$33 }
	$9 = *(($14 + [192]))
	goto $label$31 
	
.LABEL $label$32
	$9 = $8
	
.LABEL $label$31
	*($0) = $8
	CALL $330($9)
	
.LABEL $label$30
	if ( ((*($14 + [296]) & [1]) == 0) ){ goto $label$35 }
	CALL $330(*(($14 + [304])))
	
.LABEL $label$35
	*([0] + [4]) = ($14 + [320])
}

void .FUNC $267 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-4816283142123945984, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [136]) == (int_32)$4), [720])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $74($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)-4816283142123945984, $5))
	CALL eosio_assert(((int_32)*($2 + [136]) == (int_32)$4), [720])
	
.LABEL $label$4
	*(($2 + [144])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC _ZN6niuniu3betERKN5eosio5assetERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [96])
	*([0] + [4]) = $3
	CALL $61(($3 + [56]), $0)
	CALL eosio_assert(((int_64)*($3 + [72]) == (int_64)1), [1760])
	CALL $353(($3 + [8]), $2)
	CALL $218($0, ($3 + [8]), ($3 + [56]), ($3 + [48]), ($3 + [40]), ($3 + [32]), ($3 + [24]))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$1 }
	CALL $330(*($3 + [16]))
	
.LABEL $label$1
	CALL require_auth(*($3 + [56]))
	CALL $219($0, ($3 + [56]), ($3 + [48]), ($3 + [40]), ($3 + [32]), $1, ($3 + [24]))
	*([0] + [4]) = ($3 + [96])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [112])
	*([0] + [4]) = $2
	*(($3 = $2) + [108]) = $0
	*($3 + [96]) = *($1)
	*($3 + [100]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $240(($3 + [8]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [4]) = ($3 + [96])
	*($3) = ($3 + [108])
	CALL $241($3, ($3 + [8]))
	if ( ((*($3 + [72]) & [1]) == 0) ){ goto $label$6 }
	CALL $330(*($3 + [80]))
	
.LABEL $label$6
	*([0] + [4]) = ($3 + [112])
	return [1]
}

void .FUNC _ZN6niuniu8tokenregERKhRKyRKN5eosio5assetES7_S7_RKNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEES3_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [64])
	*([0] + [4]) = $18
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [688]
	$15 = (int_64)0
	
.LOOP $label$1:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [165])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$2
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($15)
	$14 = *($2)
	$9 = *(($0 + [192]))
	$17 = *(($0 + [196]))
	if ( ((int_32)$17 == (int_32)$9) ){ goto $label$5 }
	$12 = ($17 + [-24])
	$10 = ([0] - $9)
	
.LOOP $label$6:
	if ( ((int_64)*(*($12)) == (int_64)$14) ){ goto $label$5 }
	$17 = $12
	$8 = ($12 + [-24])
	$12 = $8
	if ( ((int_32)($8 + $10) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$10 = ($0 + [168])
	if ( ((int_32)$17 == (int_32)$9) ){ goto $label$8 }
	$8 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$10), [720])
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	$12 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-3665743328751648768, $14)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $188($10, $12)
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$10), [720])
	
.LABEL $label$7
	$12 = *($1)
	if ( ((int_32)$12 == (int_32)[2]) ){ goto $label$12 }
	if ( ((int_32)$12 != (int_32)[1]) ){ goto $label$9 }
	$14 = *($4 + [8])
	CALL eosio_assert((((int_64)*($3 + [8]) == (int_64)$14) & ((int_64)$14 == (int_64)*($5 + [8]))), [2640])
	CALL eosio_assert(CALL $fimport$33(*($2)), [3008])
	$17 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$10 }
	$14 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$17 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$13 }
	goto $label$10 
	
.LABEL $label$12
	$12 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($12, [2448])
	CALL eosio_assert($12, [1440])
	CALL eosio_assert($12, [1680])
	$12 = CALL db_next_i64(*($8 + [84]), $18)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$16 }
	CALL $188($10, $12)
	
.LABEL $label$16
	CALL $244($10, $8)
	goto $label$9 
	
.LABEL $label$11
	$17 = [0]
	
.LABEL $label$10
	CALL eosio_assert($17, [3040])
	CALL eosio_assert(($8 == 0), [3072])
	$11 = *($2)
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [512]
	$15 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$14 > (uint_64)(int_64)10) ){ goto $label$22 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$8 = ($8 + [165])
	goto $label$20 
	
.LABEL $label$22
	$13 = (int_64)0
	if ( ((int_64)$14 == (int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$18
	$12 = ($12 + [1])
	$16 = ((int_64)$16 + (int_64)-5)
	$15 = ((int_64)$13 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)1)
	if ( ((int_64)$14 != (int_64)13) ){ goto $label$17 }
	if ( ((int_64)$11 == (int_64)$15) ){ goto $label$23 }
	CALL eosio_assert(((int_64)*(($3 + [8])) != (int_64)1397703940), [3104])
	
.LABEL $label$23
	$14 = *($0)
	*($18 + [4]) = $3
	*($18) = $2
	*($18 + [8]) = $4
	*($18 + [12]) = $5
	*($18 + [16]) = $6
	*($18 + [20]) = $7
	*($18 + [56]) = $14
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$14()), [832])
	*($18 + [32]) = $10
	*($18 + [36]) = $18
	*($18 + [40]) = ($18 + [56])
	$12 = CALL $329([96])
	CALL $189($12)
	*($12 + [80]) = $10
	CALL $243(($18 + [32]), $12)
	*($18 + [48]) = $12
	$14 = *($12)
	*($18 + [32]) = $14
	$17 = *($12 + [84])
	*($18 + [28]) = $17
	$10 = ($0 + [196])
	$8 = *($10)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [200]))) ){ goto $label$25 }
	*($8 + [8]) = $14
	*($8 + [16]) = $17
	*($18 + [48]) = [0]
	*($8) = $12
	*($10) = ($8 + [24])
	goto $label$24 
	
.LABEL $label$25
	CALL $191(($0 + [192]), ($18 + [48]), ($18 + [32]), ($18 + [28]))
	
.LABEL $label$24
	$12 = *($18 + [48])
	*($18 + [48]) = [0]
	if ( ($12 == 0) ){ goto $label$9 }
	if ( ((*($12 + [56]) & [1]) == 0) ){ goto $label$26 }
	CALL $330(*(($12 + [64])))
	
.LABEL $label$26
	CALL $330($12)
	
.LABEL $label$9
	*([0] + [4]) = ($18 + [64])
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [672])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*($6 + [8]) = $3
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($6 + [8])), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN6niuniu8opencardERKyS1_RKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_SA_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [304])
	*([0] + [4]) = $16
	CALL $61(($16 + [168]), $0)
	CALL eosio_assert(((int_64)*($16 + [184]) == (int_64)1), [1760])
	CALL require_auth(*($0))
	CALL $128(($16 + [168]), $0, $1)
	CALL eosio_assert(((int_32)*($16 + [249]) == (int_32)[2]), [1808])
	CALL eosio_assert(((int_64)*($16 + [176]) == (int_64)*($2)), [1840])
	if ( ((int_64)*($16 + [216]) < (int_64)1) ){ goto $label$1 }
	$13 = *($1)
	$6 = *(($0 + [312]))
	$10 = *(($0 + [316]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$2 }
	$11 = ($10 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($11)) == (int_64)$13) ){ goto $label$2 }
	$10 = $11
	$9 = ($11 + [-24])
	$11 = $9
	if ( ((int_32)($9 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$9 = ($0 + [288])
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$5 }
	$11 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [28]) == (int_32)$9), [720])
	goto $label$4 
	
.LABEL $label$5
	$11 = [0]
	$10 = CALL db_find_i64(*(($0 + [288])), *(($0 + [296])), (int_64)4732891782226903040, $13)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$4 }
	$11 = CALL $129($9, $10)
	CALL eosio_assert(((int_32)*($11 + [28]) == (int_32)$9), [720])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [1872])
	*($16 + [160]) = [0]
	$13 = (int_64)0
	*($16 + [152]) = (int_64)0
	CALL $130(($16 + [96]), $0, ($16 + [168]), $11, ($16 + [152]))
	CALL $131(($16 + [40]), $0, ($16 + [168]), $11, ($16 + [152]), ($16 + [96]))
	CALL $132($0, ($16 + [168]), $3, $4, $5, ($16 + [80]), ($16 + [96]))
	$8 = *($0)
	$12 = (int_64)59
	$11 = [1376]
	$14 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$11 }
	$9 = *($11)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$9 = ($9 + [165])
	goto $label$9 
	
.LABEL $label$11
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$7
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$6 }
	*($16 + [32]) = $14
	*($16 + [24]) = $8
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [1904]
	$14 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$13 > (uint_64)(int_64)8) ){ goto $label$17 }
	$9 = *($11)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$9 = ($9 + [165])
	goto $label$15 
	
.LABEL $label$17
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$13
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$12 }
	*($16 + [16]) = $14
	*($16) = *($1)
	*($16 + [8]) = *($2)
	CALL $133($0, ($16 + [24]), $0, ($16 + [16]), $16)
	$7 = *($16 + [80])
	if ( ($7 == 0) ){ goto $label$18 }
	$11 = $7
	$1 = ($16 + [84])
	$9 = *($1)
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$19 }
	$10 = ([0] - $7)
	$11 = ($9 + [-16])
	
.LOOP $label$20:
	$9 = *($11)
	if ( ($9 == 0) ){ goto $label$21 }
	*(($11 + [4])) = $9
	CALL $330($9)
	
.LABEL $label$21
	$11 = ($11 + [-40])
	if ( ((int_32)($11 + $10) != (int_32)[-16]) ){ goto $label$20 }
	$11 = *(($16 + [80]))
	
.LABEL $label$19
	*($1) = $7
	CALL $330($11)
	
.LABEL $label$18
	$11 = *($16 + [152])
	if ( ($11 == 0) ){ goto $label$1 }
	*($16 + [156]) = $11
	CALL $330($11)
	
.LABEL $label$1
	CALL $134($0, ($16 + [168]))
	if ( ((*($16 + [272]) & [1]) == 0) ){ goto $label$22 }
	CALL $330(*(($16 + [280])))
	
.LABEL $label$22
	if ( ((*($16 + [252]) & [1]) == 0) ){ goto $label$23 }
	CALL $330(*(($16 + [260])))
	
.LABEL $label$23
	*([0] + [4]) = ($16 + [304])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($3 = $4) + [76]) = $0
	*($3 + [64]) = *($1)
	*($3 + [68]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [32])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [48]) = [0]
	*(($3 + [52])) = [0]
	*(($3 + [56])) = [0]
	*($3 + [80]) = $1
	$4 = ($1 + $0)
	*($3 + [88]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [672])
	CALL memcpy(($3 + [8]), $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[7]), [672])
	CALL memcpy((($3 + [8]) + [8]), $2, [8])
	*($3 + [84]) = ($1 + [16])
	CALL $94(($3 + [80]), (($3 + [8]) + [16]))
	CALL $94(($3 + [80]), ($3 + [36]))
	CALL $94(($3 + [80]), ($3 + [48]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [84]) = ($3 + [64])
	*($3 + [80]) = ($3 + [76])
	CALL $199(($3 + [80]), ($3 + [8]))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $330(*(($3 + [56])))
	
.LABEL $label$5
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$6 }
	CALL $330(*(($3 + [44])))
	
.LABEL $label$6
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL $330(*(($3 + [32])))
	
.LABEL $label$7
	*([0] + [4]) = ($3 + [96])
	return [1]
}

void .FUNC _ZN6niuniu6revealERKyS1_RKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_SA_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [464])
	*([0] + [4]) = $17
	CALL $61(($17 + [96]), $0)
	CALL eosio_assert(((int_64)*($17 + [112]) == (int_64)1), [1760])
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [688]
	$14 = (int_64)0
	
.LOOP $label$1:
	$15 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$2 }
	$6 = *($11)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$6 = ($6 + [165])
	goto $label$3 
	
.LABEL $label$4
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$2
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($14)
	CALL $128(($17 + [320]), $0, $1)
	CALL eosio_assert(((int_32)*($17 + [401]) == (int_32)[2]), [1808])
	CALL eosio_assert(((int_64)*($17 + [328]) == (int_64)*($2)), [1840])
	$13 = *($1)
	$7 = *(($0 + [312]))
	$16 = *(($0 + [316]))
	if ( ((int_32)$16 == (int_32)$7) ){ goto $label$5 }
	$11 = ($16 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$6:
	if ( ((int_64)*(*($11)) == (int_64)$13) ){ goto $label$5 }
	$16 = $11
	$6 = ($11 + [-24])
	$11 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [288])
	if ( ((int_32)$16 == (int_32)$7) ){ goto $label$8 }
	$11 = *(($16 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [28]) == (int_32)$6), [720])
	goto $label$7 
	
.LABEL $label$8
	$11 = [0]
	$16 = CALL db_find_i64(*(($0 + [288])), *(($0 + [296])), (int_64)4732891782226903040, $13)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$7 }
	$11 = CALL $129($6, $16)
	CALL eosio_assert(((int_32)*($11 + [28]) == (int_32)$6), [720])
	
.LABEL $label$7
	CALL eosio_assert(($11 == 0), [2480])
	if ( ((int_64)*($17 + [368]) < (int_64)1) ){ goto $label$12 }
	CALL memset(($17 + [96]), [0], [224])
	*((($17 + [96]) + [24])) = [0]
	*((($17 + [96]) + [40])) = [1541]
	*((($17 + [96]) + [42])) = [7]
	*($17 + [112]) = (int_64)0
	*($17 + [128]) = [52]
	*($17 + [132]) = [67305985]
	*((($17 + [96]) + [43])) = [8]
	*((($17 + [96]) + [44])) = [9]
	*((($17 + [96]) + [45])) = [10]
	*((($17 + [96]) + [46])) = [11]
	*((($17 + [96]) + [47])) = [12]
	*((($17 + [96]) + [48])) = [13]
	*((($17 + [96]) + [49])) = [14]
	*((($17 + [96]) + [50])) = [15]
	*((($17 + [96]) + [51])) = [16]
	*((($17 + [96]) + [52])) = [17]
	*(($17 + [149])) = [18]
	*(($17 + [150])) = [19]
	*(($17 + [151])) = [20]
	*(($17 + [152])) = [21]
	*(($17 + [153])) = [22]
	*(($17 + [154])) = [23]
	*(($17 + [155])) = [24]
	*(($17 + [156])) = [25]
	*(($17 + [157])) = [26]
	*(($17 + [158])) = [27]
	*(($17 + [159])) = [28]
	*((($17 + [96]) + [64])) = [29]
	*(($17 + [161])) = [30]
	*(($17 + [162])) = [31]
	*(($17 + [163])) = [32]
	*(($17 + [164])) = [33]
	*(($17 + [165])) = [34]
	*(($17 + [166])) = [35]
	*(($17 + [167])) = [36]
	*(($17 + [168])) = [37]
	*(($17 + [169])) = [38]
	*(($17 + [170])) = [39]
	*(($17 + [171])) = [40]
	*(($17 + [172])) = [41]
	*(($17 + [173])) = [42]
	*(($17 + [174])) = [43]
	*(($17 + [175])) = [44]
	*(($17 + [176])) = [45]
	*(($17 + [177])) = [46]
	*(($17 + [178])) = [47]
	*(($17 + [179])) = [48]
	*(($17 + [180])) = [49]
	*(($17 + [181])) = [50]
	*(($17 + [182])) = [51]
	*(($17 + [183])) = [52]
	$11 = *($5)
	CALL eosio_assert(((int_32)( *($5 + [4]) ? uint_32($11 >> [1]) : ($11 & [1]) ) == (int_32)[64]), [80])
	CALL _Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj($5, $17, [32])
	CALL $200(($17 + [96]), $4, $17)
	CALL $201(($17 + [96]))
	CALL $202(($17 + [96]), $17)
	CALL $203(($17 + [96]), $17)
	CALL $204(($17 + [96]))
	*($17 + [96]) = *($1)
	*($17 + [104]) = *($2)
	$13 = *($0)
	*($17 + [88]) = ($17 + [96])
	*($17 + [72]) = $13
	CALL eosio_assert(((int_64)*(($0 + [288])) == (int_64)CALL $fimport$14()), [832])
	*($17) = $6
	*($17 + [4]) = ($17 + [88])
	*($17 + [8]) = ($17 + [72])
	*(($11 = CALL $329([40])) + [24]) = [0]
	*($11 + [16 align=4]) = (int_64)0
	*($11 + [28]) = $6
	CALL $205($17, $11)
	*($17 + [64]) = $11
	$13 = *($11)
	*($17) = $13
	$16 = *($11 + [32])
	*($17 + [460]) = $16
	$8 = ($0 + [316])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [320]))) ){ goto $label$11 }
	*($6 + [8]) = $13
	*($6 + [16]) = $16
	*($17 + [64]) = [0]
	*($6) = $11
	*($8) = ($6 + [24])
	goto $label$10 
	
.LABEL $label$12
	CALL $134($0, ($17 + [320]))
	goto $label$9 
	
.LABEL $label$11
	CALL $193(($0 + [312]), ($17 + [64]), $17, ($17 + [460]))
	
.LABEL $label$10
	$8 = *($17 + [64])
	*($17 + [64]) = [0]
	if ( ($8 == 0) ){ goto $label$13 }
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$14 }
	$11 = $7
	$10 = ($8 + [20])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$15 }
	$16 = ([0] - $7)
	$11 = ($6 + [-28])
	
.LOOP $label$16:
	$6 = *(($11 + [12]))
	if ( ($6 == 0) ){ goto $label$17 }
	*(($11 + [16])) = $6
	CALL $330($6)
	
.LABEL $label$17
	$6 = *($11)
	if ( ($6 == 0) ){ goto $label$18 }
	*(($11 + [4])) = $6
	CALL $330($6)
	
.LABEL $label$18
	$11 = ($11 + [-32])
	if ( ((int_32)($11 + $16) != (int_32)[-28]) ){ goto $label$16 }
	$11 = *(($8 + [16]))
	
.LABEL $label$15
	*($10) = $7
	CALL $330($11)
	
.LABEL $label$14
	CALL $330($8)
	
.LABEL $label$13
	$9 = *($0)
	$13 = (int_64)0
	$15 = (int_64)59
	$11 = [1376]
	$14 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$24 }
	$6 = *($11)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$6 = ($6 + [165])
	goto $label$22 
	
.LABEL $label$24
	$12 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$20
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$12 | (int_64)$14)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$19 }
	*($17 + [80]) = $14
	*($17 + [72]) = $9
	$13 = (int_64)0
	$15 = (int_64)59
	$11 = [2512]
	$14 = (int_64)0
	
.LOOP $label$25:
	if ( ((uint_64)$13 > (uint_64)(int_64)7) ){ goto $label$30 }
	$6 = *($11)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$6 = ($6 + [165])
	goto $label$28 
	
.LABEL $label$30
	$12 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$26
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$12 | (int_64)$14)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$25 }
	*($17 + [64]) = $14
	*($17) = *($1)
	*($17 + [8]) = *($2)
	CALL $353(($17 + [16]), $3)
	CALL $353(($17 + [28]), $4)
	CALL $353(($17 + [40]), $5)
	CALL $206($0, ($17 + [72]), $0, ($17 + [64]), $17)
	if ( ((*($17 + [40]) & [1]) == 0) ){ goto $label$31 }
	CALL $330(*(($17 + [48])))
	
.LABEL $label$31
	if ( ((*($17 + [28]) & [1]) == 0) ){ goto $label$32 }
	CALL $330(*(($17 + [36])))
	
.LABEL $label$32
	if ( ((*($17 + [16]) & [1]) == 0) ){ goto $label$33 }
	CALL $330(*(($17 + [24])))
	
.LABEL $label$33
	$0 = *(($17 + [112]))
	if ( ($0 == 0) ){ goto $label$9 }
	$11 = $0
	$8 = ($17 + [116])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$34 }
	$16 = ([0] - $0)
	$11 = ($6 + [-28])
	
.LOOP $label$35:
	$6 = *(($11 + [12]))
	if ( ($6 == 0) ){ goto $label$36 }
	*(($11 + [16])) = $6
	CALL $330($6)
	
.LABEL $label$36
	$6 = *($11)
	if ( ($6 == 0) ){ goto $label$37 }
	*(($11 + [4])) = $6
	CALL $330($6)
	
.LABEL $label$37
	$11 = ($11 + [-32])
	if ( ((int_32)($11 + $16) != (int_32)[-28]) ){ goto $label$35 }
	$11 = *(($17 + [112]))
	
.LABEL $label$34
	*($8) = $0
	CALL $330($11)
	
.LABEL $label$9
	if ( ((*($17 + [424]) & [1]) == 0) ){ goto $label$38 }
	CALL $330(*(($17 + [432])))
	
.LABEL $label$38
	if ( ((*($17 + [404]) & [1]) == 0) ){ goto $label$39 }
	CALL $330(*(($17 + [412])))
	
.LABEL $label$39
	*([0] + [4]) = ($17 + [464])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [80])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = [0]
	$4 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $3)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)1398362884
	*($8) = (int_64)0
	CALL eosio_assert([1], [576])
	$5 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$6 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$6 = [0]
	
.LABEL $label$4
	CALL eosio_assert($6, [640])
	*(($8 + [24])) = [0]
	*($8 + [16]) = (int_64)0
	*($8 + [64]) = $4
	$1 = ($4 + $3)
	*($8 + [72]) = $1
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [672])
	CALL memcpy($8, $4, [8])
	$6 = ($4 + [8])
	CALL eosio_assert(((uint_32)($1 - $6) > (uint_32)[7]), [672])
	$1 = ($8 + [8])
	CALL memcpy($1, $6, [8])
	*($8 + [68]) = ($4 + [16])
	$6 = ($8 + [16])
	CALL $94(($8 + [64]), $6)
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($4)
	
.LABEL $label$9
	*(($4 = (($8 + [48]) + [8]))) = *($1)
	*($8 + [48]) = *($8)
	CALL $353(($8 + [32]), $6)
	*((($8 + [64]) + [8])) = *($4)
	*($8 + [64]) = *($8 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$10 }
	$7 = *((*($1) + $7))
	
.LABEL $label$10
	CALL void $1((int_32 ($8 + [64])), (int_32 ($8 + [32])), (int_32 $7))
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $330(*($8 + [40]))
	
.LABEL $label$11
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL $330(*(($8 + [24])))
	
.LABEL $label$12
	*([0] + [4]) = ($8 + [80])
	return [1]
}

void .FUNC __ofl_unlock ()
{
	CALL __unlock([12504])
}

void .FUNC __unlockfile (int_32 $0)
{
}

int_32 .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*(($0 + [8])) = (int_64)0
	*($0 + [4]) = [0]
	*($0) = *($1)
	$2 = (*(($1 + [8])) - *($1 + [4]))
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$2 }
	$3 = CALL $329($2)
	*(($0 + [4])) = $3
	*(($0 + [12])) = ($3 + $2)
	*(($2 = ($0 + [8]))) = $3
	$4 = *(($1 + [4]))
	$5 = (*(($1 + [8])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $4, $5)
	*($2) = (*($2) + $5)
	
.LABEL $label$3
	*($0 + [16 align=4]) = (int_64)0
	*(($0 + [24])) = [0]
	$2 = (*(($1 + [20])) - *($1 + [16]))
	$3 = ((int_32)$2 / (int_32)[3])
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[1431655766]) ){ goto $label$1 }
	$2 = CALL $329($2)
	*(($0 + [16])) = $2
	*(($0 + [24])) = ($2 + ((int_32)$3 * (int_32)[3]))
	*(($3 = ($0 + [20]))) = $2
	$4 = *(($1 + [16]))
	$5 = (*(($1 + [20])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[3]) * (int_32)[3]))
	
.LABEL $label$4
	*($0 + [28]) = *($1 + [28])
	return $0
	
.LABEL $label$2
	CALL $352(($0 + [4]))
	
.LABEL $label$1
	CALL $352(($0 + [16]))
	(unreachable)
	return (unreachable)
}

void .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $329(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $352($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $330($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1088])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $329([56])
	$4 = CALL $185($6)
	*($6 + [40]) = $0
	CALL $186(($8 + [32]), $4)
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $187(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $330($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $164 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($2)
	$4 = *(($1 + [192]))
	$7 = *(($1 + [196]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	$2 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($2)) == (int_64)$3) ){ goto $label$1 }
	$7 = $2
	$6 = ($2 + [-24])
	$2 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($1 + [168])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$2 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$6), [720])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$7 = CALL db_find_i64(*(($1 + [168])), *(($1 + [176])), (int_64)-3665743328751648768, $3)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $188($6, $7)
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$6), [720])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [2448])
	$6 = CALL memcpy($0, $2, [56])
	CALL $353(($6 + [56]), ($2 + [56]))
	*($6 + [72]) = *($2 + [72])
}

int_32 .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $155($0, ($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [32])
	$12 = $13
	*([0] + [4]) = $13
	$3 = *($0)
	$10 = [40]
	$9 = *(*($0 + [4]))
	$2 = CALL memcpy($1, $9, [40])
	$1 = ($2 + [40])
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$1 }
	CALL $148($1, *($9 + [40]), *(($9 + [44])))
	
.LABEL $label$1
	$9 = *($1)
	$4 = *(($2 + [44]))
	$11 = (CASTING uint_64)(uint_32 ((int_32)($4 - $9) / (int_32)[40]))
	
.LOOP $label$2:
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$10 = ($10 + [19])
	$5 = *($9 + [24])
	$1 = *($9 + [28])
	$6 = ($1 - $5)
	$11 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$5:
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$5 }
	$10 = ( $10 ? ($6 + $10) : ((int_32)$5 == (int_32)$1) )
	$9 = ($9 + [40])
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ($10 <= [513]) ){ goto $label$7 }
	$9 = CALL malloc($10)
	goto $label$6 
	
.LABEL $label$7
	$9 = ($13 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$6
	*($12 + [12]) = $9
	*($12 + [8]) = $9
	*($12 + [16]) = ($9 + $10)
	CALL $163(($12 + [8]), $2)
	$11 = *($2)
	*($2 + [56]) = CALL db_store_i64(*($3 + [8]), (int_64)-4455901582336561152, *(*($0 + [8])), $11, $9, $10)
	if ( ($10 <= [513]) ){ goto $label$8 }
	CALL free($9)
	
.LABEL $label$8
	if ( (uint_64)($11 <= *($3 + [16])) ){ goto $label$9 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$11 = *(($3 + [8]))
	$7 = *(*(($0 + [8])))
	$8 = *($2)
	*($12 + [24]) = *($2 + [8])
	*($2 + [60]) = CALL db_idx64_store($11, (int_64)-4455901582336561152, $7, $8, ($12 + [24]))
	*([0] + [4]) = ($12 + [32])
}

void .FUNC $161 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = *($0)
	$8 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$7 = ($8 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$6 = ( $7 ? $9 : ($9 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $329(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	*(($9 = ($7 + ((int_32)$8 * (int_32)[40])))) = *($1)
	*(($9 + [16])) = *(($1 + [16]))
	*(($9 + [8])) = *(($1 + [8]))
	*($9 + [24]) = [0]
	*(($5 = ($9 + [28]))) = [0]
	*(($4 = ($9 + [32]))) = [0]
	$8 = (*(($1 + [28])) - *($1 + [24]))
	if ( ($8 == 0) ){ goto $label$6 }
	$2 = ($9 + [24])
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = CALL $329($8)
	*($2) = $3
	*($5) = $3
	*($4) = ($3 + $8)
	$8 = *(($1 + [24]))
	$1 = (*(($1 + [28])) - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($3, $8, $1)
	*($5) = (*($5) + $1)
	
.LABEL $label$6
	$3 = ($7 + ((int_32)$6 * (int_32)[40]))
	$4 = ($9 + [40])
	$1 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$8 }
	$5 = ([0] - $1)
	$1 = ($6 + [-40])
	
.LOOP $label$9:
	*(($9 + [-40])) = *($1)
	*(($9 + [-24])) = *(($1 + [16]))
	*(($9 + [-32])) = *(($1 + [8]))
	*(($6 = ($9 + [-16]))) = (int_64)0
	*(($7 = ($9 + [-8]))) = [0]
	$8 = ($1 + [24])
	*($6) = *($8)
	*(($9 + [-12])) = *(($1 + [28]))
	$6 = ($1 + [32])
	*($7) = *($6)
	*($6) = [0]
	*($8) = (int_64)0
	$9 = ($9 + [-40])
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $5) != (int_32)[-40]) ){ goto $label$9 }
	$1 = *(($0 + [4]))
	$7 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$7 = $1
	
.LABEL $label$7
	*($0) = $9
	*(($0 + [4])) = $4
	*(($0 + [8])) = $3
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$10 }
	$6 = ([0] - $7)
	$9 = ($1 + [-16])
	
.LOOP $label$11:
	$1 = *($9)
	if ( ($1 == 0) ){ goto $label$12 }
	*(($9 + [4])) = $1
	CALL $330($1)
	
.LABEL $label$12
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $6) != (int_32)[-16]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($7 == 0) ){ goto $label$13 }
	CALL $330($7)
	
.LABEL $label$13
	return (unreachable)
	
.LABEL $label$5
	CALL $352($2)
	(unreachable)
}

void .FUNC $160 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [832])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $329([64])) + [32]) = (int_64)1398362884
	*($4 + [24]) = (int_64)0
	CALL eosio_assert([1], [576])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [640])
	*($4 + [48]) = [0]
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [52]) = $1
	CALL $162(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [56])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $103(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$6 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($6 == 0) ){ goto $label$8 }
	$0 = *($6 + [40])
	if ( ($0 == 0) ){ goto $label$9 }
	$3 = $0
	$5 = ($6 + [44])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$10 }
	$1 = ([0] - $0)
	$3 = ($4 + [-16])
	
.LOOP $label$11:
	$4 = *($3)
	if ( ($4 == 0) ){ goto $label$12 }
	*(($3 + [4])) = $4
	CALL $330($4)
	
.LABEL $label$12
	$3 = ($3 + [-40])
	if ( ((int_32)($3 + $1) != (int_32)[-16]) ){ goto $label$11 }
	$3 = *(($6 + [40]))
	
.LABEL $label$10
	*($5) = $0
	CALL $330($3)
	
.LABEL $label$9
	CALL $330($6)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $329(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $330($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $330($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $169 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [80])
	*([0] + [4]) = $10
	*(($9 = $10) + [64]) = $2
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	*($9 + [48]) = *($1 + [8])
	*($9 + [56]) = *($1 + [24])
	$8 = *($1)
	*($9 + [40]) = $8
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [56]))), [2128])
	$7 = ((int_64)*($1 + [48]) + (int_64)*($3))
	*($1 + [48]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [2208])
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [1024])
	$4 = *($1 + [32])
	$5 = *(($1 + [36]))
	$6 = ($5 - $4)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	$3 = [32]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$3 = (($6 & [-16]) + $3)
	
.LABEL $label$2
	$5 = ($3 + [24])
	if ( ($5 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($10 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($9 + [28]) = $3
	*($9 + [24]) = $3
	*($9 + [32]) = ($3 + $5)
	CALL $112(($9 + [24]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $3, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($3)
	$8 = *($9 + [40])
	
.LABEL $label$5
	$3 = ($0 + [36])
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($9 + [4]) = $1
	*($9) = $0
	*($9 + [12]) = $1
	*($9 + [8]) = ($9 + [48])
	*($9 + [16]) = ($9 + [40])
	*($9 + [20]) = ($9 + [64])
	*($9 + [72]) = $9
	CALL $184(($9 + [72]), $3, ($3 + [1]))
	*([0] + [4]) = ($9 + [80])
}

void .FUNC $168 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	$4 = *($1)
	$5 = *($3)
	$8 = *($5)
	$6 = *($5 + [8])
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$6), [2128])
	$8 = ((int_64)$8 + (int_64)*($7))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [2208])
	CALL eosio_assert(((int_64)$6 == (int_64)*(($1 + [16]))), [2128])
	$8 = ((int_64)*($1 + [8]) + (int_64)$8)
	*($1 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [2208])
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [32]))), [1232])
	$8 = (int_64)
	*($1 + [24]) = $8(*($1 + [24]) - *($3)))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1280])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [1312])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1024])
	*($9 + [56]) = ($9 + [40])
	*($9 + [52]) = $9
	*($9 + [48]) = $9
	CALL $176(($9 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $9, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [64])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	*($0 + [24]) = (int_64)0
	*(($4 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [640])
	*($0 + [40]) = $1
	$5 = *($2)
	$4 = CALL memcpy($0, *(*($2 + [4])), [40])
	*($6 + [48]) = ($6 + [40])
	*($6 + [44]) = $6
	*($6 + [40]) = $6
	*($6 + [56]) = ($6 + [40])
	*($6 + [68]) = ($4 + [8])
	*($6 + [64]) = $4
	*($6 + [72]) = ($4 + [16])
	*($6 + [76]) = ($4 + [24])
	CALL $68(($6 + [64]), ($6 + [56]))
	*($4 + [44]) = CALL db_store_i64(*($5 + [8]), (int_64)7235159550150574080, *(*($2 + [8])), (int_64)7235159550150574080, $6, [40])
	if ( ((uint_64)*($5 + [16]) > (uint_64)(int_64)7235159550150574080) ){ goto $label$6 }
	*(($5 + [16])) = (int_64)7235159550150574081
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [80])
	return $4
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*(($6 + [40])) = (int_64)1195787780
	*($6 + [16]) = (int_64)1
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = (int_64)1000000
	CALL eosio_assert([1], [576])
	$2 = ($1 + [208])
	$3 = (int_64)4671046
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [640])
	$4 = *(($1 + [236]))
	if ( ((int_32)$4 == (int_32)*(($1 + [232]))) ){ goto $label$7 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$2), [720])
	if ( $4 ){ goto $label$6 }
	$4 = ($6 + [8])
	goto $label$6 
	
.LABEL $label$7
	$4 = CALL db_find_i64(*(($1 + [208])), *(($1 + [216])), (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$4 = CALL $63($2, $4)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$2), [720])
	goto $label$6 
	
.LABEL $label$8
	$4 = ($6 + [8])
	
.LABEL $label$6
	CALL memcpy($0, $4, [40])
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	*(($10 = $11) + [24]) = *(($1 + [8]))
	$3 = *($1)
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [1120]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	*(($4 = ($1 + [8]))) = $8
	CALL eosio_assert([1], [1024])
	$11 = $11
	$5 = ($11 + [-64])
	*([0] + [4]) = $5
	*($10 + [12]) = $5
	*($10 + [8]) = $5
	*($10 + [16]) = ($11 + [-8])
	CALL $70(($10 + [8]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($10 + [40]) = *($4)
	if ( (CALL memcmp(($10 + [24]), ($10 + [40]), [8]) == 0) ){ goto $label$6 }
	$4 = ($1 + [64])
	$5 = *($4)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$7 }
	$5 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4816273130130128896, ($10 + [32]), $3)
	*($4) = $5
	
.LABEL $label$7
	CALL db_idx64_update($5, $2, ($10 + [40]))
	
.LABEL $label$6
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1088])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$2 = ($0 + [24])
	*(($4 = CALL $329([56])) + [32]) = (int_64)1398362884
	*($4 + [24]) = (int_64)0
	CALL eosio_assert([1], [576])
	$3 = ($4 + [24])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [640])
	*($4 + [40]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($4 + [8])
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + [16])
	*($8 + [44]) = $3
	CALL $69(($8 + [32]), ($8 + [24]))
	*($4 + [44]) = $1
	*($8 + [24]) = $4
	*($8 + [32]) = (int_64)7235159550150574080
	$6 = *($4 + [44])
	*($8 + [4]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = (int_64)7235159550150574080
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $67($2, ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $330($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $241 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [144])
	*([0] + [4]) = $8
	*(($8 + [68])) = *(($1 + [28]))
	*(($2 = (($8 + [56]) + [8]))) = *(($1 + [24]))
	*($8 + [56]) = *($1 + [16])
	*($8 + [60]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$4 = *($1)
	*(($5 = (($8 + [40]) + [8]))) = *(($1 + [40]))
	*($8 + [40]) = *($1 + [32])
	*(($6 = (($8 + [24]) + [8]))) = *(($1 + [56]))
	*($8 + [24]) = *($1 + [48])
	CALL $353(($8 + [8]), ($1 + [64]))
	$7 = *($1 + [80])
	*((($8 + [104]) + [8])) = *($6)
	*((($8 + [88]) + [8])) = *($5)
	*($8 + [104]) = *($8 + [24])
	*($8 + [88]) = *($8 + [40])
	*((($8 + [72]) + [8])) = *($2)
	*($8 + [72]) = *($8 + [56])
	*($8 + [143]) = $4
	*($8 + [128]) = $3
	*($8 + [120]) = $7
	$1 = *($0 + [4])
	$2 = *($1 + [4])
	$0 = (*(*($0)) + int_32($2 >> [1]))
	$1 = *($1)
	if ( (($2 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 ($8 + [143])), (int_32 ($8 + [128])), (int_32 ($8 + [72])), (int_32 ($8 + [88])), (int_32 ($8 + [104])), (int_32 ($8 + [8])), (int_32 ($8 + [120])), (int_32 $1))
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$2 }
	CALL $330(*($8 + [16]))
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [144])
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_32 .FUNC snprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $3
	$3 = CALL vsnprintf($0, $1, $2, $3)
	*([0] + [4]) = ($4 + [16])
	return $3
}

int_32 .FUNC vsnprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	$5 = [-1]
	*($4 + [148]) = ( ($1 + [-1]) ? [0] : $1 )
	$0 = ( $0 ? ($4 + [158]) : $1 )
	*($4 + [144]) = $0
	*(($4 = CALL memset($4, [0], [144])) + [36]) = [19]
	*($4 + [75]) = [255]
	*($4 + [76]) = [-1]
	*($4 + [44]) = ($4 + [159])
	*($4 + [84]) = ($4 + [144])
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	*($0) = [0]
	$5 = CALL vfprintf($4, $2, $3)
	goto $label$1 
	
.LABEL $label$2
	*(CALL __errno_location()) = [75]
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [160])
	return $5
}

int_32 .FUNC $393 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0 + [28])
	$6 = (*($0 + [20]) - $4)
	$3 = *($0 + [84])
	$5 = *($3 + [4])
	$6 = ( $5 ? $6 : ($5 <= $6) )
	if ( ($6 == 0) ){ goto $label$1 }
	CALL memcpy(*($3), $4, $6)
	*($3) = (*($3) + $6)
	$5 = (*($5) - $6)
	*(($5 = ($3 + [4]))) = $5
	
.LABEL $label$1
	$6 = *($3)
	$5 = ( $5 ? $2 : ($5 <= $2) )
	if ( ($5 == 0) ){ goto $label$2 }
	CALL memcpy($6, $1, $5)
	$6 = (*($3) + $5)
	*($3) = $6
	*(($3 = ($3 + [4]))) = (*($3) - $5)
	
.LABEL $label$2
	*($6) = [0]
	$3 = *($0 + [44])
	*(($0 + [28])) = $3
	*(($0 + [20])) = $3
	return $2
}

int_32 .FUNC strtol (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return (CASTING uint_32)(uint_64 $3)
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [16449])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [16449])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [16449]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [16449]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [16720]))
	$10 = *(($13 + [16449]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [16449]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [16449]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [16449]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [16449])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [16449])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

void .FUNC __lock (int_32 $0)
{
	*($0) = [1]
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC __stdout_write (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL __stdio_write($0, $1, $2)
}

int_32 .FUNC __stdio_close (int_32 $0)
{
	return [0]
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($2, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [672])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), $2, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $248 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [1504])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1552])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1616])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $330($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $330($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
	$7 = *(($1 + [64]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4816273130130128896, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $249 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $329(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $329([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	CALL $250(($8 + [28]), $4)
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $330($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $330($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $330($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $246 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [28])) = [0]
	*(($6 + [32])) = [0]
	*($6 + [12]) = [0]
	*($6 + [16]) = [0]
	*($6 + [20]) = [0]
	*($6 + [24]) = [0]
	*($6) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [36]) = [0]
	*(($6 + [40])) = [0]
	*(($6 + [44])) = [0]
	*($6 + [48]) = [0]
	*(($6 + [52])) = [0]
	*(($6 + [56])) = [0]
	CALL $249(($6 + [36]), $1, $2, $3, $4)
	CALL $61(($6 + [80]), $0)
	*($6 + [88]) = ((int_64)*($6 + [88]) + (int_64)1)
	CALL $62(($0 + [208]), ($6 + [80]), *($0))
	$5 = *($6 + [88])
	*($6 + [88]) = (int_64)0
	*($6 + [80]) = $5
	$5 = *($0)
	CALL $78(($6 + [64]), $6)
	$0 = *($6 + [64])
	CALL send_deferred(($6 + [80]), $5, $0, (*($6 + [68]) - $0), [0])
	$0 = *($6 + [64])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [68]) = $0
	CALL $330($0)
	
.LABEL $label$1
	CALL $79($6)
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $247 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [1504])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1552])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$4 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($4)) == (int_64)$2) ){ goto $label$1 }
	$7 = $4
	$8 = ($4 + [-24])
	$4 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1616])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$7 }
	CALL $330(*(($4 + [112])))
	
.LABEL $label$7
	if ( ((*($4 + [84]) & [1]) == 0) ){ goto $label$8 }
	CALL $330(*(($4 + [92])))
	
.LABEL $label$8
	CALL $330($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$11 }
	CALL $330(*(($4 + [112])))
	
.LABEL $label$11
	if ( ((*($4 + [84]) & [1]) == 0) ){ goto $label$12 }
	CALL $330(*(($4 + [92])))
	
.LABEL $label$12
	CALL $330($4)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [140]))
	$7 = *(($1 + [144]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$14 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4816283142123945984, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$13 }
	
.LABEL $label$14
	CALL db_idx64_remove($7)
	
.LABEL $label$13
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $244 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [1504])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1552])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1616])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$7 }
	CALL $330(*(($4 + [64])))
	
.LABEL $label$7
	CALL $330($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$10 }
	CALL $330(*(($4 + [64])))
	
.LABEL $label$10
	CALL $330($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [84]))
}

int_32 .FUNC $245 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $90($0, ($1 + [56]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $242 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [672])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($3 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($3 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($3 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($3 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $94(*($1), ($3 + [64]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($3 + [80]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $243 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$2 = *($0)
	$3 = *($4 + [4])
	*($1 + [8]) = *($3)
	*(($1 + [16])) = *(($3 + [8]))
	$3 = *($4 + [8])
	*($1 + [24]) = *($3)
	*(($1 + [32])) = *(($3 + [8]))
	$3 = *($4 + [12])
	*($1 + [40]) = *($3)
	*(($1 + [48])) = *(($3 + [8]))
	$3 = ($1 + [56])
	CALL $332($3, *($4 + [16]))
	$5 = *(*($4 + [20]))
	if ( ((int_64)$5 != (int_64)0) ){ goto $label$1 }
	$5 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	
.LABEL $label$1
	*($1 + [72]) = $5
	$4 = *($3)
	$3 = ( *(($1 + [60])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($3 + [64])
	$5 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($4)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($6 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $4)
	CALL $245($7, $1)
	$5 = *($1)
	*($1 + [84]) = CALL db_store_i64(*($2 + [8]), (int_64)-3665743328751648768, *(*($0 + [8])), $5, $6, $4)
	if ( ($4 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $240 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	$4 = [0]
	*($0) = [0]
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$3 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [640])
	*($0 + [40]) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [576])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [640])
	*($0 + [56]) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [576])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [0]
	
.LABEL $label$11
	CALL eosio_assert($5, [640])
	*($0 + [72]) = [0]
	*($0 + [64]) = (int_64)0
	*($0 + [80]) = (int_64)0
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $242(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)$0), [720])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $63($0, $3)
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)$0), [720])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [784])
	CALL $64($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $65($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [896])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [896])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $85($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $199 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	$2 = *($1 + [8])
	$3 = *($1)
	CALL $353(($5 + [32]), ($1 + [16]))
	CALL $353(($5 + [16]), ($1 + [28]))
	CALL $353($5, ($1 + [40]))
	*($5 + [56]) = $3
	*($5 + [48]) = $2
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 ($5 + [56])), (int_32 ($5 + [48])), (int_32 ($5 + [32])), (int_32 ($5 + [16])), (int_32 $5), (int_32 $1))
	if ( ((*($5) & [1]) == 0) ){ goto $label$2 }
	CALL $330(*($5 + [8]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $330(*($5 + [24]))
	
.LABEL $label$3
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $330(*($5 + [40]))
	
.LABEL $label$4
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [896])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [896])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [896])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $85(CALL $86($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [896])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [896])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [896])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [896])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $149 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [28])) = [0]
	*(($6 + [32])) = [0]
	*($6 + [12]) = [0]
	*($6 + [16]) = [0]
	*($6 + [20]) = [0]
	*($6 + [24]) = [0]
	*($6) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [36]) = [0]
	*(($6 + [40])) = [0]
	*(($6 + [44])) = [0]
	*($6 + [48]) = [0]
	*(($6 + [52])) = [0]
	*(($6 + [56])) = [0]
	CALL $150(($6 + [36]), $1, $2, $3, $4)
	CALL $61(($6 + [80]), $0)
	*($6 + [88]) = ((int_64)*($6 + [88]) + (int_64)1)
	CALL $62(($0 + [208]), ($6 + [80]), *($0))
	$5 = *($6 + [88])
	*($6 + [88]) = (int_64)0
	*($6 + [80]) = $5
	$5 = *($0)
	CALL $78(($6 + [64]), $6)
	$0 = *($6 + [64])
	CALL send_deferred(($6 + [80]), $5, $0, (*($6 + [68]) - $0), [0])
	$0 = *($6 + [64])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [68]) = $0
	CALL $330($0)
	
.LABEL $label$1
	CALL $79($6)
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $329($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $352($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $330($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [672])
	CALL memcpy(($1 + [16]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [80])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	CALL memcpy($1, *($3), [40])
	CALL eosio_assert([1], [1024])
	*($4 + [48]) = ($4 + [40])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [8])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [16])
	*($4 + [76]) = ($1 + [24])
	CALL $68(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159550150574080) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159550150574081
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [80])
}

int_32 .FUNC $147 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [640])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [576])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [640])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [576])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [640])
	return $0
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [81]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = CALL $90($0, ($1 + [84]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $90($0, ($1 + [104]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $141 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [832])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $329([48])) + [32]) = $1
	CALL $143(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [36])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $144(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $330($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1088])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $329([48])) + [32]) = $0
	CALL $145(($8 + [32]), $6)
	*($6 + [36]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $144(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $330($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$2 = *($0)
	*($1 + [16]) = *(*($4 + [8]))
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [896])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [896])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [896])
	CALL memcpy(($5 + [16]), ($1 + [16]), [1])
	CALL eosio_assert([1], [896])
	CALL memcpy(($5 + [17]), ($1 + [24]), [8])
	$3 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-4816276791545036800, *(*($0 + [8])), $3, $5, [25])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $142 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	*($1 + [8]) = *(*($3))
	*($1 + [16]) = *(*($3 + [4]))
	$4 = *($1)
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1024])
	CALL eosio_assert([1], [896])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [896])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [896])
	CALL memcpy(($5 + [16]), ($1 + [16]), [1])
	CALL eosio_assert([1], [896])
	CALL memcpy(($5 + [17]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $5, [25])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $278 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [176])
	*([0] + [4]) = $7
	CALL $164(($7 + [96]), $0, $2)
	*($7 + [72]) = (int_64)-1
	$3 = [0]
	*($7 + [80]) = [0]
	$4 = *($0)
	*($7 + [56]) = $4
	$5 = *($2)
	*($7 + [64]) = $5
	*(($7 + [84])) = [0]
	*(($7 + [88])) = [0]
	$2 = CALL db_find_i64($4, $5, (int_64)-6029028902599393280, *($1))
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$2 }
	$3 = CALL $165(($7 + [56]), $2)
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)($7 + [56])), [720])
	*($7 + [52]) = $3
	*($7 + [48]) = ($7 + [56])
	$2 = [1]
	goto $label$1 
	
.LABEL $label$2
	*($7 + [52]) = [0]
	*($7 + [48]) = ($7 + [56])
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [3520])
	CALL eosio_assert((int_64)(*($3 + [24]) == 0), [3552])
	*((($7 + [32]) + [8])) = *(($3 + [16]))
	*($7 + [32]) = *($3 + [8])
	$4 = *($0)
	$3 = *($7 + [52])
	*($7 + [24]) = $0
	*($7 + [28]) = ($7 + [48])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [784])
	CALL $279(($7 + [56]), $3, $4, ($7 + [24]))
	*((($7 + [8]) + [8])) = [0]
	*($7 + [8]) = (int_64)0
	$3 = CALL strlen([3584])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($7 + [8]) = ($3 << [1])
	$2 = (($7 + [8]) | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($3 + [16]) & [-16])
	$2 = CALL $329($6)
	*($7 + [8]) = ($6 | [1])
	*($7 + [16]) = $2
	*($7 + [12]) = $3
	
.LABEL $label$5
	CALL memcpy($2, [3584], $3)
	
.LABEL $label$4
	*(($2 + $3)) = [0]
	CALL $75($0, $1, ($7 + [32]), ($7 + [96]), ($7 + [8]))
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $330(*($7 + [16]))
	
.LABEL $label$7
	$2 = *($7 + [80])
	if ( ($2 == 0) ){ goto $label$8 }
	$1 = ($7 + [84])
	$0 = *($1)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$12 }
	CALL $330($3)
	
.LABEL $label$12
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($7 + [80]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $2
	
.LABEL $label$9
	*($1) = $2
	CALL $330($0)
	
.LABEL $label$8
	if ( ((*($7 + [152]) & [1]) == 0) ){ goto $label$13 }
	CALL $330(*(($7 + [160])))
	
.LABEL $label$13
	*([0] + [4]) = ($7 + [176])
	return (unreachable)
	
.LABEL $label$3
	CALL $331(($7 + [8]))
}

void .FUNC $148 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = *($0)
	$8 = *($0 + [8])
	$7 = ((int_32)($2 - $1) / (int_32)[40])
	if ( ((uint_32)$7 <= (uint_32)((int_32)($8 - $9) / (int_32)[40])) ){ goto $label$8 }
	if ( ($9 == 0) ){ goto $label$5 }
	$8 = *($0 + [4])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$7 }
	$5 = ([0] - $9)
	$8 = ($8 + [-16])
	
.LOOP $label$9:
	$4 = *($8)
	if ( ($4 == 0) ){ goto $label$10 }
	*(($8 + [4])) = $4
	CALL $330($4)
	
.LABEL $label$10
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $5) != (int_32)[-16]) ){ goto $label$9 }
	$8 = *($0)
	goto $label$6 
	
.LABEL $label$8
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$8 = ($1 + ((int_32)$5 * (int_32)[40]))
	$4 = ( $8 ? $2 : ((uint_32)$7 > (uint_32)$5) )
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	*($9) = *($1)
	*(($9 + [16])) = *(($1 + [16]))
	*(($9 + [8])) = *(($1 + [8]))
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$13 }
	CALL $158(($9 + [24]), *(($1 + [24])), *(($1 + [28])))
	
.LABEL $label$13
	$9 = ($9 + [40])
	$1 = ($1 + [40])
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((uint_32)$7 <= (uint_32)$5) ){ goto $label$14 }
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$4 }
	$0 = ($0 + [4])
	$1 = *($0)
	
.LOOP $label$15:
	*($1) = *($8)
	*(($1 + [16])) = *(($8 + [16]))
	*(($1 + [8])) = *(($8 + [8]))
	*($1 + [24 align=4]) = (int_64)0
	*(($5 = ($1 + [32]))) = [0]
	$6 = ($8 + [24])
	$7 = ($8 + [28])
	$9 = (*($7) - *($6))
	if ( ($9 == 0) ){ goto $label$16 }
	$3 = ($1 + [24])
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$2 }
	$4 = CALL $329($9)
	*($3) = $4
	*($5) = ($4 + $9)
	*(($1 = ($1 + [28]))) = $4
	$5 = *($6)
	$9 = (*($7) - $5)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($4, $5, $9)
	*($1) = (*($1) + $9)
	
.LABEL $label$16
	$1 = (*($0) + [40])
	*($0) = $1
	$8 = ($8 + [40])
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$15 }
	goto $label$4 
	
.LABEL $label$14
	$0 = ($0 + [4])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$17 }
	$4 = ([0] - $9)
	$1 = ($1 + [-16])
	
.LOOP $label$18:
	$8 = *($1)
	if ( ($8 == 0) ){ goto $label$19 }
	*(($1 + [4])) = $8
	CALL $330($8)
	
.LABEL $label$19
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $4) != (int_32)[-16]) ){ goto $label$18 }
	
.LABEL $label$17
	*($0) = $9
	return (unreachable)
	
.LABEL $label$7
	$8 = $9
	
.LABEL $label$6
	*(($0 + [4])) = $9
	CALL $330($8)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$1 }
	$9 = [107374182]
	$8 = ((int_32)$8 / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$20 }
	$9 = ($8 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$20
	$8 = ((int_32)$9 * (int_32)[40])
	$9 = CALL $329($8)
	*($0) = $9
	*($0 + [4]) = $9
	*(($0 + [8])) = ($9 + $8)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	$0 = ($0 + [4])
	
.LOOP $label$21:
	*($9) = *($1)
	*(($9 + [16])) = *(($1 + [16]))
	*(($9 + [8])) = *(($1 + [8]))
	*($9 + [24 align=4]) = (int_64)0
	*(($5 = ($9 + [32]))) = [0]
	$6 = ($1 + [24])
	$7 = ($1 + [28])
	$8 = (*($7) - *($6))
	if ( ($8 == 0) ){ goto $label$22 }
	$3 = ($9 + [24])
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$3 }
	$4 = CALL $329($8)
	*($3) = $4
	*($5) = ($4 + $8)
	*(($9 = ($9 + [28]))) = $4
	$5 = *($6)
	$8 = (*($7) - $5)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$22 }
	CALL memcpy($4, $5, $8)
	*($9) = (*($9) + $8)
	
.LABEL $label$22
	$9 = (*($0) + [40])
	*($0) = $9
	$1 = ($1 + [40])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$21 }
	
.LABEL $label$4
	return (unreachable)
	
.LABEL $label$3
	CALL $352($3)
	
.LABEL $label$2
	CALL $352($3)
	
.LABEL $label$1
	CALL $352($0)
	(unreachable)
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [1504])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1552])
	$9 = *($0 + [24])
	$4 = ($0 + [28])
	$10 = *($4)
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $9)
	$11 = ($10 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($11)) == (int_64)$2) ){ goto $label$1 }
	$10 = $11
	$7 = ($11 + [-24])
	$11 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$10 != (int_32)$9), [1616])
	$9 = ($10 + [-24])
	$3 = *($4)
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$11 = *($10)
	*($10) = [0]
	$4 = *($9)
	*($9) = $11
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = *($4 + [40])
	if ( ($5 == 0) ){ goto $label$7 }
	$11 = $5
	$8 = ($4 + [44])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$8 }
	$6 = ([0] - $5)
	$11 = ($7 + [-16])
	
.LOOP $label$9:
	$7 = *($11)
	if ( ($7 == 0) ){ goto $label$10 }
	*(($11 + [4])) = $7
	CALL $330($7)
	
.LABEL $label$10
	$11 = ($11 + [-40])
	if ( ((int_32)($11 + $6) != (int_32)[-16]) ){ goto $label$9 }
	$11 = *(($4 + [40]))
	
.LABEL $label$8
	*($8) = $5
	CALL $330($11)
	
.LABEL $label$7
	CALL $330($4)
	
.LABEL $label$6
	*($9 + [8]) = *($10 + [8])
	*(($9 + [16])) = *(($10 + [16]))
	$9 = ($9 + [24])
	$10 = ($10 + [24])
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$5 }
	$10 = *(($0 + [28]))
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$11:
	$10 = ($10 + [-24])
	$4 = *($10)
	*($10) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	$5 = *($4 + [40])
	if ( ($5 == 0) ){ goto $label$13 }
	$11 = $5
	$3 = ($4 + [44])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$14 }
	$6 = ([0] - $5)
	$11 = ($7 + [-16])
	
.LOOP $label$15:
	$7 = *($11)
	if ( ($7 == 0) ){ goto $label$16 }
	*(($11 + [4])) = $7
	CALL $330($7)
	
.LABEL $label$16
	$11 = ($11 + [-40])
	if ( ((int_32)($11 + $6) != (int_32)[-16]) ){ goto $label$15 }
	$11 = *(($4 + [40]))
	
.LABEL $label$14
	*($3) = $5
	CALL $330($11)
	
.LABEL $label$13
	CALL $330($4)
	
.LABEL $label$12
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$11 }
	
.LABEL $label$3
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [56]))
	$11 = *($1 + [60])
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$18 }
	$11 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4455901582336561152, ($12 + [8]), *($1))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL db_idx64_remove($11)
	
.LABEL $label$17
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [28])) = [0]
	*(($6 + [32])) = [0]
	*($6 + [12]) = [0]
	*($6 + [16]) = [0]
	*($6 + [20]) = [0]
	*($6 + [24]) = [0]
	*($6) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [36]) = [0]
	*(($6 + [40])) = [0]
	*(($6 + [44])) = [0]
	*($6 + [48]) = [0]
	*(($6 + [52])) = [0]
	*(($6 + [56])) = [0]
	CALL $100(($6 + [36]), $1, $2, $3, $4)
	CALL $61(($6 + [80]), $0)
	*($6 + [88]) = ((int_64)*($6 + [88]) + (int_64)1)
	CALL $62(($0 + [208]), ($6 + [80]), *($0))
	$5 = *($6 + [88])
	*($6 + [88]) = (int_64)0
	*($6 + [80]) = $5
	$5 = *($0)
	CALL $78(($6 + [64]), $6)
	$0 = *($6 + [64])
	CALL send_deferred(($6 + [80]), $5, $0, (*($6 + [68]) - $0), [0])
	$0 = *($6 + [64])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [68]) = $0
	CALL $330($0)
	
.LABEL $label$1
	CALL $79($6)
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $239 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	$4 = *($1)
	$5 = *($3)
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*(($1 + [16]))), [1232])
	$6 = (int_64)
	*($1 + [8]) = $6(*($1 + [8]) - *($5)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1280])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1312])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [32]))), [2128])
	$6 = ((int_64)*($1 + [24]) + (int_64)*($3))
	*($1 + [24]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [2208])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1024])
	*($7 + [56]) = ($7 + [40])
	*($7 + [52]) = $7
	*($7 + [48]) = $7
	CALL $176(($7 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $7, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $238 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*($0) = (int_64)0
	$6 = *(($2 + [16]))
	*($0 + [8]) = $6
	CALL eosio_assert([1], [576])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [640])
	$7 = *($3)
	if ( ((int_32)$7 != (int_32)[1]) ){ goto $label$6 }
	$6 = *($2 + [8])
	CALL __multi3(($9 + [32]), $6, (int_64)$6 >> (int_64)63), (int_64)20, (int_64)0)
	$5 = *(($2 + [16]))
	$6 = *((($9 + [32]) + [8]))
	$4 = *($9 + [32])
	CALL eosio_assert(( (uint_64)($4 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [2272])
	CALL eosio_assert(( ((uint_64)$4 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [2304])
	*(($0 + [8])) = $5
	*($0) = $4
	$7 = *($3)
	
.LABEL $label$6
	if ( ((int_32)($7 & [255]) != (int_32)[2]) ){ goto $label$7 }
	$6 = *($2 + [24])
	CALL __multi3(($9 + [16]), $6, (int_64)$6 >> (int_64)63), (int_64)20, (int_64)0)
	$5 = *(($2 + [32]))
	$6 = *((($9 + [16]) + [8]))
	$4 = *($9 + [16])
	CALL eosio_assert(( (uint_64)($4 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [2272])
	CALL eosio_assert(( ((uint_64)$4 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [2304])
	*(($0 + [8])) = $5
	*($0) = $4
	$7 = *($3)
	
.LABEL $label$7
	if ( ((int_32)($7 & [255]) != (int_32)[3]) ){ goto $label$8 }
	$6 = *($2 + [40])
	CALL __multi3($9, $6, (int_64)$6 >> (int_64)63), (int_64)20, (int_64)0)
	$5 = *(($2 + [48]))
	$6 = *(($9 + [8]))
	$4 = *($9)
	CALL eosio_assert(( (uint_64)($4 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [2272])
	CALL eosio_assert(( ((uint_64)$4 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [2304])
	*(($0 + [8])) = $5
	*($0) = $4
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [48])
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $95($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $334($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $329($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $334($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $330($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $331($7)
	return (unreachable)
}

void .FUNC $236 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [4])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $330($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$1 }
	$5 = [268435455]
	if ( ((uint_32)int_32($8 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [3])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[268435456]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [4])
	$5 = CALL $329($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [4])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [4])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [4]))
	return (unreachable)
	
.LABEL $label$1
	CALL $352($0)
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-4455901582336561152, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [52]) == (int_32)$4), [720])
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$8 = CALL db_find_i64(*($4), *($4 + [8]), (int_64)-4455901582336561152, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $101($4, $8)
	CALL eosio_assert(((int_32)*($2 + [52]) == (int_32)$4), [720])
	
.LABEL $label$4
	*($2 + [60]) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $234 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = *($0)
	$5 = ($4 + [104])
	$6 = *($5)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$2 = ($4 + [88])
	$3 = CALL db_lowerbound_i64(*($2), *(($4 + [96])), (int_64)4461681267712196608, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $117($2, $3)
	*($7 + [12]) = [0]
	*($7 + [8]) = $2
	$6 = *(*(CALL $235(($7 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [104])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [1952])
	*($1) = *($5)
	*($1 + [8]) = *(*($0 + [4]))
	*($1 + [16]) = *(*($0 + [4]) + [8])
	*($1 + [24]) = *(*($0 + [8]))
	$4 = *($0 + [12])
	$5 = ($1 + [32])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$3 }
	CALL $236($5, *($4), *($4 + [4]))
	
.LABEL $label$3
	$0 = *($0 + [16])
	*($1 + [48]) = *($0)
	*(($1 + [56])) = *(($0 + [8]))
	*($1 + [64]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $233 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	$10 = $11
	*([0] + [4]) = $11
	$2 = *($0)
	CALL $234(*($0 + [4]), $1)
	$3 = *($1 + [32])
	$4 = *(($1 + [36]))
	$5 = ($4 - $3)
	$9 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	$8 = [32]
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$8 = (($5 & [-16]) + $8)
	
.LABEL $label$2
	$4 = ($8 + [24])
	if ( ($4 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($4)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($11 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($10 + [12]) = $8
	*($10 + [8]) = $8
	*($10 + [16]) = ($8 + $4)
	CALL $112(($10 + [8]), $1)
	$9 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($2 + [8]), (int_64)4461681267712196608, *(*($0 + [8])), $9, $8, $4)
	if ( ($4 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$8 = ($2 + [8])
	$9 = *($8)
	$0 = *(($0 + [8]))
	$6 = *($0)
	$7 = *($1)
	*($10 + [24]) = *($1 + [8])
	*($1 + [80]) = CALL db_idx64_store($9, (int_64)4461681267712196608, $6, $7, ($10 + [24]))
	$9 = *($0)
	$6 = *($8)
	$7 = *($1)
	*($10 + [24]) = *($1 + [24])
	*(($1 + [84])) = CALL db_idx64_store($6, (int_64)4461681267712196609, $9, $7, ($10 + [24]))
	*([0] + [4]) = ($10 + [32])
}

int_32 .FUNC $91 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [32]) = (int_64)0
	*(($2 = ($0 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [640])
	*(($2 = ($0 + [56]))) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [576])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [640])
	*(($0 + [92])) = [0]
	*($0 + [84 align=4]) = (int_64)0
	*($0 + [104]) = [0]
	*(($0 + [108])) = [0]
	*(($0 + [112])) = [0]
	return $0
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [672])
	CALL memcpy(($1 + [24]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [672])
	CALL memcpy(($1 + [80]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [672])
	CALL memcpy(($1 + [81]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = CALL $94($0, ($1 + [84]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $94($0, ($1 + [104]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $230 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	*(($8 = $9) + [64]) = $2
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	*($8 + [48]) = *($1 + [8])
	*($8 + [56]) = *($1 + [24])
	*($8 + [40]) = *($1)
	$3 = (*($1 + [32]) + ((CASTING uint_32)(uint_64 ((int_64)*(*($3)) + (int_64)4294967295)) << [4]))
	$5 = *($3 + [4])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*($3 + [8])), [2128])
	$2 = ((int_64)*($3) + (int_64)*($5))
	*($3) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)*($3) < (int_64)4611686018427387904), [2208])
	$7 = *($8 + [40])
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [1024])
	$4 = *($1 + [32])
	$5 = *(($1 + [36]))
	$6 = ($5 - $4)
	$2 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	$3 = [32]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$3 = (($6 & [-16]) + $3)
	
.LABEL $label$2
	$5 = ($3 + [24])
	if ( ($5 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($8 + [28]) = $3
	*($8 + [24]) = $3
	*($8 + [32]) = ($3 + $5)
	CALL $112(($8 + [24]), $1)
	CALL db_update_i64(*($1 + [76]), *($8 + [64]), $3, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($3)
	$7 = *($8 + [40])
	
.LABEL $label$5
	$3 = ($0 + [36])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($8 + [4]) = $1
	*($8) = $0
	*($8 + [12]) = $1
	*($8 + [8]) = ($8 + [48])
	*($8 + [16]) = ($8 + [40])
	*($8 + [20]) = ($8 + [64])
	*($8 + [72]) = $8
	CALL $237(($8 + [72]), $3, ($3 + [1]))
	*([0] + [4]) = ($8 + [80])
}

void .FUNC $144 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $329(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $330($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $330($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $192 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($2)), [1424])
	$4 = *($3)
	$7 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$4 = *($1 + [4])
	$6 = int_32(($4 - $3) >> [5])
	$7 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$7 <= (uint_32)$6) ){ goto $label$3 }
	CALL $195($1, ($7 - $6))
	$4 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$2 }
	$7 = ($7 << [5])
	$2 = ($3 + $7)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$4 }
	$6 = (([0] - $3) - $7)
	$7 = ($4 + [-28])
	
.LOOP $label$5:
	$4 = *(($7 + [12]))
	if ( ($4 == 0) ){ goto $label$6 }
	*(($7 + [16])) = $4
	CALL $330($4)
	
.LABEL $label$6
	$4 = *($7)
	if ( ($4 == 0) ){ goto $label$7 }
	*(($7 + [4])) = $4
	CALL $330($4)
	
.LABEL $label$7
	$7 = ($7 + [-32])
	if ( ((int_32)($7 + $6) != (int_32)[-28]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$4 = $2
	
.LABEL $label$2
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$6 = ($8 + [16])
	$3 = ($8 + [20])
	
.LOOP $label$9:
	*($8) = $0
	*($8 + [8]) = $7
	*($6) = ($7 + [16])
	*($3) = ($7 + [28])
	*((($8 + [8]) + [16])) = ($7 + [29])
	*($8 + [12]) = ($7 + [4])
	CALL $196(($8 + [8]), $8)
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$8
	*([0] + [4]) = ($8 + [32])
	return $0
}

void .FUNC $260 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [28])) = [0]
	*(($6 + [32])) = [0]
	*($6 + [12]) = [0]
	*($6 + [16]) = [0]
	*($6 + [20]) = [0]
	*($6 + [24]) = [0]
	*($6) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [36]) = [0]
	*(($6 + [40])) = [0]
	*(($6 + [44])) = [0]
	*($6 + [48]) = [0]
	*(($6 + [52])) = [0]
	*(($6 + [56])) = [0]
	CALL $261(($6 + [36]), $1, $2, $3, $4)
	CALL $61(($6 + [80]), $0)
	*($6 + [88]) = ((int_64)*($6 + [88]) + (int_64)1)
	CALL $62(($0 + [208]), ($6 + [80]), *($0))
	$5 = *($6 + [88])
	*($6 + [88]) = (int_64)0
	*($6 + [80]) = $5
	$5 = *($0)
	CALL $78(($6 + [64]), $6)
	$0 = *($6 + [64])
	CALL send_deferred(($6 + [80]), $5, $0, (*($6 + [68]) - $0), [0])
	$0 = *($6 + [64])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [68]) = $0
	CALL $330($0)
	
.LABEL $label$1
	CALL $79($6)
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $261 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $329(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $329([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $81(($8 + [28]), [88])
	$2 = *($2)
	$1 = *($8 + [28])
	*($9 + [12]) = $1
	*($9 + [8]) = $1
	*($9 + [16]) = $2
	*($9 + [24]) = ($9 + [8])
	*($9 + [32]) = $4
	*($9 + [36]) = ($4 + [8])
	*($9 + [40]) = ($4 + [16])
	*($9 + [44]) = ($4 + [32])
	*($9 + [48]) = ($4 + [48])
	*($9 + [52]) = ($4 + [64])
	*($9 + [56]) = ($4 + [80])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	CALL $262(($9 + [32]), ($9 + [24]))
	$4 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$6 }
	$6 = ([0] - $4)
	$4 = ($2 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($4 + [-12]))
	*(($8 + [-40])) = *(($4 + [-20]))
	*(($2 = ($8 + [-24]))) = (int_64)0
	*(($1 = ($8 + [-16]))) = [0]
	$7 = ($4 + [-4])
	*($2) = *($7)
	*(($8 + [-20])) = *($4)
	$2 = ($4 + [4])
	*($1) = *($2)
	*($2) = [0]
	*(($2 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($1 = ($8 + [-4]))) = [0]
	$7 = ($4 + [8])
	*($2) = *($7)
	*(($8 + [-8])) = *(($4 + [12]))
	$2 = ($4 + [16])
	*($1) = *($2)
	*($2) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$4 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $4
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$8 = ($4 + [-24])
	
.LOOP $label$9:
	$4 = *(($8 + [12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $4
	CALL $330($4)
	
.LABEL $label$10
	$4 = *($8)
	if ( ($4 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $4
	CALL $330($4)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $2) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $330($1)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [64])
	(unreachable)
}

void .FUNC $262 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $303 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [28])) = [0]
	*(($6 + [32])) = [0]
	*($6 + [12]) = [0]
	*($6 + [16]) = [0]
	*($6 + [20]) = [0]
	*($6 + [24]) = [0]
	*($6) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [36]) = [0]
	*(($6 + [40])) = [0]
	*(($6 + [44])) = [0]
	*($6 + [48]) = [0]
	*(($6 + [52])) = [0]
	*(($6 + [56])) = [0]
	CALL $304(($6 + [36]), $1, $2, $3, $4)
	CALL $61(($6 + [80]), $0)
	*($6 + [88]) = ((int_64)*($6 + [88]) + (int_64)1)
	CALL $62(($0 + [208]), ($6 + [80]), *($0))
	$5 = *($6 + [88])
	*($6 + [88]) = (int_64)0
	*($6 + [80]) = $5
	$5 = *($0)
	CALL $78(($6 + [64]), $6)
	$0 = *($6 + [64])
	CALL send_deferred(($6 + [80]), $5, $0, (*($6 + [68]) - $0), [0])
	$0 = *($6 + [64])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [68]) = $0
	CALL $330($0)
	
.LABEL $label$1
	CALL $79($6)
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $302 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	$5 = *($3)
	*($1 + [8]) = *($5)
	*(($1 + [20])) = *(($5 + [12]))
	*(($1 + [16])) = *(($5 + [8]))
	*(($1 + [12])) = *(($5 + [4]))
	$4 = *($1)
	$5 = *($3 + [4])
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	CALL eosio_assert([1], [1024])
	*($6 + [56]) = ($6 + [40])
	*($6 + [52]) = $6
	*($6 + [48]) = $6
	CALL $176(($6 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $6, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [64])
}

void .FUNC $301 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	*($1 + [24]) = [0]
	$6 = *($1 + [16])
	*($1 + [16]) = (int_64)0
	$3 = *($3)
	*($1 + [32]) = *($3)
	*(($1 + [40])) = *(($3 + [8]))
	*(($8 = $7) + [24]) = $6
	$4 = *($1)
	*($1 + [81]) = [0]
	CALL eosio_assert([1], [1024])
	$3 = *($1 + [84])
	$5 = ( *(($1 + [88])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [99])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *($1 + [104])
	$5 = ( *(($1 + [108])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = ($5 + $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($8 + [12]) = $7
	*($8 + [8]) = $7
	*($8 + [16]) = ($7 + $3)
	CALL $146(($8 + [8]), $1)
	CALL db_update_i64(*($1 + [140]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($8 + [40]) = *(($1 + [16]))
	if ( (CALL memcmp(($8 + [24]), ($8 + [40]), [8]) == 0) ){ goto $label$7 }
	$1 = ($1 + [144])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4816283142123945984, ($8 + [32]), $4)
	*($1) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($8 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [48])
}

int_32 .FUNC $263 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1088])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $329([56])) + [40]) = $0
	CALL $264(($8 + [32]), $6)
	*($6 + [48]) = [-1]
	*($6 + [44]) = $1
	*($6 + [52]) = [-1]
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $265(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $330($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $307 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [32])
	*([0] + [4]) = $16
	$11 = *($1)
	if ( ($11 & [1]) ){ goto $label$2 }
	$11 = uint_32($11 >> [1])
	$10 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$11 = *($1 + [4])
	$10 = *($1 + [8])
	
.LABEL $label$1
	$9 = ($10 + $11)
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$4 }
	
.LOOP $label$5:
	if ( CALL isspace(*($10)) ){ goto $label$4 }
	$10 = ($10 + [1])
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$6 }
	$11 = $10
	
.LOOP $label$7:
	$11 = ($11 + [1])
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$6 }
	if ( CALL isspace(*($11)) ){ goto $label$7 }
	*($10) = *($11)
	$10 = ($10 + [1])
	goto $label$7 
	
.LABEL $label$6
	$9 = $10
	
.LABEL $label$3
	$10 = *($1)
	if ( ($10 & [1]) ){ goto $label$9 }
	$11 = ($1 + [1])
	$10 = ($11 + uint_32($10 >> [1]))
	goto $label$8 
	
.LABEL $label$9
	$11 = *($1 + [8])
	$10 = ($11 + *($1 + [4]))
	
.LABEL $label$8
	CALL $340($1, ($9 - $11), ($10 - $9))
	$11 = *($1)
	if ( ($11 & [1]) ){ goto $label$11 }
	$10 = uint_32($11 >> [1])
	$11 = ($1 + [1])
	goto $label$10 
	
.LABEL $label$11
	$10 = *($1 + [4])
	$11 = *($1 + [8])
	
.LABEL $label$10
	$9 = ($11 + $10)
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$16 }
	$10 = [0]
	
.LOOP $label$17:
	$10 = (((int_32)*($11) == (int_32)[45]) + $10)
	$11 = ($11 + [1])
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$17 }
	if ( ((int_32)$10 != (int_32)[3]) ){ goto $label$16 }
	$11 = [0]
	*($16 + [24]) = [0]
	*($16 + [16]) = (int_64)0
	*($16 + [15]) = [45]
	*($16) = [0]
	*($16 + [14]) = [1]
	$7 = CALL _Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb($1, ($16 + [16]), ($16 + [15]), $16, ($16 + [14]))
	*($16 + [28]) = $7
	$10 = *($16 + [16])
	$9 = CALL strlen([3792])
	if ( ((int_32)$9 != (int_32)( *($16 + [20]) ? uint_32($10 >> [1]) : ($10 & [1]) )) ){ goto $label$13 }
	$10 = [-1]
	$11 = [0]
	if ( CALL $342(($16 + [16]), [0], [-1], [3792], $9) ){ goto $label$13 }
	*($16) = [45]
	*($16 + [28]) = ($7 + [1])
	*($16 + [15]) = [1]
	$6 = CALL _Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb($1, ($16 + [16]), $16, ($16 + [28]), ($16 + [15]))
	*($16 + [28]) = $6
	$11 = *($16 + [16])
	CALL eosio_assert(((int_32)( *($16 + [20]) ? uint_32($11 >> [1]) : ($11 & [1]) ) != (int_32)[0]), [3808])
	$11 = ( *(($16 + [24])) ? (($16 + [16]) | [1]) : (*($16 + [16]) & [1]) )
	
.LOOP $label$18:
	$9 = ($11 + $10)
	$7 = ($10 + [1])
	$10 = $7
	if ( *(($9 + [1])) ){ goto $label$18 }
	$8 = (CASTING uint_64)(uint_32 $7)
	$13 = (int_64)0
	$12 = (int_64)59
	$14 = (int_64)0
	
.LOOP $label$19:
	$15 = (int_64)0
	if ( ((uint_64)$13 >= (uint_64)$8) ){ goto $label$20 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$10 = ($10 + [165])
	goto $label$21 
	
.LABEL $label$22
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$24 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	goto $label$23 
	
.LABEL $label$24
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$23
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$19 }
	*($3) = $14
	*($16) = [45]
	*($16 + [28]) = ($6 + [1])
	*($16 + [15]) = [1]
	$11 = CALL _Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb($1, ($16 + [16]), $16, ($16 + [28]), ($16 + [15]))
	$10 = *($16 + [16])
	CALL eosio_assert(((int_32)( *($16 + [20]) ? uint_32($10 >> [1]) : ($10 & [1]) ) != (int_32)[0]), [3808])
	*($4) = CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(($16 + [16]), [0], [10])
	$11 = ($11 + [1])
	*($16 + [28]) = $11
	CALL $354($16, $1, $11, [-1], $1)
	if ( (*($16 + [16]) & [1]) ){ goto $label$15 }
	*($16 + [16]) = [0]
	goto $label$14 
	
.LABEL $label$16
	*($2) = [0]
	goto $label$12 
	
.LABEL $label$15
	*(*(($16 + [24]))) = [0]
	*($16 + [20]) = [0]
	
.LABEL $label$14
	CALL $334(($16 + [16]), [0])
	*((($16 + [16]) + [8])) = *(($16 + [8]))
	*($16 + [16]) = *($16)
	CALL $332($5, ($16 + [16]))
	$11 = [1]
	
.LABEL $label$13
	*($2) = $11
	if ( ((*($16 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL $330(*(($16 + [24])))
	
.LABEL $label$12
	*([0] + [4]) = ($16 + [32])
}

void .FUNC $306 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [192])
	*([0] + [4]) = $14
	$11 = *($1)
	$4 = *(($0 + [192]))
	$8 = *(($0 + [196]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$9 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$11) ){ goto $label$1 }
	$8 = $9
	$7 = ($9 + [-24])
	$9 = $7
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = ($0 + [168])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$9 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$7), [720])
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$8 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-3665743328751648768, $11)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $188($7, $8)
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$7), [720])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [2448])
	$9 = ($9 + [16])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($9)), [2640])
	*($14 + [176]) = (int_64)0
	$11 = *($9)
	*($14 + [184]) = $11
	CALL eosio_assert([1], [576])
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$7 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$7 = [0]
	
.LABEL $label$5
	CALL eosio_assert($7, [640])
	*($14 + [152]) = (int_64)-1
	$9 = [0]
	*($14 + [160]) = [0]
	$11 = *($0)
	*($14 + [136]) = $11
	$13 = *($1)
	*($14 + [144]) = $13
	*(($14 + [164])) = [0]
	*(($14 + [168])) = [0]
	$7 = CALL db_find_i64($11, $13, (int_64)-6029028902599393280, *($2))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$10 }
	$9 = CALL $165(($14 + [136]), $7)
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)($14 + [136])), [720])
	
.LABEL $label$10
	$7 = (($14 + [176]) + [8])
	*(($8 = (($14 + [120]) + [8]))) = *($7)
	*($14 + [120]) = *($14 + [176])
	*(($5 = (($14 + [104]) + [8]))) = *($7)
	*($14 + [104]) = *($14 + [176])
	if ( ($9 == 0) ){ goto $label$13 }
	*($8) = *(($9 + [16]))
	$11 = *($9 + [8])
	*($5) = *(($9 + [32]))
	*($14 + [120]) = $11
	*($14 + [104]) = *($9 + [24])
	*($14 + [16]) = ($0 + [8])
	CALL $267(($14 + [32]), ($14 + [16]), $2)
	$7 = *($14 + [36])
	if ( ($7 == 0) ){ goto $label$14 }
	if ( ((int_64)*($7 + [16]) != (int_64)*($2)) ){ goto $label$14 }
	if ( ((int_64)*($7 + [72]) != (int_64)*($1)) ){ goto $label$14 }
	$11 = *($0)
	$7 = *($14 + [36])
	*($14 + [8]) = $3
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [784])
	CALL $317(*($14 + [16]), $7, $11, ($14 + [8]))
	$11 = *($0)
	*($14 + [8]) = $3
	$7 = [1]
	CALL eosio_assert([1], [784])
	CALL $318(($14 + [136]), $9, $11, ($14 + [8]))
	goto $label$11 
	
.LABEL $label$14
	$11 = *($0)
	*($14 + [8]) = $3
	CALL eosio_assert([1], [784])
	CALL $319(($14 + [136]), $9, $11, ($14 + [8]))
	goto $label$12 
	
.LABEL $label$13
	$11 = *($0)
	*($14 + [36]) = $3
	*($14 + [32]) = $2
	*($14 + [40]) = ($14 + [176])
	CALL $316(($14 + [16]), ($14 + [136]), $11, ($14 + [32]))
	
.LABEL $label$12
	$7 = [0]
	
.LABEL $label$11
	*(($14 + [52])) = *(($3 + [12]))
	*(($14 + [48])) = *(($3 + [8]))
	*((($14 + [32]) + [12])) = *(($3 + [4]))
	*($14 + [32]) = *($2)
	*($14 + [40]) = *($3)
	*(($14 + [64])) = *((($14 + [120]) + [8]))
	*($14 + [56]) = *($14 + [120])
	*(($14 + [80])) = *((($14 + [104]) + [8]))
	*($14 + [72]) = *($14 + [104])
	*($14 + [88]) = $7
	*($14 + [96]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [1376]
	$12 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$20 }
	$7 = *($9)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$7 = ($7 + [165])
	goto $label$18 
	
.LABEL $label$20
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$16
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$15 }
	*($14 + [24]) = $12
	*($14 + [16]) = $6
	$11 = (int_64)0
	$13 = (int_64)59
	$9 = [1392]
	$12 = (int_64)0
	
.LOOP $label$21:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$22 }
	$7 = *($9)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$7 = ($7 + [165])
	goto $label$23 
	
.LABEL $label$24
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$22
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$10 | (int_64)$12)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$21 }
	*($14 + [8]) = $12
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [3648]
	$12 = (int_64)0
	
.LOOP $label$25:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$30 }
	$7 = *($9)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$7 = ($7 + [165])
	goto $label$28 
	
.LABEL $label$30
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$26
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$25 }
	*($14) = $12
	CALL $320($0, ($14 + [16]), ($14 + [8]), $14, ($14 + [32]))
	$8 = *($14 + [160])
	if ( ($8 == 0) ){ goto $label$31 }
	$5 = ($14 + [164])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$33 }
	
.LOOP $label$34:
	$9 = ($9 + [-24])
	$7 = *($9)
	*($9) = [0]
	if ( ($7 == 0) ){ goto $label$35 }
	CALL $330($7)
	
.LABEL $label$35
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$34 }
	$9 = *(($14 + [160]))
	goto $label$32 
	
.LABEL $label$33
	$9 = $8
	
.LABEL $label$32
	*($5) = $8
	CALL $330($9)
	
.LABEL $label$31
	*([0] + [4]) = ($14 + [192])
}

void .FUNC $305 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [896])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [896])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [896])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [896])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $304 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $329(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $329([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $81(($8 + [28]), [84])
	$2 = *($2)
	$1 = *($8 + [28])
	*($9 + [12]) = $1
	*($9 + [8]) = $1
	*($9 + [16]) = $2
	*($9 + [24]) = ($9 + [8])
	*($9 + [32]) = $4
	*($9 + [36]) = ($4 + [8])
	*($9 + [40]) = ($4 + [16])
	*($9 + [44]) = ($4 + [24])
	*($9 + [48]) = ($4 + [40])
	*($9 + [52]) = ($4 + [56])
	*($9 + [56]) = ($4 + [64])
	*($9 + [60]) = ($4 + [72])
	*($9 + [64]) = ($4 + [80])
	*($9 + [68]) = ($4 + [81])
	*($9 + [72]) = ($4 + [82])
	*($9 + [76]) = ($4 + [88])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	CALL $305(($9 + [32]), ($9 + [24]))
	$4 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$6 }
	$6 = ([0] - $4)
	$4 = ($2 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($4 + [-12]))
	*(($8 + [-40])) = *(($4 + [-20]))
	*(($2 = ($8 + [-24]))) = (int_64)0
	*(($1 = ($8 + [-16]))) = [0]
	$7 = ($4 + [-4])
	*($2) = *($7)
	*(($8 + [-20])) = *($4)
	$2 = ($4 + [4])
	*($1) = *($2)
	*($2) = [0]
	*(($2 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($1 = ($8 + [-4]))) = [0]
	$7 = ($4 + [8])
	*($2) = *($7)
	*(($8 + [-8])) = *(($4 + [12]))
	$2 = ($4 + [16])
	*($1) = *($2)
	*($2) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$4 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $4
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$8 = ($4 + [-24])
	
.LOOP $label$9:
	$4 = *(($8 + [12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $4
	CALL $330($4)
	
.LABEL $label$10
	$4 = *($8)
	if ( ($4 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $4
	CALL $330($4)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $2) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $330($1)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [80])
	(unreachable)
}

int_32 .FUNC $309 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [1680])
	$6 = *($0 + [4])
	$7 = *($6 + [64])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-4816273130130128896, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [64]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$2), [720])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $59($2, CALL $fimport$17(*($2), *($2 + [8]), (int_64)-4816273130130128896, $3))
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$2), [720])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [64])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $308 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-4816273130130128896, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)$4), [720])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $59($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)-4816273130130128896, $5))
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)$4), [720])
	
.LABEL $label$4
	*(($2 + [64])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $282 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	*($1 + [81]) = [2]
	*(($9 = $8) + [24]) = *($1 + [16])
	$4 = *($1)
	CALL eosio_assert([1], [1024])
	$7 = *($1 + [84])
	$5 = ( *(($1 + [88])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($5 + [99])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *($1 + [104])
	$5 = ( *(($1 + [108])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$7 = ($5 + $7)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($7)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($8 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($9 + [12]) = $8
	*($9 + [8]) = $8
	*($9 + [16]) = ($8 + $7)
	CALL $146(($9 + [8]), $1)
	CALL db_update_i64(*($1 + [140]), $2, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($9 + [40]) = *(($1 + [16]))
	if ( (CALL memcmp(($9 + [24]), ($9 + [40]), [8]) == 0) ){ goto $label$7 }
	$1 = ($1 + [144])
	$7 = *($1)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$8 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4816283142123945984, ($9 + [32]), $4)
	*($1) = $7
	
.LABEL $label$8
	CALL db_idx64_update($7, $2, ($9 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $268 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	$4 = *($1)
	$5 = *($3)
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*(($1 + [16]))), [1232])
	$6 = (int_64)
	*($1 + [8]) = $6(*($1 + [8]) - *($5)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1280])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1312])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [32]))), [2128])
	$6 = ((int_64)*($1 + [24]) + (int_64)*($3))
	*($1 + [24]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [2208])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1024])
	*($7 + [56]) = ($7 + [40])
	*($7 + [52]) = $7
	*($7 + [48]) = $7
	CALL $176(($7 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $7, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [64])
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$7 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1088])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $4)
	*($8 + [36]) = $6
	*($8 + [32]) = $6
	$3 = ($6 + $4)
	*($8 + [40]) = $3
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($6)
	$3 = *(($8 + [40]))
	$6 = *($8 + [36])
	
.LABEL $label$7
	*(($7 = CALL $329([40])) + [24]) = [0]
	*($7 + [16 align=4]) = (int_64)0
	*($7 + [28]) = $0
	CALL eosio_assert(((uint_32)($3 - $6) > (uint_32)[7]), [672])
	CALL memcpy($7, $6, [8])
	$4 = ($6 + [8])
	CALL eosio_assert(((uint_32)($3 - $4) > (uint_32)[7]), [672])
	CALL memcpy(($7 + [8]), $4, [8])
	*($8 + [36]) = ($6 + [16])
	CALL $192(($8 + [32]), ($7 + [16]))
	*($7 + [32]) = $1
	*($8 + [24]) = $7
	$5 = *($7)
	*($8 + [16]) = $5
	$4 = *($7 + [32])
	*($8 + [12]) = $4
	$1 = ($0 + [28])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($6 + [8]) = $5
	*($6 + [16]) = $4
	*($8 + [24]) = [0]
	*($6) = $7
	*($1) = ($6 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $193(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$3 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$0 = *($3 + [16])
	if ( ($0 == 0) ){ goto $label$10 }
	$6 = $0
	$2 = ($3 + [20])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$11 }
	$1 = ([0] - $0)
	$6 = ($4 + [-28])
	
.LOOP $label$12:
	$4 = *(($6 + [12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($6 + [16])) = $4
	CALL $330($4)
	
.LABEL $label$13
	$4 = *($6)
	if ( ($4 == 0) ){ goto $label$14 }
	*(($6 + [4])) = $4
	CALL $330($4)
	
.LABEL $label$14
	$6 = ($6 + [-32])
	if ( ((int_32)($6 + $1) != (int_32)[-28]) ){ goto $label$12 }
	$6 = *(($3 + [16]))
	
.LABEL $label$11
	*($2) = $0
	CALL $330($6)
	
.LABEL $label$10
	CALL $330($3)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $7
}

void .FUNC $128 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($2)
	$4 = *(($1 + [32]))
	$7 = *(($1 + [36]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	$2 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($2)) == (int_64)$3) ){ goto $label$1 }
	$7 = $2
	$6 = ($2 + [-24])
	$2 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($1 + [8])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$2 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [136]) == (int_32)$6), [720])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$7 = CALL db_find_i64(*(($1 + [8])), *(($1 + [16])), (int_64)-4816283142123945984, $3)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $74($6, $7)
	CALL eosio_assert(((int_32)*($2 + [136]) == (int_32)$6), [720])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [1136])
	$6 = CALL memcpy($0, $2, [82])
	CALL $353(($6 + [84]), ($2 + [84]))
	*($6 + [96]) = *($2 + [96])
	CALL $353(($6 + [104]), ($2 + [104]))
	*(($6 + [128])) = *(($2 + [128]))
	*($6 + [120]) = *($2 + [120])
}

void .FUNC $286 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *($1)
	$3 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	$1 = ($6 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($1)) == (int_64)$2) ){ goto $label$1 }
	$6 = $1
	$5 = ($1 + [-24])
	$1 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$4 }
	$1 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$5), [720])
	goto $label$3 
	
.LABEL $label$4
	$1 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4816283142123945984, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $74($5, $6)
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$5), [720])
	
.LABEL $label$3
	$2 = *($0)
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [784])
	CALL $288($5, $1, $2, ($7 + [8]))
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $287 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [144])
	*([0] + [4]) = $11
	$8 = CALL current_time()
	*(($11 + [60])) = [0]
	*(($11 + [64])) = [0]
	*($11 + [44]) = [0]
	*($11 + [48]) = [0]
	*($11 + [52]) = [0]
	*($11 + [56]) = [0]
	*($11 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	*($11 + [68]) = [0]
	*(($11 + [72])) = [0]
	*(($11 + [76])) = [0]
	*($11 + [80]) = [0]
	*(($11 + [84])) = [0]
	*(($11 + [88])) = [0]
	$4 = ($11 + [68])
	$3 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1376]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	*($11 + [104]) = $9
	*($11 + [96]) = $3
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [3616]
	$9 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$12 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$12
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$7 }
	*($11 + [24]) = $9
	*($11 + [8]) = *($1)
	*($11 + [16]) = *($2)
	CALL $139($4, ($11 + [96]), $0, ($11 + [24]), ($11 + [8]))
	*(($11 + [52])) = [35]
	CALL $61(($11 + [96]), $0)
	*($11 + [104]) = ((int_64)*($11 + [104]) + (int_64)1)
	CALL $62(($0 + [208]), ($11 + [96]), *($0))
	$8 = *($11 + [104])
	*($11 + [104]) = (int_64)0
	*($11 + [96]) = $8
	$8 = *($0)
	CALL $78(($11 + [8]), ($11 + [32]))
	$6 = *($11 + [8])
	CALL send_deferred(($11 + [96]), $8, $6, (*($11 + [12]) - $6), [0])
	$6 = *($11 + [8])
	if ( ($6 == 0) ){ goto $label$13 }
	*($11 + [12]) = $6
	CALL $330($6)
	
.LABEL $label$13
	CALL $79(($11 + [32]))
	*([0] + [4]) = ($11 + [144])
}

void .FUNC $284 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	*($1 + [8]) = *(*($3))
	*(($9 = $10) + [24]) = *($1 + [16])
	$4 = *($1)
	$5 = *((*(*($3 + [8]) + [4]) + [56]))
	CALL eosio_assert([1], [576])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [640])
	*(($1 + [56])) = $5
	*($1 + [48]) = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [120]) = (int_64)0
	CALL $335(($1 + [104]), [2528])
	*($1 + [24]) = (*($1 + [24]) + *(*($3 + [12])))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1024])
	$7 = *($1 + [84])
	$8 = ( *(($1 + [88])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($8 + [99])
	$6 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$6:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$6 }
	$8 = *(($1 + [104]))
	$8 = ( *(($1 + [108])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$7 = ($8 + $7)
	$6 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$7:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$7 }
	if ( ($7 <= [513]) ){ goto $label$9 }
	$8 = CALL malloc($7)
	goto $label$8 
	
.LABEL $label$9
	$8 = ($10 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$8
	*($9 + [12]) = $8
	*($9 + [8]) = $8
	*($9 + [16]) = ($8 + $7)
	CALL $146(($9 + [8]), $1)
	CALL db_update_i64(*($1 + [140]), $2, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$10 }
	CALL free($8)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($9 + [40]) = *(($1 + [16]))
	if ( (CALL memcmp(($9 + [24]), ($9 + [40]), [8]) == 0) ){ goto $label$12 }
	$1 = ($1 + [144])
	$7 = *($1)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$13 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4816283142123945984, ($9 + [32]), $4)
	*($1) = $7
	
.LABEL $label$13
	CALL db_idx64_update($7, $2, ($9 + [40]))
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [48])
}

int_32 .FUNC $285 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [176])
	*([0] + [4]) = $12
	$10 = *($1)
	$9 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$1 }
	$11 = ($8 + [-24])
	$2 = ([0] - $9)
	
.LOOP $label$2:
	if ( ((int_64)*(*($11)) == (int_64)$10) ){ goto $label$1 }
	$8 = $11
	$7 = ($11 + [-24])
	$11 = $7
	if ( ((int_32)($7 + $2) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$11 = ($0 + [8])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$4 }
	$9 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [136]) == (int_32)$11), [720])
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4816283142123945984, $10)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $74($11, $7)
	CALL eosio_assert(((int_32)*($9 + [136]) == (int_32)$11), [720])
	
.LABEL $label$3
	$11 = [0]
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [1136])
	*($12 + [160]) = *($9 + [16])
	CALL $164(($12 + [80]), $0, ($9 + [72]))
	CALL $258(($12 + [64]), $0, ($12 + [80]), ($9 + [80]))
	*($12 + [40]) = (int_64)-1
	*($12 + [48]) = [0]
	$10 = *($12 + [80])
	$4 = *($0)
	*($12 + [24]) = $4
	*($12 + [32]) = $10
	*(($12 + [52])) = [0]
	*(($12 + [56])) = [0]
	$8 = [0]
	$7 = CALL db_find_i64($4, $10, (int_64)-6029028902599393280, *($9 + [16]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $165(($12 + [24]), $7)
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)($12 + [24])), [720])
	
.LABEL $label$5
	$4 = *($12 + [72])
	$3 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($12 + [64])) * (float_64)(float_64)0.5))
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [576])
	$10 = (uint_64)$4 >> (uint_64)(int_64)8)
	
.LOOP $label$7:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$7 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert($7, [640])
	CALL eosio_assert(((int_64)*(($8 + [32])) == (int_64)$4), [2816])
	$10 = *($1)
	$4 = *($8 + [24])
	$5 = *(($0 + [352]))
	$8 = *(($0 + [356]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$10 }
	$11 = ($8 + [-24])
	$2 = ([0] - $5)
	
.LOOP $label$11:
	if ( ((int_64)*(*($11)) == (int_64)$10) ){ goto $label$10 }
	$8 = $11
	$7 = ($11 + [-24])
	$11 = $7
	if ( ((int_32)($7 + $2) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$7 = ($0 + [328])
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$13 }
	$11 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)$7), [720])
	goto $label$12 
	
.LABEL $label$13
	$11 = [0]
	$8 = CALL db_find_i64(*(($0 + [328])), *(($0 + [336])), (int_64)4929617616895442944, $10)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$12 }
	$11 = CALL $252($7, $8)
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)$7), [720])
	
.LABEL $label$12
	*($12 + [16]) = ($0 + [128])
	CALL $289(($12 + [8]), ($12 + [16]), $1)
	$2 = [0]
	$8 = [0]
	if ( (*($9 + [24]) <= [5]) ){ goto $label$14 }
	$8 = [0]
	$5 = *($12 + [12])
	if ( ($5 == 0) ){ goto $label$14 }
	$8 = ((int_64)*($5 + [8]) == (int_64)*($1))
	
.LABEL $label$14
	$5 = ((int_64)$4 < (int_64)$3)
	$6 = ($5 | ((int_32)$11 != (int_32)[0]))
	if ( $6 ){ goto $label$16 }
	if ( ($8 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL $290($0, $9, $5, ((int_32)$11 != (int_32)[0]), $8)
	CALL $291($0, $1)
	$2 = [1]
	if ( $6 ){ goto $label$15 }
	CALL $292($0, $9, ($12 + [80]), ($12 + [160]))
	
.LABEL $label$15
	if ( ($11 == 0) ){ goto $label$17 }
	CALL eosio_assert([1], [1440])
	CALL eosio_assert([1], [1680])
	$0 = CALL db_next_i64(*($11 + [28]), ($12 + [168]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$18 }
	CALL $252($7, $0)
	
.LABEL $label$18
	CALL $293($7, $11)
	
.LABEL $label$17
	$0 = *($12 + [48])
	if ( ($0 == 0) ){ goto $label$19 }
	$8 = ($12 + [52])
	$11 = *($8)
	if ( ((int_32)$11 == (int_32)$0) ){ goto $label$21 }
	
.LOOP $label$22:
	$11 = ($11 + [-24])
	$7 = *($11)
	*($11) = [0]
	if ( ($7 == 0) ){ goto $label$23 }
	CALL $330($7)
	
.LABEL $label$23
	if ( ((int_32)$0 != (int_32)$11) ){ goto $label$22 }
	$11 = *(($12 + [48]))
	goto $label$20 
	
.LABEL $label$21
	$11 = $0
	
.LABEL $label$20
	*($8) = $0
	CALL $330($11)
	
.LABEL $label$19
	if ( ((*($12 + [136]) & [1]) == 0) ){ goto $label$24 }
	CALL $330(*(($12 + [144])))
	
.LABEL $label$24
	*([0] + [4]) = ($12 + [176])
	return $2
}

void .FUNC $123 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	*($8 + [16]) = ($0 + [88])
	CALL $114(($8 + [8]), ($8 + [16]), $1)
	$6 = *($8 + [12])
	if ( ($6 == 0) ){ goto $label$3 }
	$4 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)$4 > (uint_32)[59]) ){ goto $label$3 }
	
.LOOP $label$5:
	if ( ((int_64)*($6 + [8]) != (int_64)*($1)) ){ goto $label$3 }
	if ( ((uint_64)*($6 + [16]) <= (uint_64)*($2)) ){ goto $label$6 }
	CALL $115(($8 + [8]))
	$6 = *($8 + [12])
	if ( $6 ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$6
	$5 = *($8 + [8])
	*($8 + [24]) = $5
	$7 = [0]
	$6 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [1440])
	CALL $115(($8 + [24]))
	CALL $124(*($8 + [16]), $6)
	$5 = *($8 + [24])
	*($8 + [8]) = $5
	$4 = ($4 + [1])
	$6 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	if ( $6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$7 = $6
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	if ( ((int_64)*($7 + [8]) != (int_64)*($1)) ){ goto $label$7 }
	if ( ((uint_64)*($7 + [16]) > (uint_64)*($2)) ){ goto $label$7 }
	$5 = *($3)
	if ( ((uint_64)$5 > (uint_64)(int_64)4) ){ goto $label$7 }
	*($8 + [24]) = ((int_64)$5 + (int_64)1)
	CALL $125($0, $1, $2, ($8 + [24]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($0 + [16]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($0 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $288 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	*($1 + [81]) = [1]
	*(($9 = $8) + [24]) = *($1 + [16])
	$4 = *($1)
	*($1 + [120]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1024])
	$7 = *($1 + [84])
	$5 = ( *(($1 + [88])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($5 + [99])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *($1 + [104])
	$5 = ( *(($1 + [108])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$7 = ($5 + $7)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($7)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($8 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($9 + [12]) = $8
	*($9 + [8]) = $8
	*($9 + [16]) = ($8 + $7)
	CALL $146(($9 + [8]), $1)
	CALL db_update_i64(*($1 + [140]), $2, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($9 + [40]) = *(($1 + [16]))
	if ( (CALL memcmp(($9 + [24]), ($9 + [40]), [8]) == 0) ){ goto $label$7 }
	$1 = ($1 + [144])
	$7 = *($1)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$8 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4816283142123945984, ($9 + [32]), $4)
	*($1) = $7
	
.LABEL $label$8
	CALL db_idx64_update($7, $2, ($9 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $289 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)4154295086852603904, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$4), [720])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $263($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)4154295086852603904, $5))
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$4), [720])
	
.LABEL $label$4
	*(($2 + [48])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($0 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($0 + [16]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($1 + [4]), ($0 + [24]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $183 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [80])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)4461681267712196608, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [80]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [24])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [84]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)4461681267712196609, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [84])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $125 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [144])
	*([0] + [4]) = $12
	$9 = CALL current_time()
	*(($12 + [60])) = [0]
	*(($12 + [64])) = [0]
	*($12 + [44]) = [0]
	*($12 + [48]) = [0]
	*($12 + [52]) = [0]
	*($12 + [56]) = [0]
	*($12 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$9 / (uint_64)(int_64)1000000)) + [60])
	*($12 + [68]) = [0]
	*(($12 + [72])) = [0]
	*(($12 + [76])) = [0]
	*($12 + [80]) = [0]
	*(($12 + [84])) = [0]
	*(($12 + [88])) = [0]
	$5 = ($12 + [68])
	$4 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1376]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$6 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$6 = ($6 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	*($12 + [24]) = $10
	*($12 + [16]) = $4
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1744]
	$10 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$12 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$6 = ($6 + [165])
	goto $label$10 
	
.LABEL $label$12
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$7 }
	*($12 + [8]) = $10
	*($12 + [96]) = $4
	*($12 + [104]) = *($1)
	*($12 + [112]) = *($2)
	*($12 + [120]) = *($3)
	CALL $126($5, ($12 + [16]), $0, ($12 + [8]), ($12 + [96]))
	CALL $61(($12 + [96]), $0)
	*($12 + [104]) = ((int_64)*($12 + [104]) + (int_64)1)
	CALL $62(($0 + [208]), ($12 + [96]), *($0))
	$9 = *($12 + [104])
	*($12 + [104]) = (int_64)0
	*($12 + [96]) = $9
	$9 = *($0)
	CALL $78(($12 + [16]), ($12 + [32]))
	$7 = *($12 + [16])
	CALL send_deferred(($12 + [96]), $9, $7, (*($12 + [20]) - $7), [0])
	$7 = *($12 + [16])
	if ( ($7 == 0) ){ goto $label$13 }
	*($12 + [20]) = $7
	CALL $330($7)
	
.LABEL $label$13
	CALL $79(($12 + [32]))
	*([0] + [4]) = ($12 + [144])
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [1504])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1552])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1616])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [36])) = $6
	CALL $330($6)
	
.LABEL $label$7
	CALL $330($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [36])) = $6
	CALL $330($6)
	
.LABEL $label$10
	CALL $330($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [76]))
	$7 = *(($1 + [80]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4461681267712196608, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx64_remove($7)
	
.LABEL $label$11
	$7 = *(($1 + [84]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$14 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4461681267712196609, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$13 }
	
.LABEL $label$14
	CALL db_idx64_remove($7)
	
.LABEL $label$13
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $182 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $329(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $330($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $330($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $185 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [640])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [576])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [640])
	return $0
}

void .FUNC $184 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [80])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)4461681267712196608, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [80]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [24])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [84]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)4461681267712196609, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [84])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $187 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $329(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $330($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $330($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $186 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC fprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [12]) = $2
	$2 = CALL vfprintf($0, $1, $2)
	*([0] + [4]) = ($3 + [16])
	return $2
}

int_32 .FUNC fflush (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$5 }
	$1 = CALL __lockfile($0)
	
.LABEL $label$5
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$6 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( (*(($0 + [20])) == 0) ){ goto $label$3 }
	
.LABEL $label$6
	$2 = *($0 + [8])
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$7 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($3 - $2))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$7
	*($0 + [16]) = (int_64)0
	$3 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	if ( (*([0] + [12500]) == 0) ){ goto $label$8 }
	$5 = CALL fflush(*([0] + [12500]))
	
.LABEL $label$8
	$0 = *(CALL __ofl_lock())
	if ( ($0 == 0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$11 }
	$1 = CALL __lockfile($0)
	
.LABEL $label$11
	$2 = *($0 + [28])
	$3 = *($0 + [20])
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$12 }
	$4 = [0]
	if ( ((int_32)*(($0 + [76])) < (int_32)[0]) ){ goto $label$13 }
	$4 = CALL __lockfile($0)
	$2 = *(($0 + [28]))
	$3 = *(($0 + [20]))
	
.LABEL $label$13
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$16 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( *(($0 + [20])) ){ goto $label$16 }
	$3 = [-1]
	if ( $4 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$2 = *($0 + [8])
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$17 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($3 - $2))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$17
	*($0 + [16]) = (int_64)0
	$3 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($4 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL __unlockfile($0)
	
.LABEL $label$14
	$5 = ($3 | $5)
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$18 }
	CALL __unlockfile($0)
	
.LABEL $label$18
	$0 = *($0 + [56])
	if ( $0 ){ goto $label$10 }
	
.LABEL $label$9
	CALL __ofl_unlock()
	return $5
	
.LABEL $label$3
	$3 = [-1]
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL __unlockfile($0)
	
.LABEL $label$1
	return $3
}

int_32 .FUNC $354 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $329($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC isspace (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC __errno_location ()
{
	return [12440]
}

void .FUNC __assert_fail (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $2
	*($4 + [8]) = $3
	*($4 + [4]) = $1
	*($4) = $0
	CALL fprintf(*([0] + [12448]), [12464], $4)
	CALL fflush([0])
	CALL abort()
	(unreachable)
}

void .FUNC _ZNSt3__19to_stringEx (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [12416], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $348(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $348(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC _ZNSt3__19to_stringEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [12432], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $348(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $348(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $352 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $353 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $329($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [576])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [640])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $323($6, $0)
	if ( ($1 <= [513]) ){ goto $label$8 }
	CALL free($2)
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $310 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [160])
	*([0] + [4]) = $7
	CALL $164(($7 + [40]), $0, $2)
	CALL eosio_assert((((*($3) + [-1]) & [255]) <= [3]), [3328])
	CALL $311($0, $4)
	CALL $61(($7 + [120]), $0)
	*($7 + [120]) = ((int_64)*($7 + [120]) + (int_64)1)
	CALL $62(($0 + [208]), ($7 + [120]), *($0))
	*($7 + [32]) = *($7 + [120])
	*($7 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($7 + [8]) = (int_64)0
	$5 = *(($7 + [56]))
	*($7 + [16]) = $5
	CALL eosio_assert([1], [576])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [640])
	$5 = *($0)
	*($7 + [132]) = $3
	*($7 + [136]) = $4
	*($7 + [124]) = ($7 + [8])
	*($7 + [120]) = ($7 + [32])
	*($7 + [128]) = ($7 + [40])
	*($7 + [140]) = ($7 + [24])
	CALL $312($7, ($0 + [8]), $5, ($7 + [120]))
	$5 = *($0)
	*($7 + [124]) = $1
	*($7 + [120]) = ($7 + [32])
	*($7 + [128]) = ($7 + [8])
	CALL $313($7, ($0 + [368]), $5, ($7 + [120]))
	if ( ((*($7 + [96]) & [1]) == 0) ){ goto $label$6 }
	CALL $330(*(($7 + [104])))
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [160])
}

void .FUNC $311 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = *($1)
	if ( (( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ) == 0) ){ goto $label$1 }
	CALL $353($7, $1)
	$5 = ($5 & [1])
	$5 = *($7)
	$3 = uint_32($5 >> [1])
	$2 = *($7 + [4])
	if ( (( $2 ? $3 : $5 ) == 0) ){ goto $label$3 }
	if ( $5 ){ goto $label$4 }
	$6 = [1]
	$2 = ($7 | [1])
	$5 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)$5 >= (uint_32)$3) ){ goto $label$2 }
	$4 = ($2 + $5)
	$5 = ($5 + [1])
	if ( (((*($4) + [-48]) & [255]) <= [10]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$3 = *($7 + [8])
	$6 = [1]
	
.LOOP $label$6:
	if ( ((uint_32)$5 >= (uint_32)$2) ){ goto $label$2 }
	$4 = ($3 + $5)
	$5 = ($5 + [1])
	if ( (((*($4) + [-48]) & [255]) <= [10]) ){ goto $label$6 }
	
.LABEL $label$3
	$6 = [0]
	
.LABEL $label$2
	CALL eosio_assert($6, [3760])
	if ( ((*($7) & [1]) == 0) ){ goto $label$7 }
	CALL $330(*($7 + [8]))
	
.LABEL $label$7
	$5 = *($1)
	CALL eosio_assert((( *(($1 + [4])) ? uint_32($5 >> [1]) : ($5 & [1]) ) <= [13]), [3760])
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [16])
}

void .FUNC _Z10str_to_sigNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	$4 = CALL strlen([416])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($5 + [16]) = ($4 << [1])
	$2 = (($5 + [16]) | [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = (($4 + [16]) & [-16])
	$2 = CALL $329($3)
	*($5 + [16]) = ($3 | [1])
	*($5 + [24]) = $2
	*($5 + [20]) = $4
	
.LABEL $label$3
	CALL memcpy($2, [416], $4)
	
.LABEL $label$2
	*(($2 + $4)) = [0]
	$4 = *($5 + [16])
	CALL $354($5, $1, ( *($5 + [20]) ? uint_32($4 >> [1]) : ($4 & [1]) ), [-1], $1)
	if ( (*($1) & [1]) ){ goto $label$6 }
	*($1) = [0]
	goto $label$5 
	
.LABEL $label$6
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$5
	$4 = [0]
	CALL $334($1, [0])
	*($1) = *($5)
	$2 = *(($5 + [8]))
	*(($1 + [8])) = $2
	$3 = *($1)
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	CALL _Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE(( $2 ? ($1 + [1]) : ($3 & [1]) ), $5)
	*($0) = [0]
	$2 = ($0 + [1])
	$1 = *($5)
	
.LOOP $label$7:
	*(($2 + $4)) = *(($1 + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[65]) ){ goto $label$7 }
	*($5 + [4]) = $1
	CALL $330($1)
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$8 }
	CALL $330(*($5 + [24]))
	
.LABEL $label$8
	*([0] + [4]) = ($5 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $331(($5 + [16]))
}

int_32 .FUNC _Z13decode_base58RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIhNS3_IhEEEE (int_32 $0, int_32 $1)
{
	return CALL _Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE(( *($0 + [8]) ? ($0 + [1]) : (*($0) & [1]) ), $1)
}

int_32 .FUNC _Z7all_numNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$3 = *($0)
	$1 = ($3 & [1])
	if ( $1 ){ goto $label$5 }
	if ( uint_32($3 >> [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( (*($0 + [4]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	if ( $1 ){ goto $label$6 }
	$1 = uint_32($3 >> [1])
	$2 = ($0 + [1])
	$3 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$0 = ($2 + $3)
	$3 = ($3 + [1])
	if ( (((*($0) + [-48]) & [255]) <= [10]) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$6
	$1 = *($0 + [4])
	$3 = [0]
	$2 = ($0 + [8])
	
.LOOP $label$8:
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$1 }
	$0 = (*($2) + $3)
	$3 = ($3 + [1])
	if ( (((*($0) + [-48]) & [255]) <= [10]) ){ goto $label$8 }
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [1]
	
.LABEL $label$1
	return [1]
}

void .FUNC _Z10str_to_pubNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	$2 = CALL strlen([432])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($5 + [32]) = ($2 << [1])
	$3 = (($5 + [32]) | [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$3 = CALL $329($4)
	*($5 + [32]) = ($4 | [1])
	*($5 + [40]) = $3
	*($5 + [36]) = $2
	
.LABEL $label$3
	CALL memcpy($3, [432], $2)
	
.LABEL $label$2
	$4 = [0]
	*(($3 + $2)) = [0]
	$2 = *($5 + [32])
	CALL $354(($5 + [16]), $1, ( *($5 + [36]) ? uint_32($2 >> [1]) : ($2 & [1]) ), [-1], $1)
	*($5) = (int_64)0
	*($5 + [8]) = [0]
	CALL _Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE(( *($5 + [24]) ? (($5 + [16]) | [1]) : (*($5 + [16]) & [1]) ), $5)
	*($0) = [0]
	$3 = ($0 + [1])
	$2 = *($5)
	
.LOOP $label$5:
	*(($3 + $4)) = *(($2 + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[33]) ){ goto $label$5 }
	*($5 + [4]) = $2
	CALL $330($2)
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL $330(*(($5 + [24])))
	
.LABEL $label$6
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $330(*($5 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($5 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $331(($5 + [32]))
}

int_32 .FUNC _Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($3) != (int_32)[-1]), [448])
	$2 = CALL $341($0, *($2), *($3))
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$4 }
	$3 = *($3)
	CALL $354($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$3 }
	*($1) = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert(((int_32)*($4) ^ (int_32)[1]), [480])
	$2 = [-1]
	goto $label$1 
	
.LABEL $label$3
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$2
	CALL $334($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
	return $2
}

int_64 .FUNC _Z15string_uint64_tPKcRKj (int_32 $0, int_32 $1)
{
	float_64 $2
	int_64 $3
	$3 = (int_64)0
	$1 = (*($1) + [-1])
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	
.LOOP $label$2:
	$2 = CALL pow((float_64)10, (CASTING float_64)(int_32 $1))
	$3 = ((int_64)((int_64)((int_64)*($0) + (int_64)-48) * (int_64)(Rounds 0)($2)) + (int_64)$3)
	$0 = ($0 + [1])
	$1 = ($1 + [-1])
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$1
	return $3
}

void .FUNC _ZN6niuniu8transferERKyS1_RKN5eosio5assetERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	CALL $61(($10 + [8]), $0)
	CALL eosio_assert(((int_64)*($10 + [24]) == (int_64)1), [1760])
	$7 = *($0)
	if ( ((int_64)*($1) == (int_64)$7) ){ goto $label$1 }
	if ( ((int_64)*($2) != (int_64)$7) ){ goto $label$1 }
	$2 = *($4)
	$5 = CALL strlen([3648])
	if ( ((int_32)$5 != (int_32)( *($4 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$1 }
	if ( CALL $342($4, [0], [-1], [3648], $5) ){ goto $label$1 }
	$7 = (int_64)0
	$6 = (int_64)59
	$4 = [512]
	$8 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$7 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$2 = ($2 + [165])
	goto $label$5 
	
.LABEL $label$7
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$3
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$2 }
	*($10 + [8]) = $8
	CALL $306($0, ($10 + [8]), $1, $3)
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [48])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [800])
	*([0] + [4]) = $9
	*($9 + [792]) = $1
	*(($9 + [400])) = $0
	*(($9 + [408])) = (int_64)-1
	$1 = (int_64)0
	*(($9 + [416])) = (int_64)0
	*(($9 + [424])) = [0]
	*($9 + [392]) = $0
	*($9 + [384]) = $0
	*(($9 + [428])) = [0]
	*($9 + [432]) = $0
	*(($9 + [440])) = $0
	*(($9 + [448])) = (int_64)-1
	*(($9 + [456])) = [0]
	*(($9 + [460])) = [0]
	*(($9 + [464])) = [0]
	*(($9 + [468])) = [0]
	*($9 + [472]) = $0
	*(($9 + [480])) = $0
	*(($9 + [488])) = (int_64)-1
	*(($9 + [496])) = [0]
	*(($9 + [500])) = [0]
	*(($9 + [504])) = [0]
	*(($9 + [508])) = [0]
	*($9 + [512]) = $0
	*(($9 + [520])) = $0
	*(($9 + [528])) = (int_64)-1
	*(($9 + [536])) = [0]
	*(($9 + [540])) = [0]
	*(($9 + [544])) = [0]
	*(($9 + [548])) = [0]
	*($9 + [552]) = $0
	*(($9 + [560])) = $0
	*(($9 + [568])) = (int_64)-1
	*(($9 + [576])) = [0]
	*(($9 + [580])) = [0]
	*(($9 + [584])) = [0]
	*($9 + [592]) = $0
	*(($9 + [600])) = $0
	*(($9 + [608])) = (int_64)-1
	*(($9 + [616])) = [0]
	*(($9 + [620])) = [0]
	*(($9 + [624])) = [0]
	*($9 + [632]) = $0
	*(($9 + [640])) = $0
	*(($9 + [648])) = (int_64)-1
	*(($9 + [656])) = [0]
	*(($9 + [660])) = [0]
	*(($9 + [664])) = [0]
	*($9 + [672]) = $0
	*(($9 + [680])) = $0
	*(($9 + [688])) = (int_64)-1
	*(($9 + [696])) = [0]
	*(($9 + [700])) = [0]
	*(($9 + [704])) = [0]
	$8 = *($9 + [384])
	*($9 + [712]) = $8
	*(($9 + [720])) = $8
	*(($9 + [728])) = (int_64)-1
	*(($9 + [736])) = [0]
	*(($9 + [740])) = [0]
	*(($9 + [744])) = [0]
	*($9 + [752]) = $8
	*(($9 + [760])) = $8
	*(($9 + [768])) = (int_64)-1
	*(($9 + [776])) = [0]
	*(($9 + [780])) = [0]
	*(($9 + [784])) = [0]
	*(($9 + [788])) = [0]
	$6 = (int_64)59
	$5 = [512]
	$3 = *($9 + [792])
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$6 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$3 != (int_64)$7) ){ goto $label$9 }
	$1 = (int_64)0
	$6 = (int_64)59
	$5 = [528]
	$7 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$15 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$4 = ($4 + [165])
	goto $label$13 
	
.LABEL $label$15
	$8 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$11
	$5 = ($5 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$10 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$9 }
	*($9 + [380]) = [0]
	*($9 + [376]) = [1]
	*($9) = *($9 + [376])
	CALL $28(($9 + [384]), $9)
	goto $label$8 
	
.LABEL $label$9
	$1 = (int_64)0
	$6 = (int_64)59
	$5 = [528]
	$7 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$21 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$4 = ($4 + [165])
	goto $label$19 
	
.LABEL $label$21
	$8 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$17
	$5 = ($5 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$22 }
	CALL $29(($9 + [328]))
	*((($9 + [280]) + [24])) = *((($9 + [328]) + [24]))
	*((($9 + [280]) + [16])) = *((($9 + [328]) + [16]))
	*((($9 + [280]) + [8])) = *((($9 + [328]) + [8]))
	*($9 + [280]) = *($9 + [328])
	$5 = (($9 + [328]) + [32])
	CALL $353((($9 + [280]) + [32]), $5)
	CALL _ZN6niuniu10tptransferERKyN5eosio8currency8transferE(($9 + [384]), ($9 + [792]), ($9 + [280]))
	if ( ((*($9 + [312]) & [1]) == 0) ){ goto $label$23 }
	CALL $330(*(($9 + [320])))
	
.LABEL $label$23
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $330(*(($9 + [368])))
	goto $label$8 
	
.LABEL $label$22
	if ( ((int_64)$3 == (int_64)$0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $56(($9 + [384]))
	*([0] + [4]) = ($9 + [800])
	return (unreachable)
	
.LABEL $label$7
	if ( ((int_64)$2 <= (int_64)-4149693587203817473) ){ goto $label$41 }
	if ( ((int_64)$2 <= (int_64)4921564679018381311) ){ goto $label$40 }
	if ( ((int_64)$2 <= (int_64)4929617908399603711) ){ goto $label$38 }
	if ( ((int_64)$2 == (int_64)4929617908399603712) ){ goto $label$34 }
	if ( ((int_64)$2 == (int_64)5058223962426179584) ){ goto $label$33 }
	if ( ((int_64)$2 != (int_64)5058468846130692096) ){ goto $label$25 }
	*($9 + [252]) = [0]
	*($9 + [248]) = [2]
	*($9 + [32 align=4]) = *($9 + [248])
	CALL $32(($9 + [384]), ($9 + [32]))
	goto $label$24 
	
.LABEL $label$41
	if ( ((int_64)$2 > (int_64)-4992623624440512513) ){ goto $label$39 }
	if ( ((int_64)$2 > (int_64)-5858950293621833729) ){ goto $label$37 }
	if ( ((int_64)$2 == (int_64)-6533258394248151040) ){ goto $label$32 }
	if ( ((int_64)$2 != (int_64)-6030912133210832896) ){ goto $label$25 }
	*($9 + [172]) = [0]
	*($9 + [168]) = [3]
	*($9 + [112 align=4]) = *($9 + [168])
	CALL $32(($9 + [384]), ($9 + [112]))
	goto $label$24 
	
.LABEL $label$40
	if ( ((int_64)$2 > (int_64)-2039333636196532225) ){ goto $label$36 }
	if ( ((int_64)$2 == (int_64)-4149693587203817472) ){ goto $label$31 }
	if ( ((int_64)$2 != (int_64)-3665743328751648768) ){ goto $label$25 }
	*($9 + [212]) = [0]
	*($9 + [208]) = [4]
	*($9 + [72 align=4]) = *($9 + [208])
	CALL $42(($9 + [384]), ($9 + [72]))
	goto $label$24 
	
.LABEL $label$39
	if ( ((int_64)$2 > (int_64)-4417020450404564993) ){ goto $label$35 }
	if ( ((int_64)$2 == (int_64)-4992623624440512512) ){ goto $label$30 }
	if ( ((int_64)$2 != (int_64)-4455901582336573440) ){ goto $label$25 }
	*($9 + [164]) = [0]
	*($9 + [160]) = [5]
	*($9 + [120 align=4]) = *($9 + [160])
	CALL $52(($9 + [384]), ($9 + [120]))
	goto $label$24 
	
.LABEL $label$38
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)4923678860143406592) ){ goto $label$25 }
	*($9 + [180]) = [0]
	*($9 + [176]) = [6]
	*($9 + [104 align=4]) = *($9 + [176])
	CALL $49(($9 + [384]), ($9 + [104]))
	goto $label$24 
	
.LABEL $label$37
	if ( ((int_64)$2 == (int_64)-5858950293621833728) ){ goto $label$28 }
	if ( ((int_64)$2 != (int_64)-4997502823521320960) ){ goto $label$25 }
	*($9 + [228]) = [0]
	*($9 + [224]) = [7]
	*($9 + [56 align=4]) = *($9 + [224])
	CALL $32(($9 + [384]), ($9 + [56]))
	goto $label$24 
	
.LABEL $label$36
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$27 }
	if ( ((int_64)$2 != (int_64)4229443000054317056) ){ goto $label$25 }
	*($9 + [204]) = [0]
	*($9 + [200]) = [8]
	*($9 + [80 align=4]) = *($9 + [200])
	CALL $44(($9 + [384]), ($9 + [80]))
	goto $label$24 
	
.LABEL $label$35
	if ( ((int_64)$2 == (int_64)-4417020450404564992) ){ goto $label$26 }
	if ( ((int_64)$2 != (int_64)-4157529865748217856) ){ goto $label$25 }
	*($9 + [276]) = [0]
	*($9 + [272]) = [9]
	*($9 + [8 align=4]) = *($9 + [272])
	CALL $32(($9 + [384]), ($9 + [8]))
	goto $label$24 
	
.LABEL $label$34
	*($9 + [220]) = [0]
	*($9 + [216]) = [10]
	*($9 + [64 align=4]) = *($9 + [216])
	CALL $40(($9 + [384]), ($9 + [64]))
	goto $label$24 
	
.LABEL $label$33
	*($9 + [260]) = [0]
	*($9 + [256]) = [11]
	*($9 + [24 align=4]) = *($9 + [256])
	CALL $32(($9 + [384]), ($9 + [24]))
	goto $label$24 
	
.LABEL $label$32
	*($9 + [188]) = [0]
	*($9 + [184]) = [12]
	*($9 + [96 align=4]) = *($9 + [184])
	CALL $46(($9 + [384]), ($9 + [96]))
	goto $label$24 
	
.LABEL $label$31
	*($9 + [268]) = [0]
	*($9 + [264]) = [13]
	*($9 + [16 align=4]) = *($9 + [264])
	CALL $32(($9 + [384]), ($9 + [16]))
	goto $label$24 
	
.LABEL $label$30
	*($9 + [196]) = [0]
	*($9 + [192]) = [14]
	*($9 + [88 align=4]) = *($9 + [192])
	CALL $46(($9 + [384]), ($9 + [88]))
	goto $label$24 
	
.LABEL $label$29
	*($9 + [244]) = [0]
	*($9 + [240]) = [15]
	*($9 + [40 align=4]) = *($9 + [240])
	CALL $32(($9 + [384]), ($9 + [40]))
	goto $label$24 
	
.LABEL $label$28
	*($9 + [236]) = [0]
	*($9 + [232]) = [16]
	*($9 + [48 align=4]) = *($9 + [232])
	CALL $32(($9 + [384]), ($9 + [48]))
	goto $label$24 
	
.LABEL $label$27
	*($9 + [156]) = [0]
	*($9 + [152]) = [17]
	*($9 + [128 align=4]) = *($9 + [152])
	CALL $32(($9 + [384]), ($9 + [128]))
	goto $label$24 
	
.LABEL $label$26
	*($9 + [148]) = [0]
	*($9 + [144]) = [18]
	*($9 + [136 align=4]) = *($9 + [144])
	CALL $55(($9 + [384]), ($9 + [136]))
	goto $label$24 
	
.LABEL $label$25
	CALL eosio_assert([0], [544])
	
.LABEL $label$24
	CALL eosio_exit([0])
}

int_32 .FUNC $329 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [12332])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [12224])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [12032]
	$1 = (((int_32)$2 * (int_32)[12]) + [12032])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $193 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $329(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $194(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $321 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $329(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $329([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $81(($8 + [28]), [65])
	$2 = *($2)
	$1 = *($8 + [28])
	*($9 + [4]) = $1
	*($9) = $1
	*($9 + [8]) = $2
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	*($9 + [28]) = ($4 + [8])
	*($9 + [32]) = ($4 + [24])
	*($9 + [36]) = ($4 + [40])
	*($9 + [40]) = ($4 + [56])
	*($9 + [44]) = ($4 + [64])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	CALL $322(($9 + [24]), ($9 + [16]))
	$4 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$6 }
	$6 = ([0] - $4)
	$4 = ($2 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($4 + [-12]))
	*(($8 + [-40])) = *(($4 + [-20]))
	*(($2 = ($8 + [-24]))) = (int_64)0
	*(($1 = ($8 + [-16]))) = [0]
	$7 = ($4 + [-4])
	*($2) = *($7)
	*(($8 + [-20])) = *($4)
	$2 = ($4 + [4])
	*($1) = *($2)
	*($2) = [0]
	*(($2 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($1 = ($8 + [-4]))) = [0]
	$7 = ($4 + [8])
	*($2) = *($7)
	*(($8 + [-8])) = *(($4 + [12]))
	$2 = ($4 + [16])
	*($1) = *($2)
	*($2) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$4 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $4
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$8 = ($4 + [-24])
	
.LOOP $label$9:
	$4 = *(($8 + [12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $4
	CALL $330($4)
	
.LABEL $label$10
	$4 = *($8)
	if ( ($4 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $4
	CALL $330($4)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $2) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $330($1)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [48])
	(unreachable)
}

void .FUNC $320 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [28])) = [0]
	*(($6 + [32])) = [0]
	*($6 + [12]) = [0]
	*($6 + [16]) = [0]
	*($6 + [20]) = [0]
	*($6 + [24]) = [0]
	*($6) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [36]) = [0]
	*(($6 + [40])) = [0]
	*(($6 + [44])) = [0]
	*($6 + [48]) = [0]
	*(($6 + [52])) = [0]
	*(($6 + [56])) = [0]
	CALL $321(($6 + [36]), $1, $2, $3, $4)
	CALL $61(($6 + [80]), $0)
	*($6 + [88]) = ((int_64)*($6 + [88]) + (int_64)1)
	CALL $62(($0 + [208]), ($6 + [80]), *($0))
	$5 = *($6 + [88])
	*($6 + [88]) = (int_64)0
	*($6 + [80]) = $5
	$5 = *($0)
	CALL $78(($6 + [64]), $6)
	$0 = *($6 + [64])
	CALL send_deferred(($6 + [80]), $5, $0, (*($6 + [68]) - $0), [0])
	$0 = *($6 + [64])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [68]) = $0
	CALL $330($0)
	
.LABEL $label$1
	CALL $79($6)
	*([0] + [4]) = ($6 + [128])
}

int_32 .FUNC $323 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $94($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $322 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [896])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$0 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $326([3840], $0)
}

void .FUNC $324 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $94(*($1), ($0 + [32]))
}

int_32 .FUNC $327 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [12326]) == 0) ){ goto $label$2 }
	$7 = *([0] + [12328])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [12326]) = [1]
	$7 = ($7 << [16])
	*([0] + [12328]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [12328])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [12328]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [12326]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [12326]) = [1]
	$3 = ($3 << [16])
	*([0] + [12328]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [12328])
	
.LABEL $label$8
	*([0] + [12328]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $326 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $327($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [12240])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1088])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($6 = CALL $329([64])) + [32]) = (int_64)1398362884
	*($6 + [24]) = (int_64)0
	CALL eosio_assert([1], [576])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$4 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$4 = [0]
	
.LABEL $label$8
	CALL eosio_assert($4, [640])
	*($6 + [48]) = [0]
	*($6 + [40 align=4]) = (int_64)0
	*($6 + [52]) = $0
	CALL $102(($8 + [32]), $6)
	*($6 + [60]) = [-1]
	*($6 + [56]) = $1
	*($8 + [24]) = $6
	$7 = *($6)
	*($8 + [16]) = $7
	$4 = *($6 + [56])
	*($8 + [12]) = $4
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $4
	*($8 + [24]) = [0]
	*($5) = $6
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $103($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$3 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$0 = *($3 + [40])
	if ( ($0 == 0) ){ goto $label$15 }
	$5 = $0
	$2 = ($3 + [44])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$16 }
	$1 = ([0] - $0)
	$5 = ($4 + [-16])
	
.LOOP $label$17:
	$4 = *($5)
	if ( ($4 == 0) ){ goto $label$18 }
	*(($5 + [4])) = $4
	CALL $330($4)
	
.LABEL $label$18
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $1) != (int_32)[-16]) ){ goto $label$17 }
	$5 = *(($3 + [40]))
	
.LABEL $label$16
	*($2) = $0
	CALL $330($5)
	
.LABEL $label$15
	CALL $330($3)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $329(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $329([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $81(($8 + [28]), [24])
	$2 = *($8 + [28])
	$1 = (*($2) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [896])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [896])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [896])
	CALL memcpy(($2 + [16]), ($4 + [16]), [8])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($4 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$1 = ([0] - $4)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $330($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $330($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $330($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($8 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($5 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL $329(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*(($1 = ($5 + ((int_32)$8 * (int_32)[24])))) = $7
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$7 = ($5 + ((int_32)$6 * (int_32)[24]))
	$4 = ($1 + [24])
	$2 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($6 + [-24])
	$3 = *($5)
	*($5) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$8 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$8 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $4
	*(($0 + [8])) = $7
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	$0 = *($3 + [40])
	if ( ($0 == 0) ){ goto $label$11 }
	$1 = $0
	$7 = ($3 + [44])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$12 }
	$5 = ([0] - $0)
	$1 = ($6 + [-16])
	
.LOOP $label$13:
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$14 }
	*(($1 + [4])) = $6
	CALL $330($6)
	
.LABEL $label$14
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $5) != (int_32)[-16]) ){ goto $label$13 }
	$1 = *(($3 + [40]))
	
.LABEL $label$12
	*($7) = $0
	CALL $330($1)
	
.LABEL $label$11
	CALL $330($3)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($8 == 0) ){ goto $label$15 }
	CALL $330($8)
	
.LABEL $label$15
	(unreachable)
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $104($0, ($1 + [40]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)((int_32)($8 - $7) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$9 = *($0)
	$2 = ((int_32)($7 - $9) / (int_32)[40])
	$5 = ($2 + $1)
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$3 }
	$7 = [107374182]
	$8 = ((int_32)($8 - $9) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$6 }
	$7 = ($8 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$8 = CALL $329(((int_32)$7 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$2 = ($0 + [4])
	
.LOOP $label$7:
	*(($7 = (($9 = CALL memset($7, [0], [40])) + [16]))) = (int_64)1398362884
	*($9 + [8]) = (int_64)0
	CALL eosio_assert([1], [576])
	$6 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$9:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($8, [640])
	*(($9 + [32])) = [0]
	*($9 + [24 align=4]) = (int_64)0
	$7 = (*($2) + [40])
	*($2) = $7
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$8 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $352($0)
	
.LABEL $label$2
	$3 = ($8 + ((int_32)$7 * (int_32)[40]))
	$9 = ($8 + ((int_32)$2 * (int_32)[40]))
	$8 = $9
	
.LOOP $label$12:
	*(($7 = (($2 = CALL memset($8, [0], [40])) + [16]))) = (int_64)1398362884
	*($2 + [8]) = (int_64)0
	CALL eosio_assert([1], [576])
	$6 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$14:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	
.LOOP $label$16:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	CALL eosio_assert($8, [640])
	*(($2 + [32])) = [0]
	*($2 + [24 align=4]) = (int_64)0
	$8 = ($2 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$12 }
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$18 }
	$4 = ([0] - $7)
	$7 = ($2 + [-40])
	
.LOOP $label$19:
	*(($9 + [-40])) = *($7)
	*(($9 + [-24])) = *(($7 + [16]))
	*(($9 + [-32])) = *(($7 + [8]))
	*(($2 = ($9 + [-16]))) = (int_64)0
	*(($1 = ($9 + [-8]))) = [0]
	$5 = ($7 + [24])
	*($2) = *($5)
	*(($9 + [-12])) = *(($7 + [28]))
	$2 = ($7 + [32])
	*($1) = *($2)
	*($2) = [0]
	*($5) = (int_64)0
	$9 = ($9 + [-40])
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $4) != (int_32)[-40]) ){ goto $label$19 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$17 
	
.LABEL $label$18
	$2 = $7
	
.LABEL $label$17
	*($0) = $9
	*(($0 + [4])) = $8
	*(($0 + [8])) = $3
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$20 }
	$9 = ([0] - $2)
	$7 = ($7 + [-16])
	
.LOOP $label$21:
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$22 }
	*(($7 + [4])) = $8
	CALL $330($8)
	
.LABEL $label$22
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $9) != (int_32)[-16]) ){ goto $label$21 }
	
.LABEL $label$20
	if ( ($2 == 0) ){ goto $label$1 }
	CALL $330($2)
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($2)), [1424])
	$4 = *($3)
	$7 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$4 = *($1 + [4])
	$6 = ((int_32)($4 - $3) / (int_32)[40])
	$7 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$7 <= (uint_32)$6) ){ goto $label$3 }
	CALL $105($1, ($7 - $6))
	$4 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$2 }
	$7 = ((int_32)$7 * (int_32)[40])
	$2 = ($3 + $7)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$4 }
	$6 = (([0] - $3) - $7)
	$7 = ($4 + [-16])
	
.LOOP $label$5:
	$4 = *($7)
	if ( ($4 == 0) ){ goto $label$6 }
	*(($7 + [4])) = $4
	CALL $330($4)
	
.LABEL $label$6
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $6) != (int_32)[-16]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$4 = $2
	
.LABEL $label$2
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$7 }
	$6 = ($8 + [20])
	$3 = ($8 + [24])
	
.LOOP $label$8:
	*($8) = $0
	*($8 + [8]) = $7
	*((($8 + [8]) + [8])) = ($7 + [2])
	*($6) = ($7 + [8])
	*($3) = ($7 + [24])
	*($8 + [12]) = ($7 + [1])
	CALL $106(($8 + [8]), $8)
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [32])
	return $0
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1424])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = ($3 - $4)
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $108($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + $5)
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	$2 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((int_32)*($2) != (int_32)$7), [672])
	CALL memcpy($4, *($5), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	$4 = ($4 + [1])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [112])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [24])) = (int_64)1398362884
	*($9 + [8]) = (int_64)0
	*($9) = (int_64)0
	*($9 + [16]) = (int_64)0
	CALL eosio_assert([1], [576])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$4
	CALL eosio_assert($7, [640])
	*(($9 + [40])) = [0]
	*($9 + [32]) = (int_64)0
	*($9 + [84]) = $5
	*($9 + [80]) = $5
	*($9 + [88]) = ($5 + $3)
	*($9 + [48]) = ($9 + [80])
	*($9 + [64]) = $9
	CALL $324(($9 + [64]), ($9 + [48]))
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($5)
	
.LABEL $label$9
	$6 = *(($9 + [8]))
	*(($9 + [76])) = *(($9 + [28]))
	*(($1 = (($9 + [64]) + [8]))) = *(($9 + [24]))
	*($9 + [68]) = *(($9 + [20]))
	$4 = *($9)
	*($9 + [64]) = *($9 + [16])
	CALL $353(($9 + [48]), ($9 + [32]))
	*((($9 + [80]) + [8])) = *($1)
	*($9 + [80]) = *($9 + [64])
	*($9 + [104]) = $4
	*($9 + [96]) = $6
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$10 }
	$8 = *((*($1) + $8))
	
.LABEL $label$10
	CALL void $1((int_32 ($9 + [104])), (int_32 ($9 + [96])), (int_32 ($9 + [80])), (int_32 ($9 + [48])), (int_32 $8))
	if ( ((*($9 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL $330(*($9 + [56]))
	
.LABEL $label$11
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL $330(*(($9 + [40])))
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [112])
	return [1]
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	*([0] + [4]) = $13
	*($13 + [8]) = ($0 + [88])
	CALL $114($13, ($13 + [8]), $2)
	$0 = *($13 + [4])
	if ( ($0 == 0) ){ goto $label$2 }
	$8 = ($1 + [8])
	$9 = ($1 + [4])
	
.LOOP $label$3:
	if ( ((int_64)*($0 + [8]) != (int_64)*($2)) ){ goto $label$2 }
	if ( ((int_64)*($0 + [16]) != (int_64)*($3)) ){ goto $label$5 }
	$4 = *($9)
	if ( ((uint_32)$4 >= (uint_32)*($8)) ){ goto $label$4 }
	*($4) = *($0)
	*(($4 + [24])) = *(($0 + [24]))
	*(($4 + [16])) = *(($0 + [16]))
	*(($4 + [8])) = *(($0 + [8]))
	*($4 + [32]) = [0]
	*(($10 = ($4 + [36]))) = [0]
	*(($11 = ($4 + [40]))) = [0]
	$12 = ($0 + [36])
	$7 = (*($12) - *($0 + [32]))
	$6 = int_32($7 >> [4])
	if ( ($6 == 0) ){ goto $label$6 }
	$5 = ($4 + [32])
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL $329($7)
	*($5) = $7
	*($11) = ($7 + ($6 << [4]))
	*($10) = $7
	$11 = *(($0 + [32]))
	$6 = (*($12) - $11)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($7, $11, $6)
	*($10) = (*($10) + $6)
	
.LABEL $label$6
	*($4 + [48]) = *($0 + [48])
	*(($4 + [64])) = *(($0 + [64]))
	*(($4 + [56])) = *(($0 + [56]))
	*($9) = (*($9) + [72])
	CALL $115($13)
	$0 = *($13 + [4])
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	CALL $115($13)
	$0 = *($13 + [4])
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $116($1, $0)
	CALL $115($13)
	$0 = *($13 + [4])
	if ( $0 ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($13 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $352($5)
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $329($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $352($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $330($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $318 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [32]))), [2128])
	$5 = ((int_64)*($1 + [24]) + (int_64)*($3))
	*($1 + [24]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [2208])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1024])
	*($6 + [56]) = ($6 + [40])
	*($6 + [52]) = $6
	*($6 + [48]) = $6
	CALL $176(($6 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $6, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [64])
}

void .FUNC $319 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [16]))), [2128])
	$5 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [2208])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1024])
	*($6 + [56]) = ($6 + [40])
	*($6 + [52]) = $6
	*($6 + [48]) = $6
	CALL $176(($6 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $6, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [64])
}

void .FUNC $215 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ($5 - $4)
	$7 = ($3 + [1])
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$2 = (*($0 + [8]) - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $329($6)
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	*(($3 = ($7 + $3))) = *($1)
	$5 = ($5 - $4)
	$1 = ($3 - $5)
	$6 = ($7 + $6)
	$7 = ($3 + [1])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $330($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $214 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = *($0)
	$5 = int_32((*($0 + [4]) - $8) >> [5])
	$9 = ($5 + [1])
	if ( ((uint_32)$9 >= (uint_32)[134217728]) ){ goto $label$3 }
	$7 = [134217727]
	$8 = (*($0 + [8]) - $8)
	if ( ((uint_32)int_32($8 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$7 = int_32($8 >> [4])
	$7 = ( $9 ? $7 : ($7 <= $9) )
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ((uint_32)$7 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$8 = CALL $329(($7 << [5]))
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $352($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$2 = ($8 + ($7 << [5]))
	$9 = ($8 + ($5 << [5]))
	$8 = CALL $167($9, $1)
	$3 = ($8 + [32])
	$7 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$7 }
	$4 = ([0] - $7)
	$7 = ($1 + [-16])
	
.LOOP $label$8:
	*(($1 = ($8 + [-28]))) = (int_64)0
	*(($5 = ($8 + [-20]))) = [0]
	$6 = ($7 + [-12])
	*($1) = *($6)
	*(($8 + [-24])) = *(($7 + [-8]))
	$1 = ($7 + [-4])
	*($5) = *($1)
	*(($8 + [-32])) = *(($7 + [-16]))
	*($1) = [0]
	*(($1 = ($8 + [-16]))) = (int_64)0
	*($6) = (int_64)0
	*(($5 = ($8 + [-8]))) = [0]
	*($1) = *($7)
	*(($8 + [-12])) = *(($7 + [4]))
	$1 = ($7 + [8])
	*($5) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	*(($8 + [-4])) = *(($7 + [12]))
	$9 = ($9 + [-32])
	$8 = $9
	$7 = ($7 + [-32])
	if ( ((int_32)($7 + $4) != (int_32)[-16]) ){ goto $label$8 }
	$7 = *(($0 + [4]))
	$1 = *($0)
	goto $label$6 
	
.LABEL $label$7
	$1 = $7
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$9 }
	$9 = ([0] - $1)
	$7 = ($7 + [-28])
	
.LOOP $label$10:
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$11 }
	*(($7 + [16])) = $8
	CALL $330($8)
	
.LABEL $label$11
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$12 }
	*(($7 + [4])) = $8
	CALL $330($8)
	
.LABEL $label$12
	$7 = ($7 + [-32])
	if ( ((int_32)($7 + $9) != (int_32)[-28]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $330($1)
	
.LABEL $label$13
	(unreachable)
	(unreachable)
}

void .FUNC $217 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $329($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $336($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $331($0)
}

void .FUNC $216 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[1431655766]) ){ goto $label$2 }
	$6 = [1431655765]
	$2 = ((int_32)(*($0 + [8]) - $4) / (int_32)[3])
	if ( ((uint_32)$2 > (uint_32)[715827881]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $329(((int_32)$6 * (int_32)[3]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$3 * (int_32)[3])))) = *($1)
	*(($3 + [2])) = *(($1 + [2]))
	$1 = ($5 - $4)
	$5 = ($3 + ((int_32)((int_32)$1 / (int_32)[-3]) * (int_32)[3]))
	$6 = ($7 + ((int_32)$6 * (int_32)[3]))
	$3 = ($3 + [3])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $4, $1)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $3
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $330($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $211 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [896])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	CALL $157(*($1), *($0 + [4]))
	CALL $212(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [896])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [896])
	CALL memcpy(*($0 + [4]), $2, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $210 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$9 = *($0)
	$6 = *($0 + [8])
	$3 = int_32(($2 - $1) >> [5])
	if ( ((uint_32)$3 <= (uint_32)int_32(($6 - $9) >> [5])) ){ goto $label$6 }
	if ( ($9 == 0) ){ goto $label$3 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$5 }
	$7 = ([0] - $9)
	$6 = ($6 + [-28])
	
.LOOP $label$7:
	$8 = *(($6 + [12]))
	if ( ($8 == 0) ){ goto $label$8 }
	*(($6 + [16])) = $8
	CALL $330($8)
	
.LABEL $label$8
	$8 = *($6)
	if ( ($8 == 0) ){ goto $label$9 }
	*(($6 + [4])) = $8
	CALL $330($8)
	
.LABEL $label$9
	$6 = ($6 + [-32])
	if ( ((int_32)($6 + $7) != (int_32)[-28]) ){ goto $label$7 }
	$6 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$4 = int_32($6 >> [5])
	$6 = (*($0 + [4]) - $9)
	$10 = ($1 + $6)
	$5 = ( $10 ? $2 : ((uint_32)$3 > (uint_32)$4) )
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$10 }
	$8 = [0]
	
.LOOP $label$11:
	$6 = ($1 + $8)
	*(($7 = ($9 + $8))) = *($6)
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$12 }
	CALL $158(($7 + [4]), *(($6 + [4])), *(($6 + [8])))
	CALL $213(($7 + [16]), *(($6 + [16])), *(($6 + [20])))
	
.LABEL $label$12
	*(($7 + [28])) = *(($6 + [28]))
	$8 = ($8 + [32])
	if ( ((int_32)($6 + [32]) != (int_32)$5) ){ goto $label$11 }
	$9 = ($9 + $8)
	
.LABEL $label$10
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$13 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	$6 = ($0 + [4])
	$1 = *($6)
	
.LOOP $label$14:
	CALL $167($1, $10)
	$1 = (*($6) + [32])
	*($6) = $1
	$10 = ($10 + [32])
	if ( ((int_32)$2 != (int_32)$10) ){ goto $label$14 }
	goto $label$2 
	
.LABEL $label$13
	$7 = ($0 + [4])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$15 }
	$8 = ([0] - $9)
	$6 = ($6 + [-28])
	
.LOOP $label$16:
	$1 = *(($6 + [12]))
	if ( ($1 == 0) ){ goto $label$17 }
	*(($6 + [16])) = $1
	CALL $330($1)
	
.LABEL $label$17
	$1 = *($6)
	if ( ($1 == 0) ){ goto $label$18 }
	*(($6 + [4])) = $1
	CALL $330($1)
	
.LABEL $label$18
	$6 = ($6 + [-32])
	if ( ((int_32)($6 + $8) != (int_32)[-28]) ){ goto $label$16 }
	
.LABEL $label$15
	*($7) = $9
	return 
	
.LABEL $label$5
	$6 = $9
	
.LABEL $label$4
	*(($0 + [4])) = $9
	CALL $330($6)
	$6 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$1 }
	$8 = [134217727]
	if ( ((uint_32)int_32($6 >> [5]) > (uint_32)[67108862]) ){ goto $label$19 }
	$8 = $3
	$6 = int_32($6 >> [4])
	if ( ($6 <= $3) ){ goto $label$19 }
	$8 = $6
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$1 }
	
.LABEL $label$19
	$8 = ($8 << [5])
	$6 = CALL $329($8)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $8)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$8 = ($0 + [4])
	
.LOOP $label$20:
	CALL $167($6, $1)
	$6 = (*($8) + [32])
	*($8) = $6
	$1 = ($1 + [32])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$20 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $352($0)
}

void .FUNC $213 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = ((int_32)$3 / (int_32)[3])
	if ( ((uint_32)$4 <= (uint_32)((int_32)($8 - $5) / (int_32)[3])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $330($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[1431655766]) ){ goto $label$1 }
	$5 = [1431655765]
	$2 = ((int_32)$8 / (int_32)[3])
	if ( ((uint_32)$2 > (uint_32)[715827881]) ){ goto $label$6 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	
.LABEL $label$6
	$4 = ((int_32)$5 * (int_32)[3])
	$5 = CALL $329($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + ((int_32)((uint_32)$3 / (uint_32)[3]) * (int_32)[3]))
	return 
	
.LABEL $label$4
	$3 = ((int_32)(*($0 + [4]) - $5) / (int_32)[3])
	$6 = ( ($1 + ((int_32)$3 * (int_32)[3])) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$8 = ($6 - $1)
	$7 = ((int_32)$8 / (int_32)[3])
	if ( ($8 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $8)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $6, $1)
	*($0) = (*($0) + ((int_32)((uint_32)$1 / (uint_32)[3]) * (int_32)[3]))
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ((int_32)$7 * (int_32)[3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $352($0)
}

void .FUNC $223 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	$12 = *($3)
	if ( ((int_64)$12 < (int_64)1) ){ goto $label$1 }
	$10 = (int_64)0
	$5 = *($3 + [8])
	$12 = ((int_64)((int_64)$12 >> (int_64)63) << (int_64)2) | (int_64)(uint_64)$12 >> (uint_64)(int_64)62
	$7 = ((int_64)$12 << (int_64)2)
	CALL eosio_assert(( (uint_64)($7 <= (int_64)4611686018427387904) ? ((int_64)$12)) < (int_64)0) : (int_64)($12 == 0) ), [2272])
	CALL eosio_assert(( ((uint_64)$7 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$12 > (int_64)-1) : ((int_64)$12 == (int_64)-1) ), [2304])
	$6 = *($0)
	$9 = (int_64)59
	$3 = [1376]
	$11 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$7 }
	$8 = *($3)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$8 = ($8 + [165])
	goto $label$5 
	
.LABEL $label$7
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$3
	$3 = ($3 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$2 }
	*($13 + [72]) = $11
	*($13 + [64]) = $6
	$10 = (int_64)0
	$12 = (int_64)59
	$3 = [2416]
	$11 = (int_64)0
	
.LOOP $label$8:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$9 }
	$8 = *($3)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$8 = ($8 + [165])
	goto $label$10 
	
.LABEL $label$11
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$9
	$3 = ($3 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$8 }
	*($13 + [56]) = $11
	$10 = (int_64)0
	$9 = (int_64)59
	$3 = [2432]
	$11 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$17 }
	$8 = *($3)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$8 = ($8 + [165])
	goto $label$15 
	
.LABEL $label$17
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$13
	$3 = ($3 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$12 }
	*($13 + [48]) = $11
	*(($13 + [24])) = $5
	*($13 + [8]) = $6
	*($13 + [16]) = $7
	*($13) = *($1)
	*($13 + [32]) = *($2)
	*($13 + [40]) = *($4)
	CALL $177($0, ($13 + [64]), ($13 + [56]), ($13 + [48]), $13)
	
.LABEL $label$1
	*([0] + [4]) = ($13 + [80])
}

void .FUNC $196 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	CALL $107(*($1), *($0 + [4]))
	CALL $197(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [672])
	CALL memcpy($2, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $197 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1424])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = ((int_32)($2 - $7) / (int_32)[3])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $198($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ((int_32)$4 * (int_32)[3]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	$6 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((int_32)*($6) != (int_32)$3), [672])
	CALL memcpy($7, *($4), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	CALL eosio_assert(((int_32)*($6) != (int_32)$3), [672])
	CALL memcpy(($7 + [1]), *($4), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	CALL eosio_assert(((int_32)*($6) != (int_32)$3), [672])
	CALL memcpy(($7 + [2]), *($4), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	$7 = ($7 + [3])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $194 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$1 }
	$6 = ($0 + [8])
	
.LOOP $label$2:
	$8 = ($8 + [-24])
	*($6) = $8
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$4 }
	$8 = $3
	$7 = ($2 + [20])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$5 }
	$4 = ([0] - $3)
	$8 = ($5 + [-28])
	
.LOOP $label$6:
	$5 = *(($8 + [12]))
	if ( ($5 == 0) ){ goto $label$7 }
	*(($8 + [16])) = $5
	CALL $330($5)
	
.LABEL $label$7
	$5 = *($8)
	if ( ($5 == 0) ){ goto $label$8 }
	*(($8 + [4])) = $5
	CALL $330($5)
	
.LABEL $label$8
	$8 = ($8 + [-32])
	if ( ((int_32)($8 + $4) != (int_32)[-28]) ){ goto $label$6 }
	$8 = *(($2 + [16]))
	
.LABEL $label$5
	*($7) = $3
	CALL $330($8)
	
.LABEL $label$4
	CALL $330($2)
	
.LABEL $label$3
	$8 = *($6)
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = *($0)
	if ( ($8 == 0) ){ goto $label$9 }
	CALL $330($8)
	
.LABEL $label$9
	return $0
}

void .FUNC $195 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)int_32(($8 - $7) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$6 = int_32(($7 - $4) >> [5])
	$5 = ($6 + $1)
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$4 }
	$7 = [134217727]
	$8 = ($8 - $4)
	if ( ((uint_32)int_32($8 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$7 = int_32($8 >> [4])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$5 }
	if ( ((uint_32)$7 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$8 = CALL $329(($7 << [5]))
	goto $label$2 
	
.LABEL $label$6
	
.LOOP $label$8:
	*($7) = (int_64)0
	*(($8 = ($7 + [24]))) = (int_64)0
	*(($7 + [8])) = (int_64)0
	*(($7 + [16])) = (int_64)0
	*(($7 + [4])) = [0]
	*($8) = [0]
	$7 = (*($7) + [32])
	*(($7 = ($0 + [4]))) = $7
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$7 = [0]
	$8 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $352($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$2 = ($8 + ($7 << [5]))
	$8 = ($8 + ($6 << [5]))
	$7 = $8
	
.LOOP $label$9:
	*($7) = (int_64)0
	*(($4 = ($7 + [24]))) = (int_64)0
	*(($7 + [4])) = [0]
	*(($7 + [8])) = (int_64)0
	*(($7 + [16])) = (int_64)0
	*($4) = [0]
	$7 = ($7 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$11 }
	$3 = ([0] - $1)
	$1 = ($4 + [-16])
	
.LOOP $label$12:
	*(($4 = ($8 + [-28]))) = (int_64)0
	*(($5 = ($8 + [-20]))) = [0]
	$6 = ($1 + [-12])
	*($4) = *($6)
	*(($8 + [-24])) = *(($1 + [-8]))
	$4 = ($1 + [-4])
	*($5) = *($4)
	*(($8 + [-32])) = *(($1 + [-16]))
	*($4) = [0]
	*(($4 = ($8 + [-16]))) = (int_64)0
	*($6) = (int_64)0
	*(($5 = ($8 + [-8]))) = [0]
	*($4) = *($1)
	*(($8 + [-12])) = *(($1 + [4]))
	$4 = ($1 + [8])
	*($5) = *($4)
	*($4) = [0]
	*($1) = (int_64)0
	*(($8 + [-4])) = *(($1 + [12]))
	$8 = ($8 + [-32])
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $3) != (int_32)[-16]) ){ goto $label$12 }
	$1 = *(($0 + [4]))
	$4 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$4 = $1
	
.LABEL $label$10
	*($0) = $8
	*(($0 + [4])) = $7
	*(($0 + [8])) = $2
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$13 }
	$8 = ([0] - $4)
	$7 = ($1 + [-28])
	
.LOOP $label$14:
	$1 = *(($7 + [12]))
	if ( ($1 == 0) ){ goto $label$15 }
	*(($7 + [16])) = $1
	CALL $330($1)
	
.LABEL $label$15
	$1 = *($7)
	if ( ($1 == 0) ){ goto $label$16 }
	*(($7 + [4])) = $1
	CALL $330($1)
	
.LABEL $label$16
	$7 = ($7 + [-32])
	if ( ((int_32)($7 + $8) != (int_32)[-28]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($4 == 0) ){ goto $label$1 }
	CALL $330($4)
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $219 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [416])
	*([0] + [4]) = $18
	CALL $128(($18 + [280]), $0, $2)
	CALL eosio_assert(((int_64)*($18 + [288]) == (int_64)*($3)), [2576])
	CALL eosio_assert(((int_32)*($18 + [361]) == (int_32)[1]), [2608])
	CALL eosio_assert(((int_64)*(($18 + [336])) == (int_64)*($5 + [8])), [2640])
	CALL eosio_assert((uint_64)(((int_64)*($4) + (int_64)-1) <= (int_64)4), [2672])
	CALL eosio_assert(((int_64)*($1) != (int_64)*($18 + [296])), [2704])
	$7 = ($0 + [8])
	$11 = [0]
	$12 = [1]
	$13 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-4816283142123945984, (int_64)0)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$1 }
	$12 = [0]
	$13 = CALL $74($7, $13)
	if ( ((int_64)*($13 + [16]) == (int_64)*($1)) ){ goto $label$1 }
	
.LOOP $label$3:
	CALL eosio_assert([1], [1680])
	$13 = CALL db_next_i64(*($13 + [140]), ($18 + [40]))
	if ( ((int_32)$13 <= (int_32)[-1]) ){ goto $label$2 }
	$13 = CALL $74($7, $13)
	if ( ((int_64)*($13 + [16]) != (int_64)*($1)) ){ goto $label$3 }
	$12 = [0]
	goto $label$1 
	
.LABEL $label$2
	$12 = [1]
	
.LABEL $label$1
	CALL eosio_assert($12, [2704])
	*($18 + [279]) = [0]
	*($18 + [264]) = (int_64)1398362884
	*($18 + [256]) = (int_64)0
	CALL eosio_assert([1], [576])
	$15 = (uint_64)*($18 + [264]) >> (uint_64)(int_64)8)
	
.LOOP $label$6:
	$13 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$12 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$12 = [0]
	
.LABEL $label$4
	CALL eosio_assert($12, [640])
	*($18 + [248]) = (int_64)1398362884
	*($18 + [240]) = (int_64)0
	CALL eosio_assert([1], [576])
	$15 = (uint_64)*($18 + [248]) >> (uint_64)(int_64)8)
	
.LOOP $label$10:
	$11 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$11 = [1]
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	CALL eosio_assert($11, [640])
	CALL $220($0, ($18 + [280]), $1, $5, ($18 + [256]), ($18 + [240]))
	CALL $221($0, $1, ($18 + [280]), $4, $5, ($18 + [279]))
	$15 = *($2)
	$8 = *(($0 + [32]))
	$12 = *(($0 + [36]))
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$13 }
	$13 = ($12 + [-24])
	$9 = ([0] - $8)
	
.LOOP $label$14:
	if ( ((int_64)*(*($13)) == (int_64)$15) ){ goto $label$13 }
	$12 = $13
	$11 = ($13 + [-24])
	$13 = $11
	if ( ((int_32)($11 + $9) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$17 }
	$13 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [136]) == (int_32)$7), [720])
	if ( *($18 + [279]) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	$13 = [0]
	$11 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4816283142123945984, $15)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$18 }
	$13 = CALL $74($7, $11)
	CALL eosio_assert(((int_32)*($13 + [136]) == (int_32)$7), [720])
	
.LABEL $label$18
	if ( *($18 + [279]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL eosio_assert((uint_64)(*($18 + [344]) <= (int_64)40), [2736])
	
.LABEL $label$15
	$15 = *(($13 + [56]))
	*((($18 + [224]) + [8])) = $15
	*($18 + [224]) = *($13 + [48])
	CALL eosio_assert(((int_64)$15 == (int_64)*(($5 + [8]))), [2128])
	$15 = ((int_64)*($18 + [224]) + (int_64)*($5))
	*($18 + [224]) = $15
	CALL eosio_assert(((int_64)$15 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)$15 < (int_64)4611686018427387904), [2208])
	$15 = *($0)
	*($18 + [40]) = $5
	*($18 + [48]) = $0
	*($18 + [52]) = $2
	*($18 + [56]) = $3
	$12 = [0]
	*($18 + [44]) = ($18 + [279])
	*($18 + [60]) = ($18 + [224])
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [784])
	CALL $222($7, $13, $15, ($18 + [40]))
	if ( (CALL $173($0) == 0) ){ goto $label$19 }
	$10 = *(($18 + [352]))
	$15 = (int_64)0
	$14 = (int_64)59
	$13 = [512]
	$16 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$15 > (uint_64)(int_64)10) ){ goto $label$25 }
	$11 = *($13)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$11 = ($11 + [165])
	goto $label$23 
	
.LABEL $label$25
	$17 = (int_64)0
	if ( ((int_64)$15 == (int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$21
	$13 = ($13 + [1])
	$14 = ((int_64)$14 + (int_64)-5)
	$16 = ((int_64)$17 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)1)
	if ( ((int_64)$15 != (int_64)13) ){ goto $label$20 }
	if ( ((int_64)$10 != (int_64)$16) ){ goto $label$19 }
	$15 = *($6)
	*($18 + [40]) = $15
	if ( (int_64)($15 == 0) ){ goto $label$27 }
	if ( ((int_64)$15 == (int_64)*($0)) ){ goto $label$27 }
	if ( ((int_64)$15 != (int_64)*($1)) ){ goto $label$26 }
	
.LABEL $label$27
	$15 = (int_64)0
	$17 = (int_64)59
	$13 = [2416]
	$16 = (int_64)0
	
.LOOP $label$28:
	$14 = (int_64)0
	if ( ((uint_64)$15 > (uint_64)(int_64)11) ){ goto $label$29 }
	$11 = *($13)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$11 = ($11 + [165])
	goto $label$30 
	
.LABEL $label$31
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$29
	$13 = ($13 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$14 | (int_64)$16)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$28 }
	*($18 + [40]) = $16
	
.LABEL $label$26
	CALL $223($0, $1, $3, $5, ($18 + [40]))
	
.LABEL $label$19
	*($18 + [200]) = (int_64)-1
	*($18 + [208]) = [0]
	$15 = *($0)
	*($18 + [184]) = $15
	$17 = *((($18 + [280]) + [72]))
	*($18 + [192]) = $17
	*(($18 + [212])) = [0]
	*((($18 + [184]) + [32])) = [0]
	$13 = CALL db_find_i64($15, $17, (int_64)-6029028902599393280, *($1))
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$32 }
	$12 = CALL $165(($18 + [184]), $13)
	CALL eosio_assert(((int_32)*($12 + [40]) == (int_32)($18 + [184])), [720])
	
.LABEL $label$32
	*($18 + [40]) = *($1)
	*($18 + [48]) = *($2)
	*($18 + [56]) = *($3)
	*($18 + [64]) = *($4)
	*(($18 + [80])) = *(($5 + [8]))
	*($18 + [72]) = *($5)
	*(($18 + [96])) = *((($18 + [224]) + [8]))
	*($18 + [88]) = *($18 + [224])
	*((($18 + [40]) + [72])) = *((($18 + [256]) + [8]))
	*($18 + [104]) = *($18 + [256])
	*(($18 + [128])) = *((($18 + [240]) + [8]))
	*($18 + [120]) = *($18 + [240])
	*(($18 + [144])) = *(($12 + [16]))
	*($18 + [136]) = *($12 + [8])
	*(($18 + [160])) = *(($12 + [32]))
	*($18 + [152]) = *($12 + [24])
	*($18 + [168]) = *($6)
	*($18 + [176]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$10 = *($0)
	$15 = (int_64)0
	$14 = (int_64)59
	$13 = [1376]
	$16 = (int_64)0
	
.LOOP $label$33:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$38 }
	$11 = *($13)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$11 = ($11 + [165])
	goto $label$36 
	
.LABEL $label$38
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$37
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$35
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$34
	$13 = ($13 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$33 }
	*($18 + [32]) = $16
	*($18 + [24]) = $10
	$15 = (int_64)0
	$17 = (int_64)59
	$13 = [1392]
	$16 = (int_64)0
	
.LOOP $label$39:
	$14 = (int_64)0
	if ( ((uint_64)$15 > (uint_64)(int_64)11) ){ goto $label$40 }
	$11 = *($13)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$11 = ($11 + [165])
	goto $label$41 
	
.LABEL $label$42
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$40
	$13 = ($13 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$14 | (int_64)$16)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$39 }
	*($18 + [16]) = $16
	$15 = (int_64)0
	$14 = (int_64)59
	$13 = [2784]
	$16 = (int_64)0
	
.LOOP $label$43:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$48 }
	$11 = *($13)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$47 }
	$11 = ($11 + [165])
	goto $label$46 
	
.LABEL $label$48
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$47
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$46
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$45
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$44
	$13 = ($13 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$43 }
	*($18 + [8]) = $16
	CALL $224($0, ($18 + [24]), ($18 + [16]), ($18 + [8]), ($18 + [40]))
	$0 = *($18 + [208])
	if ( ($0 == 0) ){ goto $label$49 }
	$12 = ($18 + [212])
	$13 = *($12)
	if ( ((int_32)$13 == (int_32)$0) ){ goto $label$51 }
	
.LOOP $label$52:
	$13 = ($13 + [-24])
	$11 = *($13)
	*($13) = [0]
	if ( ($11 == 0) ){ goto $label$53 }
	CALL $330($11)
	
.LABEL $label$53
	if ( ((int_32)$0 != (int_32)$13) ){ goto $label$52 }
	$13 = *(($18 + [208]))
	goto $label$50 
	
.LABEL $label$51
	$13 = $0
	
.LABEL $label$50
	*($12) = $0
	CALL $330($13)
	
.LABEL $label$49
	if ( ((*($18 + [384]) & [1]) == 0) ){ goto $label$54 }
	CALL $330(*(($18 + [392])))
	
.LABEL $label$54
	if ( ((*($18 + [364]) & [1]) == 0) ){ goto $label$55 }
	CALL $330(*(($18 + [372])))
	
.LABEL $label$55
	*([0] + [4]) = ($18 + [416])
}

void .FUNC $218 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [32])
	*([0] + [4]) = $18
	$13 = *($1)
	if ( ($13 & [1]) ){ goto $label$2 }
	$13 = uint_32($13 >> [1])
	$12 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$13 = *($1 + [4])
	$12 = *($1 + [8])
	
.LABEL $label$1
	$11 = ($12 + $13)
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$4 }
	
.LOOP $label$5:
	if ( CALL isspace(*($12)) ){ goto $label$4 }
	$12 = ($12 + [1])
	if ( ((int_32)$11 != (int_32)$12) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$6 }
	$13 = $12
	
.LOOP $label$7:
	$13 = ($13 + [1])
	if ( ((int_32)$13 == (int_32)$11) ){ goto $label$6 }
	if ( CALL isspace(*($13)) ){ goto $label$7 }
	*($12) = *($13)
	$12 = ($12 + [1])
	goto $label$7 
	
.LABEL $label$6
	$11 = $12
	
.LABEL $label$3
	$12 = *($1)
	if ( ($12 & [1]) ){ goto $label$9 }
	$13 = ($1 + [1])
	$12 = ($13 + uint_32($12 >> [1]))
	goto $label$8 
	
.LABEL $label$9
	$13 = *($1 + [8])
	$12 = ($13 + *($1 + [4]))
	
.LABEL $label$8
	CALL $340($1, ($11 - $13), ($12 - $11))
	$13 = *($1)
	if ( ($13 & [1]) ){ goto $label$11 }
	$11 = uint_32($13 >> [1])
	$13 = ($1 + [1])
	goto $label$10 
	
.LABEL $label$11
	$11 = *($1 + [4])
	$13 = *($1 + [8])
	
.LABEL $label$10
	$12 = [0]
	$11 = ($13 + $11)
	if ( ((int_32)$13 == (int_32)$11) ){ goto $label$12 }
	$12 = [0]
	
.LOOP $label$13:
	$12 = (((int_32)*($13) == (int_32)[45]) + $12)
	$13 = ($13 + [1])
	if ( ((int_32)$11 != (int_32)$13) ){ goto $label$13 }
	$12 = ((int_32)$12 == (int_32)[4])
	
.LABEL $label$12
	CALL eosio_assert($12, [2976])
	*($18 + [24]) = [0]
	*($18 + [16]) = (int_64)0
	*($18 + [15]) = [45]
	*($18) = [0]
	*($18 + [14]) = [1]
	$7 = CALL _Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb($1, ($18 + [16]), ($18 + [15]), $18, ($18 + [14]))
	*($18 + [28]) = $7
	$13 = *($18 + [16])
	CALL eosio_assert(((int_32)( *($18 + [20]) ? uint_32($13 >> [1]) : ($13 & [1]) ) != (int_32)[0]), [2976])
	$8 = (($18 + [16]) | [1])
	$13 = ( *($18 + [24]) ? $8 : (*($18 + [16]) & [1]) )
	$12 = [-1]
	
.LOOP $label$14:
	$11 = ($13 + $12)
	$9 = ($12 + [1])
	$12 = $9
	if ( *(($11 + [1])) ){ goto $label$14 }
	$10 = (CASTING uint_64)(uint_32 $9)
	$15 = (int_64)0
	$14 = (int_64)59
	$16 = (int_64)0
	
.LOOP $label$15:
	$17 = (int_64)0
	if ( ((uint_64)$15 >= (uint_64)$10) ){ goto $label$16 }
	$12 = *($13)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$12 = ($12 + [165])
	goto $label$17 
	
.LABEL $label$18
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	if ( ((uint_64)$15 > (uint_64)(int_64)11) ){ goto $label$20 }
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	goto $label$19 
	
.LABEL $label$20
	$17 = ((int_64)$17 & (int_64)15)
	
.LABEL $label$19
	$13 = ($13 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$15 }
	*($2) = $16
	*($18) = [45]
	*($18 + [28]) = ($7 + [1])
	*($18 + [15]) = [1]
	$13 = CALL _Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb($1, ($18 + [16]), $18, ($18 + [28]), ($18 + [15]))
	$12 = *($18 + [16])
	CALL eosio_assert(((int_32)( *($18 + [20]) ? uint_32($12 >> [1]) : ($12 & [1]) ) != (int_32)[0]), [2976])
	*($3) = (CASTING int_64)(int_32 CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(($18 + [16]), [0], [10]))
	*($18) = [45]
	*($18 + [28]) = ($13 + [1])
	*($18 + [15]) = [1]
	$13 = CALL _Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb($1, ($18 + [16]), $18, ($18 + [28]), ($18 + [15]))
	$12 = *($18 + [16])
	CALL eosio_assert(((int_32)( *($18 + [20]) ? uint_32($12 >> [1]) : ($12 & [1]) ) != (int_32)[0]), [2976])
	*($4) = (CASTING int_64)(int_32 CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(($18 + [16]), [0], [10]))
	*($18) = [45]
	*($18 + [28]) = ($13 + [1])
	*($18 + [15]) = [1]
	$13 = CALL _Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb($1, ($18 + [16]), $18, ($18 + [28]), ($18 + [15]))
	$12 = *($18 + [16])
	CALL eosio_assert(((int_32)( *($18 + [20]) ? uint_32($12 >> [1]) : ($12 & [1]) ) != (int_32)[0]), [2976])
	*($5) = (CASTING int_64)(int_32 CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(($18 + [16]), [0], [10]))
	$13 = ($13 + [1])
	*($18 + [28]) = $13
	CALL $354($18, $1, $13, [-1], $1)
	if ( (*($18 + [16]) & [1]) ){ goto $label$22 }
	*($18 + [16]) = [0]
	goto $label$21 
	
.LABEL $label$22
	*(*(($18 + [24]))) = [0]
	*($18 + [20]) = [0]
	
.LABEL $label$21
	CALL $334(($18 + [16]), [0])
	*(($11 = (($18 + [16]) + [8]))) = *(($18 + [8]))
	*($18 + [16]) = *($18)
	$13 = *($18 + [4])
	*($18 + [20]) = $13
	$12 = ($12 & [1])
	$12 = *($18 + [16])
	if ( (( $13 ? uint_32($12 >> [1]) : $12 ) == 0) ){ goto $label$24 }
	$13 = ( *($11) ? $8 : $12 )
	$12 = [-1]
	
.LOOP $label$25:
	$11 = ($13 + $12)
	$9 = ($12 + [1])
	$12 = $9
	if ( *(($11 + [1])) ){ goto $label$25 }
	$10 = (CASTING uint_64)(uint_32 $9)
	$15 = (int_64)0
	$14 = (int_64)59
	$16 = (int_64)0
	
.LOOP $label$26:
	$17 = (int_64)0
	if ( ((uint_64)$15 >= (uint_64)$10) ){ goto $label$27 }
	$12 = *($13)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$12 = ($12 + [165])
	goto $label$28 
	
.LABEL $label$29
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	if ( ((uint_64)$15 > (uint_64)(int_64)11) ){ goto $label$31 }
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	goto $label$30 
	
.LABEL $label$31
	$17 = ((int_64)$17 & (int_64)15)
	
.LABEL $label$30
	$13 = ($13 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$26 }
	if ( CALL is_account($16) ){ goto $label$23 }
	
.LABEL $label$24
	$16 = *($0)
	
.LABEL $label$23
	*($6) = $16
	if ( ((*($18 + [16]) & [1]) == 0) ){ goto $label$32 }
	CALL $330(*(($18 + [24])))
	
.LABEL $label$32
	*([0] + [4]) = ($18 + [32])
}

int_32 .FUNC $190 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $94($0, ($1 + [56]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $191 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $329(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$11 }
	CALL $330(*(($1 + [64])))
	
.LABEL $label$11
	CALL $330($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $330($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

void .FUNC $373 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $371([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $371($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $371($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

int_32 .FUNC $371 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [13712]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $373(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [14192]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [14224]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [14230] ? [14225] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [14194] ? [14192] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [14227]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $356()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [14192]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [14192]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [14176])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [14192])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [14208] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [14192]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [14288] ? [14304] : $30 ) ? ( [14256] ? [14272] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [14192]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [14193]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [14192] ? [14197] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [14176])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [14176])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [14176])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([14320], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([14320], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([14320], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $373(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $373(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $373(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $373(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $373(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $373(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $373(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $373(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $373(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [14336])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [14432]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [14432]
	return .LABEL $label$1
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

void .FUNC $174 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	$12 = *($3)
	if ( ((int_64)$12 < (int_64)1) ){ goto $label$1 }
	$10 = (int_64)0
	$5 = *($3 + [8])
	$12 = ((int_64)((int_64)$12 >> (int_64)63) << (int_64)1) | (int_64)(uint_64)$12 >> (uint_64)(int_64)63
	$7 = ((int_64)$12 << (int_64)1)
	CALL eosio_assert(( (uint_64)($7 <= (int_64)4611686018427387904) ? ((int_64)$12)) < (int_64)0) : (int_64)($12 == 0) ), [2272])
	CALL eosio_assert(( ((uint_64)$7 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$12 > (int_64)-1) : ((int_64)$12 == (int_64)-1) ), [2304])
	$6 = *($0)
	$9 = (int_64)59
	$3 = [1376]
	$11 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$7 }
	$8 = *($3)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$8 = ($8 + [165])
	goto $label$5 
	
.LABEL $label$7
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$3
	$3 = ($3 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$2 }
	*($13 + [72]) = $11
	*($13 + [64]) = $6
	$10 = (int_64)0
	$12 = (int_64)59
	$3 = [2416]
	$11 = (int_64)0
	
.LOOP $label$8:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$9 }
	$8 = *($3)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$8 = ($8 + [165])
	goto $label$10 
	
.LABEL $label$11
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$9
	$3 = ($3 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$8 }
	*($13 + [56]) = $11
	$10 = (int_64)0
	$9 = (int_64)59
	$3 = [2432]
	$11 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$17 }
	$8 = *($3)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$8 = ($8 + [165])
	goto $label$15 
	
.LABEL $label$17
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$13
	$3 = ($3 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$12 }
	*($13 + [48]) = $11
	*(($13 + [24])) = $5
	*($13 + [8]) = $6
	*($13 + [16]) = $7
	*($13) = *($1)
	*($13 + [32]) = *($2)
	*($13 + [40]) = *($4)
	CALL $177($0, ($13 + [64]), ($13 + [56]), ($13 + [48]), $13)
	
.LABEL $label$1
	*([0] + [4]) = ($13 + [80])
}

void .FUNC $175 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	$3 = *($3)
	*($1 + [24]) = *($3)
	*(($1 + [36])) = *(($3 + [12]))
	*(($1 + [32])) = *(($3 + [8]))
	*(($1 + [28])) = *(($3 + [4]))
	$4 = *($1)
	CALL eosio_assert([1], [1024])
	*($5 + [56]) = ($5 + [40])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $176(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $5, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $177 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [28])) = [0]
	*(($6 + [32])) = [0]
	*($6 + [12]) = [0]
	*($6 + [16]) = [0]
	*($6 + [20]) = [0]
	*($6 + [24]) = [0]
	*($6) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [36]) = [0]
	*(($6 + [40])) = [0]
	*(($6 + [44])) = [0]
	*($6 + [48]) = [0]
	*(($6 + [52])) = [0]
	*(($6 + [56])) = [0]
	CALL $178(($6 + [36]), $1, $2, $3, $4)
	CALL $61(($6 + [80]), $0)
	*($6 + [88]) = ((int_64)*($6 + [88]) + (int_64)1)
	CALL $62(($0 + [208]), ($6 + [80]), *($0))
	$5 = *($6 + [88])
	*($6 + [88]) = (int_64)0
	*($6 + [80]) = $5
	$5 = *($0)
	CALL $78(($6 + [64]), $6)
	$0 = *($6 + [64])
	CALL send_deferred(($6 + [80]), $5, $0, (*($6 + [68]) - $0), [0])
	$0 = *($6 + [64])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [68]) = $0
	CALL $330($0)
	
.LABEL $label$1
	CALL $79($6)
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $170 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	$4 = *($1)
	$5 = *($3)
	$8 = *($5)
	$6 = *($5 + [8])
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$6), [1232])
	$8 = (int_64)
	CALL eosio_assert(((int_64)$8($8 - *($7))) > (int_64)-4611686018427387904), [1280])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [1312])
	CALL eosio_assert(((int_64)$6 == (int_64)*(($1 + [16]))), [2128])
	$8 = ((int_64)*($1 + [8]) + (int_64)$8)
	*($1 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [2208])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [32]))), [1232])
	$8 = (int_64)
	*($1 + [24]) = $8(*($1 + [24]) - *($3)))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1280])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [1312])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1024])
	*($9 + [56]) = ($9 + [40])
	*($9 + [52]) = $9
	*($9 + [48]) = $9
	CALL $176(($9 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $9, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [64])
}

void .FUNC $171 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [80])
	*([0] + [4]) = $10
	*(($9 = $10) + [64]) = $2
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	*($9 + [48]) = *($1 + [8])
	*($9 + [56]) = *($1 + [24])
	$8 = *($1)
	*($9 + [40]) = $8
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [56]))), [1232])
	$7 = (int_64)
	*($1 + [48]) = $7(*($1 + [48]) - *($3)))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [1280])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [1312])
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [1024])
	$4 = *($1 + [32])
	$5 = *(($1 + [36]))
	$6 = ($5 - $4)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	$3 = [32]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$3 = (($6 & [-16]) + $3)
	
.LABEL $label$2
	$5 = ($3 + [24])
	if ( ($5 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($10 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($9 + [28]) = $3
	*($9 + [24]) = $3
	*($9 + [32]) = ($3 + $5)
	CALL $112(($9 + [24]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $3, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($3)
	$8 = *($9 + [40])
	
.LABEL $label$5
	$3 = ($0 + [36])
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($9 + [4]) = $1
	*($9) = $0
	*($9 + [12]) = $1
	*($9 + [8]) = ($9 + [48])
	*($9 + [16]) = ($9 + [40])
	*($9 + [20]) = ($9 + [64])
	*($9 + [72]) = $9
	CALL $183(($9 + [72]), $3, ($3 + [1]))
	*([0] + [4]) = ($9 + [80])
}

void .FUNC $172 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	$5 = *($3)
	*($1 + [16]) = *($5)
	*(($1 + [28])) = *(($5 + [12]))
	*(($1 + [24])) = *(($5 + [8]))
	*(($1 + [20])) = *(($5 + [4]))
	*($6 + [72]) = *($1 + [8])
	$4 = *($1)
	$5 = *($3 + [4])
	*($1 + [32]) = *($5)
	*(($1 + [40])) = *(($5 + [8]))
	*($1 + [48]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1024])
	*($6 + [64]) = ($6 + [56])
	*($6 + [60]) = $6
	*($6 + [56]) = $6
	CALL $70(($6 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $6, [56])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [88]) = *(($1 + [8]))
	if ( (CALL memcmp(($6 + [72]), ($6 + [88]), [8]) == 0) ){ goto $label$2 }
	$5 = ($1 + [64])
	$1 = *($5)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4816273130130128896, ($6 + [80]), $4)
	*($5) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($6 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [96])
}

int_32 .FUNC $173 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [2416]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($3)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [2416]
	$8 = (int_64)0
	
.LOOP $label$5:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$6 }
	$1 = *($3)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$1 = ($1 + [165])
	goto $label$7 
	
.LABEL $label$8
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$6
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$7 | (int_64)$8)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$5 }
	$9 = [0]
	*(($10 + [40])) = [0]
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	*($10 + [16]) = $8
	*($10 + [8]) = $6
	$3 = CALL db_find_i64($6, $8, (int_64)7035937633859534848, *($0))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*(CALL $180(($10 + [8]), $3) + [32]) == (int_32)($10 + [8])), [720])
	$9 = [1]
	$0 = *($10 + [32])
	if ( ($0 == 0) ){ goto $label$9 }
	$2 = ($10 + [36])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$11 }
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$1 = *($3)
	*($3) = [0]
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $330($1)
	
.LABEL $label$13
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$12 }
	$3 = *(($10 + [32]))
	goto $label$10 
	
.LABEL $label$11
	$3 = $0
	
.LABEL $label$10
	*($2) = $0
	CALL $330($3)
	
.LABEL $label$9
	*([0] + [4]) = ($10 + [48])
	return $9
}

void .FUNC $178 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $329(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $329([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $81(($8 + [28]), [48])
	$2 = *($2)
	$1 = *($8 + [28])
	*($9 + [4]) = $1
	*($9) = $1
	*($9 + [8]) = $2
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	CALL $179(($9 + [24]), ($9 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $330($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $330($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $330($6)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [32])
	(unreachable)
}

void .FUNC $179 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

void .FUNC $237 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [80])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)4461681267712196608, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [80]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [24])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [84]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)4461681267712196609, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [84])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1424])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $81($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [672])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $235 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [76]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2080])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4461681267712196608)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [2016])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2016])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $117(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC __ofl_lock ()
{
	CALL __lock([12504])
	return [12512]
}

int_32 .FUNC $97 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$7 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [1680])
	$8 = *($0 + [4])
	$6 = *($8 + [60])
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$1 }
	$6 = *(*($0))
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-4455901582336561152, ($9 + [8]), *($8))
	*(*(($0 + [4])) + [60]) = $6
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($6, ($9 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$3 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$4:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$3 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [52]) == (int_32)$2), [720])
	goto $label$5 
	
.LABEL $label$6
	$7 = CALL $101($2, CALL $fimport$17(*($2), *($2 + [8]), (int_64)-4455901582336561152, $3))
	CALL eosio_assert(((int_32)*($7 + [52]) == (int_32)$2), [720])
	
.LABEL $label$5
	*($7 + [60]) = $1
	
.LABEL $label$2
	*(($0 + [4])) = $7
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [896])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [896])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [896])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [896])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [896])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $232 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [832])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = [0]
	*(($4 = CALL $329([88])) + [40]) = [0]
	*($4 + [32 align=4]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$2 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [640])
	*($4 + [72]) = $1
	CALL $233(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [76])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $119(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	$4 = *($3 + [32])
	if ( ($4 == 0) ){ goto $label$9 }
	*(($3 + [36])) = $4
	CALL $330($4)
	
.LABEL $label$9
	CALL $330($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $231 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [1680])
	$6 = *($0 + [4])
	$7 = *(($6 + [84]))
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)4461681267712196609, ($9 + [8]), *($6))
	*((*(($0 + [4])) + [84])) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$2), [720])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $117($2, CALL $fimport$17(*($2), *($2 + [8]), (int_64)4461681267712196608, $3))
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$2), [720])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [84])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $329(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [104]) & [1]) == 0) ){ goto $label$11 }
	CALL $330(*(($1 + [112])))
	
.LABEL $label$11
	if ( ((*($1 + [84]) & [1]) == 0) ){ goto $label$12 }
	CALL $330(*(($1 + [92])))
	
.LABEL $label$12
	CALL $330($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $330($6)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [832])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $329([56])
	CALL $66($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	*($7 + [16]) = (int_64)7235159550150574080
	$4 = *($3 + [44])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = (int_64)7235159550150574080
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $67(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $330($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [896])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [896])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [672])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1088])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $329([72])
	$4 = CALL $71($6)
	*($6 + [56]) = $0
	CALL $72(($8 + [32]), $4)
	*($6 + [64]) = [-1]
	*($6 + [60]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [60])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $73(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $330($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $271 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [832])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $329([56])) + [40]) = $1
	CALL $275(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [44])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $265(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $330($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $270 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	$4 = *($1)
	$5 = *($3)
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*(($1 + [16]))), [1232])
	$6 = (int_64)
	*($1 + [8]) = $6(*($1 + [8]) - *($5)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1280])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1312])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [32]))), [2128])
	$6 = ((int_64)*($1 + [24]) + (int_64)*($3))
	*($1 + [24]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [2208])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1024])
	*($7 + [56]) = ($7 + [40])
	*($7 + [52]) = $7
	*($7 + [48]) = $7
	CALL $176(($7 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $7, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [64])
}

int_32 .FUNC $277 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $276 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [44]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2080])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4154295086852603904)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [2016])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2016])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $263(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $275 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	$11 = $12
	*([0] + [4]) = $12
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$8 = ($4 + [144])
	$7 = *($8)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = ($4 + [128])
	$6 = CALL db_lowerbound_i64(*($5), *(($4 + [136])), (int_64)4154295086852603904, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $263($5, $6)
	*($11 + [12]) = [0]
	*($11 + [8]) = $5
	$7 = *(*(CALL $276(($11 + [8])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [144])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [1952])
	*($1) = *($8)
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	*($1 + [24]) = *(*($3 + [4]) + [72])
	*($1 + [32]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$12 = $12
	$3 = ($12 + [-48])
	*([0] + [4]) = $3
	*($11 + [12]) = $3
	*($11 + [8]) = $3
	*($11 + [16]) = ($12 + [-8])
	CALL $277(($11 + [8]), $1)
	$7 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)4154295086852603904, *(*($0 + [8])), $7, $3, [40])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$2 = ($2 + [8])
	$7 = *($2)
	$0 = *(($0 + [8]))
	$9 = *($0)
	$10 = *($1)
	*($11 + [24]) = *(($1 + [8]))
	*($1 + [48]) = CALL db_idx64_store($7, (int_64)4154295086852603904, $9, $10, ($11 + [24]))
	$7 = *($0)
	$9 = *($2)
	$10 = *($1)
	*($11 + [24]) = *(($1 + [16]))
	*(($1 + [52])) = CALL db_idx64_store($9, (int_64)4154295086852603905, $7, $10, ($11 + [24]))
	*([0] + [4]) = ($11 + [32])
}

void .FUNC $274 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [896])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [896])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC _ZN6niuniu9playerlogERKyS1_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	CALL require_auth(*($0))
	*($11 + [40]) = [0]
	*($11 + [32]) = (int_64)0
	CALL $109($0, ($11 + [32]), $1, $2)
	$3 = *($11 + [36])
	$6 = *($11 + [32])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	$5 = ($11 + [24])
	
.LOOP $label$2:
	$4 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$1 = [1376]
	$9 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$8 }
	$2 = *($1)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$2 = ($2 + [165])
	goto $label$6 
	
.LABEL $label$8
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$4
	$1 = ($1 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$3 }
	*($5) = $9
	*($11 + [16]) = $4
	$8 = (int_64)0
	$10 = (int_64)59
	$1 = [1392]
	$9 = (int_64)0
	
.LOOP $label$9:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$10 }
	$2 = *($1)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$2 = ($2 + [165])
	goto $label$11 
	
.LABEL $label$12
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$10
	$1 = ($1 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$9 }
	*($11 + [8]) = $9
	$8 = (int_64)0
	$7 = (int_64)59
	$1 = [1712]
	$9 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$8 > (uint_64)(int_64)8) ){ goto $label$18 }
	$2 = *($1)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$2 = ($2 + [165])
	goto $label$16 
	
.LABEL $label$18
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$14
	$1 = ($1 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$13 }
	*($11) = $9
	CALL $110($0, ($11 + [16]), ($11 + [8]), $11, $6)
	$6 = ($6 + [72])
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$2 }
	$6 = *($11 + [32])
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$19 }
	$1 = *($11 + [36])
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$21 }
	$0 = ([0] - $6)
	$1 = ($1 + [-40])
	
.LOOP $label$22:
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$23 }
	*(($1 + [4])) = $2
	CALL $330($2)
	
.LABEL $label$23
	$1 = ($1 + [-72])
	if ( ((int_32)($1 + $0) != (int_32)[-40]) ){ goto $label$22 }
	$1 = *($11 + [32])
	goto $label$20 
	
.LABEL $label$21
	$1 = $6
	
.LABEL $label$20
	*($11 + [36]) = $6
	CALL $330($1)
	
.LABEL $label$19
	*([0] + [4]) = ($11 + [48])
}

void .FUNC _ZN6niuniu10scoreboardERKyS1_S1_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [64])
	*([0] + [4]) = $14
	CALL require_auth(*($0))
	*($14 + [56]) = ($0 + [48])
	CALL $96(($14 + [48]), ($14 + [56]), $1)
	$6 = *($14 + [52])
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = [0]
	
.LOOP $label$3:
	$8 = *($2)
	$11 = *($6 + [16])
	$9 = (uint_64)($11 <= $8)
	if ( ((uint_32)$7 > (uint_32)[49]) ){ goto $label$2 }
	if ( ((int_64)*($6 + [8]) != (int_64)*($1)) ){ goto $label$2 }
	if ( ((uint_64)$11 >= (uint_64)$8) ){ goto $label$5 }
	$11 = *($14 + [48])
	*($14) = $11
	$6 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [1440])
	CALL $97($14)
	CALL $98(*($14 + [56]), $6)
	$11 = *($14)
	*($14 + [48]) = $11
	$7 = ($7 + [1])
	$6 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32)
	if ( $6) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	CALL $97(($14 + [48]))
	$6 = *($14 + [52])
	if ( $6 ){ goto $label$3 }
	
.LABEL $label$4
	$8 = *($2)
	$9 = (uint_64)(*([0] + [16]) <= $8)
	
.LABEL $label$2
	$4 = *($3)
	if ( ((uint_64)$4 > (uint_64)(int_64)2) ){ goto $label$1 }
	if ( ((int_32)$9 ^ (int_32)[1]) ){ goto $label$1 }
	$5 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$6 = [1376]
	$12 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$11 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [165])
	goto $label$9 
	
.LABEL $label$11
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$7
	$6 = ($6 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$6 }
	*($14 + [40]) = $12
	*($14 + [32]) = $5
	$11 = (int_64)0
	$10 = (int_64)59
	$6 = [1488]
	$12 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$11 > (uint_64)(int_64)9) ){ goto $label$17 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$7 = ($7 + [165])
	goto $label$15 
	
.LABEL $label$17
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$13
	$6 = ($6 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$12 }
	*($14 + [24]) = $12
	*($14 + [8]) = $8
	*($14 + [16]) = ((int_64)$4 + (int_64)1)
	*($14) = *($1)
	CALL $99($0, ($14 + [32]), $0, ($14 + [24]), $14)
	
.LABEL $label$1
	*([0] + [4]) = ($14 + [64])
}

void .FUNC $279 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	$5 = *((*(*($3 + [4]) + [4]) + [16]))
	$4 = *($1)
	CALL eosio_assert([1], [576])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [640])
	*(($1 + [16])) = $5
	*($1 + [8]) = (int_64)0
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1024])
	$7 = $9
	$3 = ($7 + [-48])
	*([0] + [4]) = $3
	*($8 + [4]) = $3
	*($8) = $3
	*($8 + [8]) = ($7 + [-8])
	CALL $176($8, $1)
	CALL db_update_i64(*($1 + [44]), $2, $3, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC _ZN6niuniu8withdrawERKyS1_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [144])
	*([0] + [4]) = $15
	CALL require_auth(*($1))
	$12 = *($2)
	$9 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$1 }
	$10 = ($8 + [-24])
	$3 = ([0] - $9)
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$12) ){ goto $label$1 }
	$8 = $10
	$6 = ($10 + [-24])
	$10 = $6
	if ( ((int_32)($6 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$10 = ($0 + [8])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$4 }
	$9 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [136]) == (int_32)$10), [720])
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4816283142123945984, $12)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $74($10, $6)
	CALL eosio_assert(((int_32)*($9 + [136]) == (int_32)$10), [720])
	
.LABEL $label$3
	$12 = *($2)
	$4 = *(($0 + [392]))
	$8 = *(($0 + [396]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	$10 = ($8 + [-24])
	$3 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($10)) == (int_64)$12) ){ goto $label$5 }
	$8 = $10
	$6 = ($10 + [-24])
	$10 = $6
	if ( ((int_32)($6 + $3) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [368])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$8 }
	$10 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)$6), [720])
	goto $label$7 
	
.LABEL $label$8
	$10 = [0]
	$8 = CALL db_find_i64(*(($0 + [368])), *(($0 + [376])), (int_64)-4816273130130128896, $12)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$10 = CALL $59($6, $8)
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)$6), [720])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [1136])
	$3 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($3, [1136])
	$8 = ($10 + [8])
	CALL eosio_assert(((int_64)*($8) == (int_64)*($1)), [1168])
	CALL eosio_assert(((int_64)*($10 + [16]) > (int_64)0), [1200])
	$7 = ($10 + [24])
	*(($4 = (($15 + [104]) + [8]))) = *($7)
	*($15 + [104]) = *($10 + [16])
	$14 = *($0)
	CALL eosio_assert($3, [784])
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)$6), [912])
	CALL eosio_assert(((int_64)*(($0 + [368])) == (int_64)CALL $fimport$14()), [960])
	*($15 + [120]) = *($8)
	$12 = *($10)
	CALL eosio_assert(((int_64)*($4) == (int_64)*($7)), [1232])
	$11 = (int_64)
	*($10 + [16]) = $11(*($10 + [16]) - *($15 + [104])))
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [1280])
	CALL eosio_assert(((int_64)*($10 + [16]) < (int_64)4611686018427387904), [1312])
	CALL eosio_assert(((int_64)$12 == (int_64)*($10)), [1024])
	*($15 + [8]) = (($15 + [16]) + [56])
	*($15 + [4]) = ($15 + [16])
	*($15) = ($15 + [16])
	CALL $70($15, $10)
	CALL db_update_i64(*($10 + [60]), $14, ($15 + [16]), [56])
	$6 = ($0 + [384])
	if ( (uint_64)($12 <= *($6)) ){ goto $label$9 }
	*($6) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($15 + [136]) = *($8)
	if ( (CALL memcmp(($15 + [120]), ($15 + [136]), [8]) == 0) ){ goto $label$10 }
	$8 = ($10 + [64])
	$6 = *($8)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$11 }
	$6 = CALL db_idx64_find_primary(*(($0 + [368])), *(($0 + [376])), (int_64)-4816273130130128896, ($15 + [128]), $12)
	*($8) = $6
	
.LABEL $label$11
	CALL db_idx64_update($6, $14, ($15 + [136]))
	
.LABEL $label$10
	*(($15 + [96])) = [0]
	*($15 + [88]) = (int_64)0
	$6 = CALL strlen([1344])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$12 }
	$3 = ($9 + [72])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$15 }
	*($15 + [88]) = ($6 << [1])
	$8 = (($15 + [88]) | [1])
	if ( $6 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$9 = (($6 + [16]) & [-16])
	$8 = CALL $329($9)
	*($15 + [88]) = ($9 | [1])
	*($15 + [96]) = $8
	*($15 + [92]) = $6
	
.LABEL $label$14
	CALL memcpy($8, [1344], $6)
	
.LABEL $label$13
	*(($8 + $6)) = [0]
	CALL $75($0, $1, ($15 + [104]), $3, ($15 + [88]))
	if ( ((*($15 + [88]) & [1]) == 0) ){ goto $label$16 }
	CALL $330(*($15 + [96]))
	
.LABEL $label$16
	*(($15 + [36])) = *($15 + [108])
	*($15 + [24]) = *($1)
	*(($15 + [44])) = *(($15 + [116]))
	$6 = ($15 + [112])
	*(($15 + [40])) = *($6)
	*($15 + [16]) = *($2)
	*($15 + [32]) = *($15 + [104])
	*((($15 + [16]) + [40])) = *(($10 + [40]))
	*($15 + [48]) = *($10 + [32])
	*(($15 + [72])) = *($6)
	*($15 + [64]) = *($15 + [104])
	*($15 + [80]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$5 = *($0)
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [1376]
	$13 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$22 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$6 = ($6 + [165])
	goto $label$20 
	
.LABEL $label$22
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$18
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$17 }
	*($15 + [8]) = $13
	*($15) = $5
	$12 = (int_64)0
	$14 = (int_64)59
	$10 = [1392]
	$13 = (int_64)0
	
.LOOP $label$23:
	$11 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$24 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$6 = ($6 + [165])
	goto $label$25 
	
.LABEL $label$26
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$24
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$23 }
	*($15 + [136]) = $13
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [1408]
	$13 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$32 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$6 = ($6 + [165])
	goto $label$30 
	
.LABEL $label$32
	$14 = (int_64)0
	if ( ((int_64)$12 == (int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$28
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$27 }
	*($15 + [128]) = $13
	CALL $76($0, $15, ($15 + [136]), ($15 + [128]), ($15 + [16]))
	*([0] + [4]) = ($15 + [144])
	return (unreachable)
	
.LABEL $label$12
	CALL $331(($15 + [88]))
}

void .FUNC _ZN6niuniu7settingERKyS1_RKN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [688]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($8)
	CALL eosio_assert((uint_64)(((int_64)*($1) + (int_64)-1) <= (int_64)3), [704])
	if ( ((int_64)*($1) != (int_64)3) ){ goto $label$10 }
	$7 = *($2)
	$3 = *(($0 + [392]))
	$1 = *(($0 + [396]))
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$11 }
	$5 = ($1 + [-24])
	$2 = ([0] - $3)
	
.LOOP $label$12:
	if ( ((int_64)*(*($5)) == (int_64)$7) ){ goto $label$11 }
	$1 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $2) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	$4 = ($0 + [368])
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$9 }
	$5 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [56]) == (int_32)$4), [720])
	goto $label$8 
	
.LABEL $label$10
	CALL $61(($10 + [8]), $0)
	$7 = *($1)
	if ( ((int_64)$7 == (int_64)2) ){ goto $label$7 }
	if ( ((int_64)$7 != (int_64)1) ){ goto $label$6 }
	*($10 + [24]) = *($2)
	goto $label$6 
	
.LABEL $label$9
	$5 = [0]
	$1 = CALL db_find_i64(*(($0 + [368])), *(($0 + [376])), (int_64)-4816273130130128896, $7)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$8 }
	$5 = CALL $59($4, $1)
	CALL eosio_assert(((int_32)*($5 + [56]) == (int_32)$4), [720])
	
.LABEL $label$8
	$7 = *($0)
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [784])
	CALL $60($4, $5, $7)
	goto $label$5 
	
.LABEL $label$7
	*(($10 + [40])) = *(($3 + [8]))
	*($10 + [32]) = *($3)
	
.LABEL $label$6
	CALL $62(($0 + [208]), ($10 + [8]), *($0))
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [80])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [24])) = (int_64)1398362884
	*($9 + [8]) = (int_64)0
	*($9) = (int_64)0
	*($9 + [16]) = (int_64)0
	CALL eosio_assert([1], [576])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [640])
	*($9 + [52]) = $5
	*($9 + [48]) = $5
	*($9 + [56]) = ($5 + $3)
	*($9 + [72]) = ($9 + [48])
	*($9 + [32]) = $9
	CALL $58(($9 + [32]), ($9 + [72]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	$6 = *(($9 + [8]))
	*(($9 + [44])) = *(($9 + [28]))
	*(($1 = (($9 + [32]) + [8]))) = *(($9 + [24]))
	$4 = *($9)
	*($9 + [32]) = *($9 + [16])
	*($9 + [36]) = *(($9 + [20]))
	*((($9 + [48]) + [8])) = *($1)
	*($9 + [48]) = *($9 + [32])
	*($9 + [72]) = $4
	*($9 + [64]) = $6
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	CALL void $1((int_32 ($9 + [72])), (int_32 ($9 + [64])), (int_32 ($9 + [48])), (int_32 $8))
	*([0] + [4]) = ($9 + [80])
	return [1]
}

int_32 .FUNC $56 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = *(($0 + [392]))
	if ( ($4 == 0) ){ goto $label$1 }
	$8 = ($0 + [396])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $330($5)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$4 }
	$9 = *(($0 + [392]))
	goto $label$2 
	
.LABEL $label$3
	$9 = $4
	
.LABEL $label$2
	*($8) = $4
	CALL $330($9)
	
.LABEL $label$1
	$4 = *(($0 + [352]))
	if ( ($4 == 0) ){ goto $label$6 }
	$8 = ($0 + [356])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	CALL $330($5)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$9 }
	$9 = *(($0 + [352]))
	goto $label$7 
	
.LABEL $label$8
	$9 = $4
	
.LABEL $label$7
	*($8) = $4
	CALL $330($9)
	
.LABEL $label$6
	CALL $57(($0 + [312]))
	$4 = *(($0 + [272]))
	if ( ($4 == 0) ){ goto $label$11 }
	$8 = ($0 + [276])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$13 }
	
.LOOP $label$14:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	CALL $330($5)
	
.LABEL $label$15
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$14 }
	$9 = *(($0 + [272]))
	goto $label$12 
	
.LABEL $label$13
	$9 = $4
	
.LABEL $label$12
	*($8) = $4
	CALL $330($9)
	
.LABEL $label$11
	$4 = *(($0 + [232]))
	if ( ($4 == 0) ){ goto $label$16 }
	$8 = ($0 + [236])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$18 }
	
.LOOP $label$19:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$20 }
	CALL $330($5)
	
.LABEL $label$20
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$19 }
	$9 = *(($0 + [232]))
	goto $label$17 
	
.LABEL $label$18
	$9 = $4
	
.LABEL $label$17
	*($8) = $4
	CALL $330($9)
	
.LABEL $label$16
	$4 = *(($0 + [192]))
	if ( ($4 == 0) ){ goto $label$21 }
	$8 = ($0 + [196])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$23 }
	
.LOOP $label$24:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$25 }
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$26 }
	CALL $330(*(($5 + [64])))
	
.LABEL $label$26
	CALL $330($5)
	
.LABEL $label$25
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$24 }
	$9 = *(($0 + [192]))
	goto $label$22 
	
.LABEL $label$23
	$9 = $4
	
.LABEL $label$22
	*($8) = $4
	CALL $330($9)
	
.LABEL $label$21
	$4 = *(($0 + [152]))
	if ( ($4 == 0) ){ goto $label$27 }
	$8 = ($0 + [156])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$29 }
	
.LOOP $label$30:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$31 }
	CALL $330($5)
	
.LABEL $label$31
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$30 }
	$9 = *(($0 + [152]))
	goto $label$28 
	
.LABEL $label$29
	$9 = $4
	
.LABEL $label$28
	*($8) = $4
	CALL $330($9)
	
.LABEL $label$27
	$8 = *(($0 + [112]))
	if ( ($8 == 0) ){ goto $label$32 }
	$2 = ($0 + [116])
	$9 = *($2)
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$34 }
	
.LOOP $label$35:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$36 }
	$4 = *($5 + [32])
	if ( ($4 == 0) ){ goto $label$37 }
	*(($5 + [36])) = $4
	CALL $330($4)
	
.LABEL $label$37
	CALL $330($5)
	
.LABEL $label$36
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$35 }
	$9 = *(($0 + [112]))
	goto $label$33 
	
.LABEL $label$34
	$9 = $8
	
.LABEL $label$33
	*($2) = $8
	CALL $330($9)
	
.LABEL $label$32
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$38 }
	$6 = ($0 + [76])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$40 }
	
.LOOP $label$41:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$42 }
	$3 = *($2 + [40])
	if ( ($3 == 0) ){ goto $label$43 }
	$9 = $3
	$7 = ($2 + [44])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$44 }
	$4 = ([0] - $3)
	$9 = ($5 + [-16])
	
.LOOP $label$45:
	$5 = *($9)
	if ( ($5 == 0) ){ goto $label$46 }
	*(($9 + [4])) = $5
	CALL $330($5)
	
.LABEL $label$46
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $4) != (int_32)[-16]) ){ goto $label$45 }
	$9 = *(($2 + [40]))
	
.LABEL $label$44
	*($7) = $3
	CALL $330($9)
	
.LABEL $label$43
	CALL $330($2)
	
.LABEL $label$42
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$41 }
	$9 = *(($0 + [72]))
	goto $label$39 
	
.LABEL $label$40
	$9 = $1
	
.LABEL $label$39
	*($6) = $1
	CALL $330($9)
	
.LABEL $label$38
	$4 = *(($0 + [32]))
	if ( ($4 == 0) ){ goto $label$47 }
	$8 = ($0 + [36])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$49 }
	
.LOOP $label$50:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$51 }
	if ( ((*($9 + [104]) & [1]) == 0) ){ goto $label$52 }
	CALL $330(*(($9 + [112])))
	
.LABEL $label$52
	if ( ((*($9 + [84]) & [1]) == 0) ){ goto $label$53 }
	CALL $330(*(($9 + [92])))
	
.LABEL $label$53
	CALL $330($9)
	
.LABEL $label$51
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$50 }
	$9 = *(($0 + [32]))
	goto $label$48 
	
.LABEL $label$49
	$9 = $4
	
.LABEL $label$48
	*($8) = $4
	CALL $330($9)
	
.LABEL $label$47
	return $0
}

int_32 .FUNC $57 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$6 }
	$8 = $3
	$6 = ($2 + [20])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$4 = ([0] - $3)
	$8 = ($5 + [-28])
	
.LOOP $label$8:
	$5 = *(($8 + [12]))
	if ( ($5 == 0) ){ goto $label$9 }
	*(($8 + [16])) = $5
	CALL $330($5)
	
.LABEL $label$9
	$5 = *($8)
	if ( ($5 == 0) ){ goto $label$10 }
	*(($8 + [4])) = $5
	CALL $330($5)
	
.LABEL $label$10
	$8 = ($8 + [-32])
	if ( ((int_32)($8 + $4) != (int_32)[-28]) ){ goto $label$8 }
	$8 = *(($2 + [16]))
	
.LABEL $label$7
	*($6) = $3
	CALL $330($8)
	
.LABEL $label$6
	CALL $330($2)
	
.LABEL $label$5
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	$8 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$8 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $330($8)
	
.LABEL $label$1
	return $0
}

void .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	*(($7 = *($1))) = (*($7) + [8])
	*(($7 = *($1))) = (*($7) + [8])
	$7 = *($4)
	$4 = *($0 + [8])
	$8 = (CASTING uint_64)(uint_32 ( *($4 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ))
	$5 = *($1)
	$7 = *($5)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($5) = $7
	$4 = *($4)
	$4 = ( *(($4 + [4])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$2 }
	*($5) = ($4 + $7)
	
.LABEL $label$2
	$7 = *($4)
	$4 = *($0 + [12])
	$8 = (CASTING uint_64)(uint_32 ( *($4 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ))
	$5 = *($1)
	$7 = *($5)
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($5) = $7
	$4 = *($4)
	$4 = ( *(($4 + [4])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$4 }
	*($5) = ($4 + $7)
	
.LABEL $label$4
	$7 = *($4)
	$4 = *($0 + [16])
	$8 = (CASTING uint_64)(uint_32 ( *($4 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ))
	$5 = *($1)
	$7 = *($5)
	
.LOOP $label$5:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	*($5) = $7
	$4 = *($4)
	$4 = ( *(($4 + [4])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$6 }
	*($5) = ($4 + $7)
	
.LABEL $label$6
	$7 = *($4)
	$4 = *($0 + [20])
	$8 = (CASTING uint_64)(uint_32 ( *($4 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ))
	$5 = *($1)
	$7 = *($5)
	
.LOOP $label$7:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$7 }
	*($5) = $7
	$4 = *($4)
	$4 = ( *(($4 + [4])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$8 }
	*($5) = ($4 + $7)
	
.LABEL $label$8
	*(($7 = *($1))) = (*($7) + [56])
	$0 = *($7)
	$7 = *($0 + [28])
	$3 = *($7 + [4])
	$8 = (CASTING uint_64)(uint_32 ((int_32)($3 - $0) / (int_32)[40]))
	$2 = *($1)
	$7 = *($2)
	
.LOOP $label$9:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($2) = $7
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$10 }
	
.LOOP $label$11:
	$7 = ($7 + [19])
	$5 = *($0 + [24])
	$4 = *($0 + [28])
	$6 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$12:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	$7 = ( $7 ? ($6 + $7) : ((int_32)$5 == (int_32)$4) )
	$0 = ($0 + [40])
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$11 }
	*($2) = $7
	
.LABEL $label$10
	*(($7 = *($1))) = (*($7) + [8])
}

void .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $90(*($1), *($0 + [8]))
	CALL $90(*($1), *($0 + [12]))
	CALL $90(*($1), *($0 + [16]))
	CALL $90(*($1), *($0 + [20]))
	$2 = *($0 + [24])
	*($4 + [8]) = *($1)
	*($4 + [20]) = ($2 + [8])
	*($4 + [16]) = $2
	*($4 + [24]) = ($2 + [24])
	*($4 + [28]) = ($2 + [40])
	CALL $154(($4 + [16]), ($4 + [8]))
	CALL $155(*($1), *($0 + [28]))
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $150 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $329(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $329([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	CALL $151(($8 + [28]), $4)
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $330($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $330($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $330($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [64])
	*([0] + [4]) = $12
	$11 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($12 + [16]) = [0]
	*($12) = ($12 + [16])
	$2 = ($1 + [8])
	*($12 + [28]) = $2
	*($12 + [24]) = $1
	$3 = ($1 + [16])
	*($12 + [32]) = $3
	$4 = ($1 + [28])
	*($12 + [36]) = $4
	$5 = ($1 + [40])
	*($12 + [40]) = $5
	$6 = ($1 + [52])
	*($12 + [44]) = $6
	$7 = ($1 + [64])
	*($12 + [48]) = $7
	$8 = ($1 + [120])
	*($12 + [52]) = $8
	$9 = ($1 + [136])
	*($12 + [56]) = $9
	CALL $152(($12 + [24]), $12)
	$10 = *($12 + [16])
	if ( ($10 == 0) ){ goto $label$2 }
	CALL $81($0, $10)
	$11 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($12 + [4]) = $0
	*($12) = $0
	*($12 + [8]) = $11
	*($12 + [16]) = $12
	*($12 + [28]) = $2
	*($12 + [24]) = $1
	*($12 + [32]) = $3
	*($12 + [36]) = $4
	*($12 + [40]) = $5
	*($12 + [44]) = $6
	*($12 + [48]) = $7
	*($12 + [52]) = $8
	*($12 + [56]) = $9
	CALL $153(($12 + [24]), ($12 + [16]))
	*([0] + [4]) = ($12 + [64])
}

void .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [896])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [896])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [896])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $157(*($1), *($0 + [16]))
}

int_32 .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [896])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [8])
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [896])
	CALL memcpy(*($2), $5, [1])
	$7 = (*($2) + [1])
	*($2) = $7
	$5 = ($5 + [1])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $0, [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((int_32)(*($2 + [8]) - $1) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($0 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$5 = *($0 + [4])
	$4 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [8]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $5) > (int_32)[0]), [896])
	CALL memcpy(*($7), ($8 + [8]), [1])
	$5 = (*($7) + [1])
	*($7) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$2 = ($8 + [20])
	$3 = ($8 + [24])
	
.LOOP $label$3:
	*($8) = $0
	*($8 + [8]) = $7
	*((($8 + [8]) + [8])) = ($7 + [2])
	*($2) = ($7 + [8])
	*($3) = ($7 + [24])
	*($8 + [12]) = ($7 + [1])
	CALL $156(($8 + [8]), $8)
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
	return $0
}

void .FUNC $158 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$7 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($7 - $4)) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$5 }
	*($0 + [4]) = $4
	CALL $330($4)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$6 }
	$4 = ($7 << [1])
	$2 = ( $3 ? $4 : ($4 <= $3) )
	
.LABEL $label$6
	$4 = CALL $329($2)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $2)
	CALL memcpy($4, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$7 = (*($0 + [4]) - $4)
	$5 = ( ($1 + $7) ? $2 : ((uint_32)$3 > (uint_32)$7) )
	$6 = ($5 - $1)
	if ( ($6 == 0) ){ goto $label$7 }
	CALL memmove($4, $1, $6)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$8 }
	$0 = ($2 - $5)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $5, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($4 + $6)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $352($0)
}

int_32 .FUNC $159 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [56]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2080])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-4455901582336561152)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [2016])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2016])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $101(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $402 ()
{
	(unreachable)
}

void .FUNC $273 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $329(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $329([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $81(($8 + [28]), [98])
	$2 = *($2)
	$1 = *($8 + [28])
	*($9 + [4]) = $1
	*($9) = $1
	*($9 + [8]) = $2
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	*($9 + [28]) = ($4 + [8])
	*($9 + [32]) = ($4 + [16])
	*($9 + [36]) = ($4 + [17])
	*($9 + [40]) = ($4 + [24])
	*($9 + [44]) = ($4 + [32])
	*($9 + [48]) = ($4 + [48])
	*($9 + [52]) = ($4 + [64])
	*($9 + [56]) = ($4 + [80])
	*($9 + [60]) = ($4 + [96])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	CALL $274(($9 + [24]), ($9 + [16]))
	$4 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$6 }
	$6 = ([0] - $4)
	$4 = ($2 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($4 + [-12]))
	*(($8 + [-40])) = *(($4 + [-20]))
	*(($2 = ($8 + [-24]))) = (int_64)0
	*(($1 = ($8 + [-16]))) = [0]
	$7 = ($4 + [-4])
	*($2) = *($7)
	*(($8 + [-20])) = *($4)
	$2 = ($4 + [4])
	*($1) = *($2)
	*($2) = [0]
	*(($2 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($1 = ($8 + [-4]))) = [0]
	$7 = ($4 + [8])
	*($2) = *($7)
	*(($8 + [-8])) = *(($4 + [12]))
	$2 = ($4 + [16])
	*($1) = *($2)
	*($2) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$4 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $4
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$8 = ($4 + [-24])
	
.LOOP $label$9:
	$4 = *(($8 + [12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $4
	CALL $330($4)
	
.LABEL $label$10
	$4 = *($8)
	if ( ($4 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $4
	CALL $330($4)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $2) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $330($1)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [64])
	(unreachable)
}

void .FUNC $272 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [28])) = [0]
	*(($6 + [32])) = [0]
	*($6 + [12]) = [0]
	*($6 + [16]) = [0]
	*($6 + [20]) = [0]
	*($6 + [24]) = [0]
	*($6) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [36]) = [0]
	*(($6 + [40])) = [0]
	*(($6 + [44])) = [0]
	*($6 + [48]) = [0]
	*(($6 + [52])) = [0]
	*(($6 + [56])) = [0]
	CALL $273(($6 + [36]), $1, $2, $3, $4)
	CALL $61(($6 + [80]), $0)
	*($6 + [88]) = ((int_64)*($6 + [88]) + (int_64)1)
	CALL $62(($0 + [208]), ($6 + [80]), *($0))
	$5 = *($6 + [88])
	*($6 + [88]) = (int_64)0
	*($6 + [80]) = $5
	$5 = *($0)
	CALL $78(($6 + [64]), $6)
	$0 = *($6 + [64])
	CALL send_deferred(($6 + [80]), $5, $0, (*($6 + [68]) - $0), [0])
	$0 = *($6 + [64])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [68]) = $0
	CALL $330($0)
	
.LABEL $label$1
	CALL $79($6)
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [672])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $107(*($1), *($0 + [16]))
}

int_32 .FUNC _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$3 = CALL strlen([12336])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($6) = ($3 << [1])
	$5 = ($6 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $329($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $5
	*($6 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($5, [12336], $3)
	
.LABEL $label$4
	*(($5 + $3)) = [0]
	*($6 + [12]) = [0]
	$3 = *($0 + [8])
	$5 = *($0)
	$4 = *(CALL __errno_location())
	*(CALL __errno_location()) = [0]
	$3 = ( $3 ? ($0 + [1]) : ($5 & [1]) )
	$2 = CALL strtol($3, ($6 + [12]), $2)
	$0 = CALL __errno_location()
	$5 = *($0)
	*($0) = $4
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($6 + [12])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $3)
	
.LABEL $label$7
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	CALL $330(*($6 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
	return $2
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $345($6)
	
.LABEL $label$1
	CALL $346($6)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $228 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	CALL _ZNSt3__19to_stringEy(($6 + [16]), *($2))
	$2 = CALL $337(($6 + [16]), [2800])
	*($0) = *($2)
	$5 = ($2 + [8])
	*(($0 + [8])) = *($5)
	*($2) = [0]
	*(($2 + [4])) = [0]
	*($5) = [0]
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL $330(*($6 + [24]))
	
.LABEL $label$1
	CALL _ZNSt3__19to_stringEy($6, *($3))
	$2 = CALL $337($6, [2800])
	$5 = ($2 + [8])
	*(($3 = (($6 + [16]) + [8]))) = *($5)
	*($6 + [16]) = *($2)
	*($2) = [0]
	*(($2 + [4])) = [0]
	*($5) = [0]
	$2 = *($6 + [16])
	$3 = ($2 & [1])
	CALL $336($0, ( *($3) ? (($6 + [16]) | [1]) : $3 ), ( *($6 + [20]) ? uint_32($2 >> [1]) : $3 ))
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $330(*(($6 + [24])))
	
.LABEL $label$2
	if ( ((*($6) & [1]) == 0) ){ goto $label$3 }
	CALL $330(*($6 + [8]))
	
.LABEL $label$3
	CALL _ZNSt3__19to_stringEm($6, (CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$15() / (uint_64)(int_64)1000000)))
	$2 = CALL $337($6, [2800])
	$5 = ($2 + [8])
	*(($3 = (($6 + [16]) + [8]))) = *($5)
	*($6 + [16]) = *($2)
	*($2) = [0]
	*(($2 + [4])) = [0]
	*($5) = [0]
	$2 = *($6 + [16])
	$5 = ($2 & [1])
	CALL $336($0, ( *($3) ? (($6 + [16]) | [1]) : $5 ), ( *($6 + [20]) ? uint_32($2 >> [1]) : $5 ))
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL $330(*($3))
	
.LABEL $label$4
	if ( ((*($6) & [1]) == 0) ){ goto $label$5 }
	CALL $330(*($6 + [8]))
	
.LABEL $label$5
	CALL _ZNSt3__19to_stringEx(($6 + [16]), *($4))
	$2 = *($6 + [16])
	$3 = ($2 & [1])
	CALL $336($0, ( *($6 + [24]) ? (($6 + [16]) | [1]) : $3 ), ( *($6 + [20]) ? uint_32($2 >> [1]) : $3 ))
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL $330(*(($6 + [24])))
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $229 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)4461681267712196609, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)$4), [720])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $117($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)4461681267712196608, $5))
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)$4), [720])
	
.LABEL $label$4
	*(($2 + [84])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $81($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [896])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [896])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $85(CALL $86($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $90(*($1), ($0 + [32]))
}

void .FUNC $224 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [28])) = [0]
	*(($6 + [32])) = [0]
	*($6 + [12]) = [0]
	*($6 + [16]) = [0]
	*($6 + [20]) = [0]
	*($6 + [24]) = [0]
	*($6) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [36]) = [0]
	*(($6 + [40])) = [0]
	*(($6 + [44])) = [0]
	*($6 + [48]) = [0]
	*(($6 + [52])) = [0]
	*(($6 + [56])) = [0]
	CALL $225(($6 + [36]), $1, $2, $3, $4)
	CALL $61(($6 + [80]), $0)
	*($6 + [88]) = ((int_64)*($6 + [88]) + (int_64)1)
	CALL $62(($0 + [208]), ($6 + [80]), *($0))
	$5 = *($6 + [88])
	*($6 + [88]) = (int_64)0
	*($6 + [80]) = $5
	$5 = *($0)
	CALL $78(($6 + [64]), $6)
	$0 = *($6 + [64])
	CALL send_deferred(($6 + [80]), $5, $0, (*($6 + [68]) - $0), [0])
	$0 = *($6 + [64])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [68]) = $0
	CALL $330($0)
	
.LABEL $label$1
	CALL $79($6)
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $225 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $329(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $329([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $81(($8 + [28]), [144])
	$2 = *($2)
	$1 = *($8 + [28])
	*($9 + [12]) = $1
	*($9 + [8]) = $1
	*($9 + [16]) = $2
	*($9 + [24]) = ($9 + [8])
	*($9 + [32]) = $4
	*($9 + [36]) = ($4 + [8])
	*($9 + [40]) = ($4 + [16])
	*($9 + [44]) = ($4 + [24])
	*($9 + [48]) = ($4 + [32])
	*($9 + [52]) = ($4 + [48])
	*($9 + [56]) = ($4 + [64])
	*($9 + [60]) = ($4 + [80])
	*($9 + [64]) = ($4 + [96])
	*($9 + [68]) = ($4 + [112])
	*($9 + [72]) = ($4 + [128])
	*($9 + [76]) = ($4 + [136])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	CALL $226(($9 + [32]), ($9 + [24]))
	$4 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$6 }
	$6 = ([0] - $4)
	$4 = ($2 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($4 + [-12]))
	*(($8 + [-40])) = *(($4 + [-20]))
	*(($2 = ($8 + [-24]))) = (int_64)0
	*(($1 = ($8 + [-16]))) = [0]
	$7 = ($4 + [-4])
	*($2) = *($7)
	*(($8 + [-20])) = *($4)
	$2 = ($4 + [4])
	*($1) = *($2)
	*($2) = [0]
	*(($2 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($1 = ($8 + [-4]))) = [0]
	$7 = ($4 + [8])
	*($2) = *($7)
	*(($8 + [-8])) = *(($4 + [12]))
	$2 = ($4 + [16])
	*($1) = *($2)
	*($2) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$4 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $4
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$8 = ($4 + [-24])
	
.LOOP $label$9:
	$4 = *(($8 + [12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $4
	CALL $330($4)
	
.LABEL $label$10
	$4 = *($8)
	if ( ($4 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $4
	CALL $330($4)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $2) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $330($1)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [80])
	(unreachable)
}

void .FUNC $226 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $227 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$2 = *($0 + [8])
	$3 = *($0)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [56]))), [2128])
	$4 = ((int_64)*($1 + [48]) + (int_64)*($3))
	*($1 + [48]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [2208])
	if ( *(*($0 + [4])) ){ goto $label$1 }
	*($1 + [64]) = ((int_64)*($1 + [64]) + (int_64)1)
	
.LABEL $label$1
	CALL $228($5, $2, *($0 + [12]), *($0 + [16]), *($0 + [20]))
	$0 = ($1 + [104])
	if ( (*($1 + [104]) & [1]) ){ goto $label$3 }
	*($0) = [0]
	goto $label$2 
	
.LABEL $label$3
	*(*(($1 + [112]))) = [0]
	*(($1 + [108])) = [0]
	
.LABEL $label$2
	CALL $334($0, [0])
	*(($0 + [8])) = *(($5 + [8]))
	*($0) = *($5)
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $220 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [192])
	*([0] + [4]) = $14
	CALL $164(($14 + [112]), $0, ($1 + [72]))
	$10 = *(($14 + [128]))
	CALL eosio_assert([1], [576])
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [640])
	$11 = *($14 + [152])
	$8 = *($14 + [136])
	$9 = *($14 + [120])
	$12 = ((int_32)$12 == (int_32)[3])
	$13 = ((int_32)$12 == (int_32)[2])
	$12 = *($1 + [80])
	$7 = ((int_32)$12 == (int_32)[1])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)( *(($14 + [160])) ? ( *((($14 + [112]) + [32])) ? ( *((($14 + [112]) + [16])) ? $10 : $7 ) : $13 ) : $12 )), [2816])
	CALL eosio_assert(((int_64)*($3) >= (int_64)( $11 ? ( $8 ? ( $9 ? (int_64)0 : $7 ) : $13 ) : $12 )), [2880])
	CALL $238(($14 + [96]), $0, ($14 + [112]), ($1 + [80]))
	*($14 + [72]) = (int_64)-1
	*($14 + [80]) = [0]
	$11 = *($0)
	*($14 + [56]) = $11
	$10 = *(($1 + [72]))
	*($14 + [64]) = $10
	*(($12 = (($14 + [56]) + [28]))) = [0]
	*((($14 + [56]) + [32])) = [0]
	$13 = [0]
	$7 = CALL db_find_i64($11, $10, (int_64)-6029028902599393280, *($2))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$13 = CALL $165(($14 + [56]), $7)
	CALL eosio_assert(((int_32)*($13 + [40]) == (int_32)($14 + [56])), [720])
	
.LABEL $label$6
	$6 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($6, [2912])
	$7 = ($13 + [16])
	*(($4 + [8])) = *($7)
	*($4) = *($13 + [8])
	*(($5 + [12])) = *(($13 + [36]))
	*(($5 + [8])) = *(($13 + [32]))
	*(($5 + [4])) = *(($13 + [28]))
	*($5) = *($13 + [24])
	$11 = *($3)
	CALL __multi3(($14 + [16]), $11, (int_64)$11 >> (int_64)63), (int_64)10, (int_64)0)
	*(($5 = (($14 + [40]) + [8]))) = *(($3 + [8]))
	*($14 + [40]) = $11
	$10 = *((($14 + [16]) + [8]))
	$11 = *($14 + [16])
	CALL eosio_assert(( (uint_64)($11 <= (int_64)4611686018427387904) ? ((int_64)$10 < (int_64)0) : (int_64)($10 == 0) ), [2272])
	CALL eosio_assert(( ((uint_64)$11 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$10 > (int_64)-1) : ((int_64)$10 == (int_64)-1) ), [2304])
	*($14 + [40]) = $11
	CALL eosio_assert(((int_64)*($7) == (int_64)*($5)), [2816])
	CALL eosio_assert(((int_64)*($13 + [8]) >= (int_64)$11), [2912])
	$11 = *($1 + [16])
	$2 = *(($14 + [80]))
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$7 }
	$12 = ($5 + [-24])
	$4 = ([0] - $2)
	
.LOOP $label$8:
	if ( ((int_64)*(*($12)) == (int_64)$11) ){ goto $label$7 }
	$5 = $12
	$7 = ($12 + [-24])
	$12 = $7
	if ( ((int_32)($7 + $4) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$10 }
	$12 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [40]) == (int_32)($14 + [56])), [720])
	goto $label$9 
	
.LABEL $label$10
	$12 = [0]
	$7 = CALL db_find_i64(*($14 + [56]), *(($14 + [64])), (int_64)-6029028902599393280, $11)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	$12 = CALL $165(($14 + [56]), $7)
	CALL eosio_assert(((int_32)*($12 + [40]) == (int_32)($14 + [56])), [720])
	
.LABEL $label$9
	$11 = *($1 + [48])
	$8 = *(($1 + [56]))
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)$8), [2128])
	$11 = ((int_64)$11 + (int_64)*($3))
	CALL __multi3($14, $11, (int_64)$11 >> (int_64)63), (int_64)10, (int_64)0)
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [2208])
	$11 = *(($14 + [8]))
	$10 = *($14)
	CALL eosio_assert(( (uint_64)($10 <= (int_64)4611686018427387904) ? ((int_64)$11 < (int_64)0) : (int_64)($11 == 0) ), [2272])
	CALL eosio_assert(( ((uint_64)$10 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$11 > (int_64)-1) : ((int_64)$11 == (int_64)-1) ), [2304])
	CALL eosio_assert(((int_64)$8 == (int_64)*(($12 + [32]))), [2816])
	CALL eosio_assert(((int_64)*($12 + [24]) >= (int_64)$10), [2944])
	$11 = *($0)
	*($14 + [32]) = ($14 + [40])
	CALL eosio_assert($6, [784])
	CALL $239(($14 + [56]), $13, $11, ($14 + [32]))
	$5 = *($14 + [80])
	if ( ($5 == 0) ){ goto $label$11 }
	$13 = ($14 + [84])
	$12 = *($13)
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$12 = ($12 + [-24])
	$7 = *($12)
	*($12) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	CALL $330($7)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$12) ){ goto $label$14 }
	$12 = *(($14 + [80]))
	goto $label$12 
	
.LABEL $label$13
	$12 = $5
	
.LABEL $label$12
	*($13) = $5
	CALL $330($12)
	
.LABEL $label$11
	if ( ((*($14 + [168]) & [1]) == 0) ){ goto $label$16 }
	CALL $330(*(($14 + [176])))
	
.LABEL $label$16
	*([0] + [4]) = ($14 + [192])
}

void .FUNC $221 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [80])
	*([0] + [4]) = $10
	$6 = ($0 + [88])
	*($10 + [72]) = $6
	CALL $229(($10 + [64]), ($10 + [72]), $1)
	$8 = *($10 + [68])
	if ( ($8 == 0) ){ goto $label$1 }
	$7 = ($2 + [8])
	
.LOOP $label$2:
	if ( ((int_64)*($8 + [24]) != (int_64)*($1)) ){ goto $label$1 }
	if ( ((int_64)*($8 + [8]) != (int_64)*($2)) ){ goto $label$4 }
	if ( ((int_64)*($8 + [16]) == (int_64)*($7)) ){ goto $label$3 }
	
.LABEL $label$4
	CALL $231(($10 + [64]))
	$8 = *($10 + [68])
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($5) = [1]
	$9 = *($0)
	$8 = *($10 + [68])
	*($10 + [12]) = $4
	*($10 + [8]) = $3
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [784])
	CALL $230(*($10 + [72]), $8, $9, ($10 + [8]))
	
.LABEL $label$1
	if ( *($5) ){ goto $label$5 }
	*($10 + [48]) = (int_64)0
	$9 = *(($2 + [56]))
	*($10 + [56]) = $9
	CALL eosio_assert([1], [576])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$7 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [640])
	*($10 + [40]) = [0]
	*($10 + [32]) = (int_64)0
	CALL $166(($10 + [32]), ($10 + [48]))
	$7 = *($10 + [40])
	$8 = *($10 + [36])
	if ( ((uint_32)$8 >= (uint_32)$7) ){ goto $label$16 }
	*($8) = *($10 + [48])
	*(($8 + [8])) = *((($10 + [48]) + [8]))
	$8 = ($8 + [16])
	*($10 + [36]) = $8
	if ( ($8 <= $7) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $166(($10 + [32]), ($10 + [48]))
	$7 = *(($10 + [40]))
	$8 = *($10 + [36])
	if ( ((uint_32)$8 >= (uint_32)$7) ){ goto $label$14 }
	
.LABEL $label$15
	*($8) = *($10 + [48])
	*(($8 + [8])) = *((($10 + [48]) + [8]))
	$8 = ($8 + [16])
	*($10 + [36]) = $8
	if ( ((uint_32)$8 >= (uint_32)$7) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	CALL $166(($10 + [32]), ($10 + [48]))
	$8 = *($10 + [36])
	if ( ((uint_32)$8 >= (uint_32)*(($10 + [40]))) ){ goto $label$12 }
	
.LABEL $label$13
	*($8) = *($10 + [48])
	*(($8 + [8])) = *((($10 + [48]) + [8]))
	*($10 + [36]) = ($8 + [16])
	goto $label$11 
	
.LABEL $label$12
	CALL $166(($10 + [32]), ($10 + [48]))
	
.LABEL $label$11
	*(($7 = (($8 = *($10 + [32])) + ((CASTING uint_32)(uint_64 ((int_64)*($3) + (int_64)4294967295)) << [4])))) = *($4)
	*(($7 + [12])) = *(($4 + [12]))
	*(($7 + [8])) = *(($4 + [8]))
	if ( *($5) ){ goto $label$17 }
	$9 = *($0)
	*($10 + [12]) = $2
	*($10 + [8]) = $0
	*($10 + [16]) = $1
	*($10 + [20]) = ($10 + [32])
	*($10 + [24]) = ($10 + [48])
	CALL $232($10, $6, $9, ($10 + [8]))
	$8 = *($10 + [32])
	
.LABEL $label$17
	if ( ($8 == 0) ){ goto $label$5 }
	*($10 + [36]) = $8
	CALL $330($8)
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [80])
}

void .FUNC $222 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	*(($8 = $7) + [24]) = *($1 + [16])
	$4 = *($1)
	CALL $227($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1024])
	$3 = *($1 + [84])
	$5 = ( *(($1 + [88])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [99])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *($1 + [104])
	$5 = ( *(($1 + [108])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = ($5 + $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($8 + [12]) = $7
	*($8 + [8]) = $7
	*($8 + [16]) = ($7 + $3)
	CALL $146(($8 + [8]), $1)
	CALL db_update_i64(*($1 + [140]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($8 + [40]) = *(($1 + [16]))
	if ( (CALL memcmp(($8 + [24]), ($8 + [40]), [8]) == 0) ){ goto $label$7 }
	$1 = ($1 + [144])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4816283142123945984, ($8 + [32]), $4)
	*($1) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($8 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [48])
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [16416])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [16400]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [16432]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [48])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	$7 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	CALL read_action_data($7, $1)
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	*($9) = (int_64)0
	*($9 + [16]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [672])
	CALL memcpy($9, $7, [8])
	$3 = ($1 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [672])
	$4 = ($9 + [8])
	CALL memcpy($4, ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [672])
	$3 = ($9 + [16])
	CALL memcpy($3, ($7 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	$5 = *($3)
	$6 = *($4)
	*($9 + [40]) = *($9)
	*($9 + [32]) = $6
	*($9 + [24]) = $5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$8 = *((*($1) + $8))
	
.LABEL $label$6
	CALL void $1((int_32 ($9 + [40])), (int_32 ($9 + [32])), (int_32 ($9 + [24])), (int_32 $8))
	*([0] + [4]) = ($9 + [48])
	return [1]
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $329(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $330($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $330($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $71 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [16]) = (int_64)0
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [640])
	*(($2 = ($0 + [40]))) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [576])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [640])
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [28])) = [0]
	*(($6 + [32])) = [0]
	*($6 + [12]) = [0]
	*($6 + [16]) = [0]
	*($6 + [20]) = [0]
	*($6 + [24]) = [0]
	*($6) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [36]) = [0]
	*(($6 + [40])) = [0]
	*(($6 + [44])) = [0]
	*($6 + [48]) = [0]
	*(($6 + [52])) = [0]
	*(($6 + [56])) = [0]
	CALL $77(($6 + [36]), $1, $2, $3, $4)
	CALL $61(($6 + [80]), $0)
	*($6 + [88]) = ((int_64)*($6 + [88]) + (int_64)1)
	CALL $62(($0 + [208]), ($6 + [80]), *($0))
	$5 = *($6 + [88])
	*($6 + [88]) = (int_64)0
	*($6 + [80]) = $5
	$5 = *($0)
	CALL $78(($6 + [64]), $6)
	$0 = *($6 + [64])
	CALL send_deferred(($6 + [80]), $5, $0, (*($6 + [68]) - $0), [0])
	$0 = *($6 + [64])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [68]) = $0
	CALL $330($0)
	
.LABEL $label$1
	CALL $79($6)
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $329(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $329([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $81(($8 + [28]), [72])
	$2 = *($2)
	$1 = *($8 + [28])
	*($9 + [4]) = $1
	*($9) = $1
	*($9 + [8]) = $2
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	*($9 + [28]) = ($4 + [8])
	*($9 + [32]) = ($4 + [16])
	*($9 + [36]) = ($4 + [32])
	*($9 + [40]) = ($4 + [48])
	*($9 + [44]) = ($4 + [64])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	CALL $87(($9 + [24]), ($9 + [16]))
	$4 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$6 }
	$6 = ([0] - $4)
	$4 = ($2 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($4 + [-12]))
	*(($8 + [-40])) = *(($4 + [-20]))
	*(($2 = ($8 + [-24]))) = (int_64)0
	*(($1 = ($8 + [-16]))) = [0]
	$7 = ($4 + [-4])
	*($2) = *($7)
	*(($8 + [-20])) = *($4)
	$2 = ($4 + [4])
	*($1) = *($2)
	*($2) = [0]
	*(($2 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($1 = ($8 + [-4]))) = [0]
	$7 = ($4 + [8])
	*($2) = *($7)
	*(($8 + [-8])) = *(($4 + [12]))
	$2 = ($4 + [16])
	*($1) = *($2)
	*($2) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$4 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $4
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$8 = ($4 + [-24])
	
.LOOP $label$9:
	$4 = *(($8 + [12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $4
	CALL $330($4)
	
.LABEL $label$10
	$4 = *($8)
	if ( ($4 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $4
	CALL $330($4)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $2) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $330($1)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [48])
	(unreachable)
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1088])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $329([152])
	$4 = CALL $91($6)
	*($6 + [136]) = $0
	CALL $92(($8 + [32]), $4)
	*($6 + [144]) = [-1]
	*($6 + [140]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [140])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $93(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$10 }
	CALL $330(*(($4 + [112])))
	
.LABEL $label$10
	if ( ((*($4 + [84]) & [1]) == 0) ){ goto $label$11 }
	CALL $330(*(($4 + [92])))
	
.LABEL $label$11
	CALL $330($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [128])
	*([0] + [4]) = $13
	$5 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$0 = [1376]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$6 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$6 = ($6 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	$7 = *($3)
	$9 = (int_64)0
	$8 = (int_64)59
	$0 = [528]
	$12 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$12 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$6 = ($6 + [165])
	goto $label$10 
	
.LABEL $label$12
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$0 = ($0 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$12 = ((int_64)$11 | (int_64)$12)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$7 }
	*((($13 + [8]) + [28])) = *(($2 + [12]))
	*((($13 + [8]) + [24])) = *(($2 + [8]))
	*((($13 + [8]) + [20])) = *(($2 + [4]))
	*($13 + [8]) = $5
	*($13 + [16]) = *($1)
	*($13 + [24]) = *($2)
	CALL $353((($13 + [8]) + [32]), $4)
	*($13 + [64]) = $12
	*($13 + [56]) = $7
	*(($0 = CALL $329([16]))) = $5
	*($0 + [8]) = $10
	*((($13 + [56]) + [32])) = [0]
	$6 = ($0 + [16])
	*((($13 + [56]) + [24])) = $6
	*((($13 + [56]) + [20])) = $6
	*($13 + [72]) = $0
	*($13 + [84]) = [0]
	*((($13 + [56]) + [36])) = [0]
	$0 = *($13 + [40])
	$6 = ( *((($13 + [8]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($6 + [32])
	$9 = (CASTING uint_64)(uint_32 $6)
	$6 = (($13 + [56]) + [28])
	
.LOOP $label$13:
	$0 = ($0 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$13 }
	if ( ($0 == 0) ){ goto $label$15 }
	CALL $81($6, $0)
	$6 = *(($13 + [88]))
	$0 = *(($13 + [84]))
	goto $label$14 
	
.LABEL $label$15
	$6 = [0]
	$0 = [0]
	
.LABEL $label$14
	*($13 + [116]) = $0
	*($13 + [112]) = $0
	*($13 + [120]) = $6
	*($13 + [96]) = ($13 + [112])
	*($13 + [104]) = ($13 + [8])
	CALL $88(($13 + [104]), ($13 + [96]))
	CALL $89(($13 + [112]), ($13 + [56]))
	$0 = *($13 + [112])
	CALL send_inline($0, (*($13 + [116]) - $0))
	$0 = *($13 + [112])
	if ( ($0 == 0) ){ goto $label$16 }
	*($13 + [116]) = $0
	CALL $330($0)
	
.LABEL $label$16
	$0 = *($13 + [84])
	if ( ($0 == 0) ){ goto $label$17 }
	*(($13 + [88])) = $0
	CALL $330($0)
	
.LABEL $label$17
	$0 = *($13 + [72])
	if ( ($0 == 0) ){ goto $label$18 }
	*(($13 + [76])) = $0
	CALL $330($0)
	
.LABEL $label$18
	if ( ((*($13 + [40]) & [1]) == 0) ){ goto $label$19 }
	CALL $330(*(($13 + [48])))
	
.LABEL $label$19
	*([0] + [4]) = ($13 + [128])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $80($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $81($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $82($4, $1)
	CALL $84(CALL $83(CALL $83($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $79 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $330($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $330($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $330($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $330($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $330($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $330($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $330($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $330($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $259 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	$4 = *($1)
	$5 = *($3)
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*(($1 + [16]))), [2128])
	$6 = ((int_64)*($1 + [8]) + (int_64)*($5))
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [2208])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [32]))), [1232])
	$6 = (int_64)
	*($1 + [24]) = $6(*($1 + [24]) - *($3)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1280])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [1312])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1024])
	*($7 + [56]) = ($7 + [40])
	*($7 + [52]) = $7
	*($7 + [48]) = $7
	CALL $176(($7 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $7, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $258 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*($0) = (int_64)0
	$6 = *(($2 + [16]))
	*($0 + [8]) = $6
	CALL eosio_assert([1], [576])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [640])
	$6 = (int_64)0
	$7 = *($3)
	if ( ((int_32)$7 != (int_32)[1]) ){ goto $label$6 }
	$6 = *($2 + [8])
	CALL __multi3(($9 + [32]), $6, (int_64)$6 >> (int_64)63), (int_64)100, (int_64)0)
	$5 = *(($2 + [16]))
	$4 = *((($9 + [32]) + [8]))
	$6 = *($9 + [32])
	CALL eosio_assert(( (uint_64)($6 <= (int_64)4611686018427387904) ? ((int_64)$4 < (int_64)0) : (int_64)($4 == 0) ), [2272])
	CALL eosio_assert(( ((uint_64)$6 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$4 > (int_64)-1) : ((int_64)$4 == (int_64)-1) ), [2304])
	*(($0 + [8])) = $5
	*($0) = $6
	$7 = *($3)
	
.LABEL $label$6
	if ( ((int_32)($7 & [255]) != (int_32)[2]) ){ goto $label$7 }
	$6 = *($2 + [24])
	CALL __multi3(($9 + [16]), $6, (int_64)$6 >> (int_64)63), (int_64)100, (int_64)0)
	$5 = *(($2 + [32]))
	$4 = *((($9 + [16]) + [8]))
	$6 = *($9 + [16])
	CALL eosio_assert(( (uint_64)($6 <= (int_64)4611686018427387904) ? ((int_64)$4 < (int_64)0) : (int_64)($4 == 0) ), [2272])
	CALL eosio_assert(( ((uint_64)$6 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$4 > (int_64)-1) : ((int_64)$4 == (int_64)-1) ), [2304])
	*(($0 + [8])) = $5
	*($0) = $6
	$7 = *($3)
	
.LABEL $label$7
	if ( ((int_32)($7 & [255]) != (int_32)[3]) ){ goto $label$8 }
	$6 = *($2 + [40])
	CALL __multi3($9, $6, (int_64)$6 >> (int_64)63), (int_64)100, (int_64)0)
	$5 = *(($2 + [48]))
	$4 = *(($9 + [8]))
	$6 = *($9)
	CALL eosio_assert(( (uint_64)($6 <= (int_64)4611686018427387904) ? ((int_64)$4 < (int_64)0) : (int_64)($4 == 0) ), [2272])
	CALL eosio_assert(( ((uint_64)$6 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$4 > (int_64)-1) : ((int_64)$4 == (int_64)-1) ), [2304])
	*(($0 + [8])) = $5
	*($0) = $6
	
.LABEL $label$8
	CALL eosio_assert(((int_64)$6 > (int_64)0), [3328])
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $312 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [832])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $329([152])
	CALL $91($3)
	*($3 + [136]) = $1
	CALL $315(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [140])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $93(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [104]) & [1]) == 0) ){ goto $label$4 }
	CALL $330(*(($1 + [112])))
	
.LABEL $label$4
	if ( ((*($1 + [84]) & [1]) == 0) ){ goto $label$5 }
	CALL $330(*(($1 + [92])))
	
.LABEL $label$5
	CALL $330($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $313 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [832])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $329([72])
	CALL $71($3)
	*($3 + [56]) = $1
	CALL $314(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [60])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $73(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $330($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $314 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$2 = *($0)
	$5 = *($4 + [8])
	*($1 + [16]) = *($5)
	*(($1 + [24])) = *(($5 + [8]))
	$4 = *($4 + [8])
	*($1 + [32]) = *($4)
	*(($1 + [40])) = *(($4 + [8]))
	*($1 + [48]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($8 + [64]) = ($8 + [56])
	*($8 + [60]) = $8
	*($8 + [56]) = $8
	CALL $70(($8 + [56]), $1)
	$3 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)-4816273130130128896, *(*($0 + [8])), $3, $8, [56])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($2 + [8]))
	$6 = *(*(($0 + [8])))
	$7 = *($1)
	*($8 + [72]) = *(($1 + [8]))
	*($1 + [64]) = CALL db_idx64_store($3, (int_64)-4816273130130128896, $6, $7, ($8 + [72]))
	*([0] + [4]) = ($8 + [80])
}

void .FUNC $315 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [32])
	$9 = $8
	*([0] + [4]) = $8
	$7 = *($0 + [4])
	$2 = *($7)
	*($1 + [24]) = [0]
	*($1) = *($2)
	*($1 + [8]) = (int_64)1
	*($1 + [16]) = (int_64)0
	$2 = *($0)
	$3 = *($7 + [4])
	*($1 + [32]) = *($3)
	*(($1 + [40])) = *(($3 + [8]))
	$3 = *($7 + [4])
	*($1 + [48]) = *($3)
	*(($1 + [56])) = *(($3 + [8]))
	*($1 + [64]) = (int_64)0
	*($1 + [72]) = *(*($7 + [8]))
	$3 = *(*($7 + [12]))
	*($1 + [81]) = [0]
	*($1 + [80]) = $3
	CALL $332(($1 + [84]), *($7 + [16]))
	*($1 + [96]) = (int_64)100
	CALL $335(($1 + [104]), [2528])
	*($1 + [120]) = (int_64)0
	*($1 + [128]) = *(*($7 + [20]))
	$7 = *($1 + [84])
	$3 = ( *(($1 + [88])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($3 + [99])
	$6 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$3 = *(($1 + [104]))
	$3 = ( *(($1 + [108])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$7 = ($3 + $7)
	$6 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($7)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($8 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($9 + [12]) = $8
	*($9 + [8]) = $8
	*($9 + [16]) = ($8 + $7)
	CALL $146(($9 + [8]), $1)
	$6 = *($1)
	*($1 + [140]) = CALL db_store_i64(*($2 + [8]), (int_64)-4816283142123945984, *(*($0 + [8])), $6, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$6 = *(($2 + [8]))
	$4 = *(*(($0 + [8])))
	$5 = *($1)
	*($9 + [24]) = *(($1 + [16]))
	*($1 + [144]) = CALL db_idx64_store($6, (int_64)-4816283142123945984, $4, $5, ($9 + [24]))
	*([0] + [4]) = ($9 + [32])
}

void .FUNC $316 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [832])
	$4 = CALL $329([56])
	$6 = CALL $185($4)
	*($4 + [40]) = $1
	*($4) = *(*($3))
	$7 = *($3 + [4])
	*(($4 + [20])) = *(($7 + [12]))
	*(($4 + [16])) = *(($7 + [8]))
	*(($4 + [12])) = *(($7 + [4]))
	*($4 + [8]) = *($7)
	$3 = *($3 + [8])
	*($4 + [24]) = *($3)
	*(($4 + [32])) = *(($3 + [8]))
	*($8 + [72]) = (($8 + [16]) + [40])
	*($8 + [68]) = ($8 + [16])
	*($8 + [64]) = ($8 + [16])
	CALL $176(($8 + [64]), $6)
	$5 = *($4)
	*($4 + [44]) = CALL db_store_i64(*($1 + [8]), (int_64)-6029028902599393280, $2, $5, ($8 + [16]), [40])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [64]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$7 = *($4 + [44])
	*($8 + [12]) = $7
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $7
	*($8 + [64]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $187(($1 + [24]), ($8 + [64]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [64])
	*($8 + [64]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $330($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [80])
}

void .FUNC $317 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	*(($8 = $7) + [24]) = *($1 + [16])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [40]))), [2128])
	$6 = ((int_64)*($1 + [32]) + (int_64)*($3))
	*($1 + [32]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [2208])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1024])
	$3 = *($1 + [84])
	$5 = ( *(($1 + [88])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [99])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *($1 + [104])
	$5 = ( *(($1 + [108])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = ($5 + $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($8 + [12]) = $7
	*($8 + [8]) = $7
	*($8 + [16]) = ($7 + $3)
	CALL $146(($8 + [8]), $1)
	CALL db_update_i64(*($1 + [140]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($8 + [40]) = *(($1 + [16]))
	if ( (CALL memcmp(($8 + [24]), ($8 + [40]), [8]) == 0) ){ goto $label$7 }
	$1 = ($1 + [144])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4816283142123945984, ($8 + [32]), $4)
	*($1) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($8 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $251 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	$0 = *($0 + [8])
	$1 = (*($2) + [75])
	*(($2 = *($1))) = $1
	$3 = *($0 + [84])
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [88])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *(($0 + [84]))
	$3 = ( *(($0 + [88])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$1 = ($1 + [8])
	*($2) = $1
	$3 = *($0 + [104])
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [108])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$0 = *(($0 + [104]))
	$0 = ( *(($0 + [108])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = ($0 + $1)
	*($2) = $1
	
.LABEL $label$4
	*($2) = ($1 + [16])
}

void .FUNC $250 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$5 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($6) = [0]
	*($6 + [8]) = $6
	$2 = ($1 + [8])
	*($6 + [20]) = $2
	*($6 + [16]) = $1
	$3 = ($1 + [16])
	*($6 + [24]) = $3
	CALL $251(($6 + [16]), ($6 + [8]))
	$4 = *($6)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $81($0, $4)
	$5 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($6 + [16]) = $0
	*($6 + [24]) = $5
	CALL eosio_assert(((int_32)($5 - $0) > (int_32)[7]), [896])
	CALL memcpy($0, $1, [8])
	$1 = ($0 + [8])
	CALL eosio_assert(((int_32)($5 - $1) > (int_32)[7]), [896])
	CALL memcpy($1, $2, [8])
	*($6 + [20]) = ($0 + [16])
	CALL $146(($6 + [16]), $3)
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $253 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $329(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $330($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $330($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $252 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1088])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $329([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [672])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [672])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [672])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $253(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $330($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $255 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)4154295086852603905, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$4), [720])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $263($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)4154295086852603904, $5))
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$4), [720])
	
.LABEL $label$4
	*(($2 + [52])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $254 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [288])
	*([0] + [4]) = $13
	*($13 + [152]) = ($0 + [128])
	CALL $255(($13 + [208]), ($13 + [152]), $2)
	$8 = [0]
	$6 = [0]
	$7 = *($13 + [212])
	if ( ($7 == 0) ){ goto $label$1 }
	$6 = ((int_64)*($7 + [8]) == (int_64)*($1))
	
.LABEL $label$1
	CALL eosio_assert($6, [3248])
	$10 = *($13 + [208])
	*($13 + [32]) = $10
	$6 = (CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [1440])
	CALL $256(($13 + [32]))
	CALL $257(*($13 + [152]), $6)
	CALL $164(($13 + [208]), $0, ($1 + [72]))
	CALL $258(($13 + [192]), $0, ($13 + [208]), ($1 + [80]))
	*($13 + [168]) = (int_64)-1
	*($13 + [176]) = [0]
	$10 = *($13 + [208])
	$12 = *($0)
	*($13 + [152]) = $12
	*($13 + [160]) = $10
	*(($6 = ($13 + [180]))) = [0]
	*((($13 + [152]) + [32])) = [0]
	$7 = CALL db_find_i64($12, $10, (int_64)-6029028902599393280, *($2))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $165(($13 + [152]), $7)
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)($13 + [152])), [720])
	
.LABEL $label$2
	*((($13 + [136]) + [8])) = *(($8 + [16]))
	*($13 + [136]) = *($8 + [8])
	$10 = *(($8 + [32]))
	*((($13 + [120]) + [8])) = $10
	*($13 + [120]) = *($8 + [24])
	CALL eosio_assert(((int_64)$10 == (int_64)*($13 + [200])), [2816])
	CALL eosio_assert(((int_64)*($8 + [24]) >= (int_64)*($13 + [192])), [3280])
	$10 = *($0)
	*($13 + [32]) = ($13 + [192])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [784])
	CALL $259(($13 + [152]), $8, $10, ($13 + [32]))
	$10 = *($2)
	$3 = *(($13 + [176]))
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$3 }
	$8 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$4:
	if ( ((int_64)*(*($8)) == (int_64)$10) ){ goto $label$3 }
	$7 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)($13 + [152])), [720])
	goto $label$5 
	
.LABEL $label$6
	$8 = [0]
	$6 = CALL db_find_i64(*($13 + [152]), *(($13 + [160])), (int_64)-6029028902599393280, $10)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $165(($13 + [152]), $6)
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)($13 + [152])), [720])
	
.LABEL $label$5
	*(($13 + [52])) = *($13 + [140])
	*($13 + [40]) = *($1)
	*(($13 + [60])) = *(($13 + [148]))
	*(($13 + [56])) = *((($13 + [136]) + [8]))
	*($13 + [32]) = *($2)
	*($13 + [48]) = *($13 + [136])
	*(($13 + [72])) = *((($13 + [120]) + [8]))
	*($13 + [64]) = *($13 + [120])
	*(($13 + [88])) = *(($8 + [16]))
	*($13 + [80]) = *($8 + [8])
	*(($13 + [104])) = *(($8 + [32]))
	*($13 + [96]) = *($8 + [24])
	*($13 + [112]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$5 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1376]
	$11 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$12 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$6 = ($6 + [165])
	goto $label$10 
	
.LABEL $label$12
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$8
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$7 }
	*($13 + [24]) = $11
	*($13 + [16]) = $5
	$10 = (int_64)0
	$12 = (int_64)59
	$8 = [1392]
	$11 = (int_64)0
	
.LOOP $label$13:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$14 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$6 = ($6 + [165])
	goto $label$15 
	
.LABEL $label$16
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$14
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$13 }
	*($13 + [8]) = $11
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [3312]
	$11 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$22 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$6 = ($6 + [165])
	goto $label$20 
	
.LABEL $label$22
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$18
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$17 }
	*($13) = $11
	CALL $260($0, ($13 + [16]), ($13 + [8]), $13, ($13 + [32]))
	$7 = *($13 + [176])
	if ( ($7 == 0) ){ goto $label$23 }
	$4 = ($13 + [180])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$25 }
	
.LOOP $label$26:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$27 }
	CALL $330($6)
	
.LABEL $label$27
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$26 }
	$8 = *(($13 + [176]))
	goto $label$24 
	
.LABEL $label$25
	$8 = $7
	
.LABEL $label$24
	*($4) = $7
	CALL $330($8)
	
.LABEL $label$23
	if ( ((*($13 + [264]) & [1]) == 0) ){ goto $label$28 }
	CALL $330(*(($13 + [272])))
	
.LABEL $label$28
	*([0] + [4]) = ($13 + [288])
}

void .FUNC $257 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [1504])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1552])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1616])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $330($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $330($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
	$7 = *(($1 + [48]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4154295086852603904, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	$7 = *(($1 + [52]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4154295086852603905, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx64_remove($7)
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $256 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [1680])
	$6 = *($0 + [4])
	$7 = *(($6 + [52]))
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)4154295086852603905, ($9 + [8]), *($6))
	*((*(($0 + [4])) + [52])) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$2), [720])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $263($2, CALL $fimport$17(*($2), *($2 + [8]), (int_64)4154295086852603904, $3))
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$2), [720])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [52])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $181 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [672])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($0, *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [672])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $180 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1088])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$2 = ($0 + [24])
	*(($4 = CALL $329([48])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [576])
	$3 = ($4 + [16])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [640])
	*($4 + [32]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($4 + [8])
	*($8 + [32]) = $4
	*($8 + [40]) = $3
	CALL $181(($8 + [32]), ($8 + [24]))
	*($4 + [36]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [32]) = $7
	$6 = *($4 + [36])
	*($8 + [4]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $182($2, ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $330($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $138 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [144])
	*([0] + [4]) = $11
	$8 = CALL current_time()
	*(($11 + [60])) = [0]
	*(($11 + [64])) = [0]
	*($11 + [44]) = [0]
	*($11 + [48]) = [0]
	*($11 + [52]) = [0]
	*($11 + [56]) = [0]
	*($11 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	*($11 + [68]) = [0]
	*(($11 + [72])) = [0]
	*(($11 + [76])) = [0]
	*($11 + [80]) = [0]
	*(($11 + [84])) = [0]
	*(($11 + [88])) = [0]
	$4 = ($11 + [68])
	$3 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1376]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	*($11 + [104]) = $9
	*($11 + [96]) = $3
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1920]
	$9 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$12 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$12
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$7 }
	*($11 + [24]) = $9
	*($11 + [8]) = *($1)
	*($11 + [16]) = *($2)
	CALL $139($4, ($11 + [96]), $0, ($11 + [24]), ($11 + [8]))
	*(($11 + [52])) = [14]
	CALL $61(($11 + [96]), $0)
	*($11 + [104]) = ((int_64)*($11 + [104]) + (int_64)1)
	CALL $62(($0 + [208]), ($11 + [96]), *($0))
	$8 = *($11 + [104])
	*($11 + [104]) = (int_64)0
	*($11 + [96]) = $8
	$8 = *($0)
	CALL $78(($11 + [8]), ($11 + [32]))
	$6 = *($11 + [8])
	CALL send_deferred(($11 + [96]), $8, $6, (*($11 + [12]) - $6), [0])
	$6 = *($11 + [8])
	if ( ($6 == 0) ){ goto $label$13 }
	*($11 + [12]) = $6
	CALL $330($6)
	
.LABEL $label$13
	CALL $79(($11 + [32]))
	*([0] + [4]) = ($11 + [144])
}

void .FUNC $139 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $329(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $329([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $81(($8 + [28]), [16])
	$2 = *($8 + [28])
	$1 = (*($2) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [896])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [896])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($7 = ($8 + [-16]))) = [0]
	$4 = ($2 + [-4])
	*($1) = *($4)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($7) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($4) = (int_64)0
	*(($7 = ($8 + [-4]))) = [0]
	$4 = ($2 + [8])
	*($1) = *($4)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($7) = *($1)
	*($1) = [0]
	*($4) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$8 }
	$1 = ([0] - $7)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $330($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $330($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$12 }
	CALL $330($7)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC __stdio_write (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($0 + [28])
	CALL prints_l($3, (*($0 + [20]) - $3))
	CALL prints_l($1, $2)
	return ((*($0 + [20]) + $2) - *($0 + [28]))
}

void .FUNC $269 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	$8 = *($3)
	*($1 + [24]) = [0]
	$6 = *($1 + [16])
	*($1 + [16]) = *($8)
	*(($8 = $7) + [24]) = $6
	$4 = *($1)
	$3 = *($3 + [4])
	*($1 + [32]) = *($3)
	*(($1 + [40])) = *(($3 + [8]))
	*($1 + [81]) = [3]
	*($1 + [120]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1024])
	$3 = *($1 + [84])
	$5 = ( *(($1 + [88])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [99])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *($1 + [104])
	$5 = ( *(($1 + [108])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = ($5 + $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($8 + [12]) = $7
	*($8 + [8]) = $7
	*($8 + [16]) = ($7 + $3)
	CALL $146(($8 + [8]), $1)
	CALL db_update_i64(*($1 + [140]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($8 + [40]) = *(($1 + [16]))
	if ( (CALL memcmp(($8 + [24]), ($8 + [40]), [8]) == 0) ){ goto $label$7 }
	$1 = ($1 + [144])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4816283142123945984, ($8 + [32]), $4)
	*($1) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($8 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $130 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	float_64 $18
	int_64 $19
	int_64 $20
	float_64 $21
	float_64 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	float_64 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_64 $41
	int_32 $42
	int_32 $43
	int_32 $44
	int_32 $45
	$45 = (*([0] + [4]) - [288])
	*([0] + [4]) = $45
	$6 = *(($2 + [56]))
	CALL eosio_assert([1], [576])
	$5 = ($2 + [48])
	$41 = (uint_64)$6 >> (uint_64)(int_64)8)
	$42 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $41) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$41 = (uint_64)$41 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$41) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$41 = (uint_64)$41 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$41) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$24 = [1]
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$24 = [0]
	
.LABEL $label$1
	CALL eosio_assert($24, [640])
	*($45 + [280]) = [0]
	*($45 + [272]) = (int_64)0
	$7 = ($2 + [72])
	CALL $164(($45 + [192]), $1, $7)
	$8 = ($2 + [8])
	CALL $109($1, ($45 + [272]), $2, $8)
	*($45 + [168]) = (int_64)-1
	*($45 + [176]) = [0]
	$41 = *($1)
	*($45 + [152]) = $41
	$33 = *($2 + [72])
	*($45 + [160]) = $33
	*(($26 = ($45 + [180]))) = [0]
	*((($45 + [152]) + [32])) = [0]
	$10 = [0]
	$42 = CALL db_find_i64($41, $33, (int_64)-6029028902599393280, *($2 + [16]))
	if ( ((int_32)$42 < (int_32)[0]) ){ goto $label$6 }
	$10 = CALL $165(($45 + [152]), $42)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($45 + [152])), [720])
	
.LABEL $label$6
	$9 = ($2 + [16])
	*(($27 = (($45 + [136]) + [8]))) = *(($10 + [32]))
	*($45 + [136]) = *($10 + [24])
	$12 = ($1 + [88])
	$11 = ($10 + [24])
	$31 = ($4 + [4])
	$32 = ($45 + [101])
	$38 = ($45 + [92])
	$35 = ($1 + [112])
	$36 = ($1 + [116])
	$37 = ($1 + [96])
	$39 = [1]
	$13 = (int_64)0
	
.LOOP $label$9:
	*(($28 = (($45 + [120]) + [8]))) = [0]
	*($45 + [120]) = (int_64)0
	*(($25 = (($45 + [104]) + [8]))) = $6
	*($45 + [104]) = (int_64)0
	$23 = *($45 + [276])
	$42 = *($45 + [272])
	if ( ((int_32)$42 == (int_32)$23) ){ goto $label$10 }
	$40 = ($39 + [-1])
	
.LOOP $label$11:
	$43 = ($42 + [32])
	$24 = (*($43) + ($40 << [4]))
	if ( ((int_64)*($24) < (int_64)1) ){ goto $label$12 }
	CALL eosio_assert(((int_64)*($24 + [8]) == (int_64)*($25)), [2128])
	$41 = ((int_64)*($45 + [104]) + (int_64)*($24))
	*($45 + [104]) = $41
	CALL eosio_assert(((int_64)$41 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)*($45 + [104]) < (int_64)4611686018427387904), [2208])
	$24 = *($45 + [124])
	if ( ((uint_32)$24 >= (uint_32)*($28)) ){ goto $label$13 }
	*($24) = *($42)
	*(($24 + [24])) = *(($42 + [24]))
	*(($24 + [16])) = *(($42 + [16]))
	*(($24 + [8])) = *(($42 + [8]))
	*($24 + [32]) = [0]
	*(($44 = ($24 + [36]))) = [0]
	*(($29 = ($24 + [40]))) = [0]
	$30 = ($42 + [36])
	$16 = (*($30) - *($43))
	$15 = int_32($16 >> [4])
	if ( ($15 == 0) ){ goto $label$14 }
	$14 = ($24 + [32])
	if ( ((uint_32)$15 >= (uint_32)[268435456]) ){ goto $label$8 }
	$16 = CALL $329($16)
	*($14) = $16
	*($29) = ($16 + ($15 << [4]))
	*($44) = $16
	$15 = *($43)
	$43 = (*($30) - $15)
	if ( ((int_32)$43 < (int_32)[1]) ){ goto $label$14 }
	CALL memcpy($16, $15, $43)
	*($44) = (*($44) + $43)
	
.LABEL $label$14
	*(($24 + [64])) = *(($42 + [64]))
	*(($24 + [56])) = *(($42 + [56]))
	*($24 + [48]) = *(($42 + [48]))
	*($45 + [124]) = (*($45 + [124]) + [72])
	goto $label$12 
	
.LABEL $label$13
	CALL $116(($45 + [120]), $42)
	
.LABEL $label$12
	$42 = ($42 + [72])
	if ( ((int_32)$23 != (int_32)$42) ){ goto $label$11 }
	
.LABEL $label$10
	$42 = *($31)
	if ( ((uint_32)$42 >= (uint_32)*(($4 + [8]))) ){ goto $label$16 }
	*($42) = *($45 + [104])
	*(($42 + [8])) = *($25)
	*($31) = (*($31) + [16])
	goto $label$15 
	
.LABEL $label$16
	CALL $166($4, ($45 + [104]))
	
.LABEL $label$15
	$23 = *($45 + [120])
	if ( ((int_32)*($45 + [124]) == (int_32)$23) ){ goto $label$17 }
	$24 = ($3 + [16])
	$42 = CALL $167(($45 + [72]), (*($24) + ($39 << [5])))
	if ( *($32) ){ goto $label$18 }
	$42 = *($24)
	
.LABEL $label$18
	$41 = (int_64)1
	$42 = *($42 + [28])
	if ( ($42 <= [2]) ){ goto $label$19 }
	if ( ((uint_32)$42 > (uint_32)[9]) ){ goto $label$20 }
	$41 = (CASTING uint_64)(uint_32 $42)
	goto $label$19 
	
.LABEL $label$20
	$41 = (int_64)10
	if ( ($42 <= [14]) ){ goto $label$19 }
	CALL eosio_assert([0], [2240])
	$41 = (int_64)0
	
.LABEL $label$19
	$33 = *($45 + [104])
	CALL __multi3($45, $33, (int_64)$33 >> (int_64)63), $41, (int_64)0)
	$17 = *($25)
	$41 = *(($45 + [8]))
	$33 = *($45)
	CALL eosio_assert(( (uint_64)($33 <= (int_64)4611686018427387904) ? ((int_64)$41 < (int_64)0) : (int_64)($41 == 0) ), [2272])
	CALL eosio_assert(( ((uint_64)$33 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$41 > (int_64)-1) : ((int_64)$41 == (int_64)-1) ), [2304])
	$18 = (CASTING float_64)(int_64 $33)
	$19 = (Rounds 0)(((float_64)$18 * (float_64)(float_64)0.015))
	CALL eosio_assert((uint_64)(((int_64)$19 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [576])
	$42 = [0]
	$20 = (uint_64)$17 >> (uint_64)(int_64)8
	$41 = $20)
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $41) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$41 = (uint_64)$41 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$41) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$41 = (uint_64)$41 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$41) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$24 = [1]
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$24 = [0]
	
.LABEL $label$21
	CALL eosio_assert($24, [640])
	CALL eosio_assert(((int_64)$17 == (int_64)$6), [2128])
	$13 = ((int_64)$19 + (int_64)$13)
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [2208])
	CALL eosio_assert([1], [1232])
	$41 = (int_64)
	CALL eosio_assert(((int_64)$41($33 - $19)) > (int_64)-4611686018427387904), [1280])
	CALL eosio_assert(((int_64)$41 < (int_64)4611686018427387904), [1312])
	$42 = ((int_64)$17 == (int_64)*($27))
	if ( (*($32) == 0) ){ goto $label$27 }
	CALL eosio_assert($42, [1232])
	$33 = (int_64)
	*($45 + [136]) = $33(*($45 + [136]) - $33))
	CALL eosio_assert(((int_64)$33 > (int_64)-4611686018427387904), [1280])
	CALL eosio_assert(((int_64)*($45 + [136]) < (int_64)4611686018427387904), [1312])
	goto $label$26 
	
.LABEL $label$27
	CALL eosio_assert($42, [2128])
	$33 = ((int_64)*($45 + [136]) + (int_64)$41)
	*($45 + [136]) = $33
	CALL eosio_assert(((int_64)$33 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)*($45 + [136]) < (int_64)4611686018427387904), [2208])
	
.LABEL $label$26
	$16 = *($45 + [124])
	$40 = *($45 + [120])
	if ( ((int_32)$40 == (int_32)$16) ){ goto $label$28 }
	$15 = ($39 + [-1])
	$21 = (CASTING float_64)(int_64 $41)
	
.LOOP $label$29:
	$42 = (*($40 + [32]) + ($15 << [4]))
	$41 = *($42)
	$33 = *($42 + [8])
	*((($45 + [56]) + [8])) = $33
	$22 = (CASTING float_64)(int_64 $41)
	$41 = (Rounds 0)(((float_64)$22 * (float_64)(float_64)10))
	*($45 + [56]) = $41
	CALL eosio_assert((uint_64)(((int_64)$41 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [576])
	$41 = (uint_64)$33 >> (uint_64)(int_64)8)
	$42 = [0]
	
.LOOP $label$32:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $41) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$41 = (uint_64)$41 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$41) & (int_64)255) != (int_64)0) ){ goto $label$33 }
	
.LOOP $label$34:
	$41 = (uint_64)$41 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$41) & (int_64)255) != (int_64)0) ){ goto $label$31 }
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$34 }
	
.LABEL $label$33
	$24 = [1]
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$24 = [0]
	
.LABEL $label$30
	CALL eosio_assert($24, [640])
	$33 = *($45 + [104])
	$41 = *($40 + [24])
	$44 = *((($45 + [152]) + [24]))
	$43 = *($26)
	if ( ((int_32)$43 == (int_32)$44) ){ goto $label$35 }
	$42 = ($43 + [-24])
	$23 = ([0] - $44)
	
.LOOP $label$36:
	if ( ((int_64)*(*($42)) == (int_64)$41) ){ goto $label$35 }
	$43 = $42
	$24 = ($42 + [-24])
	$42 = $24
	if ( ((int_32)($24 + $23) != (int_32)[-24]) ){ goto $label$36 }
	
.LABEL $label$35
	if ( ((int_32)$43 == (int_32)$44) ){ goto $label$38 }
	$44 = *(($43 + [-24]))
	CALL eosio_assert(((int_32)*($44 + [40]) == (int_32)($45 + [152])), [720])
	goto $label$37 
	
.LABEL $label$38
	$44 = [0]
	$42 = CALL db_find_i64(*($45 + [152]), *((($45 + [152]) + [8])), (int_64)-6029028902599393280, $41)
	if ( ((int_32)$42 < (int_32)[0]) ){ goto $label$37 }
	$44 = CALL $165(($45 + [152]), $42)
	CALL eosio_assert(((int_32)*($44 + [40]) == (int_32)($45 + [152])), [720])
	
.LABEL $label$37
	$41 = *($40)
	$25 = *($35)
	$43 = *($36)
	if ( ((int_32)$43 == (int_32)$25) ){ goto $label$39 }
	$42 = ($43 + [-24])
	$23 = ([0] - $25)
	
.LOOP $label$40:
	if ( ((int_64)*(*($42)) == (int_64)$41) ){ goto $label$39 }
	$43 = $42
	$24 = ($42 + [-24])
	$42 = $24
	if ( ((int_32)($24 + $23) != (int_32)[-24]) ){ goto $label$40 }
	
.LABEL $label$39
	$34 = (CASTING float_64)(int_64 $33)
	if ( ((int_32)$43 == (int_32)$25) ){ goto $label$42 }
	$24 = *(($43 + [-24]))
	CALL eosio_assert(((int_32)*($24 + [72]) == (int_32)$12), [720])
	goto $label$41 
	
.LABEL $label$42
	$24 = [0]
	$42 = CALL db_find_i64(*($12), *($37), (int_64)4461681267712196608, $41)
	if ( ((int_32)$42 < (int_32)[0]) ){ goto $label$41 }
	$24 = CALL $117($12, $42)
	CALL eosio_assert(((int_32)*($24 + [72]) == (int_32)$12), [720])
	
.LABEL $label$41
	$22 = ((float_64)$22 / (float_64)$34)
	if ( (*($32) == 0) ){ goto $label$44 }
	*((($45 + [40]) + [8])) = $17
	$41 = (Rounds 0)(((float_64)$21 * (float_64)$22))
	*($45 + [40]) = $41
	CALL eosio_assert((uint_64)(((int_64)$41 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [576])
	$42 = [0]
	$41 = $20
	
.LOOP $label$47:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $41) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$46 }
	$41 = (uint_64)$41 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$41) & (int_64)255) != (int_64)0) ){ goto $label$48 }
	
.LOOP $label$49:
	$41 = (uint_64)$41 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$41) & (int_64)255) != (int_64)0) ){ goto $label$46 }
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$49 }
	
.LABEL $label$48
	$43 = [1]
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$46
	$43 = [0]
	
.LABEL $label$45
	CALL eosio_assert($43, [640])
	$41 = *($1)
	*($45 + [36]) = ($45 + [56])
	*($45 + [32]) = ($45 + [40])
	CALL eosio_assert(((int_32)$44 != (int_32)[0]), [784])
	CALL $168(($45 + [152]), $44, $41, ($45 + [32]))
	$41 = *($1)
	*($45 + [32]) = ($45 + [40])
	CALL eosio_assert(((int_32)$24 != (int_32)[0]), [784])
	CALL $169($12, $24, $41, ($45 + [32]))
	goto $label$43 
	
.LABEL $label$44
	*((($45 + [40]) + [8])) = $17
	$41 = (Rounds 0)(((float_64)$18 * (float_64)$22))
	*($45 + [40]) = $41
	CALL eosio_assert((uint_64)(((int_64)$41 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [576])
	$42 = [0]
	$41 = $20
	
.LOOP $label$52:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $41) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$51 }
	$41 = (uint_64)$41 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$41) & (int_64)255) != (int_64)0) ){ goto $label$53 }
	
.LOOP $label$54:
	$41 = (uint_64)$41 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$41) & (int_64)255) != (int_64)0) ){ goto $label$51 }
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$54 }
	
.LABEL $label$53
	$43 = [1]
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$51
	$43 = [0]
	
.LABEL $label$50
	CALL eosio_assert($43, [640])
	$41 = *($1)
	*($45 + [36]) = ($45 + [40])
	*($45 + [32]) = ($45 + [56])
	CALL eosio_assert(((int_32)$44 != (int_32)[0]), [784])
	CALL $170(($45 + [152]), $44, $41, ($45 + [32]))
	$41 = *($1)
	*($45 + [32]) = ($45 + [40])
	CALL eosio_assert(((int_32)$24 != (int_32)[0]), [784])
	CALL $171($12, $24, $41, ($45 + [32]))
	
.LABEL $label$43
	$40 = ($40 + [72])
	if ( ((int_32)$40 != (int_32)$16) ){ goto $label$29 }
	
.LABEL $label$28
	$42 = *((($45 + [72]) + [16]))
	if ( ($42 == 0) ){ goto $label$55 }
	*($38) = $42
	CALL $330($42)
	
.LABEL $label$55
	$42 = *($45 + [76])
	if ( ($42 == 0) ){ goto $label$56 }
	*((($45 + [72]) + [8])) = $42
	CALL $330($42)
	
.LABEL $label$56
	$23 = *($45 + [120])
	
.LABEL $label$17
	if ( ($23 == 0) ){ goto $label$57 }
	$42 = *($45 + [124])
	if ( ((int_32)$42 == (int_32)$23) ){ goto $label$59 }
	$43 = ([0] - $23)
	$42 = ($42 + [-40])
	
.LOOP $label$60:
	$24 = *($42)
	if ( ($24 == 0) ){ goto $label$61 }
	*(($42 + [4])) = $24
	CALL $330($24)
	
.LABEL $label$61
	$42 = ($42 + [-72])
	if ( ((int_32)($42 + $43) != (int_32)[-40]) ){ goto $label$60 }
	$42 = *($45 + [120])
	goto $label$58 
	
.LABEL $label$59
	$42 = $23
	
.LABEL $label$58
	*($45 + [124]) = $23
	CALL $330($42)
	
.LABEL $label$57
	$39 = ($39 + [1])
	if ( ($39 <= [5]) ){ goto $label$9 }
	$41 = *($2)
	$40 = *(($1 + [392]))
	$43 = *(($1 + [396]))
	if ( ((int_32)$43 == (int_32)$40) ){ goto $label$62 }
	$42 = ($43 + [-24])
	$23 = ([0] - $40)
	
.LOOP $label$63:
	if ( ((int_64)*(*($42)) == (int_64)$41) ){ goto $label$62 }
	$43 = $42
	$24 = ($42 + [-24])
	$42 = $24
	if ( ((int_32)($24 + $23) != (int_32)[-24]) ){ goto $label$63 }
	
.LABEL $label$62
	$23 = ($1 + [368])
	if ( ((int_32)$43 == (int_32)$40) ){ goto $label$65 }
	$43 = *(($43 + [-24]))
	CALL eosio_assert(((int_32)*($43 + [56]) == (int_32)$23), [720])
	goto $label$64 
	
.LABEL $label$65
	$43 = [0]
	$42 = CALL db_find_i64(*(($1 + [368])), *(($1 + [376])), (int_64)-4816273130130128896, $41)
	if ( ((int_32)$42 < (int_32)[0]) ){ goto $label$64 }
	$43 = CALL $59($23, $42)
	CALL eosio_assert(((int_32)*($43 + [56]) == (int_32)$23), [720])
	
.LABEL $label$64
	*((($45 + [72]) + [8])) = *(($43 + [24]))
	*($45 + [72]) = *($43 + [16])
	*((($45 + [104]) + [8])) = *(($43 + [40]))
	*($45 + [104]) = *($43 + [32])
	$41 = (int_64)0
	if ( ((int_64)$13 <= (int_64)0) ){ goto $label$66 }
	*($45 + [64]) = $6
	*($45 + [56]) = $13
	$19 = *($43 + [8])
	$33 = (int_64)59
	$42 = [688]
	$20 = (int_64)0
	
.LOOP $label$67:
	$17 = (int_64)0
	if ( ((uint_64)$41 > (uint_64)(int_64)11) ){ goto $label$68 }
	$24 = *($42)
	if ( ((uint_32)(($24 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$70 }
	$24 = ($24 + [165])
	goto $label$69 
	
.LABEL $label$70
	$24 = ( ($24 + [208]) ? [0] : ((($24 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$69
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($24 & [31])) << (int_64)((int_64)$33 & (int_64)4294967295))
	
.LABEL $label$68
	$42 = ($42 + [1])
	$41 = ((int_64)$41 + (int_64)1)
	$20 = ((int_64)$17 | (int_64)$20)
	$33 = ((int_64)$33 + (int_64)-5)
	if ( ((int_64)$33 != (int_64)-6) ){ goto $label$67 }
	if ( ((int_64)$19 != (int_64)$20) ){ goto $label$72 }
	CALL eosio_assert(((int_64)$6 == (int_64)*($45 + [112])), [2128])
	$41 = ((int_64)*($45 + [104]) + (int_64)*($45 + [56]))
	*($45 + [104]) = $41
	CALL eosio_assert(((int_64)$41 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)*($45 + [104]) < (int_64)4611686018427387904), [2208])
	goto $label$71 
	
.LABEL $label$72
	CALL eosio_assert([1], [2336])
	CALL eosio_assert([1], [2352])
	*(($45 + [64])) = $6
	*($45 + [56]) = ((int_64)$13 / (int_64)2)
	CALL eosio_assert([1], [1232])
	$41 = (int_64)
	CALL eosio_assert(((int_64)$41($13 - *($45 + [56]))) > (int_64)-4611686018427387904), [1280])
	CALL eosio_assert(((int_64)$41 < (int_64)4611686018427387904), [1312])
	CALL eosio_assert(((int_64)$6 == (int_64)*($45 + [80])), [2128])
	$33 = ((int_64)*($45 + [72]) + (int_64)$41)
	*($45 + [72]) = $33
	CALL eosio_assert(((int_64)$33 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)*($45 + [72]) < (int_64)4611686018427387904), [2208])
	CALL eosio_assert(((int_64)$6 == (int_64)*($45 + [112])), [2128])
	$41 = ((int_64)*($45 + [104]) + (int_64)$41)
	*($45 + [104]) = $41
	CALL eosio_assert(((int_64)$41 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)*($45 + [104]) < (int_64)4611686018427387904), [2208])
	
.LABEL $label$71
	$41 = (int_64)0
	$33 = (int_64)59
	$42 = [2384]
	$20 = (int_64)0
	
.LOOP $label$73:
	$17 = (int_64)0
	if ( ((uint_64)$41 > (uint_64)(int_64)11) ){ goto $label$74 }
	$24 = *($42)
	if ( ((uint_32)(($24 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$76 }
	$24 = ($24 + [165])
	goto $label$75 
	
.LABEL $label$76
	$24 = ( ($24 + [208]) ? [0] : ((($24 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$75
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($24 & [31])) << (int_64)((int_64)$33 & (int_64)4294967295))
	
.LABEL $label$74
	$42 = ($42 + [1])
	$41 = ((int_64)$41 + (int_64)1)
	$20 = ((int_64)$17 | (int_64)$20)
	$33 = ((int_64)$33 + (int_64)-5)
	if ( ((int_64)$33 != (int_64)-6) ){ goto $label$73 }
	*(($45 + [24])) = [0]
	*($45 + [40]) = $20
	*($45 + [16]) = (int_64)0
	$42 = CALL strlen([2400])
	if ( ((uint_32)$42 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$42 >= (uint_32)[11]) ){ goto $label$79 }
	*($45 + [16]) = ($42 << [1])
	$24 = (($45 + [16]) | [1])
	if ( $42 ){ goto $label$78 }
	goto $label$77 
	
.LABEL $label$79
	$40 = (($42 + [16]) & [-16])
	$24 = CALL $329($40)
	*($45 + [16]) = ($40 | [1])
	*($45 + [24]) = $24
	*($45 + [20]) = $42
	
.LABEL $label$78
	CALL memcpy($24, [2400], $42)
	
.LABEL $label$77
	*(($24 + $42)) = [0]
	CALL $75($1, ($45 + [40]), ($45 + [56]), $7, ($45 + [16]))
	if ( ((*($45 + [16]) & [1]) == 0) ){ goto $label$66 }
	CALL $330(*($45 + [24]))
	
.LABEL $label$66
	$41 = *($1)
	*($45 + [60]) = ($45 + [104])
	*($45 + [56]) = ($45 + [72])
	CALL eosio_assert(((int_32)$43 != (int_32)[0]), [784])
	CALL $172($23, $43, $41, ($45 + [56]))
	if ( (CALL $173($1) == 0) ){ goto $label$80 }
	$6 = *($7)
	$41 = (int_64)0
	$17 = (int_64)59
	$42 = [512]
	$20 = (int_64)0
	
.LOOP $label$81:
	if ( ((uint_64)$41 > (uint_64)(int_64)10) ){ goto $label$86 }
	$24 = *($42)
	if ( ((uint_32)(($24 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$85 }
	$24 = ($24 + [165])
	goto $label$84 
	
.LABEL $label$86
	$33 = (int_64)0
	if ( ((int_64)$41 == (int_64)11) ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$85
	$24 = ( ($24 + [208]) ? [0] : ((($24 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$84
	$33 = (int_64)((int_64)(CASTING uint_64)(uint_32 $24) << (int_64)56) >> (int_64)56)
	
.LABEL $label$83
	$33 = ((int_64)((int_64)$33 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$82
	$42 = ($42 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$20 = ((int_64)$33 | (int_64)$20)
	$41 = ((int_64)$41 + (int_64)1)
	if ( ((int_64)$41 != (int_64)13) ){ goto $label$81 }
	if ( ((int_64)$6 != (int_64)$20) ){ goto $label$80 }
	$41 = (int_64)0
	$33 = (int_64)59
	$42 = [2416]
	$20 = (int_64)0
	
.LOOP $label$87:
	$17 = (int_64)0
	if ( ((uint_64)$41 > (uint_64)(int_64)11) ){ goto $label$88 }
	$24 = *($42)
	if ( ((uint_32)(($24 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$90 }
	$24 = ($24 + [165])
	goto $label$89 
	
.LABEL $label$90
	$24 = ( ($24 + [208]) ? [0] : ((($24 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$89
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($24 & [31])) << (int_64)((int_64)$33 & (int_64)4294967295))
	
.LABEL $label$88
	$42 = ($42 + [1])
	$41 = ((int_64)$41 + (int_64)1)
	$20 = ((int_64)$17 | (int_64)$20)
	$33 = ((int_64)$33 + (int_64)-5)
	if ( ((int_64)$33 != (int_64)-6) ){ goto $label$87 }
	*($45 + [56]) = $20
	CALL $174($1, $9, $8, $5, ($45 + [56]))
	
.LABEL $label$80
	*($0 + [8]) = *($45 + [136])
	*($0) = *($9)
	*(($0 + [12])) = *($45 + [140])
	*(($0 + [20])) = *((($45 + [136]) + [12]))
	$24 = (($45 + [136]) + [8])
	*(($42 = ($0 + [16]))) = *($24)
	CALL eosio_assert(((int_64)*(($10 + [32])) == (int_64)*($42)), [1232])
	$41 = (int_64)
	*($0 + [8]) = $41(*($0 + [8]) - *(($10 + [24]))))
	CALL eosio_assert(((int_64)$41 > (int_64)-4611686018427387904), [1280])
	CALL eosio_assert(((int_64)$41 < (int_64)4611686018427387904), [1312])
	*(($0 + [32])) = *(($11 + [8]))
	*($0 + [24]) = *($11)
	*($0 + [40]) = *($45 + [136])
	*(($0 + [48])) = *($24)
	$41 = *($1)
	*($45 + [56]) = ($45 + [136])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [784])
	CALL $175(($45 + [152]), $10, $41, ($45 + [56]))
	$43 = *($45 + [176])
	if ( ($43 == 0) ){ goto $label$91 }
	$23 = ($45 + [180])
	$42 = *($23)
	if ( ((int_32)$42 == (int_32)$43) ){ goto $label$93 }
	
.LOOP $label$94:
	$42 = ($42 + [-24])
	$24 = *($42)
	*($42) = [0]
	if ( ($24 == 0) ){ goto $label$95 }
	CALL $330($24)
	
.LABEL $label$95
	if ( ((int_32)$43 != (int_32)$42) ){ goto $label$94 }
	$42 = *(($45 + [176]))
	goto $label$92 
	
.LABEL $label$93
	$42 = $43
	
.LABEL $label$92
	*($23) = $43
	CALL $330($42)
	
.LABEL $label$91
	if ( ((*($45 + [248]) & [1]) == 0) ){ goto $label$96 }
	CALL $330(*(($45 + [256])))
	
.LABEL $label$96
	$23 = *($45 + [272])
	if ( ($23 == 0) ){ goto $label$97 }
	$42 = *($45 + [276])
	if ( ((int_32)$42 == (int_32)$23) ){ goto $label$99 }
	$43 = ([0] - $23)
	$42 = ($42 + [-40])
	
.LOOP $label$100:
	$24 = *($42)
	if ( ($24 == 0) ){ goto $label$101 }
	*(($42 + [4])) = $24
	CALL $330($24)
	
.LABEL $label$101
	$42 = ($42 + [-72])
	if ( ((int_32)($42 + $43) != (int_32)[-40]) ){ goto $label$100 }
	$42 = *($45 + [272])
	goto $label$98 
	
.LABEL $label$99
	$42 = $23
	
.LABEL $label$98
	*($45 + [276]) = $23
	CALL $330($42)
	
.LABEL $label$97
	*([0] + [4]) = ($45 + [288])
	return (unreachable)
	
.LABEL $label$8
	CALL $352($14)
	
.LABEL $label$7
	CALL $331(($45 + [16]))
	(unreachable)
}

void .FUNC $131 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_32 $20
	int_32 $21
	$21 = (*([0] + [4]) - [64])
	*([0] + [4]) = $21
	*($0 + [24]) = (int_64)0
	*(($0 + [32])) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$19 = (int_64)5462355
	$20 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $19) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$10 = [1]
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [640])
	$10 = [0]
	*(($0 + [48])) = [0]
	*($0 + [40 align=4]) = (int_64)0
	$6 = ($1 + [48])
	$20 = ($1 + [64])
	$19 = *($20)
	if ( ((int_64)$19 != (int_64)-1) ){ goto $label$6 }
	$19 = (int_64)0
	$12 = CALL db_lowerbound_i64(*($6), *(($1 + [56])), (int_64)-4455901582336561152, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$7 }
	CALL $101($6, $12)
	*($21 + [28]) = [0]
	*($21 + [24]) = $6
	$19 = *(*(CALL $159(($21 + [24])) + [4]))
	$19 = ( (int_64)-2 ? ((int_64)$19 + (int_64)1) : ((uint_64)$19 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*(($1 + [64])) = $19
	
.LABEL $label$6
	CALL eosio_assert((uint_64)($19 <= (int_64)-2), [1952])
	*($0) = *($20)
	*($0 + [8]) = *($2)
	*($0 + [16]) = *($2 + [8])
	*(($0 + [36])) = *(($5 + [20]))
	*(($0 + [32])) = *(($5 + [16]))
	*(($0 + [28])) = *(($5 + [12]))
	*($0 + [24]) = *($5 + [8])
	*((($21 + [24]) + [16])) = (int_64)1398362884
	*($21 + [32]) = (int_64)0
	CALL eosio_assert([1], [576])
	$19 = (int_64)5462355
	
.LOOP $label$10:
	$20 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $19) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$5 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$5 = [0]
	
.LABEL $label$8
	CALL eosio_assert($5, [640])
	*(($21 + [56])) = [0]
	*($21 + [48]) = (int_64)0
	$7 = *(($2 + [56]))
	CALL eosio_assert([1], [576])
	$19 = (uint_64)$7 >> (uint_64)(int_64)8)
	
.LOOP $label$14:
	$10 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $19) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	
.LOOP $label$16:
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	$10 = [1]
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	CALL eosio_assert($10, [640])
	$8 = *(($3 + [20]))
	$20 = *($3 + [16])
	if ( ((int_32)$20 == (int_32)$8) ){ goto $label$18 }
	$9 = ($0 + [40])
	$2 = (($21 + [24]) + [24])
	$14 = (($21 + [24]) + [16])
	$15 = ($0 + [48])
	$3 = ($0 + [44])
	$10 = (($21 + [24]) + [8])
	$13 = ($10 + [12])
	
.LOOP $label$19:
	$5 = *($20)
	if ( ($5 == 0) ){ goto $label$21 }
	$5 = (*($4) + ($5 << [4]))
	*($13) = *(($5 + [-4]))
	*(($10 + [8])) = *(($5 + [-8]))
	*(($10 + [4])) = *(($5 + [-12]))
	*($10) = *(($5 + [-16]))
	goto $label$20 
	
.LABEL $label$21
	*($14) = $7
	*($10) = (int_64)0
	
.LABEL $label$20
	*($21 + [24]) = *($20)
	*($21 + [25]) = *(($20 + [29]))
	*($21 + [26]) = *(($20 + [28]))
	$5 = ($20 + [4])
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$22 }
	CALL $158($2, *($5), *(($20 + [8])))
	
.LABEL $label$22
	$20 = *($3)
	if ( ((uint_32)$20 >= (uint_32)*($15)) ){ goto $label$24 }
	*($20) = *($21 + [24])
	*(($20 + [16])) = *($14)
	*(($20 + [8])) = *($10)
	*($20 + [24]) = [0]
	*(($16 = ($20 + [28]))) = [0]
	*(($17 = ($20 + [32]))) = [0]
	$18 = (($21 + [24]) + [28])
	$12 = (*($18) - *($2))
	if ( ($12 == 0) ){ goto $label$25 }
	$11 = ($20 + [24])
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$17 }
	$20 = CALL $329($12)
	*($11) = $20
	*($17) = ($20 + $12)
	*($16) = $20
	$17 = *($2)
	$12 = (*($18) - $17)
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$25 }
	CALL memcpy($20, $17, $12)
	*($16) = (*($16) + $12)
	
.LABEL $label$25
	*($3) = (*($3) + [40])
	goto $label$23 
	
.LABEL $label$24
	CALL $161($9, ($21 + [24]))
	
.LABEL $label$23
	$20 = ($5 + [28])
	if ( ((int_32)$20 != (int_32)$8) ){ goto $label$19 }
	
.LABEL $label$18
	$19 = *($1)
	*($21 + [16]) = $0
	CALL $160(($21 + [8]), $6, $19, ($21 + [16]))
	$20 = *(($21 + [48]))
	if ( ($20 == 0) ){ goto $label$26 }
	*(($21 + [52])) = $20
	CALL $330($20)
	
.LABEL $label$26
	*([0] + [4]) = ($21 + [64])
	return (unreachable)
	
.LABEL $label$17
	CALL $352($11)
}

void .FUNC $132 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [176])
	*([0] + [4]) = $13
	$10 = (int_64)0
	*(($13 + [56])) = (int_64)0
	*(($13 + [64])) = (int_64)0
	*(($13 + [80])) = (int_64)0
	*((($13 + [32]) + [56])) = [0]
	*($13 + [48]) = (int_64)0
	*($13 + [72]) = (int_64)0
	*(($13 + [92])) = [0]
	$8 = CALL $147(($13 + [96]))
	*(($13 + [160])) = [0]
	*($13 + [152]) = (int_64)0
	*($13 + [32]) = *($1)
	*($13 + [40]) = *($1 + [8])
	CALL $332(($13 + [48]), ($1 + [104]))
	CALL $332(($13 + [60]), $2)
	CALL $332(($13 + [72]), $3)
	CALL $332(($13 + [84]), $4)
	CALL memcpy($8, $6, [56])
	$1 = ($13 + [152])
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	CALL $148($1, *($5), *($5 + [4]))
	
.LABEL $label$1
	*($13 + [168]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$7 = *($0)
	$9 = (int_64)59
	$1 = [1376]
	$11 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$7 }
	$5 = *($1)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$5 = ($5 + [165])
	goto $label$5 
	
.LABEL $label$7
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$3
	$1 = ($1 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$2 }
	*($13 + [24]) = $11
	*($13 + [16]) = $7
	$10 = (int_64)0
	$12 = (int_64)59
	$1 = [1392]
	$11 = (int_64)0
	
.LOOP $label$8:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$9 }
	$5 = *($1)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$9
	$1 = ($1 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$8 }
	*($13 + [8]) = $11
	$10 = (int_64)0
	$9 = (int_64)59
	$1 = [1936]
	$11 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$10 > (uint_64)(int_64)8) ){ goto $label$17 }
	$5 = *($1)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$5 = ($5 + [165])
	goto $label$15 
	
.LABEL $label$17
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$13
	$1 = ($1 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$12 }
	*($13) = $11
	CALL $149($0, ($13 + [16]), ($13 + [8]), $13, ($13 + [32]))
	$6 = *(($13 + [152]))
	if ( ($6 == 0) ){ goto $label$18 }
	$1 = $6
	$4 = ($13 + [156])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$19 }
	$0 = ([0] - $6)
	$1 = ($5 + [-16])
	
.LOOP $label$20:
	$5 = *($1)
	if ( ($5 == 0) ){ goto $label$21 }
	*(($1 + [4])) = $5
	CALL $330($5)
	
.LABEL $label$21
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $0) != (int_32)[-16]) ){ goto $label$20 }
	$1 = *(($13 + [152]))
	
.LABEL $label$19
	*($4) = $6
	CALL $330($1)
	
.LABEL $label$18
	if ( ((*(($13 + [84])) & [1]) == 0) ){ goto $label$22 }
	CALL $330(*(($13 + [92])))
	
.LABEL $label$22
	if ( ((*(($13 + [72])) & [1]) == 0) ){ goto $label$23 }
	CALL $330(*(($13 + [80])))
	
.LABEL $label$23
	if ( ((*(($13 + [60])) & [1]) == 0) ){ goto $label$24 }
	CALL $330(*(($13 + [68])))
	
.LABEL $label$24
	if ( ((*(($13 + [48])) & [1]) == 0) ){ goto $label$25 }
	CALL $330(*(($13 + [56])))
	
.LABEL $label$25
	*([0] + [4]) = ($13 + [176])
}

void .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [28])) = [0]
	*(($6 + [32])) = [0]
	*($6 + [12]) = [0]
	*($6 + [16]) = [0]
	*($6 + [20]) = [0]
	*($6 + [24]) = [0]
	*($6) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [36]) = [0]
	*(($6 + [40])) = [0]
	*(($6 + [44])) = [0]
	*($6 + [48]) = [0]
	*(($6 + [52])) = [0]
	*(($6 + [56])) = [0]
	CALL $139(($6 + [36]), $1, $2, $3, $4)
	CALL $61(($6 + [80]), $0)
	*($6 + [88]) = ((int_64)*($6 + [88]) + (int_64)1)
	CALL $62(($0 + [208]), ($6 + [80]), *($0))
	$5 = *($6 + [88])
	*($6 + [88]) = (int_64)0
	*($6 + [80]) = $5
	$5 = *($0)
	CALL $78(($6 + [64]), $6)
	$0 = *($6 + [64])
	CALL send_deferred(($6 + [80]), $5, $0, (*($6 + [68]) - $0), [0])
	$0 = *($6 + [64])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [68]) = $0
	CALL $330($0)
	
.LABEL $label$1
	CALL $79($6)
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	$10 = *($1)
	$2 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$10) ){ goto $label$1 }
	$8 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [8])
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [136]) == (int_32)$4), [720])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4816283142123945984, $10)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $74($4, $8)
	CALL eosio_assert(((int_32)*($7 + [136]) == (int_32)$4), [720])
	
.LABEL $label$3
	$10 = *($1 + [48])
	*($13 + [72]) = ((int_64)*($1 + [8]) + (int_64)(CASTING uint_64)(uint_32 ((int_64)$10 > (int_64)0)))
	$12 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [784])
	CALL $135($4, $7, $12, ($13 + [8]))
	if ( ((int_64)$10 < (int_64)1) ){ goto $label$5 }
	*($13 + [64]) = ($0 + [48])
	CALL $96(($13 + [56]), ($13 + [64]), $1)
	$10 = *($13 + [72])
	if ( (uint_64)((int_64))($10 - *(*($13 + [60]) + [16])) <= (int_64)101) ){ goto $label$5 }
	$6 = ((int_64)$10 + (int_64)-50)
	$5 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$7 = [1376]
	$11 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$11 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$4 = ($4 + [165])
	goto $label$9 
	
.LABEL $label$11
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$7
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$6 }
	*($13 + [48]) = $11
	*($13 + [40]) = $5
	$10 = (int_64)0
	$9 = (int_64)59
	$7 = [1488]
	$11 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$10 > (uint_64)(int_64)9) ){ goto $label$17 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$4 = ($4 + [165])
	goto $label$15 
	
.LABEL $label$17
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$13
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$12 }
	*($13 + [32]) = $11
	*($13 + [16]) = $6
	*($13 + [24]) = (int_64)1
	*($13 + [8]) = *($1)
	CALL $99($0, ($13 + [40]), $0, ($13 + [32]), ($13 + [8]))
	
.LABEL $label$5
	$10 = *($1)
	$2 = *(($0 + [312]))
	$8 = *(($0 + [316]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$18 }
	$7 = ($8 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$19:
	if ( ((int_64)*(*($7)) == (int_64)$10) ){ goto $label$18 }
	$8 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$19 }
	
.LABEL $label$18
	$7 = ($0 + [288])
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$22 }
	$4 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)$7), [720])
	if ( $4 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$4 = CALL db_find_i64(*(($0 + [288])), *(($0 + [296])), (int_64)4732891782226903040, $10)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$20 }
	$4 = CALL $129($7, $4)
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)$7), [720])
	
.LABEL $label$21
	CALL eosio_assert([1], [1440])
	CALL eosio_assert([1], [1680])
	$8 = CALL db_next_i64(*($4 + [32]), ($13 + [8]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$23 }
	CALL $129($7, $8)
	
.LABEL $label$23
	CALL $136($7, $4)
	
.LABEL $label$20
	*($13 + [8]) = [3]
	CALL $137($0, $1, ($13 + [72]), ($13 + [8]))
	CALL $138($0, $1, ($13 + [72]))
	*([0] + [4]) = ($13 + [80])
}

void .FUNC $135 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	*($1 + [81]) = [3]
	*(($9 = $8) + [24]) = *($1 + [16])
	$4 = *($1)
	CALL eosio_assert([1], [1024])
	$7 = *($1 + [84])
	$5 = ( *(($1 + [88])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($5 + [99])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *($1 + [104])
	$5 = ( *(($1 + [108])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$7 = ($5 + $7)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($7)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($8 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($9 + [12]) = $8
	*($9 + [8]) = $8
	*($9 + [16]) = ($8 + $7)
	CALL $146(($9 + [8]), $1)
	CALL db_update_i64(*($1 + [140]), $2, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($9 + [40]) = *(($1 + [16]))
	if ( (CALL memcmp(($9 + [24]), ($9 + [40]), [8]) == 0) ){ goto $label$7 }
	$1 = ($1 + [144])
	$7 = *($1)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$8 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4816283142123945984, ($9 + [32]), $4)
	*($1) = $7
	
.LABEL $label$8
	CALL db_idx64_update($7, $2, ($9 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [1504])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1552])
	$9 = *($0 + [24])
	$4 = ($0 + [28])
	$10 = *($4)
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $9)
	$11 = ($10 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($11)) == (int_64)$2) ){ goto $label$1 }
	$10 = $11
	$7 = ($11 + [-24])
	$11 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$10 != (int_32)$9), [1616])
	$9 = ($10 + [-24])
	$3 = *($4)
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$11 = *($10)
	*($10) = [0]
	$4 = *($9)
	*($9) = $11
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$7 }
	$11 = $5
	$8 = ($4 + [20])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$8 }
	$6 = ([0] - $5)
	$11 = ($7 + [-28])
	
.LOOP $label$9:
	$7 = *(($11 + [12]))
	if ( ($7 == 0) ){ goto $label$10 }
	*(($11 + [16])) = $7
	CALL $330($7)
	
.LABEL $label$10
	$7 = *($11)
	if ( ($7 == 0) ){ goto $label$11 }
	*(($11 + [4])) = $7
	CALL $330($7)
	
.LABEL $label$11
	$11 = ($11 + [-32])
	if ( ((int_32)($11 + $6) != (int_32)[-28]) ){ goto $label$9 }
	$11 = *(($4 + [16]))
	
.LABEL $label$8
	*($8) = $5
	CALL $330($11)
	
.LABEL $label$7
	CALL $330($4)
	
.LABEL $label$6
	*($9 + [8]) = *($10 + [8])
	*(($9 + [16])) = *(($10 + [16]))
	$9 = ($9 + [24])
	$10 = ($10 + [24])
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$5 }
	$10 = *(($0 + [28]))
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$12:
	$10 = ($10 + [-24])
	$4 = *($10)
	*($10) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$14 }
	$11 = $5
	$3 = ($4 + [20])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$15 }
	$6 = ([0] - $5)
	$11 = ($7 + [-28])
	
.LOOP $label$16:
	$7 = *(($11 + [12]))
	if ( ($7 == 0) ){ goto $label$17 }
	*(($11 + [16])) = $7
	CALL $330($7)
	
.LABEL $label$17
	$7 = *($11)
	if ( ($7 == 0) ){ goto $label$18 }
	*(($11 + [4])) = $7
	CALL $330($7)
	
.LABEL $label$18
	$11 = ($11 + [-32])
	if ( ((int_32)($11 + $6) != (int_32)[-28]) ){ goto $label$16 }
	$11 = *(($4 + [16]))
	
.LABEL $label$15
	*($3) = $5
	CALL $330($11)
	
.LABEL $label$14
	CALL $330($4)
	
.LABEL $label$13
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$12 }
	
.LABEL $label$3
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [32]))
}

void .FUNC $137 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$4 = *($1)
	$5 = *(($0 + [272]))
	$9 = *(($0 + [276]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$4) ){ goto $label$1 }
	$9 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = ($0 + [248])
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$7 }
	$7 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$8), [720])
	$4 = *($0)
	if ( $7 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$7 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)-4816276791545036800, $4)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$5 }
	$7 = CALL $140($8, $7)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$8), [720])
	$4 = *($0)
	
.LABEL $label$6
	*($10 + [20]) = $3
	*($10 + [16]) = $2
	CALL eosio_assert([1], [784])
	CALL $142($8, $7, $4, ($10 + [16]))
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0)
	
.LABEL $label$4
	*($10 + [20]) = $2
	*($10 + [16]) = $1
	*($10 + [24]) = $3
	CALL $141(($10 + [8]), $8, $4, ($10 + [16]))
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [32])
}

void .FUNC _ZN6niuniu7stopbetERKyS1_ (int_32 $0, int_32 $1, int_32 $2)
{
	CALL require_auth(*($0))
	CALL $280($0, $1, $2)
}

int_64 .FUNC __stdio_seek (int_32 $0, int_64 $1, int_32 $2)
{
	return (int_64)-1
}

void .FUNC $300 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *($1)
	$3 = *(($0 + [152]))
	$6 = *(($0 + [156]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	$1 = ($6 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($1)) == (int_64)$2) ){ goto $label$1 }
	$6 = $1
	$5 = ($1 + [-24])
	$1 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [128])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$5 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$1), [720])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)4154295086852603904, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $263($1, $5)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$1), [720])
	
.LABEL $label$4
	CALL eosio_assert([1], [1440])
	CALL eosio_assert([1], [1680])
	$6 = CALL db_next_i64(*($5 + [44]), ($7 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL $263($1, $6)
	
.LABEL $label$6
	CALL $257($1, $5)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $208 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	$8 = [0]
	*(($5 = ($0 + [24]))) = [0]
	$9 = CALL $329([16])
	*($0 + [16]) = $9
	*(($6 = ($0 + [20]))) = $9
	$7 = ($9 + [16])
	*($5) = $7
	*(($9 + [8])) = *(($1 + [8]))
	*($9) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($9 = ($0 + [32]))) = [0]
	*(($0 + [36])) = [0]
	*($10 + [16]) = [0]
	*($10 + [24]) = ($10 + [16])
	*($10) = $4
	CALL $209($10, ($10 + [24]))
	$1 = *($10 + [16])
	if ( ($1 == 0) ){ goto $label$2 }
	$5 = ($0 + [28])
	CALL $81($5, $1)
	$8 = *($9)
	$9 = *($5)
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	*($10) = $9
	*($10 + [8]) = $8
	CALL eosio_assert(((int_32)($8 - $9) > (int_32)[7]), [896])
	CALL memcpy($9, $4, [8])
	$1 = ($9 + [8])
	CALL eosio_assert(((int_32)($8 - $1) > (int_32)[7]), [896])
	CALL memcpy($1, ($4 + [8]), [8])
	*($10 + [4]) = ($9 + [16])
	CALL $90($10, ($4 + [16]))
	CALL $90($10, ($4 + [28]))
	CALL $90($10, ($4 + [40]))
	*([0] + [4]) = ($10 + [32])
	return $0
}

void .FUNC $209 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	*(($2 = *($1))) = (*($2) + [8])
	$2 = *($0)
	*(($0 = *($1))) = (*($0) + [8])
	$0 = *($2 + [16])
	$5 = (CASTING uint_64)(uint_32 ( *(($2 + [20])) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$3 = *($1)
	$0 = *($3)
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($3) = $0
	$4 = *(($2 + [16]))
	$4 = ( *(($2 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$2 }
	*($3) = ($4 + $0)
	
.LABEL $label$2
	$0 = *($2 + [28])
	$5 = (CASTING uint_64)(uint_32 ( *(($2 + [32])) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$3 = *($1)
	$0 = *($3)
	
.LOOP $label$3:
	$0 = ($0 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($3) = $0
	$4 = *(($2 + [28]))
	$4 = ( *(($2 + [32])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$4 }
	*($3) = ($4 + $0)
	
.LABEL $label$4
	$0 = *($2 + [40])
	$5 = (CASTING uint_64)(uint_32 ( *(($2 + [44])) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$1 = *($1)
	$0 = *($1)
	
.LOOP $label$5:
	$0 = ($0 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($1) = $0
	$2 = *(($2 + [40]))
	$2 = ( *(($2 + [44])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$6 }
	*($1) = ($2 + $0)
	
.LABEL $label$6
}

void .FUNC $202 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	float_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [96])
	*([0] + [4]) = $10
	*($10 + [80]) = (int_64)0
	*($10 + [88]) = [0]
	$2 = (($10 + [80]) | [1])
	$8 = *($1)
	
.LOOP $label$1:
	$5 = (CASTING uint_32)(uint_64 ((uint_64)$8 % (uint_64)(int_64)10))
	CALL $6(($10 + [8]), ( ($5 | [48]) ? ($5 + [55]) : ($5 <= [10]) ), ($10 + [80]))
	$3 = ((uint_64)$8 / (uint_64)(int_64)10)
	if ( (*($10 + [80]) & [1]) ){ goto $label$3 }
	*($10 + [80]) = [0]
	goto $label$2 
	
.LABEL $label$3
	*(*((($10 + [80]) + [8]))) = [0]
	*($10 + [84]) = [0]
	
.LABEL $label$2
	CALL $334(($10 + [80]), [0])
	*((($10 + [80]) + [8])) = *((($10 + [8]) + [8]))
	*($10 + [80]) = *($10 + [8])
	$5 = ((uint_64)$8 > (uint_64)(int_64)9)
	$8 = $3
	if ( $5 ){ goto $label$1 }
	*($10 + [64]) = (int_64)0
	*($10 + [72]) = [0]
	$4 = (($10 + [64]) | [1])
	$8 = *($1 + [1])
	
.LOOP $label$4:
	$5 = (CASTING uint_32)(uint_64 ((uint_64)$8 % (uint_64)(int_64)10))
	CALL $6(($10 + [8]), ( ($5 | [48]) ? ($5 + [55]) : ($5 <= [10]) ), ($10 + [64]))
	$3 = ((uint_64)$8 / (uint_64)(int_64)10)
	if ( (*($10 + [64]) & [1]) ){ goto $label$6 }
	*($10 + [64]) = [0]
	goto $label$5 
	
.LABEL $label$6
	*(*((($10 + [64]) + [8]))) = [0]
	*($10 + [68]) = [0]
	
.LABEL $label$5
	CALL $334(($10 + [64]), [0])
	*((($10 + [64]) + [8])) = *((($10 + [8]) + [8]))
	*($10 + [64]) = *($10 + [8])
	$5 = ((uint_64)$8 > (uint_64)(int_64)9)
	$8 = $3
	if ( $5 ){ goto $label$4 }
	$5 = *($10 + [64])
	$6 = ($5 & [1])
	$9 = (($10 + [64]) + [8])
	CALL $336(($10 + [80]), ( *($9) ? $4 : $6 ), ( *($10 + [68]) ? uint_32($5 >> [1]) : $6 ))
	if ( ((*($10 + [64]) & [1]) == 0) ){ goto $label$7 }
	CALL $330(*($9))
	
.LABEL $label$7
	*($10 + [64]) = (int_64)0
	*($10 + [72]) = [0]
	$4 = (($10 + [64]) | [1])
	$8 = *($1 + [2])
	
.LOOP $label$8:
	$5 = (CASTING uint_32)(uint_64 ((uint_64)$8 % (uint_64)(int_64)10))
	CALL $6(($10 + [8]), ( ($5 | [48]) ? ($5 + [55]) : ($5 <= [10]) ), ($10 + [64]))
	$3 = ((uint_64)$8 / (uint_64)(int_64)10)
	if ( (*($10 + [64]) & [1]) ){ goto $label$10 }
	*($10 + [64]) = [0]
	goto $label$9 
	
.LABEL $label$10
	*(*($9)) = [0]
	*($10 + [68]) = [0]
	
.LABEL $label$9
	CALL $334(($10 + [64]), [0])
	*($9) = *((($10 + [8]) + [8]))
	*($10 + [64]) = *($10 + [8])
	$5 = ((uint_64)$8 > (uint_64)(int_64)9)
	$8 = $3
	if ( $5 ){ goto $label$8 }
	$5 = *($10 + [64])
	$6 = ($5 & [1])
	$9 = (($10 + [64]) + [8])
	CALL $336(($10 + [80]), ( *($9) ? $4 : $6 ), ( *($10 + [68]) ? uint_32($5 >> [1]) : $6 ))
	if ( ((*($10 + [64]) & [1]) == 0) ){ goto $label$11 }
	CALL $330(*($9))
	
.LABEL $label$11
	*($10 + [64]) = (int_64)0
	*($10 + [72]) = [0]
	$4 = (($10 + [64]) | [1])
	$8 = *($1 + [3])
	
.LOOP $label$12:
	$5 = (CASTING uint_32)(uint_64 ((uint_64)$8 % (uint_64)(int_64)10))
	CALL $6(($10 + [8]), ( ($5 | [48]) ? ($5 + [55]) : ($5 <= [10]) ), ($10 + [64]))
	$3 = ((uint_64)$8 / (uint_64)(int_64)10)
	if ( (*($10 + [64]) & [1]) ){ goto $label$14 }
	*($10 + [64]) = [0]
	goto $label$13 
	
.LABEL $label$14
	*(*($9)) = [0]
	*($10 + [68]) = [0]
	
.LABEL $label$13
	CALL $334(($10 + [64]), [0])
	*($9) = *((($10 + [8]) + [8]))
	*($10 + [64]) = *($10 + [8])
	$5 = ((uint_64)$8 > (uint_64)(int_64)9)
	$8 = $3
	if ( $5 ){ goto $label$12 }
	$5 = *($10 + [64])
	$9 = ($5 & [1])
	$1 = ($10 + [72])
	CALL $336(($10 + [80]), ( *($1) ? $4 : $9 ), ( *($10 + [68]) ? uint_32($5 >> [1]) : $9 ))
	if ( ((*($10 + [64]) & [1]) == 0) ){ goto $label$15 }
	CALL $330(*($1))
	
.LABEL $label$15
	$9 = ($5 & [1])
	$5 = *($10 + [80])
	$5 = (( *($10 + [84]) ? uint_32($5 >> [1]) : $9 ) + [-1])
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$17 }
	$9 = ( *(($10 + [88])) ? $2 : $9 )
	$8 = (int_64)0
	
.LOOP $label$18:
	$7 = CALL pow((float_64)10, (CASTING float_64)(int_32 $5))
	$8 = ((int_64)((int_64)((int_64)*($9) + (int_64)-48) * (int_64)(Rounds 0)($7)) + (int_64)$8)
	$9 = ($9 + [1])
	$5 = ($5 + [-1])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$8 = (int_64)0
	
.LABEL $label$16
	$3 = *($0 + [32])
	$8 = ((int_64)((uint_64)$8 % (uint_64)$3) + (int_64)1)
	if ( ((int_64)$8 == (int_64)$3) ){ goto $label$19 }
	$5 = [0]
	
.LOOP $label$20:
	$8 = ( (int_64)0 ? $8 : ((int_64)$8 == (int_64)52) )
	*((($10 + [8]) + $5)) = *((($0 + (CASTING uint_32)(uint_64 $8)) + [36]))
	$8 = ((int_64)$8 + (int_64)1)
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[52]) ){ goto $label$20 }
	CALL memcpy(($0 + [36]), ($10 + [8]), [52])
	
.LABEL $label$19
	if ( ((*($10 + [80]) & [1]) == 0) ){ goto $label$21 }
	CALL $330(*(($10 + [88])))
	
.LABEL $label$21
	*([0] + [4]) = ($10 + [96])
}

void .FUNC $203 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [176])
	*([0] + [4]) = $14
	*((($14 + [136]) + [12])) = (int_64)0
	*((($14 + [136]) + [20])) = (int_64)0
	*($14 + [140 align=4]) = (int_64)0
	*((($14 + [104]) + [12])) = (int_64)0
	*((($14 + [104]) + [20])) = (int_64)0
	*($14 + [108 align=4]) = (int_64)0
	*((($14 + [72]) + [12])) = (int_64)0
	*((($14 + [72]) + [20])) = (int_64)0
	*($14 + [76 align=4]) = (int_64)0
	*((($14 + [40]) + [12])) = (int_64)0
	*((($14 + [40]) + [20])) = (int_64)0
	*($14 + [44 align=4]) = (int_64)0
	*((($14 + [8]) + [12])) = (int_64)0
	*((($14 + [8]) + [20])) = (int_64)0
	*($14 + [12 align=4]) = (int_64)0
	$2 = ($0 + [16])
	$11 = ($0 + [20])
	$12 = *($11)
	if ( ((uint_32)$12 >= (uint_32)*(($0 + [24]))) ){ goto $label$2 }
	CALL $167($12, ($14 + [136]))
	$12 = (*($11) + [32])
	*($11) = $12
	goto $label$1 
	
.LABEL $label$2
	CALL $214($2, ($14 + [136]))
	$12 = *($11)
	
.LABEL $label$1
	if ( ((uint_32)$12 >= (uint_32)*(($0 + [24]))) ){ goto $label$4 }
	CALL $167($12, ($14 + [104]))
	$11 = (*($11) + [32])
	*(($11 = ($0 + [20]))) = $11
	goto $label$3 
	
.LABEL $label$4
	CALL $214($2, ($14 + [104]))
	$11 = *(($0 + [20]))
	
.LABEL $label$3
	if ( ((uint_32)$11 >= (uint_32)*(($0 + [24]))) ){ goto $label$6 }
	CALL $167($11, ($14 + [72]))
	$11 = (*($11) + [32])
	*(($11 = ($0 + [20]))) = $11
	goto $label$5 
	
.LABEL $label$6
	CALL $214($2, ($14 + [72]))
	$11 = *(($0 + [20]))
	
.LABEL $label$5
	if ( ((uint_32)$11 >= (uint_32)*(($0 + [24]))) ){ goto $label$8 }
	CALL $167($11, ($14 + [40]))
	$11 = (*($11) + [32])
	*(($11 = ($0 + [20]))) = $11
	goto $label$7 
	
.LABEL $label$8
	CALL $214($2, ($14 + [40]))
	$11 = *(($0 + [20]))
	
.LABEL $label$7
	if ( ((uint_32)$11 >= (uint_32)*(($0 + [24]))) ){ goto $label$10 }
	CALL $167($11, ($14 + [8]))
	*(($11 = ($0 + [20]))) = (*($11) + [32])
	goto $label$9 
	
.LABEL $label$10
	CALL $214($2, ($14 + [8]))
	
.LABEL $label$9
	$7 = ($0 + [36])
	$0 = [0]
	
.LOOP $label$11:
	$12 = ((uint_32)$0 % (uint_32)[5])
	if ( ((uint_32)$0 >= (uint_32)[5]) ){ goto $label$13 }
	*((($3 = *($2)) + ($12 << [5]))) = $0
	goto $label$12 
	
.LABEL $label$13
	$3 = *($2)
	
.LABEL $label$12
	$11 = ($7 + $0)
	$13 = ($12 << [5])
	$12 = ($3 + $13)
	$3 = ($12 + [8])
	$6 = *($3)
	if ( ((uint_32)$6 >= (uint_32)*(($12 + [12]))) ){ goto $label$15 }
	*($6) = *($11)
	*($3) = (*($3) + [1])
	goto $label$14 
	
.LABEL $label$15
	CALL $215(($12 + [4]), $11)
	
.LABEL $label$14
	$11 = ((uint_32)$11 % (uint_32)[13])
	$11 = *($11)
	*($14 + [168]) = (((uint_32)$11 / (uint_32)[13]) + ((int_32)$11 != (int_32)[0]))
	$11 = ( $11 ? [13] : $11 )
	*($14 + [169]) = $11
	*($14 + [170]) = ( $11 ? [10] : ($11 <= [10]) )
	$11 = (*($2) + $13)
	$12 = ($11 + [20])
	$13 = *($12)
	if ( ((uint_32)$13 >= (uint_32)*(($11 + [24]))) ){ goto $label$17 }
	*($13) = *($14 + [168])
	*(($13 + [2])) = *($14 + [170])
	*($12) = (*($12) + [3])
	goto $label$16 
	
.LABEL $label$17
	CALL $216(($11 + [16]), ($14 + [168]))
	
.LABEL $label$16
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[25]) ){ goto $label$11 }
	$8 = [0]
	
.LOOP $label$18:
	$0 = (*($2) + ($8 << [5]))
	$11 = (*(($0 + [20])) - *($0 + [16]))
	$12 = ((int_32)$11 / (int_32)[3])
	if ( ((int_32)$11 < (int_32)[4]) ){ goto $label$19 }
	$3 = ($0 + [16])
	$10 = [0]
	$4 = ($12 + [-1])
	$9 = $4
	
.LOOP $label$20:
	if ( ((int_32)$4 <= (int_32)$10) ){ goto $label$21 }
	$12 = [0]
	$11 = [3]
	
.LOOP $label$22:
	$5 = $12
	$12 = ($5 + [1])
	$6 = *(($0 + [1]))
	$7 = *($3)
	$0 = ($7 + $11)
	$13 = *(($0 + [-2]))
	if ( ((uint_32)$13 <= (uint_32)$6) ){ goto $label$25 }
	$13 = ($0 + [-3])
	goto $label$24 
	
.LABEL $label$25
	if ( ((int_32)$13 != (int_32)$6) ){ goto $label$23 }
	if ( ((uint_32)*(($0 + [-3])) <= (uint_32)*($0)) ){ goto $label$23 }
	$0 = ($7 + ((int_32)$12 * (int_32)[3]))
	$13 = ($7 + ((int_32)$5 * (int_32)[3]))
	
.LABEL $label$24
	$6 = *($13)
	*($13) = *($0)
	$13 = ($13 + [2])
	$7 = *($13)
	*($13) = *(($0 + [2]))
	*($14 + [168]) = $6
	*($14 + [170]) = $7
	*(($0 = (*($3) + $11))) = *($14 + [168])
	*(($0 + [2])) = *($14 + [170])
	
.LABEL $label$23
	$11 = ($11 + [3])
	if ( ((int_32)$9 != (int_32)$12) ){ goto $label$22 }
	
.LABEL $label$21
	$9 = ($9 + [-1])
	$10 = ($10 + [1])
	if ( ((int_32)$4 > (int_32)$10) ){ goto $label$20 }
	
.LABEL $label$19
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)[5]) ){ goto $label$18 }
	$0 = *(($14 + [24]))
	if ( ($0 == 0) ){ goto $label$26 }
	*(($14 + [28])) = $0
	CALL $330($0)
	
.LABEL $label$26
	$0 = *($14 + [12])
	if ( ($0 == 0) ){ goto $label$27 }
	*(($14 + [16])) = $0
	CALL $330($0)
	
.LABEL $label$27
	$0 = *(($14 + [56]))
	if ( ($0 == 0) ){ goto $label$28 }
	*(($14 + [60])) = $0
	CALL $330($0)
	
.LABEL $label$28
	$0 = *($14 + [44])
	if ( ($0 == 0) ){ goto $label$29 }
	*(($14 + [48])) = $0
	CALL $330($0)
	
.LABEL $label$29
	$0 = *(($14 + [88]))
	if ( ($0 == 0) ){ goto $label$30 }
	*(($14 + [92])) = $0
	CALL $330($0)
	
.LABEL $label$30
	$0 = *($14 + [76])
	if ( ($0 == 0) ){ goto $label$31 }
	*(($14 + [80])) = $0
	CALL $330($0)
	
.LABEL $label$31
	$0 = *(($14 + [120]))
	if ( ($0 == 0) ){ goto $label$32 }
	*(($14 + [124])) = $0
	CALL $330($0)
	
.LABEL $label$32
	$0 = *($14 + [108])
	if ( ($0 == 0) ){ goto $label$33 }
	*(($14 + [112])) = $0
	CALL $330($0)
	
.LABEL $label$33
	$0 = *(($14 + [152]))
	if ( ($0 == 0) ){ goto $label$34 }
	*(($14 + [156])) = $0
	CALL $330($0)
	
.LABEL $label$34
	$0 = *($14 + [140])
	if ( ($0 == 0) ){ goto $label$35 }
	*(($14 + [144])) = $0
	CALL $330($0)
	
.LABEL $label$35
	*([0] + [4]) = ($14 + [176])
}

void .FUNC $200 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	*($7 + [88]) = [0]
	*($7 + [80]) = (int_64)0
	*($7 + [72]) = [0]
	*($7 + [64]) = (int_64)0
	*($7 + [56]) = [0]
	*($7 + [48]) = (int_64)0
	*(($7 + [40])) = [0]
	*($7 + [32]) = (int_64)0
	$3 = CALL strlen([2528])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($7 + [32]) = ($3 << [1])
	$5 = (($7 + [32]) | [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $329($4)
	*($7 + [32]) = ($4 | [1])
	*($7 + [40]) = $5
	*($7 + [36]) = $3
	
.LABEL $label$3
	CALL memcpy($5, [2528], $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	CALL $354($7, $1, [0], [25], $1)
	if ( (*($7 + [80]) & [1]) ){ goto $label$6 }
	*($7 + [80]) = [0]
	goto $label$5 
	
.LABEL $label$6
	*(*(($7 + [88]))) = [0]
	*($7 + [84]) = [0]
	
.LABEL $label$5
	CALL $334(($7 + [80]), [0])
	*((($7 + [80]) + [8])) = *(($7 + [8]))
	*($7 + [80]) = *($7)
	CALL $354($7, $1, [25], [25], $1)
	if ( (*($7 + [64]) & [1]) ){ goto $label$8 }
	*($7 + [64]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($7 + [64]) + [8]))) = [0]
	*($7 + [68]) = [0]
	
.LABEL $label$7
	CALL $334(($7 + [64]), [0])
	*((($7 + [64]) + [8])) = *(($7 + [8]))
	*($7 + [64]) = *($7)
	CALL $354($7, $1, [50], [25], $1)
	if ( (*($7 + [48]) & [1]) ){ goto $label$10 }
	*($7 + [48]) = [0]
	goto $label$9 
	
.LABEL $label$10
	*(*((($7 + [48]) + [8]))) = [0]
	*($7 + [52]) = [0]
	
.LABEL $label$9
	CALL $334(($7 + [48]), [0])
	*((($7 + [48]) + [8])) = *(($7 + [8]))
	*($7 + [48]) = *($7)
	CALL $354($7, $1, [75], [25], $1)
	if ( (*($7 + [32]) & [1]) ){ goto $label$12 }
	*($7 + [32]) = [0]
	$6 = (($7 + [32]) | [1])
	goto $label$11 
	
.LABEL $label$12
	*(*($7 + [40])) = [0]
	*($7 + [36]) = [0]
	$6 = (($7 + [32]) | [1])
	
.LABEL $label$11
	CALL $334(($7 + [32]), [0])
	*(($5 = (($7 + [32]) + [8]))) = *(($7 + [8]))
	*($7 + [32]) = *($7)
	$1 = ( *((($7 + [80]) + [8])) ? (($7 + [80]) | [1]) : (*($7 + [80]) & [1]) )
	CALL sha256($1, CALL $401($1), $7)
	$1 = ($7 + [24])
	*(($0 + [120])) = *($1)
	$3 = ($7 + [16])
	*(($0 + [112])) = *($3)
	*(($0 + [104])) = *($7 + [8])
	*($0 + [96]) = *($7)
	$4 = ( *((($7 + [64]) + [8])) ? (($7 + [64]) | [1]) : (*($7 + [64]) & [1]) )
	CALL sha256($4, CALL $401($4), $7)
	*(($0 + [152])) = *($1)
	*(($0 + [144])) = *($3)
	*(($0 + [136])) = *($7 + [8])
	*($0 + [128]) = *($7)
	$4 = ( *((($7 + [48]) + [8])) ? (($7 + [48]) | [1]) : (*($7 + [48]) & [1]) )
	CALL sha256($4, CALL $401($4), $7)
	*(($0 + [184])) = *($1)
	*(($0 + [176])) = *($3)
	*(($0 + [168])) = *($7 + [8])
	*($0 + [160]) = *($7)
	$4 = ( *($5) ? $6 : (*($7 + [32]) & [1]) )
	CALL sha256($4, CALL $401($4), $7)
	*(($0 + [216])) = *($1)
	*(($0 + [208])) = *($3)
	*(($0 + [200])) = *($7 + [8])
	*($0 + [192]) = *($7)
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL $330(*($5))
	
.LABEL $label$13
	if ( ((*($7 + [48]) & [1]) == 0) ){ goto $label$14 }
	CALL $330(*(($7 + [56])))
	
.LABEL $label$14
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$15 }
	CALL $330(*(($7 + [72])))
	
.LABEL $label$15
	if ( ((*($7 + [80]) & [1]) == 0) ){ goto $label$16 }
	CALL $330(*(($7 + [88])))
	
.LABEL $label$16
	*([0] + [4]) = ($7 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $331(($7 + [32]))
}

void .FUNC $201 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($9 + [24])) = [0]
	*($9 + [16]) = (int_64)0
	$7 = CALL strlen([2528])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$4 }
	*($9 + [16]) = ($7 << [1])
	$8 = (($9 + [16]) | [1])
	if ( $7 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($7 + [16]) & [-16])
	$8 = CALL $329($6)
	*($9 + [16]) = ($6 | [1])
	*($9 + [24]) = $8
	*($9 + [20]) = $7
	
.LABEL $label$3
	CALL memcpy($8, [2528], $7)
	
.LABEL $label$2
	*(($8 + $7)) = [0]
	$7 = *($0 + [32])
	$1 = ($7 + [-1])
	if ( ($1 == 0) ){ goto $label$5 }
	$2 = ($9 | [1])
	$8 = [0]
	
.LOOP $label$6:
	$4 = ($8 <= [32])
	$6 = ($0 + $8)
	$5 = ($6 + [128])
	$3 = *(( $5 ? ($6 + [160]) : $4 ))
	CALL _ZNSt3__19to_stringEi(($9 + [32]), *(( ($6 + [96]) ? $5 : $4 )))
	$6 = *($9 + [32])
	$6 = ( *($9 + [36]) ? uint_32($6 >> [1]) : ($6 & [1]) )
	if ( ((int_32)$6 != (int_32)[3]) ){ goto $label$8 }
	$6 = (($9 + [32]) + [8])
	*(($9 + [8])) = *($6)
	*($6) = [0]
	*($9) = *($9 + [32])
	*($9 + [32]) = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	CALL $217($9, ($9 + [32]), ( [2544] ? [2560] : ((int_32)$6 == (int_32)[1]) ))
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $330(*((($9 + [32]) + [8])))
	
.LABEL $label$7
	if ( (*($9 + [16]) & [1]) ){ goto $label$10 }
	*($9 + [16]) = [0]
	goto $label$9 
	
.LABEL $label$10
	*(*((($9 + [16]) + [8]))) = [0]
	*($9 + [20]) = [0]
	
.LABEL $label$9
	CALL $334(($9 + [16]), [0])
	$6 = ($9 + [8])
	*((($9 + [16]) + [8])) = *($6)
	*($9 + [16]) = *($9)
	CALL _ZNSt3__19to_stringEi(($9 + [32]), $3)
	$5 = *($9 + [32])
	$5 = ( *($9 + [36]) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ((int_32)$5 != (int_32)[3]) ){ goto $label$12 }
	$5 = (($9 + [32]) + [8])
	*($6) = *($5)
	*($5) = [0]
	*($9) = *($9 + [32])
	*($9 + [32]) = (int_64)0
	goto $label$11 
	
.LABEL $label$12
	CALL $343($9, ( [2544] ? [2560] : ((int_32)$5 == (int_32)[1]) ), ($9 + [32]))
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $330(*((($9 + [32]) + [8])))
	
.LABEL $label$11
	$5 = *($9)
	$4 = ($5 & [1])
	CALL $336(($9 + [16]), ( *($6) ? $2 : $4 ), ( *($9 + [4]) ? uint_32($5 >> [1]) : $4 ))
	if ( ((*($9) & [1]) == 0) ){ goto $label$13 }
	CALL $330(*($6))
	
.LABEL $label$13
	$6 = CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(($9 + [16]), [0], [10])
	$5 = (($0 + $7) + [35])
	$4 = *($5)
	$6 = (($0 + (CASTING uint_32)(uint_64 ((uint_64)(CASTING int_64)(int_32 $6) % (uint_64)(CASTING uint_64)(uint_32 $7)))) + [36])
	*($5) = *($6)
	*($6) = $4
	$7 = ($7 + [-1])
	$8 = ($8 + [1])
	if ( ((int_32)$1 != (int_32)$8) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((*($9 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL $330(*($9 + [24]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $331(($9 + [16]))
}

void .FUNC $206 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [28])) = [0]
	*(($6 + [32])) = [0]
	*($6 + [12]) = [0]
	*($6 + [16]) = [0]
	*($6 + [20]) = [0]
	*($6 + [24]) = [0]
	*($6) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [36]) = [0]
	*(($6 + [40])) = [0]
	*(($6 + [44])) = [0]
	*($6 + [48]) = [0]
	*(($6 + [52])) = [0]
	*(($6 + [56])) = [0]
	CALL $207(($6 + [36]), $1, $2, $3, $4)
	CALL $61(($6 + [80]), $0)
	*($6 + [88]) = ((int_64)*($6 + [88]) + (int_64)1)
	CALL $62(($0 + [208]), ($6 + [80]), *($0))
	$5 = *($6 + [88])
	*($6 + [88]) = (int_64)0
	*($6 + [80]) = $5
	$5 = *($0)
	CALL $78(($6 + [64]), $6)
	$0 = *($6 + [64])
	CALL send_deferred(($6 + [80]), $5, $0, (*($6 + [68]) - $0), [0])
	$0 = *($6 + [64])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [68]) = $0
	CALL $330($0)
	
.LABEL $label$1
	CALL $79($6)
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $207 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = *($0)
	$9 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$5 = ($9 + [1])
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$7 = ($8 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $329(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	$5 = ($8 + ((int_32)$7 * (int_32)[40]))
	$9 = ($8 + ((int_32)$9 * (int_32)[40]))
	$8 = CALL $208($9, $1, *($2), *($3), $4)
	$6 = ($8 + [40])
	$7 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$6 }
	$4 = ([0] - $7)
	$7 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($7 + [-12]))
	*(($8 + [-40])) = *(($7 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($2 = ($8 + [-16]))) = [0]
	$3 = ($7 + [-4])
	*($1) = *($3)
	*(($8 + [-20])) = *($7)
	$1 = ($7 + [4])
	*($2) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($3) = (int_64)0
	*(($2 = ($8 + [-4]))) = [0]
	$3 = ($7 + [8])
	*($1) = *($3)
	*(($8 + [-8])) = *(($7 + [12]))
	$8 = ($7 + [16])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$9 = ($9 + [-40])
	$8 = $9
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $4) != (int_32)[-20]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $7
	
.LABEL $label$5
	*($0) = $9
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$8 }
	$9 = ([0] - $1)
	$7 = ($7 + [-24])
	
.LOOP $label$9:
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($7 + [16])) = $8
	CALL $330($8)
	
.LABEL $label$10
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$11 }
	*(($7 + [4])) = $8
	CALL $330($8)
	
.LABEL $label$11
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $9) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $330($1)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $204 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [32])
	*([0] + [4]) = $15
	$3 = *($0 + [16])
	$1 = int_32((*(($0 + [20])) - $3) >> [5])
	if ( ($1 == 0) ){ goto $label$1 }
	$11 = [0]
	
.LOOP $label$2:
	$10 = [13]
	$7 = ($3 + ($11 << [5]))
	$9 = *($7 + [16])
	$8 = *($9 + [1])
	if ( ((int_32)$8 == (int_32)*(($9 + [10]))) ){ goto $label$3 }
	$10 = [13]
	$4 = *(($9 + [4]))
	if ( ((int_32)$4 == (int_32)*(($9 + [13]))) ){ goto $label$3 }
	$10 = [12]
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[10]) ){ goto $label$4 }
	$10 = [11]
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$3 }
	
.LABEL $label$4
	$10 = (*(($7 + [20])) - $9)
	$4 = ((int_32)$10 / (int_32)[3])
	if ( ($10 == 0) ){ goto $label$5 }
	$13 = [0]
	$5 = ($9 + [2])
	$10 = $5
	$8 = [0]
	
.LOOP $label$6:
	$8 = (*($10) + ($8 & [255]))
	$10 = ($10 + [3])
	$13 = ($13 + [1])
	if ( ($13 <= $4) ){ goto $label$6 }
	$12 = ((uint_32)($8 & [255]) % (uint_32)[10])
	$13 = [0]
	
.LOOP $label$7:
	$14 = (($9 + ((int_32)$13 * (int_32)[3])) + [2])
	$8 = $5
	$10 = [0]
	
.LOOP $label$9:
	if ( ((int_32)$13 == (int_32)$10) ){ goto $label$10 }
	if ( ((int_32)((uint_32)(*($8) + *($14)) % (uint_32)[10]) == (int_32)$12) ){ goto $label$8 }
	
.LABEL $label$10
	$8 = ($8 + [3])
	$10 = ($10 + [1])
	if ( ($10 <= $4) ){ goto $label$9 }
	$10 = [0]
	$13 = ($13 + [1])
	if ( ($13 <= $4) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$8
	$10 = ( $12 ? [10] : $12 )
	goto $label$3 
	
.LABEL $label$5
	$10 = [0]
	
.LABEL $label$3
	*($7 + [28]) = $10
	$11 = ($11 + [1])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = CALL $167($15, $3)
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = *(($0 + [16]))
	$9 = [0]
	$5 = ($2 + [28])
	$6 = ($2 + [20])
	
.LOOP $label$12:
	$10 = [0]
	if ( ($9 == 0) ){ goto $label$13 }
	$7 = ($3 + ($9 << [5]))
	$10 = *($7 + [28])
	$0 = *($5)
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$15 }
	if ( ((int_32)$0 == (int_32)[13]) ){ goto $label$16 }
	$10 = *(($2 + [16]))
	$11 = *($10 + [1])
	$12 = *($10)
	$8 = ((int_32)(*($6) - $10) / (int_32)[3])
	if ( ($8 <= [2]) ){ goto $label$17 }
	$10 = ($10 + [4])
	$8 = ($8 + [-1])
	
.LOOP $label$18:
	$13 = ($11 & [255])
	$4 = *($10)
	if ( ((uint_32)$4 <= (uint_32)$13) ){ goto $label$20 }
	$12 = *(($10 + [-1]))
	$11 = $4
	goto $label$19 
	
.LABEL $label$20
	if ( ((int_32)$4 != (int_32)$13) ){ goto $label$19 }
	$4 = *(($10 + [-1]))
	$12 = ( $4 ? $12 : ((uint_32)$4 > (uint_32)($12 & [255])) )
	
.LABEL $label$19
	$10 = ($10 + [3])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$18 }
	
.LABEL $label$17
	$10 = *($7 + [16])
	$13 = *($10 + [1])
	$14 = *($10)
	$8 = ((int_32)(*(($7 + [20])) - $10) / (int_32)[3])
	if ( ($8 <= [2]) ){ goto $label$21 }
	$10 = ($10 + [4])
	$8 = ($8 + [-1])
	
.LOOP $label$22:
	$7 = ($13 & [255])
	$4 = *($10)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$24 }
	$14 = *(($10 + [-1]))
	$13 = $4
	goto $label$23 
	
.LABEL $label$24
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$23 }
	$4 = *(($10 + [-1]))
	$14 = ( $4 ? $14 : ((uint_32)$4 > (uint_32)($14 & [255])) )
	
.LABEL $label$23
	$10 = ($10 + [3])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$22 }
	
.LABEL $label$21
	$10 = [1]
	if ( ((int_32)$0 == (int_32)[5]) ){ goto $label$14 }
	$8 = ($13 & [255])
	$10 = ($11 & [255])
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$25 }
	$10 = ((uint_32)($12 & [255]) > (uint_32)($14 & [255]))
	goto $label$14 
	
.LABEL $label$25
	$10 = ((uint_32)$10 > (uint_32)$8)
	goto $label$14 
	
.LABEL $label$16
	$10 = ((uint_32)*((*(($2 + [16])) + [7])) > (uint_32)*((*($7 + [16]) + [7])))
	goto $label$14 
	
.LABEL $label$15
	$10 = ((uint_32)$0 > (uint_32)$10)
	
.LABEL $label$14
	$10 = ((int_32)$10 ^ (int_32)[1])
	
.LABEL $label$13
	*(($3 + ($9 << [5])) + [29]) = $10
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)$1) ){ goto $label$12 }
	
.LABEL $label$11
	$10 = *($2 + [16])
	if ( ($10 == 0) ){ goto $label$26 }
	*(($2 + [20])) = $10
	CALL $330($10)
	
.LABEL $label$26
	$10 = *($2 + [4])
	if ( ($10 == 0) ){ goto $label$27 }
	*(($2 + [8])) = $10
	CALL $330($10)
	
.LABEL $label$27
	*([0] + [4]) = ($15 + [32])
}

void .FUNC $205 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	$10 = $11
	*([0] + [4]) = $11
	$2 = *($0)
	$8 = *(*($0 + [4]))
	*($1) = *($8)
	*(($1 + [8])) = *(($8 + [8]))
	$9 = [16]
	$6 = ($1 + [16])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$1 }
	CALL $210($6, *($8 + [16]), *(($8 + [20])))
	
.LABEL $label$1
	$6 = *($6)
	$3 = *(($1 + [20]))
	$7 = (CASTING uint_64)(uint_32 int_32(($3 - $6) >> [5]))
	
.LOOP $label$2:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$8 = ($9 + [1])
	$5 = *($6 + [4])
	$9 = *($6 + [8])
	$4 = ($9 - $5)
	$7 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$5:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$5 }
	$8 = ( $8 ? ($4 + $8) : ((int_32)$5 == (int_32)$9) )
	$5 = *($6 + [16])
	$9 = *($6 + [20])
	$4 = ($9 - $5)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$4 / (int_32)[3]))
	
.LOOP $label$6:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$7 }
	$9 = ($4 + [-3])
	$8 = ((($9 - ((uint_32)$9 % (uint_32)[3])) + $8) + [3])
	
.LABEL $label$7
	$9 = ($8 + [2])
	$6 = ($6 + [32])
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ($9 <= [513]) ){ goto $label$9 }
	$3 = CALL malloc($9)
	goto $label$8 
	
.LABEL $label$9
	$3 = ($11 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$8
	*($10) = $3
	$4 = ($3 + $9)
	*($10 + [8]) = $4
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [896])
	CALL memcpy($3, $1, [8])
	$8 = ($3 + [8])
	CALL eosio_assert(((int_32)($4 - $8) > (int_32)[7]), [896])
	CALL memcpy($8, ($1 + [8]), [8])
	$8 = ($3 + [16])
	*($10 + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 int_32((*(($1 + [20])) - *(($1 + [16]))) >> [5]))
	
.LOOP $label$10:
	$6 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$5 = ((int_64)$7) != (int_64)0
	*($10 + [24]) = (($5) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)($4 - $8) > (int_32)[0]), [896])
	CALL memcpy($8, ($10 + [24]), [1])
	$8 = ($8 + [1])
	*($10 + [4]) = $8
	if ( $5 ){ goto $label$10 }
	$6 = *(($1 + [20]))
	$8 = *($1 + [16])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$11 }
	$5 = ($10 + [32])
	$4 = ($10 + [36])
	
.LOOP $label$12:
	*($10 + [16]) = $10
	*($10 + [24]) = $8
	*($5) = ($8 + [16])
	*($4) = ($8 + [28])
	*((($10 + [24]) + [16])) = ($8 + [29])
	*($10 + [28]) = ($8 + [4])
	CALL $211(($10 + [24]), ($10 + [16]))
	$8 = ($8 + [32])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($2 + [8]), (int_64)4732891782226903040, *(*($0 + [8])), $7, $3, $9)
	if ( ($9 <= [513]) ){ goto $label$13 }
	CALL free($3)
	
.LABEL $label$13
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$14 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC _Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = $1
	if ( ($2 == 0) ){ goto $label$1 }
	$13 = $1
	$9 = ($9 & [1])
	$9 = *($0)
	if ( (( *($0 + [4]) ? uint_32($9 >> [1]) : $9 ) == 0) ){ goto $label$1 }
	$3 = ($0 + [1])
	$5 = ($0 + [8])
	$9 = ( *($5) ? $3 : $9 )
	$8 = ($2 + [-1])
	$13 = $1
	
.LOOP $label$2:
	$2 = *($9)
	if ( ((uint_32)(($2 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$4 }
	$2 = ($2 + [208])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$2 = ($2 + [169])
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)(($2 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$6 }
	$2 = ($2 + [201])
	goto $label$3 
	
.LABEL $label$6
	$2 = [0]
	CALL eosio_assert([0], [16])
	
.LABEL $label$3
	$10 = ($2 << [4])
	*($13) = $10
	$7 = ($0 + [4])
	$11 = *($7)
	$2 = *($0)
	$6 = ($2 & [1])
	$12 = *($5)
	$4 = ($9 + [1])
	if ( ((int_32)$4 == (int_32)(( $12 ? $3 : $6 ) + ( $11 ? uint_32($2 >> [1]) : $6 ))) ){ goto $label$10 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$9 }
	$2 = ($2 + [208])
	goto $label$8 
	
.LABEL $label$10
	$9 = $4
	$13 = ($13 + [1])
	if ( $8 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$9
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$11 }
	$2 = ($2 + [169])
	goto $label$8 
	
.LABEL $label$11
	if ( ((uint_32)(($2 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$12 }
	$2 = ($2 + [201])
	goto $label$8 
	
.LABEL $label$12
	$2 = [0]
	CALL eosio_assert([0], [16])
	$10 = *($13)
	
.LABEL $label$8
	*($13) = ($10 | $2)
	$9 = ($9 + [2])
	$11 = *($7)
	$12 = *($5)
	$2 = *($0)
	$13 = ($13 + [1])
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$7
	$8 = ($8 + [-1])
	$4 = ($2 & [1])
	if ( ((int_32)$9 != (int_32)(( $12 ? $3 : $4 ) + ( $11 ? uint_32(($2 & [254]) >> [1]) : $4 ))) ){ goto $label$2 }
	
.LABEL $label$1
	return ($13 - $1)
}

void .FUNC _Z6to_hexPKcm (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$2:
	$3 = *($1)
	CALL $338($0, *((uint_32($3 >> [4]) + [48])))
	CALL $338($0, *((($3 & [15]) + [48])))
	$1 = ($1 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($5 + [15]) = $1
	$1 = *($2)
	$3 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($3 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$4 = (($3 + [17]) & [-16])
	$1 = CALL $329($4)
	*($0) = ($4 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($5 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $336($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $3)
	*([0] + [4]) = ($5 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $331($0)
}

int_32 .FUNC _Z8from_hexc (int_32 $0)
{
	if ( ((uint_32)(($0 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$2 }
	$0 = ($0 + [208])
	goto $label$1 
	
.LABEL $label$2
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$3 }
	$0 = ($0 + [169])
	goto $label$1 
	
.LABEL $label$3
	if ( ((uint_32)(($0 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$4 }
	$0 = ($0 + [201])
	goto $label$1 
	
.LABEL $label$4
	$0 = [0]
	CALL eosio_assert([0], [16])
	
.LABEL $label$1
	return ($0 & [255])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _Z13uint64_stringy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 ((uint_64)$1 % (uint_64)(int_64)10))
	CALL $6($5, ( ($3 | [48]) ? ($3 + [55]) : ($3 <= [10]) ), $0)
	$2 = ((uint_64)$1 / (uint_64)(int_64)10)
	if ( (*($0) & [1]) ){ goto $label$3 }
	*($0) = [0]
	goto $label$2 
	
.LABEL $label$3
	*(*(($0 + [8]))) = [0]
	*($4) = [0]
	
.LABEL $label$2
	CALL $334($0, [0])
	*(($0 + [8])) = *(($5 + [8]))
	*($0) = *($5)
	$3 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $2
	if ( $3 ){ goto $label$1 }
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC memory ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC _ZeqRK11checksum256S1_ (int_32 $0, int_32 _ZeqRK11checksum256S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _Z13str_to_sha256RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	$1 = ( *($1 + [8]) ? ($1 + [1]) : (*($1) & [1]) )
	CALL sha256($1, CALL $401($1), $0)
}

void .FUNC _Z13hex_to_sha256RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = *($1)
	CALL eosio_assert(((int_32)( *($1 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ) == (int_32)[64]), [80])
	CALL _Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj($1, $0, [32])
}

void .FUNC _Z11hex_to_sha1RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = *($1)
	CALL eosio_assert(((int_32)( *($1 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ) == (int_32)[40]), [96])
	CALL _Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj($1, $0, [20])
}

int_32 .FUNC _Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$10 = *($0)
	if ( ($10 == 0) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( (CALL isspace(int_32(($10 << [24]) >> [24])) == 0) ){ goto $label$3 }
	$0 = ($0 + [1])
	$10 = *($0)
	if ( $10 ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)[49]) ){ goto $label$2 }
	$10 = [0]
	
.LOOP $label$5:
	$11 = ($0 + $10)
	$8 = ($10 + [1])
	$10 = $8
	if ( ((int_32)*(($11 + [1])) == (int_32)[49]) ){ goto $label$5 }
	$0 = ($0 + $8)
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	$11 = ((uint_32)((int_32)CALL strlen($0) * (int_32)[733]) / (uint_32)[1000])
	$10 = ((int_32)$11 ^ (int_32)[-1])
	$2 = ($11 + [1])
	$3 = CALL $329($2)
	$5 = $3
	
.LOOP $label$6:
	*($5) = [0]
	$4 = $5
	$5 = ($4 + [1])
	$10 = ($10 + [1])
	if ( $10 ){ goto $label$6 }
	$11 = [0]
	$10 = *($0)
	if ( ($10 == 0) ){ goto $label$16 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$17 }
	$6 = [0]
	
.LOOP $label$18:
	if ( CALL isspace(int_32(($10 << [24]) >> [24])) ){ goto $label$15 }
	$10 = *($0)
	$9 = *(($10 + [112]))
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$13 }
	if ( ((int_32)$10 != (int_32)[49]) ){ goto $label$20 }
	$11 = [0]
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$19 }
	
.LABEL $label$20
	$11 = [0]
	$10 = $5
	
.LOOP $label$21:
	$7 = (((int_32)*($10) * (int_32)[58]) + $9)
	*(($10 = ($10 + [-1]))) = $7
	$11 = ($11 + [1])
	$9 = ((int_32)$7 / (int_32)[256])
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$19 }
	if ( (((uint_32)($7 + [255]) > (uint_32)[510]) | ((int_32)$11 < (int_32)$6)) ){ goto $label$21 }
	
.LABEL $label$19
	if ( $9 ){ goto $label$7 }
	$10 = *($0 + [1])
	$6 = $11
	$7 = ($0 + [1])
	$0 = $7
	if ( $10 ){ goto $label$18 }
	goto $label$14 
	
.LABEL $label$17
	
.LOOP $label$22:
	if ( CALL isspace(int_32(($10 << [24]) >> [24])) ){ goto $label$16 }
	$10 = *($0)
	if ( ((int_32)*(($10 + [112])) == (int_32)[255]) ){ goto $label$10 }
	if ( ((int_32)$10 != (int_32)[49]) ){ goto $label$7 }
	$0 = ($0 + [1])
	$10 = *($0)
	if ( $10 ){ goto $label$22 }
	$11 = [0]
	
.LABEL $label$16
	$7 = $0
	goto $label$14 
	
.LABEL $label$15
	$7 = $0
	$11 = $6
	
.LABEL $label$14
	$10 = ($7 + [-1])
	
.LOOP $label$23:
	$10 = ($10 + [1])
	if ( CALL isspace(*($10)) ){ goto $label$23 }
	$7 = [0]
	if ( (*($10) == 0) ){ goto $label$24 }
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$24
	$11 = ($3 + ($2 - $11))
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$12 }
	$9 = ([0] - $4)
	$7 = *($12 + [8])
	
.LOOP $label$26:
	$10 = $11
	if ( *($10) ){ goto $label$25 }
	$7 = $10
	$11 = ($10 + [1])
	if ( ((int_32)($11 + $9) != (int_32)[1]) ){ goto $label$26 }
	$10 = $11
	$7 = $4
	
.LABEL $label$25
	*($12 + [8]) = $7
	goto $label$11 
	
.LABEL $label$13
	$7 = [0]
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	$10 = $5
	
.LABEL $label$11
	$11 = (($5 - $11) + $8)
	$7 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $7) >= (uint_32)$11) ){ goto $label$27 }
	$9 = *($1 + [4])
	$7 = *($1)
	$9 = (*($1 + [4]) - $7)
	$0 = CALL $329($11)
	$2 = ($0 + ($9 - $7))
	$6 = ($2 - $9)
	$11 = ($0 + $11)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$28 }
	CALL memcpy($6, $7, $9)
	$7 = *($1)
	
.LABEL $label$28
	*($1) = $6
	*(($1 + [4])) = $2
	*(($1 + [8])) = $11
	if ( ($7 == 0) ){ goto $label$27 }
	CALL $330($7)
	
.LABEL $label$27
	*($12 + [7]) = [0]
	CALL $18($1, $8, ($12 + [7]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$29 }
	$5 = ($4 + [1])
	$6 = ($1 + [8])
	$7 = ($1 + [4])
	
.LOOP $label$30:
	$11 = ($10 + [1])
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)*($6)) ){ goto $label$32 }
	*($9) = *($10)
	*($7) = (*($7) + [1])
	goto $label$31 
	
.LABEL $label$32
	CALL $19($1, $10)
	
.LABEL $label$31
	$10 = $11
	if ( ((int_32)$5 != (int_32)$11) ){ goto $label$30 }
	
.LABEL $label$29
	$7 = [1]
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$7 = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $330($3)
	
.LABEL $label$8
	*([0] + [4]) = ($12 + [16])
	return $7
	
.LABEL $label$7
	CALL __assert_fail([368], [384], [149], [400])
	return (unreachable)
}

void .FUNC _Z13sha256_to_hexRK11checksum256 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	
.LOOP $label$1:
	$2 = *(($1 + $3))
	CALL $338($0, *((uint_32($2 >> [4]) + [48])))
	CALL $338($0, *((($2 & [15]) + [48])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$1 }
}

void .FUNC _Z11sha1_to_hexRK11checksum160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	
.LOOP $label$1:
	$2 = *(($1 + $3))
	CALL $338($0, *((uint_32($2 >> [4]) + [48])))
	CALL $338($0, *((($2 & [15]) + [48])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[20]) ){ goto $label$1 }
}

int_64 .FUNC _Z11uint64_hashRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$2 = *($0)
	$3 = ($2 & [1])
	$5 = ( *($0 + [8]) ? ($0 + [1]) : $3 )
	$3 = ( *($0 + [4]) ? uint_32($2 >> [1]) : $3 )
	if ( ($3 <= [4]) ){ goto $label$4 }
	$1 = ($3 + [-4])
	$0 = $5
	$2 = $3
	
.LOOP $label$5:
	CALL memcpy(($6 + [12]), $0, [4])
	$4 = ((int_32)*($6 + [12]) * (int_32)[1540483477])
	$2 = ((int_32)((int_32)((int_32)uint_32($4 >> [24]) ^ (int_32)$4) * (int_32)[1540483477]) ^ (int_32)((int_32)$2 * (int_32)[1540483477]))
	$0 = ($0 + [4])
	$3 = ($3 + [-4])
	if ( ((uint_32)$3 > (uint_32)[3]) ){ goto $label$5 }
	$0 = ($1 & [-4])
	$5 = (($5 + $0) + [4])
	$3 = ($1 - $0)
	if ( ((int_32)$3 != (int_32)[1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = $3
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$3 != (int_32)[3]) ){ goto $label$1 }
	$2 = ((int_32)(*($5 + [2]) << [16]) ^ (int_32)$2)
	
.LABEL $label$6
	$2 = ((int_32)(*($5 + [1]) << [8]) ^ (int_32)$2)
	
.LABEL $label$2
	$2 = ((int_32)((int_32)*($5) ^ (int_32)$2) * (int_32)[1540483477])
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [16])
	$0 = ((int_32)((int_32)uint_32($2 >> [13]) ^ (int_32)$2) * (int_32)[1540483477])
	return (CASTING uint_64)(uint_32 ((int_32)uint_32($0 >> [15]) ^ (int_32)$0))
}

int_64 .FUNC _Z11uint64_hashRK11checksum256 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	
.LOOP $label$1:
	$2 = *(($0 + $3))
	CALL $338($4, *((uint_32($2 >> [4]) + [48])))
	CALL $338($4, *((($2 & [15]) + [48])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$1 }
	$1 = CALL _Z11uint64_hashRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	CALL $330(*(($4 + [8])))
	
.LABEL $label$2
	*([0] + [4]) = ($4 + [16])
	return $1
}

void .FUNC _ZN6niuniu9closeroomERKy (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [240])
	*([0] + [4]) = $18
	$15 = (int_64)0
	$16 = (int_64)59
	$10 = [688]
	$11 = (int_64)0
	
.LOOP $label$1:
	$14 = (int_64)0
	if ( ((uint_64)$15 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($10)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$2
	$10 = ($10 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$11 = ((int_64)$14 | (int_64)$11)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($11)
	$15 = *($1)
	$4 = *(($0 + [32]))
	$12 = *(($0 + [36]))
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$5 }
	$10 = ($12 + [-24])
	$13 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($10)) == (int_64)$15) ){ goto $label$5 }
	$12 = $10
	$2 = ($10 + [-24])
	$10 = $2
	if ( ((int_32)($2 + $13) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$3 = ($0 + [8])
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$8 }
	$13 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [136]) == (int_32)$3), [720])
	goto $label$7 
	
.LABEL $label$8
	$13 = [0]
	$10 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4816283142123945984, $15)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$7 }
	$13 = CALL $74($3, $10)
	CALL eosio_assert(((int_32)*($13 + [136]) == (int_32)$3), [720])
	
.LABEL $label$7
	$15 = *($1)
	$5 = *(($0 + [392]))
	$12 = *(($0 + [396]))
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$9 }
	$10 = ($12 + [-24])
	$4 = ([0] - $5)
	
.LOOP $label$10:
	if ( ((int_64)*(*($10)) == (int_64)$15) ){ goto $label$9 }
	$12 = $10
	$2 = ($10 + [-24])
	$10 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	$4 = ($0 + [368])
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$12 }
	$12 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [56]) == (int_32)$4), [720])
	goto $label$11 
	
.LABEL $label$12
	$12 = [0]
	$10 = CALL db_find_i64(*(($0 + [368])), *(($0 + [376])), (int_64)-4816273130130128896, $15)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$11 }
	$12 = CALL $59($4, $10)
	CALL eosio_assert(((int_32)*($12 + [56]) == (int_32)$4), [720])
	
.LABEL $label$11
	$5 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($5, [1136])
	$6 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($6, [1136])
	CALL eosio_assert((*($13 + [81]) == 0), [3136])
	$17 = ((int_64)*($13 + [8]) + (int_64)1)
	*($18 + [232]) = $17
	*($18 + [224]) = (int_64)1
	$7 = *($0)
	$15 = (int_64)0
	$14 = (int_64)59
	$10 = [1376]
	$11 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$18 }
	$2 = *($10)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$2 = ($2 + [165])
	goto $label$16 
	
.LABEL $label$18
	$16 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$14
	$10 = ($10 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$11 = ((int_64)$16 | (int_64)$11)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$13 }
	*($18 + [216]) = $11
	*($18 + [208]) = $7
	$15 = (int_64)0
	$14 = (int_64)59
	$10 = [1488]
	$11 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$15 > (uint_64)(int_64)9) ){ goto $label$24 }
	$2 = *($10)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$2 = ($2 + [165])
	goto $label$22 
	
.LABEL $label$24
	$16 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$20
	$10 = ($10 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$11 = ((int_64)$16 | (int_64)$11)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$19 }
	*($18 + [176]) = $11
	*($18 + [16]) = $17
	*($18 + [24]) = (int_64)1
	*($18 + [8]) = *($1)
	CALL $99($0, ($18 + [208]), $0, ($18 + [176]), ($18 + [8]))
	CALL $125($0, $1, ($18 + [232]), ($18 + [224]))
	*(($10 = (($18 + [208]) + [8]))) = *(($12 + [24]))
	$16 = *($12 + [16])
	*($18 + [208]) = $16
	$15 = (int_64)0
	if ( ((int_64)$16 <= (int_64)0) ){ goto $label$26 }
	$16 = *($12 + [8])
	*(($18 + [28])) = *($18 + [212])
	*($18 + [16]) = $16
	*((($18 + [8]) + [24])) = *($10)
	*(($18 + [36])) = *(($18 + [220]))
	*($18 + [8]) = *($1)
	*($18 + [24]) = *($18 + [208])
	*((($18 + [8]) + [40])) = *(($12 + [40]))
	*($18 + [40]) = *($12 + [32])
	*(($18 + [64])) = *($10)
	*($18 + [56]) = *($18 + [208])
	$16 = CALL current_time()
	*($18 + [196 align=4]) = (int_64)0
	*($18 + [192]) = [0]
	*($18 + [72]) = ((int_64)((uint_64)$16 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$10 = CALL strlen([1344])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$25 }
	$1 = ($13 + [72])
	$8 = ($12 + [8])
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$29 }
	*($18 + [192]) = ($10 << [1])
	$2 = (($18 + [192]) | [1])
	if ( $10 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$9 = (($10 + [16]) & [-16])
	$2 = CALL $329($9)
	*($18 + [192]) = ($9 | [1])
	*($18 + [200]) = $2
	*($18 + [196]) = $10
	
.LABEL $label$28
	CALL memcpy($2, [1344], $10)
	
.LABEL $label$27
	*(($2 + $10)) = [0]
	CALL $75($0, $8, ($18 + [208]), $1, ($18 + [192]))
	if ( ((*($18 + [192]) & [1]) == 0) ){ goto $label$30 }
	CALL $330(*($18 + [200]))
	
.LABEL $label$30
	$7 = *($0)
	$16 = (int_64)0
	$11 = (int_64)59
	$10 = [1376]
	$17 = (int_64)0
	
.LOOP $label$31:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$36 }
	$2 = *($10)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$2 = ($2 + [165])
	goto $label$34 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$33
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$32
	$10 = ($10 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$14 | (int_64)$17)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$31 }
	*($18 + [184]) = $17
	*($18 + [176]) = $7
	$16 = (int_64)0
	$14 = (int_64)59
	$10 = [1392]
	$17 = (int_64)0
	
.LOOP $label$37:
	$11 = (int_64)0
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$38 }
	$2 = *($10)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$2 = ($2 + [165])
	goto $label$39 
	
.LABEL $label$40
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$38
	$10 = ($10 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$11 | (int_64)$17)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$37 }
	*($18 + [168]) = $17
	$16 = (int_64)0
	$11 = (int_64)59
	$10 = [1408]
	$17 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$16 > (uint_64)(int_64)10) ){ goto $label$46 }
	$2 = *($10)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$2 = ($2 + [165])
	goto $label$44 
	
.LABEL $label$46
	$14 = (int_64)0
	if ( ((int_64)$16 == (int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$42
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$17 = ((int_64)$14 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)1)
	if ( ((int_64)$16 != (int_64)13) ){ goto $label$41 }
	*($18 + [160]) = $17
	CALL $76($0, ($18 + [176]), ($18 + [168]), ($18 + [160]), ($18 + [8]))
	
.LABEL $label$26
	*($18 + [16]) = *($12 + [48])
	*($18 + [8]) = *(($12 + [8]))
	CALL memcpy(($18 + [24]), $13, [82])
	CALL $353(($18 + [108]), ($13 + [84]))
	*(($18 + [120])) = *($13 + [96])
	CALL $353(($18 + [128]), ($13 + [104]))
	*(($18 + [152])) = *(($13 + [128]))
	*(($18 + [144])) = *($13 + [120])
	$17 = *($0)
	$14 = (int_64)59
	$10 = [1376]
	$11 = (int_64)0
	
.LOOP $label$47:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$52 }
	$2 = *($10)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$2 = ($2 + [165])
	goto $label$50 
	
.LABEL $label$52
	$16 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$51
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$49
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$48
	$10 = ($10 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$11 = ((int_64)$16 | (int_64)$11)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$47 }
	*($18 + [184]) = $11
	*($18 + [176]) = $17
	$15 = (int_64)0
	$16 = (int_64)59
	$10 = [1392]
	$11 = (int_64)0
	
.LOOP $label$53:
	$14 = (int_64)0
	if ( ((uint_64)$15 > (uint_64)(int_64)11) ){ goto $label$54 }
	$2 = *($10)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$56 }
	$2 = ($2 + [165])
	goto $label$55 
	
.LABEL $label$56
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$55
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$54
	$10 = ($10 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$11 = ((int_64)$14 | (int_64)$11)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$53 }
	*($18 + [168]) = $11
	$15 = (int_64)0
	$14 = (int_64)59
	$10 = [3168]
	$11 = (int_64)0
	
.LOOP $label$57:
	if ( ((uint_64)$15 > (uint_64)(int_64)7) ){ goto $label$62 }
	$2 = *($10)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$61 }
	$2 = ($2 + [165])
	goto $label$60 
	
.LABEL $label$62
	$16 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$61
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$60
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$59
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$58
	$10 = ($10 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$11 = ((int_64)$16 | (int_64)$11)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$57 }
	*($18 + [160]) = $11
	CALL $246($0, ($18 + [176]), ($18 + [168]), ($18 + [160]), ($18 + [8]))
	CALL eosio_assert($5, [1440])
	CALL eosio_assert($5, [1680])
	$10 = CALL db_next_i64(*($13 + [140]), ($18 + [176]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$63 }
	CALL $74($3, $10)
	
.LABEL $label$63
	CALL $247($3, $13)
	CALL eosio_assert($6, [1440])
	CALL eosio_assert($6, [1680])
	$10 = CALL db_next_i64(*($12 + [60]), ($18 + [176]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$64 }
	CALL $59($4, $10)
	
.LABEL $label$64
	CALL $248($4, $12)
	if ( ((*(($18 + [128])) & [1]) == 0) ){ goto $label$65 }
	CALL $330(*(($18 + [136])))
	
.LABEL $label$65
	if ( ((*(($18 + [108])) & [1]) == 0) ){ goto $label$66 }
	CALL $330(*(($18 + [116])))
	
.LABEL $label$66
	*([0] + [4]) = ($18 + [240])
	return (unreachable)
	
.LABEL $label$25
	CALL $331(($18 + [192]))
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *($0)
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $5) >= (uint_32)$1) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $330($5)
	$3 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = [2147483647]
	if ( ((uint_32)$3 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($3 << [1])
	$4 = ( $1 ? $5 : ($5 <= $1) )
	
.LABEL $label$6
	$5 = CALL $329($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($5) = *($2)
	$5 = (*($0) + [1])
	*($0) = $5
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$3 = (*($0 + [4]) - $5)
	$4 = ( $3 ? $1 : ($3 <= $1) )
	if ( ($4 == 0) ){ goto $label$8 }
	CALL memset($5, *($2), $4)
	
.LABEL $label$8
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$1 = ($3 - $1)
	$5 = ($0 + [4])
	$0 = *($5)
	
.LOOP $label$9:
	*($0) = *($2)
	$0 = (*($5) + [1])
	*($5) = $0
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = (*($0) + $1)
	return (unreachable)
	
.LABEL $label$1
	CALL $352($0)
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ($5 - $4)
	$7 = ($3 + [1])
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$2 = (*($0 + [8]) - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $329($6)
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	*(($3 = ($7 + $3))) = *($1)
	$5 = ($5 - $4)
	$1 = ($3 - $5)
	$6 = ($7 + $6)
	$7 = ($3 + [1])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $330($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $338 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0)
	$2 = ($4 & [1])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ((*($0) & [-2]) + [-1])
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = [10]
	$4 = uint_32($4 >> [1])
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $339($0, $3, [1], $3, $3, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($4 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($4 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $4)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $339 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $329($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $330($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $336 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $333($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

int_32 .FUNC $337 (int_32 $0, int_32 $1)
{
	return CALL $336($0, $1, CALL $401($1))
}

void .FUNC $334 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $329(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $330($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $335 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $333($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $332 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $333($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $333 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $329($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $330($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $330 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $331 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = *($0)
	$8 = ((int_32)(*($0 + [4]) - $9) / (int_32)[72])
	$7 = ($8 + [1])
	if ( ((uint_32)$7 >= (uint_32)[59652324]) ){ goto $label$2 }
	$6 = [59652323]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[72])
	if ( ((uint_32)$9 > (uint_32)[29826160]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$6 = ( $7 ? $9 : ($9 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $329(((int_32)$6 * (int_32)[72]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	*(($9 = ($7 + ((int_32)$8 * (int_32)[72])))) = *($1)
	*(($9 + [24])) = *(($1 + [24]))
	*(($9 + [16])) = *(($1 + [16]))
	*(($9 + [8])) = *(($1 + [8]))
	*($9 + [32]) = [0]
	*(($8 = ($9 + [36]))) = [0]
	*(($4 = ($9 + [40]))) = [0]
	$5 = (*(($1 + [36])) - *($1 + [32]))
	$3 = int_32($5 >> [4])
	if ( ($3 == 0) ){ goto $label$6 }
	$2 = ($9 + [32])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$5 }
	$5 = CALL $329($5)
	*($2) = $5
	*($8) = $5
	*($4) = ($5 + ($3 << [4]))
	$4 = *(($1 + [32]))
	$3 = (*(($1 + [36])) - $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($5, $4, $3)
	*($8) = (*($8) + $3)
	
.LABEL $label$6
	$3 = ($7 + ((int_32)$6 * (int_32)[72]))
	*($9 + [48]) = *($1 + [48])
	*(($9 + [64])) = *(($1 + [64]))
	*(($9 + [56])) = *(($1 + [56]))
	$4 = ($9 + [72])
	$1 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$8 }
	$5 = ([0] - $1)
	$1 = ($6 + [-72])
	
.LOOP $label$9:
	*(($9 + [-72])) = *($1)
	*(($9 + [-48])) = *(($1 + [24]))
	*(($9 + [-56])) = *(($1 + [16]))
	*(($9 + [-64])) = *(($1 + [8]))
	*(($6 = ($9 + [-40]))) = [0]
	*(($7 = ($9 + [-36]))) = [0]
	$8 = ($1 + [32])
	*($6) = *($8)
	*(($6 = ($9 + [-32]))) = [0]
	*($7) = *(($1 + [36]))
	$7 = ($1 + [40])
	*($6) = *($7)
	*($7) = [0]
	*($8) = (int_64)0
	*(($9 + [-8])) = *(($1 + [64]))
	*(($9 + [-16])) = *(($1 + [56]))
	*(($9 + [-24])) = *(($1 + [48]))
	$9 = ($9 + [-72])
	$1 = ($1 + [-72])
	if ( ((int_32)($1 + $5) != (int_32)[-72]) ){ goto $label$9 }
	$1 = *(($0 + [4]))
	$7 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$7 = $1
	
.LABEL $label$7
	*($0) = $9
	*(($0 + [4])) = $4
	*(($0 + [8])) = $3
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$10 }
	$6 = ([0] - $7)
	$9 = ($1 + [-40])
	
.LOOP $label$11:
	$1 = *($9)
	if ( ($1 == 0) ){ goto $label$12 }
	*(($9 + [4])) = $1
	CALL $330($1)
	
.LABEL $label$12
	$9 = ($9 + [-72])
	if ( ((int_32)($9 + $6) != (int_32)[-40]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($7 == 0) ){ goto $label$13 }
	CALL $330($7)
	
.LABEL $label$13
	return (unreachable)
	
.LABEL $label$5
	CALL $352($2)
	(unreachable)
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1088])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $329([88])) + [40]) = [0]
	*($4 + [32 align=4]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [640])
	*($4 + [72]) = $0
	CALL $118(($8 + [32]), $4)
	*($4 + [80]) = [-1]
	*($4 + [76]) = $1
	*($4 + [84]) = [-1]
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [76])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $119($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($5 + [32])
	if ( ($6 == 0) ){ goto $label$15 }
	*(($5 + [36])) = $6
	CALL $330($6)
	
.LABEL $label$15
	CALL $330($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)4461681267712196608, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)$4), [720])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $117($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)4461681267712196608, $5))
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)$4), [720])
	
.LABEL $label$4
	*(($2 + [80])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $115 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [1680])
	$6 = *($0 + [4])
	$7 = *($6 + [80])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)4461681267712196608, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [80]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$2), [720])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $117($2, CALL $fimport$17(*($2), *($2 + [8]), (int_64)4461681267712196608, $3))
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$2), [720])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [80])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $113($0, ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [896])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [896])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [896])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [896])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [28])) = [0]
	*(($6 + [32])) = [0]
	*($6 + [12]) = [0]
	*($6 + [16]) = [0]
	*($6 + [20]) = [0]
	*($6 + [24]) = [0]
	*($6) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [36]) = [0]
	*(($6 + [40])) = [0]
	*(($6 + [44])) = [0]
	*($6 + [48]) = [0]
	*(($6 + [52])) = [0]
	*(($6 + [56])) = [0]
	CALL $111(($6 + [36]), $1, $2, $3, $4)
	CALL $61(($6 + [80]), $0)
	*($6 + [88]) = ((int_64)*($6 + [88]) + (int_64)1)
	CALL $62(($0 + [208]), ($6 + [80]), *($0))
	$5 = *($6 + [88])
	*($6 + [88]) = (int_64)0
	*($6 + [80]) = $5
	$5 = *($0)
	CALL $78(($6 + [64]), $6)
	$0 = *($6 + [64])
	CALL send_deferred(($6 + [80]), $5, $0, (*($6 + [68]) - $0), [0])
	$0 = *($6 + [64])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [68]) = $0
	CALL $330($0)
	
.LABEL $label$1
	CALL $79($6)
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	$10 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $10) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$10 = ((int_32)(*($0 + [8]) - $10) / (int_32)[40])
	if ( ((uint_32)$10 > (uint_32)[53687090]) ){ goto $label$4 }
	$10 = ($10 << [1])
	$8 = ( $6 ? $10 : ($10 <= $6) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $329(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	*(($10 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($10 + [8]) = *($3)
	*($10 + [16 align=4]) = (int_64)0
	*(($3 = ($10 + [24]))) = [0]
	$2 = CALL $329([16])
	*($10 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($10 + [20])) = $5
	*($10 + [28]) = [0]
	$2 = [32]
	*(($5 = ($10 + [32]))) = [0]
	*(($10 + [36])) = [0]
	$3 = ($6 + ((int_32)$8 * (int_32)[40]))
	$1 = ($10 + [28])
	$6 = *($4 + [32])
	$8 = *(($4 + [36]))
	$7 = ($8 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$6 }
	$2 = (($7 & [-16]) + $2)
	
.LABEL $label$6
	$2 = ($2 + [24])
	if ( ($2 == 0) ){ goto $label$8 }
	CALL $81($1, $2)
	$8 = *($5)
	$2 = *($1)
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	$2 = [0]
	
.LABEL $label$7
	*($11 + [4]) = $2
	*($11) = $2
	*($11 + [8]) = $8
	CALL $112($11, $4)
	$5 = ($10 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$10 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$11:
	*(($10 + [-32])) = *(($2 + [-12]))
	*(($10 + [-40])) = *(($2 + [-20]))
	*(($1 = ($10 + [-24]))) = (int_64)0
	*(($4 = ($10 + [-16]))) = [0]
	$8 = ($2 + [-4])
	*($1) = *($8)
	*(($10 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($10 + [-12]))) = (int_64)0
	*($8) = (int_64)0
	*(($4 = ($10 + [-4]))) = [0]
	$8 = ($2 + [8])
	*($1) = *($8)
	*(($10 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($8) = (int_64)0
	$10 = ($10 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$11 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$4 = $2
	
.LABEL $label$9
	*($0) = $10
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$12 }
	$1 = ([0] - $4)
	$10 = ($2 + [-24])
	
.LOOP $label$13:
	$2 = *(($10 + [12]))
	if ( ($2 == 0) ){ goto $label$14 }
	*(($10 + [16])) = $2
	CALL $330($2)
	
.LABEL $label$14
	$2 = *($10)
	if ( ($2 == 0) ){ goto $label$15 }
	*(($10 + [4])) = $2
	CALL $330($2)
	
.LABEL $label$15
	$10 = ($10 + [-40])
	if ( ((int_32)($10 + $1) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($4 == 0) ){ goto $label$16 }
	CALL $330($4)
	
.LABEL $label$16
	*([0] + [4]) = ($11 + [16])
	(unreachable)
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $120($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $119 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $329(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $352($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [32])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [36])) = $6
	CALL $330($6)
	
.LABEL $label$11
	CALL $330($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $330($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $299 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	$8 = *($3)
	*($1 + [24]) = [0]
	$6 = *($1 + [16])
	*($1 + [16]) = *($8 + [16])
	*(($8 = $7) + [24]) = $6
	$4 = *($1)
	$3 = *($3 + [4])
	*($1 + [32]) = *($3)
	*(($1 + [40])) = *(($3 + [8]))
	*($1 + [81]) = [1]
	*($1 + [120]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1024])
	$3 = *($1 + [84])
	$5 = ( *(($1 + [88])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [99])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *($1 + [104])
	$5 = ( *(($1 + [108])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = ($5 + $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($8 + [12]) = $7
	*($8 + [8]) = $7
	*($8 + [16]) = ($7 + $3)
	CALL $146(($8 + [8]), $1)
	CALL db_update_i64(*($1 + [140]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($8 + [40]) = *(($1 + [16]))
	if ( (CALL memcmp(($8 + [24]), ($8 + [40]), [8]) == 0) ){ goto $label$7 }
	$1 = ($1 + [144])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4816283142123945984, ($8 + [32]), $4)
	*($1) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($8 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $298 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	$5 = *($3)
	*($1 + [8]) = *($5)
	*(($1 + [20])) = *(($5 + [12]))
	*(($1 + [16])) = *(($5 + [8]))
	*(($1 + [12])) = *(($5 + [4]))
	$4 = *($1)
	$5 = *($3 + [4])
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	CALL eosio_assert([1], [1024])
	*($6 + [56]) = ($6 + [40])
	*($6 + [52]) = $6
	*($6 + [48]) = $6
	CALL $176(($6 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $6, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [64])
}

void .FUNC $295 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [832])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $329([56])) + [40]) = $1
	CALL $296(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [44])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $265(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $330($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $294 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [960])
	$4 = *($1)
	$5 = *($3)
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*(($1 + [16]))), [1232])
	$6 = (int_64)
	*($1 + [8]) = $6(*($1 + [8]) - *($5)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1280])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1312])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [32]))), [2128])
	$6 = ((int_64)*($1 + [24]) + (int_64)*($3))
	*($1 + [24]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [2208])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1024])
	*($7 + [56]) = ($7 + [40])
	*($7 + [52]) = $7
	*($7 + [48]) = $7
	CALL $176(($7 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $7, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [64])
}

int_32 .FUNC $297 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [1680])
	$6 = *($0 + [4])
	$7 = *($6 + [48])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)4154295086852603904, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [48]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$2), [720])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $263($2, CALL $fimport$17(*($2), *($2 + [8]), (int_64)4154295086852603904, $3))
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$2), [720])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [48])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $296 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	$11 = $12
	*([0] + [4]) = $12
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$8 = ($4 + [144])
	$7 = *($8)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = ($4 + [128])
	$6 = CALL db_lowerbound_i64(*($5), *(($4 + [136])), (int_64)4154295086852603904, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $263($5, $6)
	*($11 + [12]) = [0]
	*($11 + [8]) = $5
	$7 = *(*(CALL $276(($11 + [8])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [144])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [1952])
	*($1) = *($8)
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	*($1 + [24]) = *(*($3 + [4]) + [72])
	*($1 + [32]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$12 = $12
	$3 = ($12 + [-48])
	*([0] + [4]) = $3
	*($11 + [12]) = $3
	*($11 + [8]) = $3
	*($11 + [16]) = ($12 + [-8])
	CALL $277(($11 + [8]), $1)
	$7 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)4154295086852603904, *(*($0 + [8])), $7, $3, [40])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$2 = ($2 + [8])
	$7 = *($2)
	$0 = *(($0 + [8]))
	$9 = *($0)
	$10 = *($1)
	*($11 + [24]) = *(($1 + [8]))
	*($1 + [48]) = CALL db_idx64_store($7, (int_64)4154295086852603904, $9, $10, ($11 + [24]))
	$7 = *($0)
	$9 = *($2)
	$10 = *($1)
	*($11 + [24]) = *(($1 + [16]))
	*(($1 + [52])) = CALL db_idx64_store($9, (int_64)4154295086852603905, $7, $10, ($11 + [24]))
	*([0] + [4]) = ($11 + [32])
}

void .FUNC $291 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [144])
	*([0] + [4]) = $11
	$9 = *($1)
	$8 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$1 }
	$10 = ($6 + [-24])
	$3 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$9) ){ goto $label$1 }
	$6 = $10
	$7 = ($10 + [-24])
	$10 = $7
	if ( ((int_32)($7 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$4 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [136]) == (int_32)$2), [720])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$10 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4816283142123945984, $9)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $74($2, $10)
	CALL eosio_assert(((int_32)*($6 + [136]) == (int_32)$2), [720])
	
.LABEL $label$3
	$4 = *($6 + [16])
	*($11 + [96]) = ($0 + [128])
	CALL $289(($11 + [88]), ($11 + [96]), $1)
	$10 = [0]
	$8 = [0]
	$7 = *($11 + [92])
	if ( ($7 == 0) ){ goto $label$5 }
	$8 = [0]
	if ( ((int_64)*($7 + [8]) != (int_64)*($1)) ){ goto $label$5 }
	CALL memcpy(($11 + [104]), $7, [40])
	CALL $297(($11 + [88]))
	$8 = [1]
	$7 = *($11 + [92])
	if ( ($7 == 0) ){ goto $label$5 }
	$3 = ($11 + [136])
	
.LOOP $label$6:
	if ( ((int_64)*($7 + [8]) != (int_64)*($1)) ){ goto $label$5 }
	if ( ((uint_64)*($7 + [32]) >= (uint_64)*($3)) ){ goto $label$7 }
	CALL memcpy(($11 + [104]), $7, [40])
	
.LABEL $label$7
	CALL $297(($11 + [88]))
	$7 = *($11 + [92])
	if ( $7 ){ goto $label$6 }
	
.LABEL $label$5
	*($11 + [72]) = (int_64)0
	$9 = *(($6 + [56]))
	*($11 + [80]) = $9
	CALL eosio_assert([1], [576])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [640])
	*($11 + [48]) = (int_64)-1
	*($11 + [56]) = [0]
	$9 = *($0)
	*($11 + [32]) = $9
	$5 = *($6 + [72])
	*($11 + [40]) = $5
	*(($11 + [60])) = [0]
	*(($11 + [64])) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	$10 = [0]
	$7 = CALL db_find_i64($9, $5, (int_64)-6029028902599393280, *($11 + [120]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$15 }
	$10 = CALL $165(($11 + [32]), $7)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($11 + [32])), [720])
	
.LABEL $label$15
	$9 = *(($10 + [16]))
	*((($11 + [16]) + [8])) = $9
	*($11 + [16]) = *($10 + [8])
	CALL eosio_assert(((int_64)$9 == (int_64)*(($10 + [32]))), [2128])
	$9 = ((int_64)*($11 + [16]) + (int_64)*($10 + [24]))
	*($11 + [16]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [2176])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [2208])
	$9 = *($0)
	*($11 + [12]) = ($11 + [16])
	*($11 + [8]) = ($11 + [72])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [784])
	CALL $298(($11 + [32]), $10, $9, ($11 + [8]))
	$9 = *($0)
	*($11 + [12]) = ($11 + [16])
	*($11 + [8]) = ($11 + [104])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [784])
	CALL $299($2, $6, $9, ($11 + [8]))
	*($11 + [8]) = [1]
	$10 = ($6 + [8])
	CALL $137($0, $1, $10, ($11 + [8]))
	CALL $300($0, ($11 + [104]))
	CALL $287($0, $1, $10)
	goto $label$13 
	
.LABEL $label$14
	*($11 + [16]) = ($11 + [72])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [784])
	CALL $301($2, $6, $9, ($11 + [16]))
	*($11 + [16]) = [0]
	CALL $137($0, $1, ($6 + [8]), ($11 + [16]))
	
.LABEL $label$13
	$1 = *(($11 + [56]))
	$6 = *(($11 + [60]))
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$16 }
	$10 = ($6 + [-24])
	$3 = ([0] - $1)
	
.LOOP $label$17:
	if ( ((int_64)*(*($10)) == (int_64)$4) ){ goto $label$16 }
	$6 = $10
	$7 = ($10 + [-24])
	$10 = $7
	if ( ((int_32)($7 + $3) != (int_32)[-24]) ){ goto $label$17 }
	
.LABEL $label$16
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$19 }
	$10 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($11 + [32])), [720])
	goto $label$18 
	
.LABEL $label$19
	$10 = [0]
	$7 = CALL db_find_i64(*($11 + [32]), *(($11 + [40])), (int_64)-6029028902599393280, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$18 }
	$10 = CALL $165(($11 + [32]), $7)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($11 + [32])), [720])
	
.LABEL $label$18
	*(($11 + [24])) = *(($10 + [32]))
	*($11 + [16]) = *($10 + [24])
	$9 = *($0)
	*($11 + [12]) = ($11 + [72])
	*($11 + [8]) = ($11 + [16])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [784])
	CALL $302(($11 + [32]), $10, $9, ($11 + [8]))
	$6 = *($11 + [56])
	if ( ($6 == 0) ){ goto $label$20 }
	$0 = ($11 + [60])
	$10 = *($0)
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$22 }
	
.LOOP $label$23:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$24 }
	CALL $330($7)
	
.LABEL $label$24
	if ( ((int_32)$6 != (int_32)$10) ){ goto $label$23 }
	$10 = *(($11 + [56]))
	goto $label$21 
	
.LABEL $label$22
	$10 = $6
	
.LABEL $label$21
	*($0) = $6
	CALL $330($10)
	
.LABEL $label$20
	*([0] + [4]) = ($11 + [144])
}

void .FUNC $290 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [176])
	*([0] + [4]) = $12
	*($12 + [152]) = (int_64)-1
	*($12 + [160]) = [0]
	$9 = *($0)
	*($12 + [136]) = $9
	$11 = *($1 + [72])
	*($12 + [144]) = $11
	*(($12 + [164])) = [0]
	*((($12 + [136]) + [32])) = [0]
	$7 = [0]
	$5 = CALL db_find_i64($9, $11, (int_64)-6029028902599393280, *($1 + [16]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $165(($12 + [136]), $5)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($12 + [136])), [720])
	
.LABEL $label$1
	*($12 + [40]) = *($1)
	*($12 + [48]) = *($1 + [8])
	*($12 + [56]) = *(($1 + [16]))
	*(($12 + [76])) = *(($1 + [44]))
	*((($12 + [40]) + [32])) = *(($1 + [40]))
	*($12 + [64]) = *($1 + [32])
	*(($12 + [88])) = *(($7 + [32]))
	*($12 + [80]) = *($7 + [24])
	*($12 + [96]) = *(($1 + [72]))
	*($12 + [104]) = *($1 + [80])
	*($12 + [112]) = *($1 + [96])
	*($12 + [120]) = $2
	*($12 + [121]) = $3
	*($12 + [122]) = $4
	*($12 + [128]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$1 = [1376]
	$10 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$7 }
	$7 = *($1)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$7 = ($7 + [165])
	goto $label$5 
	
.LABEL $label$7
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$3
	$1 = ($1 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$2 }
	*($12 + [32]) = $10
	*($12 + [24]) = $6
	$9 = (int_64)0
	$11 = (int_64)59
	$1 = [1392]
	$10 = (int_64)0
	
.LOOP $label$8:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$9 }
	$7 = *($1)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$7 = ($7 + [165])
	goto $label$10 
	
.LABEL $label$11
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$9
	$1 = ($1 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$8 }
	*($12 + [16]) = $10
	$9 = (int_64)0
	$8 = (int_64)59
	$1 = [3632]
	$10 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$9 > (uint_64)(int_64)6) ){ goto $label$17 }
	$7 = *($1)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$7 = ($7 + [165])
	goto $label$15 
	
.LABEL $label$17
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$13
	$1 = ($1 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$12 }
	*($12 + [8]) = $10
	CALL $303($0, ($12 + [24]), ($12 + [16]), ($12 + [8]), ($12 + [40]))
	$0 = *($12 + [160])
	if ( ($0 == 0) ){ goto $label$18 }
	$2 = ($12 + [164])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$20 }
	
.LOOP $label$21:
	$1 = ($1 + [-24])
	$7 = *($1)
	*($1) = [0]
	if ( ($7 == 0) ){ goto $label$22 }
	CALL $330($7)
	
.LABEL $label$22
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$21 }
	$1 = *(($12 + [160]))
	goto $label$19 
	
.LABEL $label$20
	$1 = $0
	
.LABEL $label$19
	*($2) = $0
	CALL $330($1)
	
.LABEL $label$18
	*([0] + [4]) = ($12 + [176])
}

void .FUNC $293 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1504])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1552])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1616])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $330($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $330($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $292 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [80])
	*([0] + [4]) = $10
	CALL $258(($10 + [64]), $0, $2, ($1 + [80]))
	$9 = *(($2 + [16]))
	CALL eosio_assert([1], [576])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [640])
	*($10 + [40]) = (int_64)-1
	$2 = [0]
	*($10 + [48]) = [0]
	$9 = *($0)
	*($10 + [24]) = $9
	$8 = *($1 + [72])
	*($10 + [32]) = $8
	*(($10 + [52])) = [0]
	*(($10 + [56])) = [0]
	$7 = CALL db_find_i64($9, $8, (int_64)-6029028902599393280, *($3))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$2 = CALL $165(($10 + [24]), $7)
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)($10 + [24])), [720])
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*($10 + [72]) == (int_64)*(($2 + [16]))), [2816])
	if ( ((int_64)*($10 + [64]) > (int_64)*($2 + [8])) ){ goto $label$9 }
	$9 = *($0)
	*($10 + [8]) = ($10 + [64])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [784])
	CALL $294(($10 + [24]), $2, $9, ($10 + [8]))
	$9 = *($3)
	$4 = *(($0 + [152]))
	$6 = *(($0 + [156]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$10 }
	$2 = ($6 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$11:
	if ( ((int_64)*(*($2)) == (int_64)$9) ){ goto $label$10 }
	$6 = $2
	$7 = ($2 + [-24])
	$2 = $7
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$2 = ($0 + [128])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$13 }
	$7 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$2), [720])
	if ( $7 ){ goto $label$9 }
	goto $label$12 
	
.LABEL $label$13
	$7 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)4154295086852603904, $9)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $263($2, $7) + [40]) == (int_32)$2), [720])
	$6 = *($10 + [48])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$12
	$9 = *($0)
	*($10 + [12]) = $1
	*($10 + [8]) = $0
	*($10 + [16]) = $3
	CALL $295($10, $2, $9, ($10 + [8]))
	
.LABEL $label$9
	$6 = *($10 + [48])
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$0 = ($10 + [52])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	CALL $330($7)
	
.LABEL $label$17
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($10 + [48]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $6
	
.LABEL $label$14
	*($0) = $6
	CALL $330($2)
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [80])
}

void .FUNC $198 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $6) / (int_32)[3]) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ((int_32)($6 - $5) / (int_32)[3])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[1431655766]) ){ goto $label$3 }
	$6 = [1431655765]
	$2 = ((int_32)($2 - $5) / (int_32)[3])
	if ( ((uint_32)$2 > (uint_32)[715827881]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $329(((int_32)$6 * (int_32)[3]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [2])) = [0]
	$6 = (*($0) + [3])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $352($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$6 * (int_32)[3]))
	$5 = ($2 + ((int_32)$3 * (int_32)[3]))
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [2])) = [0]
	$6 = ($6 + [3])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 + ((int_32)((int_32)$2 / (int_32)[-3]) * (int_32)[3]))
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $330($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC _ZNSt3__19to_stringEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [12400], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $348(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $348(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $348 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$3 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$4 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($0 + [4])
	
.LABEL $label$3
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$5 }
	CALL $339($0, $3, (($1 - $3) + $4), $4, $4, [0], [0])
	$5 = *($0)
	
.LABEL $label$5
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = ($0 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($0 + [8])
	
.LABEL $label$6
	CALL memset(($5 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($1 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $1
	
.LABEL $label$8
	*(($5 + $1)) = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC _ZNSt3__19to_stringEi (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [12384], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $348(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $348(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $346 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $217($1, $0, [12352])
	CALL abort()
	(unreachable)
}

void .FUNC $345 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $217($1, $0, [12368])
	CALL abort()
	(unreachable)
}

int_32 .FUNC $212 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[3]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [896])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$2 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[0]), [896])
	CALL memcpy(*($4), $7, [1])
	$6 = (*($4) + [1])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[0]), [896])
	CALL memcpy(*($4), ($7 + [1]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[0]), [896])
	CALL memcpy(*($4), ($7 + [2]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	$7 = ($7 + [3])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $343 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = CALL strlen($1)
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$6 = ($4 + $3)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$6 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($6 + [16]) & [-16])
	$6 = CALL $329($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $6
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($6, $1, $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	CALL $336($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $342 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $341 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $340 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC _ZN6niuniu8removebkERKyS1_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [192])
	*([0] + [4]) = $13
	CALL require_auth(*($1))
	CALL $128(($13 + [8]), $0, $2)
	if ( ((int_64)*($13 + [24]) != (int_64)*($1)) ){ goto $label$4 }
	$10 = *($2)
	$3 = *(($0 + [352]))
	$7 = *(($0 + [356]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	$8 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$6:
	if ( ((int_64)*(*($8)) == (int_64)$10) ){ goto $label$5 }
	$7 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = ($0 + [328])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$3 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [720])
	goto $label$2 
	
.LABEL $label$4
	CALL $254($0, ($13 + [8]), $1)
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$6 = CALL db_find_i64(*(($0 + [328])), *(($0 + [336])), (int_64)4929617616895442944, $10)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $252($4, $6)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [720])
	
.LABEL $label$2
	CALL eosio_assert(($8 == 0), [3184])
	$5 = *($1)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [688]
	$11 = (int_64)0
	
.LOOP $label$7:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$8 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$6 = ($6 + [165])
	goto $label$9 
	
.LABEL $label$10
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$8
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$7 }
	if ( ((int_64)$5 == (int_64)$11) ){ goto $label$11 }
	CALL eosio_assert(((int_64)*(($13 + [24])) == (int_64)$5), [3216])
	
.LABEL $label$11
	$9 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [328])) == (int_64)CALL $fimport$14()), [832])
	*(($8 = CALL $329([40])) + [24]) = $4
	*($8) = *($2)
	*($8 + [8]) = *((($13 + [8]) + [16]))
	*($8 + [16]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [896])
	CALL memcpy(($13 + [160]), $8, [8])
	CALL eosio_assert([1], [896])
	CALL memcpy((($13 + [160]) | [8]), ($8 + [8]), [8])
	CALL eosio_assert([1], [896])
	CALL memcpy((($13 + [160]) + [16]), ($8 + [16]), [8])
	$10 = *($8)
	$7 = CALL db_store_i64(*(($0 + [336])), (int_64)4929617616895442944, $9, $10, ($13 + [160]), [24])
	*($8 + [28]) = $7
	$6 = ($0 + [344])
	if ( (uint_64)($10 <= *($6)) ){ goto $label$12 }
	*($6) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*($13 + [152]) = $8
	$10 = *($8)
	*($13 + [160]) = $10
	*($13 + [148]) = $7
	$4 = ($0 + [356])
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [360]))) ){ goto $label$14 }
	*($6 + [8]) = $10
	*($6 + [16]) = $7
	*($13 + [152]) = [0]
	*($6) = $8
	*($4) = ($6 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $253(($0 + [352]), ($13 + [152]), ($13 + [160]), ($13 + [148]))
	
.LABEL $label$13
	$8 = *($13 + [152])
	*($13 + [152]) = [0]
	if ( ($8 == 0) ){ goto $label$1 }
	CALL $330($8)
	
.LABEL $label$1
	if ( ((*($13 + [112]) & [1]) == 0) ){ goto $label$15 }
	CALL $330(*(($13 + [120])))
	
.LABEL $label$15
	if ( ((*($13 + [92]) & [1]) == 0) ){ goto $label$16 }
	CALL $330(*(($13 + [100])))
	
.LABEL $label$16
	*([0] + [4]) = ($13 + [192])
}

void .FUNC $283 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$3 = *($1)
	$4 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [8])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [136]) == (int_32)$6), [720])
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4816283142123945984, $3)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$5 }
	$7 = CALL $74($6, $7)
	CALL eosio_assert(((int_32)*($7 + [136]) == (int_32)$6), [720])
	goto $label$3 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$3
	*($9 + [44]) = $7
	*($9 + [40]) = $6
	CALL eosio_assert(((int_32)*($7 + [81]) == (int_32)[3]), [1808])
	$8 = ((int_64)*($7 + [48]) > (int_64)0)
	*($9 + [39]) = $8
	*($9 + [24]) = ((int_64)*($7 + [8]) + (int_64)(CASTING uint_64)(uint_32 $8))
	$3 = *($0)
	$7 = *($9 + [44])
	*($9 + [12]) = $0
	*($9 + [8]) = ($9 + [24])
	*($9 + [16]) = ($9 + [40])
	*($9 + [20]) = ($9 + [39])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [784])
	CALL $284($6, $7, $3, ($9 + [8]))
	if ( CALL $285($0, $1) ){ goto $label$6 }
	CALL $286($0, $1)
	*($9 + [8]) = [1]
	CALL $137($0, $1, ($9 + [24]), ($9 + [8]))
	CALL $287($0, $1, ($9 + [24]))
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [48])
}

void .FUNC _ZN6niuniu5claimERKyS1_ (int_32 $0, int_32 $1, int_32 $2)
{
	CALL require_auth(*($1))
	CALL $278($0, $1, $2)
}

void .FUNC _ZN6niuniu6pushbkERKyS1_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [144])
	*([0] + [4]) = $3
	CALL require_auth(*($1))
	CALL $128(($3 + [8]), $0, $2)
	CALL eosio_assert(((int_64)*($3 + [24]) != (int_64)*($1)), [3360])
	CALL $266($0, ($3 + [8]), $1)
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$1 }
	CALL $330(*(($3 + [120])))
	
.LABEL $label$1
	if ( ((*($3 + [92]) & [1]) == 0) ){ goto $label$2 }
	CALL $330(*(($3 + [100])))
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [144])
}

void .FUNC _ZN6niuniu9cstartbetERKyS1_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [688]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	CALL $283($0, $1, $2)
}

void .FUNC _ZN6niuniu8cstopbetERKyS1_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [688]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	CALL $280($0, $1, $2)
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [32])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*($7 + [8]) = (int_64)0
	*($7) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [672])
	CALL memcpy($7, $5, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [672])
	$3 = ($7 + [8])
	CALL memcpy($3, ($5 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	$4 = *($3)
	*($7 + [24]) = *($7)
	*($7 + [16]) = $4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	CALL void $1((int_32 ($7 + [24])), (int_32 ($7 + [16])), (int_32 $6))
	*([0] + [4]) = ($7 + [32])
	return [1]
}

void .FUNC $280 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [144])
	*([0] + [4]) = $3
	CALL $128(($3 + [8]), $0, $1)
	CALL eosio_assert(((int_64)*($3 + [16]) == (int_64)*($2)), [1840])
	CALL eosio_assert(((int_32)*($3 + [89]) == (int_32)[1]), [1808])
	CALL $281($0, $1)
	*($3 + [7]) = [2]
	CALL $137($0, ($3 + [8]), ($3 + [16]), ($3 + [7]))
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$1 }
	CALL $330(*(($3 + [120])))
	
.LABEL $label$1
	if ( ((*($3 + [92]) & [1]) == 0) ){ goto $label$2 }
	CALL $330(*(($3 + [100])))
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [144])
}

void .FUNC _ZN6niuniu10tptransferERKyN5eosio8currency8transferE (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [112])
	*([0] + [4]) = $11
	CALL $61(($11 + [64]), $0)
	CALL eosio_assert(((int_64)*($11 + [80]) == (int_64)1), [1760])
	$8 = *($0)
	if ( ((int_64)*($2) == (int_64)$8) ){ goto $label$5 }
	if ( ((int_64)*($2 + [8]) != (int_64)$8) ){ goto $label$5 }
	$3 = ($2 + [32])
	$6 = *($2 + [32])
	$4 = CALL strlen([3648])
	if ( ((int_32)$4 != (int_32)( *(($2 + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$7 }
	if ( (CALL $342($3, [0], [-1], [3648], $4) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = *($1)
	$8 = (int_64)0
	$7 = (int_64)59
	$1 = [2416]
	$9 = (int_64)0
	
.LOOP $label$8:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$9 }
	$6 = *($1)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$6 = ($6 + [165])
	goto $label$10 
	
.LABEL $label$11
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$1 = ($1 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	if ( ((int_64)$5 != (int_64)$9) ){ goto $label$5 }
	*($11 + [40]) = [0]
	*($11 + [32]) = (int_64)0
	CALL $353(($11 + [16]), $3)
	CALL $307($0, ($11 + [16]), ($11 + [63]), ($11 + [48]), ($11 + [47]), ($11 + [32]))
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL $330(*($11 + [24]))
	
.LABEL $label$12
	if ( (*($11 + [63]) == 0) ){ goto $label$1 }
	$8 = (int_64)0
	$7 = (int_64)59
	$1 = [688]
	$9 = (int_64)0
	
.LOOP $label$13:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$14 }
	$6 = *($1)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$6 = ($6 + [165])
	goto $label$15 
	
.LABEL $label$16
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$14
	$1 = ($1 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$13 }
	if ( ((int_64)$9 == (int_64)*($2)) ){ goto $label$2 }
	*($11 + [104]) = ($0 + [368])
	CALL $308(($11 + [64]), ($11 + [104]), $2)
	$6 = *($11 + [68])
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = [0]
	
.LOOP $label$17:
	if ( ((int_64)*($6 + [8]) != (int_64)*($2)) ){ goto $label$3 }
	$1 = ($1 + [1])
	CALL $309(($11 + [64]))
	$6 = *($11 + [68])
	if ( $6 ){ goto $label$17 }
	goto $label$3 
	
.LABEL $label$6
	CALL $306($0, $1, $2, ($2 + [16]))
	
.LABEL $label$5
	*([0] + [4]) = ($11 + [112])
	return 
	
.LABEL $label$4
	$1 = [0]
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$1 < (int_32)[3]), [3664])
	
.LABEL $label$2
	CALL $61(($11 + [64]), $0)
	CALL eosio_assert(((int_64)*($2 + [16]) == (int_64)*($11 + [88])), [3712])
	CALL $353($11, ($11 + [32]))
	CALL $310($0, $2, ($11 + [48]), ($11 + [47]), $11)
	if ( ((*($11) & [1]) == 0) ){ goto $label$1 }
	CALL $330(*($11 + [8]))
	
.LABEL $label$1
	if ( ((*($11 + [32]) & [1]) == 0) ){ goto $label$18 }
	CALL $330(*(($11 + [40])))
	
.LABEL $label$18
	*([0] + [4]) = ($11 + [112])
}

void .FUNC _ZN6niuniu8startbetERKyS1_ (int_32 $0, int_32 $1, int_32 $2)
{
	CALL require_auth(*($0))
	CALL $283($0, $1, $2)
}

void .FUNC $281 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *($1)
	$3 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	$1 = ($6 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($1)) == (int_64)$2) ){ goto $label$1 }
	$6 = $1
	$5 = ($1 + [-24])
	$1 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$4 }
	$1 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$5), [720])
	goto $label$3 
	
.LABEL $label$4
	$1 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4816283142123945984, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $74($5, $6)
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$5), [720])
	
.LABEL $label$3
	$2 = *($0)
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [784])
	CALL $282($5, $1, $2, ($7 + [8]))
	*([0] + [4]) = ($7 + [16])
}