(data (i32.const 8192) "eosio.token\00")
(data (i32.const 8204) "transfer\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8299) "Must transfer EOS\00")
(data (i32.const 8317) "string is too long to be a valid name\00")
(data (i32.const 8355) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8422) "character is not in allowed character set for names\00")
(data (i32.const 8474) "betEOS\00")
(data (i32.const 8481) "EOS\00")
(data (i32.const 8485) "Bet EOS\00")
(data (i32.const 8493) "cannot increment end iterator\00%d\00")
(data (i32.const 8526) "error reading iterator\00")
(data (i32.const 8549) "read\00")
(data (i32.const 8554) "get\00")
(data (i32.const 8558) "cannot decrement end iterator when the table is empty\00%llu\00")
(data (i32.const 8617) "cannot decrement iterator at beginning of table\00")
(data (i32.const 8665) "cannot pass end iterator to modify\00")
(data (i32.const 8700) "object passed to modify is not in multi_index\00")
(data (i32.const 8746) "cannot modify objects in table of another contract\00")
(data (i32.const 8797) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8856) "write\00")
(data (i32.const 8862) "cannot create objects in table of another contract\00")
(data (i32.const 8913) "next primary key in table is at autoincrement limit\00")
(data (i32.const 8965) "string is too long to be a valid symbol_code\00")
(data (i32.const 9010) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9063) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9112) "invalid symbol name\00")
(data (i32.const 9132) "dividendsEOS\00")
(data (i32.const 9145) "Dividends EOS\00")
(data (i32.const 9159) "startGame\00")
(data (i32.const 9169) "endGame\00")
(data (i32.const 9177) "resolvebets\00")
(data (i32.const 9189) "Dividends Game Fee\00")
(data (i32.const 9208) " successfully dividends for fee : \00")
(data (i32.const 9243) "no dividends cause no one hit result\00")
(data (i32.const 9280) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9332) "x$\00\00")
(data (i32.const 9336) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9369) "dividendsEOSToAll\00")
(data (i32.const 9387) " successfully dividends eos -- Congratulations!! magnetic.live : \00")
(data (i32.const 9453) "successfully erased record tables\00")
(data (i32.const 9487) "cannot pass end iterator to erase\00")
(data (i32.const 9521) "object passed to erase is not in multi_index\00")
(data (i32.const 9566) "cannot erase objects in table of another contract\00")
(data (i32.const 9616) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9669) "result:\00")
(data (i32.const 9677) "wrong eos amount\00")
(data (i32.const 9694) "already endgame\00")
(data (i32.const 9710) " successfully bet eos -- Wait for the result!! magnetic.live : \00")
(data (i32.const 9774) "MAG\00")
(data (i32.const 9778) "Dividends MAG :\00")
(data (i32.const 9794) " -- Airdrop! Play: magnetic.live\00")
(data (i32.const 18256) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$4 (param i32)))
(import "env" "require_auth" (func $fimport$5 (param i64)))
(import "env" "send_inline" (func $fimport$6 (param i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$10 (param i64)))
(import "env" "printn" (func $fimport$11 (param i64)))
(import "env" "printi" (func $fimport$12 (param i64)))
(import "env" "prints_l" (func $fimport$13 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$14 (result i64)))
(import "env" "db_previous_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$16 (param i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$18 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$19 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$20 (result i64)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "abort" (func $fimport$22))
(import "env" "memset" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$35 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$36 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$39 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$41 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$42 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$43 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $66))
(export "_Znwj" (func $64))
(export "_Znaj" (func $65))
(export "_ZdaPv" (func $67))
(export "_ZnwjSt11align_val_t" (func $68))
(export "_ZnajSt11align_val_t" (func $69))
(export "_ZdlPvSt11align_val_t" (func $70))
(export "_ZdaPvSt11align_val_t" (func $71))
(table $0 13 13 anyfunc)
(elem (i32.const 1) $3 $5 $7 $8 $10 $11 $13 $14 $15 $17 $89 $91)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18336))
(global $global$2 i32 (i32.const 18336))


int_32 .FUNC $98 (int_32 $0)
{
	return CALL $99([9848], $0)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $100($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8213])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $95 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $96 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $86())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $97($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $98($1)
	
.LABEL $label$2
	*(CALL $86()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $98(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $101($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $88([12], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $93 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [8700])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [8746])
	$6 = *(*($3))
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)1)
	*($1 + [24]) = ((int_64)$6 + (int_64)*($1 + [24]))
	$7 = *($1)
	CALL eosio_assert([1], [8797])
	$3 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [40])
	$6 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [8])
	$9 = ($1 + [32])
	$10 = ($1 + [24])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $98($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [28]) = $8
	*($5 + [32]) = $10
	*($5 + [36]) = $9
	*($5 + [24]) = $1
	*($5 + [40]) = ($1 + [40])
	*($5 + [44]) = ($1 + [48])
	CALL $48(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [60]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $101($4)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8856])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8856])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8856])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $49(*($1), *($0 + [4]))
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8856])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8856])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8856])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8856])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $85($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $85($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	CALL $50(*($0 + [4]), $1)
	$5 = *($1 + [24])
	$6 = ( *(($1 + [28])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [36])
	$7 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [24])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $98($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = $6
	*($3 + [40]) = ($1 + [40])
	*($3 + [44]) = ($1 + [48])
	CALL $51(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($4 + [8]), (int_64)4229865212519383040, *(*($0 + [8])), $7, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $101($2)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

void .FUNC $40 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [192])
	$global$0 = $4
	$5 = CALL $95([9774])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8965])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [9773]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9010])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9063])
	$8 = ((int_64)$6 & (int_64)72057594037927935)
	$9 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $6
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$8 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [9112])
	*($4 + [128]) = (int_64)3617214756542218240
	$8 = *($0)
	*($4 + [120]) = $8
	*(($4 + [48])) = [0]
	*($4 + [40]) = (int_64)0
	$5 = CALL $95([9778])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$23 }
	*($4 + [40]) = ($5 << [1])
	$7 = (($4 + [40]) | [1])
	if ( $5 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$10 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($4 + [40]) = ($10 | [1])
	*($4 + [48]) = $7
	*($4 + [44]) = $5
	
.LABEL $label$22
	CALL memcpy($7, [9778], $5)
	
.LABEL $label$21
	*(($7 + $5)) = [0]
	CALL $84(($4 + [24]), $1)
	$5 = *($4 + [24])
	$7 = ($5 & [1])
	$5 = CALL $79(($4 + [40]), ( *($4 + [32]) ? (($4 + [24]) | [1]) : $7 ), ( *($4 + [28]) ? uint_32($5 >> [1]) : $7 ))
	$7 = ($5 + [8])
	*((($4 + [56]) + [8])) = *($7)
	*($4 + [56]) = *($5)
	*($5) = (int_64)0
	*($7) = [0]
	*((($4 + [8]) + [8])) = [0]
	*($4 + [8]) = (int_64)0
	$5 = CALL $95([9794])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$26 }
	*($4 + [8]) = ($5 << [1])
	$10 = (($4 + [8]) | [1])
	$7 = $10
	if ( $5 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$10 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($4 + [8]) = ($10 | [1])
	*($4 + [16]) = $7
	*($4 + [12]) = $5
	$10 = (($4 + [8]) | [1])
	
.LABEL $label$25
	CALL memcpy($7, [9794], $5)
	
.LABEL $label$24
	*(($7 + $5)) = [0]
	$5 = *($4 + [8])
	$7 = ($5 & [1])
	$5 = CALL $79(($4 + [56]), ( *($4 + [16]) ? $10 : $7 ), ( *($4 + [12]) ? uint_32($5 >> [1]) : $7 ))
	$6 = *($5)
	*($5) = (int_64)0
	$7 = *($5 + [8])
	*($5 + [8]) = [0]
	*(($4 + [96])) = $9
	*(($4 + [112])) = $7
	*($4 + [80]) = $3
	*($4 + [72]) = $8
	*($4 + [104]) = $6
	*($4 + [88]) = $2
	$5 = CALL $24(($4 + [136]), ($4 + [120]), (int_64)-7955442243964963968, (int_64)-3617168760277827584, ($4 + [72]))
	CALL $25(($4 + [176]), $5)
	$7 = *($4 + [176])
	CALL send_inline($7, (*($4 + [180]) - $7))
	$7 = *($4 + [176])
	if ( ($7 == 0) ){ goto $label$27 }
	*($4 + [180]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$27
	$7 = *($5 + [28])
	if ( ($7 == 0) ){ goto $label$28 }
	*(($5 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$28
	$7 = *($5 + [16])
	if ( ($7 == 0) ){ goto $label$29 }
	*(($5 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$29
	if ( (*($4 + [104]) & [1]) ){ goto $label$31 }
	if ( (*($4 + [8]) & [1]) ){ goto $label$30 }
	goto $label$18 
	
.LABEL $label$31
	CALL _ZdlPv(*(($4 + [112])))
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$30
	CALL _ZdlPv(*(($4 + [16])))
	$5 = [1]
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$20
	CALL $72(($4 + [40]))
	
.LABEL $label$19
	CALL $72(($4 + [8]))
	
.LABEL $label$18
	$5 = [1]
	if ( (*($4 + [56]) & [1]) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($4 + [24]) & $5) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*($4 + [64]))
	if ( ((*($4 + [24]) & $5) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($4 + [32])))
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( (*($4 + [40]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	$global$0 = ($4 + [192])
	return 
	
.LABEL $label$12
	CALL _ZdlPv(*($4 + [48]))
	$global$0 = ($4 + [192])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8554])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $43($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8549])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $85($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8549])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $19(*($1), *($0 + [4]))
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8549])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8549])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8549])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8549])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8856])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8856])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8856])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8856])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $49(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $8 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$2 = ($global$0 - [240])
	$global$0 = $2
	CALL prints([9369])
	CALL require_auth(*($0))
	*((($2 + [184]) + [32])) = [0]
	*($2 + [200]) = (int_64)-1
	*($2 + [208]) = (int_64)0
	$3 = *($0 + [8])
	*($2 + [184]) = $3
	*($2 + [192]) = $3
	$4 = CALL $27(($2 + [184]), CALL $fimport$8($3, $3, (int_64)7035937633859534848, $1))
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)($2 + [184])), [9280])
	$5 = *($4 + [40])
	*((($2 + [144]) + [32])) = [0]
	*($2 + [160]) = (int_64)-1
	*($2 + [168]) = (int_64)0
	$3 = *($0 + [8])
	*($2 + [144]) = $3
	*($2 + [152]) = $3
	if ( (int_64)($5 == 0) ){ goto $label$8 }
	$4 = CALL $95([8481])
	if ( ($4 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [8965])
	goto $label$6 
	
.LABEL $label$8
	CALL prints([9243])
	$6 = *($2 + [168])
	if ( $6 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$7
	if ( ($4 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = (int_64)0
	
.LOOP $label$9:
	$8 = *(($4 + [8480]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [9010])
	
.LABEL $label$10
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$9 }
	goto $label$2 
	
.LABEL $label$5
	$7 = (int_64)0
	goto $label$2 
	
.LABEL $label$4
	$17 = [30]
	goto $label$1 
	
.LABEL $label$3
	$17 = [23]
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9063])
	$3 = ((int_64)$7 & (int_64)72057594037927935)
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$7 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$3 = $7
	$8 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$3 = $7
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $8 ){ goto $label$15 }
	$8 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$8 = [0]
	
.LABEL $label$11
	CALL eosio_assert($8, [9112])
	$4 = CALL db_lowerbound_i64(*($2 + [144]), *((($2 + [144]) + [8])), (int_64)-4992121823200776192, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$16 }
	$10 = (($2 + [40]) + [32])
	$11 = (($2 + [24]) | [1])
	$12 = (($2 + [40]) + [16])
	$13 = ($2 + [64])
	$14 = ($2 + [132])
	$15 = ($2 + [80])
	$16 = ($2 + [124])
	$4 = CALL $33(($2 + [144]), $4)
	if ( ((int_64)*($4 + [8]) != (int_64)$1) ){ goto $label$17 }
	$17 = [2]
	goto $label$1 
	
.LABEL $label$17
	$17 = [0]
	goto $label$1 
	
.LABEL $label$16
	$17 = [22]
	
.LABEL $label$1
	
.LOOP $label$18:
	goto $label$66 
	
.LABEL $label$86
	*((($2 + [88]) + [8])) = (int_64)3617214756542218240
	$7 = *($0)
	*($2 + [88]) = $7
	*(($6 = (($2 + [24]) + [8]))) = [0]
	*($2 + [24]) = (int_64)0
	$8 = CALL $95([9145])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$39 }
	$17 = [3]
	goto $label$18 
	
.LABEL $label$85
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$38 }
	$17 = [20]
	goto $label$18 
	
.LABEL $label$84
	*($2 + [24]) = ($8 << [1])
	$18 = $11
	if ( $8 ){ goto $label$36 }
	goto $label$37 
	
.LABEL $label$83
	$19 = (($8 + [16]) & [-16])
	$18 = CALL _Znwj($19)
	*($6) = $18
	*($2 + [24]) = ($19 | [1])
	*($2 + [28]) = $8
	$17 = [5]
	goto $label$18 
	
.LABEL $label$82
	CALL memcpy($18, [9145], $8)
	$17 = [6]
	goto $label$18 
	
.LABEL $label$81
	*(($18 + $8)) = [0]
	$3 = *($4 + [16])
	*($12) = $5
	*($13) = $9
	*($10) = *($2 + [24])
	*(($10 + [8])) = *($6)
	*(($18 = (($2 + [40]) + [8]))) = $3
	*($6) = [0]
	*($2 + [40]) = $7
	*($2 + [24]) = (int_64)0
	CALL $25(($2 + [224]), CALL $24(($2 + [104]), ($2 + [88]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($2 + [40])))
	$8 = *($2 + [224])
	CALL send_inline($8, (*($2 + [228]) - $8))
	$8 = *($2 + [224])
	if ( ($8 == 0) ){ goto $label$35 }
	$17 = [7]
	goto $label$18 
	
.LABEL $label$80
	*($2 + [228]) = $8
	CALL _ZdlPv($8)
	$17 = [8]
	goto $label$18 
	
.LABEL $label$79
	$8 = *($14)
	if ( ($8 == 0) ){ goto $label$34 }
	$17 = [9]
	goto $label$18 
	
.LABEL $label$78
	*((($2 + [104]) + [32])) = $8
	CALL _ZdlPv($8)
	$17 = [10]
	goto $label$18 
	
.LABEL $label$77
	$8 = *((($2 + [104]) + [16]))
	if ( ($8 == 0) ){ goto $label$33 }
	$17 = [11]
	goto $label$18 
	
.LABEL $label$76
	*($16) = $8
	CALL _ZdlPv($8)
	$17 = [12]
	goto $label$18 
	
.LABEL $label$75
	if ( ((*($10) & [1]) == 0) ){ goto $label$32 }
	$17 = [13]
	goto $label$18 
	
.LABEL $label$74
	CALL _ZdlPv(*($15))
	$17 = [14]
	goto $label$18 
	
.LABEL $label$73
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$31 }
	$17 = [15]
	goto $label$18 
	
.LABEL $label$72
	CALL _ZdlPv(*($6))
	$17 = [16]
	goto $label$18 
	
.LABEL $label$71
	$3 = *(($4 + [16]))
	CALL $84(($2 + [40]), $5)
	$8 = CALL $81(($2 + [40]), [0], [9387])
	$6 = ($8 + [8])
	*(($19 = (($2 + [8]) + [8]))) = *($6)
	*($2 + [8]) = *($8)
	*($8) = (int_64)0
	*($6) = [0]
	CALL $31($0, $3, ($2 + [8]))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$30 }
	$17 = [17]
	goto $label$18 
	
.LABEL $label$70
	CALL _ZdlPv(*($19))
	$17 = [18]
	goto $label$18 
	
.LABEL $label$69
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$41 }
	$17 = [19]
	goto $label$18 
	
.LABEL $label$68
	CALL _ZdlPv(*($18))
	goto $label$42 
	
.LABEL $label$67
	$4 = CALL $33(($2 + [144]), $4)
	if ( ((int_64)*($4 + [8]) == (int_64)$1) ){ goto $label$40 }
	$17 = [0]
	goto $label$18 
	
.LABEL $label$66
	CALL eosio_assert([1], [8493])
	$4 = CALL db_next_i64(*($4 + [28]), ($2 + [40]))
	if ( ((int_32)$4 >= (int_32)[0]) ){ goto $label$43 }
	$17 = [22]
	goto $label$18 
	
.LABEL $label$65
	$6 = *($2 + [168])
	if ( ($6 == 0) ){ goto $label$29 }
	$17 = [23]
	goto $label$18 
	
.LABEL $label$64
	$10 = ($2 + [172])
	$4 = *($10)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$28 }
	$17 = [24]
	goto $label$18 
	
.LABEL $label$63
	$17 = [25]
	goto $label$18 
	
.LABEL $label$62
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$26 }
	$17 = [26]
	goto $label$18 
	
.LABEL $label$61
	CALL _ZdlPv($8)
	$17 = [27]
	goto $label$18 
	
.LABEL $label$60
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$27 }
	$17 = [28]
	goto $label$18 
	
.LABEL $label$59
	$4 = *(($2 + [168]))
	goto $label$25 
	
.LABEL $label$58
	$4 = $6
	$17 = [29]
	goto $label$18 
	
.LABEL $label$57
	*($10) = $6
	CALL _ZdlPv($4)
	$17 = [30]
	goto $label$18 
	
.LABEL $label$56
	$6 = *($2 + [208])
	if ( ($6 == 0) ){ goto $label$24 }
	$17 = [31]
	goto $label$18 
	
.LABEL $label$55
	$10 = ($2 + [212])
	$4 = *($10)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$23 }
	$17 = [32]
	goto $label$18 
	
.LABEL $label$54
	$17 = [33]
	goto $label$18 
	
.LABEL $label$53
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$21 }
	$17 = [34]
	goto $label$18 
	
.LABEL $label$52
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$20 }
	$17 = [35]
	goto $label$18 
	
.LABEL $label$51
	CALL _ZdlPv(*(($8 + [16])))
	$17 = [36]
	goto $label$18 
	
.LABEL $label$50
	CALL _ZdlPv($8)
	$17 = [37]
	goto $label$18 
	
.LABEL $label$49
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$22 }
	$17 = [38]
	goto $label$18 
	
.LABEL $label$48
	$4 = *(($2 + [208]))
	goto $label$19 
	
.LABEL $label$47
	$4 = $6
	$17 = [39]
	goto $label$18 
	
.LABEL $label$46
	*($10) = $6
	CALL _ZdlPv($4)
	$17 = [40]
	goto $label$18 
	
.LABEL $label$45
	$global$0 = ($2 + [240])
	return (unreachable)
	
.LABEL $label$44
	CALL $72(($2 + [24]))
	
.LABEL $label$43
	$17 = [1]
	goto $label$18 
	
.LABEL $label$42
	$17 = [0]
	goto $label$18 
	
.LABEL $label$41
	$17 = [0]
	goto $label$18 
	
.LABEL $label$40
	$17 = [2]
	goto $label$18 
	
.LABEL $label$39
	$17 = [21]
	goto $label$18 
	
.LABEL $label$38
	$17 = [4]
	goto $label$18 
	
.LABEL $label$37
	$17 = [6]
	goto $label$18 
	
.LABEL $label$36
	$17 = [5]
	goto $label$18 
	
.LABEL $label$35
	$17 = [8]
	goto $label$18 
	
.LABEL $label$34
	$17 = [10]
	goto $label$18 
	
.LABEL $label$33
	$17 = [12]
	goto $label$18 
	
.LABEL $label$32
	$17 = [14]
	goto $label$18 
	
.LABEL $label$31
	$17 = [16]
	goto $label$18 
	
.LABEL $label$30
	$17 = [18]
	goto $label$18 
	
.LABEL $label$29
	$17 = [30]
	goto $label$18 
	
.LABEL $label$28
	$17 = [42]
	goto $label$18 
	
.LABEL $label$27
	$17 = [25]
	goto $label$18 
	
.LABEL $label$26
	$17 = [27]
	goto $label$18 
	
.LABEL $label$25
	$17 = [29]
	goto $label$18 
	
.LABEL $label$24
	$17 = [40]
	goto $label$18 
	
.LABEL $label$23
	$17 = [41]
	goto $label$18 
	
.LABEL $label$22
	$17 = [33]
	goto $label$18 
	
.LABEL $label$21
	$17 = [37]
	goto $label$18 
	
.LABEL $label$20
	$17 = [36]
	goto $label$18 
	
.LABEL $label$19
	$17 = [39]
	goto $label$18 
	$17
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $98($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8549])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $101($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $98($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = [0]
	*($4 + [64]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	CALL $19(($4 + [48]), ($4 + [64]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$3 = *($3)
	*((($4 + [80]) + [8])) = $3
	*(($8 = (($4 + [96]) + [8]))) = $3
	$9 = *($4)
	*($4 + [96]) = $9
	*($4 + [80]) = $9
	$3 = *($8)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [96])
	*($4 + [32]) = $0
	*($4 + [112]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$8 = CALL $73(($4 + [96]), ($4 + [64]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $73(($4 + [112]), $8)
	CALL void $3((int_32 $5), (int_32 $6))
	if ( (*($4 + [112]) & [1]) ){ goto $label$11 }
	if ( (*($4 + [96]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	
.LABEL $label$8
	$2 = [1]
	if ( (*($4 + [64]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $101($2)
	$2 = [1]
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [72])))
	$global$0 = ($4 + [128])
	return $2
	
.LABEL $label$5
	$global$0 = ($4 + [128])
	return $2
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	float_64 $11
	int_64 $12
	int_32 $13
	$3 = ($global$0 - [288])
	$global$0 = $3
	*($3 + [264]) = $1
	CALL prints([9177])
	CALL require_auth(*($0))
	*((($3 + [224]) + [32])) = [0]
	*($3 + [240]) = (int_64)-1
	*($3 + [248]) = (int_64)0
	$4 = *($0 + [8])
	*($3 + [224]) = $4
	*($3 + [232]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)7035937633859534848, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $27(($3 + [224]), $6)
	CALL eosio_assert(((int_32)*($5 + [56]) == (int_32)($3 + [224])), [9280])
	
.LABEL $label$1
	$7 = *($5 + [24])
	*((($3 + [184]) + [32])) = [0]
	*($3 + [200]) = (int_64)-1
	*($3 + [208]) = (int_64)0
	$4 = *(($0 + [8]))
	*($3 + [184]) = $4
	*($3 + [192]) = $4
	*((($3 + [144]) + [32])) = [0]
	*($3 + [152]) = $4
	*($3 + [144]) = $4
	*($3 + [160]) = (int_64)-1
	*($3 + [168]) = (int_64)0
	$6 = CALL db_lowerbound_i64($4, $4, (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL $29(($3 + [144]), $6)
	*($3 + [140]) = $6
	*($3 + [136]) = ($3 + [144])
	$8 = (($3 + [32]) + [8])
	$9 = [0]
	if ( ((int_64)*($6 + [8]) != (int_64)*($3 + [264])) ){ goto $label$3 }
	$10 = [2]
	goto $label$2 
	
.LABEL $label$4
	$9 = [0]
	*($3 + [140]) = [0]
	*($3 + [136]) = ($3 + [144])
	$10 = [5]
	goto $label$2 
	
.LABEL $label$3
	$10 = [0]
	
.LABEL $label$2
	
.LOOP $label$5:
	goto $label$133 
	
.LABEL $label$136
	if ( ((int_64)*($6 + [40]) != (int_64)$2) ){ goto $label$56 }
	$10 = [3]
	goto $label$5 
	
.LABEL $label$135
	$4 = *($0)
	*($8) = ($3 + [136])
	*($3 + [36]) = ($3 + [264])
	*($3 + [32]) = ($3 + [184])
	CALL $30(($3 + [96]), ($3 + [184]), $4, ($3 + [32]))
	$9 = ($9 + [1])
	$6 = *($3 + [140])
	goto $label$57 
	
.LABEL $label$134
	$6 = CALL $29(*($3 + [136]), $6)
	*($3 + [140]) = $6
	if ( ((int_64)*($6 + [8]) == (int_64)*($3 + [264])) ){ goto $label$55 }
	$10 = [0]
	goto $label$5 
	
.LABEL $label$133
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8493])
	$6 = CALL db_next_i64(*(*($3 + [140]) + [56]), ($3 + [32]))
	if ( ((int_32)$6 >= (int_32)[0]) ){ goto $label$58 }
	$10 = [4]
	goto $label$5 
	
.LABEL $label$132
	*($3 + [140]) = [0]
	goto $label$54 
	
.LABEL $label$131
	$6 = CALL $95([8481])
	$8 = ($6 <= [8])
	$11 = ((float_64)(CASTING float_64)(uint_64 $7) * (float_64)(float_64)0.15)
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$53 }
	$10 = [77]
	goto $label$5 
	
.LABEL $label$130
	$1 = (int_64)0
	if ( ($8 == 0) ){ goto $label$51 }
	$10 = [7]
	goto $label$5 
	
.LABEL $label$129
	if ( $6 ){ goto $label$50 }
	$10 = [75]
	goto $label$5 
	
.LABEL $label$128
	$4 = (int_64)0
	goto $label$47 
	
.LABEL $label$127
	$1 = (Rounds 0)($11)
	if ( $8 ){ goto $label$52 }
	$10 = [76]
	goto $label$5 
	
.LABEL $label$126
	CALL eosio_assert([0], [8965])
	$10 = [8]
	goto $label$5 
	
.LABEL $label$125
	$4 = (int_64)0
	$10 = [9]
	goto $label$5 
	
.LABEL $label$124
	$8 = *(($6 + [8480]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$48 }
	$10 = [74]
	goto $label$5 
	
.LABEL $label$123
	CALL eosio_assert([0], [9010])
	$10 = [10]
	goto $label$5 
	
.LABEL $label$122
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$49 }
	$10 = [11]
	goto $label$5 
	
.LABEL $label$121
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9063])
	$2 = ((int_64)$4 & (int_64)72057594037927935)
	$12 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	$6 = [0]
	$10 = [12]
	goto $label$5 
	
.LABEL $label$120
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$41 }
	$10 = [68]
	goto $label$5 
	
.LABEL $label$119
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$10 = [69]
	goto $label$5 
	
.LABEL $label$118
	$2 = $4
	$8 = [1]
	$13 = $6
	$6 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$117
	$2 = $4
	$10 = [71]
	goto $label$5 
	
.LABEL $label$116
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$42 }
	$10 = [72]
	goto $label$5 
	
.LABEL $label$115
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$13 = ($6 + [1])
	$6 = $13
	if ( $8 ){ goto $label$6 }
	$10 = [73]
	goto $label$5 
	
.LABEL $label$114
	$8 = [1]
	$6 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$113
	$8 = [0]
	$10 = [14]
	goto $label$5 
	
.LABEL $label$112
	CALL eosio_assert($8, [9112])
	*($3 + [88]) = (int_64)3617214756542218240
	$2 = *($0)
	*($3 + [80]) = $2
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	$6 = CALL $95([9189])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$40 }
	$10 = [15]
	goto $label$5 
	
.LABEL $label$111
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$39 }
	$10 = [66]
	goto $label$5 
	
.LABEL $label$110
	*($3 + [16]) = ($6 << [1])
	$8 = (($3 + [16]) | [1])
	if ( $6 ){ goto $label$37 }
	goto $label$38 
	
.LABEL $label$109
	$13 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($13)
	*($3 + [16]) = ($13 | [1])
	*($3 + [24]) = $8
	*($3 + [20]) = $6
	$10 = [17]
	goto $label$5 
	
.LABEL $label$108
	CALL memcpy($8, [9189], $6)
	$10 = [18]
	goto $label$5 
	
.LABEL $label$107
	*(($8 + $6)) = [0]
	*(($3 + [56])) = $12
	$6 = ($3 + [24])
	*(($3 + [72])) = *($6)
	*($6) = [0]
	*($3 + [40]) = (int_64)-7955163111478475760
	*($3 + [32]) = $2
	*($3 + [48]) = $1
	*($3 + [64]) = *($3 + [16])
	*($3 + [16]) = (int_64)0
	$6 = CALL $24(($3 + [96]), ($3 + [80]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($3 + [32]))
	CALL $25(($3 + [272]), $6)
	$8 = *($3 + [272])
	CALL send_inline($8, (*($3 + [276]) - $8))
	$8 = *($3 + [272])
	if ( ($8 == 0) ){ goto $label$36 }
	$10 = [19]
	goto $label$5 
	
.LABEL $label$106
	*($3 + [276]) = $8
	CALL _ZdlPv($8)
	$10 = [20]
	goto $label$5 
	
.LABEL $label$105
	$8 = *($6 + [28])
	if ( ($8 == 0) ){ goto $label$35 }
	$10 = [21]
	goto $label$5 
	
.LABEL $label$104
	*(($6 + [32])) = $8
	CALL _ZdlPv($8)
	$10 = [22]
	goto $label$5 
	
.LABEL $label$103
	$8 = *($6 + [16])
	if ( ($8 == 0) ){ goto $label$34 }
	$10 = [23]
	goto $label$5 
	
.LABEL $label$102
	*(($6 + [20])) = $8
	CALL _ZdlPv($8)
	$10 = [24]
	goto $label$5 
	
.LABEL $label$101
	if ( ((*(($3 + [64])) & [1]) == 0) ){ goto $label$33 }
	$10 = [25]
	goto $label$5 
	
.LABEL $label$100
	CALL _ZdlPv(*(($3 + [72])))
	$10 = [26]
	goto $label$5 
	
.LABEL $label$99
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$32 }
	$10 = [27]
	goto $label$5 
	
.LABEL $label$98
	CALL _ZdlPv(*(($3 + [24])))
	$10 = [28]
	goto $label$5 
	
.LABEL $label$97
	CALL $84(($3 + [32]), $1)
	$6 = CALL $81(($3 + [32]), [0], [9208])
	$8 = ($6 + [8])
	*(($3 + [8])) = *($8)
	*($3) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	CALL $31($0, (int_64)-7955163111478475760, $3)
	if ( (*($3) & [1]) ){ goto $label$31 }
	$10 = [65]
	goto $label$5 
	
.LABEL $label$96
	if ( (*($3 + [32]) & [1]) ){ goto $label$30 }
	$10 = [64]
	goto $label$5 
	
.LABEL $label$95
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$28 }
	$10 = [63]
	goto $label$5 
	
.LABEL $label$94
	*($3 + [32]) = ((uint_64)(int_64))($7 - $1) / (uint_64)(CASTING int_64)(int_32 $9))
	$2 = *($0)
	*($3 + [96]) = ($3 + [32])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8665])
	CALL $32(($3 + [224]), $5, $2, ($3 + [96]))
	$13 = *($3 + [168])
	if ( $13 ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$93
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$29 }
	$10 = [30]
	goto $label$5 
	
.LABEL $label$92
	CALL _ZdlPv(*($3 + [40]))
	if ( ((int_32)$9 >= (int_32)[1]) ){ goto $label$27 }
	$10 = [31]
	goto $label$5 
	
.LABEL $label$91
	CALL prints([9243])
	$13 = *($3 + [168])
	if ( ($13 == 0) ){ goto $label$26 }
	$10 = [32]
	goto $label$5 
	
.LABEL $label$90
	$9 = ($3 + [172])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$13) ){ goto $label$23 }
	$10 = [33]
	goto $label$5 
	
.LABEL $label$89
	$10 = [34]
	goto $label$5 
	
.LABEL $label$88
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$21 }
	$10 = [35]
	goto $label$5 
	
.LABEL $label$87
	if ( ((*($8 + [24]) & [1]) == 0) ){ goto $label$20 }
	$10 = [36]
	goto $label$5 
	
.LABEL $label$86
	CALL _ZdlPv(*(($8 + [32])))
	$10 = [37]
	goto $label$5 
	
.LABEL $label$85
	CALL _ZdlPv($8)
	$10 = [38]
	goto $label$5 
	
.LABEL $label$84
	if ( ((int_32)$13 != (int_32)$6) ){ goto $label$22 }
	$10 = [39]
	goto $label$5 
	
.LABEL $label$83
	$6 = *(($3 + [168]))
	goto $label$19 
	
.LABEL $label$82
	$6 = $13
	$10 = [40]
	goto $label$5 
	
.LABEL $label$81
	*($9) = $13
	CALL _ZdlPv($6)
	$10 = [41]
	goto $label$5 
	
.LABEL $label$80
	$13 = *($3 + [208])
	if ( ($13 == 0) ){ goto $label$18 }
	$10 = [42]
	goto $label$5 
	
.LABEL $label$79
	$9 = ($3 + [212])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$13) ){ goto $label$17 }
	$10 = [43]
	goto $label$5 
	
.LABEL $label$78
	$10 = [44]
	goto $label$5 
	
.LABEL $label$77
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	$10 = [45]
	goto $label$5 
	
.LABEL $label$76
	CALL _ZdlPv($8)
	$10 = [46]
	goto $label$5 
	
.LABEL $label$75
	if ( ((int_32)$13 != (int_32)$6) ){ goto $label$16 }
	$10 = [47]
	goto $label$5 
	
.LABEL $label$74
	$6 = *(($3 + [208]))
	goto $label$14 
	
.LABEL $label$73
	$6 = $13
	$10 = [48]
	goto $label$5 
	
.LABEL $label$72
	*($9) = $13
	CALL _ZdlPv($6)
	$10 = [49]
	goto $label$5 
	
.LABEL $label$71
	$13 = *($3 + [248])
	if ( ($13 == 0) ){ goto $label$13 }
	$10 = [50]
	goto $label$5 
	
.LABEL $label$70
	$9 = ($3 + [252])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$13) ){ goto $label$12 }
	$10 = [51]
	goto $label$5 
	
.LABEL $label$69
	$10 = [52]
	goto $label$5 
	
.LABEL $label$68
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$10 }
	$10 = [53]
	goto $label$5 
	
.LABEL $label$67
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$9 }
	$10 = [54]
	goto $label$5 
	
.LABEL $label$66
	CALL _ZdlPv(*(($8 + [16])))
	$10 = [55]
	goto $label$5 
	
.LABEL $label$65
	CALL _ZdlPv($8)
	$10 = [56]
	goto $label$5 
	
.LABEL $label$64
	if ( ((int_32)$13 != (int_32)$6) ){ goto $label$11 }
	$10 = [57]
	goto $label$5 
	
.LABEL $label$63
	$6 = *(($3 + [248]))
	goto $label$8 
	
.LABEL $label$62
	$6 = $13
	$10 = [58]
	goto $label$5 
	
.LABEL $label$61
	*($9) = $13
	CALL _ZdlPv($6)
	$10 = [59]
	goto $label$5 
	
.LABEL $label$60
	$global$0 = ($3 + [288])
	return (unreachable)
	
.LABEL $label$59
	CALL $72(($3 + [16]))
	
.LABEL $label$58
	$10 = [1]
	goto $label$5 
	
.LABEL $label$57
	$10 = [0]
	goto $label$5 
	
.LABEL $label$56
	$10 = [0]
	goto $label$5 
	
.LABEL $label$55
	$10 = [2]
	goto $label$5 
	
.LABEL $label$54
	$10 = [5]
	goto $label$5 
	
.LABEL $label$53
	$10 = [6]
	goto $label$5 
	
.LABEL $label$52
	$10 = [7]
	goto $label$5 
	
.LABEL $label$51
	$10 = [76]
	goto $label$5 
	
.LABEL $label$50
	$10 = [8]
	goto $label$5 
	
.LABEL $label$49
	$10 = [9]
	goto $label$5 
	
.LABEL $label$48
	$10 = [10]
	goto $label$5 
	
.LABEL $label$47
	$10 = [11]
	goto $label$5 
	
.LABEL $label$46
	$10 = [12]
	goto $label$5 
	
.LABEL $label$45
	$10 = [14]
	goto $label$5 
	
.LABEL $label$44
	$10 = [12]
	goto $label$5 
	
.LABEL $label$43
	$10 = [14]
	goto $label$5 
	
.LABEL $label$42
	$10 = [13]
	goto $label$5 
	
.LABEL $label$41
	$10 = [13]
	goto $label$5 
	
.LABEL $label$40
	$10 = [67]
	goto $label$5 
	
.LABEL $label$39
	$10 = [16]
	goto $label$5 
	
.LABEL $label$38
	$10 = [18]
	goto $label$5 
	
.LABEL $label$37
	$10 = [17]
	goto $label$5 
	
.LABEL $label$36
	$10 = [20]
	goto $label$5 
	
.LABEL $label$35
	$10 = [22]
	goto $label$5 
	
.LABEL $label$34
	$10 = [24]
	goto $label$5 
	
.LABEL $label$33
	$10 = [26]
	goto $label$5 
	
.LABEL $label$32
	$10 = [28]
	goto $label$5 
	
.LABEL $label$31
	$10 = [29]
	goto $label$5 
	
.LABEL $label$30
	$10 = [30]
	goto $label$5 
	
.LABEL $label$29
	$10 = [64]
	goto $label$5 
	
.LABEL $label$28
	$10 = [31]
	goto $label$5 
	
.LABEL $label$27
	$10 = [63]
	goto $label$5 
	
.LABEL $label$26
	$10 = [41]
	goto $label$5 
	
.LABEL $label$25
	$10 = [41]
	goto $label$5 
	
.LABEL $label$24
	$10 = [32]
	goto $label$5 
	
.LABEL $label$23
	$10 = [62]
	goto $label$5 
	
.LABEL $label$22
	$10 = [34]
	goto $label$5 
	
.LABEL $label$21
	$10 = [38]
	goto $label$5 
	
.LABEL $label$20
	$10 = [37]
	goto $label$5 
	
.LABEL $label$19
	$10 = [40]
	goto $label$5 
	
.LABEL $label$18
	$10 = [49]
	goto $label$5 
	
.LABEL $label$17
	$10 = [61]
	goto $label$5 
	
.LABEL $label$16
	$10 = [44]
	goto $label$5 
	
.LABEL $label$15
	$10 = [46]
	goto $label$5 
	
.LABEL $label$14
	$10 = [48]
	goto $label$5 
	
.LABEL $label$13
	$10 = [59]
	goto $label$5 
	
.LABEL $label$12
	$10 = [60]
	goto $label$5 
	
.LABEL $label$11
	$10 = [52]
	goto $label$5 
	
.LABEL $label$10
	$10 = [56]
	goto $label$5 
	
.LABEL $label$9
	$10 = [55]
	goto $label$5 
	
.LABEL $label$8
	$10 = [58]
	goto $label$5 
	
.LABEL $label$7
	$10 = [70]
	goto $label$5 
	
.LABEL $label$6
	$10 = [71]
	goto $label$5 
	$10
}

int_32 .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $98($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8549])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8549])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [40])
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $101($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [128])
	$global$0 = $2
	CALL require_auth(*($0))
	*((($2 + [80]) + [32])) = [0]
	*($2 + [96]) = (int_64)-1
	$3 = *($0 + [8])
	*($2 + [80]) = $3
	*($2 + [88]) = $3
	*($2 + [104]) = (int_64)0
	$4 = CALL db_lowerbound_i64($3, $3, (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $29(($2 + [80]), $4)
	
.LOOP $label$2:
	CALL eosio_assert([1], [9487])
	CALL eosio_assert([1], [8493])
	$4 = [0]
	$6 = CALL db_next_i64(*($5 + [56]), ($2 + [40]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $29(($2 + [80]), $6)
	
.LABEL $label$3
	CALL $34(($2 + [80]), $5)
	$5 = $4
	if ( $4 ){ goto $label$2 }
	
.LABEL $label$1
	*((($2 + [40]) + [32])) = [0]
	*($2 + [56]) = (int_64)-1
	$0 = ($0 + [8])
	$3 = *($0)
	*($2 + [40]) = $3
	*($2 + [48]) = $3
	*($2 + [64]) = (int_64)0
	$4 = CALL db_lowerbound_i64($3, $3, (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $27(($2 + [40]), $4)
	
.LOOP $label$5:
	CALL eosio_assert([1], [9487])
	CALL eosio_assert([1], [8493])
	$4 = [0]
	$6 = CALL db_next_i64(*($5 + [60]), $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	$4 = CALL $27(($2 + [40]), $6)
	
.LABEL $label$6
	CALL $35(($2 + [40]), $5)
	$5 = $4
	if ( $4 ){ goto $label$5 }
	
.LABEL $label$4
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $3
	*($2 + [24]) = (int_64)0
	$4 = CALL db_lowerbound_i64($3, $3, (int_64)-4992121823200776192, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$5 = CALL $33($2, $4)
	
.LOOP $label$8:
	CALL eosio_assert([1], [9487])
	CALL eosio_assert([1], [8493])
	$4 = [0]
	$6 = CALL db_next_i64(*($5 + [28]), ($2 + [120]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$9 }
	$4 = CALL $33($2, $6)
	
.LABEL $label$9
	CALL $36($2, $5)
	$5 = $4
	if ( $4 ){ goto $label$8 }
	
.LABEL $label$7
	CALL prints([9453])
	$6 = *($2 + [24])
	if ( ($6 == 0) ){ goto $label$10 }
	$0 = ($2 + [28])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$13 }
	$4 = *(($2 + [24]))
	goto $label$11 
	
.LABEL $label$12
	$4 = $6
	
.LABEL $label$11
	*($0) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$6 = *($2 + [64])
	if ( ($6 == 0) ){ goto $label$15 }
	$0 = ($2 + [68])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$19 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$20
	CALL _ZdlPv($5)
	
.LABEL $label$19
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$18 }
	$4 = *(($2 + [64]))
	goto $label$16 
	
.LABEL $label$17
	$4 = $6
	
.LABEL $label$16
	*($0) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$6 = *($2 + [104])
	if ( ($6 == 0) ){ goto $label$21 }
	$0 = ($2 + [108])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$23 }
	
.LOOP $label$24:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$25 }
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$26
	CALL _ZdlPv($5)
	
.LABEL $label$25
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$24 }
	$4 = *(($2 + [104]))
	goto $label$22 
	
.LABEL $label$23
	$4 = $6
	
.LABEL $label$22
	*($0) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$21
	$global$0 = ($2 + [128])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8317])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8422])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8355])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8422])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $3 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL prints([8204])
	CALL $37(($3 + [176]))
	$4 = *($3 + [176])
	if ( ((int_64)$4 == (int_64)*($0)) ){ goto $label$1 }
	CALL printn($4)
	CALL printi(*($3 + [192]))
	$5 = ($3 + [208])
	CALL $82(($3 + [96]), [9669], $5)
	$6 = *($3 + [96])
	$7 = ($6 & [1])
	CALL prints_l(( *($3 + [104]) ? (($3 + [96]) | [1]) : $7 ), ( *($3 + [100]) ? uint_32($6 >> [1]) : $7 ))
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($3 + [104])))
	
.LABEL $label$2
	$4 = *($3 + [176])
	*($3 + [168]) = $4
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$6 }
	$7 = [0]
	$8 = *([0] + [9332])
	
.LOOP $label$8:
	*((($3 + [96]) + ($6 = $7))) = *(($8 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$4 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$7 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$7 }
	$4 = ((int_64)$4 << (int_64)5)
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$8 }
	
.LABEL $label$7
	*(($3 + [160])) = [0]
	*($3 + [152]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$5 }
	*($3 + [152]) = ($7 << [1])
	$8 = (($3 + [152]) | [1])
	goto $label$4 
	
.LABEL $label$6
	*(($3 + [160])) = [0]
	*($3 + [152]) = (int_64)0
	*($3 + [152]) = [0]
	$6 = (($3 + [152]) | [1])
	goto $label$3 
	
.LABEL $label$5
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($3 + [152]) = ($9 | [1])
	*($3 + [160]) = $8
	*($3 + [156]) = $7
	
.LABEL $label$4
	$9 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$9:
	*(($8 + $6)) = *((($3 + [96]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$9 }
	$6 = ($8 + $7)
	
.LABEL $label$3
	*($6) = [0]
	*($3 + [144]) = *(($3 + [192]))
	*($3 + [140]) = CALL $93(( *(($3 + [216])) ? ($5 + [1]) : (*((($3 + [176]) + [32])) & [1]) ))
	if ( ((uint_64)*($3 + [144]) > (uint_64)(int_64)2999) ){ goto $label$11 }
	CALL prints([9677])
	if ( (*($3 + [152]) & [1]) ){ goto $label$10 }
	goto $label$1 
	
.LABEL $label$11
	*((($3 + [96]) + [32])) = [0]
	*($3 + [112]) = (int_64)-1
	*($3 + [120]) = (int_64)0
	$4 = *($0)
	*($3 + [96]) = $4
	*($3 + [104]) = $4
	*($3 + [52]) = [0]
	*($3 + [48]) = ($3 + [96])
	CALL $21(($3 + [48]))
	$6 = *($3 + [52])
	if ( ((int_32)*($6 + [48]) != (int_32)[2]) ){ goto $label$14 }
	CALL prints([9694])
	$8 = *($3 + [120])
	if ( $8 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	*($3 + [92]) = *($6)
	$4 = *($0)
	*($3 + [48]) = ($3 + [144])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8665])
	CALL $38(($3 + [96]), $6, $4, ($3 + [48]))
	*(($3 + [80])) = [0]
	*($3 + [64]) = (int_64)-1
	*($3 + [72]) = (int_64)0
	$4 = *($0)
	*($3 + [48]) = $4
	*($3 + [56]) = $4
	*($3 + [28]) = ($3 + [92])
	*($3 + [24]) = ($3 + [48])
	*($3 + [32]) = ($3 + [168])
	*($3 + [36]) = ($3 + [152])
	*($3 + [40]) = ($3 + [140])
	CALL $39(($3 + [16]), ($3 + [48]), $4, ($3 + [24]))
	$4 = *($3 + [168])
	CALL $83(($3 + [24]), *($3 + [140]))
	$6 = CALL $81(($3 + [24]), [0], [9710])
	$7 = ($6 + [8])
	*(($3 + [8])) = *($7)
	*($3) = *($6)
	*($6) = (int_64)0
	*($7) = [0]
	CALL $31($0, $4, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$15
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($3 + [32]))
	
.LABEL $label$16
	CALL $40($0, *($3 + [92]), *($3 + [144]), *($3 + [168]))
	$8 = *($3 + [72])
	if ( ($8 == 0) ){ goto $label$17 }
	$9 = ($3 + [76])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$19 }
	
.LOOP $label$20:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$21 }
	if ( ((*($7 + [24]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($7 + [32])))
	
.LABEL $label$22
	CALL _ZdlPv($7)
	
.LABEL $label$21
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$20 }
	$6 = *(($3 + [72]))
	goto $label$18 
	
.LABEL $label$19
	$6 = $8
	
.LABEL $label$18
	*($9) = $8
	CALL _ZdlPv($6)
	
.LABEL $label$17
	$8 = *($3 + [120])
	if ( ($8 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$9 = ($3 + [124])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$24 }
	
.LOOP $label$25:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$26 }
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($7 + [16])))
	
.LABEL $label$27
	CALL _ZdlPv($7)
	
.LABEL $label$26
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$25 }
	$6 = *(($3 + [120]))
	goto $label$23 
	
.LABEL $label$24
	$6 = $8
	
.LABEL $label$23
	*($9) = $8
	CALL _ZdlPv($6)
	
.LABEL $label$12
	if ( ((*($3 + [152]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$10
	CALL _ZdlPv(*($3 + [160]))
	
.LABEL $label$1
	if ( ((*(($3 + [208])) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($3 + [216])))
	
.LABEL $label$28
	$global$0 = ($3 + [224])
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$2 }
	*($3 + [208]) = [8192]
	*($3 + [212]) = CALL $95([8192])
	*($3 + [104]) = *($3 + [208])
	CALL $2(($3 + [216]), ($3 + [104]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	
.LABEL $label$2
	*($3 + [200]) = [8204]
	*($3 + [204]) = CALL $95([8204])
	*($3 + [96]) = *($3 + [200])
	CALL $2(($3 + [216]), ($3 + [96]))
	if ( ((int_64)$2 > (int_64)4229630329347899391) ){ goto $label$11 }
	if ( ((int_64)$2 <= (int_64)-4157529782108553217) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-4157529782108553216) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-3841130677495922688) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [192]) = [8192]
	*($3 + [196]) = CALL $95([8192])
	*($3 + [16]) = *($3 + [192])
	CALL $2(($3 + [216]), ($3 + [16]))
	CALL eosio_assert(((int_64)$1 == (int_64)6138663591592764928), [8299])
	*($3 + [116]) = [0]
	*($3 + [112]) = [1]
	*($3 + [8]) = *($3 + [112])
	CALL $4($0, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 <= (int_64)5455799419444308351) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)5455799419444308352) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)6112162363668955136) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)6182744098496053248) ){ goto $label$1 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [2]
	*($3 + [80]) = *($3 + [128])
	CALL $6($0, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)-7119375207604682752) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-4994130327835873280) ){ goto $label$1 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [3]
	*($3 + [64]) = *($3 + [144])
	CALL $4($0, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)4229630329347899392) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)5455735341660267008) ){ goto $label$1 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [4]
	*($3 + [72]) = *($3 + [136])
	CALL $9($0, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [164]) = [0]
	*($3 + [160]) = [5]
	*($3 + [48]) = *($3 + [160])
	CALL $6($0, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [188]) = [0]
	*($3 + [184]) = [6]
	*($3 + [24]) = *($3 + [184])
	CALL $12($0, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [172]) = [0]
	*($3 + [168]) = [7]
	*($3 + [40]) = *($3 + [168])
	CALL $12($0, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [156]) = [0]
	*($3 + [152]) = [8]
	*($3 + [56]) = *($3 + [152])
	CALL $6($0, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [124]) = [0]
	*($3 + [120]) = [9]
	*($3 + [88]) = *($3 + [120])
	CALL $16($0, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [180]) = [0]
	*($3 + [176]) = [10]
	*($3 + [32]) = *($3 + [176])
	CALL $18($0, $1, ($3 + [32]))
	
.LABEL $label$1
	CALL $87([0])
	$global$0 = ($3 + [224])
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL prints([9169])
	CALL require_auth(*($0))
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	$3 = *($0 + [8])
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	*($2 + [32]) = (int_64)0
	$4 = CALL db_lowerbound_i64($3, $3, (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$5 = ($1 + [1])
	$6 = CALL $27(($2 + [8]), $4)
	$7 = ($6 + [9])
	$8 = ($1 + [4])
	$9 = ($6 + [8])
	$10 = ($6 + [12])
	$11 = ($6 + [16])
	
.LOOP $label$2:
	$4 = ($4 & [1])
	$4 = *($1)
	$13 = ($4 & [1])
	$4 = *($9)
	$12 = uint_32($4 >> [1])
	$14 = ( *($10) ? $12 : $13 )
	if ( ((int_32)$14 != (int_32)( *($8) ? uint_32($4 >> [1]) : $4 )) ){ goto $label$2 }
	$4 = ( *(($1 + [8])) ? $5 : $4 )
	if ( $13 ){ goto $label$4 }
	if ( ($14 == 0) ){ goto $label$3 }
	$14 = ([0] - $12)
	$13 = $7
	
.LOOP $label$5:
	if ( ((int_32)*($13) != (int_32)*($4)) ){ goto $label$2 }
	$4 = ($4 + [1])
	$13 = ($13 + [1])
	$14 = ($14 + [1])
	if ( $14 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ($14 == 0) ){ goto $label$3 }
	if ( CALL $94(( *($11) ? $7 : $13 ), $4, $14) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *($0)
	CALL eosio_assert([1], [8665])
	CALL $28(($2 + [8]), $6, $3, $2)
	
.LABEL $label$1
	$14 = *($2 + [32])
	if ( ($14 == 0) ){ goto $label$6 }
	$1 = ($2 + [36])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$14) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$13 = *($4)
	*($4) = [0]
	if ( ($13 == 0) ){ goto $label$10 }
	if ( ((*($13 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($13 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($13)
	
.LABEL $label$10
	if ( ((int_32)$14 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($2 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $14
	
.LABEL $label$7
	*($1) = $14
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$global$0 = ($2 + [48])
}

void .FUNC $15 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL require_auth(*($0))
	CALL require_recipient($1)
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $98($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [64]) = ($2 + $7)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8549])
	CALL memcpy(($4 + [72]), $2, [8])
	*($4 + [60]) = ($2 + [8])
	$8 = (($4 + [72]) + [8])
	CALL $19(($4 + [56]), $8)
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [96]) + [8])) = $3
	*(($9 = (($4 + [112]) + [8]))) = $3
	$10 = *($4 + [8])
	*($4 + [112]) = $10
	*($4 + [96]) = $10
	$3 = *($9)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [72])
	$8 = CALL $73(($4 + [112]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $73(($4 + [128]), $8)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [128]) & [1]) ){ goto $label$11 }
	if ( (*($4 + [112]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	
.LABEL $label$8
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $101($2)
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [88])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$5
	$global$0 = ($4 + [144])
	return $2
}

void .FUNC $17 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [256])
	$global$0 = $4
	*($4 + [224]) = $3
	*($4 + [232]) = $1
	CALL prints([8474])
	CALL require_auth($1)
	*($4 + [216]) = (int_64)1000
	*((($4 + [176]) + [32])) = [0]
	*($4 + [192]) = (int_64)-1
	$3 = (int_64)0
	*($4 + [200]) = (int_64)0
	$5 = *($0 + [8])
	*($4 + [176]) = $5
	*($4 + [184]) = $5
	*($4 + [28]) = [0]
	*($4 + [24]) = ($4 + [176])
	CALL $21(($4 + [24]))
	$6 = *($4 + [28])
	*($4 + [172]) = *($6)
	$5 = *($0)
	*($4 + [24]) = ($4 + [216])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8665])
	CALL $22(($4 + [176]), $6, $5, ($4 + [24]))
	*((($4 + [128]) + [32])) = [0]
	*($4 + [144]) = (int_64)-1
	*($4 + [152]) = (int_64)0
	$5 = *($0 + [8])
	*($4 + [128]) = $5
	*($4 + [136]) = $5
	*($4 + [36]) = $2
	*($4 + [28]) = ($4 + [172])
	*($4 + [24]) = ($4 + [128])
	*($4 + [32]) = ($4 + [232])
	*($4 + [40]) = ($4 + [224])
	CALL $23(($4 + [88]), ($4 + [128]), $1, ($4 + [24]))
	$5 = *($4 + [216])
	$6 = CALL $95([8481])
	if ( ($6 <= [8]) ){ goto $label$3 }
	CALL eosio_assert([0], [8965])
	goto $label$2 
	
.LABEL $label$3
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = (int_64)0
	
.LOOP $label$4:
	$2 = *(($6 + [8480]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$5 }
	CALL eosio_assert([0], [9010])
	
.LABEL $label$5
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$4 }
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9063])
	$1 = ((int_64)$3 & (int_64)72057594037927935)
	$7 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	$6 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $3
	$2 = [1]
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$2 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $2 ){ goto $label$10 }
	$2 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$2 = [0]
	
.LABEL $label$6
	CALL eosio_assert($2, [9112])
	*($4 + [80]) = (int_64)3617214756542218240
	*($4 + [72]) = *($4 + [232])
	$1 = *($0)
	*(($4 + [16])) = [0]
	*($4 + [8]) = (int_64)0
	$6 = CALL $95([8485])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$20 }
	*($4 + [8]) = ($6 << [1])
	$2 = (($4 + [8]) | [1])
	if ( $6 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$8 = (($6 + [16]) & [-16])
	$2 = CALL _Znwj($8)
	*($4 + [8]) = ($8 | [1])
	*($4 + [16]) = $2
	*($4 + [12]) = $6
	
.LABEL $label$19
	CALL memcpy($2, [8485], $6)
	
.LABEL $label$18
	*(($2 + $6)) = [0]
	*(($4 + [48])) = $7
	$6 = ($4 + [16])
	*(($4 + [64])) = *($6)
	*($6) = [0]
	*($4 + [32]) = $1
	*($4 + [40]) = $5
	*($4 + [24]) = *($4 + [232])
	*($4 + [56]) = *($4 + [8])
	*($4 + [8]) = (int_64)0
	$6 = CALL $24(($4 + [88]), ($4 + [72]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($4 + [24]))
	CALL $25(($4 + [240]), $6)
	$2 = *($4 + [240])
	CALL send_inline($2, (*($4 + [244]) - $2))
	$2 = *($4 + [240])
	if ( ($2 == 0) ){ goto $label$21 }
	*($4 + [244]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$21
	$2 = *($6 + [28])
	if ( ($2 == 0) ){ goto $label$22 }
	*(($6 + [32])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$22
	$2 = *($6 + [16])
	if ( ($2 == 0) ){ goto $label$23 }
	*(($6 + [20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$23
	if ( (*(($4 + [56])) & [1]) ){ goto $label$25 }
	if ( (*($4 + [8]) & [1]) ){ goto $label$24 }
	goto $label$16 
	
.LABEL $label$25
	CALL _ZdlPv(*(($4 + [64])))
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($4 + [16])))
	$8 = *($4 + [152])
	if ( $8 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	CALL $72(($4 + [8]))
	
.LABEL $label$16
	$8 = *($4 + [152])
	if ( ($8 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$0 = ($4 + [156])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$13 }
	
.LOOP $label$26:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$27 }
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($2 + [32])))
	
.LABEL $label$28
	CALL _ZdlPv($2)
	
.LABEL $label$27
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$26 }
	$6 = *(($4 + [152]))
	*($0) = $8
	CALL _ZdlPv($6)
	$8 = *($4 + [200])
	if ( $8 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$8 = *($4 + [200])
	if ( ($8 == 0) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	*($0) = $8
	CALL _ZdlPv($8)
	$8 = *($4 + [200])
	if ( ($8 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$0 = ($4 + [204])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$30 }
	
.LOOP $label$31:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$32 }
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$33
	CALL _ZdlPv($2)
	
.LABEL $label$32
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$31 }
	$6 = *(($4 + [200]))
	goto $label$29 
	
.LABEL $label$30
	$6 = $8
	
.LABEL $label$29
	*($0) = $8
	CALL _ZdlPv($6)
	$global$0 = ($4 + [256])
	return 
	
.LABEL $label$11
	$global$0 = ($4 + [256])
	(unreachable)
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL prints([9159])
	CALL require_auth(*($0))
	*(($2 + [56])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$3 = *($0 + [8])
	*($2 + [24]) = $3
	*($2 + [32]) = $3
	$3 = *($0)
	*($2 + [20]) = $1
	*($2 + [16]) = ($2 + [24])
	CALL $26(($2 + [8]), ($2 + [24]), $3, ($2 + [16]))
	$4 = *($2 + [48])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($2 + [52])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$6
	CALL _ZdlPv($1)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($2 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

void .FUNC $11 (int_32 $0, int_64 $1)
{
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $98($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8549])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $101($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [144])
	$global$0 = $2
	CALL prints([9132])
	CALL require_auth(*($0))
	$3 = CALL $95([8481])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8965])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8480]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9010])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert([1], [9063])
	$6 = ((int_64)$4 & (int_64)72057594037927935)
	$7 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $4
	$5 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $4
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $5 ){ goto $label$11 }
	$5 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	
.LABEL $label$7
	CALL eosio_assert($5, [9112])
	*($2 + [80]) = (int_64)3617214756542218240
	$6 = *($0)
	*($2 + [72]) = $6
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$3 = CALL $95([9145])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$16 }
	*($2 + [8]) = ($3 << [1])
	$5 = (($2 + [8]) | [1])
	if ( $3 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($2 + [8]) = ($8 | [1])
	*($2 + [16]) = $5
	*($2 + [12]) = $3
	
.LABEL $label$15
	CALL memcpy($5, [9145], $3)
	
.LABEL $label$14
	*(($5 + $3)) = [0]
	*(($2 + [48])) = $7
	$3 = ($2 + [16])
	*(($2 + [64])) = *($3)
	*($3) = [0]
	*($2 + [32]) = $1
	*($2 + [24]) = $6
	*($2 + [40]) = (int_64)1000
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$3 = CALL $24(($2 + [88]), ($2 + [72]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($2 + [24]))
	CALL $25(($2 + [128]), $3)
	$5 = *($2 + [128])
	CALL send_inline($5, (*($2 + [132]) - $5))
	$5 = *($2 + [128])
	if ( ($5 == 0) ){ goto $label$17 }
	*($2 + [132]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$5 = *($3 + [28])
	if ( ($5 == 0) ){ goto $label$18 }
	*(($3 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$18
	$5 = *($3 + [16])
	if ( ($5 == 0) ){ goto $label$19 }
	*(($3 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$19
	if ( (*(($2 + [56])) & [1]) ){ goto $label$21 }
	if ( (*($2 + [8]) & [1]) ){ goto $label$20 }
	goto $label$12 
	
.LABEL $label$21
	CALL _ZdlPv(*(($2 + [64])))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($2 + [16])))
	$global$0 = ($2 + [144])
	return (unreachable)
	
.LABEL $label$13
	CALL $72(($2 + [8]))
	
.LABEL $label$12
	$global$0 = ($2 + [144])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $98($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [64]) = ($2 + $5)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8549])
	CALL memcpy(($4 + [72]), $2, [8])
	*($4 + [60]) = ($2 + [8])
	CALL $19(($4 + [56]), (($4 + [72]) + [8]))
	CALL eosio_assert(((uint_32)(*($4 + [64]) - *($4 + [60])) > (uint_32)[7]), [8549])
	CALL memcpy((($4 + [72]) + [24]), *($4 + [60]), [8])
	*($4 + [60]) = (*($4 + [60]) + [8])
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [112]) + [8])) = $3
	*(($6 = (($4 + [128]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [128]) = $7
	*($4 + [112]) = $7
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [104])
	*($4 + [144]) = ($4 + [24])
	CALL $20(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $101($2)
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [88])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $47($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $76($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $76($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $72($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $85($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1 + [8])
	$4 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ([-8] - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$6 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $43($0, ([0] - $3))
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	
.LABEL $label$2
	*($2) = $3
	*($2 + [8]) = $4
	CALL eosio_assert(((int_32)($4 - $3) > (int_32)[7]), [8856])
	CALL memcpy($3, $1, [8])
	*($2 + [4]) = ($3 + [8])
	CALL $49($2, $6)
	$global$0 = ($2 + [16])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $29($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $52(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [8913])
	*($1) = *(($3 + [16]))
	*($1 + [8]) = *(*($0 + [4]))
	*($1 + [16]) = *(*($0 + [8]))
	CALL $74(($1 + [24]), *($0 + [12]))
	*($1 + [40]) = *(*($0 + [16]))
	*($1 + [48]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$global$0 = ($2 + [16])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8856])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8856])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8856])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $49(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8856])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8856])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [56]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8617])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4229865212519383040)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8558])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8558])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $29(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8549])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8549])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8549])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $19(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8549])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8549])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8856])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8856])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8856])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [9521])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [9566])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9616])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [56]))
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $27($6, $8)
	*($3 + [28]) = [0]
	*($3 + [24]) = $6
	$7 = *(*(CALL $21(($3 + [24])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [8913])
	*($1) = *(($6 + [16]))
	$8 = ($1 + [8])
	CALL $74($8, *($5 + [4]))
	*($1 + [32]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = (int_64)1
	$6 = *($1 + [8])
	$5 = ( *(($1 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [40])
	$7 = (CASTING uint_64)(uint_32 $5)
	$5 = ($1 + [48])
	$9 = ($1 + [40])
	$10 = ($1 + [32])
	$11 = ($1 + [24])
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ($6 <= [513]) ){ goto $label$5 }
	$2 = CALL $98($6)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $6)
	*($3 + [16]) = $3
	*($3 + [28]) = $8
	*($3 + [24]) = $1
	*($3 + [32]) = $11
	*($3 + [36]) = $10
	*($3 + [40]) = $9
	*($3 + [44]) = $5
	CALL $48(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)7035937633859534848, *(*($0 + [8])), $7, $2, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $101($2)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [48])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-4992121823200776192, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $33($6, $8)
	*($3 + [12]) = [0]
	*($3 + [8]) = $6
	$7 = *(*(CALL $60(($3 + [8])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [8913])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*(*($5 + [8]) + [4]) + [16])
	$6 = $2
	$2 = ($6 + [-32])
	$global$0 = $2
	CALL eosio_assert([1], [8856])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8856])
	CALL memcpy(($6 + [-24]), ($1 + [8]), [8])
	CALL eosio_assert([1], [8856])
	CALL memcpy(($6 + [-16]), ($1 + [16]), [8])
	$7 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)-4992121823200776192, *(*($0 + [8])), $7, $2, [24])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [9521])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [9566])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9616])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8526])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $98($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [16]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32]) = [0]
	*($5 + [48]) = [0]
	*($5 + [52]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [48])
	CALL $53(($3 + [40]), ($3 + [32]))
	*($5 + [56]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $42(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $101($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [8700])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [8746])
	*($1 + [48]) = (int_64)2
	$6 = *($1)
	CALL eosio_assert([1], [8797])
	$7 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($8 + [40])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [8])
	$10 = ($1 + [48])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$4 = CALL $98($7)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $7)
	*($5 + [16]) = $5
	*($5 + [28]) = $8
	*($5 + [44]) = $10
	*($5 + [24]) = $1
	*($5 + [32]) = ($1 + [24])
	*($5 + [36]) = ($1 + [32])
	*($5 + [40]) = ($1 + [40])
	CALL $48(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [60]), $2, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $101($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8856])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8856])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $21 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [60]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8617])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7035937633859534848)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8558])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8558])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $27(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $73($2, ($1 + [8]))
	$5 = *($1 + [24])
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$0 = (*($0) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$6 = CALL $73(($2 + [16]), $4)
	CALL void $0((int_32 $3), (int_64 $6), (int_32 $5), (int_64 $1))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [8862])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([64])) + [16]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32]) = [0]
	*($3 + [48]) = [0]
	*($3 + [52]) = $1
	CALL $41(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [56])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $42(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [8700])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [8746])
	$6 = *(*($3))
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)1)
	*($1 + [24]) = ((int_64)$6 + (int_64)*($1 + [24]))
	$7 = *($1)
	CALL eosio_assert([1], [8797])
	$3 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [40])
	$6 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [8])
	$9 = ($1 + [32])
	$10 = ($1 + [24])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $98($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [28]) = $8
	*($5 + [32]) = $10
	*($5 + [36]) = $9
	*($5 + [24]) = $1
	*($5 + [40]) = ($1 + [40])
	*($5 + [44]) = ($1 + [48])
	CALL $48(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [60]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $101($4)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $43($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8856])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8856])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $55(CALL $54($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $43($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $44(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8526])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $98($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [56]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [48])
	CALL $45(($3 + [40]), ($3 + [32]))
	*($5 + [60]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $46(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $101($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [8862])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [56]) = $1
	CALL $56(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [60])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $46(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $96(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9828])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $96(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $98($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9828])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $98($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $101($0)
	
.LABEL $label$1
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8549])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8549])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8549])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8549])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $19(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [28]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8617])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4992121823200776192)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8558])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8558])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $33(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $29($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $52(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [8913])
	*($1) = *(($3 + [16]))
	*($1 + [8]) = *(*($0 + [4]))
	*($1 + [16]) = *(*($0 + [8]))
	CALL $74(($1 + [24]), *($0 + [12]))
	*($1 + [40]) = *(*($0 + [16]))
	*($1 + [48]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$global$0 = ($2 + [16])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	CALL $63(*($0 + [4]), $1)
	$5 = *($1 + [24])
	$6 = ( *(($1 + [28])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [36])
	$7 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [24])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $98($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = $6
	*($3 + [40]) = ($1 + [40])
	*($3 + [44]) = ($1 + [48])
	CALL $51(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($4 + [8]), (int_64)4229865212519383040, *(*($0 + [8])), $7, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $101($2)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

void .FUNC $101 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18232])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18040]
	$3 = (((int_32)$1 * (int_32)[12]) + [18040])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $100 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9840]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9844])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9840]) = [1]
	$2 = ($2 << [16])
	*([0] + [9844]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9844])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9844]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9840]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9840]) = [1]
	$3 = ($3 << [16])
	*([0] + [9844]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9844])
	
.LABEL $label$10
	*([0] + [9844]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [11] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $90($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $90($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $90($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $90($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18256]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $90($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $90($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $90($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $87 (int_32 $0)
{
}

int_32 .FUNC $86 ()
{
	return [9832]
}

void .FUNC $85 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $77(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $92(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8612], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $77(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $77(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $77(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $92(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8523], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $77(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $77(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = CALL $95($1)
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, $1, $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$3 = ($2 + [1])
	$5 = (*($2) & [1])
	$2 = *($2 + [8])
	$6 = *($0)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$9 }
	$1 = [10]
	$3 = ( $2 ? $3 : $5 )
	$2 = uint_32($6 >> [1])
	if ( (([10] - $2) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$3 = ( $2 ? $3 : $5 )
	$2 = *(($0 + [4]))
	$1 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($1 - $2) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $75($0, $1, (($2 + $4) - $1), $2, $2, [0], $4, $3)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ( *(($0 + [8])) ? ($0 + [1]) : $7 )
	CALL memcpy(($5 + $2), $3, $4)
	$2 = ($2 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*(($5 + $2)) = [0]
	(unreachable)
}

int_32 .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $80($0, $1, $2, CALL $95($2))
}

int_32 .FUNC $80 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $75($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

void .FUNC $72 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $101($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $78($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $75($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [8862])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([64])) + [16]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32]) = [0]
	*($3 + [48]) = [0]
	*($3 + [52]) = $1
	CALL $62(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [56])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $42(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9521])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [9566])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9616])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $37 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $98($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $61(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $79 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $75($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [8700])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [8746])
	*($1 + [40]) = *(*($3))
	$6 = *($1)
	CALL eosio_assert([1], [8797])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [40])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [8])
	$9 = ($1 + [40])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $98($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [28]) = $7
	*($5 + [40]) = $9
	*($5 + [24]) = $1
	*($5 + [32]) = ($1 + [24])
	*($5 + [36]) = ($1 + [32])
	*($5 + [44]) = ($1 + [48])
	CALL $48(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [60]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $101($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8526])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $98($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8549])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8549])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8549])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $58(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $101($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [8862])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [24]) = $1
	*($3 + [16]) = (int_64)0
	CALL $57(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $58(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $31 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [96])
	$global$0 = $3
	$4 = *($0)
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$4 }
	$5 = [0]
	$6 = *([0] + [9332])
	$7 = $1
	
.LOOP $label$6:
	*((($3 + [40]) + ($0 = $5))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$0 == (int_32)[12]) )))))
	$5 = ($0 + [1])
	if ( ((uint_32)$0 > (uint_32)[11]) ){ goto $label$5 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$3 }
	*($3) = ($5 << [1])
	$6 = ($3 | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	*($3) = [0]
	$0 = ($3 | [1])
	goto $label$1 
	
.LABEL $label$3
	$8 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($3) = ($8 | [1])
	*($3 + [8]) = $6
	*($3 + [4]) = $5
	
.LABEL $label$2
	$8 = ($0 + [1])
	$0 = [0]
	
.LOOP $label$7:
	*(($6 + $0)) = *((($3 + [40]) + $0))
	$0 = ($0 + [1])
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$7 }
	$0 = ($6 + $5)
	
.LABEL $label$1
	*($0) = [0]
	$0 = *($2)
	$5 = ($0 & [1])
	$0 = CALL $79($3, ( *($2 + [8]) ? ($2 + [1]) : $5 ), ( *($2 + [4]) ? uint_32($0 >> [1]) : $5 ))
	$7 = *($0)
	*($0) = [0]
	$5 = *($0 + [8])
	*($0 + [4 align=4]) = (int_64)0
	*((($3 + [16]) + [16])) = $5
	*($3 + [16]) = $1
	*($3 + [24]) = $7
	*($3 + [40]) = $4
	*($3 + [48]) = (int_64)-7119375207604682752
	*(($0 = CALL _Znwj([16]))) = $4
	*($0 + [8]) = (int_64)3617214756542218240
	$5 = ($0 + [16])
	*(($3 + [64])) = $5
	*(($3 + [60])) = $5
	*($3 + [56]) = $0
	CALL $59(($3 + [68]), ($3 + [16]))
	CALL $25(($3 + [80]), ($3 + [40]))
	$0 = *($3 + [80])
	CALL send_inline($0, (*($3 + [84]) - $0))
	$0 = *($3 + [80])
	if ( ($0 == 0) ){ goto $label$8 }
	*($3 + [84]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$0 = *($3 + [68])
	if ( ($0 == 0) ){ goto $label$9 }
	*(($3 + [72])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$9
	$0 = *($3 + [56])
	if ( ($0 == 0) ){ goto $label$10 }
	*(($3 + [60])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$10
	if ( (*($3 + [24]) & [1]) ){ goto $label$13 }
	if ( (*($3) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [32])))
	if ( ((*($3) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($3 + [96])
	return 
	
.LABEL $label$11
	$global$0 = ($3 + [96])
}