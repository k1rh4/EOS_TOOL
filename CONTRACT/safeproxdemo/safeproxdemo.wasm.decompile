(data (i32.const 8192) "Code is not an account.\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8302) "Library is not an account!\00")
(data (i32.const 8329) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8380) "error reading iterator\00")
(data (i32.const 8403) "read\00")
(data (i32.const 8408) "cannot pass end iterator to modify\00")
(data (i32.const 8443) "object passed to modify is not in multi_index\00")
(data (i32.const 8489) "cannot modify objects in table of another contract\00")
(data (i32.const 8540) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8599) "write\00")
(data (i32.const 8605) "cannot create objects in table of another contract\00")
(import "env" "require_recipient" (func $fimport$0 (param i64)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$3 (param i64)))
(import "env" "is_account" (func $fimport$4 (param i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$5 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$6 (result i64)))
(import "env" "db_idx128_lowerbound" (func $fimport$7 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$11 (param i32 i64 i32 i32)))
(import "env" "db_idx128_find_primary" (func $fimport$12 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_update" (func $fimport$13 (param i32 i64 i32)))
(import "env" "db_store_i64" (func $fimport$14 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx128_store" (func $fimport$15 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "abort" (func $fimport$16))
(import "env" "set_blockchain_parameters_packed" (func $fimport$17 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$19 (param i32 i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $13))
(export "_Znwj" (func $11))
(export "_Znaj" (func $12))
(export "_ZdaPv" (func $14))
(table $0 2 2 anyfunc)
(elem (i32.const 1) $2)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17064))
(global $global$2 i32 (i32.const 17064))


void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3 + [4]))
	$3 = *($3)
	$4 = *($3)
	*(($5 = ($1 + [24]))) = *(($3 + [8]))
	*($1 + [16]) = $4
	$3 = *($0)
	CALL eosio_assert([1], [8599])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8599])
	$6 = ($1 + [16])
	CALL memcpy(($2 | [8]), $6, [16])
	$4 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($3 + [8]), (int_64)-8383732181326888960, *(*($0 + [8])), $4, $2, [24])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$4 = *(($3 + [8]))
	$7 = *(*(($0 + [8])))
	$8 = *($1)
	*($2 + [40]) = *($5)
	*($2 + [32]) = *($6)
	*($1 + [40]) = CALL db_idx128_store($4, (int_64)-8383732181326888960, $7, $8, ($2 + [32]))
	$global$0 = ($2 + [48])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $15($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $6 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8443])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [8489])
	*($4 + [40]) = *(($1 + [24]))
	*($4 + [32]) = *($1 + [16])
	$5 = *($1)
	$6 = *(*($3))
	*($1) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [8540])
	CALL eosio_assert([1], [8599])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8599])
	$3 = ($1 + [16])
	CALL memcpy(($4 | [8]), $3, [16])
	CALL db_update_i64(*($1 + [36]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [64]) = *($3)
	*($4 + [72]) = *(($3 + [8]))
	if ( (CALL $17(($4 + [32]), ($4 + [64]), [16]) == 0) ){ goto $label$2 }
	$3 = ($1 + [40])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-8383732181326888960, ($4 + [48]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx128_update($1, $2, ($4 + [64]))
	
.LABEL $label$2
	$global$0 = ($4 + [80])
}

void .FUNC $7 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [8605])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [32]) = $1
	CALL $8(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $9(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $4 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_lowerbound(*($2), *($2 + [8]), (int_64)-8383732181326888960, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$7), [8329])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $10($7, CALL $fimport$8(*($7), *($7 + [8]), (int_64)-8383732181326888960, $6))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$7), [8329])
	
.LABEL $label$2
	*(($4 + [40])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8403])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8403])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8403])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8403])
	CALL memcpy(($0 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $2 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [96])
	$global$0 = $5
	*($5 + [80]) = $2
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$4($3), [8192])
	CALL eosio_assert(CALL $fimport$4($2), [8302])
	*(($5 + [72])) = [0]
	*($5 + [56]) = (int_64)-1
	*($5 + [64]) = (int_64)0
	*($5 + [76]) = [0]
	$2 = *($0)
	*($5 + [40]) = $2
	*($5 + [48]) = $2
	*($5 + [24]) = $3
	*($5 + [16]) = $4
	*($5 + [8]) = ($5 + [40])
	CALL $4(($5 + [88]), ($5 + [8]), ($5 + [16]))
	$0 = *($5 + [92])
	if ( ($0 == 0) ){ goto $label$3 }
	if ( ((int_64)((int_64)((int_64)*($5 + [16]) ^ (int_64)*($0 + [16])) | (int_64)((int_64)*($5 + [24]) ^ (int_64)*(($0 + [24])))) != (int_64)0) ){ goto $label$3 }
	*($5 + [88]) = ($5 + [80])
	CALL eosio_assert([1], [8408])
	CALL $6(*($5 + [8]), $0, $1, ($5 + [88]))
	$6 = *($5 + [64])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($5 + [92]) = ($5 + [80])
	*($5 + [88]) = ($5 + [16])
	CALL $7($5, ($5 + [40]), $1, ($5 + [88]))
	$6 = *($5 + [64])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($5 + [68])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$7 }
	CALL _ZdlPv($8)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($5 + [64]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $6
	
.LABEL $label$4
	*($7) = $6
	CALL _ZdlPv($0)
	$global$0 = ($5 + [96])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [96])
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = CALL action_data_size()
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$1 = CALL $18($6)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $6)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [36]) = $1
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + $6)
	*($3 + [48]) = ($3 + [32])
	*($3 + [56]) = $3
	CALL $5(($3 + [56]), ($3 + [48]))
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL $21($1)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *(($3 + [24]))
	$8 = *(($3 + [16]))
	$9 = *(($3 + [8]))
	$10 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $10), (int_64 $9), (int_64 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [64])
	return [1]
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [112])
	$global$0 = $3
	CALL memory()
	*(($3 + [40])) = $0
	*(($3 + [48])) = (int_64)-1
	*(($3 + [56])) = (int_64)0
	*(($3 + [64])) = [0]
	*(($3 + [68])) = [0]
	*($3 + [32]) = $0
	*($3 + [24]) = $0
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$4 }
	$0 = (int_64)7
	
.LOOP $label$5:
	$0 = ((int_64)$0 + (int_64)1)
	if ( ((int_64)$0 != (int_64)13) ){ goto $label$5 }
	if ( ((int_64)-4417161185745436672 != (int_64)$2) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-4417161185745436672) ){ goto $label$3 }
	*($3 + [20]) = [0]
	*($3 + [16]) = [1]
	*($3 + [8]) = *($3 + [16])
	CALL $3(($3 + [24]), ($3 + [8]))
	$4 = *(($3 + [56]))
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	*($3 + [88]) = $1
	*($3 + [80]) = $2
	*($3 + [72]) = ($3 + [32])
	CALL $4(($3 + [104]), ($3 + [72]), ($3 + [80]))
	$5 = *($3 + [108])
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((int_64)(((int_64)((int_64)*($3 + [80]) ^ (int_64)*($5 + [16])) | (int_64)((int_64)*($3 + [88]) ^ (int_64)*(($5 + [24])))) == 0) == 0) ){ goto $label$3 }
	CALL require_recipient(*($5))
	
.LABEL $label$3
	$4 = *(($3 + [56]))
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($3 + [60])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$9 }
	CALL _ZdlPv($7)
	
.LABEL $label$9
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$8 }
	$5 = *(($3 + [56]))
	goto $label$6 
	
.LABEL $label$7
	$5 = $4
	
.LABEL $label$6
	*($6) = $4
	CALL _ZdlPv($5)
	
.LABEL $label$1
	CALL $16([0])
	$global$0 = ($3 + [112])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $15 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $16 (int_32 $0)
{
}

int_32 .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8380])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $18($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8403])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[15]), [8403])
	CALL memcpy(($5 + [16]), ($2 + [8]), [16])
	*($5 + [40]) = [-1]
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $9(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $21($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $18($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8656])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $18($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $21($0)
	
.LABEL $label$1
}

void .FUNC $21 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17052])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16860]
	$3 = (((int_32)$1 * (int_32)[12]) + [16860])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $20 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8660]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8664])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8660]) = [1]
	$2 = ($2 << [16])
	*([0] + [8664]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8664])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8664]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8660]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8660]) = [1]
	$3 = ($3 << [16])
	*([0] + [8664]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8664])
	
.LABEL $label$10
	*([0] + [8664]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $18 (int_32 $0)
{
	return CALL $19([8668], $0)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $20($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8216])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}