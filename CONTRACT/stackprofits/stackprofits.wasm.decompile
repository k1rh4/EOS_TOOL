(data (i32.const 8192) "invalid symbol name\00")
(data (i32.const 8212) "invalid supply\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8313) "max-supply must be positive\00")
(data (i32.const 8341) "token with symbol already exists\00")
(data (i32.const 8374) "token with symbol does not exist, create token before staking\00")
(data (i32.const 8436) "invalid quantity\00")
(data (i32.const 8453) "must stake positive quantity\00")
(data (i32.const 8482) "symbol precision mismatch\00")
(data (i32.const 8508) "quantity exceeds available supply\00")
(data (i32.const 8542) "STACK\00")
(data (i32.const 8548) "overdrawn balance\00")
(data (i32.const 8566) "must unstake positive quantity\00")
(data (i32.const 8597) "no balance object found\00")
(data (i32.const 8621) "not enough tokens to unstake\00")
(data (i32.const 8650) "must release positive quantity\00")
(data (i32.const 8681) "not enough tokens to release\00")
(data (i32.const 8710) "token with symbol does not exist\00")
(data (i32.const 8743) "EOS\00")
(data (i32.const 8747) "nothing is staked yet for dividends\00")
(data (i32.const 8783) "not enough dividends to pay right now, please try again later\00")
(data (i32.const 8845) "Dividends from stackchips.games\00")
(data (i32.const 8877) "account balance does not exist\00")
(data (i32.const 8908) "unable to find key\00")
(data (i32.const 8927) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8978) "error reading iterator\00")
(data (i32.const 9001) "read\00")
(data (i32.const 9006) "string is too long to be a valid symbol_code\00")
(data (i32.const 9051) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9104) "attempt to add asset with different symbol\00")
(data (i32.const 9147) "addition underflow\00")
(data (i32.const 9166) "addition overflow\00")
(data (i32.const 9184) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9243) "write\00")
(data (i32.const 9249) "divide by zero\00")
(data (i32.const 9264) "signed division overflow\00")
(data (i32.const 9289) "multiplication overflow\00")
(data (i32.const 9313) "multiplication underflow\00")
(data (i32.const 9338) "attempt to subtract asset with different symbol\00")
(data (i32.const 9386) "subtraction underflow\00")
(data (i32.const 9408) "subtraction overflow\00")
(data (i32.const 9429) "cannot create objects in table of another contract\00")
(data (i32.const 9480) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9529) "object passed to modify is not in multi_index\00")
(data (i32.const 9575) "cannot modify objects in table of another contract\00")
(data (i32.const 9626) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9685) "object passed to erase is not in multi_index\00")
(data (i32.const 9730) "cannot erase objects in table of another contract\00")
(data (i32.const 9780) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9833) "cannot pass end iterator to modify\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "require_recipient" (func $fimport$4 (param i64)))
(import "env" "db_update_i64" (func $fimport$5 (param i32 i64 i32 i32)))
(import "env" "current_time" (func $fimport$6 (result i64)))
(import "env" "send_deferred" (func $fimport$7 (param i32 i64 i32 i32 i32)))
(import "env" "__multi3" (func $fimport$8 (param i32 i64 i64 i64 i64)))
(import "env" "memcpy" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$10 (param i32)))
(import "env" "action_data_size" (func $fimport$11 (result i32)))
(import "env" "read_action_data" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$14 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$15 (param i32 i32)))
(import "env" "abort" (func $fimport$16))
(import "env" "memset" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$19 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$26 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$27 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$29 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$30 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$31 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$34 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$36 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$37 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$38 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $25))
(export "_Znwj" (func $42))
(export "_ZdlPv" (func $44))
(export "_Znaj" (func $43))
(export "_ZdaPv" (func $45))
(export "_ZnwjSt11align_val_t" (func $46))
(export "_ZnajSt11align_val_t" (func $47))
(export "_ZdlPvSt11align_val_t" (func $48))
(export "_ZdaPvSt11align_val_t" (func $49))
(table $0 6 6 anyfunc)
(elem (i32.const 1) $1 $5 $13 $23 $20)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18284))
(global $global$2 i32 (i32.const 18284))


void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $30($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $31($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $32($2, $1)
	CALL $34(CALL $33(CALL $33($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $41(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $51($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8978])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $57($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9001])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9001])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $29(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $60($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [160])
	$global$0 = $3
	*((($3 + [8]) + [32])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	$1 = *($2)
	$4 = *($2 + [8])
	$5 = CALL $14(($3 + [8]), (uint_64)$4 >> (uint_64)(int_64)8), [8597]
	CALL eosio_assert(((int_64)*($5) + [16]) >= (int_64)$1), [8548])
	if ( ((int_64)$1 != (int_64)*($5)) ){ goto $label$3 }
	CALL $22(($3 + [8]), $5)
	$0 = *($3 + [32])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = *($0)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)($3 + [8])), [9529])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$3()), [9575])
	$7 = *($5 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)*(($5 + [24]))), [9338])
	$1 = (int_64)
	*($5 + [16]) = $1(*($5 + [16]) - $1))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9386])
	CALL eosio_assert(((int_64)*($5 + [16]) < (int_64)4611686018427387904), [9408])
	$1 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($5 + [8]) >> (uint_64)(int_64)8)), [9626])
	*($3 + [128]) = (($3 + [48]) + [64])
	*($3 + [124]) = ($3 + [48])
	*($3 + [120]) = ($3 + [48])
	*($3 + [136]) = ($3 + [120])
	*($3 + [148]) = ($5 + [16])
	*($3 + [144]) = $5
	*($3 + [152]) = ($5 + [32])
	*($3 + [156]) = ($5 + [48])
	CALL $10(($3 + [144]), ($3 + [136]))
	CALL db_update_i64(*($5 + [68]), $6, ($3 + [48]), [64])
	$5 = (($3 + [8]) + [16])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$4 }
	*($5) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$4
	$0 = *($3 + [32])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($3 + [36])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	CALL _ZdlPv($2)
	
.LABEL $label$8
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$7 }
	$5 = *(($3 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$5 = $0
	
.LABEL $label$5
	*($8) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$global$0 = ($3 + [160])
}

void .FUNC $20 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [240])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = [0]
	$5 = *($2 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8192])
	$9 = [0]
	*(($3 + [104])) = [0]
	*($3 + [88]) = (int_64)-1
	*($3 + [96]) = (int_64)0
	$7 = *($0)
	*($3 + [72]) = $7
	*($3 + [80]) = $6
	$10 = [0]
	$4 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$6 }
	$10 = CALL $2(($3 + [72]), $4)
	CALL eosio_assert(((int_32)*($10 + [72]) == (int_32)($3 + [72])), [8927])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8374])
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$4 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $7
	$9 = [1]
	$11 = $4
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $7
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$11 = ($4 + [1])
	$4 = $11
	if ( $9 ){ goto $label$11 }
	$9 = [1]
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	
.LABEL $label$7
	CALL eosio_assert($9, [8436])
	$7 = (int_64)0
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8650])
	CALL eosio_assert(((int_64)$5 == (int_64)*(($10 + [24]))), [8482])
	CALL eosio_assert(((int_64)$8 <= (int_64)*($10 + [16])), [8508])
	*(($3 + [64])) = [0]
	*($3 + [40]) = $1
	*($3 + [48]) = (int_64)-1
	*($3 + [56]) = (int_64)0
	*($3 + [32]) = *($0)
	$4 = CALL $54([8542])
	if ( ($4 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [9006])
	goto $label$13 
	
.LABEL $label$14
	if ( ($4 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$7 = (int_64)0
	
.LOOP $label$15:
	$9 = *(($4 + [8541]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [9051])
	
.LABEL $label$16
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$15 }
	$7 = ((int_64)$7 & (int_64)72057594037927935)
	
.LABEL $label$12
	$4 = CALL $14(($3 + [32]), $7, [8597])
	CALL eosio_assert(((int_64)$5 == (int_64)*(($4 + [24]))), [9184])
	CALL eosio_assert(((int_64)$8 <= (int_64)*($4 + [16])), [8681])
	$6 = *($0)
	CALL eosio_assert(((int_32)*($10 + [72]) == (int_32)($3 + [72])), [9529])
	CALL eosio_assert(((int_64)*($3 + [72]) == (int_64)CALL $fimport$3()), [9575])
	$9 = ($10 + [40])
	$7 = *($9)
	CALL eosio_assert(((int_64)$5 == (int_64)*(($10 + [24]))), [9338])
	$8 = (int_64)
	*(($4 = ($10 + [16]))) = $8(*($4) - $8))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9386])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [9408])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$7) == (int_64)(uint_64)*($9) >> (uint_64)(int_64)8)), [9626])
	*($3 + [200]) = (($3 + [112]) + [72])
	*($3 + [196]) = ($3 + [112])
	*($3 + [192]) = ($3 + [112])
	*($3 + [208]) = ($3 + [192])
	*($3 + [220]) = $4
	*($3 + [216]) = $10
	*($3 + [224]) = ($10 + [32])
	*($3 + [228]) = ($10 + [48])
	*($3 + [232]) = ($10 + [64])
	CALL $8(($3 + [216]), ($3 + [208]))
	CALL db_update_i64(*($10 + [76]), $6, ($3 + [112]), [72])
	$4 = (($3 + [72]) + [16])
	if ( (uint_64)($7 <= *($4)) ){ goto $label$17 }
	*($4) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$17
	$6 = *(($2 + [8]))
	*((($3 + [16]) + [8])) = $6
	$7 = *($2)
	*(($3 + [8])) = $6
	*($3) = $7
	*($3 + [16]) = $7
	CALL $21($0, $1, $3)
	$10 = *($3 + [56])
	if ( ($10 == 0) ){ goto $label$18 }
	$11 = ($3 + [60])
	$4 = *($11)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$20 }
	
.LOOP $label$21:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$22 }
	CALL _ZdlPv($9)
	
.LABEL $label$22
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$21 }
	$4 = *(($3 + [56]))
	goto $label$19 
	
.LABEL $label$20
	$4 = $10
	
.LABEL $label$19
	*($11) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$18
	$10 = *($3 + [96])
	if ( ($10 == 0) ){ goto $label$23 }
	$11 = ($3 + [100])
	$4 = *($11)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$25 }
	
.LOOP $label$26:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$27 }
	CALL _ZdlPv($9)
	
.LABEL $label$27
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$26 }
	$4 = *(($3 + [96]))
	goto $label$24 
	
.LABEL $label$25
	$4 = $10
	
.LABEL $label$24
	*($11) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$23
	$global$0 = ($3 + [240])
}

void .FUNC $23 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [288])
	$global$0 = $2
	CALL require_auth($1)
	$3 = *($0)
	$4 = CALL $54([8542])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9006])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($4 + [8541]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9051])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$7 = ((int_64)$5 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)0
	
.LABEL $label$1
	*(($2 + [152])) = [0]
	*($2 + [128]) = $7
	*($2 + [120]) = $3
	*($2 + [136]) = (int_64)-1
	$5 = (int_64)0
	*($2 + [144]) = (int_64)0
	$4 = CALL $54([8542])
	if ( ($4 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [9006])
	goto $label$8 
	
.LABEL $label$9
	if ( ($4 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$5 = (int_64)0
	
.LOOP $label$10:
	$6 = *(($4 + [8541]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [9051])
	
.LABEL $label$11
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$10 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	
.LABEL $label$7
	$8 = [0]
	$4 = CALL db_find_i64($3, $7, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$8 = CALL $2(($2 + [120]), $4)
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)($2 + [120])), [8927])
	
.LABEL $label$12
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8710])
	*(($2 + [112])) = [0]
	*($2 + [88]) = $1
	*($2 + [96]) = (int_64)-1
	$5 = (int_64)0
	*($2 + [104]) = (int_64)0
	*($2 + [80]) = *($0)
	$4 = CALL $54([8542])
	if ( ($4 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [9006])
	goto $label$14 
	
.LABEL $label$15
	if ( ($4 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$5 = (int_64)0
	
.LOOP $label$16:
	$6 = *(($4 + [8541]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9051])
	
.LABEL $label$17
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$16 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	
.LABEL $label$13
	$9 = CALL $14(($2 + [80]), $5, [8597])
	$3 = *($0)
	$4 = CALL $54([8743])
	if ( ($4 <= [8]) ){ goto $label$21 }
	CALL eosio_assert([0], [9006])
	goto $label$20 
	
.LABEL $label$21
	if ( ($4 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$5 = (int_64)0
	
.LOOP $label$22:
	$6 = *(($4 + [8742]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$23 }
	CALL eosio_assert([0], [9051])
	
.LABEL $label$23
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$22 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	goto $label$18 
	
.LABEL $label$19
	$5 = (int_64)0
	
.LABEL $label$18
	*((($2 + [160]) + [32])) = [0]
	*($2 + [168]) = $3
	*($2 + [160]) = (int_64)6138663591592764928
	*($2 + [176]) = (int_64)-1
	*($2 + [184]) = (int_64)0
	$4 = CALL $6(($2 + [160]), $5, [8908])
	$5 = *($4 + [8])
	$10 = *($4)
	$11 = *($2 + [184])
	if ( ($11 == 0) ){ goto $label$24 }
	$12 = ($2 + [188])
	$4 = *($12)
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$26 }
	
.LOOP $label$27:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$28 }
	CALL _ZdlPv($6)
	
.LABEL $label$28
	if ( ((int_32)$11 != (int_32)$4) ){ goto $label$27 }
	$4 = *(($2 + [184]))
	goto $label$25 
	
.LABEL $label$26
	$4 = $11
	
.LABEL $label$25
	*($12) = $11
	CALL _ZdlPv($4)
	
.LABEL $label$24
	CALL eosio_assert(((int_64)*($8) > (int_64)0), [8747])
	$3 = *($9)
	CALL __multi3(($2 + [16]), $3, (int_64)$3 >> (int_64)63), (int_64)10000, (int_64)0)
	$7 = *((($2 + [16]) + [8]))
	$3 = *($2 + [16])
	CALL eosio_assert(( (uint_64)($3 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ), [9289])
	CALL eosio_assert(( ((uint_64)$3 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [9313])
	$13 = *($8)
	CALL eosio_assert(((int_64)$13 != (int_64)0), [9249])
	CALL eosio_assert((((int_64)$13 != (int_64)-1) | ((int_64)$3 != (int_64)-9223372036854775808)), [9264])
	$6 = ($8 + [56])
	CALL eosio_assert(((int_64)*($6) == (int_64)$5), [9104])
	$7 = ((int_64)*($8 + [48]) + (int_64)$10)
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9147])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9166])
	$4 = ($9 + [40])
	CALL eosio_assert(((int_64)*($4) == (int_64)$5), [9338])
	$3 = ((int_64)$3 / (int_64)$13)
	$7 = (int_64)
	CALL __multi3($2, $7($7 - *($9 + [32]))), (int_64)$7 >> (int_64)63), $3, (int_64)$3 >> (int_64)63))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9386])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9408])
	$7 = *(($2 + [8]))
	$3 = *($2)
	CALL eosio_assert(( (uint_64)($3 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ), [9289])
	CALL eosio_assert(( ((uint_64)$3 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [9313])
	CALL eosio_assert([1], [9249])
	CALL eosio_assert([1], [9264])
	CALL eosio_assert(((int_64)$3 > (int_64)9999), [8783])
	$13 = *($0)
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)($2 + [80])), [9529])
	CALL eosio_assert(((int_64)*($2 + [80]) == (int_64)CALL $fimport$3()), [9575])
	$14 = *($9 + [8])
	CALL eosio_assert(((int_64)*($6) == (int_64)$5), [9104])
	$7 = ((int_64)*($8 + [48]) + (int_64)$10)
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9147])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9166])
	*($4) = $5
	*($9 + [32]) = $7
	CALL eosio_assert(((int_64)$5 == (int_64)*(($9 + [56]))), [9104])
	$3 = ((int_64)$3 / (int_64)10000)
	$7 = ((int_64)*($9 + [48]) + (int_64)$3)
	*($9 + [48]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9147])
	CALL eosio_assert(((int_64)*($9 + [48]) < (int_64)4611686018427387904), [9166])
	$7 = (uint_64)$14 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$7) == (int_64)(uint_64)*($9 + [8]) >> (uint_64)(int_64)8)), [9626])
	*($2 + [248]) = (($2 + [160]) + [64])
	*($2 + [244]) = ($2 + [160])
	*($2 + [240]) = ($2 + [160])
	*($2 + [256]) = ($2 + [240])
	*($2 + [268]) = ($9 + [16])
	*($2 + [264]) = $9
	*($2 + [272]) = ($9 + [32])
	*($2 + [276]) = ($9 + [48])
	CALL $10(($2 + [264]), ($2 + [256]))
	CALL db_update_i64(*($9 + [68]), $13, ($2 + [160]), [64])
	$4 = ($8 + [48])
	$9 = (($2 + [80]) + [16])
	if ( (uint_64)($7 <= *($9)) ){ goto $label$29 }
	*($9) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$29
	$10 = *($0)
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)($2 + [120])), [9529])
	CALL eosio_assert(((int_64)*($2 + [120]) == (int_64)CALL $fimport$3()), [9575])
	$9 = ($8 + [40])
	$7 = *($9)
	CALL eosio_assert(((int_64)$5 == (int_64)*($6)), [9104])
	$13 = ((int_64)*($4) + (int_64)$3)
	*($4) = $13
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [9147])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [9166])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$7) == (int_64)(uint_64)*($9) >> (uint_64)(int_64)8)), [9626])
	*($2 + [248]) = (($2 + [160]) + [72])
	*($2 + [244]) = ($2 + [160])
	*($2 + [240]) = ($2 + [160])
	*($2 + [256]) = ($2 + [240])
	*($2 + [268]) = ($8 + [16])
	*($2 + [264]) = $8
	*($2 + [272]) = ($8 + [32])
	*($2 + [276]) = $4
	*($2 + [280]) = ($8 + [64])
	CALL $8(($2 + [264]), ($2 + [256]))
	CALL db_update_i64(*($8 + [76]), $10, ($2 + [160]), [72])
	if ( (uint_64)($7 <= *((($2 + [120]) + [16]))) ){ goto $label$30 }
	*(($2 + [136])) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$30
	*(($2 + [56])) = $5
	*(($2 + [72])) = [0]
	*($2 + [40]) = $1
	*($2 + [48]) = $3
	*($2 + [64]) = (int_64)0
	$5 = *($0)
	*($2 + [32]) = $5
	$6 = (($2 + [32]) + [32])
	$4 = CALL $54([8845])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$31 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$34 }
	*(($2 + [64])) = ($4 << [1])
	$9 = ($6 + [1])
	if ( $4 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$8 = (($4 + [16]) & [-16])
	$9 = CALL _Znwj($8)
	*(($2 + [72])) = $9
	*(($2 + [68])) = $4
	*($2 + [64]) = ($8 | [1])
	
.LABEL $label$33
	CALL memcpy($9, [8845], $4)
	
.LABEL $label$32
	*(($9 + $4)) = [0]
	*(($4 = CALL _Znwj([16]))) = $5
	*($4 + [8]) = (int_64)3617214756542218240
	*((($2 + [160]) + [24])) = *((($2 + [32]) + [24]))
	*(($9 = (($2 + [160]) + [40]))) = *(($6 + [8]))
	$5 = *($6)
	*(($2 + [64])) = (int_64)0
	*($2 + [264]) = $4
	$4 = ($4 + [16])
	*($2 + [272]) = $4
	*($2 + [268]) = $4
	*($2 + [160]) = *($2 + [32])
	*($2 + [168]) = *((($2 + [32]) + [8]))
	*($2 + [176]) = *($2 + [48])
	*($2 + [192]) = $5
	*((($2 + [32]) + [40])) = [0]
	CALL $24((int_64)6138663591592764928, (int_64)-3617168760277827584, ($2 + [264]), ($2 + [160]))
	if ( ((*($2 + [192]) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$35
	$4 = *($2 + [264])
	if ( ($4 == 0) ){ goto $label$36 }
	*($2 + [268]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$36
	if ( ((*(($2 + [64])) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*(($2 + [72])))
	
.LABEL $label$37
	$9 = *($2 + [104])
	if ( ($9 == 0) ){ goto $label$38 }
	$8 = ($2 + [108])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$40 }
	
.LOOP $label$41:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$42 }
	CALL _ZdlPv($6)
	
.LABEL $label$42
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$41 }
	$4 = *(($2 + [104]))
	goto $label$39 
	
.LABEL $label$40
	$4 = $9
	
.LABEL $label$39
	*($8) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$38
	$9 = *($2 + [144])
	if ( ($9 == 0) ){ goto $label$43 }
	$8 = ($2 + [148])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$45 }
	
.LOOP $label$46:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$47 }
	CALL _ZdlPv($6)
	
.LABEL $label$47
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$46 }
	$4 = *(($2 + [144]))
	goto $label$44 
	
.LABEL $label$45
	$4 = $9
	
.LABEL $label$44
	*($8) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$43
	$global$0 = ($2 + [288])
	return (unreachable)
	
.LABEL $label$31
	CALL $50($6)
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [9685])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9730])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9780])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)-3102536759825661953) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)-3102536759825661952) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$1 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [1]
	*($3) = *($3 + [72])
	CALL $26($1, $1, $3)
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_64)$2 == (int_64)-4998252998346932224) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-4157661383434960896) ){ goto $label$1 }
	*($3 + [68]) = [0]
	*($3 + [64]) = [2]
	*($3 + [8]) = *($3 + [64])
	CALL $26($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [60]) = [0]
	*($3 + [56]) = [3]
	*($3 + [16]) = *($3 + [56])
	CALL $26($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [44]) = [0]
	*($3 + [40]) = [4]
	*($3 + [32]) = *($3 + [40])
	CALL $27($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [52]) = [0]
	*($3 + [48]) = [5]
	*($3 + [24]) = *($3 + [48])
	CALL $26($1, $1, ($3 + [24]))
	
.LABEL $label$1
	CALL $53([0])
	$global$0 = ($3 + [80])
}

void .FUNC $24 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $31($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $39(($4 + [72]), ($4 + [64]))
	CALL $40(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $51(($4 + [8]))
}

int_32 .FUNC $27 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $57($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9001])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $60($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $26 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $57($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [56]) + [16]))) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9001])
	CALL memcpy(($4 + [56]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [9001])
	CALL memcpy((($4 + [56]) + [8]), ($2 + [8]), [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [9001])
	CALL memcpy(($4 + [24]), ($2 + [16]), [8])
	*($3) = *($4 + [24])
	*(($4 + [44])) = ($2 + [24])
	*((($4 + [24]) + [24])) = ($2 + $7)
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $2
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4 + [64])
	$0 = *($4 + [56])
	*((($4 + [96]) + [8])) = *($8)
	*($4 + [96]) = *($4 + [80])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [96]) + [8]))
	*((($4 + [112]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [96])
	*($4 + [8]) = $1
	*($4 + [112]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $60($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $60($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $57($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9868])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $57($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9243])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9243])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $31($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9243])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9243])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $35(CALL $36($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $55(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9868])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $55(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $60($0)
	
.LABEL $label$1
}

void .FUNC $51 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18272])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18080]
	$3 = (((int_32)$1 * (int_32)[12]) + [18080])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [208])
	$global$0 = $4
	$5 = *($0)
	$6 = CALL $54([8542])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9006])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8541]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9051])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$9 = ((int_64)$7 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)0
	
.LABEL $label$1
	*(($4 + [72])) = [0]
	*($4 + [48]) = $9
	*($4 + [40]) = $5
	*($4 + [56]) = (int_64)-1
	$7 = (int_64)0
	*($4 + [64]) = (int_64)0
	$6 = CALL $54([8542])
	if ( ($6 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [9006])
	goto $label$8 
	
.LABEL $label$9
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$7 = (int_64)0
	
.LOOP $label$10:
	$8 = *(($6 + [8541]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [9051])
	
.LABEL $label$11
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$10 }
	$7 = ((int_64)$7 & (int_64)72057594037927935)
	
.LABEL $label$7
	$10 = [0]
	$6 = CALL db_find_i64($5, $9, (int_64)-4157508551318700032, $7)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	$10 = CALL $2(($4 + [40]), $6)
	CALL eosio_assert(((int_32)*($10 + [72]) == (int_32)($4 + [40])), [8927])
	
.LABEL $label$12
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8710])
	*(($4 + [32])) = [0]
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	$7 = *($0)
	*($4) = $7
	$5 = *($2 + [8])
	*($4 + [8]) = $1
	$6 = CALL db_find_i64($7, $1, (int_64)3607749779137757184, (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_32)$6) < (int_32)[0]) ){ goto $label$16 }
	$6 = CALL $7($4, $6)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$4), [8927])
	$1 = *($0)
	CALL eosio_assert([1], [9833])
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$4), [9529])
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$3()), [9575])
	$7 = *($6 + [8])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)$7), [9104])
	$5 = ((int_64)*($6) + (int_64)*($2))
	*($6) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9147])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [9166])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$7) == (int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8)), [9626])
	*($4 + [160]) = (($4 + [80]) + [64])
	*($4 + [156]) = ($4 + [80])
	*($4 + [152]) = ($4 + [80])
	*($4 + [200]) = ($4 + [152])
	*($4 + [172]) = ($6 + [16])
	*($4 + [168]) = $6
	*($4 + [176]) = ($6 + [32])
	*($4 + [180]) = ($6 + [48])
	CALL $10(($4 + [168]), ($4 + [200]))
	CALL db_update_i64(*($6 + [68]), $1, ($4 + [80]), [64])
	$6 = ($4 + [16])
	if ( (uint_64)($7 <= *($6)) ){ goto $label$15 }
	*($6) = ((int_64)$7 + (int_64)1)
	$0 = *($4 + [24])
	if ( $0 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$1 = *($0)
	$6 = CALL $54([8743])
	if ( ($6 <= [8]) ){ goto $label$20 }
	CALL eosio_assert([0], [9006])
	goto $label$19 
	
.LABEL $label$20
	if ( ($6 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$7 = (int_64)0
	
.LOOP $label$21:
	$8 = *(($6 + [8742]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$22 }
	CALL eosio_assert([0], [9051])
	
.LABEL $label$22
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$21 }
	$7 = ((int_64)$7 & (int_64)72057594037927935)
	goto $label$17 
	
.LABEL $label$18
	$7 = (int_64)0
	
.LABEL $label$17
	*((($4 + [80]) + [32])) = [0]
	*($4 + [88]) = $1
	*($4 + [80]) = (int_64)6138663591592764928
	*($4 + [96]) = (int_64)-1
	*($4 + [104]) = (int_64)0
	$6 = CALL $6(($4 + [80]), $7, [8908])
	*((($4 + [168]) + [8])) = *(($6 + [8]))
	*($4 + [168]) = *($6)
	$0 = *($4 + [104])
	if ( ($0 == 0) ){ goto $label$23 }
	$11 = ($4 + [108])
	$6 = *($11)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$25 }
	
.LOOP $label$26:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$27 }
	CALL _ZdlPv($8)
	
.LABEL $label$27
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$26 }
	$6 = *(($4 + [104]))
	goto $label$24 
	
.LABEL $label$25
	$6 = $0
	
.LABEL $label$24
	*($11) = $0
	CALL _ZdlPv($6)
	
.LABEL $label$23
	*($4 + [152]) = $2
	*($4 + [160]) = $10
	*($4 + [156]) = ($4 + [168])
	*($4 + [200]) = $3
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$3()), [9429])
	*($4 + [84]) = ($4 + [152])
	*($4 + [80]) = $4
	*($4 + [88]) = ($4 + [200])
	*(($6 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($6) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = (int_64)0
	*($6 + [64]) = $4
	CALL $11(($4 + [80]), $6)
	*($4 + [192]) = $6
	$7 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8
	*($4 + [80]) = $7)
	$0 = *($6 + [68])
	*($4 + [188]) = $0
	$2 = ($4 + [28])
	$8 = *($2)
	if ( ((uint_32)$8 >= (uint_32)*(($4 + [32]))) ){ goto $label$29 }
	*($8 + [8]) = $7
	*($8 + [16]) = $0
	*($4 + [192]) = [0]
	*($8) = $6
	*($2) = ($8 + [24])
	$6 = *($4 + [192])
	*($4 + [192]) = [0]
	if ( $6 ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$29
	CALL $12(($4 + [24]), ($4 + [192]), ($4 + [80]), ($4 + [188]))
	$6 = *($4 + [192])
	*($4 + [192]) = [0]
	if ( ($6 == 0) ){ goto $label$15 }
	
.LABEL $label$28
	CALL _ZdlPv($6)
	
.LABEL $label$15
	$0 = *($4 + [24])
	if ( ($0 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$2 = ($4 + [28])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$31 }
	
.LOOP $label$32:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$33 }
	CALL _ZdlPv($8)
	
.LABEL $label$33
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$32 }
	$6 = *(($4 + [24]))
	goto $label$30 
	
.LABEL $label$31
	$6 = $0
	
.LABEL $label$30
	*($2) = $0
	CALL _ZdlPv($6)
	
.LABEL $label$13
	$0 = *($4 + [64])
	if ( ($0 == 0) ){ goto $label$34 }
	$2 = ($4 + [68])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$36 }
	
.LOOP $label$37:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$38 }
	CALL _ZdlPv($8)
	
.LABEL $label$38
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$37 }
	$6 = *(($4 + [64]))
	goto $label$35 
	
.LABEL $label$36
	$6 = $0
	
.LABEL $label$35
	*($2) = $0
	CALL _ZdlPv($6)
	
.LABEL $label$34
	$global$0 = ($4 + [208])
}

int_32 .FUNC $6 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8927])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $28($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8927])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8978])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $57($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	*($3 + [44]) = ($5 + [48])
	CALL $37(($3 + [32]), ($3 + [24]))
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $12(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $60($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $4 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $51($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $5 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$3 = ($global$0 - [240])
	$global$0 = $3
	CALL require_auth($1)
	CALL require_recipient($1)
	$4 = [0]
	$5 = *($2 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8192])
	$9 = [0]
	*(($3 + [104])) = [0]
	*($3 + [88]) = (int_64)-1
	*($3 + [96]) = (int_64)0
	$7 = *($0)
	*($3 + [72]) = $7
	*($3 + [80]) = $6
	$10 = [0]
	$4 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$6 }
	$10 = CALL $2(($3 + [72]), $4)
	CALL eosio_assert(((int_32)*($10 + [72]) == (int_32)($3 + [72])), [8927])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8374])
	$11 = *($2)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$4 = [0]
	$7 = $6
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $8
	$9 = [1]
	$12 = $4
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $8
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $9 ){ goto $label$11 }
	$9 = [1]
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	
.LABEL $label$7
	CALL eosio_assert($9, [8436])
	CALL eosio_assert(((int_64)$11 > (int_64)0), [8453])
	CALL eosio_assert(((int_64)$5 == (int_64)*($10 + [8])), [8482])
	CALL eosio_assert(((int_64)$11 <= (int_64))(*($10 + [32]) - *($10))), [8508])
	$7 = *($10 + [64])
	*((($3 + [112]) + [32])) = [0]
	*($3 + [120]) = $1
	*($3 + [112]) = $7
	*($3 + [128]) = (int_64)-1
	*($3 + [136]) = (int_64)0
	$4 = CALL $6(($3 + [112]), $6, [8908])
	$11 = *($4 + [8])
	$5 = *($4)
	$12 = *($3 + [136])
	if ( ($12 == 0) ){ goto $label$12 }
	$13 = ($3 + [140])
	$4 = *($13)
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$16 }
	CALL _ZdlPv($9)
	
.LABEL $label$16
	if ( ((int_32)$12 != (int_32)$4) ){ goto $label$15 }
	$4 = *(($3 + [136]))
	goto $label$13 
	
.LABEL $label$14
	$4 = $12
	
.LABEL $label$13
	*($13) = $12
	CALL _ZdlPv($4)
	
.LABEL $label$12
	*((($3 + [32]) + [32])) = [0]
	*($3 + [40]) = $1
	*($3 + [48]) = (int_64)-1
	*($3 + [56]) = (int_64)0
	*($3 + [32]) = *($0)
	$4 = CALL $54([8542])
	if ( ($4 <= [8]) ){ goto $label$23 }
	CALL eosio_assert([0], [9006])
	goto $label$22 
	
.LABEL $label$23
	if ( ($4 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	$7 = (int_64)0
	
.LOOP $label$24:
	$9 = *(($4 + [8541]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$25 }
	CALL eosio_assert([0], [9051])
	
.LABEL $label$25
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$24 }
	$7 = ((int_64)$7 & (int_64)72057594037927935)
	$9 = *(($3 + [60]))
	$13 = *(($3 + [56]))
	if ( ((int_32)$13 == (int_32)$9) ){ goto $label$20 }
	
.LOOP $label$27:
	$4 = ($9 + [-24])
	$12 = *($4)
	if ( ((int_64)(uint_64)*($12 + [8]) >> (uint_64)(int_64)8) == (int_64)$7) ){ goto $label$26 }
	$9 = $4
	if ( ((int_32)$13 != (int_32)$4) ){ goto $label$27 }
	goto $label$20 
	
.LABEL $label$26
	if ( ((int_32)$13 == (int_32)$9) ){ goto $label$20 }
	CALL eosio_assert(((int_32)*($12 + [64]) == (int_32)($3 + [32])), [8927])
	$7 = *(($2 + [8]))
	$6 = *($2)
	$8 = $6
	if ( $12 ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$21
	$7 = (int_64)0
	
.LABEL $label$20
	$4 = CALL db_find_i64(*($3 + [32]), *((($3 + [32]) + [8])), (int_64)3607749779137757184, $7)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$18 }
	$12 = CALL $7(($3 + [32]), $4)
	CALL eosio_assert(((int_32)*($12 + [64]) == (int_32)($3 + [32])), [8927])
	$7 = *(($2 + [8]))
	$6 = *($2)
	
.LABEL $label$19
	$8 = *($12)
	$14 = *($12 + [8])
	CALL eosio_assert(((int_64)*(($12 + [24])) == (int_64)$14), [9104])
	$8 = ((int_64)$8 + (int_64)*($12 + [16]))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9147])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [9166])
	CALL eosio_assert(((int_64)$14 == (int_64)$7), [9104])
	$8 = ((int_64)$8 + (int_64)$6)
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9147])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [9166])
	goto $label$17 
	
.LABEL $label$18
	$7 = *(($2 + [8]))
	$6 = *($2)
	$8 = $6
	
.LABEL $label$17
	CALL eosio_assert(((int_64)$11 == (int_64)$7), [9184])
	CALL eosio_assert(((int_64)$5 >= (int_64)$8), [8548])
	$8 = *($0)
	CALL eosio_assert(((int_32)*($10 + [72]) == (int_32)($3 + [72])), [9529])
	CALL eosio_assert(((int_64)*($3 + [72]) == (int_64)CALL $fimport$3()), [9575])
	$4 = ($10 + [40])
	$11 = *($4)
	CALL eosio_assert(((int_64)$7 == (int_64)*(($10 + [8]))), [9104])
	$7 = ((int_64)*($10) + (int_64)$6)
	*($10) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9147])
	CALL eosio_assert(((int_64)*($10) < (int_64)4611686018427387904), [9166])
	$7 = (uint_64)$11 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$7) == (int_64)(uint_64)*($4) >> (uint_64)(int_64)8)), [9626])
	*($3 + [200]) = (($3 + [112]) + [72])
	*($3 + [196]) = ($3 + [112])
	*($3 + [192]) = ($3 + [112])
	*($3 + [208]) = ($3 + [192])
	*($3 + [220]) = ($10 + [16])
	*($3 + [216]) = $10
	*($3 + [224]) = ($10 + [32])
	*($3 + [228]) = ($10 + [48])
	*($3 + [232]) = ($10 + [64])
	CALL $8(($3 + [216]), ($3 + [208]))
	CALL db_update_i64(*($10 + [76]), $8, ($3 + [112]), [72])
	$4 = (($3 + [72]) + [16])
	if ( (uint_64)($7 <= *($4)) ){ goto $label$28 }
	*($4) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$28
	$8 = *(($2 + [8]))
	*((($3 + [16]) + [8])) = $8
	$7 = *($2)
	*(($3 + [8])) = $8
	*($3) = $7
	*($3 + [16]) = $7
	CALL $9($0, $1, $3, $1)
	$10 = *($3 + [56])
	if ( ($10 == 0) ){ goto $label$29 }
	$12 = ($3 + [60])
	$4 = *($12)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$31 }
	
.LOOP $label$32:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$33 }
	CALL _ZdlPv($9)
	
.LABEL $label$33
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$32 }
	$4 = *(($3 + [56]))
	goto $label$30 
	
.LABEL $label$31
	$4 = $10
	
.LABEL $label$30
	*($12) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$29
	$10 = *($3 + [96])
	if ( ($10 == 0) ){ goto $label$34 }
	$12 = ($3 + [100])
	$4 = *($12)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$36 }
	
.LOOP $label$37:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$38 }
	CALL _ZdlPv($9)
	
.LABEL $label$38
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$37 }
	$4 = *(($3 + [96]))
	goto $label$35 
	
.LABEL $label$36
	$4 = $10
	
.LABEL $label$35
	*($12) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$34
	$global$0 = ($3 + [240])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8978])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $57($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [16])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [64])
	CALL $38(($3 + [40]), ($3 + [32]))
	*($5 + [76]) = $1
	*($3 + [32]) = $5
	$6 = (uint_64)*($5 + [40]) >> (uint_64)(int_64)8
	*($3 + [40]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $4(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $60($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *(*($5) + [8])
	CALL eosio_assert([1], [9480])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [8192])
	*($1 + [8]) = $6
	*($1) = (int_64)0
	$6 = *(*($5) + [8])
	CALL eosio_assert([1], [9480])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $9
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$10 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	
.LABEL $label$6
	CALL eosio_assert($10, [8192])
	*(($1 + [24])) = $6
	*($1 + [16]) = (int_64)0
	$8 = *($5)
	*($1 + [32]) = *($8)
	*(($1 + [40])) = *(($8 + [8]))
	$8 = CALL $54([8743])
	if ( ($8 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [9006])
	goto $label$13 
	
.LABEL $label$14
	if ( ($8 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$7 = (int_64)0
	
.LOOP $label$15:
	$10 = *(($8 + [8742]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [9051])
	
.LABEL $label$16
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$15 }
	$6 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$11 
	
.LABEL $label$12
	$6 = (int_64)4
	
.LABEL $label$11
	$12 = ($1 + [32])
	CALL eosio_assert([1], [9480])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$7 = $9
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$21 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$10 = [0]
	
.LABEL $label$17
	CALL eosio_assert($10, [8192])
	*(($1 + [56])) = $6
	*($1 + [48]) = (int_64)0
	*($1 + [64]) = *(*($5 + [4]))
	$10 = $2
	$8 = ($10 + [-80])
	$global$0 = $8
	*($3 + [4]) = $8
	*($3) = $8
	*($3 + [8]) = ($10 + [-8])
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [16])
	*($3 + [24]) = $1
	*($3 + [32]) = $12
	*($3 + [36]) = ($1 + [48])
	*($3 + [40]) = ($1 + [64])
	CALL $8(($3 + [24]), ($3 + [16]))
	$7 = (uint_64)*(($1 + [40])) >> (uint_64)(int_64)8
	*($1 + [76]) = CALL db_store_i64(*($4 + [8]), (int_64)-4157508551318700032, *(*($0 + [8])), $7), $8, [72])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$22 }
	*(($4 + [16])) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$22
	$global$0 = ($3 + [48])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($3 + [48]) = $1
	CALL require_auth(*($0))
	$4 = [0]
	$5 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$1 = $5)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8192])
	$7 = [0]
	$9 = *($2)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$4 = [0]
	$1 = $5
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [8212])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [8313])
	*(($8 = ($3 + [40]))) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$1 = *($0)
	*($3 + [8]) = $1
	*($3 + [16]) = $5
	$4 = CALL db_find_i64($1, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $2(($3 + [8]), $4) + [72]) == (int_32)($3 + [8])), [8927])
	$4 = [0]
	goto $label$11 
	
.LABEL $label$12
	$4 = [1]
	
.LABEL $label$11
	CALL eosio_assert($4, [8341])
	$1 = *($0)
	*($3) = $2
	*($3 + [4]) = ($3 + [48])
	*($3 + [88]) = $1
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$3()), [9429])
	*($3 + [68]) = $3
	*($3 + [64]) = ($3 + [8])
	*($3 + [72]) = ($3 + [88])
	*(($4 = CALL _Znwj([88])) + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = ($3 + [8])
	CALL $3(($3 + [64]), $4)
	*($3 + [80]) = $4
	$1 = (uint_64)*($4 + [40]) >> (uint_64)(int_64)8
	*($3 + [64]) = $1)
	$2 = *($4 + [76])
	*($3 + [60]) = $2
	$0 = ($3 + [36])
	$7 = *($0)
	if ( ((uint_32)$7 >= (uint_32)*($8)) ){ goto $label$15 }
	*($7 + [8]) = $1
	*($7 + [16]) = $2
	*($3 + [80]) = [0]
	*($7) = $4
	*($0) = ($7 + [24])
	$4 = *($3 + [80])
	*($3 + [80]) = [0]
	if ( $4 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL $4(($3 + [32]), ($3 + [80]), ($3 + [64]), ($3 + [60]))
	$4 = *($3 + [80])
	*($3 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$8 = *($3 + [32])
	if ( ($8 == 0) ){ goto $label$16 }
	$2 = ($3 + [36])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$18 }
	
.LOOP $label$19:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$20 }
	CALL _ZdlPv($7)
	
.LABEL $label$20
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$19 }
	$4 = *(($3 + [32]))
	goto $label$17 
	
.LABEL $label$18
	$4 = $8
	
.LABEL $label$17
	*($2) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$global$0 = ($3 + [96])
}

int_32 .FUNC $14 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$0), [8927])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $7($0, $4)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$0), [8927])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $15 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [160])
	$global$0 = $4
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	$6 = *($2 + [8])
	*($4 + [16]) = $1
	$7 = [0]
	$8 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$8) < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $7(($4 + [8]), $8)
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)($4 + [8])), [8927])
	
.LABEL $label$1
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [8877])
	$5 = *($0)
	CALL eosio_assert($8, [9833])
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)($4 + [8])), [9529])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$3()), [9575])
	$1 = *($7 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)*(($7 + [24]))), [9104])
	$6 = ((int_64)*($7 + [16]) + (int_64)*($2))
	*($7 + [16]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9147])
	CALL eosio_assert(((int_64)*($7 + [16]) < (int_64)4611686018427387904), [9166])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($7 + [8]) >> (uint_64)(int_64)8)), [9626])
	*($4 + [128]) = (($4 + [48]) + [64])
	*($4 + [124]) = ($4 + [48])
	*($4 + [120]) = ($4 + [48])
	*($4 + [136]) = ($4 + [120])
	*($4 + [148]) = ($7 + [16])
	*($4 + [144]) = $7
	*($4 + [152]) = ($7 + [32])
	*($4 + [156]) = ($7 + [48])
	CALL $10(($4 + [144]), ($4 + [136]))
	CALL db_update_i64(*($7 + [68]), $5, ($4 + [48]), [64])
	$7 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$2 }
	*($7) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$2
	$0 = *($4 + [32])
	if ( ($0 == 0) ){ goto $label$3 }
	$8 = ($4 + [36])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$5 }
	
.LOOP $label$6:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$6 }
	$7 = *(($4 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$7 = $0
	
.LABEL $label$4
	*($8) = $0
	CALL _ZdlPv($7)
	
.LABEL $label$3
	$global$0 = ($4 + [160])
}

void .FUNC $16 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [160])
	$global$0 = $3
	*((($3 + [8]) + [32])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	$5 = *($2)
	$1 = *($2 + [8])
	$4 = CALL $14(($3 + [8]), (uint_64)$1 >> (uint_64)(int_64)8), [8597]
	CALL eosio_assert(((int_64)*($4)) >= (int_64)$5), [8548])
	$6 = *($0)
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)($3 + [8])), [9529])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$3()), [9575])
	$7 = *($4 + [8])
	CALL eosio_assert(((int_64)$1 == (int_64)$7), [9338])
	$1 = (int_64)
	*($4) = $1(*($4) - $5))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9386])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [9408])
	$1 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($4 + [8]) >> (uint_64)(int_64)8)), [9626])
	*($3 + [128]) = (($3 + [48]) + [64])
	*($3 + [124]) = ($3 + [48])
	*($3 + [120]) = ($3 + [48])
	*($3 + [136]) = ($3 + [120])
	*($3 + [148]) = ($4 + [16])
	*($3 + [144]) = $4
	*($3 + [152]) = ($4 + [32])
	*($3 + [156]) = ($4 + [48])
	CALL $10(($3 + [144]), ($3 + [136]))
	CALL db_update_i64(*($4 + [68]), $6, ($3 + [48]), [64])
	if ( (uint_64)($1 <= *($3 + [24])) ){ goto $label$1 }
	*((($3 + [8]) + [16])) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$1
	$0 = *($3 + [32])
	if ( ($0 == 0) ){ goto $label$2 }
	$8 = ($3 + [36])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$5 }
	$4 = *(($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$4 = $0
	
.LABEL $label$3
	*($8) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$global$0 = ($3 + [160])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [16])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $51($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $31(($7 + [28]), [24])
	$2 = *($7 + [28])
	$1 = (*(($7 + [32])) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [9243])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [9243])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	*($5 + [8]) = *(($4 + [16]))
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [9243])
	CALL memcpy(($2 + [16]), ($5 + [8]), [8])
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	$4 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$12 = ($4 - $8)
	$9 = [0]
	
.LOOP $label$7:
	$2 = ($8 + $9)
	*((($4 = ($7 + $9)) + [-32])) = *(($2 + [-32]))
	*(($4 + [-40])) = *(($2 + [-40]))
	*(($1 = ($4 + [-24]))) = (int_64)0
	*(($6 = ($4 + [-16]))) = [0]
	$3 = ($2 + [-24])
	*($1) = *($3)
	$1 = ($2 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($4 + [-12]))) = (int_64)0
	*(($4 = ($4 + [-4]))) = [0]
	$6 = ($2 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$2 = ($2 + [-4])
	*($4) = *($2)
	*($2) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$12 != (int_32)$9) ){ goto $label$7 }
	$7 = ($7 + $9)
	$4 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $4
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = *(($4 + [-12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($4 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$2 = ($4 + [-40])
	$9 = *(($4 + [-24]))
	if ( ($9 == 0) ){ goto $label$11 }
	*(($4 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$11
	$4 = $2
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($5 + [16])
	(unreachable)
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), $0, [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *($0 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [9243])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	*($1) = *($6)
	*(($1 + [8])) = *(($6 + [8]))
	$6 = CALL $54([8542])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9006])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8541]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9051])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert([1], [9480])
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $10
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$11 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	
.LABEL $label$7
	CALL eosio_assert($8, [8192])
	*(($1 + [24])) = $9
	*($1 + [16]) = (int_64)0
	$6 = CALL $54([8743])
	if ( ($6 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [9006])
	goto $label$14 
	
.LABEL $label$15
	if ( ($6 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$7 = (int_64)0
	
.LOOP $label$16:
	$8 = *(($6 + [8742]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9051])
	
.LABEL $label$17
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$16 }
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$9 = (int_64)4
	
.LABEL $label$12
	CALL eosio_assert([1], [9480])
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$10 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$7 = $10
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$7 = $10
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$22 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$8 = [0]
	
.LABEL $label$18
	CALL eosio_assert($8, [8192])
	*(($1 + [56])) = $9
	*($1 + [48]) = (int_64)0
	$6 = *($5 + [4])
	$7 = *($6)
	$10 = *($6 + [8])
	$8 = *($5 + [8])
	CALL eosio_assert(((int_64)*(($8 + [56])) == (int_64)$10), [9104])
	$7 = ((int_64)$7 + (int_64)*($8 + [48]))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9147])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9166])
	*(($1 + [40])) = $10
	*($1 + [32]) = $7
	$8 = $2
	$6 = ($8 + [-64])
	$global$0 = $6
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = $8
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [16])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [32])
	*($3 + [44]) = ($1 + [48])
	CALL $10(($3 + [32]), ($3 + [24]))
	$7 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($1 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $7), $6, [64])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$23 }
	*(($4 + [16])) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$23
	$global$0 = ($3 + [48])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $51($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [288])
	$global$0 = $3
	$4 = [0]
	$5 = *($2 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8192])
	$9 = [0]
	*(($3 + [184])) = [0]
	*($3 + [168]) = (int_64)-1
	*($3 + [176]) = (int_64)0
	$7 = *($0)
	*($3 + [152]) = $7
	*($3 + [160]) = $6
	$10 = [0]
	$4 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$6 }
	$10 = CALL $2(($3 + [152]), $4)
	CALL eosio_assert(((int_32)*($10 + [72]) == (int_32)($3 + [152])), [8927])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8374])
	CALL require_auth($1)
	CALL require_recipient($1)
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$4 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $7
	$9 = [1]
	$11 = $4
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $7
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$11 = ($4 + [1])
	$4 = $11
	if ( $9 ){ goto $label$11 }
	$9 = [1]
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	
.LABEL $label$7
	CALL eosio_assert($9, [8436])
	$7 = (int_64)0
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8566])
	CALL eosio_assert(((int_64)$5 == (int_64)*($10 + [8])), [8482])
	CALL eosio_assert(((int_64)$8 <= (int_64)*($10)), [8508])
	*(($3 + [144])) = [0]
	*($3 + [120]) = $1
	*($3 + [128]) = (int_64)-1
	*($3 + [136]) = (int_64)0
	*($3 + [112]) = *($0)
	$4 = CALL $54([8542])
	if ( ($4 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [9006])
	goto $label$13 
	
.LABEL $label$14
	if ( ($4 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$7 = (int_64)0
	
.LOOP $label$15:
	$9 = *(($4 + [8541]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [9051])
	
.LABEL $label$16
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$15 }
	$7 = ((int_64)$7 & (int_64)72057594037927935)
	
.LABEL $label$12
	$4 = CALL $14(($3 + [112]), $7, [8597])
	CALL eosio_assert(((int_64)$5 == (int_64)*($4 + [8])), [9184])
	CALL eosio_assert(((int_64)$8 <= (int_64)*($4)), [8621])
	$6 = *($0)
	CALL eosio_assert(((int_32)*($10 + [72]) == (int_32)($3 + [152])), [9529])
	CALL eosio_assert(((int_64)*($3 + [152]) == (int_64)CALL $fimport$3()), [9575])
	$4 = ($10 + [40])
	$7 = *($4)
	CALL eosio_assert(((int_64)$5 == (int_64)*(($10 + [8]))), [9338])
	$12 = (int_64)
	*($10) = $12(*($10) - $8))
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9386])
	CALL eosio_assert(((int_64)*($10) < (int_64)4611686018427387904), [9408])
	CALL eosio_assert(((int_64)$5 == (int_64)*(($10 + [24]))), [9104])
	$8 = ((int_64)*($10 + [16]) + (int_64)$8)
	*($10 + [16]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9147])
	CALL eosio_assert(((int_64)*($10 + [16]) < (int_64)4611686018427387904), [9166])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$7) == (int_64)(uint_64)*($4) >> (uint_64)(int_64)8)), [9626])
	*($3 + [40]) = (($3 + [208]) + [72])
	*($3 + [36]) = ($3 + [208])
	*($3 + [32]) = ($3 + [208])
	*($3 + [192]) = ($3 + [32])
	*($3 + [60]) = ($10 + [16])
	*($3 + [56]) = $10
	*($3 + [64]) = ($10 + [32])
	*($3 + [68]) = ($10 + [48])
	*($3 + [72]) = ($10 + [64])
	CALL $8(($3 + [56]), ($3 + [192]))
	CALL db_update_i64(*($10 + [76]), $6, ($3 + [208]), [72])
	$4 = (($3 + [152]) + [16])
	if ( (uint_64)($7 <= *($4)) ){ goto $label$17 }
	*($4) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$17
	$4 = ($2 + [8])
	$6 = *($4)
	*((($3 + [96]) + [8])) = $6
	$7 = *($2)
	*((($3 + [16]) + [8])) = $6
	*($3 + [16]) = $7
	*($3 + [96]) = $7
	CALL $15($0, $1, ($3 + [16]), $7)
	$6 = *($4)
	*((($3 + [80]) + [8])) = $6
	$7 = *($2)
	*(($3 + [8])) = $6
	*($3) = $7
	*($3 + [80]) = $7
	CALL $16($0, $1, $3)
	$7 = CALL current_time()
	*(($3 + [236])) = (int_64)0
	*(($3 + [252])) = (int_64)0
	*(($3 + [260])) = (int_64)0
	*($3 + [220]) = [0]
	*($3 + [224]) = [0]
	*($3 + [228 align=4]) = (int_64)0
	*($3 + [244 align=4]) = (int_64)0
	*($3 + [208]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	*((($3 + [56]) + [16])) = *($4)
	*($3 + [56]) = $1
	*($3 + [64]) = *($2)
	*($3 + [40]) = (int_64)3617214756542218240
	*($3 + [32]) = *($0)
	*($3 + [192]) = (int_64)-4998252998346932224
	CALL $17(($3 + [244]), ($3 + [32]), $0, ($3 + [192]), ($3 + [56]))
	$7 = *($0)
	*($3 + [228]) = [86400]
	*($3 + [40]) = (int_64)0
	*($3 + [32]) = $7
	CALL $18(($3 + [192]), ($3 + [208]))
	$4 = *($3 + [192])
	CALL send_deferred(($3 + [32]), $7, $4, (*($3 + [196]) - $4), [0])
	$4 = *($3 + [192])
	if ( ($4 == 0) ){ goto $label$18 }
	*($3 + [196]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$18
	CALL $19(($3 + [208]))
	$10 = *($3 + [136])
	if ( ($10 == 0) ){ goto $label$19 }
	$11 = ($3 + [140])
	$4 = *($11)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$21 }
	
.LOOP $label$22:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$23 }
	CALL _ZdlPv($9)
	
.LABEL $label$23
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$22 }
	$4 = *(($3 + [136]))
	goto $label$20 
	
.LABEL $label$21
	$4 = $10
	
.LABEL $label$20
	*($11) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$19
	$10 = *($3 + [176])
	if ( ($10 == 0) ){ goto $label$24 }
	$11 = ($3 + [180])
	$4 = *($11)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$26 }
	
.LOOP $label$27:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$28 }
	CALL _ZdlPv($9)
	
.LABEL $label$28
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$27 }
	$4 = *(($3 + [176]))
	goto $label$25 
	
.LABEL $label$26
	$4 = $10
	
.LABEL $label$25
	*($11) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$24
	$global$0 = ($3 + [288])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9243])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9243])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9243])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9001])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9001])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9001])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9001])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9001])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9001])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9001])
	CALL memcpy($0, *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [9001])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9243])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9243])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $35($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9243])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9243])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9243])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9243])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9243])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9243])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9243])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9243])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9243])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9243])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9243])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $35(CALL $36($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $51($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $59($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8227])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $59 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9880]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9884])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9880]) = [1]
	$2 = ($2 << [16])
	*([0] + [9884]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9884])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9884]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9880]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9880]) = [1]
	$3 = ($3 << [16])
	*([0] + [9884]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9884])
	
.LABEL $label$10
	*([0] + [9884]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $50 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9001])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9001])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9001])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9001])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9001])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9001])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9001])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9001])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9001])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $52 ()
{
	return [9872]
}

void .FUNC $53 (int_32 $0)
{
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $52())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $56($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $57($1)
	
.LABEL $label$2
	*(CALL $52()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $57(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $60($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $57 (int_32 $0)
{
	return CALL $58([9888], $0)
}