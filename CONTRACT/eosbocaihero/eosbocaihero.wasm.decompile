(data (i32.const 4) "`e\00\00")
(data (i32.const 32) "0\00")
(data (i32.const 48) "transfer\00")
(data (i32.const 64) "eosio.token\00")
(data (i32.const 80) "eosbocai1111\00")
(data (i32.const 96) "read\00")
(data (i32.const 112) "get\00")
(data (i32.const 128) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 192) "no character exist\00")
(data (i32.const 224) "not the owner...\00")
(data (i32.const 256) "cannot pass end iterator to modify\00")
(data (i32.const 304) "object passed to modify is not in multi_index\00")
(data (i32.const 352) "cannot modify objects in table of another contract\00")
(data (i32.const 416) "updater cannot change primary key when modifying an object\00")
(data (i32.const 480) "write\00")
(data (i32.const 496) "error reading iterator\00")
(data (i32.const 528) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 592) "invalid symbol name\00")
(data (i32.const 624) "gy2dgmztgqge\00")
(data (i32.const 640) "cannot create objects in table of another contract\00")
(data (i32.const 704) "next primary key in table is at autoincrement limit\00")
(data (i32.const 768) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 832) "cannot decrement iterator at beginning of table\00")
(data (i32.const 880) "Invalid token transfer...\00")
(data (i32.const 912) "buy\00")
(data (i32.const 928) "pls check amount\00")
(data (i32.const 960) "pls check owner\00")
(data (i32.const 976) "game not start\00")
(data (i32.const 992) "game over\00")
(data (i32.const 1008) "active\00")
(data (i32.const 1024) "next hodl\00")
(data (i32.const 1040) "only EOS token is allowed\00")
(data (i32.const 9472) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_previous_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$12 (param i32)))
(import "env" "memcpy" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$16 (param i64)))
(import "env" "require_auth2" (func $fimport$17 (param i64 i64)))
(import "env" "send_inline" (func $fimport$18 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z7explodeRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc" (func $5))
(export "_Z15string_to_priceNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $7))
(export "_Z13string_to_intNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $8))
(export "_Z13int_to_stringy" (func $9))
(export "_ZN12eoscrazytown5applyEyy" (func $10))
(export "_ZN12eoscrazytown10onTransferERyS0_RN5eosio5assetERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE" (func $11))
(export "_ZN12eoscrazytown4initEv" (func $13))
(export "_ZN12eoscrazytown5clearEv" (func $15))
(export "_ZN12eoscrazytown6newbagERN5eosio5assetERh" (func $16))
(export "_ZN12eoscrazytown9setsloganERyyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE" (func $18))
(export "apply" (func $48))
(export "_Z5isbothyy" (func $49))
(export "malloc" (func $50))
(export "free" (func $53))
(export "memchr" (func $69))
(export "memcmp" (func $70))
(export "strlen" (func $71))
(table $0 6 6 anyfunc)
(elem (i32.const 0) $72 $11 $18 $13 $16 $15)



void .FUNC _ZN12eoscrazytown9setsloganERyyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$4 = *(($0 + [72]))
	$8 = *(($0 + [76]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [48])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$6), [128])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)4150067056621912064, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $24($6, $8)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$6), [128])
	
.LABEL $label$3
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [192])
	CALL eosio_assert(((int_64)*($1) == (int_64)*($7 + [8])), [224])
	$2 = *($1)
	*($9 + [8]) = $3
	CALL eosio_assert($8, [256])
	CALL $25($6, $7, $2, ($9 + [8]))
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $54($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $55($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($3 = $4) + [44]) = $0
	*($3 + [32]) = *($1)
	*($3 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [48]) = $1
	$4 = ($1 + $0)
	*($3 + [56]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [96])
	CALL memcpy($3, $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[7]), [96])
	CALL memcpy(($3 + [8]), $2, [8])
	*($3 + [52]) = ($1 + [16])
	CALL $20(($3 + [48]), ($3 + [16]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $21(($3 + [48]), $3)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $55(*(($3 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [64])
	return [1]
}

void .FUNC $66 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $54(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $55($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $55($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $54($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $54(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL $55(*(($1 + [32])))
	
.LABEL $label$11
	CALL $55($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $55($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $20(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *($1 + [8])
	$3 = *($1)
	CALL $67(($5 + [8]), ($1 + [16]))
	*($5 + [40]) = $3
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $67(($5 + [24]), ($5 + [8]))
	CALL void $0((int_32 ($5 + [40])), (int_32 $2), (int_64 ($5 + [24])), (int_32 $1))
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$2 }
	CALL $55(*($5 + [32]))
	
.LABEL $label$2
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$3 }
	CALL $55(*($5 + [16]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $22($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $59($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $54($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $59($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $55($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $56($7)
	return (unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $54($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $66($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $55($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [112])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $23($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [96])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [48])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [304])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [352])
	$4 = *($1)
	$5 = ($1 + [24])
	CALL $57($5, *($3))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [416])
	$3 = *($1 + [24])
	$6 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($6 + [32])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $3)
	*($9 + [16]) = $9
	*($9 + [36]) = $5
	*($9 + [24]) = $1
	*($9 + [28]) = ($1 + [8])
	*($9 + [32]) = ($1 + [16])
	*($9 + [40]) = ($1 + [40])
	CALL $26(($9 + [24]), ($9 + [16]))
	CALL db_update_i64(*($1 + [52]), $2, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($8)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [48])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [496])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $54([64])) + [32]) = [0]
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [48]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [40])
	CALL $28(($8 + [40]), ($8 + [32]))
	*($6 + [52]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $29(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL $55(*(($4 + [32])))
	
.LABEL $label$10
	CALL $55($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [480])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [480])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $27(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC _Z5isbothyy (int_32 $0, int_64 $1, int_64 $2)
{
	return ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $0) * (int_64)$1) + (int_64)2333) != (int_64)$2)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [96])
	*([0] + [4]) = $3
	*(($3 + [24])) = $0
	*(($3 + [32])) = (int_64)-1
	*(($3 + [40])) = (int_64)0
	*(($3 + [48])) = [0]
	*($3 + [16]) = $0
	*($3 + [8]) = $0
	*($3 + [56]) = $0
	*(($3 + [64])) = $0
	*(($3 + [72])) = (int_64)-1
	*(($3 + [80])) = [0]
	*(($3 + [84])) = [0]
	*(($3 + [88])) = [0]
	CALL _ZN12eoscrazytown5applyEyy(($3 + [8]), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC $68 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $54($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [480])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $27(*($1), ($0 + [32]))
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [96])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [96])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [96])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $20(*($1), ($0 + [32]))
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [640])
	*(($4 = CALL $54([48])) + [32]) = $1
	$3 = *($3)
	*($4) = *($3)
	*(($5 = ($4 + [28]))) = *(($3 + [28]))
	*(($6 = ($4 + [24]))) = *(($3 + [24]))
	*(($4 + [20])) = *(($3 + [20]))
	*(($7 = ($4 + [16]))) = *(($3 + [16]))
	*(($4 + [12])) = *(($3 + [12]))
	*(($8 = ($4 + [8]))) = *(($3 + [8]))
	*(($4 + [4])) = *(($3 + [4]))
	*($9 + [40]) = ($9 + [32])
	*($9 + [36]) = $9
	*($9 + [32]) = $9
	*($9 + [48]) = ($9 + [32])
	*($9 + [60]) = $8
	*($9 + [56]) = $4
	*($9 + [64]) = $7
	*($9 + [68]) = $6
	*($9 + [72]) = $5
	CALL $38(($9 + [56]), ($9 + [48]))
	*($4 + [36]) = CALL db_store_i64(*($1 + [8]), (int_64)4150496169072803840, $2, (int_64)4150496169072803840, $9, [32])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4150496169072803840) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4150496169072803841
	
.LABEL $label$1
	*($9 + [56]) = $4
	*($9) = (int_64)4150496169072803840
	$5 = *($4 + [36])
	*($9 + [32]) = $5
	$3 = *(($1 + [28]))
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4150496169072803840
	*($3 + [16]) = $5
	*($9 + [56]) = [0]
	*($3) = $4
	*(($1 + [28])) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $39(($1 + [24]), ($9 + [56]), $9, ($9 + [32]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [56])
	*($9 + [56]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $55($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [80])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [96])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [96])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [480])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [480])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [480])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [480])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [480])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [48])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [304])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [352])
	*($1 + [8]) = *(*($2))
	$8 = *(*($2 + [4]))
	*($1 + [16]) = $8
	*($1 + [40]) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 $8) * (float_64)(float_64)1.35))
	$3 = *($1)
	CALL eosio_assert([1], [416])
	$2 = *($1 + [24])
	$7 = ( *(($1 + [28])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($7 + [32])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	$6 = ($1 + [40])
	$5 = ($1 + [16])
	$4 = ($1 + [8])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$9 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$9 = ($9 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$2
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $2)
	*($10 + [16]) = $10
	*($10 + [28]) = $4
	*($10 + [32]) = $5
	*($10 + [36]) = $7
	*($10 + [40]) = $6
	*($10 + [24]) = $1
	CALL $26(($10 + [24]), ($10 + [16]))
	CALL db_update_i64(*($1 + [52]), (int_64)0, $9, $2)
	if ( ($2 <= [513]) ){ goto $label$4 }
	CALL free($9)
	
.LABEL $label$4
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $23($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [480])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [480])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $47(CALL $46($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $72 ()
{
	(unreachable)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $52($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9472])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $58($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_64 .FUNC _Z13string_to_intNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$4 }
	$2 = uint_32($2 >> [1])
	if ( ($2 == 0) ){ goto $label$2 }
	$0 = ($0 + [1])
	$3 = (int_64)0
	
.LOOP $label$5:
	$3 = ((int_64)((int_64)((int_64)$3 + (int_64)*($0)) * (int_64)10) + (int_64)-480)
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$1 }
	$1 = *(($0 + [8]))
	$3 = (int_64)0
	$0 = [0]
	
.LOOP $label$6:
	$3 = ((int_64)((int_64)((int_64)$3 + (int_64)*(($1 + $0))) * (int_64)10) + (int_64)-480)
	$0 = ($0 + [1])
	if ( ($0 <= $2) ){ goto $label$6 }
	
.LABEL $label$3
	return $3
	
.LABEL $label$2
	return (int_64)0
	
.LABEL $label$1
	return (int_64)0
}

void .FUNC _Z13int_to_stringy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$3 }
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	
.LOOP $label$4:
	CALL $61($6, (CASTING uint_32)(uint_64 ((int_64)((uint_64)$1 % (uint_64)(int_64)10) | (int_64)48)))
	$2 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = ((uint_64)$1 / (uint_64)(int_64)10)
	if ( $2 ){ goto $label$4 }
	$3 = ($6 + [8])
	$2 = ($2 & [1])
	$2 = *($6)
	$5 = ( *($6 + [4]) ? uint_32($2 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$5 }
	$2 = ( *($3) ? ($6 | [1]) : $2 )
	$5 = (($2 + $5) + [-1])
	if ( ((uint_32)$5 <= (uint_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = *($2)
	*($2) = *($5)
	*($5) = $4
	$5 = ($5 + [-1])
	$2 = ($2 + [1])
	if ( ($2 <= $5) ){ goto $label$6 }
	
.LABEL $label$5
	*($0) = *($6)
	*(($0 + [8])) = *($3)
	goto $label$2 
	
.LABEL $label$3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$2 = CALL strlen([32])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$4 = (($2 + [16]) & [-16])
	$5 = CALL $54($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $2
	
.LABEL $label$8
	CALL memcpy($5, [32], $2)
	
.LABEL $label$7
	*(($5 + $2)) = [0]
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $56($0)
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($6 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $54(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$6 = ($4 + ((int_32)$2 * (int_32)[12]))
	CALL $67($6, $1)
	$2 = ($4 + ((int_32)$5 * (int_32)[12]))
	$3 = ($6 + [12])
	$5 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$5 = ($4 + [-12])
	
.LOOP $label$7:
	*(($6 + [-12])) = *($5)
	$4 = ($5 + [8])
	*(($6 + [-4])) = *($4)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	$6 = ($6 + [-12])
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	$6 = ([0] - $4)
	$5 = ($5 + [-12])
	
.LOOP $label$9:
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $55(*(($5 + [8])))
	
.LABEL $label$10
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $55($4)
	
.LABEL $label$11
	(unreachable)
}

int_64 .FUNC _Z15string_to_priceNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$4 }
	$3 = uint_32($3 >> [1])
	if ( ($3 == 0) ){ goto $label$2 }
	$0 = ($0 + [1])
	$4 = (int_64)0
	
.LOOP $label$5:
	$2 = *($0)
	if ( ((uint_32)(($2 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$6 }
	$4 = ((int_64)((int_64)((int_64)$4 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$6
	$0 = ($0 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	if ( ($3 == 0) ){ goto $label$1 }
	$1 = ($0 + [8])
	$2 = *($1)
	$4 = (int_64)0
	$0 = [0]
	
.LOOP $label$7:
	if ( ((int_32)*(($2 + $0)) < (int_32)[48]) ){ goto $label$8 }
	if ( ((int_32)*((*($1) + $0)) > (int_32)[57]) ){ goto $label$8 }
	$4 = ((int_64)((int_64)((int_64)$4 * (int_64)10) + (int_64)*((*($1) + $0))) + (int_64)-48)
	
.LABEL $label$8
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$7 }
	
.LABEL $label$3
	return $4
	
.LABEL $label$2
	return (int_64)0
	
.LABEL $label$1
	return (int_64)0
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _Z7explodeRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*(($8 + [8])) = [0]
	*($8) = (int_64)0
	$7 = CALL strlen([16])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$4 }
	*($8) = ($7 << [1])
	$6 = ($8 | [1])
	if ( $7 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($7 + [16]) & [-16])
	$6 = CALL $54($5)
	*($8) = ($5 | [1])
	*($8 + [8]) = $6
	*($8 + [4]) = $7
	
.LABEL $label$3
	CALL memcpy($6, [16], $7)
	
.LABEL $label$2
	*(($6 + $7)) = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$7 = ($7 & [1])
	$7 = *($1)
	$6 = ( *($1 + [4]) ? uint_32($7 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$5 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$6:
	$1 = *($7)
	if ( ((int_32)$1 != (int_32)*($2)) ){ goto $label$10 }
	$1 = *($8)
	$3 = CALL strlen([16])
	if ( ((int_32)$3 != (int_32)( *($8 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$11 }
	if ( (CALL $65($8, [0], [-1], [16], $3) == 0) ){ goto $label$7 }
	
.LABEL $label$11
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)*($4)) ){ goto $label$9 }
	CALL $67($1, $8)
	*($5) = (*($5) + [12])
	goto $label$8 
	
.LABEL $label$10
	CALL $61($8, int_32(($1 << [24]) >> [24]))
	goto $label$7 
	
.LABEL $label$9
	CALL $6($0, $8)
	
.LABEL $label$8
	CALL $60($8, [16])
	
.LABEL $label$7
	$7 = ($7 + [1])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$6 }
	
.LABEL $label$5
	$7 = *($8)
	$6 = CALL strlen([16])
	if ( ((int_32)$6 != (int_32)( *($8 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$13 }
	if ( (CALL $65($8, [0], [-1], [16], $6) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$7 = ($0 + [4])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)*(($0 + [8]))) ){ goto $label$14 }
	CALL $67($6, $8)
	*($7) = (*($7) + [12])
	goto $label$12 
	
.LABEL $label$14
	CALL $6($0, $8)
	
.LABEL $label$12
	if ( ((*($8) & [1]) == 0) ){ goto $label$15 }
	CALL $55(*($8 + [8]))
	
.LABEL $label$15
	*([0] + [4]) = ($8 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $56($8)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC _ZN12eoscrazytown5clearEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	CALL require_auth(*($0))
	$2 = ($0 + [72])
	$1 = ($0 + [48])
	$10 = [57]
	$7 = ($11 + [24])
	$8 = ($0 + [80])
	$9 = ($0 + [76])
	
.LOOP $label$1:
	$6 = *($0)
	*($11 + [8]) = $0
	*($11 + [40]) = $6
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [640])
	*($11 + [16]) = $1
	*($7) = ($11 + [40])
	*($11 + [20]) = ($11 + [8])
	*(($3 = CALL $54([64])) + [32]) = [0]
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [48]) = $1
	CALL $31(($11 + [16]), $3)
	*($11 + [32]) = $3
	$6 = *($3)
	*($11 + [16]) = $6
	$4 = *($3 + [52])
	*($11 + [12]) = $4
	$5 = *($9)
	if ( ((uint_32)$5 >= (uint_32)*($8)) ){ goto $label$3 }
	*($5 + [8]) = $6
	*($5 + [16]) = $4
	*($11 + [32]) = [0]
	*($5) = $3
	*($9) = ($5 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $29($2, ($11 + [32]), ($11 + [16]), ($11 + [12]))
	
.LABEL $label$2
	$3 = *($11 + [32])
	*($11 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$5 }
	CALL $55(*(($3 + [32])))
	
.LABEL $label$5
	CALL $55($3)
	
.LABEL $label$4
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$1 }
	*([0] + [4]) = ($11 + [48])
}

void .FUNC _ZN12eoscrazytown6newbagERN5eosio5assetERh (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	*([0] + [4]) = $13
	CALL require_auth(*($0))
	$3 = ($0 + [48])
	$11 = (int_64)0
	$8 = ($0 + [72])
	$9 = ($0 + [76])
	$10 = ($0 + [56])
	
.LOOP $label$1:
	$4 = $11
	$5 = *($8)
	$12 = *($9)
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$2 }
	$0 = ($12 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$3:
	if ( ((int_64)*(*($0)) == (int_64)$4) ){ goto $label$2 }
	$12 = $0
	$7 = ($0 + [-24])
	$0 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$5 }
	$0 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [48]) == (int_32)$3), [128])
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	$7 = CALL db_find_i64(*($3), *($10), (int_64)4150067056621912064, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $24($3, $7)
	CALL eosio_assert(((int_32)*($0 + [48]) == (int_32)$3), [128])
	
.LABEL $label$4
	*($13 + [8]) = $1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [256])
	CALL $30($3, $0, ($13 + [8]))
	$11 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 < (int_64)((int_64)*($2) + (int_64)56)) ){ goto $label$1 }
	*([0] + [4]) = ($13 + [16])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [64])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = [0]
	$4 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $3)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)1398362884
	*($8) = (int_64)0
	CALL eosio_assert([1], [528])
	$5 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$6 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$6 = [0]
	
.LABEL $label$4
	CALL eosio_assert($6, [592])
	*($8 + [16]) = [0]
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [96])
	CALL memcpy($8, $4, [8])
	CALL eosio_assert(((int_32)($3 & [-8]) != (int_32)[8]), [96])
	$1 = ($8 + [8])
	CALL memcpy($1, ($4 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [96])
	$6 = ($8 + [16])
	CALL memcpy($6, ($4 + [16]), [1])
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($4)
	
.LABEL $label$9
	*(($3 = (($8 + [24]) + [8]))) = *($1)
	*($8 + [24]) = *($8)
	$1 = *($6)
	*((($8 + [40]) + [8])) = *($3)
	*($8 + [40]) = *($8 + [24])
	*($8 + [63]) = $1
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$10 }
	$7 = *((*($1) + $7))
	
.LABEL $label$10
	CALL void $1((int_32 ($8 + [40])), (int_32 ($8 + [63])), (int_32 $7))
	*([0] + [4]) = ($8 + [64])
	return [1]
}

void .FUNC _ZN12eoscrazytown5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [48]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [64]
	$7 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$14 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$3 = ($3 + [165])
	goto $label$12 
	
.LABEL $label$14
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$10
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$9 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$15 }
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [80]
	$7 = (int_64)0
	
.LOOP $label$16:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$17 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$3 = ($3 + [165])
	goto $label$18 
	
.LABEL $label$19
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$7 }
	
.LABEL $label$15
	*($9 + [76]) = [0]
	*($9 + [72]) = [1]
	*($9) = *($9 + [72])
	CALL $12($0, $9)
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 > (int_64)4923678490122780671) ){ goto $label$22 }
	if ( ((int_64)$2 == (int_64)-7297956546158264320) ){ goto $label$21 }
	if ( ((int_64)$2 != (int_64)-4417036376032673792) ){ goto $label$7 }
	*($9 + [44]) = [0]
	*($9 + [40]) = [2]
	*($9 + [32 align=4]) = *($9 + [40])
	CALL $19($0, ($9 + [32]))
	goto $label$7 
	
.LABEL $label$22
	if ( ((int_64)$2 == (int_64)4923678490122780672) ){ goto $label$20 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$7 }
	*($9 + [68]) = [0]
	*($9 + [64]) = [3]
	*($9 + [8 align=4]) = *($9 + [64])
	CALL $14($0, ($9 + [8]))
	goto $label$7 
	
.LABEL $label$21
	*($9 + [52]) = [0]
	*($9 + [48]) = [4]
	*($9 + [24 align=4]) = *($9 + [48])
	CALL $17($0, ($9 + [24]))
	goto $label$7 
	
.LABEL $label$20
	*($9 + [60]) = [0]
	*($9 + [56]) = [5]
	*($9 + [16 align=4]) = *($9 + [56])
	CALL $14($0, ($9 + [16]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [80])
}

void .FUNC _ZN12eoscrazytown10onTransferERyS0_RN5eosio5assetERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	$20 = (*([0] + [4]) - [208])
	*([0] + [4]) = $20
	if ( ((int_64)*($2) != (int_64)*($0)) ){ goto $label$3 }
	CALL require_auth(*($1))
	$11 = [0]
	$13 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$4 }
	$12 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$13 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$13 = [0]
	
.LABEL $label$4
	CALL eosio_assert($13, [880])
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)1397703940), [1040])
	CALL $68(($20 + [24]), $4, [0], [3], $4)
	$2 = *($20 + [24])
	$13 = CALL strlen([912])
	if ( ((int_32)$13 != (int_32)( *($20 + [28]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$9 }
	$11 = (CALL $65(($20 + [24]), [0], [-1], [912], $13) == 0)
	$2 = *($20 + [24])
	
.LABEL $label$9
	if ( (($2 & [1]) == 0) ){ goto $label$10 }
	CALL $55(*($20 + [32]))
	
.LABEL $label$10
	if ( ($11 == 0) ){ goto $label$3 }
	CALL $63($4, [0], [4])
	$6 = CALL $64($4, [32], [0])
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$11 }
	$2 = *($4)
	if ( ($2 & [1]) ){ goto $label$12 }
	$6 = uint_32($2 >> [1])
	goto $label$11 
	
.LABEL $label$12
	$6 = *($4 + [4])
	
.LABEL $label$11
	CALL $68(($20 + [160]), $4, [0], $6, $4)
	$2 = *($20 + [160])
	$5 = ($2 & [1])
	if ( $5 ){ goto $label$18 }
	$13 = uint_32($2 >> [1])
	if ( ($13 == 0) ){ goto $label$16 }
	$2 = (($20 + [160]) | [1])
	$12 = (int_64)0
	
.LOOP $label$19:
	$11 = *($2)
	if ( ((uint_32)(($11 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$20 }
	$12 = ((int_64)((int_64)((int_64)$12 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$20
	$2 = ($2 + [1])
	$13 = ($13 + [-1])
	if ( $13 ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$13 = *($20 + [164])
	if ( ($13 == 0) ){ goto $label$15 }
	$2 = *(($20 + [168]))
	$12 = (int_64)0
	
.LOOP $label$21:
	$11 = *($2)
	if ( ((uint_32)(($11 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$22 }
	$12 = ((int_64)((int_64)((int_64)$12 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$22
	$2 = ($2 + [1])
	$13 = ($13 + [-1])
	if ( $13 ){ goto $label$21 }
	
.LABEL $label$17
	if ( $5 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$12 = (int_64)0
	goto $label$13 
	
.LABEL $label$15
	$12 = (int_64)0
	
.LABEL $label$14
	CALL $55(*(($20 + [168])))
	
.LABEL $label$13
	CALL $63($4, [0], ($6 + [1]))
	$5 = *(($0 + [72]))
	$11 = *(($0 + [76]))
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$23 }
	$2 = ($11 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$24:
	if ( ((int_64)*(*($2)) == (int_64)$12) ){ goto $label$23 }
	$11 = $2
	$13 = ($2 + [-24])
	$2 = $13
	if ( ((int_32)($13 + $6) != (int_32)[-24]) ){ goto $label$24 }
	
.LABEL $label$23
	$6 = ($0 + [48])
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$26 }
	$11 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)$6), [128])
	goto $label$25 
	
.LABEL $label$26
	$11 = [0]
	$2 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)4150067056621912064, $12)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$25 }
	$11 = CALL $24($6, $2)
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)$6), [128])
	
.LABEL $label$25
	$7 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($7, [192])
	CALL eosio_assert(((int_64)*($3) == (int_64)*($11 + [40])), [928])
	CALL eosio_assert(((int_64)*($1) != (int_64)*($11 + [8])), [960])
	*($20 + [148 align=4]) = (int_64)0
	*($20 + [144]) = [0]
	$4 = ( *($4 + [8]) ? ($4 + [1]) : (*($4) & [1]) )
	$2 = CALL strlen($4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$29 }
	*($20 + [144]) = ($2 << [1])
	$13 = (($20 + [144]) | [1])
	$14 = ($20 + [144])
	if ( $2 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$5 = (($2 + [16]) & [-16])
	$13 = CALL $54($5)
	*($20 + [144]) = ($5 | [1])
	*($20 + [152]) = $13
	*($20 + [148]) = $2
	$14 = ($20 + [144])
	
.LABEL $label$28
	CALL memcpy($13, $4, $2)
	
.LABEL $label$27
	*(($13 + $2)) = [0]
	$2 = *($20 + [144])
	$5 = ($2 & [1])
	if ( $5 ){ goto $label$35 }
	$13 = uint_32($2 >> [1])
	if ( ($13 == 0) ){ goto $label$33 }
	$2 = ($14 + [1])
	$17 = (int_64)0
	
.LOOP $label$36:
	$4 = *($2)
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$37 }
	$17 = ((int_64)((int_64)((int_64)$17 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$37
	$2 = ($2 + [1])
	$13 = ($13 + [-1])
	if ( $13 ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$35
	$13 = *($20 + [148])
	if ( ($13 == 0) ){ goto $label$32 }
	$2 = *(($20 + [152]))
	$17 = (int_64)0
	
.LOOP $label$38:
	$4 = *($2)
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$39 }
	$17 = ((int_64)((int_64)((int_64)$17 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$39
	$2 = ($2 + [1])
	$13 = ($13 + [-1])
	if ( $13 ){ goto $label$38 }
	
.LABEL $label$34
	if ( $5 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$17 = (int_64)0
	goto $label$30 
	
.LABEL $label$32
	$17 = (int_64)0
	
.LABEL $label$31
	CALL $55(*(($20 + [152])))
	
.LABEL $label$30
	$15 = *($11 + [16])
	$16 = *($3)
	*(($20 + [48])) = (int_64)0
	*((($20 + [24]) + [16])) = (int_64)0
	*((($20 + [24]) + [8])) = (int_64)0
	*($20 + [24]) = (int_64)0
	$13 = ($0 + [8])
	$2 = *(($0 + [36]))
	if ( ((int_32)$2 == (int_32)*(($0 + [32]))) ){ goto $label$41 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$13), [128])
	if ( $2 ){ goto $label$40 }
	$2 = ($20 + [24])
	goto $label$40 
	
.LABEL $label$41
	$2 = CALL db_find_i64(*($13), *(($0 + [16])), (int_64)4150496169072803840, (int_64)4150496169072803840)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$42 }
	$2 = CALL $35($13, $2)
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$13), [128])
	goto $label$40 
	
.LABEL $label$42
	$2 = ($20 + [24])
	
.LABEL $label$40
	*(($4 = (($20 + [112]) + [24]))) = *(($2 + [24]))
	*((($20 + [112]) + [16])) = *(($2 + [16]))
	*((($20 + [112]) + [8])) = *(($2 + [8]))
	*($20 + [112]) = *($2)
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000)) > (uint_32)*($4)), [976])
	$2 = ($20 + [140])
	CALL eosio_assert(((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000)) <= *($2)), [992])
	if ( ((int_64)((int_64)((int_64)*($3) * (int_64)((int_64)$12 & (int_64)255)) + (int_64)2333) != (int_64)$17) ){ goto $label$3 }
	*($20 + [128]) = *($1)
	$12 = (int_64)
	*($20 + [112]) = ((int_64)*($20 + [112]) + (int_64)((uint_64)$12($16 - $15)) / (uint_64)(int_64)100))
	*($20 + [120]) = ((int_64)*($20 + [120]) + (int_64)((uint_64)((int_64)$12 * (int_64)10) / (uint_64)(int_64)100))
	*($2) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [60])
	CALL $34($13, ($20 + [112]), *($0))
	$10 = ((int_64)*(($11 + [16])) + (int_64)((uint_64)((int_64)$12 * (int_64)89) / (uint_64)(int_64)100))
	$8 = *(($3 + [8]))
	$9 = *($0)
	$12 = (int_64)0
	$15 = (int_64)59
	$2 = [1008]
	$16 = (int_64)0
	
.LOOP $label$43:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$48 }
	$13 = *($2)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$47 }
	$13 = ($13 + [165])
	goto $label$46 
	
.LABEL $label$48
	$17 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$47
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$46
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$45
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$44
	$2 = ($2 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$43 }
	$12 = (int_64)0
	$15 = (int_64)59
	$2 = [64]
	$18 = (int_64)0
	
.LOOP $label$49:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$54 }
	$13 = *($2)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$53 }
	$13 = ($13 + [165])
	goto $label$52 
	
.LABEL $label$54
	$17 = (int_64)0
	if ( ((int_64)$12 == (int_64)11) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$53
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$52
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$51
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$50
	$2 = ($2 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$18 = ((int_64)$17 | (int_64)$18)
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$49 }
	$12 = (int_64)0
	$15 = (int_64)59
	$2 = [48]
	$19 = (int_64)0
	
.LOOP $label$55:
	if ( ((uint_64)$12 > (uint_64)(int_64)7) ){ goto $label$60 }
	$13 = *($2)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$59 }
	$13 = ($13 + [165])
	goto $label$58 
	
.LABEL $label$60
	$17 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$59
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$58
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$57
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$56
	$2 = ($2 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$19 = ((int_64)$17 | (int_64)$19)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$55 }
	*(($20 + [16])) = [0]
	*($20 + [8]) = (int_64)0
	$2 = CALL strlen([1024])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$63 }
	*($20 + [8]) = ($2 << [1])
	$13 = (($20 + [8]) | [1])
	if ( $2 ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$63
	$4 = (($2 + [16]) & [-16])
	$13 = CALL $54($4)
	*($20 + [8]) = ($4 | [1])
	*($20 + [16]) = $13
	*($20 + [12]) = $2
	
.LABEL $label$62
	CALL memcpy($13, [1024], $2)
	
.LABEL $label$61
	*(($13 + $2)) = [0]
	$12 = *(($11 + [8]))
	*((($20 + [24]) + [24])) = $8
	*(($13 = (($20 + [24]) + [36]))) = *($20 + [12 align=4])
	*($20 + [24]) = *($0)
	*($20 + [32]) = $12
	*($20 + [40]) = $10
	*($20 + [56]) = *($20 + [8])
	*($20 + [8]) = [0]
	*($20 + [12]) = [0]
	*((($20 + [8]) + [8])) = [0]
	*($20 + [72]) = $18
	*($20 + [80]) = $19
	*(($2 = CALL $54([16]))) = $9
	*($2 + [8]) = $16
	*((($20 + [72]) + [32])) = [0]
	$0 = ($2 + [16])
	*((($20 + [72]) + [24])) = $0
	*(($20 + [92])) = $0
	*($20 + [88]) = $2
	*($20 + [100]) = [0]
	*((($20 + [72]) + [36])) = [0]
	$2 = *($20 + [56])
	$13 = ( *($13) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($13 + [32])
	$12 = (CASTING uint_64)(uint_32 $13)
	$13 = ($20 + [100])
	
.LOOP $label$64:
	$2 = ($2 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$64 }
	if ( ($2 == 0) ){ goto $label$66 }
	CALL $23($13, $2)
	$13 = *(($20 + [104]))
	$2 = *(($20 + [100]))
	goto $label$65 
	
.LABEL $label$66
	$13 = [0]
	$2 = [0]
	
.LABEL $label$65
	*($20 + [180]) = $2
	*($20 + [176]) = $2
	*($20 + [184]) = $13
	*($20 + [192]) = ($20 + [176])
	*($20 + [200]) = ($20 + [24])
	CALL $43(($20 + [200]), ($20 + [192]))
	CALL $44(($20 + [176]), ($20 + [72]))
	$2 = *($20 + [176])
	CALL send_inline($2, (*($20 + [180]) - $2))
	$2 = *($20 + [176])
	if ( ($2 == 0) ){ goto $label$67 }
	*($20 + [180]) = $2
	CALL $55($2)
	
.LABEL $label$67
	$2 = *($20 + [100])
	if ( ($2 == 0) ){ goto $label$68 }
	*(($20 + [104])) = $2
	CALL $55($2)
	
.LABEL $label$68
	$2 = *($20 + [88])
	if ( ($2 == 0) ){ goto $label$69 }
	*(($20 + [92])) = $2
	CALL $55($2)
	
.LABEL $label$69
	if ( ((*(($20 + [56])) & [1]) == 0) ){ goto $label$70 }
	CALL $55(*(($20 + [64])))
	
.LABEL $label$70
	if ( ((*($20 + [8]) & [1]) == 0) ){ goto $label$71 }
	CALL $55(*(($20 + [16])))
	
.LABEL $label$71
	*($20 + [28]) = $3
	*($20 + [24]) = $1
	CALL eosio_assert($7, [256])
	CALL $45($6, $11, ($20 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($20 + [208])
	return (unreachable)
	
.LABEL $label$2
	CALL $56(($20 + [144]))
	
.LABEL $label$1
	CALL $56(($20 + [8]))
	(unreachable)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [112])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [24])) = (int_64)1398362884
	*($9 + [8]) = (int_64)0
	*($9) = (int_64)0
	*($9 + [16]) = (int_64)0
	CALL eosio_assert([1], [528])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$4
	CALL eosio_assert($7, [592])
	*(($9 + [40])) = [0]
	*($9 + [32]) = (int_64)0
	*($9 + [84]) = $5
	*($9 + [80]) = $5
	*($9 + [88]) = ($5 + $3)
	*($9 + [48]) = ($9 + [80])
	*($9 + [64]) = $9
	CALL $42(($9 + [64]), ($9 + [48]))
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($5)
	
.LABEL $label$9
	$6 = *(($9 + [8]))
	*(($9 + [76])) = *(($9 + [28]))
	*(($1 = (($9 + [64]) + [8]))) = *(($9 + [24]))
	*($9 + [68]) = *(($9 + [20]))
	$4 = *($9)
	*($9 + [64]) = *($9 + [16])
	CALL $67(($9 + [48]), ($9 + [32]))
	*((($9 + [80]) + [8])) = *($1)
	*($9 + [80]) = *($9 + [64])
	*($9 + [104]) = $4
	*($9 + [96]) = $6
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$10 }
	$8 = *((*($1) + $8))
	
.LABEL $label$10
	CALL void $1((int_32 ($9 + [104])), (int_32 ($9 + [96])), (int_32 ($9 + [80])), (int_32 ($9 + [48])), (int_32 $8))
	if ( ((*($9 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL $55(*($9 + [56]))
	
.LABEL $label$11
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL $55(*(($9 + [40])))
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [112])
	return [1]
}

void .FUNC _ZN12eoscrazytown4initEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	CALL require_auth(*($0))
	$4 = *($0)
	$5 = (int_64)0
	*(($8 + [24])) = (int_64)0
	*(($8 + [16])) = (int_64)0
	*(($8 + [8])) = (int_64)0
	*($8) = (int_64)0
	$1 = ($0 + [8])
	CALL $33(($8 + [32]), $1, $4, $8)
	*($8 + [32]) = (int_64)0
	*($8 + [40]) = (int_64)0
	$4 = (int_64)59
	$3 = [624]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	*($8 + [48]) = $6
	*($8 + [56]) = (int_64)6631478125597801920
	CALL $34($1, ($8 + [32]), *($0))
	*([0] + [4]) = ($8 + [64])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [304])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [352])
	$3 = *($3)
	*($1) = *($3)
	*(($4 = ($1 + [24]))) = *(($3 + [24]))
	*(($5 = ($1 + [16]))) = *(($3 + [16]))
	*(($6 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [416])
	*($7 + [40]) = ($7 + [32])
	*($7 + [36]) = $7
	*($7 + [32]) = $7
	*($7 + [48]) = ($7 + [32])
	*($7 + [60]) = $6
	*($7 + [56]) = $1
	*($7 + [64]) = $5
	*($7 + [68]) = $4
	*($7 + [72]) = ($1 + [28])
	CALL $38(($7 + [56]), ($7 + [48]))
	CALL db_update_i64(*($1 + [36]), $2, $7, [32])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4150496169072803840) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)4150496169072803841
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [80])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [640])
	*(($4 = CALL $54([48])) + [32]) = $1
	$3 = *($3)
	*($4) = *($3)
	*(($5 = ($4 + [28]))) = *(($3 + [28]))
	*(($6 = ($4 + [24]))) = *(($3 + [24]))
	*(($4 + [20])) = *(($3 + [20]))
	*(($7 = ($4 + [16]))) = *(($3 + [16]))
	*(($4 + [12])) = *(($3 + [12]))
	*(($8 = ($4 + [8]))) = *(($3 + [8]))
	*(($4 + [4])) = *(($3 + [4]))
	*($9 + [40]) = ($9 + [32])
	*($9 + [36]) = $9
	*($9 + [32]) = $9
	*($9 + [48]) = ($9 + [32])
	*($9 + [60]) = $8
	*($9 + [56]) = $4
	*($9 + [64]) = $7
	*($9 + [68]) = $6
	*($9 + [72]) = $5
	CALL $38(($9 + [56]), ($9 + [48]))
	*($4 + [36]) = CALL db_store_i64(*($1 + [8]), (int_64)4150496169072803840, $2, (int_64)4150496169072803840, $9, [32])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4150496169072803840) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4150496169072803841
	
.LABEL $label$1
	*($9 + [56]) = $4
	*($9) = (int_64)4150496169072803840
	$5 = *($4 + [36])
	*($9 + [32]) = $5
	$3 = *(($1 + [28]))
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4150496169072803840
	*($3 + [16]) = $5
	*($9 + [56]) = [0]
	*($3) = $4
	*(($1 + [28])) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $39(($1 + [24]), ($9 + [56]), $9, ($9 + [32]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [56])
	*($9 + [56]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $55($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [80])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$0), [128])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4150496169072803840, (int_64)4150496169072803840)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $35($0, $3)
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$0), [128])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [256])
	CALL $36($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $37($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [496])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [20]) = $4
	*($7 + [16]) = $4
	*($7 + [24]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($5 = CALL $54([48])) + [32]) = $0
	*($7 + [32]) = ($7 + [16])
	*($7 + [44]) = ($5 + [8])
	*($7 + [40]) = $5
	*($7 + [48]) = ($5 + [16])
	*($7 + [52]) = ($5 + [24])
	*($7 + [56]) = ($5 + [28])
	CALL $40(($7 + [40]), ($7 + [32]))
	*($5 + [36]) = $1
	*($7 + [32]) = $5
	*($7 + [40]) = (int_64)4150496169072803840
	$6 = *($5 + [36])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)4150496169072803840
	*($4 + [16]) = $6
	*($7 + [32]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $39(($0 + [24]), ($7 + [32]), ($7 + [40]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $55($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [64])
	return $5
}

int_32 .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [52]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [832])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4150067056621912064)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [768])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [768])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $24(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = *(($1 + [28]))
	if ( ((int_32)$4 == (int_32)*($1 + [24])) ){ goto $label$4 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$1), [128])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)4150496169072803840, (int_64)4150496169072803840)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $35($1, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$1), [128])
	
.LABEL $label$3
	*($0) = *($4)
	*(($0 + [24])) = *(($4 + [24]))
	*(($0 + [16])) = *(($4 + [16]))
	*(($0 + [8])) = *(($4 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($5 + [8]) = $3
	CALL $41($5, $1, $2, ($5 + [8]))
	$1 = *($5 + [4])
	*($0) = *($1)
	*(($0 + [28])) = *(($1 + [28]))
	*(($0 + [24])) = *(($1 + [24]))
	*(($0 + [20])) = *(($1 + [20]))
	*(($0 + [16])) = *(($1 + [16]))
	*(($0 + [12])) = *(($1 + [12]))
	*(($0 + [8])) = *(($1 + [8]))
	*(($0 + [4])) = *(($1 + [4]))
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [48])
	$13 = $14
	*([0] + [4]) = $14
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [304])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [352])
	$3 = *($1)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [624]
	$11 = (int_64)0
	
.LOOP $label$1:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	*($1 + [8]) = $11
	$10 = *(*($2))
	*($1 + [16]) = $10
	*($1 + [40]) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 $10) * (float_64)(float_64)1.35))
	CALL eosio_assert([1], [416])
	$8 = *($1 + [24])
	$4 = ( *(($1 + [28])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($4 + [32])
	$10 = (CASTING uint_64)(uint_32 $4)
	$2 = ($1 + [24])
	$7 = ($1 + [40])
	$6 = ($1 + [16])
	$5 = ($1 + [8])
	
.LOOP $label$5:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($8 <= [513]) ){ goto $label$7 }
	$4 = CALL malloc($8)
	goto $label$6 
	
.LABEL $label$7
	$4 = ($14 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$6
	*($13 + [4]) = $4
	*($13) = $4
	*($13 + [8]) = ($4 + $8)
	*($13 + [16]) = $13
	*($13 + [28]) = $5
	*($13 + [32]) = $6
	*($13 + [36]) = $2
	*($13 + [40]) = $7
	*($13 + [24]) = $1
	CALL $26(($13 + [24]), ($13 + [16]))
	CALL db_update_i64(*($1 + [52]), (int_64)0, $4, $8)
	if ( ($8 <= [513]) ){ goto $label$8 }
	CALL free($4)
	
.LABEL $label$8
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($13 + [48])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [48])
	$13 = $14
	*([0] + [4]) = $14
	$2 = *($0)
	$8 = *(*($0 + [4]))
	$3 = ($8 + [64])
	$10 = *($3)
	if ( ((int_64)$10 != (int_64)-1) ){ goto $label$1 }
	$10 = (int_64)0
	$7 = ($8 + [48])
	$6 = CALL db_lowerbound_i64(*($7), *(($8 + [56])), (int_64)4150067056621912064, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $24($7, $6)
	*($13 + [28]) = [0]
	*($13 + [24]) = $7
	$10 = *(*(CALL $32(($13 + [24])) + [4]))
	$10 = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($8 + [64])) = $10
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($10 <= (int_64)-2), [704])
	*($1) = *($3)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [624]
	$11 = (int_64)0
	
.LOOP $label$3:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$4 }
	$3 = *($8)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$3 = ($3 + [165])
	goto $label$5 
	
.LABEL $label$6
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$4
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$3 }
	*($1 + [16]) = (int_64)1000
	*($1 + [8]) = $11
	*($1 + [40]) = (int_64)1350
	$8 = *($1 + [24])
	$3 = ( *(($1 + [28])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($3 + [32])
	$10 = (CASTING uint_64)(uint_32 $3)
	$7 = ($1 + [24])
	$6 = ($1 + [40])
	$5 = ($1 + [16])
	$4 = ($1 + [8])
	
.LOOP $label$7:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$7 }
	if ( ($8 <= [513]) ){ goto $label$9 }
	$3 = CALL malloc($8)
	goto $label$8 
	
.LABEL $label$9
	$3 = ($14 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$8
	*($13 + [4]) = $3
	*($13) = $3
	*($13 + [8]) = ($3 + $8)
	*($13 + [16]) = $13
	*($13 + [28]) = $4
	*($13 + [24]) = $1
	*($13 + [32]) = $5
	*($13 + [36]) = $7
	*($13 + [40]) = $6
	CALL $26(($13 + [24]), ($13 + [16]))
	$10 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)4150067056621912064, *(*($0 + [8])), $10, $3, $8)
	if ( ($8 <= [513]) ){ goto $label$10 }
	CALL free($3)
	
.LABEL $label$10
	if ( (uint_64)($10 <= *($2 + [16])) ){ goto $label$11 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($13 + [48])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $54($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $55($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $54(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $55($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0)
	$2 = ($4 & [1])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ((*($0) & [-2]) + [-1])
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = [10]
	$4 = uint_32($4 >> [1])
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $62($0, $3, [1], $3, $3, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($4 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($4 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $4)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $63 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $64 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $51([1068], $0)
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [480])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [480])
	CALL memcpy(*($0 + [4]), $2, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9558]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9560])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9558]) = [1]
	$7 = ($7 << [16])
	*([0] + [9560]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9560])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9560]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9558]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9558]) = [1]
	$3 = ($3 << [16])
	*([0] + [9560]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9560])
	
.LABEL $label$8
	*([0] + [9560]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9452])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9260]
	$1 = (((int_32)$2 * (int_32)[12]) + [9260])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9564])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $55 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $56 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $58($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}