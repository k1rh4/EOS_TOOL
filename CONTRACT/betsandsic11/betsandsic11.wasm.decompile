(data (i32.const 8192) "Invalid hex character\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8300) "invalid sha256\00")
(data (i32.const 8315) "invalid sha1\00")
(data (i32.const 8328) "invalid first pos\00stoull\00")
(data (i32.const 8353) "parse memo error\00")
(data (i32.const 17080) "\04EOS\00\00\00\00\04EOS\00\00\00\00\00\a6\824\03\ea0U\e8\03\00\00\00\00\00\00\01\00\00\00\00\00\00\00\04SAND\00\00\00\04SAND\00\00\000\15\a4\b9^\96\a6\c1\a0\86\01\00\00\00\00\00\02\00\00\00\00\00\00\00\08EBTC\00\00\00\08EBTC\00\00\00\80\a7\824+W\b3;\10\'\00\00\00\00\00\00\03\00\00\00\00\00\00\00\08EETH\00\00\00\08EETH\00\00\00\80\a7\824+W\b3;\a0\86\01\00\00\00\00\00\04\00\00\00\00\00\00\00\08EUSD\00\00\00\08EUSD\00\00\00\80\a7\824+W\b3;\80\96\98\00\00\00\00\00\05\00\00\00\00\00\00\00")
(data (i32.const 17280) "transfer\00")
(data (i32.const 17289) "eosio.token\00: no conversion\00")
(data (i32.const 17317) "sandgrptoken\00: out of range\00")
(data (i32.const 17345) "bitpietokens\00")
(data (i32.const 17358) "invalid token transfer\00")
(data (i32.const 17381) "betsandrou22\00")
(data (i32.const 17394) "game not exist\00")
(data (i32.const 17409) "game not found\00")
(data (i32.const 17424) "game state error\00")
(data (i32.const 17441) "order not exist\00")
(data (i32.const 17457) "order not found\00")
(data (i32.const 17473) "odds not found\00")
(data (i32.const 17488) "betsandfunds\00")
(data (i32.const 17501) "call transfer .......\00")
(data (i32.const 17523) "Transfer bonus\00")
(data (i32.const 17538) "referrer can not be self\00")
(data (i32.const 17563) "quantity is not equal with bet list amount\00")
(data (i32.const 17606) "invalid memo\00")
(data (i32.const 17619) "no seed hash\00")
(data (i32.const 17632) "no expiration\00")
(data (i32.const 17646) "offertype error\00")
(data (i32.const 17662) "server side error! need more seed hash!\00")
(data (i32.const 17702) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 17753) "error reading iterator\00")
(data (i32.const 17776) "read\00")
(data (i32.const 17781) "next primary key in table is at autoincrement limit\00")
(data (i32.const 17833) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 17887) "cannot decrement iterator at beginning of table\00")
(data (i32.const 17935) "cannot pass end iterator to modify\00")
(data (i32.const 17970) "object passed to modify is not in multi_index\00")
(data (i32.const 18016) "cannot modify objects in table of another contract\00")
(data (i32.const 18067) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18126) "write\00")
(data (i32.const 18132) "cannot create objects in table of another contract\00")
(data (i32.const 18183) "hash not found\00")
(data (i32.const 18198) "object passed to erase is not in multi_index\00")
(data (i32.const 18243) "cannot erase objects in table of another contract\00")
(data (i32.const 18293) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18347) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 18396) "invalid symbol name\00")
(data (i32.const 18416) "divide by zero\00")
(data (i32.const 18431) "signed division overflow\00")
(data (i32.const 18456) "multiplication overflow\00")
(data (i32.const 18480) "multiplication underflow\00")
(data (i32.const 18505) "attempt to add asset with different symbol\00")
(data (i32.const 18548) "addition underflow\00")
(data (i32.const 18567) "addition overflow\00")
(data (i32.const 18585) "fund unlock error\00")
(data (i32.const 18603) "attempt to subtract asset with different symbol\00")
(data (i32.const 18651) "subtraction underflow\00")
(data (i32.const 18673) "subtraction overflow\00")
(data (i32.const 18695) "|\00")
(data (i32.const 18697) "-\00")
(data (i32.const 18699) "sicbo\00")
(data (i32.const 18708) "\18I\00\00")
(data (i32.const 18712) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 18745) "token not allowed\00")
(data (i32.const 18763) "quantity invalid\00")
(data (i32.const 18780) "stake quantity must be greater than the min stake\00")
(data (i32.const 18830) "offerbet is null\00")
(data (i32.const 18847) "need gameid\00")
(data (i32.const 18859) "gameid isn\'t decimal num\00")
(data (i32.const 18884) "need referrer\00")
(data (i32.const 18898) "need user_seed_hash\00")
(data (i32.const 18918) "need nonce\00")
(data (i32.const 18929) "error when parsing nonce data\00")
(data (i32.const 18959) "need bet list\00")
(data (i32.const 18973) "betlist format error\00")
(data (i32.const 18994) "play isn\'t decimal num\00")
(data (i32.const 19017) "parsing multiple error\00")
(data (i32.const 19040) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 19099) "cannot pass end iterator to erase\00")
(data (i32.const 19133) "cannot increment end iterator\00")
(data (i32.const 19163) "odd not found\00")
(data (i32.const 19177) "offered overflow, expected earning is greater than the maximum bonus, maximum bonus equal total / 20\00")
(data (i32.const 19278) "offered overflow, expected earning is greater than the maximum bonus, maximum bonus equal total / 10\00")
(data (i32.const 19379) "offered overflow, expected earning is greater than the maximum bonus, maximum bonus equal total / 5\00")
(data (i32.const 19479) "fund pool overdraw\00")
(data (i32.const 19498) "unable to find key\00")
(data (i32.const 19517) "get\00")
(data (i32.const 19536) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 19793) "\00\01\02\04\07\03\06\05\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$1 (param i32 i32 i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "memset" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$4 (param i32 i32)))
(import "env" "memmove" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "ripemd160" (func $fimport$6 (param i32 i32 i32)))
(import "env" "eosio_exit" (func $fimport$7 (param i32)))
(import "env" "action_data_size" (func $fimport$8 (result i32)))
(import "env" "read_action_data" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "prints" (func $fimport$10 (param i32)))
(import "env" "current_time" (func $fimport$11 (result i64)))
(import "env" "send_inline" (func $fimport$12 (param i32 i32)))
(import "env" "require_auth" (func $fimport$13 (param i64)))
(import "env" "db_find_i64" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$15 (result i64)))
(import "env" "db_update_i64" (func $fimport$16 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$17 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$18 (param i64)))
(import "env" "__multi3" (func $fimport$19 (param i32 i64 i64 i64 i64)))
(import "env" "db_idx64_find_primary" (func $fimport$20 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$21 (param i32 i64 i32)))
(import "env" "db_idx64_store" (func $fimport$22 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$24 (param i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$25 (param i64) (result i32)))
(import "env" "db_remove_i64" (func $fimport$26 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$27 (param i32)))
(import "env" "db_get_i64" (func $fimport$28 (param i32 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$29 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$30 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$31 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$32 (param i32 i32) (result i32)))
(import "env" "abort" (func $fimport$33))
(import "env" "__unordtf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$40 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$41 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$42 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$43 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$44 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$45 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$46 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$47 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$48 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$49 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$50 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$51 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$52 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $6))
(export "_Znwj" (func $126))
(export "_ZdlPv" (func $128))
(export "_Znaj" (func $127))
(export "_ZdaPv" (func $129))
(table $0 11 11 anyfunc)
(elem (i32.const 1) $7 $10 $12 $14 $16 $17 $19 $21 $23 $4)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19802))
(global $global$2 i32 (i32.const 19802))


void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [480])
	$global$0 = $3
	CALL memory()
	*(($3 + [160])) = $0
	*(($3 + [168])) = (int_64)-1
	$4 = (int_64)0
	*(($3 + [176])) = (int_64)0
	*(($3 + [184])) = [0]
	*(($3 + [200])) = $0
	*(($3 + [208])) = (int_64)-1
	*(($3 + [216])) = (int_64)0
	*(($3 + [224])) = [0]
	*(($3 + [240])) = $0
	*(($3 + [248])) = (int_64)-1
	*(($3 + [256])) = (int_64)0
	*(($3 + [264])) = [0]
	*(($3 + [268])) = [0]
	*($3 + [152]) = $0
	*($3 + [144]) = $0
	*($3 + [192]) = $0
	*($3 + [232]) = $0
	*($3 + [272]) = $0
	*(($3 + [288])) = (int_64)-1
	*(($3 + [280])) = $0
	*(($3 + [296])) = (int_64)0
	*(($3 + [304])) = [0]
	*(($3 + [320])) = $0
	*(($3 + [328])) = (int_64)-1
	*(($3 + [336])) = (int_64)0
	*(($3 + [344])) = [0]
	*(($3 + [360])) = $0
	*(($3 + [368])) = (int_64)-1
	*(($3 + [376])) = (int_64)0
	*(($3 + [384])) = [0]
	*(($3 + [400])) = $0
	*(($3 + [408])) = (int_64)-1
	*(($3 + [416])) = [0]
	*($3 + [312]) = $0
	*($3 + [352]) = $0
	*($3 + [392]) = $0
	*(($3 + [420])) = (int_64)0
	*(($3 + [440])) = $0
	*(($3 + [448])) = (int_64)-1
	*(($3 + [456])) = (int_64)0
	*(($3 + [464])) = [0]
	*(($3 + [468])) = [0]
	*($3 + [432]) = $0
	*($3 + [472]) = [500]
	$5 = (int_64)59
	$6 = [17280]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$6 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$8 = ($8 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$9 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17289]
	$7 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$15 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$8 = ($8 + [-91])
	goto $label$13 
	
.LABEL $label$15
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$11
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$10 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$17 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [17317]
	$7 = (int_64)0
	
.LOOP $label$18:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$19 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$8 = ($8 + [-91])
	goto $label$20 
	
.LABEL $label$21
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$19
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$18 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$17 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [17345]
	$7 = (int_64)0
	
.LOOP $label$22:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$23 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$8 = ($8 + [-91])
	goto $label$24 
	
.LABEL $label$25
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$23
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$22 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$16 }
	
.LABEL $label$17
	*($3 + [140]) = [0]
	*($3 + [136]) = [1]
	*($3) = *($3 + [136])
	CALL $8(($3 + [144]), $3)
	goto $label$8 
	
.LABEL $label$16
	CALL eosio_assert([0], [17358])
	
.LABEL $label$9
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $9(($3 + [144]))
	CALL $151([0])
	$global$0 = ($3 + [480])
	return (unreachable)
	
.LABEL $label$7
	if ( ((int_64)$2 > (int_64)3626193066236313599) ){ goto $label$33 }
	if ( ((int_64)$2 > (int_64)-4994024814571159553) ){ goto $label$32 }
	if ( ((int_64)$2 == (int_64)-6749910679009886208) ){ goto $label$30 }
	if ( ((int_64)$2 != (int_64)-5003315193367756800) ){ goto $label$26 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [2]
	*($3 + [24]) = *($3 + [112])
	CALL $11(($3 + [144]), ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$33
	if ( ((int_64)$2 > (int_64)5031766159042707455) ){ goto $label$31 }
	if ( ((int_64)$2 == (int_64)3626193066236313600) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)4923678699809669120) ){ goto $label$26 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [3]
	*($3 + [64]) = *($3 + [72])
	CALL $13(($3 + [144]), ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$32
	if ( ((int_64)$2 == (int_64)-4994024814571159552) ){ goto $label$28 }
	if ( ((int_64)$2 != (int_64)-4992623616599261184) ){ goto $label$26 }
	*($3 + [100]) = [0]
	*($3 + [96]) = [4]
	*($3 + [40]) = *($3 + [96])
	CALL $15(($3 + [144]), ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$31
	if ( ((int_64)$2 == (int_64)5031766159042707456) ){ goto $label$27 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$26 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [5]
	*($3 + [48]) = *($3 + [88])
	CALL $13(($3 + [144]), ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$30
	*($3 + [132]) = [0]
	*($3 + [128]) = [6]
	*($3 + [8]) = *($3 + [128])
	CALL $18(($3 + [144]), ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$29
	*($3 + [84]) = [0]
	*($3 + [80]) = [7]
	*($3 + [56]) = *($3 + [80])
	CALL $20(($3 + [144]), ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$28
	*($3 + [108]) = [0]
	*($3 + [104]) = [8]
	*($3 + [32]) = *($3 + [104])
	CALL $22(($3 + [144]), ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$27
	*($3 + [124]) = [0]
	*($3 + [120]) = [9]
	*($3 + [16]) = *($3 + [120])
	CALL $24(($3 + [144]), ($3 + [16]))
	
.LABEL $label$26
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $170 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $168([8680], $1)
	CALL memset($0, [0], $1)
	return $0
}

void .FUNC $171 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17064])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16872]
	$3 = (((int_32)$1 * (int_32)[12]) + [16872])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$5 = ($global$0 - [640])
	$global$0 = $5
	CALL prints([17501])
	$6 = *($0)
	if ( ((int_64)*($1) == (int_64)$6) ){ goto $label$1 }
	if ( ((int_64)*($2) != (int_64)$6) ){ goto $label$1 }
	$8 = *($4)
	$7 = CALL $164([17523])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$2 }
	if ( (CALL $140($4, [0], [-1], [17523], $7) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $26($0, $3)
	*($5 + [520]) = (int_64)0
	$6 = *($3 + [8])
	*($5 + [528]) = $6
	CALL eosio_assert([1], [18347])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$6 = $9
	$7 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$6 = $9
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $7 ){ goto $label$7 }
	$7 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [18396])
	$7 = CALL $27(($5 + [336]))
	*($5 + [193]) = [0]
	*($5 + [184]) = (int_64)0
	*($5 + [304]) = [0]
	*($5 + [306]) = [0]
	*($5 + [312]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($5 + [320]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($5 + [328]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$8 = CALL $131(($5 + [144]), $4)
	CALL $28(($5 + [160]), $0, $8, ($5 + [600]), ($5 + [592]), ($5 + [584]), ($5 + [544]), ($5 + [536]), ($5 + [520]))
	if ( ((*($8) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$8
	CALL eosio_assert(((int_64)*($5 + [592]) != (int_64)*($1)), [17538])
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)*((($5 + [520]) + [8]))), [19040])
	CALL eosio_assert(((int_64)*($3) == (int_64)*($5 + [520])), [17563])
	CALL $29($0, $1, ($5 + [520]), ($5 + [600]), ($5 + [592]), ($5 + [584]), ($5 + [544]), ($5 + [536]), ($5 + [160]), $7, ($5 + [176]))
	$9 = *($0)
	$6 = (int_64)6
	
.LOOP $label$9:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$9 }
	$6 = (int_64)7
	
.LOOP $label$10:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$10 }
	*(($5 + [24])) = *(($3 + [8]))
	*(($5 + [56])) = *((($5 + [176]) + [72]))
	*(($5 + [64])) = *((($5 + [176]) + [80]))
	*(($5 + [72])) = *(($5 + [264]))
	*($5) = *($1)
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($5 + [32]) = *($5 + [176])
	*($5 + [48]) = *($5 + [240])
	$7 = CALL $131(($5 + [80]), $4)
	*($5 + [112]) = (int_64)-5003315193367756800
	*($5 + [104]) = $9
	*(($8 = CALL _Znwj([16]))) = $9
	*($8 + [8]) = (int_64)3617214756542218240
	*(($5 + [140])) = [0]
	$10 = ($8 + [16])
	*((($5 + [104]) + [24])) = $10
	*(($5 + [124])) = $10
	*($5 + [120]) = $8
	*($5 + [132 align=4]) = (int_64)0
	$8 = *($7)
	$7 = ( *(($5 + [84])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($7 + [72])
	$6 = (CASTING uint_64)(uint_32 $7)
	$7 = ($5 + [132])
	
.LOOP $label$11:
	$8 = ($8 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$11 }
	if ( ($8 == 0) ){ goto $label$13 }
	CALL $30($7, $8)
	$7 = *(($5 + [136]))
	$8 = *(($5 + [132]))
	goto $label$12 
	
.LABEL $label$13
	$7 = [0]
	$8 = [0]
	
.LABEL $label$12
	*($5 + [628]) = $8
	*($5 + [624]) = $8
	*($5 + [632]) = $7
	*($5 + [608]) = ($5 + [624])
	*($5 + [616]) = $5
	CALL $31(($5 + [616]), ($5 + [608]))
	CALL $32(($5 + [624]), ($5 + [104]))
	$8 = *($5 + [624])
	CALL send_inline($8, (*($5 + [628]) - $8))
	$8 = *($5 + [624])
	if ( ($8 == 0) ){ goto $label$14 }
	*($5 + [628]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$14
	$8 = *($5 + [132])
	if ( ($8 == 0) ){ goto $label$15 }
	*(($5 + [136])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$15
	$8 = *($5 + [120])
	if ( ($8 == 0) ){ goto $label$16 }
	*(($5 + [124])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$16
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($5 + [88])))
	
.LABEL $label$17
	CALL $33(($5 + [160]), *($5 + [164]))
	
.LABEL $label$1
	$global$0 = ($5 + [640])
}

void .FUNC $4 (int_32 $0)
{
	CALL $5([8372], *([0] + [8376]))
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $5($0, *($1))
	CALL $5($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $3 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [16])
	$global$0 = $5
	CALL eosio_assert(((int_32)*($3) != (int_32)[-1]), [8328])
	$2 = CALL $139($0, *($2), *($3))
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	$3 = *($3)
	CALL $132($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$2 }
	*($1) = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)*($4) ^ (int_32)[1]), [8353])
	$global$0 = ($5 + [16])
	return $2
	
.LABEL $label$2
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$1
	CALL $135($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	$global$0 = ($5 + [16])
	return $2
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17753])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $167($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([192])
	CALL $27($5)
	*($5 + [168]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [64])
	*($3 + [60]) = ($5 + [96])
	*($3 + [64]) = ($5 + [104])
	*($3 + [68]) = ($5 + [105])
	*($3 + [72]) = ($5 + [106])
	*($3 + [76]) = ($5 + [112])
	*($3 + [80]) = ($5 + [128])
	*($3 + [84]) = ($5 + [144])
	*($3 + [88]) = ($5 + [152])
	*($3 + [92]) = ($5 + [160])
	CALL $101(($3 + [32]), ($3 + [24]))
	*($5 + [176]) = [-1]
	*($5 + [172]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $102(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $171($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC memory ()
{
	CALL $125()
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [17776])
	CALL memcpy(($4 + [16]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [17776])
	CALL memcpy(($4 + [48]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($2 + [8]) = $4
	CALL $121(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [17776])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [17776])
	CALL memcpy(($0 + [48]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	CALL $68(*($1), ($0 + [80]))
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [18198])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [18243])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18293])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [224])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [18132])
	*(($5 = CALL _Znwj([176])) + [17]) = [0]
	*($5 + [8]) = (int_64)0
	*($5 + [128]) = [0]
	*($5 + [130]) = [0]
	*($5 + [136]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($5 + [144]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = CALL current_time()
	*($5 + [160]) = $1
	*($5 + [152]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$3 = *($3)
	*($5) = *($3)
	*($5 + [16]) = *($3 + [16])
	*(($5 + [88])) = *(($3 + [88]))
	*(($5 + [80])) = *(($3 + [80]))
	*(($5 + [72])) = *(($3 + [72]))
	*($5 + [64]) = *($3 + [64])
	*($5 + [152]) = *($3 + [152])
	*($4 + [152]) = ($4 + [129])
	*($4 + [148]) = $4
	*($4 + [144]) = $4
	*($4 + [160]) = ($4 + [144])
	*($4 + [172]) = ($5 + [8])
	*($4 + [168]) = $5
	*($4 + [176]) = ($5 + [16])
	*($4 + [180]) = ($5 + [17])
	*($4 + [184]) = ($5 + [32])
	*($4 + [188]) = ($5 + [64])
	*($4 + [192]) = ($5 + [96])
	*($4 + [196]) = ($5 + [128])
	*($4 + [200]) = ($5 + [129])
	*($4 + [204]) = ($5 + [130])
	*($4 + [208]) = ($5 + [136])
	*($4 + [212]) = ($5 + [144])
	*($4 + [216]) = ($5 + [152])
	CALL $53(($4 + [168]), ($4 + [160]))
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)7035937633859534848, $2, $6, $4, [129])
	*($5 + [164]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [168]) = $5
	$6 = *($5)
	*($4) = $6
	*($4 + [144]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [168]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $107(($1 + [24]), ($4 + [168]), $4, ($4 + [144]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [168])
	*($4 + [168]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [224])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4229865212519383040, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)$7), [17702])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $75($7, CALL $fimport$14(*($7), *($7 + [8]), (int_64)4229865212519383040, $6))
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)$7), [17702])
	
.LABEL $label$2
	*(($4 + [96])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	*($0 + [4 align=4]) = (int_64)0
	$5 = ($0 + [4])
	*($0) = $5
	$6 = ($0 + [8])
	$7 = (($3 + $2) + $4)
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$12 }
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$12 }
	$8 = *($5)
	if ( ($8 == 0) ){ goto $label$11 }
	*(($8 + [20])) = [1]
	goto $label$2 
	
.LABEL $label$12
	$12 = ($7 + [-4])
	if ( ((uint_32)$12 > (uint_32)[6]) ){ goto $label$15 }
	$8 = *($5)
	if ( $8 ){ goto $label$14 }
	*(($8 = CALL _Znwj([24]))) = (int_64)0
	*($8 + [16 align=4]) = (int_64)0
	*(($0 + [4])) = $8
	*($8 + [8]) = $5
	$9 = *(*($0))
	if ( ($9 == 0) ){ goto $label$16 }
	*($0) = $9
	
.LABEL $label$16
	CALL $49(*($5), $8)
	*($6) = (*($6) + [1])
	goto $label$14 
	
.LABEL $label$15
	if ( ((uint_32)($7 + [-11]) > (uint_32)[6]) ){ goto $label$13 }
	$8 = *($5)
	if ( $8 ){ goto $label$14 }
	*(($8 = CALL _Znwj([24]))) = (int_64)0
	*($8 + [16 align=4]) = (int_64)1
	*(($0 + [4])) = $8
	*($8 + [8]) = $5
	$9 = *(*($0))
	if ( ($9 == 0) ){ goto $label$17 }
	*($0) = $9
	
.LABEL $label$17
	CALL $49(*($5), $8)
	*($6) = (*($6) + [1])
	
.LABEL $label$14
	*(($8 + [20])) = [1]
	
.LABEL $label$13
	$8 = *($5)
	if ( ($7 & [1]) ){ goto $label$18 }
	if ( ($8 == 0) ){ goto $label$10 }
	$9 = $5
	$11 = *($8 + [16])
	if ( ((int_32)$11 < (int_32)[3]) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$18
	if ( ($8 == 0) ){ goto $label$9 }
	$9 = $5
	$11 = *($8 + [16])
	if ( ((int_32)$11 < (int_32)[4]) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$11
	*(($8 = CALL _Znwj([24]))) = (int_64)0
	*(($0 + [4])) = $8
	*($8 + [20]) = [0]
	*($8 + [8]) = $5
	*($8 + [16]) = ((((int_32)$3 * (int_32)[10]) + ((int_32)$2 * (int_32)[100])) + $4)
	$9 = *(*($0))
	if ( ($9 == 0) ){ goto $label$19 }
	*($0) = $9
	
.LABEL $label$19
	CALL $49(*($5), $8)
	*($8 + [20]) = [1]
	*($6) = (*($6) + [1])
	$8 = *($5)
	if ( ($8 == 0) ){ goto $label$2 }
	$9 = $5
	$11 = *($8 + [16])
	if ( ((int_32)$11 < (int_32)[778]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$10
	$8 = $5
	$9 = $5
	$10 = [130]
	goto $label$1 
	
.LABEL $label$9
	$8 = $5
	$9 = $5
	$10 = [4]
	goto $label$1 
	
.LABEL $label$8
	$10 = [124]
	goto $label$1 
	
.LABEL $label$7
	$10 = [2]
	goto $label$1 
	
.LABEL $label$6
	$10 = [135]
	goto $label$1 
	
.LABEL $label$5
	$10 = [128]
	goto $label$1 
	
.LABEL $label$4
	$10 = [146]
	goto $label$1 
	
.LABEL $label$3
	$10 = [139]
	goto $label$1 
	
.LABEL $label$2
	$8 = $5
	$9 = $5
	$10 = [141]
	
.LABEL $label$1
	
.LOOP $label$20:
	goto $label$293 
	
.LABEL $label$314
	$11 = *($9)
	if ( $11 ){ goto $label$24 }
	$10 = [143]
	goto $label$20 
	
.LABEL $label$313
	*(($11 = CALL _Znwj([24])) + [16 align=4]) = (int_64)777
	*($11) = (int_64)0
	*($11 + [8]) = $8
	*($9) = $11
	$8 = $11
	$12 = *(*($0))
	if ( ($12 == 0) ){ goto $label$21 }
	$10 = [144]
	goto $label$20 
	
.LABEL $label$312
	*($0) = $12
	$8 = *($9)
	$10 = [145]
	goto $label$20 
	
.LABEL $label$311
	CALL $49(*($5), $8)
	*($6) = (*($6) + [1])
	$10 = [142]
	goto $label$20 
	
.LABEL $label$310
	*(($11 + [20])) = [1]
	if ( ((uint_32)($7 + [-4]) > (uint_32)[13]) ){ goto $label$134 }
	$10 = [107]
	goto $label$20 
	
.LABEL $label$309
	$8 = *($5)
	if ( ($8 == 0) ){ goto $label$48 }
	$10 = [108]
	goto $label$20 
	
.LABEL $label$308
	$9 = $5
	$11 = *($8 + [16])
	if ( ((int_32)$7 >= (int_32)$11) ){ goto $label$46 }
	goto $label$47 
	
.LABEL $label$307
	$9 = $8
	$8 = $11
	$11 = *($8 + [16])
	if ( ((int_32)$7 >= (int_32)$11) ){ goto $label$152 }
	$10 = [118]
	goto $label$20 
	
.LABEL $label$306
	$11 = *($8)
	if ( $11 ){ goto $label$38 }
	goto $label$39 
	
.LABEL $label$305
	if ( ((int_32)$11 >= (int_32)$7) ){ goto $label$44 }
	$10 = [115]
	goto $label$20 
	
.LABEL $label$304
	$9 = ($8 + [4])
	$11 = *($8 + [4])
	if ( ($11 == 0) ){ goto $label$45 }
	$10 = [116]
	goto $label$20 
	
.LABEL $label$303
	$8 = $9
	goto $label$151 
	
.LABEL $label$302
	$9 = $8
	$8 = $11
	$11 = *($8 + [16])
	if ( ((int_32)$11 < (int_32)[3]) ){ goto $label$148 }
	$10 = [135]
	goto $label$20 
	
.LABEL $label$301
	$11 = *($8)
	if ( $11 ){ goto $label$34 }
	goto $label$35 
	
.LABEL $label$300
	if ( ((int_32)$11 == (int_32)[2]) ){ goto $label$33 }
	$10 = [129]
	goto $label$20 
	
.LABEL $label$299
	$9 = ($8 + [4])
	$11 = *($8 + [4])
	if ( ($11 == 0) ){ goto $label$36 }
	$10 = [126]
	goto $label$20 
	
.LABEL $label$298
	$8 = $9
	goto $label$147 
	
.LABEL $label$297
	$9 = $8
	$8 = $11
	$11 = *($8 + [16])
	if ( ((int_32)$11 < (int_32)[4]) ){ goto $label$146 }
	$10 = [124]
	goto $label$20 
	
.LABEL $label$296
	$11 = *($8)
	if ( $11 ){ goto $label$142 }
	goto $label$143 
	
.LABEL $label$295
	if ( ((int_32)$11 == (int_32)[3]) ){ goto $label$141 }
	$10 = [3]
	goto $label$20 
	
.LABEL $label$294
	$9 = ($8 + [4])
	$11 = *($8 + [4])
	if ( ($11 == 0) ){ goto $label$144 }
	$10 = [0]
	goto $label$20 
	
.LABEL $label$293
	$8 = $9
	goto $label$145 
	
.LABEL $label$292
	$9 = $8
	$8 = $11
	$11 = *($8 + [16])
	if ( ((int_32)$11 < (int_32)[778]) ){ goto $label$150 }
	$10 = [146]
	goto $label$20 
	
.LABEL $label$291
	$11 = *($8)
	if ( $11 ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$290
	if ( ((int_32)$11 == (int_32)[777]) ){ goto $label$25 }
	$10 = [140]
	goto $label$20 
	
.LABEL $label$289
	$9 = ($8 + [4])
	$11 = *($8 + [4])
	if ( ($11 == 0) ){ goto $label$28 }
	$10 = [137]
	goto $label$20 
	
.LABEL $label$288
	$8 = $9
	goto $label$149 
	
.LABEL $label$287
	$8 = $5
	$9 = $5
	$10 = [110]
	goto $label$20 
	
.LABEL $label$286
	$11 = *($9)
	if ( $11 ){ goto $label$43 }
	$10 = [112]
	goto $label$20 
	
.LABEL $label$285
	*(($11 = CALL _Znwj([24]))) = (int_64)0
	*($11 + [8]) = $8
	*($9) = $11
	*($11 + [20]) = [0]
	*($11 + [16]) = $7
	$8 = $11
	$7 = *(*($0))
	if ( ($7 == 0) ){ goto $label$40 }
	$10 = [113]
	goto $label$20 
	
.LABEL $label$284
	*($0) = $7
	$8 = *($9)
	$10 = [114]
	goto $label$20 
	
.LABEL $label$283
	CALL $49(*($5), $8)
	*($6) = (*($6) + [1])
	goto $label$42 
	
.LABEL $label$282
	$9 = $8
	$11 = *($9)
	if ( ($11 == 0) ){ goto $label$41 }
	$10 = [111]
	goto $label$20 
	
.LABEL $label$281
	*(($11 + [20])) = [1]
	$12 = ((int_32)$2 * (int_32)[100])
	$9 = *($5)
	if ( $9 ){ goto $label$131 }
	goto $label$132 
	
.LABEL $label$280
	$11 = *($9)
	if ( $11 ){ goto $label$32 }
	$10 = [132]
	goto $label$20 
	
.LABEL $label$279
	*(($11 = CALL _Znwj([24])) + [16 align=4]) = (int_64)2
	*($11) = (int_64)0
	*($11 + [8]) = $8
	*($9) = $11
	$8 = $11
	$13 = *(*($0))
	if ( ($13 == 0) ){ goto $label$29 }
	$10 = [133]
	goto $label$20 
	
.LABEL $label$278
	*($0) = $13
	$8 = *($9)
	$10 = [134]
	goto $label$20 
	
.LABEL $label$277
	CALL $49(*($5), $8)
	*($6) = (*($6) + [1])
	goto $label$31 
	
.LABEL $label$276
	$11 = *($9)
	if ( $11 ){ goto $label$140 }
	$10 = [121]
	goto $label$20 
	
.LABEL $label$275
	*(($11 = CALL _Znwj([24])) + [16 align=4]) = (int_64)3
	*($11) = (int_64)0
	*($11 + [8]) = $8
	*($9) = $11
	$8 = $11
	$13 = *(*($0))
	if ( ($13 == 0) ){ goto $label$37 }
	$10 = [122]
	goto $label$20 
	
.LABEL $label$274
	*($0) = $13
	$8 = *($9)
	$10 = [123]
	goto $label$20 
	
.LABEL $label$273
	CALL $49(*($5), $8)
	*($6) = (*($6) + [1])
	goto $label$139 
	
.LABEL $label$272
	$9 = $8
	$11 = *($9)
	if ( ($11 == 0) ){ goto $label$30 }
	$10 = [131]
	goto $label$20 
	
.LABEL $label$271
	*(($11 + [20])) = [1]
	if ( ((uint_32)$12 <= (uint_32)[13]) ){ goto $label$135 }
	$10 = [6]
	goto $label$20 
	
.LABEL $label$270
	$12 = ((int_32)$2 * (int_32)[100])
	$9 = *($5)
	if ( ($9 == 0) ){ goto $label$133 }
	$10 = [7]
	goto $label$20 
	
.LABEL $label$269
	$11 = $5
	$8 = $9
	$10 = [8]
	goto $label$20 
	
.LABEL $label$268
	$7 = ((int_32)*($8 + [16]) < (int_32)$12)
	$11 = ( $11 ? $8 : $7 )
	$8 = *(($8 + ($7 << [2])))
	if ( $8 ){ goto $label$130 }
	$10 = [9]
	goto $label$20 
	
.LABEL $label$267
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$129 }
	$10 = [10]
	goto $label$20 
	
.LABEL $label$266
	if ( ((int_32)$12 >= (int_32)*($11 + [16])) ){ goto $label$128 }
	$10 = [94]
	goto $label$20 
	
.LABEL $label$265
	$8 = $5
	$11 = *($9 + [16])
	if ( ((int_32)$12 >= (int_32)$11) ){ goto $label$57 }
	goto $label$58 
	
.LABEL $label$264
	$8 = $9
	$9 = $11
	$11 = *($9 + [16])
	if ( ((int_32)$12 >= (int_32)$11) ){ goto $label$156 }
	$10 = [104]
	goto $label$20 
	
.LABEL $label$263
	$11 = *($9)
	if ( $11 ){ goto $label$49 }
	goto $label$50 
	
.LABEL $label$262
	if ( ((int_32)$11 >= (int_32)$12) ){ goto $label$55 }
	$10 = [101]
	goto $label$20 
	
.LABEL $label$261
	$8 = ($9 + [4])
	$11 = *($9 + [4])
	if ( ($11 == 0) ){ goto $label$56 }
	$10 = [102]
	goto $label$20 
	
.LABEL $label$260
	$9 = $8
	goto $label$155 
	
.LABEL $label$259
	$9 = $5
	$8 = $5
	$10 = [96]
	goto $label$20 
	
.LABEL $label$258
	$11 = *($8)
	if ( $11 ){ goto $label$54 }
	$10 = [98]
	goto $label$20 
	
.LABEL $label$257
	*(($11 = CALL _Znwj([24]))) = (int_64)0
	*($11 + [8]) = $9
	*($8) = $11
	*($11 + [20]) = [0]
	*($11 + [16]) = $12
	$9 = $11
	$7 = *(*($0))
	if ( ($7 == 0) ){ goto $label$51 }
	$10 = [99]
	goto $label$20 
	
.LABEL $label$256
	*($0) = $7
	$9 = *($8)
	$10 = [100]
	goto $label$20 
	
.LABEL $label$255
	CALL $49(*($5), $9)
	*($6) = (*($6) + [1])
	goto $label$53 
	
.LABEL $label$254
	$11 = $5
	$8 = *($9 + [16])
	if ( ((int_32)$12 >= (int_32)$8) ){ goto $label$126 }
	goto $label$127 
	
.LABEL $label$253
	$9 = $8
	$8 = *($9 + [16])
	if ( ((int_32)$12 >= (int_32)$8) ){ goto $label$154 }
	$10 = [93]
	goto $label$20 
	
.LABEL $label$252
	$11 = $9
	$8 = *($9)
	if ( $8 ){ goto $label$123 }
	goto $label$124 
	
.LABEL $label$251
	if ( ((int_32)$8 >= (int_32)$12) ){ goto $label$125 }
	$10 = [91]
	goto $label$20 
	
.LABEL $label$250
	$11 = ($9 + [4])
	$8 = *($9 + [4])
	if ( $8 ){ goto $label$153 }
	$10 = [13]
	goto $label$20 
	
.LABEL $label$249
	$8 = *($11)
	if ( $8 ){ goto $label$122 }
	$10 = [88]
	goto $label$20 
	
.LABEL $label$248
	*(($8 = CALL _Znwj([24]))) = (int_64)0
	*($8 + [8]) = $9
	*($11) = $8
	*($8 + [20]) = [0]
	*($8 + [16]) = $12
	$9 = $8
	$7 = *(*($0))
	if ( ($7 == 0) ){ goto $label$59 }
	$10 = [89]
	goto $label$20 
	
.LABEL $label$247
	*($0) = $7
	$9 = *($11)
	$10 = [90]
	goto $label$20 
	
.LABEL $label$246
	CALL $49(*($5), $9)
	*($6) = (*($6) + [1])
	$10 = [14]
	goto $label$20 
	
.LABEL $label$245
	*(($8 = ($8 + [20]))) = (*($8) + [1])
	$12 = ((int_32)$3 * (int_32)[100])
	$9 = *($5)
	if ( $9 ){ goto $label$120 }
	$10 = [87]
	goto $label$20 
	
.LABEL $label$244
	$9 = $5
	$8 = $5
	$11 = *($8)
	if ( $11 ){ goto $label$63 }
	goto $label$64 
	
.LABEL $label$243
	$8 = $9
	$11 = *($8)
	if ( ($11 == 0) ){ goto $label$52 }
	$10 = [97]
	goto $label$20 
	
.LABEL $label$242
	*(($11 + [20])) = [1]
	$12 = ((int_32)$3 * (int_32)[100])
	$9 = *($5)
	if ( ($9 == 0) ){ goto $label$121 }
	$10 = [15]
	goto $label$20 
	
.LABEL $label$241
	$11 = $5
	$8 = $9
	$10 = [16]
	goto $label$20 
	
.LABEL $label$240
	$7 = ((int_32)*($8 + [16]) < (int_32)$12)
	$11 = ( $11 ? $8 : $7 )
	$8 = *(($8 + ($7 << [2])))
	if ( $8 ){ goto $label$119 }
	$10 = [17]
	goto $label$20 
	
.LABEL $label$239
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$118 }
	$10 = [18]
	goto $label$20 
	
.LABEL $label$238
	if ( ((int_32)$12 >= (int_32)*($11 + [16])) ){ goto $label$117 }
	$10 = [75]
	goto $label$20 
	
.LABEL $label$237
	$8 = $5
	$11 = *($9 + [16])
	if ( ((int_32)$12 >= (int_32)$11) ){ goto $label$68 }
	goto $label$69 
	
.LABEL $label$236
	$8 = $9
	$9 = $11
	$11 = *($9 + [16])
	if ( ((int_32)$12 >= (int_32)$11) ){ goto $label$160 }
	$10 = [85]
	goto $label$20 
	
.LABEL $label$235
	$11 = *($9)
	if ( $11 ){ goto $label$60 }
	goto $label$61 
	
.LABEL $label$234
	if ( ((int_32)$11 >= (int_32)$12) ){ goto $label$66 }
	$10 = [82]
	goto $label$20 
	
.LABEL $label$233
	$8 = ($9 + [4])
	$11 = *($9 + [4])
	if ( ($11 == 0) ){ goto $label$67 }
	$10 = [83]
	goto $label$20 
	
.LABEL $label$232
	$9 = $8
	goto $label$159 
	
.LABEL $label$231
	$11 = $5
	$8 = *($9 + [16])
	if ( ((int_32)$12 >= (int_32)$8) ){ goto $label$115 }
	goto $label$116 
	
.LABEL $label$230
	$9 = $8
	$8 = *($9 + [16])
	if ( ((int_32)$12 >= (int_32)$8) ){ goto $label$158 }
	$10 = [74]
	goto $label$20 
	
.LABEL $label$229
	$11 = $9
	$8 = *($9)
	if ( $8 ){ goto $label$112 }
	goto $label$113 
	
.LABEL $label$228
	if ( ((int_32)$8 >= (int_32)$12) ){ goto $label$114 }
	$10 = [72]
	goto $label$20 
	
.LABEL $label$227
	$11 = ($9 + [4])
	$8 = *($9 + [4])
	if ( $8 ){ goto $label$157 }
	$10 = [21]
	goto $label$20 
	
.LABEL $label$226
	$8 = *($11)
	if ( $8 ){ goto $label$111 }
	$10 = [69]
	goto $label$20 
	
.LABEL $label$225
	*(($8 = CALL _Znwj([24]))) = (int_64)0
	*($8 + [8]) = $9
	*($11) = $8
	*($8 + [20]) = [0]
	*($8 + [16]) = $12
	$9 = $8
	$7 = *(*($0))
	if ( ($7 == 0) ){ goto $label$70 }
	$10 = [70]
	goto $label$20 
	
.LABEL $label$224
	*($0) = $7
	$9 = *($11)
	$10 = [71]
	goto $label$20 
	
.LABEL $label$223
	CALL $49(*($5), $9)
	*($6) = (*($6) + [1])
	$10 = [22]
	goto $label$20 
	
.LABEL $label$222
	*(($8 = ($8 + [20]))) = (*($8) + [1])
	$12 = ((int_32)$4 * (int_32)[100])
	$9 = *($5)
	if ( $9 ){ goto $label$109 }
	$10 = [68]
	goto $label$20 
	
.LABEL $label$221
	$9 = $5
	$8 = $5
	$11 = *($8)
	if ( $11 ){ goto $label$74 }
	goto $label$75 
	
.LABEL $label$220
	$8 = $9
	$10 = [77]
	goto $label$20 
	
.LABEL $label$219
	$11 = *($8)
	if ( $11 ){ goto $label$65 }
	$10 = [79]
	goto $label$20 
	
.LABEL $label$218
	*(($11 = CALL _Znwj([24]))) = (int_64)0
	*($11 + [8]) = $9
	*($8) = $11
	*($11 + [20]) = [0]
	*($11 + [16]) = $12
	$9 = $11
	$7 = *(*($0))
	if ( ($7 == 0) ){ goto $label$62 }
	$10 = [80]
	goto $label$20 
	
.LABEL $label$217
	*($0) = $7
	$9 = *($8)
	$10 = [81]
	goto $label$20 
	
.LABEL $label$216
	CALL $49(*($5), $9)
	*($6) = (*($6) + [1])
	$10 = [78]
	goto $label$20 
	
.LABEL $label$215
	*(($11 + [20])) = [1]
	$12 = ((int_32)$4 * (int_32)[100])
	$9 = *($5)
	if ( ($9 == 0) ){ goto $label$110 }
	$10 = [23]
	goto $label$20 
	
.LABEL $label$214
	$11 = $5
	$8 = $9
	$10 = [24]
	goto $label$20 
	
.LABEL $label$213
	$7 = ((int_32)*($8 + [16]) < (int_32)$12)
	$11 = ( $11 ? $8 : $7 )
	$8 = *(($8 + ($7 << [2])))
	if ( $8 ){ goto $label$108 }
	$10 = [25]
	goto $label$20 
	
.LABEL $label$212
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$107 }
	$10 = [26]
	goto $label$20 
	
.LABEL $label$211
	if ( ((int_32)$12 >= (int_32)*($11 + [16])) ){ goto $label$106 }
	$10 = [56]
	goto $label$20 
	
.LABEL $label$210
	$8 = $5
	$11 = *($9 + [16])
	if ( ((int_32)$12 >= (int_32)$11) ){ goto $label$79 }
	goto $label$80 
	
.LABEL $label$209
	$8 = $9
	$9 = $11
	$11 = *($9 + [16])
	if ( ((int_32)$12 >= (int_32)$11) ){ goto $label$164 }
	$10 = [66]
	goto $label$20 
	
.LABEL $label$208
	$11 = *($9)
	if ( $11 ){ goto $label$71 }
	goto $label$72 
	
.LABEL $label$207
	if ( ((int_32)$11 >= (int_32)$12) ){ goto $label$77 }
	$10 = [63]
	goto $label$20 
	
.LABEL $label$206
	$8 = ($9 + [4])
	$11 = *($9 + [4])
	if ( ($11 == 0) ){ goto $label$78 }
	$10 = [64]
	goto $label$20 
	
.LABEL $label$205
	$9 = $8
	goto $label$163 
	
.LABEL $label$204
	$11 = $5
	$8 = *($9 + [16])
	if ( ((int_32)$12 >= (int_32)$8) ){ goto $label$104 }
	goto $label$105 
	
.LABEL $label$203
	$9 = $8
	$8 = *($9 + [16])
	if ( ((int_32)$12 >= (int_32)$8) ){ goto $label$162 }
	$10 = [55]
	goto $label$20 
	
.LABEL $label$202
	$11 = $9
	$8 = *($9)
	if ( $8 ){ goto $label$101 }
	goto $label$102 
	
.LABEL $label$201
	if ( ((int_32)$8 >= (int_32)$12) ){ goto $label$103 }
	$10 = [53]
	goto $label$20 
	
.LABEL $label$200
	$11 = ($9 + [4])
	$8 = *($9 + [4])
	if ( $8 ){ goto $label$161 }
	$10 = [29]
	goto $label$20 
	
.LABEL $label$199
	$8 = *($11)
	if ( $8 ){ goto $label$100 }
	$10 = [50]
	goto $label$20 
	
.LABEL $label$198
	*(($8 = CALL _Znwj([24]))) = (int_64)0
	*($8 + [8]) = $9
	*($11) = $8
	*($8 + [20]) = [0]
	*($8 + [16]) = $12
	$9 = $8
	$7 = *(*($0))
	if ( ($7 == 0) ){ goto $label$81 }
	$10 = [51]
	goto $label$20 
	
.LABEL $label$197
	*($0) = $7
	$9 = *($11)
	$10 = [52]
	goto $label$20 
	
.LABEL $label$196
	CALL $49(*($5), $9)
	*($6) = (*($6) + [1])
	$10 = [30]
	goto $label$20 
	
.LABEL $label$195
	*(($8 = ($8 + [20]))) = (*($8) + [1])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$98 }
	$10 = [31]
	goto $label$20 
	
.LABEL $label$194
	$9 = ((int_32)$3 == (int_32)$4)
	$8 = ( $3 ? $2 : $9 )
	if ( $9 ){ goto $label$97 }
	$10 = [32]
	goto $label$20 
	
.LABEL $label$193
	$9 = ((int_32)$2 != (int_32)$4)
	$2 = $8
	if ( $9 ){ goto $label$95 }
	goto $label$96 
	
.LABEL $label$192
	$8 = $9
	$10 = [58]
	goto $label$20 
	
.LABEL $label$191
	$11 = *($8)
	if ( $11 ){ goto $label$76 }
	$10 = [60]
	goto $label$20 
	
.LABEL $label$190
	*(($11 = CALL _Znwj([24]))) = (int_64)0
	*($11 + [8]) = $9
	*($8) = $11
	*($11 + [20]) = [0]
	*($11 + [16]) = $12
	$9 = $11
	$7 = *(*($0))
	if ( ($7 == 0) ){ goto $label$73 }
	$10 = [61]
	goto $label$20 
	
.LABEL $label$189
	*($0) = $7
	$9 = *($8)
	$10 = [62]
	goto $label$20 
	
.LABEL $label$188
	CALL $49(*($5), $9)
	*($6) = (*($6) + [1])
	$10 = [59]
	goto $label$20 
	
.LABEL $label$187
	*(($11 + [20])) = [1]
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$99 }
	$10 = [34]
	goto $label$20 
	
.LABEL $label$186
	if ( ($2 == 0) ){ goto $label$94 }
	$10 = [35]
	goto $label$20 
	
.LABEL $label$185
	$7 = ((int_32)$2 * (int_32)[110])
	$8 = *($5)
	if ( ($8 == 0) ){ goto $label$92 }
	$10 = [36]
	goto $label$20 
	
.LABEL $label$184
	$9 = $5
	$11 = *($8 + [16])
	if ( ((int_32)$7 >= (int_32)$11) ){ goto $label$90 }
	goto $label$91 
	
.LABEL $label$183
	$9 = $8
	$8 = $11
	$11 = *($8 + [16])
	if ( ((int_32)$7 >= (int_32)$11) ){ goto $label$166 }
	$10 = [46]
	goto $label$20 
	
.LABEL $label$182
	$11 = *($8)
	if ( $11 ){ goto $label$82 }
	goto $label$83 
	
.LABEL $label$181
	if ( ((int_32)$11 >= (int_32)$7) ){ goto $label$88 }
	$10 = [43]
	goto $label$20 
	
.LABEL $label$180
	$9 = ($8 + [4])
	$11 = *($8 + [4])
	if ( ($11 == 0) ){ goto $label$89 }
	$10 = [44]
	goto $label$20 
	
.LABEL $label$179
	$8 = $9
	goto $label$165 
	
.LABEL $label$178
	$8 = $5
	$9 = $5
	$10 = [38]
	goto $label$20 
	
.LABEL $label$177
	$11 = *($9)
	if ( $11 ){ goto $label$87 }
	$10 = [40]
	goto $label$20 
	
.LABEL $label$176
	*(($11 = CALL _Znwj([24]))) = (int_64)0
	*($11 + [8]) = $8
	*($9) = $11
	*($11 + [20]) = [0]
	*($11 + [16]) = $7
	$8 = $11
	$7 = *(*($0))
	if ( ($7 == 0) ){ goto $label$84 }
	$10 = [41]
	goto $label$20 
	
.LABEL $label$175
	*($0) = $7
	$8 = *($9)
	$10 = [42]
	goto $label$20 
	
.LABEL $label$174
	CALL $49(*($5), $8)
	*($6) = (*($6) + [1])
	goto $label$86 
	
.LABEL $label$173
	$2 = $8
	if ( $2 ){ goto $label$93 }
	$10 = [33]
	goto $label$20 
	
.LABEL $label$172
	return 
	
.LABEL $label$171
	$9 = $8
	$11 = *($9)
	if ( ($11 == 0) ){ goto $label$85 }
	$10 = [39]
	goto $label$20 
	
.LABEL $label$170
	*(($11 + [20])) = [1]
	return 
	
.LABEL $label$169
	$9 = $8
	$11 = *($9)
	if ( ($11 == 0) ){ goto $label$138 }
	$10 = [5]
	goto $label$20 
	
.LABEL $label$168
	*(($11 + [20])) = [1]
	if ( ((uint_32)$12 <= (uint_32)[13]) ){ goto $label$137 }
	goto $label$136 
	
.LABEL $label$167
	$9 = $8
	$11 = *($9)
	if ( $11 ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$166
	$10 = [37]
	goto $label$20 
	
.LABEL $label$165
	$10 = [45]
	goto $label$20 
	
.LABEL $label$164
	$10 = [57]
	goto $label$20 
	
.LABEL $label$163
	$10 = [65]
	goto $label$20 
	
.LABEL $label$162
	$10 = [28]
	goto $label$20 
	
.LABEL $label$161
	$10 = [54]
	goto $label$20 
	
.LABEL $label$160
	$10 = [76]
	goto $label$20 
	
.LABEL $label$159
	$10 = [84]
	goto $label$20 
	
.LABEL $label$158
	$10 = [20]
	goto $label$20 
	
.LABEL $label$157
	$10 = [73]
	goto $label$20 
	
.LABEL $label$156
	$10 = [95]
	goto $label$20 
	
.LABEL $label$155
	$10 = [103]
	goto $label$20 
	
.LABEL $label$154
	$10 = [12]
	goto $label$20 
	
.LABEL $label$153
	$10 = [92]
	goto $label$20 
	
.LABEL $label$152
	$10 = [109]
	goto $label$20 
	
.LABEL $label$151
	$10 = [117]
	goto $label$20 
	
.LABEL $label$150
	$10 = [139]
	goto $label$20 
	
.LABEL $label$149
	$10 = [138]
	goto $label$20 
	
.LABEL $label$148
	$10 = [128]
	goto $label$20 
	
.LABEL $label$147
	$10 = [127]
	goto $label$20 
	
.LABEL $label$146
	$10 = [2]
	goto $label$20 
	
.LABEL $label$145
	$10 = [1]
	goto $label$20 
	
.LABEL $label$144
	$10 = [4]
	goto $label$20 
	
.LABEL $label$143
	$10 = [125]
	goto $label$20 
	
.LABEL $label$142
	$10 = [1]
	goto $label$20 
	
.LABEL $label$141
	$10 = [4]
	goto $label$20 
	
.LABEL $label$140
	$10 = [5]
	goto $label$20 
	
.LABEL $label$139
	$10 = [5]
	goto $label$20 
	
.LABEL $label$138
	$10 = [121]
	goto $label$20 
	
.LABEL $label$137
	$10 = [107]
	goto $label$20 
	
.LABEL $label$136
	$10 = [6]
	goto $label$20 
	
.LABEL $label$135
	$10 = [107]
	goto $label$20 
	
.LABEL $label$134
	$10 = [6]
	goto $label$20 
	
.LABEL $label$133
	$10 = [106]
	goto $label$20 
	
.LABEL $label$132
	$10 = [106]
	goto $label$20 
	
.LABEL $label$131
	$10 = [7]
	goto $label$20 
	
.LABEL $label$130
	$10 = [8]
	goto $label$20 
	
.LABEL $label$129
	$10 = [94]
	goto $label$20 
	
.LABEL $label$128
	$10 = [11]
	goto $label$20 
	
.LABEL $label$127
	$10 = [93]
	goto $label$20 
	
.LABEL $label$126
	$10 = [12]
	goto $label$20 
	
.LABEL $label$125
	$10 = [13]
	goto $label$20 
	
.LABEL $label$124
	$10 = [13]
	goto $label$20 
	
.LABEL $label$123
	$10 = [92]
	goto $label$20 
	
.LABEL $label$122
	$10 = [14]
	goto $label$20 
	
.LABEL $label$121
	$10 = [87]
	goto $label$20 
	
.LABEL $label$120
	$10 = [15]
	goto $label$20 
	
.LABEL $label$119
	$10 = [16]
	goto $label$20 
	
.LABEL $label$118
	$10 = [75]
	goto $label$20 
	
.LABEL $label$117
	$10 = [19]
	goto $label$20 
	
.LABEL $label$116
	$10 = [74]
	goto $label$20 
	
.LABEL $label$115
	$10 = [20]
	goto $label$20 
	
.LABEL $label$114
	$10 = [21]
	goto $label$20 
	
.LABEL $label$113
	$10 = [21]
	goto $label$20 
	
.LABEL $label$112
	$10 = [73]
	goto $label$20 
	
.LABEL $label$111
	$10 = [22]
	goto $label$20 
	
.LABEL $label$110
	$10 = [68]
	goto $label$20 
	
.LABEL $label$109
	$10 = [23]
	goto $label$20 
	
.LABEL $label$108
	$10 = [24]
	goto $label$20 
	
.LABEL $label$107
	$10 = [56]
	goto $label$20 
	
.LABEL $label$106
	$10 = [27]
	goto $label$20 
	
.LABEL $label$105
	$10 = [55]
	goto $label$20 
	
.LABEL $label$104
	$10 = [28]
	goto $label$20 
	
.LABEL $label$103
	$10 = [29]
	goto $label$20 
	
.LABEL $label$102
	$10 = [29]
	goto $label$20 
	
.LABEL $label$101
	$10 = [54]
	goto $label$20 
	
.LABEL $label$100
	$10 = [30]
	goto $label$20 
	
.LABEL $label$99
	$10 = [31]
	goto $label$20 
	
.LABEL $label$98
	$10 = [34]
	goto $label$20 
	
.LABEL $label$97
	$10 = [49]
	goto $label$20 
	
.LABEL $label$96
	$10 = [34]
	goto $label$20 
	
.LABEL $label$95
	$10 = [33]
	goto $label$20 
	
.LABEL $label$94
	$10 = [33]
	goto $label$20 
	
.LABEL $label$93
	$10 = [35]
	goto $label$20 
	
.LABEL $label$92
	$10 = [48]
	goto $label$20 
	
.LABEL $label$91
	$10 = [46]
	goto $label$20 
	
.LABEL $label$90
	$10 = [37]
	goto $label$20 
	
.LABEL $label$89
	$10 = [38]
	goto $label$20 
	
.LABEL $label$88
	$10 = [38]
	goto $label$20 
	
.LABEL $label$87
	$10 = [39]
	goto $label$20 
	
.LABEL $label$86
	$10 = [39]
	goto $label$20 
	
.LABEL $label$85
	$10 = [40]
	goto $label$20 
	
.LABEL $label$84
	$10 = [42]
	goto $label$20 
	
.LABEL $label$83
	$10 = [47]
	goto $label$20 
	
.LABEL $label$82
	$10 = [45]
	goto $label$20 
	
.LABEL $label$81
	$10 = [52]
	goto $label$20 
	
.LABEL $label$80
	$10 = [66]
	goto $label$20 
	
.LABEL $label$79
	$10 = [57]
	goto $label$20 
	
.LABEL $label$78
	$10 = [58]
	goto $label$20 
	
.LABEL $label$77
	$10 = [58]
	goto $label$20 
	
.LABEL $label$76
	$10 = [59]
	goto $label$20 
	
.LABEL $label$75
	$10 = [60]
	goto $label$20 
	
.LABEL $label$74
	$10 = [59]
	goto $label$20 
	
.LABEL $label$73
	$10 = [62]
	goto $label$20 
	
.LABEL $label$72
	$10 = [67]
	goto $label$20 
	
.LABEL $label$71
	$10 = [65]
	goto $label$20 
	
.LABEL $label$70
	$10 = [71]
	goto $label$20 
	
.LABEL $label$69
	$10 = [85]
	goto $label$20 
	
.LABEL $label$68
	$10 = [76]
	goto $label$20 
	
.LABEL $label$67
	$10 = [77]
	goto $label$20 
	
.LABEL $label$66
	$10 = [77]
	goto $label$20 
	
.LABEL $label$65
	$10 = [78]
	goto $label$20 
	
.LABEL $label$64
	$10 = [79]
	goto $label$20 
	
.LABEL $label$63
	$10 = [78]
	goto $label$20 
	
.LABEL $label$62
	$10 = [81]
	goto $label$20 
	
.LABEL $label$61
	$10 = [86]
	goto $label$20 
	
.LABEL $label$60
	$10 = [84]
	goto $label$20 
	
.LABEL $label$59
	$10 = [90]
	goto $label$20 
	
.LABEL $label$58
	$10 = [104]
	goto $label$20 
	
.LABEL $label$57
	$10 = [95]
	goto $label$20 
	
.LABEL $label$56
	$10 = [96]
	goto $label$20 
	
.LABEL $label$55
	$10 = [96]
	goto $label$20 
	
.LABEL $label$54
	$10 = [97]
	goto $label$20 
	
.LABEL $label$53
	$10 = [97]
	goto $label$20 
	
.LABEL $label$52
	$10 = [98]
	goto $label$20 
	
.LABEL $label$51
	$10 = [100]
	goto $label$20 
	
.LABEL $label$50
	$10 = [105]
	goto $label$20 
	
.LABEL $label$49
	$10 = [103]
	goto $label$20 
	
.LABEL $label$48
	$10 = [120]
	goto $label$20 
	
.LABEL $label$47
	$10 = [118]
	goto $label$20 
	
.LABEL $label$46
	$10 = [109]
	goto $label$20 
	
.LABEL $label$45
	$10 = [110]
	goto $label$20 
	
.LABEL $label$44
	$10 = [110]
	goto $label$20 
	
.LABEL $label$43
	$10 = [111]
	goto $label$20 
	
.LABEL $label$42
	$10 = [111]
	goto $label$20 
	
.LABEL $label$41
	$10 = [112]
	goto $label$20 
	
.LABEL $label$40
	$10 = [114]
	goto $label$20 
	
.LABEL $label$39
	$10 = [119]
	goto $label$20 
	
.LABEL $label$38
	$10 = [117]
	goto $label$20 
	
.LABEL $label$37
	$10 = [123]
	goto $label$20 
	
.LABEL $label$36
	$10 = [130]
	goto $label$20 
	
.LABEL $label$35
	$10 = [136]
	goto $label$20 
	
.LABEL $label$34
	$10 = [127]
	goto $label$20 
	
.LABEL $label$33
	$10 = [130]
	goto $label$20 
	
.LABEL $label$32
	$10 = [131]
	goto $label$20 
	
.LABEL $label$31
	$10 = [131]
	goto $label$20 
	
.LABEL $label$30
	$10 = [132]
	goto $label$20 
	
.LABEL $label$29
	$10 = [134]
	goto $label$20 
	
.LABEL $label$28
	$10 = [141]
	goto $label$20 
	
.LABEL $label$27
	$10 = [147]
	goto $label$20 
	
.LABEL $label$26
	$10 = [138]
	goto $label$20 
	
.LABEL $label$25
	$10 = [141]
	goto $label$20 
	
.LABEL $label$24
	$10 = [142]
	goto $label$20 
	
.LABEL $label$23
	$10 = [143]
	goto $label$20 
	
.LABEL $label$22
	$10 = [142]
	goto $label$20 
	
.LABEL $label$21
	$10 = [145]
	goto $label$20 
	$10
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-6497942333781180416, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [168]) == (int_32)$7), [17702])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $48($7, CALL $fimport$14(*($7), *($7 + [8]), (int_64)-6497942333781180416, $6))
	CALL eosio_assert(((int_32)*($4 + [168]) == (int_32)$7), [17702])
	
.LABEL $label$2
	*($4 + [176]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17753])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $167($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([176])) + [17]) = [0]
	*($5 + [8]) = (int_64)0
	*($5 + [128]) = [0]
	*($5 + [130]) = [0]
	*($5 + [136]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($5 + [144]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = CALL current_time()
	*($5 + [160]) = $0
	*($5 + [152]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [17])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [64])
	*($3 + [64]) = ($5 + [96])
	*($3 + [68]) = ($5 + [128])
	*($3 + [72]) = ($5 + [129])
	*($3 + [76]) = ($5 + [130])
	*($3 + [80]) = ($5 + [136])
	*($3 + [84]) = ($5 + [144])
	*($3 + [88]) = ($5 + [152])
	CALL $106(($3 + [40]), ($3 + [32]))
	*($5 + [164]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $107(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $171($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

int_32 .FUNC $167 (int_32 $0)
{
	return CALL $168([8680], $0)
}

void .FUNC $166 (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $165 (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC $164 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $163 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $162 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $161 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $157($3, (int_64)0)
	$4 = CALL $159($3, $2, [1], (int_64)4294967295)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_64 .FUNC $160 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $157($3, (int_64)0)
	$4 = CALL $159($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

int_32 .FUNC $169 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8672]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8676])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8672]) = [1]
	$2 = ($2 << [16])
	*([0] + [8676]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8676])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8676]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8672]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8672]) = [1]
	$3 = ($3 << [16])
	*([0] + [8676]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8676])
	
.LABEL $label$10
	*([0] + [8676]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $169($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8214])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[19]), [18126])
	CALL memcpy(*($3 + [4]), $2, [20])
	*($3 + [4]) = (*($3 + [4]) + [20])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18126])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18126])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18126])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18126])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [60])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $147($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[19]), [18126])
	CALL memcpy(*($3 + [4]), $2, [20])
	*($3 + [4]) = (*($3 + [4]) + [20])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18126])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18126])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18126])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18126])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [60])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [18126])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [18126])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18126])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [40])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [19133])
	$2 = *($0 + [4])
	$3 = *($2 + [96])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)4229865212519383040, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [96]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [88]) == (int_32)$6), [17702])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $75($6, CALL $fimport$14(*($6), *($6 + [8]), (int_64)4229865212519383040, $5))
	CALL eosio_assert(((int_32)*($8 + [88]) == (int_32)$6), [17702])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [96])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18126])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18126])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [18126])
	CALL memcpy(*($3 + [4]), $2, [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [18126])
	CALL memcpy(*($3 + [4]), $2, [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[19]), [18126])
	CALL memcpy(*($3 + [4]), $2, [20])
	*($3 + [4]) = (*($3 + [4]) + [20])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18126])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18126])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18126])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	if ( ((int_64)*($1 + [8]) != (int_64)1397703940) ){ goto $label$1 }
	*($2 + [24]) = (int_64)1397703940
	*($2 + [16]) = (int_64)0
	CALL eosio_assert([1], [18347])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$3 = $5
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$6 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$6 = [0]
	
.LABEL $label$2
	CALL eosio_assert($6, [18396])
	$4 = ($0 + [208])
	CALL $82($2, $4, *($0), ($2 + [16]))
	CALL eosio_assert(((int_64)*(($1 + [8])) == (int_64)*($2 + [8])), [18603])
	$3 = (int_64)
	*($2) = $3(*($2) - *($1)))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [18651])
	CALL eosio_assert(((int_64)*($2) < (int_64)4611686018427387904), [18673])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($2) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [18585])
	CALL $67($4, $2, *($0))
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [112])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $164([18694])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$16 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$15
	CALL memcpy($5, [18694], $4)
	
.LABEL $label$14
	*(($5 + $4)) = [0]
	*($3 + [96]) = *($2 + [8])
	CALL $83(($3 + [80]), ($3 + [96]))
	$4 = *($3 + [80])
	$5 = ($4 & [1])
	CALL $137($0, ( *($3 + [88]) ? (($3 + [80]) | [1]) : $5 ), ( *($3 + [84]) ? uint_32($4 >> [1]) : $5 ))
	CALL $136($0, [18695])
	if ( (CALL is_account(*($2 + [24])) == 0) ){ goto $label$17 }
	*($3 + [64]) = *(($2 + [24]))
	CALL $83(($3 + [96]), ($3 + [64]))
	$4 = *($3 + [96])
	$5 = ($4 & [1])
	CALL $137($0, ( *($3 + [104]) ? (($3 + [96]) | [1]) : $5 ), ( *($3 + [100]) ? uint_32($4 >> [1]) : $5 ))
	CALL $136($0, [18697])
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($3 + [104])))
	
.LABEL $label$17
	if ( (CALL is_account(*($2 + [16])) == 0) ){ goto $label$18 }
	*($3 + [64]) = *(($2 + [16]))
	CALL $83(($3 + [96]), ($3 + [64]))
	$4 = *($3 + [96])
	$5 = ($4 & [1])
	CALL $137($0, ( *($3 + [104]) ? (($3 + [96]) | [1]) : $5 ), ( *($3 + [100]) ? uint_32($4 >> [1]) : $5 ))
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($3 + [104])))
	
.LABEL $label$18
	CALL $136($0, [18695])
	*($3 + [64]) = (int_64)0
	*($3 + [72]) = [0]
	$5 = (($3 + [64]) | [1])
	$7 = *($2)
	
.LOOP $label$19:
	$8 = ((uint_64)$7 / (uint_64)(int_64)10)
	$4 = (CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$8 * (int_64)10))
	CALL $1(($3 + [96]), int_32((( ($4) | [48]) ? ($4 + [55]) : ($4 <= [10]) ) << [24]) >> [24]), ($3 + [64]))
	if ( (*($3 + [64]) & [1]) ){ goto $label$21 }
	*($3 + [64]) = [0]
	goto $label$20 
	
.LABEL $label$21
	*(*((($3 + [64]) + [8]))) = [0]
	*($3 + [68]) = [0]
	
.LABEL $label$20
	CALL $135(($3 + [64]), [0])
	*((($3 + [64]) + [8])) = *((($3 + [96]) + [8]))
	*($3 + [64]) = *($3 + [96])
	$4 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $8
	if ( $4 ){ goto $label$19 }
	$4 = *($3 + [64])
	$6 = ($4 & [1])
	CALL $137($0, ( *((($3 + [64]) + [8])) ? $5 : $6 ), ( *($3 + [68]) ? uint_32($4 >> [1]) : $6 ))
	CALL $136($0, [18695])
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = [0]
	$7 = ((int_64)((int_64)*($2 + [128]) * (int_64)10000) / (int_64)*($2 + [32]))
	$6 = (($3 + [48]) | [1])
	
.LOOP $label$22:
	$8 = ((uint_64)$7 / (uint_64)(int_64)10)
	$4 = (CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$8 * (int_64)10))
	CALL $1(($3 + [96]), int_32((( ($4) | [48]) ? ($4 + [55]) : ($4 <= [10]) ) << [24]) >> [24]), ($3 + [48]))
	if ( (*($3 + [48]) & [1]) ){ goto $label$24 }
	*($3 + [48]) = [0]
	goto $label$23 
	
.LABEL $label$24
	*(*((($3 + [48]) + [8]))) = [0]
	*($3 + [52]) = [0]
	
.LABEL $label$23
	CALL $135(($3 + [48]), [0])
	*((($3 + [48]) + [8])) = *((($3 + [96]) + [8]))
	*($3 + [48]) = *($3 + [96])
	$4 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $8
	if ( $4 ){ goto $label$22 }
	$4 = *($3 + [48])
	$9 = ($4 & [1])
	$5 = (($3 + [48]) + [8])
	CALL $137($0, ( *($5) ? $6 : $9 ), ( *($3 + [52]) ? uint_32($4 >> [1]) : $9 ))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$25
	CALL $136($0, [18695])
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = [0]
	$7 = *(($2 + [128]))
	$6 = (($3 + [48]) | [1])
	
.LOOP $label$26:
	$8 = ((uint_64)$7 / (uint_64)(int_64)10)
	$4 = (CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$8 * (int_64)10))
	CALL $1(($3 + [96]), int_32((( ($4) | [48]) ? ($4 + [55]) : ($4 <= [10]) ) << [24]) >> [24]), ($3 + [48]))
	if ( (*($3 + [48]) & [1]) ){ goto $label$28 }
	*($3 + [48]) = [0]
	goto $label$27 
	
.LABEL $label$28
	*(*($5)) = [0]
	*($3 + [52]) = [0]
	
.LABEL $label$27
	CALL $135(($3 + [48]), [0])
	*($5) = *((($3 + [96]) + [8]))
	*($3 + [48]) = *($3 + [96])
	$4 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $8
	if ( $4 ){ goto $label$26 }
	$4 = *($3 + [48])
	$5 = ($4 & [1])
	CALL $137($0, ( *((($3 + [48]) + [8])) ? $6 : $5 ), ( *($3 + [52]) ? uint_32($4 >> [1]) : $5 ))
	CALL $136($0, [18695])
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = [0]
	$5 = (($3 + [32]) | [1])
	$7 = *($2 + [160])
	
.LOOP $label$29:
	$8 = ((uint_64)$7 / (uint_64)(int_64)10)
	$4 = (CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$8 * (int_64)10))
	CALL $1(($3 + [96]), int_32((( ($4) | [48]) ? ($4 + [55]) : ($4 <= [10]) ) << [24]) >> [24]), ($3 + [32]))
	if ( (*($3 + [32]) & [1]) ){ goto $label$31 }
	*($3 + [32]) = [0]
	goto $label$30 
	
.LABEL $label$31
	*(*((($3 + [32]) + [8]))) = [0]
	*($3 + [36]) = [0]
	
.LABEL $label$30
	CALL $135(($3 + [32]), [0])
	*((($3 + [32]) + [8])) = *((($3 + [96]) + [8]))
	*($3 + [32]) = *($3 + [96])
	$4 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $8
	if ( $4 ){ goto $label$29 }
	$4 = *($3 + [32])
	$6 = ($4 & [1])
	CALL $137($0, ( *((($3 + [32]) + [8])) ? $5 : $6 ), ( *($3 + [36]) ? uint_32($4 >> [1]) : $6 ))
	CALL $136($0, [18695])
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = [0]
	$5 = (($3 + [16]) | [1])
	$7 = *($2 + [112])
	
.LOOP $label$32:
	$8 = ((uint_64)$7 / (uint_64)(int_64)10)
	$4 = (CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$8 * (int_64)10))
	CALL $1(($3 + [96]), int_32((( ($4) | [48]) ? ($4 + [55]) : ($4 <= [10]) ) << [24]) >> [24]), ($3 + [16]))
	if ( (*($3 + [16]) & [1]) ){ goto $label$34 }
	*($3 + [16]) = [0]
	goto $label$33 
	
.LABEL $label$34
	*(*((($3 + [16]) + [8]))) = [0]
	*($3 + [20]) = [0]
	
.LABEL $label$33
	CALL $135(($3 + [16]), [0])
	*((($3 + [16]) + [8])) = *((($3 + [96]) + [8]))
	*($3 + [16]) = *($3 + [96])
	$4 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $8
	if ( $4 ){ goto $label$32 }
	$4 = *($3 + [16])
	$2 = ($4 & [1])
	CALL $137($0, ( *((($3 + [16]) + [8])) ? $5 : $2 ), ( *($3 + [20]) ? uint_32($4 >> [1]) : $2 ))
	CALL $136($0, [18695])
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	CALL $1(($3 + [96]), [48], $3)
	$4 = ($3 | [1])
	if ( (*($3) & [1]) ){ goto $label$36 }
	*($3) = [0]
	goto $label$35 
	
.LABEL $label$36
	*(*(($3 + [8]))) = [0]
	*($3 + [4]) = [0]
	
.LABEL $label$35
	CALL $135($3, [0])
	$2 = (($3 + [96]) + [8])
	*(($5 = ($3 + [8]))) = *($2)
	*($3) = *($3 + [96])
	$5 = *($3)
	$6 = ($5 & [1])
	CALL $137($0, ( *($5) ? $4 : $6 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $6 ))
	CALL $136($0, [18695])
	*($2) = [0]
	*($3 + [96]) = (int_64)0
	$4 = CALL $164([18699])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$39 }
	*($3 + [96]) = ($4 << [1])
	$2 = (($3 + [96]) | [1])
	$5 = $2
	if ( $4 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$2 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($2)
	*($3 + [96]) = ($2 | [1])
	*($3 + [104]) = $5
	*($3 + [100]) = $4
	$2 = (($3 + [96]) | [1])
	
.LABEL $label$38
	CALL memcpy($5, [18699], $4)
	
.LABEL $label$37
	*(($5 + $4)) = [0]
	$4 = *($3 + [96])
	$5 = ($4 & [1])
	CALL $137($0, ( *($3 + [104]) ? $2 : $5 ), ( *($3 + [100]) ? uint_32($4 >> [1]) : $5 ))
	if ( (*($3 + [96]) & [1]) ){ goto $label$41 }
	if ( (*($3) & [1]) ){ goto $label$40 }
	goto $label$11 
	
.LABEL $label$41
	CALL _ZdlPv(*(($3 + [104])))
	if ( ((*($3) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$40
	CALL _ZdlPv(*(($3 + [8])))
	$4 = [1]
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$13
	CALL $130($0)
	
.LABEL $label$12
	CALL $130(($3 + [96]))
	
.LABEL $label$11
	$4 = [1]
	if ( (*($3 + [16]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($3 + [32]) & $4) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [24])))
	if ( ((*($3 + [32]) & $4) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [40])))
	$4 = [1]
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$4 = [1]
	if ( (*($3 + [48]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($3 + [64]) & $4) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [56])))
	if ( ((*($3 + [64]) & $4) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*(($3 + [72])))
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3 + [80]) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*(($3 + [88])))
	$global$0 = ($3 + [112])
	(unreachable)
	(unreachable)
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $122(*($1), ($0 + [32]))
}

int_32 .FUNC $57 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [32]) = (int_64)0
	*(($1 = ($0 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [18347])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [18396])
	*($0 + [106]) = [0]
	*($0 + [104]) = [0]
	*($0 + [112]) = (int_64)0
	*(($1 = ($0 + [120]))) = (int_64)1398362884
	CALL eosio_assert([1], [18347])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [18396])
	*(($1 = ($0 + [136]))) = (int_64)1398362884
	*($0 + [128]) = (int_64)0
	CALL eosio_assert([1], [18347])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$2 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [18396])
	*($0 + [144]) = [0]
	*($0 + [152]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($0 + [160]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	return $0
}

int_32 .FUNC $152 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $165([8396])
	$3 = *([0] + [8404])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8408])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8412]
	*([0] + [8404]) = [8412]
	$4 = *([0] + [8408])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $170([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8404])
	*([0] + [8404]) = $3
	*([0] + [8408]) = [0]
	
.LABEL $label$2
	*([0] + [8408]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $166([8396])
	return [0]
	
.LABEL $label$1
	CALL $166([8396])
	return [-1]
}

int_32 .FUNC $153 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

int_32 .FUNC $150 ()
{
	return [8388]
}

void .FUNC $151 (int_32 $0)
{
}

int_32 .FUNC $156 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $155($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $157 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_64 .FUNC $154 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$2 = [1]
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$2 = [0]
	
.LABEL $label$2
	$4 = (int_64)0
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$4 = (int_64)0
	
.LOOP $label$7:
	$4 = (int_64))(((int_64)$4 * (int_64)10) - (CASTING int_64)(int_32 $1))
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $4 ? (int_64))((int_64)0 - $4) : $2 )
}

int_32 .FUNC $155 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $158 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $156($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_64 .FUNC $159 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $158($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $150()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $158($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [19537]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $157($0, (int_64)0)
	*(CALL $150()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $158($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $158($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $158($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $158($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [19537])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [19537]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19537]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $158($0)
	$5 = *(($6 + [19537]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $158($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [19537]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [19793]))
	$8 = (int_64)0
	$5 = *(($6 + [19537]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19537]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $158($0)
	$5 = *(($6 + [19537]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $158($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [19537]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $157($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [19537]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [19537]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $158($0) + [19537]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $150()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $150()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $150()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_64 .FUNC $69 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [80])
	$global$0 = $1
	$2 = ($0 + [304])
	$3 = *($2)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$1 }
	$3 = (int_64)0
	$4 = ($0 + [288])
	$5 = CALL db_lowerbound_i64(*($4), *(($0 + [296])), (int_64)-6497942333781180416, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $48($4, $5)
	*($1 + [44]) = [0]
	*($1 + [40]) = $4
	$3 = *(*(CALL $74(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [304])) = $3
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	*($1) = *($2)
	$2 = ($0 + [104])
	$3 = *($2)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$3 }
	$3 = (int_64)0
	$4 = ($0 + [88])
	$5 = CALL db_lowerbound_i64(*($4), *(($0 + [96])), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	CALL $75($4, $5)
	*($1 + [44]) = [0]
	*($1 + [40]) = $4
	$3 = *(*(CALL $76(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*(($0 + [104])) = $3
	
.LABEL $label$3
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	*(($1 + [8])) = *($2)
	$2 = ($0 + [64])
	$3 = *($2)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$5 }
	$3 = (int_64)0
	$4 = ($0 + [48])
	$5 = CALL db_lowerbound_i64(*($4), *(($0 + [56])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	CALL $44($4, $5)
	*($1 + [44]) = [0]
	*($1 + [40]) = $4
	$3 = *(*(CALL $77(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*(($0 + [64])) = $3
	
.LABEL $label$5
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	*(($1 + [16])) = *($2)
	$2 = ($0 + [168])
	$4 = ($0 + [184])
	$3 = *($4)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$7 }
	$3 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($2), *(($0 + [176])), (int_64)-4425746941103570944, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	CALL $78($2, $5)
	*($1 + [44]) = [0]
	*($1 + [40]) = $2
	$3 = *(*(CALL $79(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*(($0 + [184])) = $3
	
.LABEL $label$7
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	$3 = *($4)
	*(($1 + [24])) = $3
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$9 }
	$3 = (int_64)0
	$4 = CALL db_lowerbound_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-4425746941103570944, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$10 }
	CALL $78($2, $4)
	*($1 + [44]) = [0]
	*($1 + [40]) = $2
	$3 = *(*(CALL $79(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*(($0 + [184])) = $3
	
.LABEL $label$9
	$5 = ($0 + [248])
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	*(($1 + [32])) = *(($0 + [184]))
	$2 = *(($0 + [276]))
	if ( ((int_32)$2 == (int_32)*(($0 + [272]))) ){ goto $label$13 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$5), [17702])
	if ( $2 ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	$2 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$12 }
	$2 = CALL $80($5, $2)
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$5), [17702])
	goto $label$11 
	
.LABEL $label$12
	$2 = $1
	
.LABEL $label$11
	*((($1 + [40]) + [32])) = *(($2 + [32]))
	*(($4 = (($1 + [40]) + [24]))) = *(($2 + [24]))
	*((($1 + [40]) + [16])) = *(($2 + [16]))
	*((($1 + [40]) + [8])) = *(($2 + [8]))
	*($1 + [40]) = *($2)
	*($4) = ((int_64)*($4) + (int_64)1)
	CALL $81($5, ($1 + [40]), *($0))
	$3 = *($4)
	$global$0 = ($1 + [80])
	return $3
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $120($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $135($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $135($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $130($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $65($0, *($1))
	CALL $65($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

int_32 .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [19133])
	$3 = *($0 + [4])
	$4 = *($3 + [176])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-6497942333781180416, ($1 + [8]), *($3))
	*(*(($0 + [4])) + [176]) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($2 + [168]) == (int_32)$7), [17702])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$4 = CALL db_find_i64(*($7), *($7 + [8]), (int_64)-6497942333781180416, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $48($7, $4)
	CALL eosio_assert(((int_32)*($2 + [168]) == (int_32)$7), [17702])
	
.LABEL $label$3
	*($2 + [176]) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [17702])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)6820308914865700864, (int_64)6820308914865700864)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $94($0, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [17702])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [17935])
	CALL $95($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $96($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)$0), [18198])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [18243])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_32)*(*(($5 + [-24]))) != (int_32)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_32)*(*($8)) != (int_32)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18293])
	$7 = *($4)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$6 = ($5 + [-24])
	$3 = *($6)
	*($6) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [16])))
}

int_32 .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [172]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17887])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4994024801686257664)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [17833])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17833])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $60(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17753])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $167($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([192])
	CALL $57($5)
	*($5 + [168]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [64])
	*($3 + [60]) = ($5 + [96])
	*($3 + [64]) = ($5 + [104])
	*($3 + [68]) = ($5 + [105])
	*($3 + [72]) = ($5 + [106])
	*($3 + [76]) = ($5 + [112])
	*($3 + [80]) = ($5 + [128])
	*($3 + [84]) = ($5 + [144])
	*($3 + [88]) = ($5 + [152])
	*($3 + [92]) = ($5 + [160])
	CALL $123(($3 + [32]), ($3 + [24]))
	*($5 + [176]) = [-1]
	*($5 + [172]) = $1
	*($3 + [24]) = $5
	$6 = ((int_64)*($5) ^ (int_64)-1)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $59(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $171($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($0 + [4]), ($4 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [18126])
	CALL memcpy(*($0 + [4]), ($4 + [16]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [18126])
	CALL memcpy(*($0 + [4]), ($4 + [48]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($2 + [8]) = $4
	CALL $124(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [18198])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [18243])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)$7 != (int_64)*(*(($6 + [-24])))) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)$7 != (int_64)*(*($9))) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18293])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*(($1 + [172])))
	$6 = *($1 + [176])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4994024801686257664, ($2 + [8]), ((int_64)*($1) ^ (int_64)-1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($3 + [15]) = $1
	$1 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($4 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = (($4 + [17]) & [-16])
	$1 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($3 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $137($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $130($0)
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($1 + [8])
	$4 = *($2)
	$6 = *(($1 + [36]))
	$5 = *(($1 + [32]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$2 = ($6 + [-24])
	$7 = *($2)
	if ( ((int_32)*($7) == (int_32)$4) ){ goto $label$3 }
	$6 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [12]) == (int_32)$3), [17702])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$2 = CALL db_find_i64(*($3), *(($1 + [16])), (int_64)-6749910679009886208, (CASTING uint_64)(uint_32 $4))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $35($3, $2)
	CALL eosio_assert(((int_32)*($7 + [12]) == (int_32)$3), [17702])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [19163])
	*(($0 + [8])) = *(($7 + [8]))
	*($0) = *($7)
}

void .FUNC $88 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [18132])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([192])
	CALL $27($3)
	*($3 + [168]) = $1
	CALL $114(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [172])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $102(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_64 .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [80])
	$global$0 = $1
	$2 = ($0 + [304])
	$3 = *($2)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$1 }
	$3 = (int_64)0
	$4 = ($0 + [288])
	$5 = CALL db_lowerbound_i64(*($4), *(($0 + [296])), (int_64)-6497942333781180416, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $48($4, $5)
	*($1 + [44]) = [0]
	*($1 + [40]) = $4
	$3 = *(*(CALL $74(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [304])) = $3
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	*($1) = *($2)
	$2 = ($0 + [104])
	$3 = *($2)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$3 }
	$3 = (int_64)0
	$4 = ($0 + [88])
	$5 = CALL db_lowerbound_i64(*($4), *(($0 + [96])), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	CALL $75($4, $5)
	*($1 + [44]) = [0]
	*($1 + [40]) = $4
	$3 = *(*(CALL $76(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*(($0 + [104])) = $3
	
.LABEL $label$3
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	*(($1 + [8])) = *($2)
	$2 = ($0 + [64])
	$3 = *($2)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$5 }
	$3 = (int_64)0
	$4 = ($0 + [48])
	$5 = CALL db_lowerbound_i64(*($4), *(($0 + [56])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	CALL $44($4, $5)
	*($1 + [44]) = [0]
	*($1 + [40]) = $4
	$3 = *(*(CALL $77(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*(($0 + [64])) = $3
	
.LABEL $label$5
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	*(($1 + [16])) = *($2)
	$2 = ($0 + [168])
	$4 = ($0 + [184])
	$3 = *($4)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$7 }
	$3 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($2), *(($0 + [176])), (int_64)-4425746941103570944, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	CALL $78($2, $5)
	*($1 + [44]) = [0]
	*($1 + [40]) = $2
	$3 = *(*(CALL $79(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*(($0 + [184])) = $3
	
.LABEL $label$7
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	$3 = *($4)
	*(($1 + [24])) = $3
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$9 }
	$3 = (int_64)0
	$4 = CALL db_lowerbound_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-4425746941103570944, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$10 }
	CALL $78($2, $4)
	*($1 + [44]) = [0]
	*($1 + [40]) = $2
	$3 = *(*(CALL $79(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*(($0 + [184])) = $3
	
.LABEL $label$9
	$4 = ($0 + [248])
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	*(($1 + [32])) = *(($0 + [184]))
	$2 = *(($0 + [276]))
	if ( ((int_32)$2 == (int_32)*(($0 + [272]))) ){ goto $label$13 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$4), [17702])
	if ( $2 ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	$2 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$12 }
	$2 = CALL $80($4, $2)
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$4), [17702])
	goto $label$11 
	
.LABEL $label$12
	$2 = $1
	
.LABEL $label$11
	*((($1 + [40]) + [32])) = *(($2 + [32]))
	*((($1 + [40]) + [24])) = *(($2 + [24]))
	*((($1 + [40]) + [16])) = *(($2 + [16]))
	*((($1 + [40]) + [8])) = *(($2 + [8]))
	*($1 + [40]) = *($2)
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)1)
	CALL $81($4, ($1 + [40]), *($0))
	$3 = *($1 + [40])
	$global$0 = ($1 + [80])
	return $3
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($1 + [48])
	$4 = *($2)
	$6 = *(($1 + [76]))
	$5 = *(($1 + [72]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$2 = ($6 + [-24])
	$7 = *($2)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$3 }
	$6 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$3), [17702])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$2 = CALL db_find_i64(*($3), *(($1 + [56])), (int_64)7035937633859534848, $4)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $44($3, $2)
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$3), [17702])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [17409])
	CALL memcpy($0, $7, [160])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$6 = *($1 + [4])
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($1 + [4])
	$2 = *($6 + [16])
	$8 = *($2)
	if ( ((int_32)$8 < (int_32)$2) ){ goto $label$2 }
	$9 = [2]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($1 + [4])
	$9 = [20]
	goto $label$1 
	
.LABEL $label$2
	$9 = [19]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$39 
	
.LABEL $label$41
	if ( ((int_32)$2 >= (int_32)$8) ){ goto $label$16 }
	$9 = [18]
	goto $label$4 
	
.LABEL $label$40
	$7 = ($6 + [4])
	$2 = *($6 + [4])
	if ( ($2 == 0) ){ goto $label$19 }
	$9 = [0]
	goto $label$4 
	
.LABEL $label$39
	$6 = $7
	$9 = [1]
	goto $label$4 
	
.LABEL $label$38
	$7 = $6
	$6 = $2
	$2 = *($6 + [16])
	if ( ((int_32)$8 >= (int_32)$2) ){ goto $label$20 }
	$9 = [19]
	goto $label$4 
	
.LABEL $label$37
	$2 = *($6)
	if ( $2 ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$36
	$7 = $6
	$9 = [3]
	goto $label$4 
	
.LABEL $label$35
	$2 = *($7)
	if ( ($2 == 0) ){ goto $label$15 }
	$9 = [4]
	goto $label$4 
	
.LABEL $label$34
	*($0 + [4]) = [0]
	*($0) = $2
	return 
	
.LABEL $label$33
	*(($10 = CALL _Znwj([40])) + [24]) = (int_64)0
	*($10 + [16]) = *(*($4))
	*($10 + [32]) = (int_64)1398362884
	CALL eosio_assert([1], [18347])
	$11 = (int_64)5462355
	$2 = [0]
	$9 = [6]
	goto $label$4 
	
.LABEL $label$32
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$9 = [12]
	goto $label$4 
	
.LABEL $label$31
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$9 = [13]
	goto $label$4 
	
.LABEL $label$30
	$11 = $12
	$8 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$29
	$11 = $12
	$9 = [15]
	goto $label$4 
	
.LABEL $label$28
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$9 = [16]
	goto $label$4 
	
.LABEL $label$27
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$8 = ((int_32)$2 < (int_32)[6])
	$4 = ($2 + [1])
	$2 = $4
	if ( $8 ){ goto $label$5 }
	$9 = [17]
	goto $label$4 
	
.LABEL $label$26
	$8 = [1]
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$25
	$8 = [0]
	$9 = [8]
	goto $label$4 
	
.LABEL $label$24
	CALL eosio_assert($8, [18396])
	*($10 + [8]) = $6
	*($10) = (int_64)0
	*($7) = $10
	$6 = *(*($1))
	if ( ($6 == 0) ){ goto $label$8 }
	$9 = [9]
	goto $label$4 
	
.LABEL $label$23
	*($1) = $6
	$6 = *($7)
	goto $label$7 
	
.LABEL $label$22
	$6 = $10
	$9 = [10]
	goto $label$4 
	
.LABEL $label$21
	CALL $49(*($1 + [4]), $6)
	*($1 + [8]) = (*($1 + [8]) + [1])
	*($0 + [4]) = [1]
	*($0) = $10
	return 
	
.LABEL $label$20
	$9 = [2]
	goto $label$4 
	
.LABEL $label$19
	$9 = [3]
	goto $label$4 
	
.LABEL $label$18
	$9 = [20]
	goto $label$4 
	
.LABEL $label$17
	$9 = [1]
	goto $label$4 
	
.LABEL $label$16
	$9 = [3]
	goto $label$4 
	
.LABEL $label$15
	$9 = [5]
	goto $label$4 
	
.LABEL $label$14
	$9 = [6]
	goto $label$4 
	
.LABEL $label$13
	$9 = [8]
	goto $label$4 
	
.LABEL $label$12
	$9 = [6]
	goto $label$4 
	
.LABEL $label$11
	$9 = [8]
	goto $label$4 
	
.LABEL $label$10
	$9 = [7]
	goto $label$4 
	
.LABEL $label$9
	$9 = [7]
	goto $label$4 
	
.LABEL $label$8
	$9 = [11]
	goto $label$4 
	
.LABEL $label$7
	$9 = [10]
	goto $label$4 
	
.LABEL $label$6
	$9 = [14]
	goto $label$4 
	
.LABEL $label$5
	$9 = [15]
	goto $label$4 
	$9
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [18347])
	$5 = [0]
	$6 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$8 = [1]
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$9 = ($5 + [1])
	$5 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [18396])
	if ( (*($2) & [1]) ){ goto $label$7 }
	$5 = ($2 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($2 + [8])
	
.LABEL $label$6
	$5 = CALL $161($5, ($4 + [12]), [16])
	$8 = *($4 + [12])
	$10 = *($2)
	if ( ($10 & [1]) ){ goto $label$9 }
	$9 = ($2 + [1])
	$2 = uint_32($10 >> [1])
	goto $label$8 
	
.LABEL $label$9
	$9 = *($2 + [8])
	$2 = *($2 + [4])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$8 == (int_32)($9 + $2)), [19017])
	$6 = *($3)
	if ( ((int_64)$6 != (int_64)1397703940) ){ goto $label$11 }
	$5 = ((int_32)$5 * (int_32)[1000])
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_64)$6 != (int_64)293370680068) ){ goto $label$12 }
	$5 = ((int_32)$5 * (int_32)[100000])
	goto $label$10 
	
.LABEL $label$12
	if ( ((int_64)$6 != (int_64)289176438024) ){ goto $label$13 }
	$5 = ((int_32)$5 * (int_32)[10000])
	goto $label$10 
	
.LABEL $label$13
	if ( ((int_64)$6 != (int_64)310651471112) ){ goto $label$14 }
	$5 = ((int_32)$5 * (int_32)[100000])
	goto $label$10 
	
.LABEL $label$14
	$5 = ( ((int_32)$5 * (int_32)[10000000]) ? $5 : ((int_64)$6 == (int_64)293455873288) )
	
.LABEL $label$10
	*(($0 + [8])) = $6
	*($0) = (CASTING int_64)(int_32 $5)
	$global$0 = ($4 + [16])
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL _Znwj([16])
	*($0 + [8]) = $3
	*($0) = (int_64)55834574865
	CALL memset($3, [46], [13])
	*($3 + [13]) = [0]
	$5 = *($1)
	$1 = (CASTING uint_32)(uint_64 $5)
	$4 = *([0] + [18708])
	*($3 + [12]) = *(($4 + ($1 & [15])))
	*($3 + [11]) = *(($4 + (uint_32($1 >> [4]) & [31])))
	*($3 + [10]) = *(($4 + (uint_32($1 >> [9]) & [31])))
	*($3 + [9]) = *(($4 + (uint_32($1 >> [14]) & [31])))
	*($3 + [8]) = *(($4 + (uint_32($1 >> [19]) & [31])))
	*($3 + [7]) = *(($4 + (uint_32($1 >> [24]) & [31])))
	*($3 + [6]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)29)) & [31])))
	*($3 + [5]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)34)) & [31])))
	*($3 + [4]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)39)) & [31])))
	*($3 + [3]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)44)) & [31])))
	*($3 + [2]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)49)) & [31])))
	*($3 + [1]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)54)) & [31])))
	*(*($0 + [8])) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)59))))
	$4 = ($3 & [1])
	$3 = *($0)
	$3 = ( *($0 + [4]) ? uint_32($3 >> [1]) : $4 )
	$1 = ( *($0 + [8]) ? ($0 + [1]) : $4 )
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($1 + $3)
	$6 = ($3 + [-1])
	$3 = $6
	if ( ((int_32)*(($4 + [-1])) == (int_32)[46]) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$1 }
	CALL $132($2, $0, [0], ($6 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$4 }
	*($0) = [0]
	goto $label$3 
	
.LABEL $label$4
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$3
	CALL $135($0, [0])
	*(($0 + [8])) = *(($2 + [8]))
	*($0) = *($2)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [17702])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)6820308914865700864, (int_64)6820308914865700864)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $94($1, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [17702])
	
.LABEL $label$2
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$1
	*($4 + [8]) = $3
	CALL $109($4, $1, $2, ($4 + [8]))
	$1 = *($4 + [4])
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	$global$0 = ($4 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$0), [17702])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $80($0, $4)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$0), [17702])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [17935])
	CALL $97($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $98($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17753])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $167($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [40]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	CALL $99(($3 + [40]), ($3 + [32]))
	*($5 + [44]) = $1
	*($3 + [32]) = $5
	*($3 + [40]) = (int_64)7235159550150574080
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7235159550150574080
	*($7 + [16]) = $1
	*($3 + [32]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $100(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $171($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $149 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC $148 (int_32 $0)
{
	return (($0 + [-48]) <= [10])
}

void .FUNC $145 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $144 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $164($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $134($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $147 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $146 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $141 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $144($1, $0, [17330])
	CALL $145()
	(unreachable)
}

int_32 .FUNC $140 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $163(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_64 .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $164([8346])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8346], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $150())
	*(CALL $150()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $160($4, ($3 + [12]), $2)
	$0 = CALL $150()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $141($3)
	
.LABEL $label$1
	CALL $142($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $142 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $144($1, $0, [17301])
	CALL $146()
	(unreachable)
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [18198])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [18243])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18293])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*(($1 + [172])))
	$6 = *($1 + [176])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6497942333781180416, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [18198])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [18243])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18293])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [92]))
	$6 = *(($1 + [96]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865212519383040, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [100]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865212519383041, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $147($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [18198])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [18243])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18293])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [164]))
}

int_32 .FUNC $76 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [92]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17887])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4229865212519383040)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [17833])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17833])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $75(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $77 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [164]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17887])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7035937633859534848)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [17833])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17833])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $44(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $74 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [172]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17887])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6497942333781180416)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [17833])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17833])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $48(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17753])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $167($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([104])
	CALL $103($5)
	*($5 + [88]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [60])
	*($3 + [64]) = ($5 + [64])
	*($3 + [68]) = ($5 + [72])
	*($3 + [72]) = ($5 + [80])
	CALL $104(($3 + [32]), ($3 + [24]))
	*($5 + [92]) = $1
	*($5 + [96 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $105(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $171($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17753])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $167($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17776])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[31]), [17776])
	CALL memcpy(($5 + [16]), ($2 + [8]), [32])
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $70(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $171($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $79 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [52]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17887])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4425746941103570944)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [17833])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17833])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $78(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $98 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [18132])
	*(($5 = CALL _Znwj([56])) + [40]) = $1
	$3 = *($3)
	*($5) = *($3)
	*(($6 = ($5 + [8]))) = *(($3 + [8]))
	*(($7 = ($5 + [16]))) = *(($3 + [16]))
	*(($8 = ($5 + [24]))) = *(($3 + [24]))
	*(($9 = ($5 + [32]))) = *(($3 + [32]))
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	*($4 + [76]) = $6
	*($4 + [72]) = $5
	*($4 + [80]) = $7
	*($4 + [84]) = $8
	*($4 + [88]) = $9
	CALL $108(($4 + [72]), ($4 + [64]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, $2, (int_64)7235159550150574080, $4, [40])
	*($5 + [44]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159550150574080) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159550150574081
	
.LABEL $label$1
	*($4 + [72]) = $5
	*($4) = (int_64)7235159550150574080
	*($4 + [48]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159550150574080
	*($3 + [16]) = $6
	*($4 + [72]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $100(($1 + [24]), ($4 + [72]), $4, ($4 + [48]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [96])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [17753])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $167($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*(($9 = CALL _Znwj([32])) + [8]) = (int_64)1397703940
	*($9) = (int_64)0
	CALL eosio_assert([1], [18347])
	$10 = ($9 + [8])
	$11 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$11 = $12
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$11 = $12
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [18396])
	*($9 + [16]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [17776])
	CALL memcpy($9, $7, [8])
	CALL eosio_assert(((int_32)($6 & [-8]) != (int_32)[8]), [17776])
	CALL memcpy($10, ($7 + [8]), [8])
	*($9 + [20]) = $1
	*($3 + [24]) = $9
	*($3 + [16]) = (int_64)6820308914865700864
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = (int_64)6820308914865700864
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $110($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $171($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [32])
	return $9
}

void .FUNC $95 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [17970])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [18016])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [18067])
	CALL eosio_assert([1], [18126])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18126])
	CALL memcpy(($4 | [8]), $5, [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [18132])
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)1397703940
	*($5) = (int_64)0
	CALL eosio_assert([1], [18347])
	$6 = ($5 + [8])
	$7 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [18396])
	*($5 + [16]) = $1
	$8 = *($3)
	*($5) = *($8)
	*(($5 + [8])) = *(($8 + [8]))
	CALL eosio_assert([1], [18126])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL eosio_assert([1], [18126])
	CALL memcpy((($4 + [16]) | [8]), $6, [8])
	$10 = CALL db_store_i64(*($1 + [8]), (int_64)6820308914865700864, $2, (int_64)6820308914865700864, ($4 + [16]), [16])
	*($5 + [20]) = $10
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$6 }
	*(($1 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$6
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)6820308914865700864
	*($4 + [4]) = $10
	$11 = ($1 + [28])
	$8 = *($11)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = (int_64)6820308914865700864
	*($8 + [16]) = $10
	*($4 + [8]) = [0]
	*($8) = $5
	*($11) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $110(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$7
	*($0 + [4]) = $5
	*($0) = $1
	$8 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($8 == 0) ){ goto $label$9 }
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$global$0 = ($4 + [32])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [17970])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [18016])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [32]))) = *(($3 + [32]))
	*(($6 = ($1 + [24]))) = *(($3 + [24]))
	*(($7 = ($1 + [16]))) = *(($3 + [16]))
	*(($8 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [18067])
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	*($4 + [76]) = $8
	*($4 + [72]) = $1
	*($4 + [80]) = $7
	*($4 + [84]) = $6
	*($4 + [88]) = $5
	CALL $108(($4 + [72]), ($4 + [64]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159550150574080) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159550150574081
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($2 + [8])
	$5 = ((int_64)*($2) * (int_64)*($1))
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18347])
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [18396])
	$7 = *($1)
	if ( ((uint_32)$7 > (uint_32)[10]) ){ goto $label$6 }
	CALL $113($3, $0, ($2 + [8]))
	$6 = *($3)
	$8 = *($3 + [8])
	CALL eosio_assert([1], [18416])
	CALL eosio_assert([1], [18431])
	CALL eosio_assert(((int_64)$4 == (int_64)$8), [19040])
	CALL eosio_assert(((int_64)$5 <= (int_64)((int_64)$6 / (int_64)20)), [19177])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$9 = ($2 + [8])
	if ( ((uint_32)$7 > (uint_32)[100]) ){ goto $label$7 }
	CALL $113($3, $0, $9)
	$6 = *($3)
	$8 = *($3 + [8])
	CALL eosio_assert([1], [18416])
	CALL eosio_assert([1], [18431])
	CALL eosio_assert(((int_64)$4 == (int_64)$8), [19040])
	CALL eosio_assert(((int_64)$5 <= (int_64)((int_64)$6 / (int_64)10)), [19278])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	CALL $113($3, $0, $9)
	$6 = *($3)
	$8 = *($3 + [8])
	CALL eosio_assert([1], [18416])
	CALL eosio_assert([1], [18431])
	CALL eosio_assert(((int_64)$4 == (int_64)$8), [19040])
	CALL eosio_assert(((int_64)$5 <= (int_64)((int_64)$6 / (int_64)4)), [19379])
	$global$0 = ($3 + [16])
}

int_64 .FUNC $91 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [80])
	$global$0 = $1
	$2 = ($0 + [304])
	$3 = *($2)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$1 }
	$3 = (int_64)0
	$4 = ($0 + [288])
	$5 = CALL db_lowerbound_i64(*($4), *(($0 + [296])), (int_64)-6497942333781180416, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $48($4, $5)
	*($1 + [44]) = [0]
	*($1 + [40]) = $4
	$3 = *(*(CALL $74(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [304])) = $3
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	*($1) = *($2)
	$2 = ($0 + [104])
	$3 = *($2)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$3 }
	$3 = (int_64)0
	$4 = ($0 + [88])
	$5 = CALL db_lowerbound_i64(*($4), *(($0 + [96])), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	CALL $75($4, $5)
	*($1 + [44]) = [0]
	*($1 + [40]) = $4
	$3 = *(*(CALL $76(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*(($0 + [104])) = $3
	
.LABEL $label$3
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	*(($1 + [8])) = *($2)
	$2 = ($0 + [64])
	$3 = *($2)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$5 }
	$3 = (int_64)0
	$4 = ($0 + [48])
	$5 = CALL db_lowerbound_i64(*($4), *(($0 + [56])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	CALL $44($4, $5)
	*($1 + [44]) = [0]
	*($1 + [40]) = $4
	$3 = *(*(CALL $77(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*(($0 + [64])) = $3
	
.LABEL $label$5
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	*(($1 + [16])) = *($2)
	$2 = ($0 + [168])
	$4 = ($0 + [184])
	$3 = *($4)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$7 }
	$3 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($2), *(($0 + [176])), (int_64)-4425746941103570944, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	CALL $78($2, $5)
	*($1 + [44]) = [0]
	*($1 + [40]) = $2
	$3 = *(*(CALL $79(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*(($0 + [184])) = $3
	
.LABEL $label$7
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	$3 = *($4)
	*(($1 + [24])) = $3
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$9 }
	$3 = (int_64)0
	$4 = CALL db_lowerbound_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-4425746941103570944, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$10 }
	CALL $78($2, $4)
	*($1 + [44]) = [0]
	*($1 + [40]) = $2
	$3 = *(*(CALL $79(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*(($0 + [184])) = $3
	
.LABEL $label$9
	$5 = ($0 + [248])
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	*(($1 + [32])) = *(($0 + [184]))
	$2 = *(($0 + [276]))
	if ( ((int_32)$2 == (int_32)*(($0 + [272]))) ){ goto $label$13 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$5), [17702])
	if ( $2 ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	$2 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$12 }
	$2 = CALL $80($5, $2)
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$5), [17702])
	goto $label$11 
	
.LABEL $label$12
	$2 = $1
	
.LABEL $label$11
	*((($1 + [40]) + [32])) = *(($2 + [32]))
	*((($1 + [40]) + [24])) = *(($2 + [24]))
	*((($1 + [40]) + [16])) = *(($2 + [16]))
	*(($4 = (($1 + [40]) + [8]))) = *(($2 + [8]))
	*($1 + [40]) = *($2)
	*($4) = ((int_64)*($4) + (int_64)1)
	CALL $81($5, ($1 + [40]), *($0))
	$3 = *($4)
	$global$0 = ($1 + [80])
	return $3
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [18132])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([104])
	CALL $103($3)
	*($3 + [88]) = $1
	CALL $119(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [92])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $105(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	if ( ((int_64)*($1 + [8]) != (int_64)1397703940) ){ goto $label$1 }
	*($2 + [24]) = (int_64)1397703940
	*($2 + [16]) = (int_64)0
	CALL eosio_assert([1], [18347])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$3 = $5
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$6 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$6 = [0]
	
.LABEL $label$2
	CALL eosio_assert($6, [18396])
	$4 = ($0 + [208])
	CALL $82($2, $4, *($0), ($2 + [16]))
	CALL eosio_assert(((int_64)*(($1 + [8])) == (int_64)*($2 + [8])), [18505])
	$3 = ((int_64)*($2) + (int_64)*($1))
	*($2) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [18548])
	CALL eosio_assert(((int_64)*($2) < (int_64)4611686018427387904), [18567])
	CALL $67($4, $2, *($0))
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $139 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $162(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $130 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $132 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $134($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $134 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $164($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $134($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $134($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $171($0)
	
.LABEL $label$1
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $167($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [18347])
	$8 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$8 = $9
	$2 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$8 = $9
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [18396])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [84]) = $6
	*($3 + [80]) = $6
	*($3 + [88]) = ($6 + $7)
	*($3 + [48]) = ($3 + [80])
	*($3 + [64]) = $3
	CALL $25(($3 + [64]), ($3 + [48]))
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL $171($6)
	
.LABEL $label$9
	*(($2 = (($3 + [64]) + [8]))) = *(($3 + [24]))
	*($3 + [64]) = *($3 + [16])
	$8 = *(($3 + [8]))
	$9 = *($3)
	$1 = CALL $131(($3 + [48]), ($3 + [32]))
	*((($3 + [80]) + [8])) = *($2)
	*($3 + [104]) = $9
	*($3 + [96]) = $8
	*($3 + [80]) = *($3 + [64])
	$2 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$10 }
	$5 = *((*($2) + $5))
	
.LABEL $label$10
	CALL void $2((int_32 ($3 + [104])), (int_32 ($3 + [96])), (int_32 ($3 + [80])), (int_32 $1), (int_32 $5))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$11
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$12
	$global$0 = ($3 + [112])
	return [1]
}

int_32 .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [312]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [316])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [312]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [272]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [276])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [272]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [232]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [236])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [232]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [192]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [196])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [192]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [156])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [152]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$26 }
	$2 = ($0 + [116])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$30 }
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$29 }
	$3 = *(($0 + [112]))
	goto $label$27 
	
.LABEL $label$28
	$3 = $1
	
.LABEL $label$27
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$26
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$31 }
	$2 = ($0 + [76])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$33 }
	
.LOOP $label$34:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$35 }
	CALL _ZdlPv($4)
	
.LABEL $label$35
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$34 }
	$3 = *(($0 + [72]))
	goto $label$32 
	
.LABEL $label$33
	$3 = $1
	
.LABEL $label$32
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$31
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$36 }
	$2 = ($0 + [36])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$38 }
	
.LOOP $label$39:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$40 }
	CALL _ZdlPv($4)
	
.LABEL $label$40
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$39 }
	$3 = *(($0 + [32]))
	goto $label$37 
	
.LABEL $label$38
	$3 = $1
	
.LABEL $label$37
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$36
	return $0
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [17776])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[19]), [17776])
	CALL memcpy($2, *($3 + [4]), [20])
	*($3 + [4]) = (*($3 + [4]) + [20])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [17776])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [17776])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [17776])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [17776])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [17776])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [17776])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [60])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [18126])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [18126])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [17776])
	CALL memcpy(($2 + [49]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [17776])
	CALL memcpy(($0 + [50]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy(($0 + [56]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [17776])
	CALL memcpy(($0 + [64]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [19517])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $30($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [17776])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $2 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = $1
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = $1
	$4 = ($4 & [1])
	$4 = *($0)
	if ( (( *($0 + [4]) ? uint_32($4 >> [1]) : $4 ) == 0) ){ goto $label$1 }
	$6 = ($0 + [1])
	$5 = ($0 + [8])
	$4 = ( *($5) ? $6 : $4 )
	$7 = ($2 + [-1])
	$3 = $1
	
.LOOP $label$2:
	$8 = *($4)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$3 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$4 }
	$2 = ($8 + [-87])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$2 = ($8 + [-55])
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	CALL eosio_assert([0], [8192])
	
.LABEL $label$3
	$9 = ($2 << [4])
	*($3) = $9
	$11 = uint_32($11 >> [1])
	$12 = ($0 + [4])
	$13 = *($12)
	$11 = *($0)
	$2 = ($11 & [1])
	$8 = *($5)
	$10 = ($4 + [1])
	if ( ((int_32)$10 == (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$9 }
	$8 = *($10)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$7 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$8 }
	$2 = ($8 + [-87])
	goto $label$7 
	
.LABEL $label$9
	$4 = $10
	$3 = ($3 + [1])
	if ( $7 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$8
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$10 }
	$2 = ($8 + [-55])
	goto $label$7 
	
.LABEL $label$10
	$2 = [0]
	CALL eosio_assert([0], [8192])
	$9 = *($3)
	
.LABEL $label$7
	*($3) = ($9 | $2)
	$4 = ($4 + [2])
	$2 = *($0)
	$11 = uint_32($2 >> [1])
	$2 = ($2 & [1])
	$13 = *($12)
	$8 = *($5)
	$3 = ($3 + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	$7 = ($7 + [-1])
	if ( ((int_32)$4 != (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$2 }
	
.LABEL $label$1
	return ($3 - $1)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $167($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8384])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $167($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $125 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$0 = ($global$0 - [208])
	$global$0 = $0
	CALL memcpy(($0 + [8]), [17080], [200])
	*([0] + [8372]) = [8376]
	*([0] + [8376 align=4]) = (int_64)0
	$1 = (($0 + [8]) + [200])
	$2 = ($0 + [8])
	$3 = [0]
	$4 = [0]
	$5 = [8376]
	if ( ((int_32)[8376] != (int_32)[8376]) ){ goto $label$2 }
	$6 = [20]
	goto $label$1 
	
.LABEL $label$2
	$6 = [2]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$45 
	
.LABEL $label$53
	$3 = *([0] + [8376])
	$4 = $3
	$5 = [8376]
	if ( ((int_32)*([0] + [8372]) == (int_32)[8376]) ){ goto $label$29 }
	$6 = [2]
	goto $label$3 
	
.LABEL $label$52
	$7 = $4
	if ( ($4 == 0) ){ goto $label$13 }
	$6 = [3]
	goto $label$3 
	
.LABEL $label$51
	$5 = $7
	$7 = *($5 + [4])
	if ( $7 ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$50
	$7 = [8376]
	$6 = [23]
	goto $label$3 
	
.LABEL $label$49
	$5 = *($7 + [8])
	$8 = ((int_32)*($5) == (int_32)$7)
	$7 = $5
	if ( $8 ){ goto $label$12 }
	$6 = [4]
	goto $label$3 
	
.LABEL $label$48
	$9 = *($2)
	if ( ((uint_64)*($5 + [16]) >= (uint_64)$9) ){ goto $label$28 }
	$6 = [20]
	goto $label$3 
	
.LABEL $label$47
	if ( ($4 == 0) ){ goto $label$4 }
	$6 = [21]
	goto $label$3 
	
.LABEL $label$46
	$3 = ($5 + [4])
	if ( (*($5 + [4]) == 0) ){ goto $label$18 }
	$6 = [0]
	goto $label$3 
	
.LABEL $label$45
	$2 = ($2 + [40])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$44
	if ( ($3 == 0) ){ goto $label$27 }
	$6 = [6]
	goto $label$3 
	
.LABEL $label$43
	$7 = [8376]
	$10 = *($3 + [16])
	if ( ((uint_64)$9 >= (uint_64)$10) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$42
	$7 = $3
	$3 = $4
	$10 = *($3 + [16])
	if ( ((uint_64)$9 >= (uint_64)$10) ){ goto $label$25 }
	$6 = [16]
	goto $label$3 
	
.LABEL $label$41
	$4 = *($3)
	if ( $4 ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$40
	if ( ((uint_64)$10 >= (uint_64)$9) ){ goto $label$9 }
	$6 = [13]
	goto $label$3 
	
.LABEL $label$39
	$7 = ($3 + [4])
	$4 = *($3 + [4])
	if ( ($4 == 0) ){ goto $label$7 }
	$6 = [14]
	goto $label$3 
	
.LABEL $label$38
	$3 = $7
	goto $label$23 
	
.LABEL $label$37
	$3 = [8376]
	$5 = [8376]
	$6 = [9]
	goto $label$3 
	
.LABEL $label$36
	*((($7 = CALL _Znwj([56])) + [48])) = *(($2 + [32]))
	*(($7 + [40])) = *(($2 + [24]))
	*(($7 + [32])) = *(($2 + [16]))
	*(($7 + [24])) = *(($2 + [8]))
	*($7 + [16]) = *($2)
	*($7) = (int_64)0
	*($7 + [8]) = $5
	*($3) = $7
	$5 = *(*([0] + [8372]))
	if ( ($5 == 0) ){ goto $label$8 }
	$6 = [10]
	goto $label$3 
	
.LABEL $label$35
	*([0] + [8372]) = $5
	$7 = *($3)
	$6 = [11]
	goto $label$3 
	
.LABEL $label$34
	CALL $49(*([0] + [8376]), $7)
	*([0] + [8380]) = (*([0] + [8380]) + [1])
	$2 = ($2 + [40])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$33
	$5 = $3
	goto $label$26 
	
.LABEL $label$32
	$5 = $3
	$3 = $7
	if ( $4 ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$31
	$5 = $3
	$3 = $7
	goto $label$24 
	
.LABEL $label$30
	CALL $152([10], [0], [8192])
	$global$0 = ($0 + [208])
	return 
	
.LABEL $label$29
	$6 = [20]
	goto $label$3 
	
.LABEL $label$28
	$6 = [5]
	goto $label$3 
	
.LABEL $label$27
	$6 = [19]
	goto $label$3 
	
.LABEL $label$26
	$6 = [9]
	goto $label$3 
	
.LABEL $label$25
	$6 = [7]
	goto $label$3 
	
.LABEL $label$24
	$6 = [9]
	goto $label$3 
	
.LABEL $label$23
	$6 = [15]
	goto $label$3 
	
.LABEL $label$22
	$6 = [9]
	goto $label$3 
	
.LABEL $label$21
	$6 = [0]
	goto $label$3 
	
.LABEL $label$20
	$6 = [12]
	goto $label$3 
	
.LABEL $label$19
	$6 = [1]
	goto $label$3 
	
.LABEL $label$18
	$6 = [9]
	goto $label$3 
	
.LABEL $label$17
	$6 = [12]
	goto $label$3 
	
.LABEL $label$16
	$6 = [1]
	goto $label$3 
	
.LABEL $label$15
	$6 = [4]
	goto $label$3 
	
.LABEL $label$14
	$6 = [3]
	goto $label$3 
	
.LABEL $label$13
	$6 = [22]
	goto $label$3 
	
.LABEL $label$12
	$6 = [23]
	goto $label$3 
	
.LABEL $label$11
	$6 = [16]
	goto $label$3 
	
.LABEL $label$10
	$6 = [7]
	goto $label$3 
	
.LABEL $label$9
	$6 = [8]
	goto $label$3 
	
.LABEL $label$8
	$6 = [11]
	goto $label$3 
	
.LABEL $label$7
	$6 = [18]
	goto $label$3 
	
.LABEL $label$6
	$6 = [17]
	goto $label$3 
	
.LABEL $label$5
	$6 = [15]
	goto $label$3 
	
.LABEL $label$4
	$6 = [19]
	goto $label$3 
	$6
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18126])
	CALL memcpy(*($3 + [4]), ($2 + [49]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18126])
	CALL memcpy(*($3 + [4]), ($0 + [50]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), ($0 + [56]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), ($0 + [64]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_64 $44
	int_64 $45
	int_32 $46
	int_32 $47
	int_64 $48
	int_32 $49
	int_32 $50
	int_64 $51
	int_32 $52
	$4 = ($global$0 - [432])
	$global$0 = $4
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17381]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$10 = ($10 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($8)
	$11 = ($0 + [48])
	$5 = *($1)
	$10 = *(($0 + [76]))
	$12 = *(($0 + [72]))
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$6 }
	
.LOOP $label$8:
	$7 = ($10 + [-24])
	$13 = *($7)
	if ( ((int_64)*($13) == (int_64)$5) ){ goto $label$7 }
	$10 = $7
	if ( ((int_32)$12 != (int_32)$7) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($13 + [160]) == (int_32)$11), [17702])
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	$7 = CALL db_find_i64(*($11), *(($0 + [56])), (int_64)7035937633859534848, $5)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$13 = CALL $44($11, $7)
	CALL eosio_assert(((int_32)*($13 + [160]) == (int_32)$11), [17702])
	
.LABEL $label$5
	$7 = [0]
	$14 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($14, [17409])
	CALL eosio_assert((*($13 + [17]) == 0), [17424])
	$15 = ($0 + [288])
	*($4 + [184]) = $15
	CALL $45(($4 + [192]), ($4 + [184]), $1)
	$10 = *($4 + [196])
	if ( ($10 == 0) ){ goto $label$11 }
	if ( ((int_64)*($1) != (int_64)*($10 + [48])) ){ goto $label$10 }
	$5 = *($4 + [192])
	*($4 + [176]) = $5
	$7 = ((uint_64)$5 > (uint_64)(int_64)4294967295)
	$16 = (($4 + [176]) | [4])
	goto $label$9 
	
.LABEL $label$11
	*($4 + [180]) = [0]
	*($4 + [176]) = ($4 + [184])
	$16 = (($4 + [176]) | [4])
	goto $label$9 
	
.LABEL $label$10
	$7 = [0]
	*($4 + [180]) = [0]
	*($4 + [176]) = ($4 + [184])
	$16 = (($4 + [176]) | [4])
	
.LABEL $label$9
	CALL eosio_assert($7, [17441])
	$7 = *($16)
	*(($4 + [160])) = *(($7 + [80]))
	*(($4 + [168])) = *(($7 + [88]))
	*($4 + [144]) = *($7 + [64])
	*($4 + [152]) = *(($7 + [72]))
	CALL memcpy(($4 + [192]), $2, [32])
	CALL memcpy((($4 + [192]) + [32]), ($4 + [144]), [20])
	$5 = *($7 + [96])
	*($4 + [375]) = $5
	*($4 + [368]) = (uint_64)$5 >> (uint_64)(int_64)56)
	*($4 + [369]) = (uint_64)$5 >> (uint_64)(int_64)48)
	*($4 + [370]) = (uint_64)$5 >> (uint_64)(int_64)40)
	*($4 + [371]) = (uint_64)$5 >> (uint_64)(int_64)32)
	*($4 + [372]) = (uint_64)$5 >> (uint_64)(int_64)24)
	*($4 + [373]) = (uint_64)$5 >> (uint_64)(int_64)16)
	*($4 + [374]) = (uint_64)$5 >> (uint_64)(int_64)8)
	CALL memcpy(($4 + [244]), ($4 + [368]), [8])
	CALL sha256(($4 + [192]), [60], ($4 + [112]))
	$19 = (((uint_32)$7 / (uint_32)[36]) + [1])
	$18 = (((uint_32)$10 % (uint_32)[6]) + [1])
	$10 = ((uint_32)$7 / (uint_32)[6])
	$7 = (CASTING uint_32)(uint_64 ((uint_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($4 + [142]) << (int_64)8) | (int_64)*($4 + [143])) | (int_64)((int_64)*($4 + [141]) << (int_64)16)) | (int_64)((int_64)*($4 + [140]) << (int_64)24)) + (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($4 + [138]) << (int_64)8) | (int_64)*($4 + [139])) | (int_64)((int_64)*($4 + [137]) << (int_64)16)) | (int_64)((int_64)*($4 + [136]) << (int_64)24)) + (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($4 + [134]) << (int_64)8) | (int_64)*($4 + [135])) | (int_64)((int_64)*($4 + [133]) << (int_64)16)) | (int_64)((int_64)*($4 + [132]) << (int_64)24)) + (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($4 + [130]) << (int_64)8) | (int_64)*($4 + [131])) | (int_64)((int_64)*($4 + [129]) << (int_64)16)) | (int_64)((int_64)*($4 + [128]) << (int_64)24)) + (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($4 + [126]) << (int_64)8) | (int_64)*($4 + [127])) | (int_64)((int_64)*($4 + [125]) << (int_64)16)) | (int_64)((int_64)*($4 + [124]) << (int_64)24)) + (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($4 + [122]) << (int_64)8) | (int_64)*($4 + [123])) | (int_64)((int_64)*($4 + [121]) << (int_64)16)) | (int_64)((int_64)*($4 + [120]) << (int_64)24)) + (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($4 + [118]) << (int_64)8) | (int_64)*($4 + [119])) | (int_64)((int_64)*($4 + [117]) << (int_64)16)) | (int_64)((int_64)*($4 + [116]) << (int_64)24)) + (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)*($4 + [114]) << (int_64)8) | (int_64)*($4 + [115])) | (int_64)((int_64)*($4 + [113]) << (int_64)16)) | (int_64)((int_64)*($4 + [112]) << (int_64)24)) % (uint_64)(int_64)216) * (int_64)184)) % (uint_64)(int_64)216) * (int_64)184)) % (uint_64)(int_64)216) * (int_64)184)) % (uint_64)(int_64)216) * (int_64)184)) % (uint_64)(int_64)216) * (int_64)184)) % (uint_64)(int_64)216) * (int_64)184)) % (uint_64)(int_64)216) * (int_64)184)) % (uint_64)(int_64)216))
	$17 = (($7 - ((int_32)$10 * (int_32)[6])) + [1])
	CALL $46(($4 + [96]), $0, ($17 & [255]), $18, $19)
	*($4 + [88]) = ($0 + [88])
	CALL $47(($4 + [192]), ($4 + [88]), $1)
	$7 = *($4 + [196])
	if ( ($7 == 0) ){ goto $label$14 }
	if ( ((int_64)*($1) != (int_64)*($7 + [40])) ){ goto $label$13 }
	*($4 + [80]) = *($4 + [192])
	goto $label$12 
	
.LABEL $label$14
	*($4 + [84]) = [0]
	*($4 + [80]) = ($4 + [88])
	goto $label$12 
	
.LABEL $label$13
	*($4 + [84]) = [0]
	*($4 + [80]) = ($4 + [88])
	
.LABEL $label$12
	CALL eosio_assert([1], [18347])
	$5 = (int_64)5462355
	$7 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$5 = $6
	$10 = [1]
	$12 = $7
	$7 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$5 = $6
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$12 = ($7 + [1])
	$7 = $12
	if ( $10 ){ goto $label$19 }
	$10 = [1]
	$7 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$10 = [0]
	
.LABEL $label$15
	CALL eosio_assert($10, [18396])
	CALL eosio_assert([1], [18347])
	$5 = (int_64)5462355
	$7 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$25 }
	$5 = $6
	$20 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$5 = $6
	
.LOOP $label$27:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$26 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$12 = ($7 + [1])
	$7 = $12
	if ( $10 ){ goto $label$27 }
	$20 = [1]
	$7 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$20 = [0]
	
.LABEL $label$23
	CALL eosio_assert($20, [18396])
	if ( (*($4 + [84]) == 0) ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$22
	CALL eosio_assert([0], [18396])
	if ( (*($4 + [84]) == 0) ){ goto $label$20 }
	
.LABEL $label$21
	$21 = ($0 + [8])
	$22 = (($4 + [192]) + [81])
	$23 = (($4 + [40]) + [8])
	$24 = (($4 + [192]) + [136])
	$25 = (($4 + [96]) | [4])
	$7 = *($4 + [84])
	$26 = ($0 + [316])
	$27 = ($0 + [312])
	$28 = ($0 + [296])
	$29 = ($0 + [288])
	$30 = ($0 + [36])
	$31 = ($0 + [32])
	$32 = ($0 + [16])
	$33 = ($4 + [380])
	$34 = ($4 + [396])
	$35 = (($4 + [368]) + [40])
	$36 = ($4 + [412])
	$37 = ($4 + [420])
	$38 = (($4 + [368]) + [56])
	$39 = (($4 + [368]) + [60])
	$40 = ($0 + [304])
	
.LOOP $label$28:
	if ( ((int_64)*($7 + [40]) != (int_64)*($1)) ){ goto $label$20 }
	$5 = *($7 + [48])
	$12 = *($26)
	$20 = *($27)
	if ( ((int_32)$20 == (int_32)$12) ){ goto $label$30 }
	
.LOOP $label$32:
	$7 = ($12 + [-24])
	$10 = *($7)
	if ( ((int_64)*($10) == (int_64)$5) ){ goto $label$31 }
	$12 = $7
	if ( ((int_32)$20 != (int_32)$7) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	if ( ((int_32)$20 == (int_32)$12) ){ goto $label$30 }
	CALL eosio_assert(((int_32)*($10 + [168]) == (int_32)$15), [17702])
	goto $label$29 
	
.LABEL $label$30
	$10 = [0]
	$7 = CALL db_find_i64(*($29), *($28), (int_64)-6497942333781180416, $5)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$29 }
	$10 = CALL $48($15, $7)
	CALL eosio_assert(((int_32)*($10 + [168]) == (int_32)$15), [17702])
	
.LABEL $label$29
	$41 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($41, [17457])
	$42 = ($10 + [136])
	$9 = *($42)
	$43 = ($10 + [120])
	$44 = *($43)
	$45 = *($10 + [128])
	$5 = *($10 + [112])
	$46 = *(*($4 + [84]) + [56])
	$12 = *($30)
	$47 = *($31)
	if ( ((int_32)$47 == (int_32)$12) ){ goto $label$34 }
	
.LOOP $label$36:
	$7 = ($12 + [-24])
	$20 = *($7)
	if ( ((int_32)*($20) == (int_32)$46) ){ goto $label$35 }
	$12 = $7
	if ( ((int_32)$47 != (int_32)$7) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$35
	if ( ((int_32)$47 == (int_32)$12) ){ goto $label$34 }
	CALL eosio_assert(((int_32)*($20 + [12]) == (int_32)$21), [17702])
	goto $label$33 
	
.LABEL $label$34
	$20 = [0]
	$7 = CALL db_find_i64(*($21), *($32), (int_64)-6749910679009886208, (CASTING uint_64)(uint_32 $46))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$33 }
	$20 = CALL $35($21, $7)
	CALL eosio_assert(((int_32)*($20 + [12]) == (int_32)$21), [17702])
	
.LABEL $label$33
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [17473])
	$7 = *($4 + [84])
	$6 = *($7 + [24])
	CALL __multi3(($4 + [24]), $6, (int_64)$6 >> (int_64)63), *($20 + [8]), (int_64)0)
	$48 = *(($7 + [32]))
	$6 = *((($4 + [24]) + [8]))
	$8 = *($4 + [24])
	CALL eosio_assert(( (uint_64)($8 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [18456])
	CALL eosio_assert(( ((uint_64)$8 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [18480])
	CALL eosio_assert([1], [18416])
	CALL eosio_assert([1], [18431])
	CALL eosio_assert(((int_64)$48 == (int_64)$9), [18505])
	$6 = ((int_64)((int_64)$8 / (int_64)10000) + (int_64)$45)
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [18548])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [18567])
	$46 = *(*($4 + [84]) + [56])
	$7 = *($4 + [100])
	if ( ($7 == 0) ){ goto $label$39 }
	$12 = $25
	$20 = *($7 + [16])
	if ( ((int_32)$46 < (int_32)$20) ){ goto $label$38 }
	$49 = [2]
	goto $label$37 
	
.LABEL $label$39
	$7 = $25
	$12 = $25
	$49 = [3]
	goto $label$37 
	
.LABEL $label$38
	$49 = [41]
	
.LABEL $label$37
	
.LOOP $label$40:
	goto $label$109 
	
.LABEL $label$111
	if ( ((int_32)$20 >= (int_32)$46) ){ goto $label$64 }
	$49 = [40]
	goto $label$40 
	
.LABEL $label$110
	$12 = ($7 + [4])
	$20 = *($7 + [4])
	if ( ($20 == 0) ){ goto $label$66 }
	$49 = [0]
	goto $label$40 
	
.LABEL $label$109
	$7 = $12
	$49 = [1]
	goto $label$40 
	
.LABEL $label$108
	$12 = $7
	$7 = $20
	$20 = *($7 + [16])
	if ( ((int_32)$46 >= (int_32)$20) ){ goto $label$67 }
	$49 = [41]
	goto $label$40 
	
.LABEL $label$107
	$20 = *($7)
	if ( $20 ){ goto $label$65 }
	$49 = [42]
	goto $label$40 
	
.LABEL $label$106
	$12 = $7
	$20 = *($12)
	if ( $20 ){ goto $label$62 }
	$49 = [37]
	goto $label$40 
	
.LABEL $label$105
	*(($20 = CALL _Znwj([24]))) = (int_64)0
	*($20 + [8]) = $7
	*($12) = $20
	*($20 + [20]) = [0]
	*($20 + [16]) = $46
	$7 = $20
	$46 = *(*($4 + [96]))
	if ( ($46 == 0) ){ goto $label$41 }
	$49 = [38]
	goto $label$40 
	
.LABEL $label$104
	*($4 + [96]) = $46
	$7 = *($12)
	$49 = [39]
	goto $label$40 
	
.LABEL $label$103
	CALL $49(*($4 + [100]), $7)
	*(($7 = (($4 + [96]) + [8]))) = (*($7) + [1])
	if ( ((int_32)*(($20 + [20])) >= (int_32)[1]) ){ goto $label$60 }
	$49 = [5]
	goto $label$40 
	
.LABEL $label$102
	$12 = [2]
	$7 = ( [1] ? [2] : ((int_64)$5 > (int_64)0) )
	goto $label$59 
	
.LABEL $label$101
	$20 = *($12)
	if ( ($20 == 0) ){ goto $label$63 }
	$49 = [4]
	goto $label$40 
	
.LABEL $label$100
	if ( ((int_32)*(($20 + [20])) < (int_32)[1]) ){ goto $label$61 }
	$49 = [23]
	goto $label$40 
	
.LABEL $label$99
	$47 = *($4 + [84])
	$46 = *($47 + [56])
	$50 = *($47 + [60])
	$7 = *($4 + [100])
	if ( ($7 == 0) ){ goto $label$50 }
	$49 = [24]
	goto $label$40 
	
.LABEL $label$98
	$12 = $25
	$20 = *($7 + [16])
	if ( ((int_32)$46 < (int_32)$20) ){ goto $label$49 }
	$49 = [25]
	goto $label$40 
	
.LABEL $label$97
	if ( ((int_32)$20 >= (int_32)$46) ){ goto $label$47 }
	$49 = [31]
	goto $label$40 
	
.LABEL $label$96
	$12 = ($7 + [4])
	$20 = *($7 + [4])
	if ( ($20 == 0) ){ goto $label$48 }
	$49 = [32]
	goto $label$40 
	
.LABEL $label$95
	$7 = $12
	$49 = [33]
	goto $label$40 
	
.LABEL $label$94
	$12 = $7
	$7 = $20
	$20 = *($7 + [16])
	if ( ((int_32)$46 >= (int_32)$20) ){ goto $label$68 }
	$49 = [34]
	goto $label$40 
	
.LABEL $label$93
	$20 = *($7)
	if ( $20 ){ goto $label$42 }
	$49 = [35]
	goto $label$40 
	
.LABEL $label$92
	$12 = $7
	$20 = *($12)
	if ( $20 ){ goto $label$44 }
	goto $label$45 
	
.LABEL $label$91
	$7 = $25
	$12 = $25
	$49 = [26]
	goto $label$40 
	
.LABEL $label$90
	$20 = *($12)
	if ( $20 ){ goto $label$46 }
	$49 = [28]
	goto $label$40 
	
.LABEL $label$89
	*(($20 = CALL _Znwj([24]))) = (int_64)0
	*($20 + [8]) = $7
	*($12) = $20
	*($20 + [20]) = [0]
	*($20 + [16]) = $46
	$7 = $20
	$46 = *(*($4 + [96]))
	if ( ($46 == 0) ){ goto $label$43 }
	$49 = [29]
	goto $label$40 
	
.LABEL $label$88
	*($4 + [96]) = $46
	$7 = *($12)
	$49 = [30]
	goto $label$40 
	
.LABEL $label$87
	CALL $49(*($4 + [100]), $7)
	*(($7 = (($4 + [96]) + [8]))) = (*($7) + [1])
	$49 = [27]
	goto $label$40 
	
.LABEL $label$86
	$12 = [1]
	$8 = *($47 + [24])
	CALL __multi3(($4 + [8]), (CASTING uint_64)(uint_32 (((int_32)*(($20 + [20])) * (int_32)$50) + [1])), (int_64)0, $8, (int_64)$8 >> (int_64)63))
	$48 = *(($47 + [32]))
	$8 = *((($4 + [8]) + [8]))
	$45 = *($4 + [8])
	CALL eosio_assert(( (uint_64)($45 <= (int_64)4611686018427387904) ? ((int_64)$8 < (int_64)0) : (int_64)($8 == 0) ), [18456])
	CALL eosio_assert(( ((uint_64)$45 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$8 > (int_64)-1) : ((int_64)$8 == (int_64)-1) ), [18480])
	CALL eosio_assert(((int_64)$48 == (int_64)$44), [18505])
	$5 = ((int_64)$5 + (int_64)$45)
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [18548])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [18567])
	$7 = [1]
	$49 = [6]
	goto $label$40 
	
.LABEL $label$85
	$8 = *($0)
	CALL eosio_assert($41, [17935])
	CALL eosio_assert(((int_32)*($10 + [168]) == (int_32)$15), [17970])
	CALL eosio_assert(((int_64)*($29) == (int_64)CALL $fimport$15()), [18016])
	*($10 + [144]) = $7
	*($10 + [112]) = $5
	*($43) = $44
	*($10 + [128]) = $6
	*($42) = $9
	*($10 + [104]) = $17
	*($10 + [105]) = $18
	*($10 + [106]) = $19
	$7 = ($10 + [48])
	*($4 + [336]) = *($7)
	$5 = *($10)
	*($10 + [160]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($10)), [18067])
	*($23) = $24
	*($4 + [44]) = ($4 + [192])
	*($4 + [40]) = ($4 + [192])
	*($4 + [352]) = ($4 + [40])
	*(($46 = (($4 + [368]) + [8]))) = ($10 + [16])
	*($33) = ($10 + [24])
	*(($47 = (($4 + [368]) + [16]))) = ($10 + [32])
	*(($41 = (($4 + [368]) + [20]))) = $7
	*(($42 = (($4 + [368]) + [24]))) = ($10 + [64])
	*($34) = ($10 + [96])
	*(($43 = (($4 + [368]) + [32]))) = ($10 + [104])
	*(($50 = (($4 + [368]) + [36]))) = ($10 + [105])
	*($35) = ($10 + [106])
	*($36) = ($10 + [112])
	*((($4 + [368]) + [48])) = ($10 + [128])
	*($37) = ($10 + [144])
	*($38) = ($10 + [152])
	*($39) = ($10 + [160])
	*($4 + [372]) = ($10 + [8])
	*($4 + [368]) = $10
	CALL $50(($4 + [368]), ($4 + [352]))
	CALL db_update_i64(*($10 + [172]), $8, ($4 + [192]), [136])
	if ( (uint_64)($5 <= *($40)) ){ goto $label$58 }
	$49 = [7]
	goto $label$40 
	
.LABEL $label$84
	*($40) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$49 = [8]
	goto $label$40 
	
.LABEL $label$83
	*($4 + [368]) = *($7)
	if ( (CALL $163(($4 + [336]), ($4 + [368]), [8]) == 0) ){ goto $label$57 }
	$49 = [9]
	goto $label$40 
	
.LABEL $label$82
	$7 = *($10 + [176])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$56 }
	$49 = [22]
	goto $label$40 
	
.LABEL $label$81
	$7 = CALL db_idx64_find_primary(*($29), *($28), (int_64)-6497942333781180416, ($4 + [352]), $5)
	*(($10 + [176])) = $7
	$49 = [10]
	goto $label$40 
	
.LABEL $label$80
	CALL db_idx64_update($7, $8, ($4 + [368]))
	$49 = [11]
	goto $label$40 
	
.LABEL $label$79
	$6 = *($0)
	$7 = *($4 + [84])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [17935])
	$10 = *($4 + [88])
	CALL eosio_assert(((int_32)*($7 + [88]) == (int_32)$10), [17970])
	CALL eosio_assert(((int_64)*($10) == (int_64)CALL $fimport$15()), [18016])
	*($7 + [64]) = $12
	$12 = ($7 + [48])
	*($23) = *($12)
	$20 = ($7 + [40])
	*($4 + [40]) = *($20)
	$5 = *($7)
	*($7 + [80]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($7)), [18067])
	*((($4 + [352]) + [8])) = $22
	*($4 + [356]) = ($4 + [192])
	*($4 + [352]) = ($4 + [192])
	*($4 + [336]) = ($4 + [352])
	*($46) = ($7 + [16])
	*($33) = ($7 + [24])
	*($47) = $20
	*($41) = $12
	*($42) = ($7 + [56])
	*($34) = ($7 + [60])
	*($43) = ($7 + [64])
	*($50) = ($7 + [72])
	*($35) = ($7 + [80])
	*($4 + [372]) = ($7 + [8])
	*($4 + [368]) = $7
	CALL $51(($4 + [368]), ($4 + [336]))
	CALL db_update_i64(*($7 + [92]), $6, ($4 + [192]), [81])
	if ( (uint_64)($5 <= *($10 + [16])) ){ goto $label$55 }
	$49 = [12]
	goto $label$40 
	
.LABEL $label$78
	*(($10 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$49 = [13]
	goto $label$40 
	
.LABEL $label$77
	*($4 + [368]) = *($20)
	if ( (CALL $163(($4 + [40]), ($4 + [368]), [8]) == 0) ){ goto $label$54 }
	$49 = [14]
	goto $label$40 
	
.LABEL $label$76
	$46 = ($7 + [96])
	$20 = *($46)
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$53 }
	$49 = [21]
	goto $label$40 
	
.LABEL $label$75
	$20 = CALL db_idx64_find_primary(*($10), *($10 + [8]), (int_64)4229865212519383040, ($4 + [336]), $5)
	*($46) = $20
	$49 = [15]
	goto $label$40 
	
.LABEL $label$74
	CALL db_idx64_update($20, $6, ($4 + [368]))
	$49 = [16]
	goto $label$40 
	
.LABEL $label$73
	*($4 + [368]) = *($12)
	if ( (CALL $163($23, ($4 + [368]), [8]) == 0) ){ goto $label$52 }
	$49 = [17]
	goto $label$40 
	
.LABEL $label$72
	$12 = ($7 + [100])
	$7 = *($12)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$51 }
	$49 = [20]
	goto $label$40 
	
.LABEL $label$71
	$7 = CALL db_idx64_find_primary(*($10), *($10 + [8]), (int_64)4229865212519383041, ($4 + [336]), $5)
	*($12) = $7
	$49 = [18]
	goto $label$40 
	
.LABEL $label$70
	CALL db_idx64_update($7, $6, ($4 + [368]))
	$49 = [19]
	goto $label$40 
	
.LABEL $label$69
	CALL $52(($4 + [80]))
	$7 = *($4 + [84])
	if ( $7 ){ goto $label$28 }
	goto $label$20 
	
.LABEL $label$68
	$49 = [25]
	goto $label$40 
	
.LABEL $label$67
	$49 = [2]
	goto $label$40 
	
.LABEL $label$66
	$49 = [3]
	goto $label$40 
	
.LABEL $label$65
	$49 = [1]
	goto $label$40 
	
.LABEL $label$64
	$49 = [3]
	goto $label$40 
	
.LABEL $label$63
	$49 = [37]
	goto $label$40 
	
.LABEL $label$62
	$49 = [4]
	goto $label$40 
	
.LABEL $label$61
	$49 = [5]
	goto $label$40 
	
.LABEL $label$60
	$49 = [23]
	goto $label$40 
	
.LABEL $label$59
	$49 = [6]
	goto $label$40 
	
.LABEL $label$58
	$49 = [8]
	goto $label$40 
	
.LABEL $label$57
	$49 = [11]
	goto $label$40 
	
.LABEL $label$56
	$49 = [10]
	goto $label$40 
	
.LABEL $label$55
	$49 = [13]
	goto $label$40 
	
.LABEL $label$54
	$49 = [16]
	goto $label$40 
	
.LABEL $label$53
	$49 = [15]
	goto $label$40 
	
.LABEL $label$52
	$49 = [19]
	goto $label$40 
	
.LABEL $label$51
	$49 = [18]
	goto $label$40 
	
.LABEL $label$50
	$49 = [36]
	goto $label$40 
	
.LABEL $label$49
	$49 = [34]
	goto $label$40 
	
.LABEL $label$48
	$49 = [26]
	goto $label$40 
	
.LABEL $label$47
	$49 = [26]
	goto $label$40 
	
.LABEL $label$46
	$49 = [27]
	goto $label$40 
	
.LABEL $label$45
	$49 = [28]
	goto $label$40 
	
.LABEL $label$44
	$49 = [27]
	goto $label$40 
	
.LABEL $label$43
	$49 = [30]
	goto $label$40 
	
.LABEL $label$42
	$49 = [33]
	goto $label$40 
	
.LABEL $label$41
	$49 = [39]
	goto $label$40 
	
.LABEL $label$20
	$6 = *($0)
	CALL eosio_assert($14, [17935])
	CALL eosio_assert(((int_32)*($13 + [160]) == (int_32)$11), [17970])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$15()), [18016])
	*($13 + [128]) = $17
	*($13 + [129]) = $18
	*($13 + [130]) = $19
	$5 = *(($2 + [8]))
	$9 = *(($2 + [16]))
	$8 = *(($2 + [24]))
	$44 = *($2)
	*($13 + [96]) = *($4 + [144])
	*(($13 + [112])) = *((($4 + [144]) + [16]))
	*(($13 + [56])) = $8
	*(($13 + [48])) = $9
	*(($13 + [40])) = $5
	*($13 + [32]) = $44
	*(($13 + [104])) = *($4 + [152])
	*(($13 + [120])) = *((($4 + [144]) + [24]))
	*($13 + [17]) = [2]
	$5 = *($13)
	*($13 + [144]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($13)), [18067])
	*($4 + [48]) = (($4 + [192]) + [129])
	*($4 + [44]) = ($4 + [192])
	*($4 + [40]) = ($4 + [192])
	*($4 + [352]) = ($4 + [40])
	*($4 + [372]) = ($13 + [8])
	*($4 + [368]) = $13
	*($4 + [376]) = ($13 + [16])
	*($4 + [380]) = ($13 + [17])
	*($4 + [384]) = ($13 + [32])
	*($4 + [388]) = ($13 + [64])
	*($4 + [392]) = ($13 + [96])
	*($4 + [396]) = ($13 + [128])
	*($4 + [400]) = ($13 + [129])
	*($4 + [404]) = ($13 + [130])
	*($4 + [408]) = ($13 + [136])
	*($4 + [412]) = ($13 + [144])
	*($4 + [416]) = ($13 + [152])
	CALL $53(($4 + [368]), ($4 + [352]))
	CALL db_update_i64(*($13 + [164]), $6, ($4 + [192]), [129])
	$7 = ($0 + [64])
	if ( (uint_64)($5 <= *($7)) ){ goto $label$112 }
	*($7) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$112
	CALL $45(($4 + [192]), ($4 + [184]), $1)
	$7 = *($4 + [196])
	if ( ($7 == 0) ){ goto $label$114 }
	if ( ((int_64)*($1) != (int_64)*($7 + [48])) ){ goto $label$114 }
	$5 = *($4 + [192])
	*($4 + [176]) = $5
	if ( (uint_64)($5 <= (int_64)4294967296) ){ goto $label$113 }
	$7 = *($16)
	$46 = (($4 + [368]) + [28])
	$41 = (($4 + [192]) + [56])
	$47 = (($4 + [192]) + [16])
	$33 = (($4 + [40]) + [24])
	$25 = (($4 + [192]) + [32])
	$50 = (($4 + [192]) + [136])
	$51 = (CASTING uint_64)(uint_32 ($4 + [40]))
	$40 = ($4 + [380])
	$23 = ($4 + [388])
	$29 = (($4 + [368]) + [36])
	$17 = ($4 + [412])
	$18 = ($4 + [420])
	$19 = ($4 + [428])
	$22 = ($0 + [328])
	$24 = ($4 + [242])
	
.LOOP $label$115:
	if ( ((int_64)*($7 + [48]) != (int_64)*($1)) ){ goto $label$113 }
	CALL $54($0, ($7 + [32]))
	$20 = *($16)
	$5 = *(($20 + [40]))
	$7 = *([0] + [8376])
	if ( ($7 == 0) ){ goto $label$118 }
	$10 = [8376]
	$6 = *($7 + [16])
	if ( (uint_64)($5 <= $6) ){ goto $label$117 }
	$52 = [2]
	goto $label$116 
	
.LABEL $label$118
	$7 = [8376]
	$10 = [8376]
	$52 = [3]
	goto $label$116 
	
.LABEL $label$117
	$52 = [79]
	
.LABEL $label$116
	
.LOOP $label$119:
	goto $label$248 
	
.LABEL $label$250
	if ( ((uint_64)$6 >= (uint_64)$5) ){ goto $label$166 }
	$52 = [78]
	goto $label$119 
	
.LABEL $label$249
	$10 = ($7 + [4])
	$12 = *($7 + [4])
	if ( ($12 == 0) ){ goto $label$168 }
	$52 = [0]
	goto $label$119 
	
.LABEL $label$248
	$7 = $10
	$52 = [1]
	goto $label$119 
	
.LABEL $label$247
	$10 = $7
	$7 = $12
	$6 = *($7 + [16])
	if ( ((uint_64)$5 >= (uint_64)$6) ){ goto $label$169 }
	$52 = [79]
	goto $label$119 
	
.LABEL $label$246
	$12 = *($7)
	if ( $12 ){ goto $label$167 }
	$52 = [80]
	goto $label$119 
	
.LABEL $label$245
	$10 = $7
	$12 = *($10)
	if ( $12 ){ goto $label$163 }
	goto $label$164 
	
.LABEL $label$244
	$12 = *($10)
	if ( $12 ){ goto $label$165 }
	$52 = [75]
	goto $label$119 
	
.LABEL $label$243
	*(($12 = CALL _Znwj([56])) + [24]) = (int_64)0
	*($12) = (int_64)0
	*($12 + [8]) = $7
	*(($12 + [48])) = (int_64)0
	*(($12 + [40])) = (int_64)0
	*(($12 + [32])) = (int_64)0
	*($10) = $12
	*($12 + [16]) = $5
	$7 = $12
	$20 = *(*([0] + [8372]))
	if ( ($20 == 0) ){ goto $label$120 }
	$52 = [76]
	goto $label$119 
	
.LABEL $label$242
	*([0] + [8372]) = $20
	$7 = *($10)
	$52 = [77]
	goto $label$119 
	
.LABEL $label$241
	CALL $49(*([0] + [8376]), $7)
	*([0] + [8380]) = (*([0] + [8380]) + [1])
	$20 = *($16)
	$52 = [4]
	goto $label$119 
	
.LABEL $label$240
	$45 = *(($12 + [32]))
	if ( ((int_64)*($20 + [112]) < (int_64)1) ){ goto $label$162 }
	$52 = [69]
	goto $label$119 
	
.LABEL $label$239
	$6 = *($0)
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [17935])
	$7 = *($4 + [184])
	CALL eosio_assert(((int_32)*($20 + [168]) == (int_32)$7), [17970])
	CALL eosio_assert(((int_64)*($7) == (int_64)CALL $fimport$15()), [18016])
	*($20 + [144]) = [3]
	$10 = ($20 + [48])
	*($4 + [336]) = *($10)
	$5 = *($20)
	*($20 + [160]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($20)), [18067])
	*((($4 + [40]) + [8])) = $50
	*($4 + [44]) = ($4 + [192])
	*($4 + [40]) = ($4 + [192])
	*($4 + [352]) = ($4 + [40])
	*((($4 + [368]) + [8])) = ($20 + [16])
	*($40) = ($20 + [24])
	*((($4 + [368]) + [16])) = ($20 + [32])
	*($23) = $10
	*((($4 + [368]) + [24])) = ($20 + [64])
	*($46) = ($20 + [96])
	*((($4 + [368]) + [32])) = ($20 + [104])
	*($29) = ($20 + [105])
	*((($4 + [368]) + [40])) = ($20 + [106])
	*($17) = ($20 + [112])
	*((($4 + [368]) + [48])) = ($20 + [128])
	*($18) = ($20 + [144])
	*((($4 + [368]) + [56])) = ($20 + [152])
	*($19) = ($20 + [160])
	*($4 + [372]) = ($20 + [8])
	*($4 + [368]) = $20
	CALL $50(($4 + [368]), ($4 + [352]))
	CALL db_update_i64(*(($20 + [172])), $6, ($4 + [192]), [136])
	if ( (uint_64)($5 <= *($7 + [16])) ){ goto $label$122 }
	$52 = [70]
	goto $label$119 
	
.LABEL $label$238
	*(($7 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$52 = [71]
	goto $label$119 
	
.LABEL $label$237
	*($4 + [368]) = *($10)
	if ( (CALL $163(($4 + [336]), ($4 + [368]), [8]) == 0) ){ goto $label$161 }
	$52 = [72]
	goto $label$119 
	
.LABEL $label$236
	$10 = *($20 + [176])
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$121 }
	$52 = [74]
	goto $label$119 
	
.LABEL $label$235
	$10 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-6497942333781180416, ($4 + [352]), $5)
	*(($20 + [176])) = $10
	$52 = [73]
	goto $label$119 
	
.LABEL $label$234
	CALL db_idx64_update($10, $6, ($4 + [368]))
	$52 = [5]
	goto $label$119 
	
.LABEL $label$233
	$48 = *($0)
	$5 = (int_64)6
	$52 = [6]
	goto $label$119 
	
.LABEL $label$232
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$160 }
	$52 = [7]
	goto $label$119 
	
.LABEL $label$231
	$5 = (int_64)0
	$9 = (int_64)59
	$7 = [17280]
	$8 = (int_64)0
	$52 = [8]
	goto $label$119 
	
.LABEL $label$230
	if ( ((uint_64)$5 > (uint_64)(int_64)7) ){ goto $label$158 }
	$52 = [65]
	goto $label$119 
	
.LABEL $label$229
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$124 }
	$52 = [68]
	goto $label$119 
	
.LABEL $label$228
	$10 = ($10 + [-91])
	goto $label$123 
	
.LABEL $label$227
	$6 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$157 }
	goto $label$156 
	
.LABEL $label$226
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	$52 = [67]
	goto $label$119 
	
.LABEL $label$225
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	$52 = [64]
	goto $label$119 
	
.LABEL $label$224
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	$52 = [10]
	goto $label$119 
	
.LABEL $label$223
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$6 | (int_64)$8)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$159 }
	$52 = [11]
	goto $label$119 
	
.LABEL $label$222
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17488]
	$44 = (int_64)0
	$52 = [12]
	goto $label$119 
	
.LABEL $label$221
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$154 }
	$52 = [60]
	goto $label$119 
	
.LABEL $label$220
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$126 }
	$52 = [63]
	goto $label$119 
	
.LABEL $label$219
	$10 = ($10 + [-91])
	goto $label$125 
	
.LABEL $label$218
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	$52 = [62]
	goto $label$119 
	
.LABEL $label$217
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	$52 = [13]
	goto $label$119 
	
.LABEL $label$216
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$44 = ((int_64)$9 | (int_64)$44)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$155 }
	$52 = [14]
	goto $label$119 
	
.LABEL $label$215
	$7 = *($16)
	CALL $55(($4 + [352]), $0, $7)
	*((($4 + [192]) + [8])) = $44
	*(($21 = (($4 + [368]) + [8]))) = $8
	*(($12 = (($4 + [368]) + [16]))) = (int_64)0
	*(($20 = (($4 + [368]) + [24]))) = [0]
	*(($42 = ($47 + [8]))) = *(($7 + [40]))
	*($47) = *($7 + [32])
	*($25) = *($4 + [352])
	$15 = (($4 + [352]) + [8])
	*(($25 + [8])) = *($15)
	*($15) = [0]
	*($4 + [368]) = $45
	*($4 + [192]) = *($0)
	*($4 + [352]) = (int_64)0
	$7 = CALL _Znwj([16])
	*($12) = $7
	*($7) = $48
	*($7 + [8]) = (int_64)3617214756542218240
	*($46) = (int_64)0
	*($29) = [0]
	$7 = ($7 + [16])
	*($20) = $7
	*($23) = $7
	$7 = *($25)
	$10 = ( *((($4 + [192]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($10 + [32])
	$5 = (CASTING uint_64)(uint_32 $10)
	$52 = [15]
	goto $label$119 
	
.LABEL $label$214
	$7 = ($7 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$153 }
	$52 = [16]
	goto $label$119 
	
.LABEL $label$213
	if ( ($7 == 0) ){ goto $label$152 }
	$52 = [17]
	goto $label$119 
	
.LABEL $label$212
	CALL $30($46, $7)
	$10 = *((($4 + [368]) + [32]))
	$7 = *($46)
	goto $label$151 
	
.LABEL $label$211
	$10 = [0]
	$7 = [0]
	$52 = [18]
	goto $label$119 
	
.LABEL $label$210
	*(($13 = (($4 + [40]) + [8]))) = $10
	*($4 + [44]) = $7
	*($4 + [40]) = $7
	*($4 + [344]) = ($4 + [40])
	*($4 + [336]) = ($4 + [192])
	CALL $56(($4 + [336]), ($4 + [344]))
	CALL $32(($4 + [40]), ($4 + [368]))
	$7 = *($4 + [40])
	CALL send_inline($7, (*($4 + [44]) - $7))
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$150 }
	$52 = [19]
	goto $label$119 
	
.LABEL $label$209
	*($4 + [44]) = $7
	CALL _ZdlPv($7)
	$52 = [20]
	goto $label$119 
	
.LABEL $label$208
	$7 = *($46)
	if ( ($7 == 0) ){ goto $label$149 }
	$52 = [21]
	goto $label$119 
	
.LABEL $label$207
	*((($4 + [368]) + [32])) = $7
	CALL _ZdlPv($7)
	$52 = [22]
	goto $label$119 
	
.LABEL $label$206
	$7 = *($12)
	if ( ($7 == 0) ){ goto $label$148 }
	$52 = [23]
	goto $label$119 
	
.LABEL $label$205
	*($23) = $7
	CALL _ZdlPv($7)
	$52 = [24]
	goto $label$119 
	
.LABEL $label$204
	if ( ((*($25) & [1]) == 0) ){ goto $label$147 }
	$52 = [25]
	goto $label$119 
	
.LABEL $label$203
	CALL _ZdlPv(*((($4 + [192]) + [40])))
	$52 = [26]
	goto $label$119 
	
.LABEL $label$202
	if ( ((*($4 + [352]) & [1]) == 0) ){ goto $label$146 }
	$52 = [27]
	goto $label$119 
	
.LABEL $label$201
	CALL _ZdlPv(*($15))
	$52 = [28]
	goto $label$119 
	
.LABEL $label$200
	*(($34 = (($4 + [40]) + [16]))) = (int_64)-1
	*($33) = (int_64)0
	*(($43 = (($4 + [40]) + [32]))) = [0]
	*((($4 + [40]) + [36])) = [0]
	$5 = *($0)
	*($13) = $5
	*($4 + [40]) = $5
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$15()), [18132])
	$7 = CALL _Znwj([192])
	CALL $57($7)
	*($7 + [168]) = ($4 + [40])
	$10 = *($16)
	*($7 + [16]) = *($10 + [16])
	*($7 + [8]) = *($10 + [8])
	*($7) = *($10)
	*(($7 + [40])) = *(($10 + [40]))
	*($7 + [32]) = *($10 + [32])
	*($7 + [48]) = *($10 + [48])
	*(($7 + [80])) = *(($10 + [80]))
	*($7 + [64]) = *($10 + [64])
	*(($7 + [88])) = *(($10 + [88]))
	*(($7 + [72])) = *(($10 + [72]))
	*($7 + [96]) = *($10 + [96])
	*($7 + [104]) = *($10 + [104])
	*($7 + [105]) = *($10 + [105])
	*($7 + [106]) = *($10 + [106])
	*(($7 + [120])) = *(($10 + [120]))
	*($7 + [112]) = *($10 + [112])
	*($7 + [144]) = *($10 + [144])
	*($15) = $50
	*($4 + [356]) = ($4 + [192])
	*($4 + [352]) = ($4 + [192])
	*($4 + [336]) = ($4 + [352])
	*($21) = ($7 + [16])
	*($40) = ($7 + [24])
	*($12) = ($7 + [32])
	*($23) = ($7 + [48])
	*($20) = ($7 + [64])
	*($46) = ($7 + [96])
	*(($35 = (($4 + [368]) + [32]))) = ($7 + [104])
	*($29) = ($7 + [105])
	*((($4 + [368]) + [40])) = ($7 + [106])
	*($17) = ($7 + [112])
	*((($4 + [368]) + [48])) = ($7 + [128])
	*($18) = ($7 + [144])
	*((($4 + [368]) + [56])) = ($7 + [152])
	*($19) = ($7 + [160])
	$10 = ($7 + [8])
	*($4 + [372]) = $10
	*($4 + [368]) = $7
	CALL $58(($4 + [368]), ($4 + [336]))
	$9 = *($7)
	$6 = ((int_64)$9 ^ (int_64)-1)
	*($7 + [172]) = CALL db_store_i64(*($13), (int_64)-4994024801686257664, $5, $6, ($4 + [192]), [136])
	if ( ((uint_64)*($34) > (uint_64)$6) ){ goto $label$145 }
	$52 = [29]
	goto $label$119 
	
.LABEL $label$199
	*($34) = ( (int_64)-2 ? (int_64))((int_64)0 - $9) : (uint_64)($9 <= (int_64)2) )
	$52 = [30]
	goto $label$119 
	
.LABEL $label$198
	$6 = *($13)
	$9 = *($7)
	*($4 + [368]) = *($10)
	*($7 + [176]) = CALL db_idx64_store($6, (int_64)-4994024801686257664, $5, ((int_64)$9 ^ (int_64)-1), ($4 + [368]))
	*($4 + [368]) = $7
	$5 = ((int_64)*($7) ^ (int_64)-1)
	*($4 + [192]) = $5
	$28 = *(($7 + [172]))
	*($4 + [352]) = $28
	$34 = (($4 + [40]) + [28])
	$10 = *($34)
	if ( ((uint_32)$10 >= (uint_32)*($43)) ){ goto $label$144 }
	$52 = [58]
	goto $label$119 
	
.LABEL $label$197
	*($10 + [8]) = $5
	*($10 + [16]) = $28
	*($4 + [368]) = [0]
	*($10) = $7
	*($34) = ($10 + [24])
	$7 = *($4 + [368])
	*($4 + [368]) = [0]
	if ( $7 ){ goto $label$141 }
	goto $label$142 
	
.LABEL $label$196
	CALL $59($33, ($4 + [368]), ($4 + [192]), ($4 + [352]))
	$7 = *($4 + [368])
	*($4 + [368]) = [0]
	if ( ($7 == 0) ){ goto $label$143 }
	$52 = [32]
	goto $label$119 
	
.LABEL $label$195
	CALL _ZdlPv($7)
	$52 = [33]
	goto $label$119 
	
.LABEL $label$194
	$7 = [0]
	$10 = CALL db_lowerbound_i64(*($4 + [40]), *($13), (int_64)-4994024801686257664, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$140 }
	$52 = [34]
	goto $label$119 
	
.LABEL $label$193
	$10 = CALL $60(($4 + [40]), $10)
	$7 = [1]
	CALL eosio_assert([1], [19133])
	$10 = CALL db_next_i64(*($10 + [172]), ($4 + [192]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$139 }
	$52 = [35]
	goto $label$119 
	
.LABEL $label$192
	$7 = [1]
	$52 = [36]
	goto $label$119 
	
.LABEL $label$191
	$10 = CALL $60(($4 + [40]), $10)
	CALL eosio_assert([1], [19133])
	$7 = ($7 + [1])
	$10 = CALL db_next_i64(*($10 + [172]), ($4 + [192]))
	if ( ((int_32)$10 >= (int_32)[0]) ){ goto $label$138 }
	$52 = [37]
	goto $label$119 
	
.LABEL $label$190
	if ( ((int_32)$7 <= (int_32)*($22)) ){ goto $label$137 }
	$52 = [57]
	goto $label$119 
	
.LABEL $label$189
	*($4 + [192]) = $51
	CALL $62(($4 + [40]), *(CALL $61(($4 + [192])) + [4]))
	$52 = [38]
	goto $label$119 
	
.LABEL $label$188
	$6 = *($0)
	$5 = (int_64)6
	$52 = [39]
	goto $label$119 
	
.LABEL $label$187
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$136 }
	$52 = [40]
	goto $label$119 
	
.LABEL $label$186
	$5 = (int_64)6
	$52 = [41]
	goto $label$119 
	
.LABEL $label$185
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$135 }
	$52 = [42]
	goto $label$119 
	
.LABEL $label$184
	$7 = *($16)
	$5 = *($7 + [8])
	*($47) = *($2)
	*($42) = *(($2 + [8]))
	*(($47 + [16])) = *(($2 + [16]))
	*(($47 + [24])) = *(($2 + [24]))
	*((($4 + [192]) + [48])) = *($7 + [104 align=1])
	*($24) = *($7 + [106])
	*($41) = *($7 + [112])
	*(($41 + [8])) = *(($7 + [120]))
	*($4 + [200]) = *($1)
	*($4 + [192]) = $5
	*($21) = (int_64)-4994024814571159552
	*($12) = (int_64)0
	*($20) = [0]
	*($4 + [368]) = $6
	$7 = CALL _Znwj([16])
	*($12) = $7
	*($7) = $6
	*($7 + [8]) = (int_64)3617214756542218240
	*($46) = (int_64)0
	*($29) = [0]
	$7 = ($7 + [16])
	*($20) = $7
	*($23) = $7
	CALL $30($46, [67])
	$7 = *($46)
	*($15) = *($35)
	*($4 + [356]) = $7
	*($4 + [352]) = $7
	*($4 + [344]) = ($4 + [352])
	*($4 + [336]) = ($4 + [192])
	CALL $63(($4 + [336]), ($4 + [344]))
	CALL $32(($4 + [352]), ($4 + [368]))
	$7 = *($4 + [352])
	CALL send_inline($7, (*($4 + [356]) - $7))
	$7 = *($4 + [352])
	if ( ($7 == 0) ){ goto $label$134 }
	$52 = [43]
	goto $label$119 
	
.LABEL $label$183
	*($4 + [356]) = $7
	CALL _ZdlPv($7)
	$52 = [44]
	goto $label$119 
	
.LABEL $label$182
	$7 = *($46)
	if ( ($7 == 0) ){ goto $label$133 }
	$52 = [45]
	goto $label$119 
	
.LABEL $label$181
	*($35) = $7
	CALL _ZdlPv($7)
	$52 = [46]
	goto $label$119 
	
.LABEL $label$180
	$7 = *($12)
	if ( ($7 == 0) ){ goto $label$132 }
	$52 = [47]
	goto $label$119 
	
.LABEL $label$179
	*($23) = $7
	CALL _ZdlPv($7)
	$52 = [48]
	goto $label$119 
	
.LABEL $label$178
	CALL $64(($4 + [176]))
	$12 = *($33)
	if ( ($12 == 0) ){ goto $label$131 }
	$52 = [49]
	goto $label$119 
	
.LABEL $label$177
	$7 = *($34)
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$129 }
	$52 = [50]
	goto $label$119 
	
.LABEL $label$176
	$7 = ($7 + [-24])
	$10 = *($7)
	*($7) = [0]
	if ( ($10 == 0) ){ goto $label$128 }
	$52 = [51]
	goto $label$119 
	
.LABEL $label$175
	CALL _ZdlPv($10)
	$52 = [52]
	goto $label$119 
	
.LABEL $label$174
	if ( ((int_32)$12 != (int_32)$7) ){ goto $label$130 }
	$52 = [53]
	goto $label$119 
	
.LABEL $label$173
	$7 = *($33)
	goto $label$127 
	
.LABEL $label$172
	$7 = $12
	$52 = [54]
	goto $label$119 
	
.LABEL $label$171
	*($34) = $12
	CALL _ZdlPv($7)
	$52 = [55]
	goto $label$119 
	
.LABEL $label$170
	$7 = *($4 + [180])
	if ( $7 ){ goto $label$115 }
	goto $label$113 
	
.LABEL $label$169
	$52 = [2]
	goto $label$119 
	
.LABEL $label$168
	$52 = [3]
	goto $label$119 
	
.LABEL $label$167
	$52 = [1]
	goto $label$119 
	
.LABEL $label$166
	$52 = [3]
	goto $label$119 
	
.LABEL $label$165
	$52 = [4]
	goto $label$119 
	
.LABEL $label$164
	$52 = [75]
	goto $label$119 
	
.LABEL $label$163
	$52 = [4]
	goto $label$119 
	
.LABEL $label$162
	$52 = [5]
	goto $label$119 
	
.LABEL $label$161
	$52 = [5]
	goto $label$119 
	
.LABEL $label$160
	$52 = [6]
	goto $label$119 
	
.LABEL $label$159
	$52 = [8]
	goto $label$119 
	
.LABEL $label$158
	$52 = [9]
	goto $label$119 
	
.LABEL $label$157
	$52 = [64]
	goto $label$119 
	
.LABEL $label$156
	$52 = [10]
	goto $label$119 
	
.LABEL $label$155
	$52 = [12]
	goto $label$119 
	
.LABEL $label$154
	$52 = [13]
	goto $label$119 
	
.LABEL $label$153
	$52 = [15]
	goto $label$119 
	
.LABEL $label$152
	$52 = [59]
	goto $label$119 
	
.LABEL $label$151
	$52 = [18]
	goto $label$119 
	
.LABEL $label$150
	$52 = [20]
	goto $label$119 
	
.LABEL $label$149
	$52 = [22]
	goto $label$119 
	
.LABEL $label$148
	$52 = [24]
	goto $label$119 
	
.LABEL $label$147
	$52 = [26]
	goto $label$119 
	
.LABEL $label$146
	$52 = [28]
	goto $label$119 
	
.LABEL $label$145
	$52 = [30]
	goto $label$119 
	
.LABEL $label$144
	$52 = [31]
	goto $label$119 
	
.LABEL $label$143
	$52 = [33]
	goto $label$119 
	
.LABEL $label$142
	$52 = [33]
	goto $label$119 
	
.LABEL $label$141
	$52 = [32]
	goto $label$119 
	
.LABEL $label$140
	$52 = [37]
	goto $label$119 
	
.LABEL $label$139
	$52 = [37]
	goto $label$119 
	
.LABEL $label$138
	$52 = [36]
	goto $label$119 
	
.LABEL $label$137
	$52 = [38]
	goto $label$119 
	
.LABEL $label$136
	$52 = [39]
	goto $label$119 
	
.LABEL $label$135
	$52 = [41]
	goto $label$119 
	
.LABEL $label$134
	$52 = [44]
	goto $label$119 
	
.LABEL $label$133
	$52 = [46]
	goto $label$119 
	
.LABEL $label$132
	$52 = [48]
	goto $label$119 
	
.LABEL $label$131
	$52 = [55]
	goto $label$119 
	
.LABEL $label$130
	$52 = [50]
	goto $label$119 
	
.LABEL $label$129
	$52 = [56]
	goto $label$119 
	
.LABEL $label$128
	$52 = [52]
	goto $label$119 
	
.LABEL $label$127
	$52 = [54]
	goto $label$119 
	
.LABEL $label$126
	$52 = [61]
	goto $label$119 
	
.LABEL $label$125
	$52 = [62]
	goto $label$119 
	
.LABEL $label$124
	$52 = [66]
	goto $label$119 
	
.LABEL $label$123
	$52 = [67]
	goto $label$119 
	
.LABEL $label$122
	$52 = [71]
	goto $label$119 
	
.LABEL $label$121
	$52 = [73]
	goto $label$119 
	
.LABEL $label$120
	$52 = [77]
	goto $label$119 
	
.LABEL $label$114
	*($4 + [176]) = (CASTING uint_64)(uint_32 ($4 + [184]))
	
.LABEL $label$113
	CALL $65(($4 + [96]), *($4 + [100]))
	$global$0 = ($4 + [432])
	$49
	$52
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [144])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $167($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [48]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [17776])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((uint_32)($1 + [-8]) > (uint_32)[31]), [17776])
	$6 = ($3 + [16])
	CALL memcpy($6, ($2 + [8]), [32])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[40]), [17776])
	$7 = ($3 + [48])
	CALL memcpy($7, ($2 + [40]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $171($2)
	
.LABEL $label$5
	*(($1 = (($3 + [64]) + [16]))) = *(($6 + [16]))
	*(($2 = (($3 + [64]) + [24]))) = *(($6 + [24]))
	*($3 + [64]) = *($6)
	*($3 + [72]) = *(($6 + [8]))
	$8 = *($7)
	$9 = *($3)
	*((($3 + [96]) + [24])) = *($2)
	*((($3 + [96]) + [16])) = *($1)
	*($3 + [136]) = $9
	*($3 + [128]) = $8
	*($3 + [104]) = *($3 + [72])
	*($3 + [96]) = *($3 + [64])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($3 + [136])), (int_32 ($3 + [96])), (int_32 ($3 + [128])), (int_32 $5))
	$global$0 = ($3 + [144])
	return [1]
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [17381]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($6)
	$5 = [0]
	$8 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-6749910679009886208, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$9 = ($0 + [8])
	$10 = CALL $35($9, $8)
	
.LOOP $label$6:
	CALL eosio_assert([1], [19099])
	CALL eosio_assert([1], [19133])
	$8 = [0]
	$11 = CALL db_next_i64(*($10 + [16]), $2)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $35($9, $11)
	
.LABEL $label$7
	CALL $66($9, $10)
	$10 = $8
	if ( $8 ){ goto $label$6 }
	
.LABEL $label$5
	*($2 + [8]) = (int_64)1397703940
	*($2) = (int_64)0
	CALL eosio_assert([1], [18347])
	$3 = (int_64)5459781
	
.LOOP $label$9:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$3 = $4
	$9 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$3 = $4
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $8 ){ goto $label$11 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($9, [18396])
	CALL $67(($0 + [208]), $2, *($0))
	$global$0 = ($2 + [16])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17381]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$10 = ($10 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($8)
	CALL $34($0, *($1))
	$11 = ($0 + [8])
	$12 = *($1)
	$10 = *(($0 + [36]))
	$13 = *(($0 + [32]))
	if ( ((int_32)$13 == (int_32)$10) ){ goto $label$8 }
	
.LOOP $label$10:
	$7 = ($10 + [-24])
	$14 = *($7)
	if ( ((int_32)*($14) == (int_32)$12) ){ goto $label$9 }
	$10 = $7
	if ( ((int_32)$13 != (int_32)$7) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$13 == (int_32)$10) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($14 + [12]) == (int_32)$11), [17702])
	goto $label$7 
	
.LABEL $label$8
	$10 = ($0 + [16])
	$7 = CALL db_find_i64(*($11), *($10), (int_64)-6749910679009886208, (CASTING uint_64)(uint_32 $12))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$14 = CALL $35($11, $7)
	CALL eosio_assert(((int_32)*($14 + [12]) == (int_32)$11), [17702])
	
.LABEL $label$7
	$5 = *($0)
	CALL eosio_assert([1], [17935])
	CALL eosio_assert(((int_32)*($14 + [12]) == (int_32)$11), [17970])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$15()), [18016])
	*($14 + [4]) = *($2)
	*($14 + [8]) = *($3)
	$7 = *($14)
	CALL eosio_assert([1], [18067])
	CALL eosio_assert([1], [18126])
	CALL memcpy(($4 + [16]), $14, [4])
	CALL eosio_assert([1], [18126])
	CALL memcpy((($4 + [16]) | [4]), ($14 + [4]), [4])
	CALL eosio_assert([1], [18126])
	CALL memcpy((($4 + [16]) | [8]), ($14 + [8]), [4])
	CALL db_update_i64(*(($14 + [16])), $5, ($4 + [16]), [12])
	$10 = ($0 + [24])
	if ( ((uint_64)*($10) > (uint_64)(CASTING uint_64)(uint_32 $7)) ){ goto $label$5 }
	*($10) = (CASTING uint_64)(uint_32 ($7 + [1]))
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$6
	$5 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$15()), [18132])
	*(($7 = CALL _Znwj([24])) + [12]) = $11
	*($7) = *($1)
	*($7 + [4]) = *($2)
	*($7 + [8]) = *($3)
	CALL eosio_assert([1], [18126])
	CALL memcpy(($4 + [16]), $7, [4])
	CALL eosio_assert([1], [18126])
	CALL memcpy((($4 + [16]) | [4]), ($7 + [4]), [4])
	CALL eosio_assert([1], [18126])
	CALL memcpy((($4 + [16]) | [8]), ($7 + [8]), [4])
	$10 = *($7)
	$6 = (CASTING uint_64)(uint_32 $10)
	$14 = CALL db_store_i64(*($10), (int_64)-6749910679009886208, $5, $6, ($4 + [16]), [12])
	*($7 + [16]) = $14
	$12 = ($0 + [24])
	if ( ((uint_64)*($12) > (uint_64)$6) ){ goto $label$11 }
	*($12) = (CASTING uint_64)(uint_32 ($10 + [1]))
	
.LABEL $label$11
	*($4 + [16]) = $7
	$12 = *($7)
	*($4 + [12]) = $12
	*($4 + [8]) = $14
	$13 = ($0 + [36])
	$10 = *($13)
	if ( ((uint_32)$10 >= (uint_32)*(($0 + [40]))) ){ goto $label$13 }
	*($10 + [16]) = $14
	*($10 + [8]) = (CASTING uint_64)(uint_32 $12)
	*($4 + [16]) = [0]
	*($10) = $7
	*($13) = ($10 + [24])
	$7 = *($4 + [16])
	*($4 + [16]) = [0]
	if ( $7 ){ goto $label$12 }
	goto $label$5 
	
.LABEL $label$13
	CALL $36(($0 + [32]), ($4 + [16]), ($4 + [12]), ($4 + [8]))
	$7 = *($4 + [16])
	*($4 + [16]) = [0]
	if ( ($7 == 0) ){ goto $label$5 }
	
.LABEL $label$12
	CALL _ZdlPv($7)
	
.LABEL $label$5
	$global$0 = ($4 + [32])
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	CALL require_auth(*($0))
	CALL require_recipient(*($1))
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$2 = ($global$0 - [240])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $167($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [18347])
	$8 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$8 = $9
	$2 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$8 = $9
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [18396])
	*(($3 + [72])) = (int_64)0
	*(($3 + [64])) = (int_64)0
	*(($3 + [56])) = (int_64)0
	*(($3 + [88])) = [0]
	*($3 + [48]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [180]) = $6
	*($3 + [176]) = $6
	*($3 + [184]) = ($6 + $7)
	*($3 + [160]) = ($3 + [176])
	*($3 + [112]) = $3
	CALL $42(($3 + [112]), ($3 + [160]))
	$1 = ($3 + [48])
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL $171($6)
	
.LABEL $label$9
	*(($2 = (($3 + [144]) + [8]))) = *(($3 + [24]))
	*(($10 = (($3 + [112]) + [16]))) = *(($1 + [16]))
	*(($6 = (($3 + [112]) + [24]))) = *(($1 + [24]))
	*($3 + [144]) = *($3 + [16])
	*($3 + [112]) = *($1)
	*($3 + [120]) = *(($1 + [8]))
	$8 = *(($3 + [32]))
	$9 = *($3 + [8])
	$11 = *($3)
	$1 = CALL $131(($3 + [96]), ($3 + [80]))
	*((($3 + [176]) + [24])) = *($6)
	*((($3 + [176]) + [16])) = *($10)
	*((($3 + [160]) + [8])) = *($2)
	*($3 + [232]) = $11
	*($3 + [224]) = $9
	*($3 + [216]) = $8
	*($3 + [184]) = *($3 + [120])
	*($3 + [176]) = *($3 + [112])
	*($3 + [160]) = *($3 + [144])
	$2 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$10 }
	$5 = *((*($2) + $5))
	
.LABEL $label$10
	CALL void $2((int_32 ($3 + [232])), (int_32 ($3 + [224])), (int_32 ($3 + [160])), (int_32 ($3 + [216])), (int_32 ($3 + [176])), (int_32 $1), (int_32 $5))
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$11
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [88])))
	
.LABEL $label$12
	$global$0 = ($3 + [240])
	return [1]
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [17381]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($6)
	$9 = ($0 + [48])
	$3 = *($1)
	$8 = *(($0 + [76]))
	$10 = *(($0 + [72]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$8:
	$5 = ($8 + [-24])
	$11 = *($5)
	if ( ((int_64)*($11) == (int_64)$3) ){ goto $label$7 }
	$8 = $5
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($11 + [160]) == (int_32)$9), [17702])
	goto $label$5 
	
.LABEL $label$6
	$11 = [0]
	$5 = CALL db_find_i64(*($9), *(($0 + [56])), (int_64)7035937633859534848, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$11 = CALL $44($9, $5)
	CALL eosio_assert(((int_32)*($11 + [160]) == (int_32)$9), [17702])
	
.LABEL $label$5
	$5 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($5, [17394])
	CALL eosio_assert($5, [19099])
	CALL eosio_assert($5, [19133])
	$5 = CALL db_next_i64(*($11 + [164]), ($2 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	CALL $44($9, $5)
	
.LABEL $label$9
	CALL $71($9, $11)
	*($2 + [16]) = ($0 + [288])
	CALL $45(($2 + [24]), ($2 + [16]), $1)
	$5 = *($2 + [28])
	if ( ($5 == 0) ){ goto $label$10 }
	if ( ((int_64)*($1) != (int_64)*($5 + [48])) ){ goto $label$10 }
	$8 = *($2 + [24])
	
.LOOP $label$11:
	if ( ((int_64)*($5 + [48]) != (int_64)*($1)) ){ goto $label$10 }
	*($2 + [24]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $8))
	CALL eosio_assert([1], [19099])
	CALL $64(($2 + [24]))
	CALL $72(*($2 + [16]), $5)
	$3 = *($2 + [24])
	$8 = (CASTING uint_32)(uint_64 $3)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( $5) ){ goto $label$11 }
	
.LABEL $label$10
	*($2 + [8]) = ($0 + [88])
	CALL $47(($2 + [24]), ($2 + [8]), $1)
	$5 = *($2 + [28])
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((int_64)*($1) != (int_64)*($5 + [40])) ){ goto $label$12 }
	$8 = *($2 + [24])
	
.LOOP $label$13:
	if ( ((int_64)*($5 + [40]) != (int_64)*($1)) ){ goto $label$12 }
	*($2 + [24]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $8))
	CALL eosio_assert([1], [19099])
	CALL $52(($2 + [24]))
	CALL $73(*($2 + [8]), $5)
	$3 = *($2 + [24])
	$8 = (CASTING uint_32)(uint_64 $3)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( $5) ){ goto $label$13 }
	
.LABEL $label$12
	$global$0 = ($2 + [32])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $167($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [17776])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $171($2)
	
.LABEL $label$5
	*($3 + [8]) = $6
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $167($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [16]) = [0]
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [17776])
	CALL memcpy(($3 + [8]), $6, [4])
	$2 = ($1 & [-4])
	CALL eosio_assert(((int_32)$2 != (int_32)[4]), [17776])
	CALL memcpy((($3 + [8]) | [4]), ($6 + [4]), [4])
	CALL eosio_assert(((int_32)$2 != (int_32)[8]), [17776])
	$2 = (($3 + [8]) + [8])
	CALL memcpy($2, ($6 + [8]), [4])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $171($6)
	
.LABEL $label$4
	$1 = *($2)
	$6 = *($3 + [8])
	*($3 + [24]) = *($3 + [12])
	*($3 + [28]) = $6
	*($3 + [20]) = $1
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ($3 + [28])), (int_32 ($3 + [24])), (int_32 ($3 + [20])), (int_32 $5))
	$global$0 = ($3 + [32])
	return [1]
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [17381]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($6)
	$8 = ( *($9 + [4]) ? uint_32($8 >> [1]) : $1 )
	$8 = *($2 + [72])
	$1 = ($8 & [1])
	$10 = ($9 + [1])
	$9 = CALL $131(($2 + [72]), $1)
	$5 = ( *($9 + [8]) ? $10 : $1 )
	$1 = ($5 + $8)
	if ( ($8 == 0) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( CALL $149(*($5)) ){ goto $label$8 }
	$5 = ($5 + [1])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$9 }
	$5 = $1
	$8 = [1]
	$1 = *($2 + [72])
	if ( (($1 & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$10 }
	$8 = ($5 + [1])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$10 }
	
.LOOP $label$11:
	if ( (CALL $149(*($8)) == 0) ){ goto $label$12 }
	$8 = ($8 + [1])
	if ( ((int_32)$1 != (int_32)$8) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	*($5) = *($8)
	$5 = ($5 + [1])
	$8 = ($8 + [1])
	if ( ((int_32)$1 != (int_32)$8) ){ goto $label$11 }
	
.LABEL $label$10
	$8 = [1]
	$1 = *($2 + [72])
	if ( ($1 & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	$8 = (($9 + uint_32($1 >> $8)) + $8)
	$1 = $10
	goto $label$5 
	
.LABEL $label$6
	$1 = *(($9 + [8]))
	$8 = ($1 + *(($9 + [4])))
	
.LABEL $label$5
	CALL $138($9, ($5 - $1), ($8 - $5))
	$8 = [0]
	$5 = ($5 & [1])
	$5 = *($2 + [72])
	$1 = ( *(($9 + [4])) ? uint_32($5 >> [1]) : $5 )
	if ( ($1 == 0) ){ goto $label$13 }
	$5 = ( *(($9 + [8])) ? $10 : $5 )
	$8 = [0]
	
.LOOP $label$14:
	$8 = ($8 + ((int_32)*($5) == (int_32)[45]))
	$5 = ($5 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$14 }
	
.LABEL $label$13
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [17606])
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	*($2 + [32]) = [45]
	*($2 + [96]) = [0]
	*($2 + [88]) = [1]
	$11 = CALL $3($9, ($2 + [16]), ($2 + [32]), ($2 + [96]), ($2 + [88]))
	*($2 + [28]) = $11
	$12 = ($0 + [192])
	$13 = ($0 + [168])
	$14 = (($2 + [96]) | [8])
	$15 = ($0 + [176])
	$16 = ($0 + [184])
	$17 = ($0 + [200])
	$18 = ($0 + [196])
	$1 = [-1]
	
.LOOP $label$15:
	*($2 + [88]) = [124]
	*($2 + [96]) = [0]
	*($2 + [84]) = [1]
	$5 = CALL $3(($2 + [16]), $2, ($2 + [88]), ($2 + [96]), ($2 + [84]))
	$10 = *($2)
	CALL eosio_assert(((int_32)( *($2 + [4]) ? uint_32($10 >> [1]) : ($10 & [1]) ) != (int_32)[0]), [17619])
	$10 = *($2)
	CALL eosio_assert(((int_32)( *($2 + [4]) ? uint_32($10 >> [1]) : ($10 & [1]) ) == (int_32)[64]), [8300])
	CALL $2($2, ($2 + [96]), [32])
	*(($10 = (($2 + [32]) + [24]))) = *((($2 + [96]) + [24]))
	*(($19 = (($2 + [32]) + [16]))) = *((($2 + [96]) + [16]))
	*($2 + [40]) = *($2 + [104])
	*($2 + [32]) = *($2 + [96])
	CALL $132(($2 + [96]), ($2 + [16]), ($5 + [1]), [-1], ($2 + [16]))
	if ( (*($2) & [1]) ){ goto $label$17 }
	*($2) = [0]
	goto $label$16 
	
.LABEL $label$17
	*(*(($2 + [8]))) = [0]
	*($2 + [4]) = [0]
	
.LABEL $label$16
	CALL $135($2, [0])
	$20 = (($2 + [96]) + [8])
	*(($2 + [8])) = *($20)
	*($2) = *($2 + [96])
	$5 = *($2)
	CALL eosio_assert(((int_32)( *($2 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ) != (int_32)[0]), [17632])
	CALL $143($2, [0], [10])
	$4 = *($0)
	CALL eosio_assert(((int_64)*($13) == (int_64)CALL $fimport$15()), [18132])
	*(($5 = CALL _Znwj([64])) + [48]) = $13
	*($5) = CALL $69($0)
	*($5 + [16]) = *($2 + [32])
	*(($5 + [24])) = *($2 + [40])
	*(($5 + [32])) = *($19)
	*(($5 + [40])) = *($10)
	CALL eosio_assert([1], [18126])
	CALL memcpy(($2 + [96]), $5, [8])
	CALL eosio_assert([1], [18126])
	CALL memcpy($14, ($5 + [16]), [32])
	$3 = *($5)
	$19 = CALL db_store_i64(*($15), (int_64)-4425746941103570944, $4, $3, ($2 + [96]), [40])
	*($5 + [52]) = $19
	if ( (uint_64)($3 <= *($16)) ){ goto $label$18 }
	*($16) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$18
	*($2 + [88]) = $5
	$3 = *($5)
	*($2 + [96]) = $3
	*($2 + [84]) = $19
	$10 = *($18)
	if ( ((uint_32)$10 >= (uint_32)*($17)) ){ goto $label$21 }
	*($10 + [8]) = $3
	*($10 + [16]) = $19
	*($2 + [88]) = [0]
	*($10) = $5
	*($18) = ($10 + [24])
	$10 = ($1 + [2])
	$5 = *($2 + [88])
	*($2 + [88]) = [0]
	if ( $5 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL $70($12, ($2 + [88]), ($2 + [96]), ($2 + [84]))
	$10 = ($1 + [2])
	$5 = *($2 + [88])
	*($2 + [88]) = [0]
	if ( ($5 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv($5)
	
.LABEL $label$19
	if ( ((uint_32)$10 >= (uint_32)$8) ){ goto $label$23 }
	*($2 + [96]) = [45]
	*($2 + [28]) = ($11 + [1])
	*($2 + [88]) = [1]
	$11 = CALL $3($9, ($2 + [16]), ($2 + [96]), ($2 + [28]), ($2 + [88]))
	*($2 + [28]) = $11
	$1 = ($1 + [1])
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$15 }
	goto $label$22 
	
.LABEL $label$23
	$11 = ($11 + [1])
	*($2 + [28]) = $11
	CALL $132(($2 + [96]), $9, $11, [-1], $9)
	if ( (*($2 + [16]) & [1]) ){ goto $label$25 }
	*($2 + [16]) = [0]
	goto $label$24 
	
.LABEL $label$25
	*(*((($2 + [16]) + [8]))) = [0]
	*($2 + [20]) = [0]
	
.LABEL $label$24
	CALL $135(($2 + [16]), [0])
	*((($2 + [16]) + [8])) = *($20)
	*($2 + [16]) = *($2 + [96])
	$1 = ($1 + [1])
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$15 }
	
.LABEL $label$22
	if ( (*($2) & [1]) ){ goto $label$30 }
	if ( (*($2 + [16]) & [1]) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	CALL _ZdlPv(*(($2 + [8])))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$28 }
	
.LABEL $label$29
	CALL _ZdlPv(*(($2 + [24])))
	if ( ((*($2 + [72]) & [1]) == 0) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	if ( (*($2 + [72]) & [1]) ){ goto $label$26 }
	
.LABEL $label$27
	$global$0 = ($2 + [144])
	return 
	
.LABEL $label$26
	CALL _ZdlPv(*(($9 + [8])))
	$global$0 = ($2 + [144])
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [17753])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $167($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([32])
	$6 = CALL $117($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $7)
	$8 = *($1 + [20])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $118(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $171($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

int_32 .FUNC $117 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [18347])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [18396])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($0, *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [17776])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [224])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($3)
	*($1) = *($4)
	*($1 + [8]) = *($4 + [8])
	*($1 + [16]) = *($4 + [16])
	*($1 + [24]) = *($4 + [24])
	$5 = *($0)
	*(($1 + [40])) = *(($4 + [40]))
	*($1 + [32]) = *($4 + [32])
	$4 = *($3)
	*($1 + [48]) = *($4 + [48])
	*(($1 + [88])) = *(($4 + [88]))
	*($1 + [64]) = *($4 + [64])
	*(($1 + [80])) = *(($4 + [80]))
	*(($1 + [72])) = *(($4 + [72]))
	$4 = *($3)
	*($1 + [96]) = *($4 + [96])
	*(($1 + [120])) = *(($4 + [120]))
	*($1 + [112]) = *($4 + [112])
	$4 = *($3)
	*($1 + [128]) = *($4 + [128])
	*(($1 + [136])) = *(($4 + [136]))
	*($2 + [144]) = ($2 + [136])
	*($2 + [140]) = $2
	*($2 + [136]) = $2
	*($2 + [152]) = ($2 + [136])
	*($2 + [164]) = ($1 + [8])
	*($2 + [160]) = $1
	*($2 + [168]) = ($1 + [16])
	*($2 + [172]) = ($1 + [24])
	*($2 + [176]) = ($1 + [32])
	$4 = ($1 + [48])
	*($2 + [180]) = $4
	*($2 + [184]) = ($1 + [64])
	*($2 + [188]) = ($1 + [96])
	*($2 + [192]) = ($1 + [104])
	*($2 + [196]) = ($1 + [105])
	*($2 + [200]) = ($1 + [106])
	*($2 + [204]) = ($1 + [112])
	*($2 + [208]) = ($1 + [128])
	*($2 + [212]) = ($1 + [144])
	*($2 + [216]) = ($1 + [152])
	*($2 + [220]) = ($1 + [160])
	CALL $50(($2 + [160]), ($2 + [152]))
	$6 = *($1)
	*($1 + [172]) = CALL db_store_i64(*($5 + [8]), (int_64)-6497942333781180416, *(*($0 + [8])), $6, $2, [136])
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$1 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$6 = *(($5 + [8]))
	$7 = *(*(($0 + [8])))
	$8 = *($1)
	*($2 + [160]) = *($4)
	*($1 + [176]) = CALL db_idx64_store($6, (int_64)-6497942333781180416, $7, $8, ($2 + [160]))
	$global$0 = ($2 + [224])
}

int_32 .FUNC $115 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [17702])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $116($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [17702])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18126])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [18126])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $113 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [18347])
	$4 = [0]
	$5 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [18396])
	$9 = *($2)
	if ( ((int_64)$9 != (int_64)1397703940) ){ goto $label$12 }
	$5 = (int_64)0
	$10 = (int_64)59
	$4 = [17289]
	$11 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$18 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$7 = ($7 + [-91])
	goto $label$16 
	
.LABEL $label$18
	$6 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$14
	$4 = ($4 + [1])
	$10 = ((int_64)$10 + (int_64)4294967291)
	$11 = ((int_64)$6 | (int_64)$11)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$13 }
	$5 = (int_64)0
	$6 = (int_64)59
	$4 = [17488]
	$12 = (int_64)0
	
.LOOP $label$19:
	$10 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$20 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$7 = ($7 + [-91])
	goto $label$21 
	
.LABEL $label$22
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$20
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$12 = ((int_64)$10 | (int_64)$12)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$19 }
	$4 = [0]
	*(($3 + [56])) = [0]
	*($3 + [32]) = $12
	*($3 + [24]) = $11
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	$7 = CALL $115(($3 + [24]), (uint_64)$9 >> (uint_64)(int_64)8), [19498]
	$10 = *($7) + [8])
	$11 = *($7)
	$2 = *($3 + [48])
	if ( ($2 == 0) ){ goto $label$9 }
	$13 = ($3 + [52])
	$7 = *($13)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$11 }
	
.LOOP $label$23:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$24 }
	CALL _ZdlPv($8)
	
.LABEL $label$24
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$23 }
	$7 = *(($3 + [48]))
	goto $label$10 
	
.LABEL $label$12
	$4 = *([0] + [8376])
	if ( ($4 == 0) ){ goto $label$25 }
	$7 = [8376]
	$5 = *($4 + [16])
	if ( (uint_64)($9 <= $5) ){ goto $label$8 }
	$14 = [2]
	goto $label$6 
	
.LABEL $label$25
	$4 = [8376]
	$7 = [8376]
	$14 = [3]
	goto $label$6 
	
.LABEL $label$11
	$7 = $2
	
.LABEL $label$10
	*($13) = $2
	CALL _ZdlPv($7)
	
.LABEL $label$9
	*($3 + [32]) = (int_64)1397703940
	*($3 + [24]) = (int_64)0
	CALL eosio_assert([1], [18347])
	$5 = (int_64)5459781
	
.LOOP $label$27:
	$2 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$28 }
	$5 = $6
	$2 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$5 = $6
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$26 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$29 }
	$2 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$27 }
	
.LABEL $label$26
	CALL eosio_assert($2, [18396])
	CALL $82(($3 + [8]), ($1 + [208]), *($1), ($3 + [24]))
	CALL eosio_assert(((int_64)*($3 + [16]) == (int_64)$10), [18603])
	$5 = (int_64)
	CALL eosio_assert(((int_64)$5($11 - *($3 + [8]))) > (int_64)-4611686018427387904), [18651])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [18673])
	*(($0 + [8])) = $10
	*($0) = $5
	goto $label$7 
	
.LABEL $label$8
	$14 = [26]
	goto $label$6 
	
.LABEL $label$7
	$14 = [16]
	
.LABEL $label$6
	
.LOOP $label$30:
	goto $label$73 
	
.LABEL $label$75
	if ( ((uint_64)$5 >= (uint_64)$9) ){ goto $label$44 }
	$14 = [25]
	goto $label$30 
	
.LABEL $label$74
	$7 = ($4 + [4])
	$8 = *($4 + [4])
	if ( ($8 == 0) ){ goto $label$46 }
	$14 = [0]
	goto $label$30 
	
.LABEL $label$73
	$4 = $7
	$14 = [1]
	goto $label$30 
	
.LABEL $label$72
	$7 = $4
	$4 = $8
	$5 = *($4 + [16])
	if ( ((uint_64)$9 >= (uint_64)$5) ){ goto $label$47 }
	$14 = [26]
	goto $label$30 
	
.LABEL $label$71
	$8 = *($4)
	if ( $8 ){ goto $label$45 }
	$14 = [27]
	goto $label$30 
	
.LABEL $label$70
	$7 = $4
	$8 = *($7)
	if ( $8 ){ goto $label$41 }
	goto $label$42 
	
.LABEL $label$69
	$8 = *($7)
	if ( $8 ){ goto $label$43 }
	$14 = [22]
	goto $label$30 
	
.LABEL $label$68
	*(($8 = CALL _Znwj([56])) + [24]) = (int_64)0
	*($8) = (int_64)0
	*($8 + [8]) = $4
	*(($8 + [48])) = (int_64)0
	*(($8 + [40])) = (int_64)0
	*(($8 + [32])) = (int_64)0
	*($7) = $8
	*($8 + [16]) = $9
	$4 = $8
	$1 = *(*([0] + [8372]))
	if ( ($1 == 0) ){ goto $label$31 }
	$14 = [23]
	goto $label$30 
	
.LABEL $label$67
	*([0] + [8372]) = $1
	$4 = *($7)
	$14 = [24]
	goto $label$30 
	
.LABEL $label$66
	CALL $49(*([0] + [8376]), $4)
	*([0] + [8380]) = (*([0] + [8380]) + [1])
	$14 = [4]
	goto $label$30 
	
.LABEL $label$65
	$12 = *(($8 + [32]))
	$5 = (int_64)0
	$6 = (int_64)59
	$4 = [17488]
	$11 = (int_64)0
	$14 = [5]
	goto $label$30 
	
.LABEL $label$64
	$10 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$39 }
	$14 = [18]
	goto $label$30 
	
.LABEL $label$63
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$14 = [21]
	goto $label$30 
	
.LABEL $label$62
	$7 = ($7 + [-91])
	goto $label$32 
	
.LABEL $label$61
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	$14 = [20]
	goto $label$30 
	
.LABEL $label$60
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	$14 = [6]
	goto $label$30 
	
.LABEL $label$59
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$40 }
	$14 = [7]
	goto $label$30 
	
.LABEL $label$58
	$5 = *($2)
	*(($3 + [56])) = [0]
	*($3 + [32]) = $11
	*($3 + [24]) = $12
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	$4 = CALL $115(($3 + [24]), (uint_64)$5 >> (uint_64)(int_64)8), [19498]
	*(($2 = (($3 + [8]) + [8]))) = *(($4) + [8]))
	*($3 + [8]) = *($4)
	$8 = *($3 + [48])
	if ( ($8 == 0) ){ goto $label$38 }
	$14 = [8]
	goto $label$30 
	
.LABEL $label$57
	$1 = ($3 + [52])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$37 }
	$14 = [9]
	goto $label$30 
	
.LABEL $label$56
	$14 = [10]
	goto $label$30 
	
.LABEL $label$55
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$35 }
	$14 = [11]
	goto $label$30 
	
.LABEL $label$54
	CALL _ZdlPv($7)
	$14 = [12]
	goto $label$30 
	
.LABEL $label$53
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$36 }
	$14 = [13]
	goto $label$30 
	
.LABEL $label$52
	$4 = *(($3 + [48]))
	goto $label$34 
	
.LABEL $label$51
	$4 = $8
	$14 = [14]
	goto $label$30 
	
.LABEL $label$50
	*($1) = $8
	CALL _ZdlPv($4)
	$14 = [15]
	goto $label$30 
	
.LABEL $label$49
	*($0) = *($3 + [8])
	*(($0 + [8])) = *($2)
	$5 = *($0)
	$14 = [16]
	goto $label$30 
	
.LABEL $label$48
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [19479])
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$47
	$14 = [2]
	goto $label$30 
	
.LABEL $label$46
	$14 = [3]
	goto $label$30 
	
.LABEL $label$45
	$14 = [1]
	goto $label$30 
	
.LABEL $label$44
	$14 = [3]
	goto $label$30 
	
.LABEL $label$43
	$14 = [4]
	goto $label$30 
	
.LABEL $label$42
	$14 = [22]
	goto $label$30 
	
.LABEL $label$41
	$14 = [4]
	goto $label$30 
	
.LABEL $label$40
	$14 = [5]
	goto $label$30 
	
.LABEL $label$39
	$14 = [6]
	goto $label$30 
	
.LABEL $label$38
	$14 = [15]
	goto $label$30 
	
.LABEL $label$37
	$14 = [17]
	goto $label$30 
	
.LABEL $label$36
	$14 = [10]
	goto $label$30 
	
.LABEL $label$35
	$14 = [12]
	goto $label$30 
	
.LABEL $label$34
	$14 = [14]
	goto $label$30 
	
.LABEL $label$33
	$14 = [19]
	goto $label$30 
	
.LABEL $label$32
	$14 = [20]
	goto $label$30 
	
.LABEL $label$31
	$14 = [24]
	goto $label$30 
	$14
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $147($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18126])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18126])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18126])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $147($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [160])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($3)
	*($1) = *($4)
	*($1 + [8]) = *($4 + [8])
	*($1 + [16]) = *($4 + [16])
	$5 = *($0)
	*(($1 + [32])) = *(($4 + [32]))
	*($1 + [24]) = *($4 + [24])
	$4 = *($3)
	*($1 + [48]) = *($4 + [48])
	*($1 + [40]) = *($4 + [40])
	*($1 + [56]) = *($4 + [56])
	*($1 + [60]) = *($4 + [60])
	*($2 + [96]) = ($2 + [81])
	*($2 + [92]) = $2
	*($2 + [88]) = $2
	*($2 + [104]) = ($2 + [88])
	*($2 + [116]) = ($1 + [8])
	*($2 + [112]) = $1
	*($2 + [120]) = ($1 + [16])
	*($2 + [124]) = ($1 + [24])
	$4 = ($1 + [40])
	*($2 + [128]) = $4
	$3 = ($1 + [48])
	*($2 + [132]) = $3
	*($2 + [136]) = ($1 + [56])
	*($2 + [140]) = ($1 + [60])
	*($2 + [144]) = ($1 + [64])
	*($2 + [148]) = ($1 + [72])
	*($2 + [152]) = ($1 + [80])
	CALL $51(($2 + [112]), ($2 + [104]))
	$6 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($5 + [8]), (int_64)4229865212519383040, *(*($0 + [8])), $6, $2, [81])
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$1 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$5 = ($5 + [8])
	$6 = *($5)
	$0 = *(($0 + [8]))
	$7 = *($0)
	$8 = *($1)
	*($2 + [112]) = *($4)
	*($1 + [96]) = CALL db_idx64_store($6, (int_64)4229865212519383040, $7, $8, ($2 + [112]))
	$6 = *($0)
	$7 = *($5)
	$8 = *($1)
	*($2 + [112]) = *($3)
	*(($1 + [100])) = CALL db_idx64_store($7, (int_64)4229865212519383041, $6, $8, ($2 + [112]))
	$global$0 = ($2 + [160])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$11 = ($global$0 - [448])
	$global$0 = $11
	$12 = [0]
	*($11 + [289]) = [0]
	*($11 + [280]) = (int_64)0
	*($11 + [400]) = [0]
	*($11 + [402]) = [0]
	*($11 + [408]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($11 + [416]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($11 + [424]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [18347])
	$13 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$14 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$13 = $14
	$15 = [1]
	$16 = $12
	$12 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$13 = $14
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$15 = ((int_32)$12 < (int_32)[6])
	$16 = ($12 + [1])
	$12 = $16
	if ( $15 ){ goto $label$5 }
	$15 = [1]
	$12 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$15 = [0]
	
.LABEL $label$1
	CALL eosio_assert($15, [18396])
	CALL eosio_assert([1], [18347])
	$13 = (int_64)5462355
	$12 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$14 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$13 = $14
	$15 = [1]
	$16 = $12
	$12 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$13 = $14
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$15 = ((int_32)$12 < (int_32)[6])
	$16 = ($12 + [1])
	$12 = $16
	if ( $15 ){ goto $label$10 }
	$15 = [1]
	$12 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$15 = [0]
	
.LABEL $label$6
	CALL eosio_assert($15, [18396])
	if ( ((int_64)*($3) == (int_64)0) ){ goto $label$12 }
	CALL $86(($11 + [96]), $0, $3)
	CALL memcpy(($11 + [272]), ($11 + [96]), [160])
	goto $label$11 
	
.LABEL $label$12
	$13 = CALL $37($0)
	$17 = ($0 + [168])
	$15 = *(($0 + [196]))
	$3 = *(($0 + [192]))
	if ( ((int_32)$3 == (int_32)$15) ){ goto $label$14 }
	
.LOOP $label$16:
	$12 = ($15 + [-24])
	$16 = *($12)
	if ( ((int_64)*($16) == (int_64)$13) ){ goto $label$15 }
	$15 = $12
	if ( ((int_32)$3 != (int_32)$12) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$3 == (int_32)$15) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($16 + [48]) == (int_32)$17), [17702])
	goto $label$13 
	
.LABEL $label$14
	$16 = [0]
	$12 = CALL db_find_i64(*($17), *(($0 + [176])), (int_64)-4425746941103570944, $13)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$13 }
	$16 = CALL $78($17, $12)
	CALL eosio_assert(((int_32)*($16 + [48]) == (int_32)$17), [17702])
	
.LABEL $label$13
	$12 = ((int_32)$16 != (int_32)[0])
	CALL eosio_assert($12, [18183])
	$13 = CALL $39($0)
	*($11 + [288]) = [0]
	*(($11 + [344])) = *(($16 + [24]))
	*(($11 + [352])) = *(($16 + [32]))
	*(($11 + [360])) = *(($16 + [40]))
	*($11 + [272]) = $13
	*($11 + [336]) = *($16 + [16])
	$13 = *($0)
	*($11) = ($11 + [272])
	CALL $40(($11 + [96]), ($0 + [48]), $13, $11)
	CALL eosio_assert($12, [19099])
	CALL eosio_assert($12, [19133])
	$12 = CALL db_next_i64(*($16 + [52]), ($11 + [96]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$17 }
	CALL $78($17, $12)
	
.LABEL $label$17
	CALL $41($17, $16)
	
.LABEL $label$11
	CALL memcpy($10, ($11 + [272]), [160])
	$13 = CALL $87($0)
	$12 = ($2 + [8])
	*(($11 + [136])) = *($12)
	*(($11 + [168])) = *(($6 + [8]))
	*(($11 + [176])) = *(($6 + [16]))
	*(($11 + [184])) = *(($6 + [24]))
	*($11 + [96]) = $13
	*($11 + [104]) = *($1)
	*($11 + [112]) = *($4)
	*($11 + [120]) = *($5)
	*($11 + [128]) = *($2)
	*($11 + [144]) = *($11 + [272])
	*($11 + [160]) = *($6)
	$13 = *($12)
	*(($11 + [216])) = $13
	*($11 + [200]) = [0]
	*($11 + [202]) = [0]
	*($11 + [208]) = (int_64)0
	*($11 + [192]) = *($7)
	CALL eosio_assert([1], [18347])
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$14 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$13 = $14
	$15 = [1]
	$16 = $12
	$12 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$13 = $14
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$15 = ((int_32)$12 < (int_32)[6])
	$16 = ($12 + [1])
	$12 = $16
	if ( $15 ){ goto $label$22 }
	$15 = [1]
	$12 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$15 = [0]
	
.LABEL $label$18
	CALL eosio_assert($15, [18396])
	$13 = *(($2 + [8]))
	*(($11 + [232])) = $13
	*($11 + [224]) = (int_64)0
	CALL eosio_assert([1], [18347])
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$14 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$13 = $14
	$15 = [1]
	$16 = $12
	$12 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$26
	$13 = $14
	
.LOOP $label$27:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$24 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$15 = ((int_32)$12 < (int_32)[6])
	$16 = ($12 + [1])
	$12 = $16
	if ( $15 ){ goto $label$27 }
	$15 = [1]
	$12 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$15 = [0]
	
.LABEL $label$23
	CALL eosio_assert($15, [18396])
	*($11 + [240]) = [0]
	*($11 + [248]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($11 + [256]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$13 = *($0)
	*($11 + [432]) = ($11 + [96])
	CALL $88($11, ($0 + [288]), $13, ($11 + [432]))
	CALL memcpy($9, ($11 + [96]), [168])
	$3 = ($8 + [4])
	$15 = *($8)
	if ( ((int_32)$15 == (int_32)$3) ){ goto $label$28 }
	$8 = ($0 + [88])
	$6 = ($11 + [24])
	$5 = ($11 + [16])
	$7 = ($11 + [40])
	$9 = ($11 + [48])
	$10 = ($11 + [60])
	$17 = ($11 + [64])
	$18 = ($11 + [56])
	$19 = ($11 + [72])
	$20 = ($11 + [80])
	
.LOOP $label$29:
	$16 = $15
	*($11 + [432]) = *($16 + [16])
	CALL $89($11, $0, ($11 + [432]))
	*($11 + [92]) = *($11 + [4])
	CALL $90($0, ($11 + [92]), ($16 + [24]))
	$13 = CALL $91($0)
	*(($6 + [8])) = *(($16 + [32]))
	*($6) = *($16 + [24])
	*(($11 + [8])) = *($1)
	*($5) = *($4)
	*($7) = *($11 + [272])
	*($9) = *($11 + [96])
	*($10) = *($11 + [92])
	*($17) = [0]
	*($18) = *($16 + [16])
	*($11) = $13
	*($19) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($20) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$13 = *($0)
	*($11 + [440]) = $11
	CALL $92(($11 + [432]), $8, $13, ($11 + [440]))
	$12 = *($16 + [4])
	if ( ($12 == 0) ){ goto $label$31 }
	
.LOOP $label$32:
	$15 = $12
	$12 = *($15)
	if ( $12 ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$15 = *($16 + [8])
	if ( ((int_32)*($15) == (int_32)$16) ){ goto $label$30 }
	$16 = ($16 + [8])
	
.LOOP $label$33:
	$12 = *($16)
	$16 = ($12 + [8])
	$15 = *($12 + [8])
	if ( ((int_32)$12 != (int_32)*($15)) ){ goto $label$33 }
	
.LABEL $label$30
	if ( ((int_32)$15 != (int_32)$3) ){ goto $label$29 }
	
.LABEL $label$28
	CALL $93($0, $2)
	$global$0 = ($11 + [448])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_32 $27
	int_32 $28
	$9 = ($global$0 - [224])
	$global$0 = $9
	$2 = *($9 + [184])
	$10 = CALL $131(($9 + [184]), $2)
	CALL eosio_assert(( *($10 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ), [18830])
	$11 = ($10 + [1])
	$12 = *($9 + [184])
	$13 = *($10 + [8])
	$14 = *($10 + [4])
	$15 = [0]
	$2 = [0]
	$16 = CALL $164([18695])
	if ( ($16 == 0) ){ goto $label$1 }
	$2 = ( $14 ? uint_32($12 >> [1]) : $2 )
	$2 = ($12 & [1])
	$17 = ( $13 ? $11 : $2 )
	$13 = ($17 + $2)
	if ( ((int_32)$2 < (int_32)$16) ){ goto $label$3 }
	$12 = $17
	
.LOOP $label$4:
	$2 = (($2 - $16) + [1])
	if ( ($2 == 0) ){ goto $label$3 }
	$2 = CALL $162($12, [124], $2)
	if ( ($2 == 0) ){ goto $label$3 }
	if ( (CALL $163($2, [18695], $16) == 0) ){ goto $label$2 }
	$12 = ($2 + [1])
	$2 = ($13 - $12)
	if ( ((int_32)$2 >= (int_32)$16) ){ goto $label$4 }
	
.LABEL $label$3
	$2 = $13
	
.LABEL $label$2
	$2 = ( [-1] ? ($2 - $17) : ((int_32)$2 == (int_32)$13) )
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18847])
	$2 = *($9 + [184])
	$14 = ($10 + [8])
	$12 = *($14)
	$18 = ($10 + [4])
	$13 = *($18)
	$16 = CALL $164([18695])
	if ( ($16 == 0) ){ goto $label$5 }
	$2 = ( $13 ? uint_32($2 >> [1]) : $17 )
	$17 = ($2 & [1])
	$15 = ( $12 ? $11 : $17 )
	$13 = ($15 + $2)
	if ( ((int_32)$2 < (int_32)$16) ){ goto $label$7 }
	$12 = $15
	
.LOOP $label$8:
	$2 = (($2 - $16) + [1])
	if ( ($2 == 0) ){ goto $label$7 }
	$2 = CALL $162($12, [124], $2)
	if ( ($2 == 0) ){ goto $label$7 }
	if ( (CALL $163($2, [18695], $16) == 0) ){ goto $label$6 }
	$12 = ($2 + [1])
	$2 = ($13 - $12)
	if ( ((int_32)$2 >= (int_32)$16) ){ goto $label$8 }
	
.LABEL $label$7
	$2 = $13
	
.LABEL $label$6
	$15 = ( [-1] ? ($2 - $15) : ((int_32)$2 == (int_32)$13) )
	
.LABEL $label$5
	$2 = [0]
	$17 = CALL $132(($9 + [168]), $10, [0], $15, $10)
	$13 = *($9 + [184])
	$15 = *($14)
	$14 = *($18)
	$16 = [0]
	$12 = CALL $164([18695])
	if ( ($12 == 0) ){ goto $label$9 }
	$16 = ( $14 ? uint_32($13 >> [1]) : $16 )
	$16 = ($13 & [1])
	$18 = ( $15 ? $11 : $16 )
	$15 = ($18 + $16)
	if ( ((int_32)$16 < (int_32)$12) ){ goto $label$11 }
	$13 = $18
	
.LOOP $label$12:
	$16 = (($16 - $12) + [1])
	if ( ($16 == 0) ){ goto $label$11 }
	$16 = CALL $162($13, [124], $16)
	if ( ($16 == 0) ){ goto $label$11 }
	if ( (CALL $163($16, [18695], $12) == 0) ){ goto $label$10 }
	$13 = ($16 + [1])
	$16 = ($15 - $13)
	if ( ((int_32)$16 >= (int_32)$12) ){ goto $label$12 }
	
.LABEL $label$11
	$16 = $15
	
.LABEL $label$10
	$16 = ( [-1] ? ($16 - $18) : ((int_32)$16 == (int_32)$15) )
	
.LABEL $label$9
	CALL $133($10, CALL $138($10, [0], ($16 + [1])))
	$12 = CALL $131(($9 + [152]), $17)
	$15 = ($12 + [1])
	$13 = ($12 + [4])
	$14 = ($12 + [8])
	
.LOOP $label$15:
	$16 = ($16 & [1])
	$16 = *($12)
	if ( ((uint_32)$2 >= (uint_32)( *($13) ? uint_32($16 >> [1]) : $16 )) ){ goto $label$14 }
	$16 = (( *($14) ? $15 : $16 ) + $2)
	$2 = ($2 + [1])
	if ( CALL $148(*($16)) ){ goto $label$15 }
	$2 = [0]
	goto $label$13 
	
.LABEL $label$14
	$2 = [1]
	
.LABEL $label$13
	CALL eosio_assert($2, [18859])
	if ( ((*($12) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($12 + [8])))
	
.LABEL $label$16
	*($3) = CALL $154(( *($17 + [8]) ? ($17 + [1]) : (*($9 + [168]) & [1]) ))
	$12 = *($9 + [184])
	$14 = ($10 + [8])
	$13 = *($14)
	$3 = ($10 + [4])
	$18 = *($3)
	$15 = [0]
	$2 = [0]
	$16 = CALL $164([18695])
	if ( ($16 == 0) ){ goto $label$17 }
	$2 = ( $18 ? uint_32($12 >> [1]) : $2 )
	$2 = ($12 & [1])
	$19 = ( $13 ? $11 : $2 )
	$13 = ($19 + $2)
	if ( ((int_32)$2 < (int_32)$16) ){ goto $label$19 }
	$12 = $19
	
.LOOP $label$20:
	$2 = (($2 - $16) + [1])
	if ( ($2 == 0) ){ goto $label$19 }
	$2 = CALL $162($12, [124], $2)
	if ( ($2 == 0) ){ goto $label$19 }
	if ( (CALL $163($2, [18695], $16) == 0) ){ goto $label$18 }
	$12 = ($2 + [1])
	$2 = ($13 - $12)
	if ( ((int_32)$2 >= (int_32)$16) ){ goto $label$20 }
	
.LABEL $label$19
	$2 = $13
	
.LABEL $label$18
	$2 = ( [-1] ? ($2 - $19) : ((int_32)$2 == (int_32)$13) )
	
.LABEL $label$17
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18884])
	$2 = *($9 + [184])
	$12 = *($14)
	$13 = *($3)
	$16 = CALL $164([18695])
	if ( ($16 == 0) ){ goto $label$21 }
	$2 = ( $13 ? uint_32($2 >> [1]) : $14 )
	$14 = ($2 & [1])
	$15 = ( $12 ? $11 : $14 )
	$13 = ($15 + $2)
	if ( ((int_32)$2 < (int_32)$16) ){ goto $label$23 }
	$12 = $15
	
.LOOP $label$24:
	$2 = (($2 - $16) + [1])
	if ( ($2 == 0) ){ goto $label$23 }
	$2 = CALL $162($12, [124], $2)
	if ( ($2 == 0) ){ goto $label$23 }
	if ( (CALL $163($2, [18695], $16) == 0) ){ goto $label$22 }
	$12 = ($2 + [1])
	$2 = ($13 - $12)
	if ( ((int_32)$2 >= (int_32)$16) ){ goto $label$24 }
	
.LABEL $label$23
	$2 = $13
	
.LABEL $label$22
	$15 = ( [-1] ? ($2 - $15) : ((int_32)$2 == (int_32)$13) )
	
.LABEL $label$21
	$14 = CALL $132(($9 + [136]), $10, [0], $15, $10)
	$12 = *($9 + [184])
	$13 = *(($10 + [8]))
	$15 = *(($10 + [4]))
	$2 = [0]
	$16 = CALL $164([18695])
	if ( ($16 == 0) ){ goto $label$25 }
	$2 = ( $15 ? uint_32($12 >> [1]) : $2 )
	$2 = ($12 & [1])
	$3 = ( $13 ? $11 : $2 )
	$13 = ($3 + $2)
	if ( ((int_32)$2 < (int_32)$16) ){ goto $label$27 }
	$12 = $3
	
.LOOP $label$28:
	$2 = (($2 - $16) + [1])
	if ( ($2 == 0) ){ goto $label$27 }
	$2 = CALL $162($12, [124], $2)
	if ( ($2 == 0) ){ goto $label$27 }
	if ( (CALL $163($2, [18695], $16) == 0) ){ goto $label$26 }
	$12 = ($2 + [1])
	$2 = ($13 - $12)
	if ( ((int_32)$2 >= (int_32)$16) ){ goto $label$28 }
	
.LABEL $label$27
	$2 = $13
	
.LABEL $label$26
	$2 = ( [-1] ? ($2 - $3) : ((int_32)$2 == (int_32)$13) )
	
.LABEL $label$25
	CALL $133($10, CALL $138($10, [0], ($2 + [1])))
	$15 = ($14 + [1])
	$16 = *($9 + [136])
	$13 = *($14 + [8])
	$12 = *($14 + [4])
	$2 = CALL $164([18697])
	if ( ($2 == 0) ){ goto $label$30 }
	$3 = ($16 & [1])
	$16 = ( $12 ? uint_32($16 >> [1]) : $3 )
	if ( ((int_32)$16 < (int_32)$2) ){ goto $label$29 }
	$3 = ( $13 ? $15 : $3 )
	$13 = ($3 + $16)
	$12 = $3
	
.LOOP $label$31:
	$16 = (($16 - $2) + [1])
	if ( ($16 == 0) ){ goto $label$29 }
	$16 = CALL $162($12, [45], $16)
	if ( ($16 == 0) ){ goto $label$29 }
	if ( (CALL $163($16, [18697], $2) == 0) ){ goto $label$32 }
	$12 = ($16 + [1])
	$16 = ($13 - $12)
	if ( ((int_32)$16 >= (int_32)$2) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	if ( ((int_32)$16 == (int_32)$13) ){ goto $label$29 }
	if ( ((int_32)($16 - $3) == (int_32)[-1]) ){ goto $label$29 }
	
.LABEL $label$30
	$12 = *($9 + [136])
	$19 = ($14 + [8])
	$13 = *($19)
	$20 = ($14 + [4])
	$3 = *($20)
	$18 = [0]
	$2 = [0]
	$16 = CALL $164([18697])
	if ( ($16 == 0) ){ goto $label$33 }
	$2 = ( $3 ? uint_32($12 >> [1]) : $2 )
	$2 = ($12 & [1])
	$21 = ( $13 ? $15 : $2 )
	$13 = ($21 + $2)
	if ( ((int_32)$2 < (int_32)$16) ){ goto $label$35 }
	$12 = $21
	
.LOOP $label$36:
	$2 = (($2 - $16) + [1])
	if ( ($2 == 0) ){ goto $label$35 }
	$2 = CALL $162($12, [45], $2)
	if ( ($2 == 0) ){ goto $label$35 }
	if ( (CALL $163($2, [18697], $16) == 0) ){ goto $label$34 }
	$12 = ($2 + [1])
	$2 = ($13 - $12)
	if ( ((int_32)$2 >= (int_32)$16) ){ goto $label$36 }
	
.LABEL $label$35
	$2 = $13
	
.LABEL $label$34
	$2 = ( [-1] ? ($2 - $21) : ((int_32)$2 == (int_32)$13) )
	
.LABEL $label$33
	$3 = CALL $132(($9 + [80]), $14, [0], $2, $14)
	$2 = *($9 + [136])
	$12 = *($19)
	$13 = *($20)
	$16 = CALL $164([18697])
	if ( ($16 == 0) ){ goto $label$37 }
	$2 = ( $13 ? uint_32($2 >> [1]) : $19 )
	$19 = ($2 & [1])
	$18 = ( $12 ? $15 : $19 )
	$13 = ($18 + $2)
	if ( ((int_32)$2 < (int_32)$16) ){ goto $label$39 }
	$12 = $18
	
.LOOP $label$40:
	$2 = (($2 - $16) + [1])
	if ( ($2 == 0) ){ goto $label$39 }
	$2 = CALL $162($12, [45], $2)
	if ( ($2 == 0) ){ goto $label$39 }
	if ( (CALL $163($2, [18697], $16) == 0) ){ goto $label$38 }
	$12 = ($2 + [1])
	$2 = ($13 - $12)
	if ( ((int_32)$2 >= (int_32)$16) ){ goto $label$40 }
	
.LABEL $label$39
	$2 = $13
	
.LABEL $label$38
	$18 = ( [-1] ? ($2 - $18) : ((int_32)$2 == (int_32)$13) )
	
.LABEL $label$37
	$16 = [0]
	CALL $133($14, CALL $138($14, [0], ($18 + [1])))
	$3 = (*($9 + [80]) & [1])
	$18 = *($3 + [8])
	$2 = ( $18 ? ($3 + [1]) : $3 )
	
.LOOP $label$41:
	$12 = ($2 + $16)
	$13 = ($16 + [1])
	$16 = $13
	if ( *($12) ){ goto $label$41 }
	$22 = (CASTING uint_64)(uint_32 ($13 + [-1]))
	$23 = (int_64)0
	$24 = (int_64)59
	$25 = (int_64)0
	
.LOOP $label$42:
	$26 = (int_64)0
	if ( ((uint_64)$23 >= (uint_64)$22) ){ goto $label$43 }
	$16 = *($2)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$16 = ($16 + [-91])
	goto $label$44 
	
.LABEL $label$45
	$16 = ( ($16 + [-48]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$26 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$47 }
	$26 = ((int_64)((int_64)$26 & (int_64)31) << (int_64)((int_64)$24 & (int_64)4294967295))
	goto $label$46 
	
.LABEL $label$47
	$26 = ((int_64)$26 & (int_64)15)
	
.LABEL $label$46
	$2 = ($2 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$25 = ((int_64)$26 | (int_64)$25)
	$24 = ((int_64)$24 + (int_64)4294967291)
	if ( ((int_64)$24 != (int_64)55834574842) ){ goto $label$42 }
	*($5) = $25
	if ( ($3 == 0) ){ goto $label$29 }
	CALL _ZdlPv($18)
	
.LABEL $label$29
	$2 = ( *(($14 + [8])) ? $15 : (*($9 + [136]) & [1]) )
	$16 = [0]
	
.LOOP $label$48:
	$12 = ($2 + $16)
	$13 = ($16 + [1])
	$16 = $13
	if ( *($12) ){ goto $label$48 }
	$22 = (CASTING uint_64)(uint_32 ($13 + [-1]))
	$23 = (int_64)0
	$24 = (int_64)59
	$25 = (int_64)0
	
.LOOP $label$49:
	$26 = (int_64)0
	if ( ((uint_64)$23 >= (uint_64)$22) ){ goto $label$50 }
	$16 = *($2)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$16 = ($16 + [-91])
	goto $label$51 
	
.LABEL $label$52
	$16 = ( ($16 + [-48]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$26 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$50
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$54 }
	$26 = ((int_64)((int_64)$26 & (int_64)31) << (int_64)((int_64)$24 & (int_64)4294967295))
	goto $label$53 
	
.LABEL $label$54
	$26 = ((int_64)$26 & (int_64)15)
	
.LABEL $label$53
	$2 = ($2 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$25 = ((int_64)$26 | (int_64)$25)
	$24 = ((int_64)$24 + (int_64)4294967291)
	if ( ((int_64)$24 != (int_64)55834574842) ){ goto $label$49 }
	*($4) = $25
	$12 = *($9 + [184])
	$3 = ($10 + [8])
	$13 = *($3)
	$4 = ($10 + [4])
	$18 = *($4)
	$15 = [0]
	$2 = [0]
	$16 = CALL $164([18695])
	if ( ($16 == 0) ){ goto $label$55 }
	$2 = ( $18 ? uint_32($12 >> [1]) : $2 )
	$2 = ($12 & [1])
	$19 = ( $13 ? $11 : $2 )
	$13 = ($19 + $2)
	if ( ((int_32)$2 < (int_32)$16) ){ goto $label$57 }
	$12 = $19
	
.LOOP $label$58:
	$2 = (($2 - $16) + [1])
	if ( ($2 == 0) ){ goto $label$57 }
	$2 = CALL $162($12, [124], $2)
	if ( ($2 == 0) ){ goto $label$57 }
	if ( (CALL $163($2, [18695], $16) == 0) ){ goto $label$56 }
	$12 = ($2 + [1])
	$2 = ($13 - $12)
	if ( ((int_32)$2 >= (int_32)$16) ){ goto $label$58 }
	
.LABEL $label$57
	$2 = $13
	
.LABEL $label$56
	$2 = ( [-1] ? ($2 - $19) : ((int_32)$2 == (int_32)$13) )
	
.LABEL $label$55
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18898])
	$2 = *($9 + [184])
	$12 = *($3)
	$13 = *($4)
	$16 = CALL $164([18695])
	if ( ($16 == 0) ){ goto $label$59 }
	$2 = ( $13 ? uint_32($2 >> [1]) : $3 )
	$3 = ($2 & [1])
	$15 = ( $12 ? $11 : $3 )
	$13 = ($15 + $2)
	if ( ((int_32)$2 < (int_32)$16) ){ goto $label$61 }
	$12 = $15
	
.LOOP $label$62:
	$2 = (($2 - $16) + [1])
	if ( ($2 == 0) ){ goto $label$61 }
	$2 = CALL $162($12, [124], $2)
	if ( ($2 == 0) ){ goto $label$61 }
	if ( (CALL $163($2, [18695], $16) == 0) ){ goto $label$60 }
	$12 = ($2 + [1])
	$2 = ($13 - $12)
	if ( ((int_32)$2 >= (int_32)$16) ){ goto $label$62 }
	
.LABEL $label$61
	$2 = $13
	
.LABEL $label$60
	$15 = ( [-1] ? ($2 - $15) : ((int_32)$2 == (int_32)$13) )
	
.LABEL $label$59
	$19 = CALL $132(($9 + [120]), $10, [0], $15, $10)
	$12 = *($9 + [184])
	$13 = *(($10 + [8]))
	$15 = *(($10 + [4]))
	$2 = [0]
	$16 = CALL $164([18695])
	if ( ($16 == 0) ){ goto $label$63 }
	$2 = ( $15 ? uint_32($12 >> [1]) : $2 )
	$2 = ($12 & [1])
	$3 = ( $13 ? $11 : $2 )
	$13 = ($3 + $2)
	if ( ((int_32)$2 < (int_32)$16) ){ goto $label$65 }
	$12 = $3
	
.LOOP $label$66:
	$2 = (($2 - $16) + [1])
	if ( ($2 == 0) ){ goto $label$65 }
	$2 = CALL $162($12, [124], $2)
	if ( ($2 == 0) ){ goto $label$65 }
	if ( (CALL $163($2, [18695], $16) == 0) ){ goto $label$64 }
	$12 = ($2 + [1])
	$2 = ($13 - $12)
	if ( ((int_32)$2 >= (int_32)$16) ){ goto $label$66 }
	
.LABEL $label$65
	$2 = $13
	
.LABEL $label$64
	$2 = ( [-1] ? ($2 - $3) : ((int_32)$2 == (int_32)$13) )
	
.LABEL $label$63
	CALL $133($10, CALL $138($10, [0], ($2 + [1])))
	*((($9 + [64]) + [8])) = [0]
	*($9 + [64]) = (int_64)0
	$12 = ( *($19 + [8]) ? ($19 + [1]) : (*($9 + [120]) & [1]) )
	$2 = CALL $164($12)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$74 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$77 }
	*($9 + [64]) = ($2 << [1])
	$16 = (($9 + [64]) | [1])
	if ( $2 ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$77
	$13 = (($2 + [16]) & [-16])
	$16 = CALL _Znwj($13)
	*($9 + [64]) = ($13 | [1])
	*($9 + [72]) = $16
	*($9 + [68]) = $2
	
.LABEL $label$76
	CALL memcpy($16, $12, $2)
	
.LABEL $label$75
	*(($16 + $2)) = [0]
	$2 = [1]
	$16 = *($9 + [64])
	CALL eosio_assert(((int_32)( *($9 + [68]) ? uint_32($16 >> [1]) : ($16 & [1]) ) == (int_32)[40]), [8315])
	CALL $2(($9 + [64]), ($9 + [80]), [20])
	*(($6 + [24])) = *((($9 + [80]) + [24]))
	*(($6 + [16])) = *((($9 + [80]) + [16]))
	*(($6 + [8])) = *($9 + [88])
	*($6) = *($9 + [80])
	if ( ((*($9 + [64]) & [1]) == 0) ){ goto $label$78 }
	CALL _ZdlPv(*($9 + [72]))
	
.LABEL $label$78
	$12 = *($9 + [184])
	$13 = *(($10 + [8]))
	$6 = ($10 + [4])
	$15 = *($6)
	$16 = CALL $164([18695])
	if ( ($16 == 0) ){ goto $label$79 }
	$2 = ( $15 ? uint_32($12 >> [1]) : $2 )
	$2 = ($12 & [1])
	$3 = ( $13 ? $11 : $2 )
	$13 = ($3 + $2)
	if ( ((int_32)$2 < (int_32)$16) ){ goto $label$81 }
	$12 = $3
	
.LOOP $label$82:
	$2 = (($2 - $16) + [1])
	if ( ($2 == 0) ){ goto $label$81 }
	$2 = CALL $162($12, [124], $2)
	if ( ($2 == 0) ){ goto $label$81 }
	if ( (CALL $163($2, [18695], $16) == 0) ){ goto $label$80 }
	$12 = ($2 + [1])
	$2 = ($13 - $12)
	if ( ((int_32)$2 >= (int_32)$16) ){ goto $label$82 }
	
.LABEL $label$81
	$2 = $13
	
.LABEL $label$80
	$2 = (((int_32)($2 - $3) != (int_32)[-1]) & ((int_32)$2 != (int_32)$13))
	
.LABEL $label$79
	CALL eosio_assert($2, [18918])
	$15 = [1]
	$12 = *($9 + [184])
	$3 = ($10 + [8])
	$13 = *($3)
	$6 = *($6)
	$2 = [0]
	$16 = CALL $164([18695])
	if ( ($16 == 0) ){ goto $label$83 }
	$2 = ( $6 ? uint_32($12 >> [1]) : $2 )
	$2 = ($12 & [1])
	$4 = ( $13 ? $11 : $2 )
	$13 = ($4 + $2)
	if ( ((int_32)$2 < (int_32)$16) ){ goto $label$85 }
	$12 = $4
	
.LOOP $label$86:
	$2 = (($2 - $16) + [1])
	if ( ($2 == 0) ){ goto $label$85 }
	$2 = CALL $162($12, [124], $2)
	if ( ($2 == 0) ){ goto $label$85 }
	if ( (CALL $163($2, [18695], $16) == 0) ){ goto $label$84 }
	$12 = ($2 + [1])
	$2 = ($13 - $12)
	if ( ((int_32)$2 >= (int_32)$16) ){ goto $label$86 }
	
.LABEL $label$85
	$2 = $13
	
.LABEL $label$84
	$2 = ( [-1] ? ($2 - $4) : ((int_32)$2 == (int_32)$13) )
	
.LABEL $label$83
	$18 = CALL $132(($9 + [64]), $10, [0], $2, $10)
	$2 = *($9 + [184])
	$12 = *($3)
	$6 = ($10 + [4])
	$13 = *($6)
	$16 = CALL $164([18695])
	if ( ($16 == 0) ){ goto $label$87 }
	$2 = ( $13 ? uint_32($2 >> [1]) : $3 )
	$3 = ($2 & [1])
	$15 = ( $12 ? $11 : $3 )
	$13 = ($15 + $2)
	if ( ((int_32)$2 < (int_32)$16) ){ goto $label$89 }
	$12 = $15
	
.LOOP $label$90:
	$2 = (($2 - $16) + [1])
	if ( ($2 == 0) ){ goto $label$89 }
	$2 = CALL $162($12, [124], $2)
	if ( ($2 == 0) ){ goto $label$89 }
	if ( (CALL $163($2, [18695], $16) == 0) ){ goto $label$88 }
	$12 = ($2 + [1])
	$2 = ($13 - $12)
	if ( ((int_32)$2 >= (int_32)$16) ){ goto $label$90 }
	
.LABEL $label$89
	$2 = $13
	
.LABEL $label$88
	$15 = ( [0] ? (([1] - $15) + $2) : ((int_32)$2 == (int_32)$13) )
	
.LABEL $label$87
	$2 = [0]
	CALL $133($10, CALL $138($10, [0], $15))
	$16 = ( *($18 + [8]) ? ($18 + [1]) : (*($9 + [64]) & [1]) )
	*($7) = CALL $160($16, ($9 + [60]), [16])
	$12 = *($9 + [64])
	CALL eosio_assert(((int_32)*($9 + [60]) == (int_32)($16 + ( *($18 + [4]) ? uint_32($12 >> [1]) : ($12 & [1]) ))), [18929])
	$13 = *($9 + [184])
	$15 = *(($10 + [8]))
	$6 = *($6)
	$16 = [1]
	$12 = CALL $164([18695])
	if ( ($12 == 0) ){ goto $label$91 }
	$16 = ( $6 ? uint_32($13 >> [1]) : $16 )
	$16 = ($13 & [1])
	$3 = ( $15 ? $11 : $16 )
	$15 = ($3 + $16)
	if ( ((int_32)$16 < (int_32)$12) ){ goto $label$93 }
	$13 = $3
	
.LOOP $label$94:
	$16 = (($16 - $12) + [1])
	if ( ($16 == 0) ){ goto $label$93 }
	$16 = CALL $162($13, [124], $16)
	if ( ($16 == 0) ){ goto $label$93 }
	if ( (CALL $163($16, [18695], $12) == 0) ){ goto $label$92 }
	$13 = ($16 + [1])
	$16 = ($15 - $13)
	if ( ((int_32)$16 >= (int_32)$12) ){ goto $label$94 }
	
.LABEL $label$93
	$16 = $15
	
.LABEL $label$92
	$16 = (((int_32)($16 - $3) != (int_32)[-1]) & ((int_32)$16 != (int_32)$15))
	
.LABEL $label$91
	CALL eosio_assert($16, [18959])
	$4 = ($0 + [4])
	*($0) = $4
	*($0 + [4 align=4]) = (int_64)0
	$26 = *($8 + [8])
	CALL eosio_assert([1], [18347])
	$23 = (uint_64)$26 >> (uint_64)(int_64)8)
	
.LOOP $label$96:
	$13 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $23) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$95 }
	$24 = (uint_64)$23 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$23 & (int_64)65280) == (int_64)0) ){ goto $label$97 }
	$23 = $24
	$13 = [1]
	$16 = $2
	$2 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$96 }
	goto $label$95 
	
.LABEL $label$97
	$23 = $24
	
.LOOP $label$98:
	if ( ((int_64)((int_64)$23 & (int_64)65280) != (int_64)0) ){ goto $label$95 }
	$23 = (uint_64)$23 >> (uint_64)(int_64)8)
	$16 = ((int_32)$2 < (int_32)[6])
	$12 = ($2 + [1])
	$2 = $12
	if ( $16 ){ goto $label$98 }
	$13 = [1]
	$2 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$96 }
	
.LABEL $label$95
	CALL eosio_assert($13, [18396])
	$21 = ($8 + [8])
	$27 = (($9 + [32]) | [1])
	$15 = (($9 + [16]) | [1])
	$23 = (int_64)0
	$6 = ($10 + [4])
	
.LOOP $label$100:
	$16 = *($9 + [184])
	$12 = ($16 & [1])
	$3 = ($10 + [8])
	$7 = *($3)
	$13 = *($6)
	$2 = CALL $164([18695])
	if ( ($2 == 0) ){ goto $label$101 }
	$16 = ( $13 ? uint_32($16 >> [1]) : $12 )
	if ( ((int_32)$16 < (int_32)$2) ){ goto $label$99 }
	$7 = ( $7 ? $11 : $12 )
	$13 = ($7 + $16)
	$12 = $7
	
.LOOP $label$102:
	$16 = (($16 - $2) + [1])
	if ( ($16 == 0) ){ goto $label$99 }
	$16 = CALL $162($12, [124], $16)
	if ( ($16 == 0) ){ goto $label$99 }
	if ( (CALL $163($16, [18695], $2) == 0) ){ goto $label$103 }
	$12 = ($16 + [1])
	$16 = ($13 - $12)
	if ( ((int_32)$16 >= (int_32)$2) ){ goto $label$102 }
	goto $label$99 
	
.LABEL $label$103
	if ( ((int_32)$16 == (int_32)$13) ){ goto $label$99 }
	if ( ((int_32)($16 - $7) == (int_32)[-1]) ){ goto $label$99 }
	
.LABEL $label$101
	$12 = *($9 + [184])
	$13 = *($3)
	$5 = *($6)
	$7 = [0]
	$2 = [0]
	$16 = CALL $164([18695])
	if ( ($16 == 0) ){ goto $label$104 }
	$2 = ( $5 ? uint_32($12 >> [1]) : $2 )
	$2 = ($12 & [1])
	$20 = ( $13 ? $11 : $2 )
	$13 = ($20 + $2)
	if ( ((int_32)$2 < (int_32)$16) ){ goto $label$106 }
	$12 = $20
	
.LOOP $label$107:
	$2 = (($2 - $16) + [1])
	if ( ($2 == 0) ){ goto $label$106 }
	$2 = CALL $162($12, [124], $2)
	if ( ($2 == 0) ){ goto $label$106 }
	if ( (CALL $163($2, [18695], $16) == 0) ){ goto $label$105 }
	$12 = ($2 + [1])
	$2 = ($13 - $12)
	if ( ((int_32)$2 >= (int_32)$16) ){ goto $label$107 }
	
.LABEL $label$106
	$2 = $13
	
.LABEL $label$105
	$2 = ( [-1] ? ($2 - $20) : ((int_32)$2 == (int_32)$13) )
	
.LABEL $label$104
	$20 = CALL $132(($9 + [48]), $10, [0], $2, $10)
	$2 = *($9 + [184])
	$12 = *($3)
	$13 = *($6)
	$16 = CALL $164([18695])
	if ( ($16 == 0) ){ goto $label$108 }
	$2 = ( $13 ? uint_32($2 >> [1]) : $5 )
	$5 = ($2 & [1])
	$7 = ( $12 ? $11 : $5 )
	$13 = ($7 + $2)
	if ( ((int_32)$2 < (int_32)$16) ){ goto $label$110 }
	$12 = $7
	
.LOOP $label$111:
	$2 = (($2 - $16) + [1])
	if ( ($2 == 0) ){ goto $label$110 }
	$2 = CALL $162($12, [124], $2)
	if ( ($2 == 0) ){ goto $label$110 }
	if ( (CALL $163($2, [18695], $16) == 0) ){ goto $label$109 }
	$12 = ($2 + [1])
	$2 = ($13 - $12)
	if ( ((int_32)$2 >= (int_32)$16) ){ goto $label$111 }
	
.LABEL $label$110
	$2 = $13
	
.LABEL $label$109
	$7 = ( [-1] ? ($2 - $7) : ((int_32)$2 == (int_32)$13) )
	
.LABEL $label$108
	$5 = [0]
	CALL $133($10, CALL $138($10, [0], ($7 + [1])))
	$12 = *($9 + [184])
	$13 = *($3)
	$7 = *($6)
	$2 = [0]
	$16 = CALL $164([18695])
	if ( ($16 == 0) ){ goto $label$112 }
	$2 = ( $7 ? uint_32($12 >> [1]) : $2 )
	$2 = ($12 & [1])
	$28 = ( $13 ? $11 : $2 )
	$13 = ($28 + $2)
	if ( ((int_32)$2 < (int_32)$16) ){ goto $label$114 }
	$12 = $28
	
.LOOP $label$115:
	$2 = (($2 - $16) + [1])
	if ( ($2 == 0) ){ goto $label$114 }
	$2 = CALL $162($12, [124], $2)
	if ( ($2 == 0) ){ goto $label$114 }
	if ( (CALL $163($2, [18695], $16) == 0) ){ goto $label$113 }
	$12 = ($2 + [1])
	$2 = ($13 - $12)
	if ( ((int_32)$2 >= (int_32)$16) ){ goto $label$115 }
	
.LABEL $label$114
	$2 = $13
	
.LABEL $label$113
	$2 = ( [-1] ? ($2 - $28) : ((int_32)$2 == (int_32)$13) )
	
.LABEL $label$112
	$7 = CALL $132(($9 + [32]), $10, [0], $2, $10)
	$2 = *($9 + [184])
	$12 = *($3)
	$13 = *($6)
	$16 = CALL $164([18695])
	if ( ($16 == 0) ){ goto $label$116 }
	$2 = ( $13 ? uint_32($2 >> [1]) : $5 )
	$5 = ($2 & [1])
	$3 = ( $12 ? $11 : $5 )
	$13 = ($3 + $2)
	if ( ((int_32)$2 < (int_32)$16) ){ goto $label$118 }
	$12 = $3
	
.LOOP $label$119:
	$2 = (($2 - $16) + [1])
	if ( ($2 == 0) ){ goto $label$118 }
	$2 = CALL $162($12, [124], $2)
	if ( ($2 == 0) ){ goto $label$118 }
	if ( (CALL $163($2, [18695], $16) == 0) ){ goto $label$117 }
	$12 = ($2 + [1])
	$2 = ($13 - $12)
	if ( ((int_32)$2 >= (int_32)$16) ){ goto $label$119 }
	
.LABEL $label$118
	$2 = $13
	
.LABEL $label$117
	$5 = ( [-1] ? ($2 - $3) : ((int_32)$2 == (int_32)$13) )
	
.LABEL $label$116
	$2 = [0]
	CALL $133($10, CALL $138($10, [0], ($5 + [1])))
	$16 = *($9 + [32])
	CALL eosio_assert(( *($9 + [36]) ? uint_32($16 >> [1]) : ($16 & [1]) ), [18973])
	CALL $131(($9 + [16]), $7)
	
.LOOP $label$121:
	$12 = [1]
	$16 = ($16 & [1])
	$16 = *($9 + [16])
	if ( ((uint_32)$2 >= (uint_32)( *($9 + [20]) ? uint_32($16 >> [1]) : $16 )) ){ goto $label$120 }
	$16 = (( *((($9 + [16]) + [8])) ? $15 : $16 ) + $2)
	$2 = ($2 + [1])
	if ( CALL $148(*($16)) ){ goto $label$121 }
	$12 = [0]
	
.LABEL $label$120
	CALL eosio_assert($12, [18994])
	if ( ((*($9 + [16]) & [1]) == 0) ){ goto $label$122 }
	CALL _ZdlPv(*((($9 + [16]) + [8])))
	
.LABEL $label$122
	$3 = (($9 + [32]) + [8])
	$2 = CALL $153(( *($3) ? $27 : (*($9 + [32]) & [1]) ))
	*($9 + [12]) = $2
	CALL $34($1, $2)
	CALL $84(($9 + [80]), $1, CALL $131($9, $20), $21)
	if ( ((*($9) & [1]) == 0) ){ goto $label$123 }
	CALL _ZdlPv(*(($9 + [8])))
	
.LABEL $label$123
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$125 }
	$13 = *($9 + [12])
	$16 = $4
	
.LOOP $label$126:
	$12 = ((int_32)*($2 + [16]) < (int_32)$13)
	$16 = ( $16 ? $2 : $12 )
	$2 = *(($2 + ($12 << [2])))
	if ( $2 ){ goto $label$126 }
	if ( ((int_32)$16 == (int_32)$4) ){ goto $label$125 }
	if ( ((int_32)$13 >= (int_32)*($16 + [16])) ){ goto $label$124 }
	
.LABEL $label$125
	$16 = $4
	
.LABEL $label$124
	*($9 + [208]) = ($9 + [12])
	CALL $85(($9 + [216]), $0, ($9 + [12]), [18346], ($9 + [208]), ($9 + [200]))
	$12 = *($9 + [216])
	$2 = ($12 + [24])
	if ( ((int_32)$16 == (int_32)$4) ){ goto $label$128 }
	CALL eosio_assert(((int_64)*((($9 + [80]) + [8])) == (int_64)*(($12 + [32]))), [18505])
	$24 = ((int_64)*($2) + (int_64)*($9 + [80]))
	*($2) = $24
	CALL eosio_assert(((int_64)$24 > (int_64)-4611686018427387904), [18548])
	CALL eosio_assert(((int_64)*($2) < (int_64)4611686018427387904), [18567])
	goto $label$127 
	
.LABEL $label$128
	*($2) = *($9 + [80])
	*(($2 + [8])) = *((($9 + [80]) + [8]))
	
.LABEL $label$127
	CALL eosio_assert(((int_64)*((($9 + [80]) + [8])) == (int_64)$26), [18505])
	$23 = ((int_64)*($9 + [80]) + (int_64)$23)
	CALL eosio_assert(((int_64)$23 > (int_64)-4611686018427387904), [18548])
	CALL eosio_assert(((int_64)$23 < (int_64)4611686018427387904), [18567])
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$129 }
	CALL _ZdlPv(*($3))
	
.LABEL $label$129
	if ( ((*($9 + [48]) & [1]) == 0) ){ goto $label$100 }
	CALL _ZdlPv(*((($9 + [48]) + [8])))
	goto $label$100 
	
.LABEL $label$99
	*($8) = $23
	*(($8 + [8])) = $26
	if ( (*($9 + [64]) & [1]) ){ goto $label$131 }
	if ( (*($9 + [120]) & [1]) ){ goto $label$130 }
	goto $label$73 
	
.LABEL $label$131
	CALL _ZdlPv(*(($18 + [8])))
	if ( ((*($9 + [120]) & [1]) == 0) ){ goto $label$73 }
	
.LABEL $label$130
	CALL _ZdlPv(*(($19 + [8])))
	$2 = [1]
	if ( ((*($9 + [136]) & [1]) == 0) ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$74
	CALL $130(($9 + [64]))
	
.LABEL $label$73
	$2 = [1]
	if ( (*($9 + [136]) & [1]) ){ goto $label$71 }
	
.LABEL $label$72
	if ( (*($9 + [168]) & $2) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$71
	CALL _ZdlPv(*(($14 + [8])))
	if ( ((*($9 + [168]) & $2) == 0) ){ goto $label$69 }
	
.LABEL $label$70
	CALL _ZdlPv(*(($17 + [8])))
	if ( ((*($9 + [184]) & [1]) == 0) ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$69
	if ( (*($9 + [184]) & [1]) ){ goto $label$67 }
	
.LABEL $label$68
	$global$0 = ($9 + [224])
	return 
	
.LABEL $label$67
	CALL _ZdlPv(*(($10 + [8])))
	$global$0 = ($9 + [224])
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	CALL require_auth(*($0))
	CALL require_recipient(*($1))
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = CALL action_data_size()
	if ( ($6 == 0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$1 = CALL $167($6)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $6)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [20]) = $1
	*($3 + [16]) = $1
	*($3 + [24]) = ($1 + $6)
	CALL $68(($3 + [16]), $3)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL $171($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	$6 = CALL $131(($3 + [16]), $3)
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $6), (int_32 $5))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$6
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$7
	$global$0 = ($3 + [32])
	return [1]
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [240])
	$global$0 = $4
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17381]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$10 = ($10 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($8)
	*($4 + [216]) = CALL $37($0)
	CALL $38(($4 + [160]), $0, ($4 + [216]))
	$5 = CALL $39($0)
	*(($4 + [56])) = (int_64)0
	*(($4 + [48])) = (int_64)0
	*(($4 + [40])) = (int_64)0
	*(($4 + [72])) = *(($4 + [184]))
	*(($4 + [80])) = *(($4 + [192]))
	*(($4 + [88])) = *((($4 + [160]) + [40]))
	*(($4 + [120])) = (int_64)0
	*(($4 + [112])) = (int_64)0
	*(($4 + [104])) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4) = $5
	*($4 + [17]) = [0]
	*($4 + [32]) = (int_64)0
	*($4 + [16]) = *($1)
	*($4 + [64]) = *($4 + [176])
	*($4 + [96]) = (int_64)0
	*($4 + [128]) = [0]
	*($4 + [130]) = [0]
	*($4 + [136]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$5 = CALL current_time()
	*($4 + [152]) = *($3)
	*($4 + [144]) = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$5 = *($0)
	*($4 + [232]) = $4
	CALL $40(($4 + [224]), ($0 + [48]), $5, ($4 + [232]))
	CALL $41(($0 + [168]), ($4 + [160]))
	$global$0 = ($4 + [240])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$2 = ($global$0 - [208])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $167($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [64])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [48]) = [0]
	*($3 + [50]) = [0]
	*($3 + [56]) = (int_64)0
	CALL eosio_assert([1], [18347])
	$8 = ($3 + [16])
	$9 = (int_64)5462355
	
.LOOP $label$5:
	$10 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$11 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$9 = $11
	$10 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$9 = $11
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$12 = ($1 + [1])
	$1 = $12
	if ( $2 ){ goto $label$7 }
	$10 = [1]
	$1 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($10, [18396])
	*($3 + [132]) = $6
	*($3 + [128]) = $6
	*($3 + [136]) = ($6 + $7)
	*($3 + [168]) = ($3 + [128])
	*($3 + [96]) = $3
	CALL $43(($3 + [96]), ($3 + [168]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $171($6)
	
.LABEL $label$8
	*(($1 = (($3 + [96]) + [16]))) = *(($8 + [16]))
	*(($2 = (($3 + [96]) + [24]))) = *(($8 + [24]))
	*(($12 = (($3 + [80]) + [8]))) = *(($3 + [64]))
	*($3 + [96]) = *($8)
	*($3 + [104]) = *(($8 + [8]))
	*($3 + [80]) = *($3 + [56])
	$10 = *(($3 + [50]))
	$6 = *(($3 + [49]))
	$8 = *(($3 + [48]))
	$9 = *($3 + [8])
	$11 = *($3)
	*((($3 + [168]) + [8])) = *($12)
	*((($3 + [128]) + [16])) = *($1)
	*((($3 + [128]) + [24])) = *($2)
	*($3 + [200]) = $11
	*($3 + [192]) = $9
	*($3 + [191]) = $8
	*($3 + [190]) = $6
	*($3 + [189]) = $10
	*($3 + [168]) = *($3 + [80])
	*($3 + [128]) = *($3 + [96])
	*($3 + [136]) = *($3 + [104])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	CALL void $1((int_32 ($3 + [200])), (int_32 ($3 + [192])), (int_32 ($3 + [128])), (int_32 ($3 + [191])), (int_32 ($3 + [190])), (int_32 ($3 + [189])), (int_32 ($3 + [168])), (int_32 $5))
	$global$0 = ($3 + [208])
	return [1]
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [17776])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $68(*($1), ($0 + [32]))
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $167($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3) = [0]
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [17776])
	CALL memcpy($3, $6, [1])
	CALL eosio_assert(((uint_32)($1 + [-1]) > (uint_32)[7]), [17776])
	$2 = ($3 + [8])
	CALL memcpy($2, ($6 + [1]), [8])
	CALL eosio_assert(((uint_32)($1 + [-9]) > (uint_32)[7]), [17776])
	$7 = ($3 + [16])
	CALL memcpy($7, ($6 + [9]), [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $171($6)
	
.LABEL $label$4
	$8 = *($7)
	$1 = *($3)
	*($3 + [32]) = *($2)
	*($3 + [47]) = $1
	*($3 + [24]) = $8
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ($3 + [47])), (int_32 ($3 + [32])), (int_32 ($3 + [24])), (int_32 $5))
	$global$0 = ($3 + [48])
	return [1]
}

int_32 .FUNC $27 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [32]) = (int_64)0
	*(($1 = ($0 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [18347])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [18396])
	*($0 + [106]) = [0]
	*($0 + [104]) = [0]
	*($0 + [112]) = (int_64)0
	*(($1 = ($0 + [120]))) = (int_64)1398362884
	CALL eosio_assert([1], [18347])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [18396])
	*(($1 = ($0 + [136]))) = (int_64)1398362884
	*($0 + [128]) = (int_64)0
	CALL eosio_assert([1], [18347])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$2 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [18396])
	*($0 + [144]) = [0]
	*($0 + [152]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($0 + [160]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = [0]
	$3 = [0]
	$4 = *([0] + [8376])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = *($1 + [8])
	
.LOOP $label$3:
	$6 = *($4 + [16])
	if ( (uint_64)($5 <= $6) ){ goto $label$4 }
	if ( ((uint_64)$6 >= (uint_64)$5) ){ goto $label$2 }
	$4 = ($4 + [4])
	
.LABEL $label$4
	$4 = *($4)
	if ( $4 ){ goto $label$3 }
	$3 = [0]
	goto $label$1 
	
.LABEL $label$2
	$3 = [1]
	
.LABEL $label$1
	CALL eosio_assert($3, [18745])
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$5 }
	$5 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$5 = $6
	$2 = [1]
	$3 = $4
	$4 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $6
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$2 = ((int_32)$4 < (int_32)[6])
	$3 = ($4 + [1])
	$4 = $3
	if ( $2 ){ goto $label$9 }
	$2 = [1]
	$4 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	
.LABEL $label$5
	CALL eosio_assert($2, [18763])
	$5 = *(($1 + [8]))
	$4 = *([0] + [8376])
	if ( ($4 == 0) ){ goto $label$12 }
	$2 = [8376]
	$6 = *($4 + [16])
	if ( (uint_64)($5 <= $6) ){ goto $label$11 }
	$7 = [2]
	goto $label$10 
	
.LABEL $label$12
	$4 = [8376]
	$2 = [8376]
	$7 = [3]
	goto $label$10 
	
.LABEL $label$11
	$7 = [9]
	
.LABEL $label$10
	
.LOOP $label$13:
	goto $label$30 
	
.LABEL $label$32
	if ( ((uint_64)$6 >= (uint_64)$5) ){ goto $label$18 }
	$7 = [8]
	goto $label$13 
	
.LABEL $label$31
	$2 = ($4 + [4])
	$3 = *($4 + [4])
	if ( ($3 == 0) ){ goto $label$20 }
	$7 = [0]
	goto $label$13 
	
.LABEL $label$30
	$4 = $2
	$7 = [1]
	goto $label$13 
	
.LABEL $label$29
	$2 = $4
	$4 = $3
	$6 = *($4 + [16])
	if ( ((uint_64)$5 >= (uint_64)$6) ){ goto $label$21 }
	$7 = [9]
	goto $label$13 
	
.LABEL $label$28
	$3 = *($4)
	if ( $3 ){ goto $label$19 }
	$7 = [10]
	goto $label$13 
	
.LABEL $label$27
	$2 = $4
	$3 = *($2)
	if ( $3 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$26
	$3 = *($2)
	if ( $3 ){ goto $label$17 }
	$7 = [5]
	goto $label$13 
	
.LABEL $label$25
	*(($3 = CALL _Znwj([56])) + [24]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [8]) = $4
	*(($3 + [48])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*($2) = $3
	*($3 + [16]) = $5
	$4 = $3
	$8 = *(*([0] + [8372]))
	if ( ($8 == 0) ){ goto $label$14 }
	$7 = [6]
	goto $label$13 
	
.LABEL $label$24
	*([0] + [8372]) = $8
	$4 = *($2)
	$7 = [7]
	goto $label$13 
	
.LABEL $label$23
	CALL $49(*([0] + [8376]), $4)
	*([0] + [8380]) = (*([0] + [8380]) + [1])
	$7 = [4]
	goto $label$13 
	
.LABEL $label$22
	CALL eosio_assert(((uint_64)*($1) >= (uint_64)*(($3 + [40]))), [18780])
	return 
	
.LABEL $label$21
	$7 = [2]
	goto $label$13 
	
.LABEL $label$20
	$7 = [3]
	goto $label$13 
	
.LABEL $label$19
	$7 = [1]
	goto $label$13 
	
.LABEL $label$18
	$7 = [3]
	goto $label$13 
	
.LABEL $label$17
	$7 = [4]
	goto $label$13 
	
.LABEL $label$16
	$7 = [5]
	goto $label$13 
	
.LABEL $label$15
	$7 = [4]
	goto $label$13 
	
.LABEL $label$14
	$7 = [7]
	goto $label$13 
	$7
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [17776])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[19]), [17776])
	CALL memcpy($2, *($3 + [4]), [20])
	*($3 + [4]) = (*($3 + [4]) + [20])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [17776])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [17776])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [17776])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [17776])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [17776])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [17776])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [60])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $147($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $103 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [24]) = (int_64)0
	*(($1 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [18347])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [18396])
	*($0 + [64]) = [0]
	*($0 + [60]) = [2]
	*($0 + [72]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($0 + [80]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	return $0
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $147($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $147($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [17776])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [17776])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [17776])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [17776])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [40])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $107 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $147($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [17776])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [17776])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [17776])
	CALL memcpy($2, *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [17776])
	CALL memcpy($2, *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[19]), [17776])
	CALL memcpy($2, *($3 + [4]), [20])
	*($3 + [4]) = (*($3 + [4]) + [20])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [17776])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [17776])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [17776])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17776])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $109 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [18132])
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)1397703940
	*($5) = (int_64)0
	CALL eosio_assert([1], [18347])
	$6 = ($5 + [8])
	$7 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [18396])
	*($5 + [16]) = $1
	$8 = *($3)
	*($5) = *($8)
	*(($5 + [8])) = *(($8 + [8]))
	CALL eosio_assert([1], [18126])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL eosio_assert([1], [18126])
	CALL memcpy((($4 + [16]) | [8]), $6, [8])
	$10 = CALL db_store_i64(*($1 + [8]), (int_64)6820308914865700864, $2, (int_64)6820308914865700864, ($4 + [16]), [16])
	*($5 + [20]) = $10
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$6 }
	*(($1 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$6
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)6820308914865700864
	*($4 + [4]) = $10
	$11 = ($1 + [28])
	$8 = *($11)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = (int_64)6820308914865700864
	*($8 + [16]) = $10
	*($4 + [8]) = [0]
	*($8) = $5
	*($11) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $110(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$7
	*($0 + [4]) = $5
	*($0) = $1
	$8 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($8 == 0) ){ goto $label$9 }
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$global$0 = ($4 + [32])
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($1 + [168])
	$4 = *($2)
	$6 = *(($1 + [196]))
	$5 = *(($1 + [192]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$2 = ($6 + [-24])
	$7 = *($2)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$3 }
	$6 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$3), [17702])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$2 = CALL db_find_i64(*($3), *(($1 + [176])), (int_64)-4425746941103570944, $4)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $78($3, $2)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$3), [17702])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18183])
	*(($0 + [40])) = *(($7 + [40]))
	*(($0 + [32])) = *(($7 + [32]))
	*(($0 + [24])) = *(($7 + [24]))
	*(($0 + [16])) = *(($7 + [16]))
	*(($0 + [8])) = *(($7 + [8]))
	*($0) = *($7)
}

int_64 .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [80])
	$global$0 = $1
	$2 = ($0 + [304])
	$3 = *($2)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$1 }
	$3 = (int_64)0
	$4 = ($0 + [288])
	$5 = CALL db_lowerbound_i64(*($4), *(($0 + [296])), (int_64)-6497942333781180416, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $48($4, $5)
	*($1 + [44]) = [0]
	*($1 + [40]) = $4
	$3 = *(*(CALL $74(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [304])) = $3
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	*($1) = *($2)
	$2 = ($0 + [104])
	$3 = *($2)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$3 }
	$3 = (int_64)0
	$4 = ($0 + [88])
	$5 = CALL db_lowerbound_i64(*($4), *(($0 + [96])), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	CALL $75($4, $5)
	*($1 + [44]) = [0]
	*($1 + [40]) = $4
	$3 = *(*(CALL $76(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*(($0 + [104])) = $3
	
.LABEL $label$3
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	*(($1 + [8])) = *($2)
	$2 = ($0 + [64])
	$3 = *($2)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$5 }
	$3 = (int_64)0
	$4 = ($0 + [48])
	$5 = CALL db_lowerbound_i64(*($4), *(($0 + [56])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	CALL $44($4, $5)
	*($1 + [44]) = [0]
	*($1 + [40]) = $4
	$3 = *(*(CALL $77(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*(($0 + [64])) = $3
	
.LABEL $label$5
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	*(($1 + [16])) = *($2)
	$2 = ($0 + [168])
	$4 = ($0 + [184])
	$3 = *($4)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$7 }
	$3 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($2), *(($0 + [176])), (int_64)-4425746941103570944, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	CALL $78($2, $5)
	*($1 + [44]) = [0]
	*($1 + [40]) = $2
	$3 = *(*(CALL $79(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*(($0 + [184])) = $3
	
.LABEL $label$7
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	$3 = *($4)
	*(($1 + [24])) = $3
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$9 }
	$3 = (int_64)0
	$4 = CALL db_lowerbound_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-4425746941103570944, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$10 }
	CALL $78($2, $4)
	*($1 + [44]) = [0]
	*($1 + [40]) = $2
	$3 = *(*(CALL $79(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*(($0 + [184])) = $3
	
.LABEL $label$9
	$5 = ($0 + [248])
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	*(($1 + [32])) = *(($0 + [184]))
	$2 = *(($0 + [276]))
	if ( ((int_32)$2 == (int_32)*(($0 + [272]))) ){ goto $label$13 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$5), [17702])
	if ( $2 ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	$2 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$12 }
	$2 = CALL $80($5, $2)
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$5), [17702])
	goto $label$11 
	
.LABEL $label$12
	$2 = $1
	
.LABEL $label$11
	*((($1 + [40]) + [32])) = *(($2 + [32]))
	*((($1 + [40]) + [24])) = *(($2 + [24]))
	*(($4 = (($1 + [40]) + [16]))) = *(($2 + [16]))
	*((($1 + [40]) + [8])) = *(($2 + [8]))
	*($1 + [40]) = *($2)
	*($4) = ((int_64)*($4) + (int_64)1)
	CALL $81($5, ($1 + [40]), *($0))
	$3 = *($4)
	$global$0 = ($1 + [80])
	return $3
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $147($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_64 .FUNC $37 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [80])
	$global$0 = $1
	$2 = ($0 + [304])
	$3 = *($2)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$1 }
	$3 = (int_64)0
	$4 = ($0 + [288])
	$5 = CALL db_lowerbound_i64(*($4), *(($0 + [296])), (int_64)-6497942333781180416, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $48($4, $5)
	*($1 + [44]) = [0]
	*($1 + [40]) = $4
	$3 = *(*(CALL $74(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [304])) = $3
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	*($1) = *($2)
	$2 = ($0 + [104])
	$3 = *($2)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$3 }
	$3 = (int_64)0
	$4 = ($0 + [88])
	$5 = CALL db_lowerbound_i64(*($4), *(($0 + [96])), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	CALL $75($4, $5)
	*($1 + [44]) = [0]
	*($1 + [40]) = $4
	$3 = *(*(CALL $76(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*(($0 + [104])) = $3
	
.LABEL $label$3
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	*(($1 + [8])) = *($2)
	$2 = ($0 + [64])
	$3 = *($2)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$5 }
	$3 = (int_64)0
	$4 = ($0 + [48])
	$5 = CALL db_lowerbound_i64(*($4), *(($0 + [56])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	CALL $44($4, $5)
	*($1 + [44]) = [0]
	*($1 + [40]) = $4
	$3 = *(*(CALL $77(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*(($0 + [64])) = $3
	
.LABEL $label$5
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	*(($1 + [16])) = *($2)
	$2 = ($0 + [168])
	$4 = ($0 + [184])
	$3 = *($4)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$7 }
	$3 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($2), *(($0 + [176])), (int_64)-4425746941103570944, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	CALL $78($2, $5)
	*($1 + [44]) = [0]
	*($1 + [40]) = $2
	$3 = *(*(CALL $79(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*(($0 + [184])) = $3
	
.LABEL $label$7
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	$3 = *($4)
	*(($1 + [24])) = $3
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$9 }
	$3 = (int_64)0
	$4 = CALL db_lowerbound_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-4425746941103570944, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$10 }
	CALL $78($2, $4)
	*($1 + [44]) = [0]
	*($1 + [40]) = $2
	$3 = *(*(CALL $79(($1 + [40])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*(($0 + [184])) = $3
	
.LABEL $label$9
	$5 = ($0 + [248])
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [17781])
	*(($1 + [32])) = *(($0 + [184]))
	$2 = *(($0 + [276]))
	if ( ((int_32)$2 == (int_32)*(($0 + [272]))) ){ goto $label$13 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$5), [17702])
	if ( $2 ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	$2 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$12 }
	$2 = CALL $80($5, $2)
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$5), [17702])
	goto $label$11 
	
.LABEL $label$12
	$2 = $1
	
.LABEL $label$11
	*(($4 = (($1 + [40]) + [32]))) = *(($2 + [32]))
	*(($6 = (($1 + [40]) + [24]))) = *(($2 + [24]))
	*((($1 + [40]) + [16])) = *(($2 + [16]))
	*((($1 + [40]) + [8])) = *(($2 + [8]))
	*($1 + [40]) = *($2)
	$3 = *($4)
	CALL eosio_assert(((uint_64)*($6) > (uint_64)$3), [17662])
	*($4) = ((int_64)$3 + (int_64)1)
	CALL $81($5, ($1 + [40]), *($0))
	$3 = *($4)
	$global$0 = ($1 + [80])
	return $3
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	if ( ((int_32)$1 > (int_32)[299]) ){ goto $label$3 }
	if ( ((uint_32)$1 > (uint_32)[222]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)$1 <= (int_32)[499]) ){ goto $label$7 }
	if ( ((int_32)$1 <= (int_32)[599]) ){ goto $label$6 }
	if ( ((int_32)$1 > (int_32)[665]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[600]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[660]) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$7
	if ( ((int_32)$1 > (int_32)[399]) ){ goto $label$5 }
	if ( ((int_32)$1 == (int_32)[300]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[330]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[333]) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[500]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[550]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[555]) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	if ( ((int_32)$1 == (int_32)[400]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[440]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[444]) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$1 == (int_32)[666]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[777]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [17646])
	return 
	
.LABEL $label$1
	$1
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [16])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17753])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $167($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [12]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[3]), [17776])
	CALL memcpy($5, $2, [4])
	$6 = ($4 & [-4])
	CALL eosio_assert(((int_32)$6 != (int_32)[4]), [17776])
	CALL memcpy(($5 + [4]), ($2 + [4]), [4])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [17776])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	*($5 + [16]) = $1
	*($3 + [8]) = $5
	$7 = *($5)
	*($3 + [4]) = $7
	*($3) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [16]) = $1
	*($6 + [8]) = (CASTING uint_64)(uint_32 $7)
	*($3 + [8]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $36(($0 + [24]), ($3 + [8]), ($3 + [4]), $3)
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $171($2)
	
.LABEL $label$6
	$1 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [16])
	return $5
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $30($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [18126])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [18126])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $112(CALL $111($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $33($0, *($1))
	CALL $33($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $147($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18126])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [18126])
	CALL memcpy(*($3 + [4]), ($0 + [48]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	CALL $122(*($1), ($0 + [80]))
}