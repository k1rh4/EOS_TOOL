(data (i32.const 4) "0h\00\00")
(data (i32.const 16) "eosio.token\00")
(data (i32.const 32) "transfer\00")
(data (i32.const 48) "divided\00")
(data (i32.const 64) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 128) "from account doesn\'t exist\00")
(data (i32.const 160) "active\00")
(data (i32.const 176) "bonus of profit\00")
(data (i32.const 192) "cannot pass end iterator to modify\00")
(data (i32.const 240) "object passed to modify is not in multi_index\00")
(data (i32.const 288) "cannot modify objects in table of another contract\00")
(data (i32.const 352) "attempt to subtract asset with different symbol\00")
(data (i32.const 400) "subtraction underflow\00")
(data (i32.const 432) "subtraction overflow\00")
(data (i32.const 464) "updater cannot change primary key when modifying an object\00")
(data (i32.const 528) "write\00")
(data (i32.const 544) "error reading iterator\00")
(data (i32.const 576) "read\00")
(data (i32.const 592) "get\00")
(data (i32.const 608) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 672) "invalid symbol name\00")
(data (i32.const 704) "attempt to add asset with different symbol\00")
(data (i32.const 752) "addition underflow\00")
(data (i32.const 784) "addition overflow\00")
(data (i32.const 816) "stake amount must greater than zero\00")
(data (i32.const 864) "from account is not exist\00")
(data (i32.const 896) "token with symbol desn\'t exists\00")
(data (i32.const 928) "stake symbol must be crown\00")
(data (i32.const 960) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1024) "unstake quantity overflow\00")
(data (i32.const 1056) "stake quantity overflow\00")
(data (i32.const 1088) "cannot transfer to self\00")
(data (i32.const 1120) "to account does not exist\00")
(data (i32.const 1152) "memo has more than 256 bytes\00")
(data (i32.const 1184) "invalid quantity\00")
(data (i32.const 1216) "must transfer positive quantity\00")
(data (i32.const 1248) "symbol precision mismatch\00")
(data (i32.const 1280) "cannot create objects in table of another contract\00")
(data (i32.const 1344) "current from account is not exist\00")
(data (i32.const 1392) "overdrawn balance\00")
(data (i32.const 1424) "bpeosbetdice\00")
(data (i32.const 1440) "the issue stake overflow\00")
(data (i32.const 1472) "issue\00")
(data (i32.const 1488) "Prize Fund, Game: crownbetdice\00")
(data (i32.const 1520) "must pay with EOS token\00")
(data (i32.const 1552) "eos quantity must be greater than zero\00")
(data (i32.const 1600) "invalid supply\00")
(data (i32.const 1616) "max supply must be positive\00")
(data (i32.const 1648) "token with symbol already exists\00")
(data (i32.const 1696) "Transfer bonus\00")
(data (i32.const 1712) "cannot increment end iterator\00")
(data (i32.const 1744) "divided profit must be greater than zero\00")
(data (i32.const 10192) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$10 (param i32 i32)))
(import "env" "is_account" (func $fimport$11 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$15 (param i64)))
(import "env" "require_auth2" (func $fimport$16 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$17 (param i64)))
(import "env" "send_inline" (func $fimport$18 (param i32 i32)))
(export "memory" (memory $0))
(export "now" (func $0))
(export "_ZeqRK11checksum256S1_" (func $1))
(export "_ZeqRK11checksum160S1_" (func $2))
(export "_ZneRK11checksum160S1_" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN4dice5crown7dividedERKyS2_RKN5eosio5assetERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE" (func $6))
(export "_ZN4dice5crown7receiptEv" (func $8))
(export "_ZN4dice5crown8newtokenERKN5eosio5assetE" (func $10))
(export "_ZN4dice5crown5issueERKyRKN5eosio5assetERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE" (func $12))
(export "_ZN4dice5crown8transferERKyS2_RKN5eosio5assetERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE" (func $14))
(export "_ZN4dice5crown5stakeERKyRKN5eosio5assetE" (func $15))
(export "_ZN4dice5crown7unstakeERKyRKN5eosio5assetE" (func $17))
(export "_ZN4dice5crown7restakeERKy" (func $18))
(export "_ZN4dice5crown8withdrawERKy" (func $20))
(export "_ZN4dice5crown12_sub_balanceERKyRKN5eosio5assetE" (func $47))
(export "_ZN4dice5crown12_add_balanceERKyRKN5eosio5assetES2_" (func $48))
(export "_ZN4dice5crown7_createERKyRKN5eosio5assetE" (func $56))
(export "_ZN4dice5crown16_next_divided_idEv" (func $59))
(export "_ZN4dice5crown14_next_defer_idEv" (func $65))
(export "_ZN4dice5crown11_divided_idEv" (func $66))
(export "malloc" (func $67))
(export "free" (func $70))
(export "memchr" (func $77))
(export "memcmp" (func $78))
(export "strlen" (func $79))
(table $0 10 10 anyfunc)
(elem (i32.const 0) $80 $6 $8 $17 $15 $12 $10 $14 $18 $20)



int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC _ZN4dice5crown7restakeERKy (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	CALL require_auth(*($1))
	$7 = *($1)
	$3 = *(($0 + [32]))
	$5 = *(($0 + [36]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$1 }
	$1 = ($5 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($1)) == (int_64)$7) ){ goto $label$1 }
	$5 = $1
	$6 = ($1 + [-24])
	$1 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = ($0 + [8])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$4 }
	$4 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [84]) == (int_32)$2), [64])
	goto $label$3 
	
.LABEL $label$4
	$4 = [0]
	$1 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)3607749779137757184, $7)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $22($2, $1)
	CALL eosio_assert(((int_32)*($4 + [84]) == (int_32)$2), [64])
	
.LABEL $label$3
	$3 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($3, [128])
	$5 = *(($4 + [76]))
	$1 = *($4 + [72])
	CALL eosio_assert([1], [608])
	$7 = (int_64)336472265283
	$6 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$0 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$0 = [0]
	
.LABEL $label$5
	CALL eosio_assert($0, [672])
	$7 = (int_64)0
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$10 }
	$7 = (int_64)0
	
.LOOP $label$11:
	CALL eosio_assert(((int_64)*(($1 + [8])) == (int_64)86136899912452), [704])
	$7 = ((int_64)*($1) + (int_64)$7)
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [752])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [784])
	$1 = ($1 + [16])
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$11 }
	
.LABEL $label$10
	*($8 + [24]) = (int_64)86136899912452
	*($8 + [16]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)0), [816])
	*($8 + [8]) = ($8 + [16])
	CALL eosio_assert($3, [192])
	CALL $37($2, $4, ($8 + [8]))
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$0), [64])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $41($0, $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$0), [64])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [192])
	CALL $63($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $64($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [576])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*($6 + [8]) = $3
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($6 + [8])), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $71($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_64 .FUNC _ZN4dice5crown11_divided_idEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($0 + [88])
	$2 = *(($0 + [116]))
	if ( ((int_32)$2 == (int_32)*(($0 + [112]))) ){ goto $label$3 }
	$0 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$1), [64])
	if ( $0 ){ goto $label$2 }
	return (int_64)0
	
.LABEL $label$3
	$0 = CALL db_find_i64(*($1), *(($0 + [96])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $41($1, $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$1), [64])
	
.LABEL $label$2
	return *($0 + [8])
	
.LABEL $label$1
	return (int_64)0
}

int_64 .FUNC _ZN4dice5crown14_next_defer_idEv (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	*($4 + [8]) = (int_64)0
	*($4) = (int_64)0
	$1 = ($0 + [88])
	$3 = *(($0 + [116]))
	if ( ((int_32)$3 == (int_32)*(($0 + [112]))) ){ goto $label$3 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$1), [64])
	if ( $3 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($1), *(($0 + [96])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $41($1, $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$1), [64])
	goto $label$1 
	
.LABEL $label$2
	$3 = $4
	
.LABEL $label$1
	*((($4 + [16]) + [8])) = *(($3 + [8]))
	*($4 + [16]) = *($3)
	*($4 + [16]) = ((int_64)*($4 + [16]) + (int_64)1)
	CALL $62($1, ($4 + [16]), *($0))
	$2 = *($4 + [16])
	*([0] + [4]) = ($4 + [32])
	return $2
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $73 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $68([1788], $0)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [528])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [528])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [528])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [528])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [528])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [528])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $21 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *(($0 + [112]))
	if ( ($3 == 0) ){ goto $label$1 }
	$1 = ($0 + [116])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $72($2)
	
.LABEL $label$5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	$5 = *(($0 + [112]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $3
	
.LABEL $label$2
	*($1) = $3
	CALL $72($5)
	
.LABEL $label$1
	$3 = *(($0 + [72]))
	if ( ($3 == 0) ){ goto $label$6 }
	$1 = ($0 + [76])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $72($2)
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	$5 = *(($0 + [72]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $3
	
.LABEL $label$7
	*($1) = $3
	CALL $72($5)
	
.LABEL $label$6
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$11 }
	$4 = ($0 + [36])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	$3 = *($2 + [72])
	if ( ($3 == 0) ){ goto $label$16 }
	*(($2 + [76])) = $3
	CALL $72($3)
	
.LABEL $label$16
	CALL $72($2)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$14 }
	$5 = *(($0 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $1
	
.LABEL $label$12
	*($4) = $1
	CALL $72($5)
	
.LABEL $label$11
	return $0
}

void .FUNC _ZN4dice5crown8withdrawERKy (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [160])
	*([0] + [4]) = $14
	CALL require_auth(*($1))
	$9 = *($1)
	$2 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$1 = ($7 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($1)) == (int_64)$9) ){ goto $label$1 }
	$7 = $1
	$5 = ($1 + [-24])
	$1 = $5
	if ( ((int_32)($5 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [84]) == (int_32)$3), [64])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$1 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)3607749779137757184, $9)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $22($3, $1)
	CALL eosio_assert(((int_32)*($7 + [84]) == (int_32)$3), [64])
	
.LABEL $label$3
	$2 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($2, [128])
	*(($14 + [120])) = *(($7 + [32]))
	*($14 + [112]) = *($7 + [24])
	$4 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$1 = [160]
	$10 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$10 }
	$5 = *($1)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$5 = ($5 + [165])
	goto $label$8 
	
.LABEL $label$10
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$6
	$1 = ($1 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$5 }
	$9 = (int_64)0
	$8 = (int_64)59
	$1 = [16]
	$12 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$16 }
	$5 = *($1)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$5 = ($5 + [165])
	goto $label$14 
	
.LABEL $label$16
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$12
	$1 = ($1 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$12 = ((int_64)$11 | (int_64)$12)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$11 }
	$9 = (int_64)0
	$8 = (int_64)59
	$1 = [32]
	$13 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$22 }
	$5 = *($1)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$5 = ($5 + [165])
	goto $label$20 
	
.LABEL $label$22
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$18
	$1 = ($1 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$17 }
	*(($14 + [16])) = [0]
	*($14 + [8]) = (int_64)0
	$1 = CALL strlen([176])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$26 }
	*($14 + [8]) = ($1 << [1])
	$5 = (($14 + [8]) | [1])
	if ( $1 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$6 = (($1 + [16]) & [-16])
	$5 = CALL $71($6)
	*($14 + [8]) = ($6 | [1])
	*($14 + [16]) = $5
	*($14 + [12]) = $1
	
.LABEL $label$25
	CALL memcpy($5, [176], $1)
	
.LABEL $label$24
	*(($5 + $1)) = [0]
	$9 = *($7)
	*((($14 + [24]) + [20])) = *($14 + [116])
	*($14 + [32]) = $9
	*((($14 + [24]) + [24])) = *((($14 + [112]) + [8]))
	*((($14 + [24]) + [28])) = *(($14 + [124]))
	*($14 + [24]) = *($0)
	*($14 + [40]) = *($14 + [112])
	$1 = (($14 + [8]) + [8])
	*(($14 + [64])) = *($1)
	*($14 + [56]) = *($14 + [8])
	*($14 + [8]) = [0]
	*($14 + [12]) = [0]
	*($1) = [0]
	*($14 + [72]) = $12
	*($14 + [80]) = $13
	*(($1 = CALL $71([16]))) = $4
	*($1 + [8]) = $10
	*((($14 + [72]) + [32])) = [0]
	$5 = ($1 + [16])
	*((($14 + [72]) + [24])) = $5
	*((($14 + [72]) + [20])) = $5
	*($14 + [88]) = $1
	*($14 + [100]) = [0]
	*((($14 + [72]) + [36])) = [0]
	$1 = *($14 + [56])
	$5 = ( *((($14 + [24]) + [36])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($5 + [32])
	$9 = (CASTING uint_64)(uint_32 $5)
	$5 = (($14 + [72]) + [28])
	
.LOOP $label$27:
	$1 = ($1 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$27 }
	if ( ($1 == 0) ){ goto $label$29 }
	CALL $23($5, $1)
	$5 = *(($14 + [104]))
	$1 = *(($14 + [100]))
	goto $label$28 
	
.LABEL $label$29
	$5 = [0]
	$1 = [0]
	
.LABEL $label$28
	*($14 + [148]) = $1
	*($14 + [144]) = $1
	*($14 + [152]) = $5
	*($14 + [128]) = ($14 + [144])
	*($14 + [136]) = ($14 + [24])
	CALL $24(($14 + [136]), ($14 + [128]))
	CALL $25(($14 + [144]), ($14 + [72]))
	$1 = *($14 + [144])
	CALL send_inline($1, (*($14 + [148]) - $1))
	$1 = *($14 + [144])
	if ( ($1 == 0) ){ goto $label$30 }
	*($14 + [148]) = $1
	CALL $72($1)
	
.LABEL $label$30
	$1 = *($14 + [100])
	if ( ($1 == 0) ){ goto $label$31 }
	*(($14 + [104])) = $1
	CALL $72($1)
	
.LABEL $label$31
	$1 = *($14 + [88])
	if ( ($1 == 0) ){ goto $label$32 }
	*(($14 + [92])) = $1
	CALL $72($1)
	
.LABEL $label$32
	if ( ((*(($14 + [56])) & [1]) == 0) ){ goto $label$33 }
	CALL $72(*(($14 + [64])))
	
.LABEL $label$33
	if ( ((*($14 + [8]) & [1]) == 0) ){ goto $label$34 }
	CALL $72(*(($14 + [16])))
	
.LABEL $label$34
	*($14 + [24]) = ($14 + [112])
	CALL eosio_assert($2, [192])
	CALL $26($3, $7, ($14 + [24]))
	*([0] + [4]) = ($14 + [160])
	return (unreachable)
	
.LABEL $label$23
	CALL $73(($14 + [8]))
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $71($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $75($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $72($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $71([96])
	CALL $32($6)
	*($6 + [84]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [24])
	*($8 + [52]) = ($6 + [40])
	*($8 + [56]) = ($6 + [56])
	*($8 + [60]) = ($6 + [72])
	CALL $33(($8 + [40]), ($8 + [32]))
	*($6 + [88]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [88])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $34(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [72])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [76])) = $7
	CALL $72($7)
	
.LABEL $label$10
	CALL $72($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $23($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [528])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [528])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $30(CALL $29($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [528])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $31(*($1), ($0 + [32]))
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $28(*($1), *($0 + [20]))
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [48])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [288])
	$3 = *($1)
	$2 = *($2)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($1 + [32]))), [352])
	$8 = (int_64)
	*($1 + [24]) = $8(*($1 + [24]) - *($2)))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [400])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [432])
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [464])
	$2 = [72]
	$4 = ($1 + [72])
	$6 = *($1 + [72])
	$5 = *(($1 + [76]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$2 = (($7 & [-16]) + $2)
	
.LABEL $label$2
	if ( ($2 <= [513]) ){ goto $label$4 }
	$9 = CALL malloc($2)
	goto $label$3 
	
.LABEL $label$4
	$9 = ($9 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$3
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $2)
	*($10 + [16]) = $10
	*($10 + [44]) = $4
	*($10 + [24]) = $1
	*($10 + [28]) = ($1 + [8])
	*($10 + [32]) = ($1 + [24])
	*($10 + [36]) = ($1 + [40])
	*($10 + [40]) = ($1 + [56])
	CALL $27(($10 + [24]), ($10 + [16]))
	CALL db_update_i64(*($1 + [88]), (int_64)0, $9, $2)
	if ( ($2 <= [513]) ){ goto $label$5 }
	CALL free($9)
	
.LABEL $label$5
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $71(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $72($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [80])
	$10 = $11
	*([0] + [4]) = $11
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$2 = *($0)
	CALL eosio_assert([1], [608])
	$8 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$9 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [672])
	*(($1 + [16])) = (int_64)1397703940
	*($1 + [8]) = (int_64)0
	CALL eosio_assert([1], [608])
	$8 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$9 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [672])
	*(($1 + [32])) = (int_64)1397703940
	*($1 + [24]) = (int_64)0
	$7 = *($3 + [4])
	*($1 + [40]) = *($7)
	*(($1 + [48])) = *(($7 + [8]))
	CALL eosio_assert([1], [608])
	$3 = ($1 + [40])
	$8 = (int_64)336472265283
	$7 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$9 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$9 = [0]
	
.LABEL $label$11
	CALL eosio_assert($9, [672])
	*(($1 + [64])) = (int_64)86136899912452
	*($1 + [56]) = (int_64)0
	*($10 + [32]) = (int_64)86136899912452
	*($10 + [24]) = (int_64)0
	CALL eosio_assert([1], [608])
	$8 = (int_64)336472265283
	$7 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$9 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$9 = [0]
	
.LABEL $label$16
	CALL eosio_assert($9, [672])
	*((($10 + [24]) + [24])) = (int_64)86136899912452
	*($10 + [40]) = (int_64)0
	CALL eosio_assert([1], [608])
	$8 = (int_64)336472265283
	$7 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$9 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$9 = [0]
	
.LABEL $label$21
	CALL eosio_assert($9, [672])
	*(($10 + [64])) = (int_64)86136899912452
	*($10 + [56]) = (int_64)0
	CALL eosio_assert([1], [608])
	$8 = (int_64)336472265283
	$7 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	
.LOOP $label$30:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$30 }
	
.LABEL $label$29
	$9 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$9 = [0]
	
.LABEL $label$26
	CALL eosio_assert($9, [672])
	$7 = [72]
	$4 = ($1 + [72])
	CALL $51($4, ($10 + [24]), ($10 + [72]))
	$5 = *($1 + [72])
	$9 = *(($1 + [76]))
	$6 = ($9 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	
.LOOP $label$31:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$31 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$32 }
	$7 = (($6 & [-16]) + $7)
	
.LABEL $label$32
	if ( ($7 <= [513]) ){ goto $label$34 }
	$9 = CALL malloc($7)
	goto $label$33 
	
.LABEL $label$34
	$9 = ($11 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$33
	*($10 + [12]) = $9
	*($10 + [8]) = $9
	*($10 + [16]) = ($9 + $7)
	*($10 + [72]) = ($10 + [8])
	*($10 + [28]) = ($1 + [8])
	*($10 + [24]) = $1
	*($10 + [32]) = ($1 + [24])
	*($10 + [36]) = $3
	*($10 + [40]) = ($1 + [56])
	*($10 + [44]) = $4
	CALL $27(($10 + [24]), ($10 + [72]))
	$8 = *($1)
	*($1 + [88]) = CALL db_store_i64(*($2 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$35 }
	CALL free($9)
	
.LABEL $label$35
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$36 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$36
	*([0] + [4]) = ($10 + [80])
}

void .FUNC _ZN4dice5crown12_add_balanceERKyRKN5eosio5assetES2_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$4 = *($1)
	$5 = *(($0 + [32]))
	$9 = *(($0 + [36]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$4) ){ goto $label$1 }
	$9 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = ($0 + [8])
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$7 }
	$7 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [84]) == (int_32)$8), [64])
	$4 = *($3)
	if ( $7 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)3607749779137757184, $4)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$5 }
	$7 = CALL $22($8, $7)
	CALL eosio_assert(((int_32)*($7 + [84]) == (int_32)$8), [64])
	$4 = *($3)
	
.LABEL $label$6
	*($10 + [16]) = $2
	CALL eosio_assert([1], [192])
	CALL $50($8, $7, $4, ($10 + [16]))
	goto $label$3 
	
.LABEL $label$5
	$4 = *($3)
	
.LABEL $label$4
	*($10 + [4]) = $2
	*($10) = $1
	*($10 + [40]) = $4
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$2()), [1280])
	*($10 + [16]) = $8
	*($10 + [20]) = $10
	*($10 + [24]) = ($10 + [40])
	$7 = CALL $71([96])
	CALL $32($7)
	*($7 + [84]) = $8
	CALL $49(($10 + [16]), $7)
	*($10 + [32]) = $7
	$4 = *($7)
	*($10 + [16]) = $4
	$9 = *($7 + [88])
	*($10 + [12]) = $9
	$6 = ($0 + [36])
	$8 = *($6)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [40]))) ){ goto $label$9 }
	*($8 + [8]) = $4
	*($8 + [16]) = $9
	*($10 + [32]) = [0]
	*($8) = $7
	*($6) = ($8 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $34(($0 + [32]), ($10 + [32]), ($10 + [16]), ($10 + [12]))
	
.LABEL $label$8
	$8 = *($10 + [32])
	*($10 + [32]) = [0]
	if ( ($8 == 0) ){ goto $label$3 }
	$7 = *($8 + [72])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($8 + [76])) = $7
	CALL $72($7)
	
.LABEL $label$10
	CALL $72($8)
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC $69 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10278]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10280])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10278]) = [1]
	$7 = ($7 << [16])
	*([0] + [10280]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10280])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10280]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10278]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10278]) = [1]
	$3 = ($3 << [16])
	*([0] + [10280]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10280])
	
.LABEL $label$8
	*([0] + [10280]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $69($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10192])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $80 ()
{
	(unreachable)
}

int_32 .FUNC $43 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [672])
	*(($2 = ($0 + [32]))) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [672])
	*(($2 = ($0 + [48]))) = (int_64)1397703940
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [672])
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $71(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $75($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $72($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $72($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [544])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $71([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [576])
	CALL memcpy($5, $6, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [576])
	CALL memcpy(($5 + [8]), ($6 + [8]), [8])
	*($5 + [20]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)7235159537265672192
	$6 = *($5 + [20])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)7235159537265672192
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $42(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$7
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $72($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [288])
	$3 = *($1)
	$7 = *($2 + [4])
	$4 = *($2)
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*(($1 + [64]))), [352])
	$8 = (int_64)
	*($1 + [56]) = $8(*($1 + [56]) - *($4)))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [400])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [432])
	$4 = ($7 + [88])
	$2 = *($2)
	$6 = *(($7 + [116]))
	if ( ((int_32)$6 == (int_32)*(($7 + [112]))) ){ goto $label$3 }
	$7 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$4), [64])
	if ( $7 ){ goto $label$2 }
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = CALL db_find_i64(*($4), *(($7 + [96])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $41($4, $7)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$4), [64])
	
.LABEL $label$2
	$6 = (CASTING uint_32)(uint_64 ((uint_64)*($7 + [8]) % (uint_64)(int_64)3))
	
.LABEL $label$1
	$7 = (*($1 + [72]) + ($6 << [4]))
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($7 + [8])), [704])
	$8 = ((int_64)*($7) + (int_64)*($2))
	*($7) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [752])
	CALL eosio_assert(((int_64)*($7) < (int_64)4611686018427387904), [784])
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [464])
	$7 = [72]
	$4 = ($1 + [72])
	$6 = *($1 + [72])
	$2 = *(($1 + [76]))
	$5 = ($2 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$5 }
	$7 = (($5 & [-16]) + $7)
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$7 }
	$2 = CALL malloc($7)
	goto $label$6 
	
.LABEL $label$7
	$2 = ($10 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$6
	*($9 + [4]) = $2
	*($9) = $2
	*($9 + [8]) = ($2 + $7)
	*($9 + [16]) = $9
	*($9 + [44]) = $4
	*($9 + [24]) = $1
	*($9 + [28]) = ($1 + [8])
	*($9 + [32]) = ($1 + [24])
	*($9 + [36]) = ($1 + [40])
	*($9 + [40]) = ($1 + [56])
	CALL $27(($9 + [24]), ($9 + [16]))
	CALL db_update_i64(*($1 + [88]), (int_64)0, $2, $7)
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL free($2)
	
.LABEL $label$8
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [48])
}

void .FUNC _ZN4dice5crown12_sub_balanceERKyRKN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$3 = *($1)
	$4 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [8])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [84]) == (int_32)$6), [64])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)3607749779137757184, $3)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $22($6, $8)
	CALL eosio_assert(((int_32)*($7 + [84]) == (int_32)$6), [64])
	
.LABEL $label$3
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [1344])
	CALL eosio_assert(((int_64)*($7 + [40]) > (int_64)*($2)), [1392])
	$3 = *($1)
	*($9 + [8]) = $2
	CALL eosio_assert($8, [192])
	CALL $52($6, $7, $3, ($9 + [8]))
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [48])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [288])
	$3 = *($1)
	$6 = *($2)
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($1 + [48]))), [352])
	$8 = (int_64)
	*($1 + [40]) = $8(*($1 + [40]) - *($6)))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [400])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [432])
	$2 = *($2)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($1 + [64]))), [704])
	$8 = ((int_64)*($1 + [56]) + (int_64)*($2))
	*($1 + [56]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [752])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [784])
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [464])
	$2 = [72]
	$6 = ($1 + [72])
	$5 = *($1 + [72])
	$4 = *(($1 + [76]))
	$7 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$2 }
	$2 = (($7 & [-16]) + $2)
	
.LABEL $label$2
	if ( ($2 <= [513]) ){ goto $label$4 }
	$9 = CALL malloc($2)
	goto $label$3 
	
.LABEL $label$4
	$9 = ($9 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$3
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $2)
	*($10 + [16]) = $10
	*($10 + [44]) = $6
	*($10 + [24]) = $1
	*($10 + [28]) = ($1 + [8])
	*($10 + [32]) = ($1 + [24])
	*($10 + [36]) = ($1 + [40])
	*($10 + [40]) = ($1 + [56])
	CALL $27(($10 + [24]), ($10 + [16]))
	CALL db_update_i64(*($1 + [88]), (int_64)0, $9, $2)
	if ( ($2 <= [513]) ){ goto $label$5 }
	CALL free($9)
	
.LABEL $label$5
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $71(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $75($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $72($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $72($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [576])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [576])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [576])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $72 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = *($0)
	$9 = *($0 + [8])
	$3 = int_32(($2 - $1) >> [4])
	if ( ((uint_32)$3 <= (uint_32)int_32(($9 - $4) >> [4])) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$5 }
	*($0 + [4]) = $4
	CALL $72($4)
	$9 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$1 }
	$4 = [268435455]
	if ( ((uint_32)int_32($9 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$4 = $3
	$9 = int_32($9 >> [3])
	if ( ($9 <= $3) ){ goto $label$6 }
	$4 = $9
	if ( ((uint_32)$9 >= (uint_32)[268435456]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($4 << [4])
	$9 = CALL $71($4)
	*($0) = $9
	*($0 + [4]) = $9
	*(($0 + [8])) = ($9 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$3 }
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($9) = *($1)
	*(($9 + [8])) = *(($1 + [8]))
	$9 = (*($0) + [16])
	*($0) = $9
	$1 = ($1 + [16])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$8 = int_32($8 >> [4])
	$8 = (*($0 + [4]) - $4)
	$9 = ($1 + $8)
	$5 = ( $9 ? $2 : ((uint_32)$3 > (uint_32)$8) )
	$6 = ($5 - $1)
	$7 = int_32($6 >> [4])
	if ( ($7 == 0) ){ goto $label$8 }
	CALL memmove($4, $1, $6)
	
.LABEL $label$8
	if ( ((uint_32)$3 <= (uint_32)$8) ){ goto $label$2 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$3 }
	$0 = ($0 + [4])
	$1 = *($0)
	
.LOOP $label$9:
	*($1) = *($9)
	*(($1 + [8])) = *(($9 + [8]))
	$1 = (*($0) + [16])
	*($0) = $1
	$9 = ($9 + [16])
	if ( ((int_32)$2 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($4 + ($7 << [4]))
	return (unreachable)
	
.LABEL $label$1
	CALL $75($0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10172])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9980]
	$1 = (((int_32)$2 * (int_32)[12]) + [9980])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $75 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [48])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [288])
	$3 = *($1)
	$6 = *($2)
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($1 + [32]))), [704])
	$8 = ((int_64)*($1 + [24]) + (int_64)*($6))
	*($1 + [24]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [752])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [784])
	$2 = *($2)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($1 + [16]))), [704])
	$8 = ((int_64)*($1 + [8]) + (int_64)*($2))
	*($1 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [752])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [784])
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [464])
	$2 = [72]
	$6 = ($1 + [72])
	$5 = *($1 + [72])
	$4 = *(($1 + [76]))
	$7 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$2 }
	$2 = (($7 & [-16]) + $2)
	
.LABEL $label$2
	if ( ($2 <= [513]) ){ goto $label$4 }
	$9 = CALL malloc($2)
	goto $label$3 
	
.LABEL $label$4
	$9 = ($9 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$3
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $2)
	*($10 + [16]) = $10
	*($10 + [44]) = $6
	*($10 + [24]) = $1
	*($10 + [28]) = ($1 + [8])
	*($10 + [32]) = ($1 + [24])
	*($10 + [36]) = ($1 + [40])
	*($10 + [40]) = ($1 + [56])
	CALL $27(($10 + [24]), ($10 + [16]))
	CALL db_update_i64(*($1 + [88]), (int_64)0, $9, $2)
	if ( ($2 <= [513]) ){ goto $label$5 }
	CALL free($9)
	
.LABEL $label$5
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC $71 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10284])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC _ZN4dice5crown7receiptEv (int_32 $0)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC _ZN4dice5crown7dividedERKyS2_RKN5eosio5assetERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	float_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	*([0] + [4]) = $12
	CALL require_auth(*($1))
	$11 = *($0)
	if ( ((int_64)*($1) == (int_64)$11) ){ goto $label$1 }
	if ( ((int_64)*($2) != (int_64)$11) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)1397703940), [1520])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [1744])
	$2 = *($4)
	$8 = *($4 + [8])
	$6 = *($4 + [4])
	$1 = CALL strlen([1696])
	if ( ($1 == 0) ){ goto $label$2 }
	$9 = ($2 & [1])
	$2 = ( $6 ? uint_32($2 >> [1]) : $9 )
	if ( ((int_32)$2 < (int_32)$1) ){ goto $label$1 }
	$8 = ( $8 ? ($4 + [1]) : $9 )
	$6 = ($8 + $2)
	$4 = $8
	
.LOOP $label$3:
	$2 = (($2 - $1) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	$2 = CALL memchr($4, [84], $2)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( (CALL memcmp($2, [1696], $1) == 0) ){ goto $label$4 }
	$4 = ($2 + [1])
	$2 = ($6 - $4)
	if ( ((int_32)$2 >= (int_32)$1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$1 }
	if ( ((int_32)($2 - $8) == (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = *(($0 + [72]))
	$4 = *(($0 + [76]))
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$5 }
	$1 = ($4 + [-24])
	$6 = ([0] - $8)
	
.LOOP $label$6:
	if ( ((int_64)(uint_64)*((*($1) + [16])) >> (uint_64)(int_64)8) == (int_64)336472265283) ){ goto $label$5 }
	$4 = $1
	$2 = ($1 + [-24])
	$1 = $2
	if ( ((int_32)($2 + $6) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$2 = ($0 + [48])
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$8 }
	$1 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$2), [64])
	goto $label$7 
	
.LABEL $label$8
	$1 = [0]
	$4 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-7949128877345865728, (int_64)336472265283)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$1 = CALL $38($2, $4)
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$2), [64])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [896])
	$11 = *($3)
	$7 = *($1 + [40])
	CALL _ZN4dice5crown16_next_divided_idEv($0)
	$1 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)3607749779137757184, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$5 = ((float_64)(CASTING float_64)(int_64 $11) / (float_64)(CASTING float_64)(int_64 $7))
	$6 = ($0 + [88])
	$3 = ($0 + [8])
	$2 = CALL $22($3, $1)
	$4 = (($12 + [16]) + [8])
	$8 = ($0 + [112])
	$9 = ($0 + [116])
	$10 = ($0 + [96])
	
.LOOP $label$9:
	if ( (((float_64)$5 <= (float_64)(float_64)0) | ((float_64)$5 != (float_64)$5)) ){ goto $label$10 }
	$11 = *($2 + [56])
	if ( ((int_64)$11 <= (int_64)0) ){ goto $label$10 }
	*($4) = (int_64)1397703940
	$11 = (Rounds 0)(((float_64)$5 * (float_64)(CASTING float_64)(int_64 $11)))
	*($12 + [16]) = $11
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [608])
	$11 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$0 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$0 = [0]
	
.LABEL $label$11
	CALL eosio_assert($0, [672])
	if ( ((int_64)*($12 + [16]) < (int_64)1) ){ goto $label$10 }
	*($12) = ($12 + [16])
	CALL eosio_assert([1], [192])
	CALL $60($3, $2, $12)
	
.LABEL $label$10
	$1 = *($9)
	if ( ((int_32)$1 == (int_32)*($8)) ){ goto $label$19 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$6), [64])
	if ( $1 ){ goto $label$18 }
	$11 = (int_64)0
	goto $label$16 
	
.LABEL $label$19
	$1 = CALL db_find_i64(*($6), *($10), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$17 }
	$1 = CALL $41($6, $1)
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$6), [64])
	
.LABEL $label$18
	$11 = *($1 + [8])
	goto $label$16 
	
.LABEL $label$17
	$11 = (int_64)0
	
.LABEL $label$16
	$11 = ((uint_64)((int_64)$11 + (int_64)-2) % (uint_64)(int_64)3)
	*($12 + [15]) = $11
	$1 = (*($2 + [72]) + ((CASTING uint_32)(uint_64 $11) << [4]))
	*((($12 + [16]) + [12])) = *(($1 + [12]))
	*($4) = *(($1 + [8]))
	*($12 + [16]) = *($1)
	*($12 + [20]) = *(($1 + [4]))
	if ( ((int_64)*($12 + [16]) < (int_64)1) ){ goto $label$20 }
	*($12 + [4]) = ($12 + [15])
	*($12) = ($12 + [16])
	CALL eosio_assert([1], [192])
	CALL $61($3, $2, $12)
	
.LABEL $label$20
	CALL eosio_assert([1], [1712])
	$1 = CALL db_next_i64(*($2 + [88]), ($12 + [16]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $22($3, $1)
	goto $label$9 
	
.LABEL $label$1
	*([0] + [4]) = ($12 + [32])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [112])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [24])) = (int_64)1397703940
	*($9 + [8]) = (int_64)0
	*($9) = (int_64)0
	*($9 + [16]) = (int_64)0
	CALL eosio_assert([1], [608])
	$6 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$4
	CALL eosio_assert($7, [672])
	*(($9 + [40])) = [0]
	*($9 + [32]) = (int_64)0
	*($9 + [84]) = $5
	*($9 + [80]) = $5
	*($9 + [88]) = ($5 + $3)
	*($9 + [48]) = ($9 + [80])
	*($9 + [64]) = $9
	CALL $58(($9 + [64]), ($9 + [48]))
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($5)
	
.LABEL $label$9
	$6 = *(($9 + [8]))
	*(($9 + [76])) = *(($9 + [28]))
	*(($1 = (($9 + [64]) + [8]))) = *(($9 + [24]))
	*($9 + [68]) = *(($9 + [20]))
	$4 = *($9)
	*($9 + [64]) = *($9 + [16])
	CALL $76(($9 + [48]), ($9 + [32]))
	*((($9 + [80]) + [8])) = *($1)
	*($9 + [80]) = *($9 + [64])
	*($9 + [104]) = $4
	*($9 + [96]) = $6
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$10 }
	$8 = *((*($1) + $8))
	
.LABEL $label$10
	CALL void $1((int_32 ($9 + [104])), (int_32 ($9 + [96])), (int_32 ($9 + [80])), (int_32 ($9 + [48])), (int_32 $8))
	if ( ((*($9 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL $72(*($9 + [56]))
	
.LABEL $label$11
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL $72(*(($9 + [40])))
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [112])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [272])
	*([0] + [4]) = $9
	*(($9 + [160])) = $0
	*(($9 + [168])) = (int_64)-1
	$6 = (int_64)0
	*(($9 + [176])) = (int_64)0
	*(($9 + [184])) = [0]
	*($9 + [152]) = $0
	*($9 + [144]) = $0
	*($9 + [192]) = $0
	*(($9 + [200])) = $0
	*(($9 + [208])) = (int_64)-1
	*(($9 + [216])) = [0]
	*(($9 + [220])) = [0]
	*(($9 + [224])) = [0]
	*($9 + [232]) = $0
	*(($9 + [240])) = $0
	*(($9 + [248])) = (int_64)-1
	*(($9 + [256])) = [0]
	*(($9 + [260])) = [0]
	*(($9 + [264])) = [0]
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$8 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$14 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$3 = ($3 + [165])
	goto $label$12 
	
.LABEL $label$14
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$10
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$9 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	*($9 + [140]) = [0]
	*($9 + [136]) = [1]
	*($9) = *($9 + [136])
	CALL $7(($9 + [144]), $9)
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [48]
	$7 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$20 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$3 = ($3 + [165])
	goto $label$18 
	
.LABEL $label$20
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$16
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$15 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$7 }
	if ( ((int_64)$2 > (int_64)-3617168760277827585) ){ goto $label$27 }
	if ( ((int_64)$2 > (int_64)-4994048603321270273) ){ goto $label$26 }
	if ( ((int_64)$2 == (int_64)-7297632115821117440) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)-5003315193367756800) ){ goto $label$7 }
	*($9 + [132]) = [0]
	*($9 + [128]) = [2]
	*($9 + [8 align=4]) = *($9 + [128])
	CALL $9(($9 + [144]), ($9 + [8]))
	goto $label$7 
	
.LABEL $label$27
	if ( ((int_64)$2 > (int_64)-2039333636196532225) ){ goto $label$25 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)-3102536759825661952) ){ goto $label$7 }
	*($9 + [92]) = [0]
	*($9 + [88]) = [3]
	*($9 + [48 align=4]) = *($9 + [88])
	CALL $16(($9 + [144]), ($9 + [48]))
	goto $label$7 
	
.LABEL $label$26
	if ( ((int_64)$2 == (int_64)-4994048603321270272) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)-4157661383434960896) ){ goto $label$7 }
	*($9 + [100]) = [0]
	*($9 + [96]) = [4]
	*($9 + [40 align=4]) = *($9 + [96])
	CALL $16(($9 + [144]), ($9 + [40]))
	goto $label$7 
	
.LABEL $label$25
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$21 }
	if ( ((int_64)$2 != (int_64)8516769789752901632) ){ goto $label$7 }
	*($9 + [116]) = [0]
	*($9 + [112]) = [5]
	*($9 + [24 align=4]) = *($9 + [112])
	CALL $13(($9 + [144]), ($9 + [24]))
	goto $label$7 
	
.LABEL $label$24
	*($9 + [124]) = [0]
	*($9 + [120]) = [6]
	*($9 + [16 align=4]) = *($9 + [120])
	CALL $11(($9 + [144]), ($9 + [16]))
	goto $label$7 
	
.LABEL $label$23
	*($9 + [108]) = [0]
	*($9 + [104]) = [7]
	*($9 + [32 align=4]) = *($9 + [104])
	CALL $7(($9 + [144]), ($9 + [32]))
	goto $label$7 
	
.LABEL $label$22
	*($9 + [84]) = [0]
	*($9 + [80]) = [8]
	*($9 + [56 align=4]) = *($9 + [80])
	CALL $19(($9 + [144]), ($9 + [56]))
	goto $label$7 
	
.LABEL $label$21
	*($9 + [76]) = [0]
	*($9 + [72]) = [9]
	*($9 + [64 align=4]) = *($9 + [72])
	CALL $19(($9 + [144]), ($9 + [64]))
	
.LABEL $label$7
	CALL $21(($9 + [144]))
	*([0] + [4]) = ($9 + [272])
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC memory ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC _ZeqRK11checksum256S1_ (int_32 $0, int_32 _ZeqRK11checksum256S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN4dice5crown8transferERKyS2_RKN5eosio5assetERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	CALL require_auth(*($1))
	CALL eosio_assert(((int_64)*($1) != (int_64)*($2)), [1088])
	CALL eosio_assert(CALL $fimport$11(*($2)), [1120])
	$4 = *($4)
	CALL eosio_assert((( *($4 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ) <= [257]), [1152])
	$6 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$5 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [1184])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [1216])
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)86136899912452), [1248])
	$5 = *($2)
	CALL require_recipient(*($1))
	CALL require_recipient($5)
	if ( ((int_64)*($1) == (int_64)*($0)) ){ goto $label$6 }
	CALL _ZN4dice5crown12_sub_balanceERKyRKN5eosio5assetE($0, $1, $3)
	CALL _ZN4dice5crown12_add_balanceERKyRKN5eosio5assetES2_($0, $2, $3, $1)
	
.LABEL $label$6
}

void .FUNC _ZN4dice5crown5stakeERKyRKN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	CALL require_auth(*($1))
	$8 = ($0 + [8])
	$1 = [0]
	$4 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)3607749779137757184, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $22($8, $4)
	
.LABEL $label$1
	$3 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($3, [864])
	$4 = ($2 + [8])
	CALL eosio_assert(((int_64)*($4) == (int_64)86136899912452), [928])
	CALL eosio_assert(((int_64)*(($1 + [48])) == (int_64)*($4)), [960])
	CALL eosio_assert(((int_64)*($1 + [40]) > (int_64)*($2)), [1056])
	*($9) = $2
	CALL eosio_assert($3, [192])
	CALL $46($8, $1, $9)
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$6 = *(($0 + [72]))
	$8 = *(($0 + [76]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$2 }
	$1 = ($8 + [-24])
	$3 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)(uint_64)*((*($1) + [16])) >> (uint_64)(int_64)8) == (int_64)$5) ){ goto $label$2 }
	$8 = $1
	$4 = ($1 + [-24])
	$1 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$4 = ($0 + [48])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$5 }
	$1 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$4), [64])
	goto $label$4 
	
.LABEL $label$5
	$1 = [0]
	$8 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-7949128877345865728, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$1 = CALL $38($4, $8)
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$4), [64])
	
.LABEL $label$4
	$8 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($8, [896])
	CALL eosio_assert($8, [192])
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$4), [240])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$2()), [288])
	$4 = ($1 + [16])
	$5 = *($4)
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*(($1 + [48]))), [704])
	$7 = ((int_64)*($1 + [40]) + (int_64)*($2))
	*($1 + [40]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [752])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [784])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($4) >> (uint_64)(int_64)8)), [464])
	*($9 + [72]) = ($9 + [64])
	*($9 + [68]) = $9
	*($9 + [64]) = $9
	*($9 + [80]) = ($9 + [64])
	*($9 + [92]) = ($1 + [8])
	*($9 + [88]) = $1
	*($9 + [96]) = ($1 + [24])
	*($9 + [100]) = ($1 + [40])
	*($9 + [104]) = ($1 + [56])
	CALL $39(($9 + [88]), ($9 + [80]))
	CALL db_update_i64(*($1 + [68]), (int_64)0, $9, [64])
	$1 = ($0 + [64])
	if ( (uint_64)($5 <= *($1)) ){ goto $label$6 }
	*($1) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [112])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [64])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = [0]
	$4 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $3)
	
.LABEL $label$1
	*(($8 + [16])) = (int_64)1397703940
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert([1], [608])
	$5 = (int_64)5459781
	
.LOOP $label$5:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$6 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($6, [672])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [576])
	CALL memcpy($8, $4, [8])
	$6 = ($3 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [576])
	$1 = ($8 + [8])
	CALL memcpy($1, ($4 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [576])
	CALL memcpy(($8 + [16]), ($4 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($4)
	
.LABEL $label$8
	*(($6 = (($8 + [24]) + [8]))) = *(($1 + [8]))
	$5 = *($8)
	*($8 + [24]) = *($1)
	*((($8 + [40]) + [8])) = *($6)
	*($8 + [40]) = *($8 + [24])
	*($8 + [56]) = $5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$7 = *((*($1) + $7))
	
.LABEL $label$9
	CALL void $1((int_32 ($8 + [56])), (int_32 ($8 + [40])), (int_32 $7))
	*([0] + [4]) = ($8 + [64])
	return [1]
}

void .FUNC _ZN4dice5crown7unstakeERKyRKN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	CALL require_auth(*($1))
	$8 = ($0 + [8])
	$1 = [0]
	$4 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)3607749779137757184, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $22($8, $4)
	
.LABEL $label$1
	$3 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($3, [864])
	$4 = ($2 + [8])
	CALL eosio_assert(((int_64)*($4) == (int_64)86136899912452), [928])
	CALL eosio_assert(((int_64)*(($1 + [64])) == (int_64)*($4)), [960])
	CALL eosio_assert(((int_64)*($1 + [56]) > (int_64)*($2)), [1024])
	*($9) = $2
	*($9 + [4]) = $0
	CALL eosio_assert($3, [192])
	CALL $40($8, $1, $9)
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$6 = *(($0 + [72]))
	$8 = *(($0 + [76]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$2 }
	$1 = ($8 + [-24])
	$3 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)(uint_64)*((*($1) + [16])) >> (uint_64)(int_64)8) == (int_64)$5) ){ goto $label$2 }
	$8 = $1
	$4 = ($1 + [-24])
	$1 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$4 = ($0 + [48])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$5 }
	$1 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$4), [64])
	goto $label$4 
	
.LABEL $label$5
	$1 = [0]
	$8 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-7949128877345865728, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$1 = CALL $38($4, $8)
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$4), [64])
	
.LABEL $label$4
	$8 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($8, [896])
	CALL eosio_assert($8, [192])
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$4), [240])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$2()), [288])
	$4 = ($1 + [16])
	$5 = *($4)
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*(($1 + [48]))), [352])
	$7 = (int_64)
	*($1 + [40]) = $7(*($1 + [40]) - *($2)))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [400])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [432])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($4) >> (uint_64)(int_64)8)), [464])
	*($9 + [72]) = ($9 + [64])
	*($9 + [68]) = $9
	*($9 + [64]) = $9
	*($9 + [80]) = ($9 + [64])
	*($9 + [92]) = ($1 + [8])
	*($9 + [88]) = $1
	*($9 + [96]) = ($1 + [24])
	*($9 + [100]) = ($1 + [40])
	*($9 + [104]) = ($1 + [56])
	CALL $39(($9 + [88]), ($9 + [80]))
	CALL db_update_i64(*($1 + [68]), (int_64)0, $9, [64])
	$1 = ($0 + [64])
	if ( (uint_64)($5 <= *($1)) ){ goto $label$6 }
	*($1) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [112])
}

void .FUNC _ZN4dice5crown8newtokenERKN5eosio5assetE (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	CALL _ZN4dice5crown7_createERKyRKN5eosio5assetE($0, $0, $1)
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = (*([0] + [4]) - [48])
	$5 = $3
	*([0] + [4]) = $3
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	CALL $55($5, $3, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	*(($1 = (($5 + [16]) + [8]))) = *(($5 + [8]))
	*($5 + [16]) = *($5)
	*((($5 + [32]) + [8])) = *($1)
	*($5 + [32]) = *($5 + [16])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$4 = *((*($1) + $4))
	
.LABEL $label$6
	CALL void $1((int_32 ($5 + [32])), (int_32 $4))
	*([0] + [4]) = ($5 + [48])
	return [1]
}

void .FUNC _ZN4dice5crown5issueERKyRKN5eosio5assetERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [176])
	*([0] + [4]) = $15
	$12 = (int_64)0
	$13 = (int_64)59
	$8 = [1424]
	$9 = (int_64)0
	
.LOOP $label$1:
	$11 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$9 = ((int_64)$11 | (int_64)$9)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	$7 = *(($0 + [72]))
	$10 = *(($0 + [76]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$5 }
	$8 = ($10 + [-24])
	$5 = ([0] - $7)
	
.LOOP $label$6:
	if ( ((int_64)(uint_64)*((*($8) + [16])) >> (uint_64)(int_64)8) == (int_64)336472265283) ){ goto $label$5 }
	$10 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = ($0 + [48])
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$8 }
	$4 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$5), [64])
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	$8 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-7949128877345865728, (int_64)336472265283)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $38($5, $8)
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$5), [64])
	
.LABEL $label$7
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)1397703940), [1520])
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [1552])
	$7 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($7, [896])
	$13 = *(($4 + [32]))
	*($15 + [72]) = $13
	$12 = *($2)
	$11 = ((int_64)((int_64)$12 * (int_64)*($4 + [24])) / (int_64)((int_64)$12 + (int_64)*($4 + [56])))
	*($15 + [64]) = $11
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [608])
	$12 = (uint_64)$13 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$10 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$10 = [0]
	
.LABEL $label$9
	CALL eosio_assert($10, [672])
	$10 = ($4 + [32])
	CALL eosio_assert(((int_64)*($10) == (int_64)$13), [960])
	$8 = ($4 + [24])
	CALL eosio_assert(((int_64)*($8) >= (int_64)$11), [1440])
	CALL eosio_assert($7, [192])
	CALL eosio_assert(((int_32)*(($4 + [64])) == (int_32)$5), [240])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$2()), [288])
	$5 = ($4 + [16])
	$12 = *($5)
	CALL eosio_assert(((int_64)$13 == (int_64)*($10)), [352])
	$13 = (int_64)
	*($8) = $13(*($8) - $11))
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [400])
	CALL eosio_assert(((int_64)*($8) < (int_64)4611686018427387904), [432])
	*(($10 = ($4 + [56]))) = ((int_64)*($10) + (int_64)*($2))
	$13 = (uint_64)$12 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$13) == (int_64)(uint_64)*($5) >> (uint_64)(int_64)8)), [464])
	*($15 + [168]) = (($15 + [80]) + [64])
	*($15 + [164]) = ($15 + [80])
	*($15 + [160]) = ($15 + [80])
	*($15 + [8]) = ($15 + [160])
	*($15 + [28]) = ($4 + [8])
	*($15 + [24]) = $4
	*($15 + [32]) = $8
	*($15 + [36]) = ($4 + [40])
	*($15 + [40]) = $10
	CALL $39(($15 + [24]), ($15 + [8]))
	$12 = (int_64)0
	CALL db_update_i64(*(($4 + [68])), (int_64)0, ($15 + [80]), [64])
	$8 = ($0 + [64])
	if ( (uint_64)($13 <= *($8)) ){ goto $label$14 }
	*($8) = ((int_64)$13 + (int_64)1)
	
.LABEL $label$14
	CALL _ZN4dice5crown12_add_balanceERKyRKN5eosio5assetES2_($0, $1, ($15 + [64]), $0)
	$6 = *($0)
	$11 = (int_64)59
	$8 = [1472]
	$9 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$12 > (uint_64)(int_64)4) ){ goto $label$20 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$4 = ($4 + [165])
	goto $label$18 
	
.LABEL $label$20
	$13 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$16
	$8 = ($8 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$9 = ((int_64)$13 | (int_64)$9)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$15 }
	$12 = (int_64)0
	$11 = (int_64)59
	$8 = [32]
	$14 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$12 > (uint_64)(int_64)7) ){ goto $label$26 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$4 = ($4 + [165])
	goto $label$24 
	
.LABEL $label$26
	$13 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$22
	$8 = ($8 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$21 }
	*(($15 + [16])) = [0]
	*($15 + [8]) = (int_64)0
	$8 = CALL strlen([1488])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$27 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$30 }
	*($15 + [8]) = ($8 << [1])
	$4 = (($15 + [8]) | [1])
	if ( $8 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$10 = (($8 + [16]) & [-16])
	$4 = CALL $71($10)
	*($15 + [8]) = ($10 | [1])
	*($15 + [16]) = $4
	*($15 + [12]) = $8
	
.LABEL $label$29
	CALL memcpy($4, [1488], $8)
	
.LABEL $label$28
	*(($4 + $8)) = [0]
	*((($15 + [80]) + [20])) = *($15 + [68])
	*($15 + [88]) = *($1)
	*((($15 + [80]) + [28])) = *(($15 + [76]))
	*((($15 + [80]) + [24])) = *((($15 + [64]) + [8]))
	*($15 + [80]) = *($0)
	*($15 + [96]) = *($15 + [64])
	$8 = (($15 + [8]) + [8])
	*(($15 + [120])) = *($8)
	*($15 + [112]) = *($15 + [8])
	*($15 + [8]) = [0]
	*($15 + [12]) = [0]
	*($8) = [0]
	*($15 + [24]) = $6
	*($15 + [32]) = $14
	*(($8 = CALL $71([16]))) = $6
	*($8 + [8]) = $9
	*((($15 + [24]) + [32])) = [0]
	$4 = ($8 + [16])
	*((($15 + [24]) + [24])) = $4
	*((($15 + [24]) + [20])) = $4
	*($15 + [40]) = $8
	*($15 + [52]) = [0]
	*((($15 + [24]) + [36])) = [0]
	$8 = *($15 + [112])
	$4 = ( *((($15 + [80]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($4 + [32])
	$12 = (CASTING uint_64)(uint_32 $4)
	$4 = (($15 + [24]) + [28])
	
.LOOP $label$31:
	$8 = ($8 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$31 }
	if ( ($8 == 0) ){ goto $label$33 }
	CALL $23($4, $8)
	$4 = *(($15 + [56]))
	$8 = *(($15 + [52]))
	goto $label$32 
	
.LABEL $label$33
	$4 = [0]
	$8 = [0]
	
.LABEL $label$32
	*($15 + [164]) = $8
	*($15 + [160]) = $8
	*($15 + [168]) = $4
	*($15 + [144]) = ($15 + [160])
	*($15 + [152]) = ($15 + [80])
	CALL $24(($15 + [152]), ($15 + [144]))
	CALL $25(($15 + [160]), ($15 + [24]))
	$8 = *($15 + [160])
	CALL send_inline($8, (*($15 + [164]) - $8))
	$8 = *($15 + [160])
	if ( ($8 == 0) ){ goto $label$34 }
	*($15 + [164]) = $8
	CALL $72($8)
	
.LABEL $label$34
	$8 = *($15 + [52])
	if ( ($8 == 0) ){ goto $label$35 }
	*(($15 + [56])) = $8
	CALL $72($8)
	
.LABEL $label$35
	$8 = *($15 + [40])
	if ( ($8 == 0) ){ goto $label$36 }
	*(($15 + [44])) = $8
	CALL $72($8)
	
.LABEL $label$36
	if ( ((*(($15 + [112])) & [1]) == 0) ){ goto $label$37 }
	CALL $72(*(($15 + [120])))
	
.LABEL $label$37
	if ( ((*($15 + [8]) & [1]) == 0) ){ goto $label$38 }
	CALL $72(*(($15 + [16])))
	
.LABEL $label$38
	*([0] + [4]) = ($15 + [176])
	return (unreachable)
	
.LABEL $label$27
	CALL $73(($15 + [8]))
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [16])) = (int_64)1397703940
	*($9 + [8]) = (int_64)0
	*($9) = (int_64)0
	CALL eosio_assert([1], [608])
	$6 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$4
	CALL eosio_assert($7, [672])
	*(($9 + [32])) = [0]
	*($9 + [24]) = (int_64)0
	*($9 + [72]) = $5
	$1 = ($5 + $3)
	*($9 + [80]) = $1
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [576])
	CALL memcpy($9, $5, [8])
	$4 = ($5 + [8])
	CALL eosio_assert(((uint_32)($1 - $4) > (uint_32)[7]), [576])
	$7 = ($9 + [8])
	CALL memcpy($7, $4, [8])
	$4 = ($5 + [16])
	CALL eosio_assert(((uint_32)($1 - $4) > (uint_32)[7]), [576])
	CALL memcpy(($9 + [16]), $4, [8])
	*($9 + [76]) = ($5 + [24])
	$1 = ($9 + [24])
	CALL $53(($9 + [72]), $1)
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($5)
	
.LABEL $label$9
	*(($5 = (($9 + [56]) + [8]))) = *(($7 + [8]))
	$6 = *($9)
	*($9 + [56]) = *($7)
	CALL $76(($9 + [40]), $1)
	*((($9 + [72]) + [8])) = *($5)
	*($9 + [72]) = *($9 + [56])
	*($9 + [88]) = $6
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$10 }
	$8 = *((*($1) + $8))
	
.LABEL $label$10
	CALL void $1((int_32 ($9 + [88])), (int_32 ($9 + [72])), (int_32 ($9 + [40])), (int_32 $8))
	if ( ((*($9 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL $72(*($9 + [48]))
	
.LABEL $label$11
	if ( ((*($9 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL $72(*(($9 + [32])))
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$8 = *($0)
	$2 = int_32(($6 - $8) >> [4])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$7 = ($7 - $8)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($7 >> [3])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$7 = CALL $71(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$8 = ($0 + [4])
	
.LOOP $label$8:
	*($6 + [8]) = (int_64)1397703940
	*($6) = (int_64)0
	CALL eosio_assert([1], [608])
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$7 = [0]
	
.LABEL $label$9
	CALL eosio_assert($7, [672])
	$6 = (*($8) + [16])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $75($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$3 = ($7 + ($6 << [4]))
	$2 = ($7 + ($2 << [4]))
	$8 = $2
	
.LOOP $label$14:
	*($8 + [8]) = (int_64)1397703940
	*($8) = (int_64)0
	CALL eosio_assert([1], [608])
	$5 = (uint_64)*($8 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$7 = [0]
	
.LABEL $label$15
	CALL eosio_assert($7, [672])
	$8 = ($8 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$14 }
	$6 = *($0)
	$4 = ($0 + [4])
	$7 = (*($4) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$20 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$20
	*($0) = $1
	*($4) = $8
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $72($6)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [288])
	$3 = *($1)
	$2 = *($2)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($1 + [64]))), [704])
	$8 = ((int_64)*($1 + [56]) + (int_64)*($2))
	*($1 + [56]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [752])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [784])
	$6 = ($1 + [76])
	$4 = *($6)
	$2 = *($1 + [72])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$2:
	*($2) = (int_64)0
	$2 = ($2 + [16])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [464])
	$2 = [72]
	$5 = ($1 + [72])
	$6 = *($1 + [72])
	$4 = *($6)
	$7 = ($4 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	$2 = (($7 & [-16]) + $2)
	
.LABEL $label$4
	if ( ($2 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($2)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($10 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	*($9 + [4]) = $4
	*($9) = $4
	*($9 + [8]) = ($4 + $2)
	*($9 + [16]) = $9
	*($9 + [44]) = $5
	*($9 + [24]) = $1
	*($9 + [28]) = ($1 + [8])
	*($9 + [32]) = ($1 + [24])
	*($9 + [36]) = ($1 + [40])
	*($9 + [40]) = ($1 + [56])
	CALL $27(($9 + [24]), ($9 + [16]))
	CALL db_update_i64(*($1 + [88]), (int_64)0, $4, $2)
	if ( ($2 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $71(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $75($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [72])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [76])) = $6
	CALL $72($6)
	
.LABEL $label$11
	CALL $72($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $72($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [592])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $36($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [576])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [576])
	CALL memcpy(($7 + [8]), *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $32 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [672])
	*(($2 = ($0 + [32]))) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [672])
	*(($2 = ($0 + [48]))) = (int_64)1397703940
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [672])
	*(($2 = ($0 + [64]))) = (int_64)1397703940
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [672])
	*(($0 + [80])) = [0]
	*($0 + [72 align=4]) = (int_64)0
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [576])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [576])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [576])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [576])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $35(*($1), *($0 + [20]))
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [528])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [528])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [528])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [528])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [576])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [576])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [576])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $53(*($1), ($0 + [32]))
}

int_64 .FUNC _ZN4dice5crown16_next_divided_idEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	$1 = ($0 + [88])
	$2 = *(($0 + [116]))
	if ( ((int_32)$2 == (int_32)*(($0 + [112]))) ){ goto $label$3 }
	$4 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$1), [64])
	if ( $4 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$2 = CALL db_find_i64(*($1), *(($0 + [96])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $41($1, $2)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$1), [64])
	goto $label$1 
	
.LABEL $label$2
	$4 = $5
	
.LABEL $label$1
	*(($2 = (($5 + [16]) + [8]))) = *(($4 + [8]))
	*($5 + [16]) = *($4)
	*($2) = ((int_64)*($2) + (int_64)1)
	CALL $62($1, ($5 + [16]), *($0))
	$3 = *($2)
	*([0] + [4]) = ($5 + [32])
	return $3
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [288])
	$3 = *($1)
	$6 = *($2)
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($1 + [48]))), [704])
	$7 = ((int_64)*($1 + [40]) + (int_64)*($6))
	*($1 + [40]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [752])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [784])
	CALL eosio_assert([1], [608])
	$7 = (int_64)336472265283
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [672])
	*(($6 = (*($1 + [72]) + (*(*($2 + [4])) << [4]))) + [8]) = (int_64)86136899912452
	*($6) = (int_64)0
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [464])
	$6 = [72]
	$2 = ($1 + [72])
	$4 = *($1 + [72])
	$8 = *(($1 + [76]))
	$5 = ($8 - $4)
	$7 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	if ( ($6 <= [513]) ){ goto $label$9 }
	$8 = CALL malloc($6)
	goto $label$8 
	
.LABEL $label$9
	$8 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$8
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	*($9 + [16]) = $9
	*($9 + [44]) = $2
	*($9 + [24]) = $1
	*($9 + [28]) = ($1 + [8])
	*($9 + [32]) = ($1 + [24])
	*($9 + [36]) = ($1 + [40])
	*($9 + [40]) = ($1 + [56])
	CALL $27(($9 + [24]), ($9 + [16]))
	CALL db_update_i64(*($1 + [88]), (int_64)0, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$10 }
	CALL free($8)
	
.LABEL $label$10
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [288])
	$3 = *($3)
	*($1) = *($3)
	*(($4 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [464])
	CALL eosio_assert([1], [528])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy(($5 | [8]), $4, [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1280])
	*(($4 = CALL $71([32])) + [16]) = $1
	$3 = *($3)
	*($4) = *($3)
	*(($4 + [12])) = *(($3 + [12]))
	*(($5 = ($4 + [8]))) = *(($3 + [8]))
	*(($4 + [4])) = *(($3 + [4]))
	CALL eosio_assert([1], [528])
	CALL memcpy(($7 + [16]), $4, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy((($7 + [16]) | [8]), $5, [8])
	*($4 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, ($7 + [16]), [16])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)7235159537265672192
	$5 = *($4 + [20])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $42(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $72($4)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [48])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [288])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [48]))), [704])
	$9 = ((int_64)*($1 + [40]) + (int_64)*($3))
	*($1 + [40]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [752])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [784])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [464])
	$3 = [72]
	$5 = ($1 + [72])
	$7 = *($1 + [72])
	$6 = *(($1 + [76]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	$3 = (($8 & [-16]) + $3)
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$10 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$3
	*($11 + [4]) = $10
	*($11) = $10
	*($11 + [8]) = ($10 + $3)
	*($11 + [16]) = $11
	*($11 + [44]) = $5
	*($11 + [24]) = $1
	*($11 + [28]) = ($1 + [8])
	*($11 + [32]) = ($1 + [24])
	*($11 + [36]) = ($1 + [40])
	*($11 + [40]) = ($1 + [56])
	CALL $27(($11 + [24]), ($11 + [16]))
	CALL db_update_i64(*($1 + [88]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($10)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [48])
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $71([80])
	CALL $43($6)
	*($6 + [64]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [24])
	*($8 + [52]) = ($6 + [40])
	*($8 + [56]) = ($6 + [56])
	CALL $44(($8 + [40]), ($8 + [32]))
	*($6 + [68]) = $1
	*($8 + [32]) = $6
	$5 = (uint_64)*($6 + [16]) >> (uint_64)(int_64)8
	*($8 + [40]) = $5)
	$7 = *($6 + [68])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $45(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $72($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [48])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [288])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [48]))), [352])
	$9 = (int_64)
	*($1 + [40]) = $9(*($1 + [40]) - *($3)))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [400])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [432])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [464])
	$3 = [72]
	$5 = ($1 + [72])
	$7 = *($1 + [72])
	$6 = *(($1 + [76]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	$3 = (($8 & [-16]) + $3)
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$10 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$3
	*($11 + [4]) = $10
	*($11) = $10
	*($11 + [8]) = ($10 + $3)
	*($11 + [16]) = $11
	*($11 + [44]) = $5
	*($11 + [24]) = $1
	*($11 + [28]) = ($1 + [8])
	*($11 + [32]) = ($1 + [24])
	*($11 + [36]) = ($1 + [40])
	*($11 + [40]) = ($1 + [56])
	CALL $27(($11 + [24]), ($11 + [16]))
	CALL db_update_i64(*($1 + [88]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($10)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [48])
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $54($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $74($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $71($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $74($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $72($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $73($7)
	return (unreachable)
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [592])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $23($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [576])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [608])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [672])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [576])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [576])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
}

void .FUNC _ZN4dice5crown7_createERKyRKN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	CALL require_auth(*($0))
	$7 = *($2 + [8])
	*($10 + [16]) = $7
	$8 = [0]
	$3 = (uint_64)$7 >> (uint_64)(int_64)8
	$7 = $3)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [672])
	$6 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$7 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$6 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [1600])
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [1616])
	$4 = *(($0 + [72]))
	$9 = *(($0 + [76]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$12:
	if ( ((int_64)(uint_64)*((*($8) + [16])) >> (uint_64)(int_64)8) == (int_64)$3) ){ goto $label$11 }
	$9 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = ($0 + [48])
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$14 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [64])
	goto $label$13 
	
.LABEL $label$14
	$8 = [0]
	$9 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-7949128877345865728, $3)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$13 }
	$8 = CALL $38($6, $9)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [64])
	
.LABEL $label$13
	CALL eosio_assert(($8 == 0), [1648])
	$7 = *($0)
	*($10) = $2
	*($10 + [8]) = $1
	*($10 + [4]) = ($10 + [16])
	*($10 + [56]) = $7
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$2()), [1280])
	*($10 + [32]) = $6
	*($10 + [36]) = $10
	*($10 + [40]) = ($10 + [56])
	$8 = CALL $71([80])
	CALL $43($8)
	*($8 + [64]) = $6
	CALL $57(($10 + [32]), $8)
	*($10 + [48]) = $8
	$7 = (uint_64)*($8 + [16]) >> (uint_64)(int_64)8
	*($10 + [32]) = $7)
	$9 = *($8 + [68])
	*($10 + [28]) = $9
	$5 = ($0 + [76])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [80]))) ){ goto $label$16 }
	*($6 + [8]) = $7
	*($6 + [16]) = $9
	*($10 + [48]) = [0]
	*($6) = $8
	*($5) = ($6 + [24])
	goto $label$15 
	
.LABEL $label$16
	CALL $45(($0 + [72]), ($10 + [48]), ($10 + [32]), ($10 + [28]))
	
.LABEL $label$15
	$8 = *($10 + [48])
	*($10 + [48]) = [0]
	if ( ($8 == 0) ){ goto $label$17 }
	CALL $72($8)
	
.LABEL $label$17
	*([0] + [4]) = ($10 + [64])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	$10 = $11
	*([0] + [4]) = $11
	$2 = *($0)
	$3 = *($0 + [4])
	$8 = *($3)
	*($1 + [8]) = *($8)
	*(($1 + [16])) = *(($8 + [8]))
	$8 = *($3)
	*($1 + [24]) = *($8)
	*(($1 + [32])) = *(($8 + [8]))
	$6 = *(*($3 + [4]))
	CALL eosio_assert([1], [608])
	$5 = ($1 + [24])
	$4 = ($1 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$9 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [672])
	*(($1 + [48])) = $6
	*($1 + [40]) = (int_64)0
	*($1 + [56]) = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *(*($3))) * (float_64)(float_64)0.15))
	*($1) = *(*($3 + [8]))
	$9 = $11
	$8 = ($9 + [-64])
	*([0] + [4]) = $8
	*($10 + [4]) = $8
	*($10) = $8
	*($10 + [8]) = $9
	*($10 + [16]) = $10
	*($10 + [28]) = $4
	*($10 + [24]) = $1
	*($10 + [32]) = $5
	*($10 + [36]) = ($1 + [40])
	*($10 + [40]) = ($1 + [56])
	CALL $39(($10 + [24]), ($10 + [16]))
	$7 = (uint_64)*(($1 + [16])) >> (uint_64)(int_64)8
	*($1 + [68]) = CALL db_store_i64(*($2 + [8]), (int_64)-7949128877345865728, *(*($0 + [8])), $7), $8, [64])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($10 + [48])
}