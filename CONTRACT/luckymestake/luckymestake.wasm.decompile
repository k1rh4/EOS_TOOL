(data (i32.const 8192) "dividends are paying, try again later\00")
(data (i32.const 8230) "invalid quantity\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8333) "must stake positive quantity\00")
(data (i32.const 8362) "no balance object found\00")
(data (i32.const 8386) "overdrawn balance\00")
(data (i32.const 8404) "insufficient balance - some tokens are staking/unstaking\00")
(data (i32.const 8461) "must unstake positive quantity\00")
(data (i32.const 8492) "no staked tokens\00")
(data (i32.const 8509) "no enough staked quantity\00")
(data (i32.const 8535) "no unstaking tokens\00")
(data (i32.const 8555) "can only release after 24 hours\00")
(data (i32.const 8587) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 8646) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8695) "invalid symbol name\00")
(data (i32.const 8715) "write\00")
(data (i32.const 8721) "error reading iterator\00")
(data (i32.const 8744) "read\00")
(data (i32.const 8749) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8800) "cannot create objects in table of another contract\00")
(data (i32.const 8851) "cannot pass end iterator to modify\00")
(data (i32.const 8886) "object passed to modify is not in multi_index\00")
(data (i32.const 8932) "cannot modify objects in table of another contract\00")
(data (i32.const 8983) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9042) "attempt to add asset with different symbol\00")
(data (i32.const 9085) "addition underflow\00")
(data (i32.const 9104) "addition overflow\00")
(data (i32.const 9122) "attempt to subtract asset with different symbol\00")
(data (i32.const 9170) "subtraction underflow\00")
(data (i32.const 9192) "subtraction overflow\00")
(data (i32.const 9213) "cannot pass end iterator to erase\00")
(data (i32.const 9247) "cannot increment end iterator\00")
(data (i32.const 9277) "object passed to erase is not in multi_index\00")
(data (i32.const 9322) "cannot erase objects in table of another contract\00")
(data (i32.const 9372) "attempt to remove object that was not in multi_index\00")
(import "env" "db_find_i64" (func $fimport$0 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$6 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$7 (param i32 i64 i32 i32)))
(import "env" "current_time" (func $fimport$8 (result i64)))
(import "env" "db_next_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "cancel_deferred" (func $fimport$10 (param i32) (result i32)))
(import "env" "send_deferred" (func $fimport$11 (param i32 i64 i32 i32 i32)))
(import "env" "has_auth" (func $fimport$12 (param i64) (result i32)))
(import "env" "action_data_size" (func $fimport$13 (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "abort" (func $fimport$17))
(import "env" "set_blockchain_parameters_packed" (func $fimport$18 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$20 (param i32 i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $23))
(export "_ZdlPv" (func $38))
(export "_Znwj" (func $36))
(export "_Znaj" (func $37))
(export "_ZdaPv" (func $39))
(export "_ZnwjSt11align_val_t" (func $40))
(export "_ZnajSt11align_val_t" (func $41))
(export "_ZdlPvSt11align_val_t" (func $42))
(export "_ZdaPvSt11align_val_t" (func $43))
(table $0 6 6 anyfunc)
(elem (i32.const 1) $1 $18 $21 $11 $20)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17844))
(global $global$2 i32 (i32.const 17844))


void .FUNC $18 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL require_auth($1)
	$4 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)-4157493845350678528, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$5 = (*(CALL $2(($0 + [72]), $5) + [8]) == 0)
	goto $label$1 
	
.LABEL $label$2
	$5 = [1]
	
.LABEL $label$1
	CALL eosio_assert($5, [8192])
	*((($3 + [64]) + [32])) = [0]
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	*($3 + [72]) = $2)
	*($3 + [80]) = (int_64)-1
	*($3 + [88]) = (int_64)0
	$6 = *($0)
	*($3 + [64]) = $6
	$5 = CALL db_find_i64($6, $2, (int_64)-3102536757353119744, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $5(($3 + [64]), $5)
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)($3 + [64])), [8749])
	
.LABEL $label$3
	$7 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($7, [8535])
	*(($8 = (($3 + [48]) + [8]))) = *(($4 + [16]))
	*($3 + [48]) = *($4 + [8])
	*((($3 + [8]) + [32])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$6 = *($0)
	*($3 + [8]) = $6
	*($3 + [16]) = $2
	$5 = CALL db_find_i64($6, $2, (int_64)-4157658851551739904, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $4(($3 + [8]), $5)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($3 + [8])), [8749])
	CALL eosio_assert([1], [8851])
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($3 + [8])), [8886])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$4()), [8932])
	$2 = *($5)
	$8 = ($5 + [16])
	CALL eosio_assert(((int_64)*($3 + [56]) == (int_64)*($8)), [9042])
	$6 = ((int_64)*($5 + [8]) + (int_64)*($3 + [48]))
	*($5 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9085])
	CALL eosio_assert(((int_64)*($5 + [8]) < (int_64)4611686018427387904), [9104])
	CALL eosio_assert(((int_64)$2 == (int_64)*($5)), [8983])
	CALL eosio_assert([1], [8715])
	CALL memcpy(($3 + [112]), $5, [8])
	CALL eosio_assert([1], [8715])
	CALL memcpy((($3 + [112]) | [8]), ($5 + [8]), [8])
	*($3 + [136]) = *($8)
	CALL eosio_assert([1], [8715])
	CALL memcpy((($3 + [112]) + [16]), ($3 + [136]), [8])
	CALL db_update_i64(*($5 + [28]), $1, ($3 + [112]), [24])
	if ( (uint_64)($2 <= *((($3 + [8]) + [16]))) ){ goto $label$4 }
	*(($3 + [24])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert(((int_64)$6 == (int_64)CALL $fimport$4()), [8800])
	*(($5 = CALL _Znwj([40])) + [24]) = ($3 + [8])
	*($5) = $1
	*($5 + [8]) = *($3 + [48])
	*($5 + [16]) = *($8)
	CALL eosio_assert([1], [8715])
	CALL memcpy(($3 + [112]), $5, [8])
	CALL eosio_assert([1], [8715])
	CALL memcpy((($3 + [112]) | [8]), ($5 + [8]), [8])
	*($3 + [136]) = *($5 + [16])
	CALL eosio_assert([1], [8715])
	CALL memcpy((($3 + [112]) + [16]), ($3 + [136]), [8])
	$2 = *($5)
	$9 = CALL db_store_i64(*((($3 + [8]) + [8])), (int_64)-4157658851551739904, $1, $2, ($3 + [112]), [24])
	*($5 + [28]) = $9
	if ( (uint_64)($2 <= *((($3 + [8]) + [16]))) ){ goto $label$6 }
	*(($3 + [24])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($3 + [136]) = $5
	$2 = *($5)
	*($3 + [112]) = $2
	*($3 + [108]) = $9
	$10 = ($3 + [36])
	$8 = *($10)
	if ( ((uint_32)$8 >= (uint_32)*(($3 + [40]))) ){ goto $label$8 }
	*($8 + [8]) = $2
	*($8 + [16]) = $9
	*($3 + [136]) = [0]
	*($8) = $5
	*($10) = ($8 + [24])
	$5 = *($3 + [136])
	*($3 + [136]) = [0]
	if ( $5 ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$8
	CALL $6(($3 + [32]), ($3 + [136]), ($3 + [112]), ($3 + [108]))
	$5 = *($3 + [136])
	*($3 + [136]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$7
	CALL _ZdlPv($5)
	
.LABEL $label$4
	CALL eosio_assert($7, [9213])
	CALL eosio_assert($7, [9247])
	$5 = CALL db_next_i64(*($4 + [32]), ($3 + [112]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	CALL $5(($3 + [64]), $5)
	
.LABEL $label$9
	CALL $19(($3 + [64]), $4)
	*((($3 + [112]) + [8])) = *((($3 + [48]) + [8]))
	*($3 + [112]) = (int_64))((int_64)0 - *($3 + [48]))
	CALL $7($0, ($3 + [48]), ($3 + [112]))
	*($3 + [120]) = (int_64)0
	*($3 + [112]) = $1
	CALL cancel_deferred(($3 + [112]))
	$4 = *($3 + [32])
	if ( ($4 == 0) ){ goto $label$10 }
	$7 = ($3 + [36])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$14 }
	CALL _ZdlPv($0)
	
.LABEL $label$14
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$13 }
	$5 = *(($3 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $4
	
.LABEL $label$11
	*($7) = $4
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$4 = *($3 + [88])
	if ( ($4 == 0) ){ goto $label$15 }
	$7 = ($3 + [92])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$19 }
	CALL _ZdlPv($0)
	
.LABEL $label$19
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$18 }
	$5 = *(($3 + [88]))
	goto $label$16 
	
.LABEL $label$17
	$5 = $4
	
.LABEL $label$16
	*($7) = $4
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$global$0 = ($3 + [144])
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [9277])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9322])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9372])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [32]))
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8715])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8715])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8715])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $31(CALL $32($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8715])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8715])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8715])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8715])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8715])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8715])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [72])
	$4 = ($0 + [80])
	$5 = CALL db_lowerbound_i64(*($0 + [72]), *($4), (int_64)-4157493845350678528, (int_64)0)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL $2($3, $5)
	$6 = *($0)
	CALL eosio_assert([1], [8851])
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$3), [8886])
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$4()), [8932])
	*($5 + [8]) = $1
	$7 = *($5)
	CALL eosio_assert([1], [8983])
	CALL eosio_assert([1], [8715])
	CALL memcpy($2, $5, [8])
	CALL eosio_assert([1], [8715])
	CALL memcpy(($2 | [8]), ($5 + [8]), [4])
	CALL db_update_i64(*($5 + [20]), $6, $2, [12])
	$0 = ($0 + [88])
	if ( (uint_64)($7 <= *($0)) ){ goto $label$1 }
	*($0) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$6 = *($0)
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$4()), [8800])
	*(($5 = CALL _Znwj([32])) + [16]) = $3
	*($5 + [8]) = $1
	*($5) = (int_64)1
	CALL eosio_assert([1], [8715])
	CALL memcpy($2, $5, [8])
	CALL eosio_assert([1], [8715])
	CALL memcpy(($2 | [8]), ($5 + [8]), [4])
	$7 = *($5)
	$1 = CALL db_store_i64(*($4), (int_64)-4157493845350678528, $6, $7, $2, [12])
	*($5 + [20]) = $1
	$3 = ($0 + [88])
	if ( (uint_64)($7 <= *($3)) ){ goto $label$3 }
	*($3) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($2 + [24]) = $5
	$7 = *($5)
	*($2) = $7
	*($2 + [20]) = $1
	$4 = ($0 + [100])
	$3 = *($4)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [104]))) ){ goto $label$5 }
	*($3 + [8]) = $7
	*($3 + [16]) = $1
	*($2 + [24]) = [0]
	*($3) = $5
	*($4) = ($3 + [24])
	$0 = *($2 + [24])
	*($2 + [24]) = [0]
	if ( $0 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	CALL $22(($0 + [96]), ($2 + [24]), $2, ($2 + [20]))
	$0 = *($2 + [24])
	*($2 + [24]) = [0]
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$4
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	if ( CALL has_auth($1) ){ goto $label$1 }
	CALL require_auth(*($0))
	
.LABEL $label$1
	*(($3 + [72])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$4 = *($0)
	*($3 + [40]) = $4
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	*($3 + [48]) = $2)
	$5 = [0]
	$6 = CALL db_find_i64($4, $2, (int_64)-3102536757353119744, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $5(($3 + [40]), $6)
	CALL eosio_assert(((int_32)*($5 + [28]) == (int_32)($3 + [40])), [8749])
	
.LABEL $label$2
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [8535])
	CALL eosio_assert(((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$8() / (uint_64)(int_64)1000000)) - *($5 + [24])) > (uint_32)[86399]), [8555])
	$4 = *(($5 + [16]))
	$7 = *($5 + [8])
	CALL eosio_assert($6, [9213])
	CALL eosio_assert($6, [9247])
	$6 = CALL db_next_i64(*($5 + [32]), ($3 + [24]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	CALL $5(($3 + [40]), $6)
	
.LABEL $label$3
	CALL $19(($3 + [40]), $5)
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = $4
	CALL eosio_assert([1], [8646])
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$1 = $2
	$6 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$1 = $2
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $6 ){ goto $label$8 }
	$6 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$6 = [0]
	
.LABEL $label$4
	CALL eosio_assert($6, [8695])
	*($3 + [8]) = (int_64))((int_64)0 - $7)
	*($3 + [16]) = $4
	CALL $7($0, ($3 + [24]), ($3 + [8]))
	$8 = *($3 + [64])
	if ( ($8 == 0) ){ goto $label$9 }
	$0 = ($3 + [68])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($6)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$12 }
	$5 = *(($3 + [64]))
	goto $label$10 
	
.LABEL $label$11
	$5 = $8
	
.LABEL $label$10
	*($0) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)-4417032211186843649) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)-4417032211186843648) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-3102536759825661952) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-4157661383434960896) ){ goto $label$1 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [1]
	*($3) = *($3 + [72])
	CALL $24($1, $1, $3)
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_64)$2 == (int_64)-4998252998346932224) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-4994048603321270272) ){ goto $label$1 }
	*($3 + [60]) = [0]
	*($3 + [56]) = [2]
	*($3 + [16]) = *($3 + [56])
	CALL $25($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [44]) = [0]
	*($3 + [40]) = [3]
	*($3 + [32]) = *($3 + [40])
	CALL $26($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [68]) = [0]
	*($3 + [64]) = [4]
	*($3 + [8]) = *($3 + [64])
	CALL $24($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [52]) = [0]
	*($3 + [48]) = [5]
	*($3 + [24]) = *($3 + [48])
	CALL $25($1, $1, ($3 + [24]))
	
.LABEL $label$1
	CALL $45([0])
	$global$0 = ($3 + [80])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $25 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $49($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8744])
	CALL memcpy(($4 + [112]), $2, [8])
	*($4) = (int_64)0
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8744])
	CALL memcpy($4, ($2 + [8]), [8])
	$8 = *($4)
	*($4 + [120]) = $8
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [112])
	if ( ($5 & [1]) ){ goto $label$10 }
	CALL void $3((int_32 $0), (int_64 $8), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL void $3((int_32 $0), (int_64 $8), (int_64 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $52($2)
	$5 = *(($4 + [96]))
	if ( ($5 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$5 = *(($4 + [96]))
	if ( $5 ){ goto $label$6 }
	
.LABEL $label$7
	$5 = *(($4 + [56]))
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = ($4 + [100])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	CALL _ZdlPv($7)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($4 + [96]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $5
	
.LABEL $label$11
	*($3) = $5
	CALL _ZdlPv($2)
	$5 = *(($4 + [56]))
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$3 = ($4 + [60])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$18 }
	CALL _ZdlPv($7)
	
.LABEL $label$18
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$17 }
	$2 = *(($4 + [56]))
	goto $label$15 
	
.LABEL $label$16
	$2 = $5
	
.LABEL $label$15
	*($3) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($4 + [128])
	return [1]
}

int_32 .FUNC $24 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $49($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [136]) + [16]))) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [136]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8744])
	CALL memcpy(($4 + [136]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [8744])
	CALL memcpy((($4 + [136]) + [8]), ($2 + [8]), [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [8744])
	CALL memcpy(($4 + [24]), ($2 + [16]), [8])
	*($3) = *($4 + [24])
	*(($4 + [44])) = ($2 + [24])
	*((($4 + [24]) + [24])) = ($2 + $7)
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $2
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*(($8 = (($4 + [160]) + [8]))) = *($3)
	*($4 + [160]) = *($4 + [144])
	$0 = *($4 + [136])
	*((($4 + [176]) + [8])) = *($8)
	*($4 + [176]) = *($4 + [160])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$1 = *((($4 + [176]) + [8]))
	*((($4 + [192]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [176])
	*($4 + [8]) = $1
	*($4 + [192]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $52($2)
	
.LABEL $label$5
	$5 = *(($4 + [120]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($4 + [124])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($4 + [120]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$5 = *(($4 + [80]))
	if ( ($5 == 0) ){ goto $label$11 }
	$6 = ($4 + [84])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	CALL _ZdlPv($7)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($4 + [80]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $5
	
.LABEL $label$12
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$global$0 = ($4 + [208])
	return [1]
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $26 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $49($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [120]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[3]), [8744])
	CALL memcpy(($4 + [120]), $2, [4])
	*(($4 + [28])) = ($2 + [4])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *($4 + [120])
	if ( ($5 & [1]) ){ goto $label$10 }
	CALL void $3((int_32 $8), (int_32 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL void $3((int_32 $8), (int_32 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $52($2)
	$5 = *(($4 + [104]))
	if ( ($5 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$5 = *(($4 + [104]))
	if ( $5 ){ goto $label$6 }
	
.LABEL $label$7
	$5 = *(($4 + [64]))
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = ($4 + [108])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	CALL _ZdlPv($7)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($4 + [104]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $5
	
.LABEL $label$11
	*($3) = $5
	CALL _ZdlPv($2)
	$5 = *(($4 + [64]))
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$3 = ($4 + [68])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$18 }
	CALL _ZdlPv($7)
	
.LABEL $label$18
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$17 }
	$2 = *(($4 + [64]))
	goto $label$15 
	
.LABEL $label$16
	$2 = $5
	
.LABEL $label$15
	*($3) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($4 + [128])
	return [1]
}

int_32 .FUNC $49 (int_32 $0)
{
	return CALL $50([9448], $0)
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $49($1)
	
.LABEL $label$2
	*(CALL $46()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $49(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $52($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $52($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $47(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9428])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $47(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $47 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $46())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $48($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $46 ()
{
	return [9432]
}

void .FUNC $45 (int_32 $0)
{
}

void .FUNC $44 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $51 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9440]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9444])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9440]) = [1]
	$2 = ($2 << [16])
	*([0] + [9444]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9444])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9444]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9440]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9440]) = [1]
	$3 = ($3 << [16])
	*([0] + [9444]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9444])
	
.LABEL $label$10
	*([0] + [9444]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8721])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $49($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8744])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8744])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $33(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $52($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8721])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $49($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $0
	CALL $35(($3 + [32]), $5)
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [16]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $10(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $52($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = ($0 + [32])
	$5 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$6:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)(uint_64)*($9 + [8]) >> (uint_64)(int_64)8) == (int_64)$5) ){ goto $label$5 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$4), [8749])
	goto $label$3 
	
.LABEL $label$4
	$7 = ($0 + [40])
	$8 = CALL db_find_i64(*($4), *($7), (int_64)-4157508551318700032, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $9($4, $8)
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$4), [8749])
	
.LABEL $label$3
	$10 = *($0)
	CALL eosio_assert([1], [8851])
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$4), [8886])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$4()), [8932])
	$5 = *($9 + [8])
	CALL eosio_assert(((int_64)*(($1 + [8])) == (int_64)$5), [9042])
	$11 = ((int_64)*($9) + (int_64)*($1))
	*($9) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [9085])
	CALL eosio_assert(((int_64)*($9) < (int_64)4611686018427387904), [9104])
	$8 = ($9 + [24])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($8)), [9042])
	$11 = ((int_64)*($9 + [16]) + (int_64)*($2))
	*($9 + [16]) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [9085])
	CALL eosio_assert(((int_64)*($9 + [16]) < (int_64)4611686018427387904), [9104])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($9 + [8]) >> (uint_64)(int_64)8)), [8983])
	CALL eosio_assert([1], [8715])
	CALL memcpy($3, $9, [8])
	*($3 + [40]) = *($9 + [8])
	CALL eosio_assert([1], [8715])
	CALL memcpy(($3 | [8]), ($3 + [40]), [8])
	CALL eosio_assert([1], [8715])
	CALL memcpy(($3 + [16]), ($9 + [16]), [8])
	*($3 + [40]) = *($8)
	CALL eosio_assert([1], [8715])
	CALL memcpy(($3 + [24]), ($3 + [40]), [8])
	CALL db_update_i64(*($9 + [36]), $10, $3, [32])
	$8 = ($0 + [48])
	if ( (uint_64)($5 <= *($8)) ){ goto $label$1 }
	*($8) = ((int_64)$5 + (int_64)1)
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$2
	$10 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$4()), [8800])
	*(($8 = CALL _Znwj([48])) + [32]) = $4
	*($8 + [8]) = *(($1 + [8]))
	*($8) = *($1)
	*($8 + [16]) = *($2)
	*($8 + [24]) = *(($2 + [8]))
	CALL eosio_assert([1], [8715])
	CALL memcpy($3, $8, [8])
	*($3 + [40]) = *($8 + [8])
	CALL eosio_assert([1], [8715])
	CALL memcpy(($3 | [8]), ($3 + [40]), [8])
	CALL eosio_assert([1], [8715])
	CALL memcpy(($3 + [16]), ($8 + [16]), [8])
	*($3 + [40]) = *($8 + [24])
	CALL eosio_assert([1], [8715])
	CALL memcpy(($3 + [24]), ($3 + [40]), [8])
	$5 = (uint_64)*($8 + [8]) >> (uint_64)(int_64)8
	$9 = CALL db_store_i64(*($7), (int_64)-4157508551318700032, $10, $5), $3, [32]
	*($8 + [36]) = $9)
	$7 = ($0 + [48])
	if ( (uint_64)($5 <= *($7)) ){ goto $label$7 }
	*($7) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$7
	*($3 + [40]) = $8
	$5 = (uint_64)*(($8 + [8])) >> (uint_64)(int_64)8
	*($3) = $5)
	*($3 + [36]) = $9
	$6 = ($0 + [60])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [64]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $9
	*($3 + [40]) = [0]
	*($7) = $8
	*($6) = ($7 + [24])
	$8 = *($3 + [40])
	*($3 + [40]) = [0]
	if ( $8 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	CALL $10(($0 + [56]), ($3 + [40]), $3, ($3 + [36]))
	$8 = *($3 + [40])
	*($3 + [40]) = [0]
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$8
	CALL _ZdlPv($8)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8721])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $49($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8744])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8744])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8744])
	CALL memcpy(($3 + [24]), ($2 + [16]), [8])
	*($5 + [16]) = *($3 + [24])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$7 = *($5)
	*($3 + [24]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $6(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $52($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8721])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $49($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [28]) = $0
	CALL $34(($3 + [32]), $5)
	*($5 + [32]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $12(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $52($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8721])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $49($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8744])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [8744])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $22(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $52($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $3 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8749])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $8($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8749])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL require_auth($1)
	$4 = [0]
	$5 = [0]
	$6 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)-4157493845350678528, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = ((int_32)*(CALL $2(($0 + [72]), $6) + [8]) != (int_32)[0])
	
.LABEL $label$1
	$7 = [1]
	CALL eosio_assert(((int_32)$5 ^ (int_32)[1]), [8192])
	$8 = *($2 + [8])
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = *($2)
	if ( ((uint_64)((int_64)$10 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$5 = [0]
	$11 = $9
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$11 = $12
	$4 = [1]
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$11 = $12
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$6 = ($5 + [1])
	$5 = $6
	if ( $4 ){ goto $label$6 }
	$4 = [1]
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	CALL eosio_assert($4, [8230])
	$11 = (int_64)0
	CALL eosio_assert(((int_64)$10 > (int_64)0), [8333])
	*((($3 + [88]) + [32])) = [0]
	*($3 + [88]) = (int_64)-8173735040989784784
	*($3 + [104]) = (int_64)-1
	*($3 + [112]) = (int_64)0
	*($3 + [96]) = $1
	$4 = CALL $3(($3 + [88]), $9, [8362])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)$8), [8587])
	CALL eosio_assert(((int_64)*($4) >= (int_64)$10), [8386])
	*((($3 + [48]) + [32])) = [0]
	*($3 + [56]) = $9
	*($3 + [64]) = (int_64)-1
	*($3 + [72]) = (int_64)0
	$10 = *($0)
	*($3 + [48]) = $10
	$5 = [0]
	$12 = (int_64)0
	$6 = CALL db_find_i64($10, $9, (int_64)-4157658851551739904, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$5 = CALL $4(($3 + [48]), $6)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($3 + [48])), [8749])
	$9 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$12 = *($5 + [8])
	$7 = [0]
	
.LABEL $label$7
	*((($3 + [8]) + [32])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$10 = *($0)
	*($3 + [8]) = $10
	*($3 + [16]) = $9
	$6 = CALL db_find_i64($10, $9, (int_64)-3102536757353119744, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$6 = CALL $5(($3 + [8]), $6)
	CALL eosio_assert(((int_32)*($6 + [28]) == (int_32)($3 + [8])), [8749])
	$11 = *($6 + [8])
	
.LABEL $label$8
	CALL eosio_assert(((int_64))(*($4) - *($2)) >= (int_64)((int_64)$11 + (int_64)$12)), [8404])
	if ( ($7 == 0) ){ goto $label$12 }
	CALL eosio_assert(((int_64)*($3 + [48]) == (int_64)CALL $fimport$4()), [8800])
	*(($5 = CALL _Znwj([40])) + [24]) = ($3 + [48])
	*($5) = $1
	*($5 + [8]) = *($2)
	*($5 + [16]) = *(($2 + [8]))
	CALL eosio_assert([1], [8715])
	CALL memcpy(($3 + [128]), $5, [8])
	CALL eosio_assert([1], [8715])
	CALL memcpy((($3 + [128]) | [8]), ($5 + [8]), [8])
	*($3 + [168]) = *($5 + [16])
	CALL eosio_assert([1], [8715])
	CALL memcpy((($3 + [128]) + [16]), ($3 + [168]), [8])
	$11 = *($5)
	$6 = CALL db_store_i64(*((($3 + [48]) + [8])), (int_64)-4157658851551739904, $1, $11, ($3 + [128]), [24])
	*($5 + [28]) = $6
	$4 = (($3 + [48]) + [16])
	if ( (uint_64)($11 <= *($4)) ){ goto $label$13 }
	*($4) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($3 + [168]) = $5
	$11 = *($5)
	*($3 + [128]) = $11
	*($3 + [164]) = $6
	$7 = ($3 + [76])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($3 + [80]))) ){ goto $label$11 }
	*($4 + [8]) = $11
	*($4 + [16]) = $6
	*($3 + [168]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	$5 = *($3 + [168])
	*($3 + [168]) = [0]
	if ( $5 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	CALL eosio_assert([1], [8851])
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($3 + [48])), [8886])
	CALL eosio_assert(((int_64)*($3 + [48]) == (int_64)CALL $fimport$4()), [8932])
	$11 = *($5)
	$4 = ($5 + [16])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*($4)), [9042])
	$9 = ((int_64)*($5 + [8]) + (int_64)*($2))
	*($5 + [8]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [9085])
	CALL eosio_assert(((int_64)*($5 + [8]) < (int_64)4611686018427387904), [9104])
	CALL eosio_assert(((int_64)$11 == (int_64)*($5)), [8983])
	CALL eosio_assert([1], [8715])
	CALL memcpy(($3 + [128]), $5, [8])
	CALL eosio_assert([1], [8715])
	CALL memcpy((($3 + [128]) | [8]), ($5 + [8]), [8])
	*($3 + [168]) = *($4)
	CALL eosio_assert([1], [8715])
	CALL memcpy((($3 + [128]) + [16]), ($3 + [168]), [8])
	CALL db_update_i64(*($5 + [28]), $1, ($3 + [128]), [24])
	$5 = (($3 + [48]) + [16])
	if ( (uint_64)($11 <= *($5)) ){ goto $label$9 }
	*($5) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	goto $label$9 
	
.LABEL $label$11
	CALL $6(($3 + [72]), ($3 + [168]), ($3 + [128]), ($3 + [164]))
	$5 = *($3 + [168])
	*($3 + [168]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$9
	*($3 + [128]) = (int_64)0
	$11 = *(($2 + [8]))
	*($3 + [136]) = $11
	CALL eosio_assert([1], [8646])
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$9 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$11 = $9
	$4 = [1]
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$11 = $9
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$6 = ($5 + [1])
	$5 = $6
	if ( $4 ){ goto $label$18 }
	$4 = [1]
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$4 = [0]
	
.LABEL $label$14
	CALL eosio_assert($4, [8695])
	CALL $7($0, $2, ($3 + [128]))
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$19 }
	$2 = ($3 + [36])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$21 }
	
.LOOP $label$22:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$23 }
	CALL _ZdlPv($4)
	
.LABEL $label$23
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$22 }
	$5 = *(($3 + [32]))
	goto $label$20 
	
.LABEL $label$21
	$5 = $6
	
.LABEL $label$20
	*($2) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$19
	$6 = *($3 + [72])
	if ( ($6 == 0) ){ goto $label$24 }
	$2 = ($3 + [76])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$26 }
	
.LOOP $label$27:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$28 }
	CALL _ZdlPv($4)
	
.LABEL $label$28
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$27 }
	$5 = *(($3 + [72]))
	goto $label$25 
	
.LABEL $label$26
	$5 = $6
	
.LABEL $label$25
	*($2) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$24
	$6 = *($3 + [112])
	if ( ($6 == 0) ){ goto $label$29 }
	$2 = ($3 + [116])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$31 }
	
.LOOP $label$32:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$33 }
	CALL _ZdlPv($4)
	
.LABEL $label$33
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$32 }
	$5 = *(($3 + [112]))
	goto $label$30 
	
.LABEL $label$31
	$5 = $6
	
.LABEL $label$30
	*($2) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$29
	$global$0 = ($3 + [176])
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $44($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[40])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$2 }
	$5 = [107374182]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	$6 = *($1 + [16 align=4])
	*($1 + [16 align=4]) = (int_64)0
	$4 = ($1 + [24])
	$7 = *($4)
	*($4) = (int_64)0
	$4 = ($1 + [32])
	$8 = *($4)
	*($4) = (int_64)0
	*(($9 = ($2 + ((int_32)$3 * (int_32)[40])))) = *($1)
	*($9 + [16 align=4]) = $6
	*(($9 + [8])) = *(($1 + [8]))
	*(($9 + [24])) = $7
	*(($9 + [32])) = $8
	$10 = ($2 + ((int_32)$5 * (int_32)[40]))
	$11 = ($9 + [40])
	$1 = *($0)
	$12 = *(($0 + [4]))
	if ( ((int_32)$12 == (int_32)$1) ){ goto $label$6 }
	$13 = ($1 - $12)
	$2 = [0]
	
.LOOP $label$7:
	$5 = ($12 + $2)
	*((($1 = ($9 + $2)) + [-32])) = *(($5 + [-32]))
	*(($1 + [-40])) = *(($5 + [-40]))
	*(($3 = ($1 + [-24]))) = (int_64)0
	*(($4 = ($1 + [-16]))) = [0]
	$14 = ($5 + [-24])
	*($3) = *($14)
	$3 = ($5 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($1 + [-12]))) = (int_64)0
	*(($1 = ($1 + [-4]))) = [0]
	$4 = ($5 + [-12])
	*($3) = *($4)
	*($14) = (int_64)0
	$5 = ($5 + [-4])
	*($1) = *($5)
	*($5) = [0]
	*($4) = (int_64)0
	$2 = ($2 + [-40])
	if ( ((int_32)$13 != (int_32)$2) ){ goto $label$7 }
	$9 = ($9 + $2)
	$1 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $1
	
.LABEL $label$5
	*($0) = $9
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = *(($1 + [-12]))
	if ( ($5 == 0) ){ goto $label$10 }
	*(($1 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$5 = ($1 + [-40])
	$2 = *(($1 + [-24]))
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [-20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$1 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $27($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $14($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $28($2, $1)
	CALL $30(CALL $29(CALL $29($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $11 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL require_auth($1)
	$4 = [0]
	$5 = [0]
	$6 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)-4157493845350678528, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = ((int_32)*(CALL $2(($0 + [72]), $6) + [8]) != (int_32)[0])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 ^ (int_32)[1]), [8192])
	$7 = *($2 + [8])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = *($2)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$5 = [0]
	$10 = $8
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$10 = $11
	$4 = [1]
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$10 = $11
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$6 = ($5 + [1])
	$5 = $6
	if ( $4 ){ goto $label$6 }
	$4 = [1]
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	CALL eosio_assert($4, [8230])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [8461])
	*((($3 + [176]) + [32])) = [0]
	*($3 + [192]) = (int_64)-1
	*($3 + [200]) = (int_64)0
	$10 = *($0)
	*($3 + [176]) = $10
	*($3 + [184]) = $8
	$5 = [0]
	$4 = CALL db_find_i64($10, $8, (int_64)-4157658851551739904, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$5 = CALL $4(($3 + [176]), $4)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($3 + [176])), [8749])
	$7 = *(($2 + [8]))
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = *($2)
	
.LABEL $label$7
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [8492])
	CALL eosio_assert(((int_64)*(($5 + [16])) == (int_64)$7), [8587])
	CALL eosio_assert(((int_64)*($5 + [8]) >= (int_64)$9), [8509])
	*((($3 + [136]) + [32])) = [0]
	*($3 + [152]) = (int_64)-1
	*($3 + [160]) = (int_64)0
	$10 = *($0)
	*($3 + [136]) = $10
	*($3 + [144]) = $8
	$4 = CALL db_find_i64($10, $8, (int_64)-3102536757353119744, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	$4 = CALL $5(($3 + [136]), $4)
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)($3 + [136])), [8749])
	CALL eosio_assert([1], [8851])
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)($3 + [136])), [8886])
	CALL eosio_assert(((int_64)*($3 + [136]) == (int_64)CALL $fimport$4()), [8932])
	$10 = *($4)
	$12 = ($4 + [16])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*($12)), [9042])
	$8 = ((int_64)*($4 + [8]) + (int_64)*($2))
	*($4 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9085])
	CALL eosio_assert(((int_64)*($4 + [8]) < (int_64)4611686018427387904), [9104])
	*($4 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$10 == (int_64)*($4)), [8983])
	CALL eosio_assert([1], [8715])
	CALL memcpy(($3 + [64]), $4, [8])
	CALL eosio_assert([1], [8715])
	CALL memcpy((($3 + [64]) | [8]), ($4 + [8]), [8])
	*($3 + [16]) = *($12)
	CALL eosio_assert([1], [8715])
	CALL memcpy((($3 + [64]) + [16]), ($3 + [16]), [8])
	CALL eosio_assert([1], [8715])
	CALL memcpy((($3 + [64]) + [24]), ($4 + [24]), [4])
	CALL db_update_i64(*($4 + [32]), $1, ($3 + [64]), [28])
	if ( (uint_64)($10 <= *((($3 + [136]) + [16]))) ){ goto $label$8 }
	*(($3 + [152])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert(((int_64)*($3 + [136]) == (int_64)CALL $fimport$4()), [8800])
	*(($4 = CALL _Znwj([40])) + [28]) = ($3 + [136])
	*($4) = $1
	*($4 + [8]) = *($2)
	*($4 + [16]) = *(($2 + [8]))
	*($4 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert([1], [8715])
	CALL memcpy(($3 + [64]), $4, [8])
	CALL eosio_assert([1], [8715])
	CALL memcpy((($3 + [64]) | [8]), ($4 + [8]), [8])
	*($3 + [16]) = *($4 + [16])
	CALL eosio_assert([1], [8715])
	CALL memcpy((($3 + [64]) + [16]), ($3 + [16]), [8])
	CALL eosio_assert([1], [8715])
	CALL memcpy((($3 + [64]) + [24]), ($4 + [24]), [4])
	$10 = *($4)
	$13 = CALL db_store_i64(*((($3 + [136]) + [8])), (int_64)-3102536757353119744, $1, $10, ($3 + [64]), [28])
	*($4 + [32]) = $13
	if ( (uint_64)($10 <= *((($3 + [136]) + [16]))) ){ goto $label$10 }
	*(($3 + [152])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($3 + [16]) = $4
	$10 = *($4)
	*($3 + [64]) = $10
	*($3) = $13
	$12 = *((($3 + [136]) + [28]))
	if ( ((uint_32)$12 >= (uint_32)*(($3 + [168]))) ){ goto $label$12 }
	*($12 + [8]) = $10
	*($12 + [16]) = $13
	*($3 + [16]) = [0]
	*($12) = $4
	*(($3 + [164])) = ($12 + [24])
	$4 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( $4 ){ goto $label$11 }
	goto $label$8 
	
.LABEL $label$12
	CALL $12(($3 + [160]), ($3 + [16]), ($3 + [64]), $3)
	$4 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	
.LABEL $label$11
	CALL _ZdlPv($4)
	
.LABEL $label$8
	$12 = ($2 + [8])
	$4 = ($5 + [16])
	CALL eosio_assert(((int_64)*($4) == (int_64)*($12)), [8587])
	$13 = ($5 + [8])
	if ( ((int_64)*($13) <= (int_64)*($2)) ){ goto $label$14 }
	CALL eosio_assert($6, [8851])
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($3 + [176])), [8886])
	CALL eosio_assert(((int_64)*($3 + [176]) == (int_64)CALL $fimport$4()), [8932])
	$10 = *($5)
	CALL eosio_assert(((int_64)*($12) == (int_64)*($4)), [9122])
	$8 = (int_64)
	*($5 + [8]) = $8(*($5 + [8]) - *($2)))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9170])
	CALL eosio_assert(((int_64)*($5 + [8]) < (int_64)4611686018427387904), [9192])
	CALL eosio_assert(((int_64)$10 == (int_64)*($5)), [8983])
	CALL eosio_assert([1], [8715])
	CALL memcpy(($3 + [64]), $5, [8])
	CALL eosio_assert([1], [8715])
	CALL memcpy((($3 + [64]) | [8]), $13, [8])
	*($3 + [16]) = *($4)
	CALL eosio_assert([1], [8715])
	CALL memcpy((($3 + [64]) + [16]), ($3 + [16]), [8])
	CALL db_update_i64(*($5 + [28]), $1, ($3 + [64]), [24])
	if ( (uint_64)($10 <= *((($3 + [176]) + [16]))) ){ goto $label$13 }
	*(($3 + [192])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	goto $label$13 
	
.LABEL $label$14
	CALL eosio_assert($6, [9213])
	CALL eosio_assert($6, [9247])
	$4 = CALL db_next_i64(*($5 + [28]), ($3 + [64]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$15 }
	CALL $4(($3 + [176]), $4)
	
.LABEL $label$15
	CALL $13(($3 + [176]), $5)
	
.LABEL $label$13
	$5 = ($2 + [8])
	*((($3 + [64]) + [8])) = *($5)
	*($3 + [64]) = (int_64))((int_64)0 - *($2))
	CALL $7($0, ($3 + [64]), $2)
	$10 = CALL current_time()
	*((($3 + [64]) + [28])) = (int_64)0
	*(($3 + [108])) = (int_64)0
	*(($3 + [116])) = (int_64)0
	*($3 + [76]) = [0]
	*($3 + [80]) = [0]
	*($3 + [84 align=4]) = (int_64)0
	*($3 + [100 align=4]) = (int_64)0
	*($3 + [64]) = ((CASTING uint_32)(uint_64 ((uint_64)$10 / (uint_64)(int_64)1000000)) + [60])
	$10 = *($0)
	*($3) = $1
	*($3 + [16]) = $10
	*($3 + [24]) = (int_64)-4998252998346932224
	*($3 + [8]) = *($5)
	*(($5 = CALL _Znwj([16]))) = $10
	*($5 + [8]) = (int_64)3617214756542218240
	*((($3 + [16]) + [36])) = [0]
	$4 = ($5 + [16])
	*(($3 + [40])) = $4
	*(($3 + [36])) = $4
	*($3 + [32]) = $5
	*($3 + [44 align=4]) = (int_64)0
	CALL $14((($3 + [16]) + [28]), [16])
	$5 = *($3 + [44])
	$6 = ($3 + [48])
	$4 = (*($6) - $5)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [8715])
	CALL memcpy($5, $3, [8])
	*($3 + [216]) = *($3 + [8])
	CALL eosio_assert(((int_32)($4 + [-8]) > (int_32)[7]), [8715])
	CALL memcpy(($5 + [8]), ($3 + [216]), [8])
	CALL $15((($3 + [64]) + [36]), ($3 + [16]))
	$5 = *($3 + [44])
	if ( ($5 == 0) ){ goto $label$16 }
	*($6) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [36])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	*(($3 + [84])) = [86400]
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = $1
	CALL cancel_deferred(($3 + [16]))
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = $1
	$10 = *($0)
	CALL $16($3, ($3 + [64]))
	$5 = *($3)
	CALL send_deferred(($3 + [16]), $10, $5, (*($3 + [4]) - $5), [0])
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$18 }
	*($3 + [4]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$18
	CALL $17(($3 + [64]))
	$6 = *($3 + [160])
	if ( ($6 == 0) ){ goto $label$19 }
	$2 = ($3 + [164])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$21 }
	
.LOOP $label$22:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$23 }
	CALL _ZdlPv($4)
	
.LABEL $label$23
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$22 }
	$5 = *(($3 + [160]))
	goto $label$20 
	
.LABEL $label$21
	$5 = $6
	
.LABEL $label$20
	*($2) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$19
	$6 = *($3 + [200])
	if ( ($6 == 0) ){ goto $label$24 }
	$2 = ($3 + [204])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$26 }
	
.LOOP $label$27:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$28 }
	CALL _ZdlPv($4)
	
.LABEL $label$28
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$27 }
	$5 = *(($3 + [200]))
	goto $label$25 
	
.LABEL $label$26
	$5 = $6
	
.LABEL $label$25
	*($2) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$24
	$global$0 = ($3 + [224])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9277])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9322])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9372])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $49($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9428])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $49($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8744])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8744])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [8744])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8744])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($1 + [8]) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8744])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8744])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8715])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8715])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8715])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8715])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [8715])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $31($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8715])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8715])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $51($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8247])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $52($0)
	
.LABEL $label$1
}

void .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17832])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17640]
	$3 = (((int_32)$1 * (int_32)[12]) + [17640])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}