(data (i32.const 8192) "\03\00\00\00\04\00\00\00\04\00\00\00\06\00\00\00")
(data (i32.const 8208) "\83\f9\a2\00DNn\00\fc)\15\00\d1W\'\00\dd4\f5\00b\db\c0\00<\99\95\00A\90C\00cQ\fe\00\bb\de\ab\00\b7a\c5\00:n$\00\d2MB\00I\06\e0\00\t\ea.\00\1c\92\d1\00\eb\1d\fe\00)\b1\1c\00\e8>\a7\00\f55\82\00D\bb.\00\9c\e9\84\00\b4&p\00A~_\00\d6\919\00S\839\00\9c\f49\00\8b_\84\00(\f9\bd\00\f8\1f;\00\de\ff\97\00\0f\98\05\00\11/\ef\00\nZ\8b\00m\1fm\00\cf~6\00\t\cb\'\00FO\b7\00\9ef?\00-\ea_\00\ba\'u\00\e5\eb\c7\00={\f1\00\f79\07\00\92R\8a\00\fbk\ea\00\1f\b1_\00\08]\8d\000\03V\00{\fcF\00\f0\abk\00 \bc\cf\006\f4\9a\00\e3\a9\1d\00^a\91\00\08\1b\e6\00\85\99e\00\a0\14_\00\8d@h\00\80\d8\ff\00\'sM\00\06\061\00\caV\15\00\c9\a8s\00{\e2`\00k\8c\c0\00\19\c4G\00\cdg\c3\00\t\e8\dc\00Y\83*\00\8bv\c4\00\a6\1c\96\00D\af\dd\00\19W\d1\00\a5>\05\00\05\07\ff\003~?\00\c22\e8\00\98O\de\00\bb}2\00&=\c3\00\1ek\ef\00\9f\f8^\005\1f:\00\7f\f2\ca\00\f1\87\1d\00|\90!\00j$|\00\d5n\fa\000-w\00\15;C\00\b5\14\c6\00\c3\19\9d\00\ad\c4\c2\00,MA\00\0c\00]\00\86}F\00\e3q-\00\9b\c6\9a\003b\00\00\b4\d2|\00\b4\a7\97\007U\d5\00\d7>\f6\00\a3\10\18\00Mv\fc\00d\9d*\00p\d7\ab\00c|\f8\00z\b0W\00\17\15\e7\00\c0IV\00;\d6\d9\00\a7\848\00$#\cb\00\d6\8aw\00ZT#\00\00\1f\b9\00\f1\n\1b\00\19\ce\df\00\9f1\ff\00f\1ej\00\99Wa\00\ac\fbG\00~\7f\d8\00\"e\b7\002\e8\89\00\e6\bf`\00\ef\c4\cd\00l6\t\00]?\d4\00\16\de\d7\00X;\de\00\de\9b\92\00\d2\"(\00(\86\e8\00\e2XM\00\c6\ca2\00\08\e3\16\00\e0}\cb\00\17\c0P\00\f3\1d\a7\00\18\e0[\00.\134\00\83\12b\00\83H\01\00\f5\8e[\00\ad\b0\7f\00\1e\e9\f2\00HJC\00\10g\d3\00\aa\dd\d8\00\ae_B\00ja\ce\00\n(\a4\00\d3\99\b4\00\06\a6\f2\00\\w\7f\00\a3\c2\83\00a<\88\00\8asx\00\af\8cZ\00o\d7\bd\00-\a6c\00\f4\bf\cb\00\8d\81\ef\00&\c1g\00U\caE\00\ca\d96\00(\a8\d2\00\c2a\8d\00\12\c9w\00\04&\14\00\12F\9b\00\c4Y\c4\00\c8\c5D\00M\b2\91\00\00\17\f3\00\d4C\ad\00)I\e5\00\fd\d5\10\00\00\be\fc\00\1e\94\cc\00p\ce\ee\00\13>\f5\00\ec\f1\80\00\b3\e7\c3\00\c7\f8(\00\93\05\94\00\c1q>\00.\t\b3\00\0bE\f3\00\88\12\9c\00\ab {\00.\b5\9f\00G\92\c2\00{2/\00\0cUm\00r\a7\90\00k\e7\1f\001\cb\96\00y\16J\00Ay\e2\00\f4\df\89\00\e8\94\97\00\e2\e6\84\00\991\97\00\88\edk\00__6\00\bb\fd\0e\00H\9a\b4\00g\a4l\00qrB\00\8d]2\00\9f\15\b8\00\bc\e5\t\00\8d1%\00\f7t9\000\05\1c\00\0d\0c\01\00K\08h\00,\eeX\00G\aa\90\00t\e7\02\00\bd\d6$\00\f7}\a6\00nHr\00\9f\16\ef\00\8e\94\a6\00\b4\91\f6\00\d1SQ\00\cf\n\f2\00 \983\00\f5K~\00\b2ch\00\dd>_\00@]\03\00\85\89\7f\00UR)\007d\c0\00m\d8\10\002H2\00[Lu\00Nq\d4\00ETn\00\0b\t\c1\00*\f5i\00\14f\d5\00\'\07\9d\00]\04P\00\b4;\db\00\eav\c5\00\87\f9\17\00Ik}\00\1d\'\ba\00\96i)\00\c6\cc\ac\00\ad\14T\00\90\e2j\00\88\d9\89\00,rP\00\04\a4\be\00w\07\94\00\f30p\00\00\fc\'\00\eaq\a8\00f\c2I\00d\e0=\00\97\dd\83\00\a3?\97\00C\94\fd\00\0d\86\8c\001A\de\00\929\9d\00\ddp\8c\00\17\b7\e7\00\08\df;\00\157+\00\\\80\a0\00Z\80\93\00\10\11\92\00\0f\e8\d8\00l\80\af\00\db\ffK\008\90\0f\00Y\18v\00b\a5\15\00a\cb\bb\00\c7\89\b9\00\10@\bd\00\d2\f2\04\00Iu\'\00\eb\b6\f6\00\db\"\bb\00\n\14\aa\00\89&/\00d\83v\00\t;3\00\0e\94\1a\00Q:\aa\00\1d\a3\c2\00\af\ed\ae\00\\&\12\00m\c2M\00-z\9c\00\c0V\97\00\03?\83\00\t\f0\f6\00+@\8c\00m1\99\009\b4\07\00\0c \15\00\d8\c3[\00\f5\92\c4\00\c6\adK\00N\ca\a5\00\a77\cd\00\e6\a96\00\ab\92\94\00\ddBh\00\19c\de\00v\8c\ef\00h\8bR\00\fc\db7\00\ae\a1\ab\00\df\151\00\00\ae\a1\00\0c\fb\da\00dMf\00\ed\05\b7\00)e0\00WV\bf\00G\ff:\00j\f9\b9\00u\be\f3\00(\93\df\00\ab\800\00f\8c\f6\00\04\cb\15\00\fa\"\06\00\d9\e4\1d\00=\b3\a4\00W\1b\8f\006\cd\t\00NB\e9\00\13\be\a4\003#\b5\00\f0\aa\1a\00Oe\a8\00\d2\c1\a5\00\0b?\0f\00[x\cd\00#\f9v\00{\8b\04\00\89\17r\00\c6\a6S\00on\e2\00\ef\eb\00\00\9bJX\00\c4\da\b7\00\aaf\ba\00v\cf\cf\00\d1\02\1d\00\b1\f1-\00\8c\99\c1\00\c3\adw\00\86H\da\00\f7]\a0\00\c6\80\f4\00\ac\f0/\00\dd\ec\9a\00?\\\bc\00\d0\dem\00\90\c7\1f\00*\db\b6\00\a3%:\00\00\af\9a\00\adS\93\00\b6W\04\00)-\b4\00K\80~\00\da\07\a7\00v\aa\0e\00{Y\a1\00\16\12*\00\dc\b7-\00\fa\e5\fd\00\89\db\fe\00\89\be\fd\00\e4vl\00\06\a9\fc\00>\80p\00\85n\15\00\fd\87\ff\00(>\07\00ag3\00*\18\86\00M\bd\ea\00\b3\e7\af\00\8fmn\00\95g9\001\bf[\00\84\d7H\000\df\16\00\c7-C\00%a5\00\c9p\ce\000\cb\b8\00\bfl\fd\00\a4\00\a2\00\05l\e4\00Z\dd\a0\00!oG\00b\12\d2\00\b9\\\84\00paI\00kV\e0\00\99R\01\00PU7\00\1e\d5\b7\003\f1\c4\00\13n_\00]0\e4\00\85.\a9\00\1d\b2\c3\00\a126\00\08\b7\a4\00\ea\b1\d4\00\16\f7!\00\8fi\e4\00\'\ffw\00\0c\03\80\00\8d@-\00O\cd\a0\00 \a5\99\00\b3\a2\d3\00/]\n\00\b4\f9B\00\11\da\cb\00}\be\d0\00\9b\db\c1\00\ab\17\bd\00\ca\a2\81\00\08j\\\00.U\17\00\'\00U\00\7f\14\f0\00\e1\07\86\00\14\0bd\00\96A\8d\00\87\be\de\00\da\fd*\00k%\b6\00{\894\00\05\f3\fe\00\b9\bf\9e\00hjO\00J*\a8\00O\c4Z\00-\f8\bc\00\d7Z\98\00\f4\c7\95\00\0dM\8d\00 :\a6\00\a4W_\00\14?\b1\00\808\95\00\cc \01\00q\dd\86\00\c9\de\b6\00\bf`\f5\00Me\11\00\01\07k\00\8c\b0\ac\00\b2\c0\d0\00QUH\00\1e\fb\0e\00\95r\c3\00\a3\06;\00\c0@5\00\06\dc{\00\e0E\cc\00N)\fa\00\d6\ca\c8\00\e8\f3A\00|d\de\00\9bd\d8\00\d9\be1\00\a4\97\c3\00wX\d4\00i\e3\c5\00\f0\da\13\00\ba:<\00F\18F\00Uu_\00\d2\bd\f5\00n\92\c6\00\ac.]\00\0eD\ed\00\1c>B\00a\c4\87\00)\fd\e9\00\e7\d6\f3\00\"|\ca\00o\915\00\08\e0\c5\00\ff\d7\8d\00nj\e2\00\b0\fd\c6\00\93\08\c1\00|]t\00k\ad\b2\00\cdn\9d\00>r{\00\c6\11j\00\f7\cf\a9\00)s\df\00\b5\c9\ba\00\b7\00Q\00\e2\b2\0d\00t\ba$\00\e5}`\00t\d8\8a\00\0d\15,\00\81\18\0c\00~f\94\00\01)\16\00\9fzv\00\fd\fd\be\00VE\ef\00\d9~6\00\ec\d9\13\00\8b\ba\b9\00\c4\97\fc\001\a8\'\00\f1n\c3\00\94\c56\00\d8\a8V\00\b4\a8\b5\00\cf\cc\0e\00\12\89-\00oW4\00,V\89\00\99\ce\e3\00\d6 \b9\00k^\aa\00>*\9c\00\11_\cc\00\fd\0bJ\00\e1\f4\fb\00\8e;m\00\e2\86,\00\e9\d4\84\00\fc\b4\a9\00\ef\ee\d1\00.5\c9\00/9a\008!D\00\1b\d9\c8\00\81\fc\n\00\fbJj\00/\1c\d8\00S\b4\84\00N\99\8c\00T\"\cc\00*U\dc\00\c0\c6\d6\00\0b\19\96\00\1ap\b8\00i\95d\00&Z`\00?R\ee\00\7f\11\0f\00\f4\b5\11\00\fc\cb\f5\004\bc-\004\bc\ee\00\e8]\cc\00\dd^`\00g\8e\9b\00\923\ef\00\c9\17\b8\00aX\9b\00\e1W\bc\00Q\83\c6\00\d8>\10\00\ddqH\00-\1c\dd\00\af\18\a1\00!,F\00Y\f3\d7\00\d9z\98\00\9eT\c0\00O\86\fa\00V\06\fc\00\e5y\ae\00\89\"6\008\ad\"\00g\93\dc\00U\e8\aa\00\82&8\00\ca\e7\9b\00Q\0d\a4\00\993\b1\00\a9\d7\0e\00i\05H\00e\b2\f0\00\7f\88\a7\00\88L\97\00\f9\d16\00!\92\b3\00{\82J\00\98\cf!\00@\9f\dc\00\dcGU\00\e1t:\00g\ebB\00\fe\9d\df\00^\d4_\00{g\a4\00\ba\acz\00U\f6\a2\00+\88#\00A\baU\00Yn\08\00!*\86\009G\83\00\89\e3\e6\00\e5\9e\d4\00I\fb@\00\ffV\e9\00\1c\0f\ca\00\c5Y\8a\00\94\fa+\00\d3\c1\c5\00\0f\c5\cf\00\dbZ\ae\00G\c5\86\00\85Cb\00!\86;\00,y\94\00\10a\87\00*L{\00\80,\1a\00C\bf\12\00\88&\90\00x<\89\00\a8\c4\e4\00\e5\db{\00\c4:\c2\00&\f4\ea\00\f7g\8a\00\0d\92\bf\00e\a3+\00=\93\b1\00\bd|\0b\00\a4Q\dc\00\'\ddc\00i\e1\dd\00\9a\94\19\00\a8)\95\00h\ce(\00\t\ed\b4\00D\9f \00N\98\ca\00p\82c\00~|#\00\0f\b92\00\a7\f5\8e\00\14V\e7\00!\f1\08\00\b5\9d*\00o~M\00\a5\19Q\00\b5\f9\ab\00\82\df\d6\00\96\dda\00\166\02\00\c4:\9f\00\83\a2\a1\00r\edm\009\8dz\00\82\b8\a9\00k2\\\00F\'[\00\004\ed\00\d2\00w\00\fc\f4U\00\01YM\00\e0q\80\00")
(data (i32.const 10976) "\00\00\00@\fb!\f9?\00\00\00\00-Dt>\00\00\00\80\98F\f8<\00\00\00`Q\ccx;\00\00\00\80\83\1b\f09\00\00\00@ %z8\00\00\00\80\"\82\e36\00\00\00\00\1d\f3i5")
(data (i32.const 11080) "failed to allocate pages\00message 8\00")
(data (i32.const 11120) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 11200) "%llu\00message 16\00")
(data (i32.const 11216) "message 6\00")
(data (i32.const 11226) "message 32\00")
(data (i32.const 11237) "null\00")
(data (i32.const 11242) "%s|%s|%s|%s|%s|%s\00")
(data (i32.const 11260) "message 40\00")
(data (i32.const 11271) "message 41\00")
(data (i32.const 11282) "canceled offer id: \00")
(data (i32.const 11302) "memo has more than 256 bytes\00")
(data (i32.const 11331) "message 35\00")
(data (i32.const 11342) "message 2\00")
(data (i32.const 11352) "message 9\00")
(data (i32.const 11362) "message 1\00")
(data (i32.const 11372) "message 13\00")
(data (i32.const 11383) "for minted property\00")
(data (i32.const 11403) "message 3\00")
(data (i32.const 11413) "message 7\00")
(data (i32.const 11423) "message 5\00")
(data (i32.const 11433) "cleancoords\00")
(data (i32.const 11445) "a3\00")
(data (i32.const 11448) "message 36\00")
(data (i32.const 11459) "message 37\00")
(data (i32.const 11470) "message 38\00")
(data (i32.const 11481) "message 39\00")
(data (i32.const 11492) "message 29\00")
(data (i32.const 11503) "message 44\00")
(data (i32.const 11514) "message 11\00")
(data (i32.const 11525) "message 15\00")
(data (i32.const 11536) "message 30\00")
(data (i32.const 11547) "message 12\00")
(data (i32.const 11558) "message 24\00")
(data (i32.const 11569) "message 25\00")
(data (i32.const 11580) "earning for sold property\00")
(data (i32.const 11606) "fees for buy action\00")
(data (i32.const 11626) "message 31\00")
(data (i32.const 11637) "message 43\00")
(data (i32.const 11648) "message 22\00")
(data (i32.const 11659) "message 20\00")
(data (i32.const 11670) "message 45\00")
(data (i32.const 11681) "message 17\00")
(data (i32.const 11692) "message 18\00")
(data (i32.const 11703) "message 21\00")
(data (i32.const 11714) "message 23\00")
(data (i32.const 11725) "message 26\00")
(data (i32.const 11736) "offer id: \00")
(data (i32.const 11747) "fees from accepted offer\00")
(data (i32.const 11772) "message 28\00")
(data (i32.const 11783) "message 27\00")
(data (i32.const 11794) "messgae 4\00")
(data (i32.const 11804) "message 33\00")
(data (i32.const 11815) "yield\00")
(data (i32.const 11821) "message 34\00")
(data (i32.const 11832) "transfer rejected\00")
(data (i32.const 11850) "missing authority\00")
(data (i32.const 11868) "message 42\00")
(data (i32.const 11879) "withdrawing\00")
(data (i32.const 11891) "UPX\00")
(data (i32.const 11896) "|.\00\00")
(data (i32.const 11900) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 11933) "%lld%s%s %s\00")
(data (i32.const 11945) ".\00")
(data (i32.const 11948) "write\00")
(data (i32.const 11954) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 12003) "invalid symbol name\00")
(data (i32.const 12023) "string is too long to be a valid name\00")
(data (i32.const 12061) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 12128) "character is not in allowed character set for names\00")
(data (i32.const 12180) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 12239) "string is too long to be a valid symbol_code\00")
(data (i32.const 12284) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 12337) "error reading iterator\00")
(data (i32.const 12360) "cannot pass end iterator to erase\00")
(data (i32.const 12394) "cannot increment end iterator\00")
(data (i32.const 12424) "object passed to erase is not in multi_index\00")
(data (i32.const 12469) "cannot erase objects in table of another contract\00")
(data (i32.const 12519) "attempt to remove object that was not in multi_index\00")
(data (i32.const 12572) "cannot pass end iterator to modify\00")
(data (i32.const 12607) "object passed to modify is not in multi_index\00")
(data (i32.const 12653) "cannot modify objects in table of another contract\00")
(data (i32.const 12704) "updater cannot change primary key when modifying an object\00")
(data (i32.const 12763) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 12814) "read\00")
(data (i32.const 12819) "cannot create objects in table of another contract\00")
(data (i32.const 12870) "next primary key in table is at autoincrement limit\00")
(data (i32.const 12922) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 12976) "cannot decrement iterator at beginning of table\00")
(data (i32.const 13024) "\03\00\00\00\04\00\00\00")
(data (i32.const 13032) "\05\00\00\00\06\00\00\00")
(data (i32.const 13040) "attempt to add asset with different symbol\00")
(data (i32.const 13083) "addition underflow\00")
(data (i32.const 13102) "addition overflow\00")
(data (i32.const 13120) "attempt to subtract asset with different symbol\00")
(data (i32.const 13168) "subtraction underflow\00")
(data (i32.const 13190) "subtraction overflow\00")
(data (i32.const 13211) "get\00")
(data (i32.const 13215) "invalid variant index\00")
(data (i32.const 0) "\b83\00\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "abort" (func $fimport$1))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$5 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$8 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$11 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$15 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$16 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$18 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$19 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$21 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$22 (param i64 i64) (result i32)))
(import "env" "prints" (func $fimport$23 (param i32)))
(import "env" "send_inline" (func $fimport$24 (param i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$27 (param i64)))
(import "env" "is_account" (func $fimport$28 (param i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$30 (result i64)))
(import "env" "cancel_deferred" (func $fimport$31 (param i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$32 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$33 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$34 (param i32 i32) (result i32)))
(import "env" "set_proposed_producers" (func $fimport$35 (param i32 i32) (result i64)))
(import "env" "current_time" (func $fimport$36 (result i64)))
(import "env" "get_active_producers" (func $fimport$37 (param i32 i32) (result i32)))
(import "env" "send_deferred" (func $fimport$38 (param i32 i64 i32 i32 i32)))
(import "env" "db_idx64_store" (func $fimport$39 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$40 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_next" (func $fimport$41 (param i32 i32) (result i32)))
(import "env" "has_auth" (func $fimport$42 (param i64) (result i32)))
(import "env" "action_data_size" (func $fimport$43 (result i32)))
(import "env" "read_action_data" (func $fimport$44 (param i32 i32) (result i32)))
(import "env" "eosio_assert_code" (func $fimport$45 (param i32 i64)))
(import "env" "db_get_i64" (func $fimport$46 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$47 (param i32)))
(import "env" "db_update_i64" (func $fimport$48 (param i32 i64 i32 i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$49 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$50 (param i32)))
(import "env" "db_idx64_update" (func $fimport$51 (param i32 i64 i32)))
(import "env" "db_previous_i64" (func $fimport$52 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$53 (param i64 i64 i64) (result i32)))
(export "apply" (func $1))
(table $0 7 7 anyfunc)
(elem (i32.const 1) $28 $30 $178 $179 $180 $181)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 13237))
(global $global$2 i32 (i32.const 13237))


int_32 .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [12814])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [12814])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [16])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [12814])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $3, [8])
	*(($2 = ($0 + [4]))) = (*($2) + [8])
	return $0
}

int_64 .FUNC $6 (float_64 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	float_64 $4
	$1 = ($global$0 - [16])
	if ( ((float_64)$0 == (float_64)(float_64)0) ){ goto $label$1 }
	$2 = (CASTING int_64)(float_64 $0)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$3) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = (float_64))(( ((float_64)((float_64)$0 + (float_64)(float_64)-4503599627370496) + (float_64)(float_64)4503599627370496) ? ((float_64)((float_64)$0 + (float_64)(float_64)4503599627370496) + (float_64)(float_64)-4503599627370496) : ((int_64)$2 < (int_64)0) ) - $0)
	if ( ((uint_32)$3 > (uint_32)[1022]) ){ goto $label$2 }
	*($1 + [8]) = $4
	return (CASTING float_64)(int_32 (CASTING uint_32)(uint_64 (int_64)$2 >> (int_64)63)))
	
.LABEL $label$2
	$0 = ((float_64)$4 + (float_64)$0)
	if ( ((int_32)((float_64)$4 > (float_64)(float_64)0) ^ (int_32)[1]) ){ goto $label$1 }
	$0 = ((float_64)$0 + (float_64)(float_64)-1)
	
.LABEL $label$1
	return $0
}

void .FUNC $176 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $17(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $19($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $19($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $177 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11948])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11948])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11948])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [8])
	$3 = (*($4) + [8])
	*(($4 = ($0 + [4]))) = $3
	$7 = *(($1 + [40]))
	
.LOOP $label$4:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [24]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert([0], [11948])
	$3 = *($4)
	
.LABEL $label$5
	CALL memcpy($3, ($2 + [24]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$4 }
	*($2 + [8]) = $0
	$3 = *(($1 + [40]))
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$6 }
	*($2 + [16]) = ($2 + [8])
	*($2 + [24]) = *([0] + [13032])
	CALL void ($2 + [16])((int_32 ($1 + [24])), (int_32 *((($2 + [24]) + ($3 << [2])))))
	$5 = ($1 + [48])
	$3 = ($0 + [4])
	$4 = *($3)
	if ( ((int_32)(*(($0 + [8])) - $4) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [11948])
	$4 = *($3)
	
.LABEL $label$7
	CALL memcpy($4, $5, [8])
	*($3) = (*($3) + [8])
	$global$0 = ($2 + [32])
	return $0
	
.LABEL $label$6
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $170 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11948])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11948])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11948])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *(($1 + [24]))
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11948])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [32])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11948])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [40])
	if ( ((int_32)(*(($0 + [8])) - $4) > (int_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [11948])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy($4, $5, [4])
	*($3) = (*($3) + [4])
	$0 = CALL $171($0, ($1 + [44]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $171 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [11948])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$3 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11948])
	$4 = *($7)
	
.LABEL $label$5
	CALL memcpy($4, $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $172 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($3 - $2)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$8 }
	$6 = *($0 + [4])
	$4 = *($0 + [8])
	$5 = int_32($4 >> [3])
	if ( ((int_32)$5 <= (int_32)int_32(($4 - $6) >> [3])) ){ goto $label$7 }
	$7 = *($0)
	$6 = (int_32(($6 - $7) >> [3]) + $5)
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	$5 = ($4 - $7)
	if ( ((uint_32)int_32($5 >> [3]) >= (uint_32)[268435455]) ){ goto $label$6 }
	$4 = int_32(($1 - $7) >> [3])
	$7 = int_32($5 >> [2])
	$6 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ($6 <= [536870912]) ){ goto $label$5 }
	CALL abort()
	
.LABEL $label$8
	return $1
	
.LABEL $label$7
	$8 = ($6 - $1)
	$4 = int_32($8 >> [3])
	if ( ((int_32)$5 <= (int_32)$4) ){ goto $label$10 }
	$7 = $6
	$9 = ($2 + ($4 << [3]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$11 }
	$10 = (($3 + [-8]) - $9)
	$4 = $6
	$7 = $9
	
.LOOP $label$12:
	*($4) = *($7)
	$4 = ($4 + [8])
	$7 = ($7 + [8])
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$12 }
	$7 = (($6 + ($10 & [-8])) + [8])
	*(($0 + [4])) = $7
	
.LABEL $label$11
	if ( ((int_32)$8 >= (int_32)[1]) ){ goto $label$9 }
	return $1
	
.LABEL $label$10
	$7 = $6
	$9 = $3
	
.LABEL $label$9
	$4 = ($5 << [3])
	$5 = ($7 - ($1 + $4))
	$8 = int_32($5 >> [3])
	$4 = ($7 - $4)
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$13 }
	$10 = uint_32((($6 - ($8 << [3])) + ((int_32)$1 ^ (int_32)[-1])) >> [3])
	$3 = $7
	
.LOOP $label$14:
	*($3) = *($4)
	$3 = ($3 + [8])
	$4 = ($4 + [8])
	if ( ($4 <= $6) ){ goto $label$14 }
	*(($0 + [4])) = (($7 + ($10 << [3])) + [8])
	
.LABEL $label$13
	if ( ($5 == 0) ){ goto $label$15 }
	CALL memmove(($7 - ($8 << [3])), $1, $5)
	
.LABEL $label$15
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$4 }
	$3 = ($9 - $2)
	$4 = [0]
	
.LOOP $label$16:
	*(($1 + $4)) = *(($2 + $4))
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$16 }
	return $1
	
.LABEL $label$6
	$4 = int_32(($1 - $7) >> [3])
	$6 = [536870911]
	
.LABEL $label$5
	$5 = CALL $17(($6 << [3]))
	goto $label$1 
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$7 = ($5 + ($4 << [3]))
	$4 = $7
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$17 }
	$9 = uint_32((($3 + [-8]) - $2) >> [3])
	$4 = $7
	
.LOOP $label$18:
	*($4) = *($2)
	$4 = ($4 + [8])
	$2 = ($2 + [8])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$18 }
	$4 = (($7 + ($9 << [3])) + [8])
	
.LABEL $label$17
	$6 = ($6 << [3])
	$9 = *($0)
	$2 = ($1 - $9)
	$3 = ($7 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$19 }
	CALL memcpy($3, $9, $2)
	
.LABEL $label$19
	$6 = ($5 + $6)
	$5 = ($0 + [4])
	$2 = (*($5) - $1)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$20 }
	CALL memcpy($4, $1, $2)
	$4 = ($4 + $2)
	
.LABEL $label$20
	*($5) = $4
	$2 = *($0)
	*($0) = $3
	*(($0 + [8])) = $6
	if ( ($2 == 0) ){ goto $label$21 }
	CALL $19($2)
	
.LABEL $label$21
	(unreachable)
	(unreachable)
	return $7
}

int_32 .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	float_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	float_64 $24
	int_32 $25
	int_32 $26
	int_32 $27
	float_64 $28
	float_64 $29
	$5 = ($global$0 - [560])
	$global$0 = $5
	$6 = ((int_32)($2 + [-3]) / (int_32)[24])
	$7 = ( $6 ? [0] : ((int_32)$6 > (int_32)[0]) )
	$8 = ($2 + ((int_32)$7 * (int_32)[-24]))
	$2 = ($3 + [-1])
	$9 = *((($4 << [2]) + [8192]))
	if ( ((int_32)($9 + $2) < (int_32)[0]) ){ goto $label$1 }
	$10 = ($9 + $3)
	$2 = ($7 - $2)
	$11 = (((($7 + [1]) - $3) << [2]) + [8208])
	$6 = ($5 + [320])
	
.LOOP $label$2:
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$12 = (CASTING float_64)(int_32 *($11))
	goto $label$3 
	
.LABEL $label$4
	$12 = (float_64)0
	
.LABEL $label$3
	*($6) = $12
	$6 = ($6 + [8])
	$11 = ($11 + [4])
	$2 = ($2 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$2 }
	
.LABEL $label$1
	$13 = ($8 + [-24])
	if ( ((int_32)$3 <= (int_32)[0]) ){ goto $label$6 }
	$14 = ((($5 + [320]) + ($3 << [3])) + [-8])
	$10 = [0]
	
.LOOP $label$7:
	$12 = (float_64)0
	$2 = $0
	$11 = $3
	$6 = $14
	
.LOOP $label$8:
	$12 = ((float_64)$12 + (float_64)((float_64)*($2) * (float_64)*($6)))
	$2 = ($2 + [8])
	$6 = ($6 + [-8])
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$8 }
	*(($5 + ($10 << [3]))) = $12
	$14 = ($14 + [8])
	$2 = ((int_32)$10 < (int_32)$9)
	$10 = ($10 + [1])
	if ( $2 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$6 = [-1]
	$2 = $5
	
.LOOP $label$9:
	*($2) = (int_64)0
	$2 = ($2 + [8])
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$5
	$15 = ([23] - $13)
	$16 = ([24] - $13)
	$17 = ((($5 + [480]) + ($9 << [2])) + [-4])
	$18 = ($5 | [8])
	$19 = (($5 + [480]) + [-4])
	$20 = ($5 + [-8])
	$21 = ((int_32)$3 > (int_32)[0])
	$11 = $9
	
.LOOP $label$10:
	$22 = ($11 << [3])
	$12 = *(($5 + $22))
	$23 = ((int_32)$11 < (int_32)[1])
	if ( $23 ){ goto $label$11 }
	$10 = ($11 + [1])
	$2 = ($20 + $22)
	$6 = ($5 + [480])
	
.LOOP $label$12:
	$24 = (Rounds 0)(((float_64)$12 * (float_64)(float_64)5.9604644775390625e-08))
	$12 = ((float_64)$12 + (float_64)((float_64)$24 * (float_64)(float_64)-16777216))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)2147483648) ){ goto $label$14 }
	$14 = [-2147483648]
	goto $label$13 
	
.LABEL $label$14
	$14 = (CASTING int_32)(float_64 $12)
	
.LABEL $label$13
	*($6) = $14
	$6 = ($6 + [4])
	$12 = ((float_64)*($2) + (float_64)$24)
	$2 = ($2 + [-8])
	$10 = ($10 + [-1])
	if ( ((int_32)$10 > (int_32)[1]) ){ goto $label$12 }
	
.LABEL $label$11
	$12 = CALL $5($12, $13)
	$12 = ((float_64)$12 + (float_64)((float_64)CALL $6(((float_64)$12 * (float_64)(float_64)0.125)) * (float_64)(float_64)-8))
	$24 = (Rounds 0)($12)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)2147483648) ){ goto $label$23 }
	$25 = [-2147483648]
	$12 = (float_64))($12 - $24)
	$26 = ((int_32)$13 < (int_32)[1])
	if ( ($26 == 0) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$25 = (CASTING int_32)(float_64 $12)
	$12 = (float_64))($12 - $24)
	$26 = ((int_32)$13 < (int_32)[1])
	if ( $26 ){ goto $label$21 }
	
.LABEL $label$22
	$2 = int_32($2 >> $16)
	$2 = *($2)
	$6 = ($2 - ($2 << $16))
	*(($2 = ((($5 + [480]) + ($11 << [2])) + [-4]))) = $6
	$25 = ($2 + $25)
	$27 = int_32($6 >> $15)
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	if ( ($13 == 0) ){ goto $label$24 }
	$27 = [2]
	if ( (((int_32)((float_64)$12 >= (float_64)(float_64)0.5) ^ (int_32)[1]) == 0) ){ goto $label$20 }
	$27 = [0]
	if ( ((float_64)$12 != (float_64)(float_64)0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$24
	$27 = int_32(*(((($5 + [480]) + ($11 << [2])) + [-4])) >> [23])
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$19 }
	
.LABEL $label$20
	if ( $23 ){ goto $label$26 }
	$23 = [0]
	$2 = ($5 + [480])
	$14 = $11
	
.LOOP $label$27:
	$6 = *($2)
	$10 = [16777215]
	if ( $23 ){ goto $label$29 }
	if ( ($6 == 0) ){ goto $label$28 }
	$23 = [1]
	$10 = [16777216]
	
.LABEL $label$29
	*($2) = ($10 - $6)
	$2 = ($2 + [4])
	$14 = ($14 + [-1])
	if ( $14 ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$28
	$23 = [0]
	$2 = ($2 + [4])
	$14 = ($14 + [-1])
	if ( $14 ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$23 = [0]
	
.LABEL $label$25
	if ( $26 ){ goto $label$32 }
	if ( ((int_32)$13 == (int_32)[2]) ){ goto $label$31 }
	if ( ((int_32)$13 != (int_32)[1]) ){ goto $label$32 }
	*(($2 = ((($5 + [480]) + ($11 << [2])) + [-4]))) = (*($2) & [8388607])
	
.LABEL $label$32
	$25 = ($25 + [1])
	if ( ((int_32)$27 != (int_32)[2]) ){ goto $label$19 }
	goto $label$30 
	
.LABEL $label$31
	*(($2 = ((($5 + [480]) + ($11 << [2])) + [-4]))) = (*($2) & [4194303])
	$25 = ($25 + [1])
	if ( ((int_32)$27 != (int_32)[2]) ){ goto $label$19 }
	
.LABEL $label$30
	$12 = (float_64))((float_64)1 - $12)
	$27 = [2]
	if ( ($23 == 0) ){ goto $label$19 }
	$12 = (float_64)
	if ( ((float_64)$12($12 - CALL $5((float_64)1, $13))) == (float_64)(float_64)0) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((float_64)$12 == (float_64)(float_64)0) ){ goto $label$17 }
	
.LABEL $label$18
	$12 = CALL $5($12, ([0] - $13))
	if ( (((int_32)((float_64)$12 >= (float_64)(float_64)16777216) ^ (int_32)[1]) == 0) ){ goto $label$37 }
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)2147483648) ){ goto $label$36 }
	$2 = [-2147483648]
	goto $label$33 
	
.LABEL $label$37
	$2 = (($5 + [480]) + ($11 << [2]))
	$24 = ((float_64)$12 * (float_64)(float_64)5.9604644775390625e-08)
	$12 = ((float_64)$12 + (float_64)((float_64)(Rounds 0)($24) * (float_64)(float_64)-16777216))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)2147483648) ){ goto $label$35 }
	$6 = [-2147483648]
	goto $label$34 
	
.LABEL $label$36
	$2 = (CASTING int_32)(float_64 $12)
	goto $label$33 
	
.LABEL $label$35
	$6 = (CASTING int_32)(float_64 $12)
	
.LABEL $label$34
	*($2) = $6
	$11 = ($11 + [1])
	if ( ((float_64)(float_64)|$24| < (float_64)(float_64)2147483648) ){ goto $label$39 }
	$2 = [-2147483648]
	goto $label$38 
	
.LABEL $label$39
	$2 = (CASTING int_32)(float_64 $24)
	
.LABEL $label$38
	$13 = $8
	
.LABEL $label$33
	*((($5 + [480]) + ($11 << [2]))) = $2
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$11 <= (int_32)$9) ){ goto $label$41 }
	$2 = ($19 + ($11 << [2]))
	$6 = [0]
	$10 = $11
	
.LOOP $label$42:
	$6 = (*($2) | $6)
	$2 = ($2 + [-4])
	$10 = ($10 + [-1])
	if ( ((int_32)$10 > (int_32)$9) ){ goto $label$42 }
	if ( $6 ){ goto $label$40 }
	
.LABEL $label$41
	$2 = $17
	$14 = $11
	
.LOOP $label$43:
	$14 = ($14 + [1])
	$6 = *($2)
	$2 = ($2 + [-4])
	if ( ($6 == 0) ){ goto $label$43 }
	if ( ($21 == 0) ){ goto $label$44 }
	$2 = ($11 + [1])
	$23 = (($5 + [320]) + (($3 + $11) << [3]))
	
.LOOP $label$45:
	$10 = $2
	*((($5 + [320]) + (($11 + $3) << [3]))) = (CASTING float_64)(int_32 *(((($10 + $7) << [2]) + [8208])))
	$12 = (float_64)0
	$2 = $0
	$6 = $23
	$11 = $3
	
.LOOP $label$46:
	$12 = ((float_64)$12 + (float_64)((float_64)*($2) * (float_64)*($6)))
	$2 = ($2 + [8])
	$6 = ($6 + [-8])
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$46 }
	*(($5 + ($10 << [3]))) = $12
	$23 = ($23 + [8])
	$2 = ($10 + [1])
	$11 = $10
	if ( ((int_32)$10 < (int_32)$14) ){ goto $label$45 }
	goto $label$15 
	
.LABEL $label$44
	$2 = ($18 + $22)
	$6 = ((($7 + $11) << [2]) + [8212])
	$10 = (($5 + [320]) + (($3 + $11) << [3]))
	
.LOOP $label$47:
	*($2) = (int_64)0
	*($10) = (CASTING float_64)(int_32 *($6))
	$6 = ($6 + [4])
	$2 = ($2 + [8])
	$10 = ($10 + [8])
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)$14) ){ goto $label$47 }
	$11 = $14
	goto $label$10 
	
.LABEL $label$40
	$2 = ((($5 + [480]) + ($11 << [2])) + [-4])
	
.LOOP $label$48:
	$11 = ($11 + [-1])
	$13 = ($13 + [-24])
	$6 = *($2)
	$2 = ($2 + [-4])
	if ( ($6 == 0) ){ goto $label$48 }
	
.LABEL $label$16
	$12 = CALL $5((float_64)1, $13)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$49 }
	$10 = ($11 + [1])
	$2 = ($5 + ($11 << [3]))
	$6 = (($5 + [480]) + ($11 << [2]))
	
.LOOP $label$50:
	*($2) = ((float_64)$12 * (float_64)(CASTING float_64)(int_32 *($6)))
	$2 = ($2 + [-8])
	$6 = ($6 + [-4])
	$12 = ((float_64)$12 * (float_64)(float_64)5.9604644775390625e-08)
	$10 = ($10 + [-1])
	if ( ((int_32)$10 > (int_32)[0]) ){ goto $label$50 }
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$49 }
	$14 = ($5 + ($11 << [3]))
	$2 = $11
	
.LOOP $label$51:
	$3 = $2
	$23 = ($11 - $3)
	$12 = (float_64)0
	$2 = [0]
	$6 = [0]
	
.LOOP $label$53:
	$12 = ((float_64)$12 + (float_64)((float_64)*(($2 + [10976])) * (float_64)*(($14 + $2))))
	if ( ((int_32)$6 >= (int_32)$9) ){ goto $label$52 }
	$2 = ($2 + [8])
	$10 = ($6 <= $23)
	$6 = ($6 + [1])
	if ( $10 ){ goto $label$53 }
	
.LABEL $label$52
	*((($5 + [160]) + ($23 << [3]))) = $12
	$14 = ($14 + [-8])
	$2 = ($3 + [-1])
	if ( ((int_32)$3 > (int_32)[0]) ){ goto $label$51 }
	
.LABEL $label$49
	if ( (($4 + [-1]) <= [2]) ){ goto $label$61 }
	if ( ($4 == 0) ){ goto $label$60 }
	if ( ((int_32)$4 != (int_32)[3]) ){ goto $label$54 }
	$28 = (float_64)0
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$62 }
	$6 = ($11 + [1])
	$10 = (($5 + [160]) + ($11 << [3]))
	$2 = ($10 + [-8])
	$12 = *($10)
	
.LOOP $label$63:
	$29 = *($2)
	$24 = ((float_64)$29 + (float_64)$12)
	*($2) = $24
	*(($2 + [8])) = ((float_64)$12 + (float_64)(float_64))($29 - $24))
	$2 = ($2 + [-8])
	$12 = $24
	$6 = ($6 + [-1])
	if ( ((int_32)$6 > (int_32)[1]) ){ goto $label$63 }
	if ( ((int_32)$11 < (int_32)[2]) ){ goto $label$62 }
	$6 = ($11 + [1])
	$10 = (($5 + [160]) + ($11 << [3]))
	$2 = ($10 + [-8])
	$12 = *($10)
	
.LOOP $label$64:
	$29 = *($2)
	$24 = ((float_64)$29 + (float_64)$12)
	*($2) = $24
	*(($2 + [8])) = ((float_64)$12 + (float_64)(float_64))($29 - $24))
	$2 = ($2 + [-8])
	$12 = $24
	$6 = ($6 + [-1])
	if ( ((int_32)$6 > (int_32)[2]) ){ goto $label$64 }
	if ( ((int_32)$11 < (int_32)[2]) ){ goto $label$62 }
	$6 = ($11 + [1])
	$2 = (($5 + [160]) + ($11 << [3]))
	$28 = (float_64)0
	
.LOOP $label$65:
	$28 = ((float_64)$28 + (float_64)*($2))
	$2 = ($2 + [-8])
	$6 = ($6 + [-1])
	if ( ((int_32)$6 > (int_32)[2]) ){ goto $label$65 }
	
.LABEL $label$62
	$12 = *($5 + [160])
	if ( ($27 == 0) ){ goto $label$57 }
	*($1) = !(float_64)$12
	*($1 + [8]) = !(float_64)*($5 + [168])
	*($1 + [16]) = !(float_64)$28
	goto $label$54 
	
.LABEL $label$61
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$59 }
	$6 = ($11 + [1])
	$2 = (($5 + [160]) + ($11 << [3]))
	$12 = (float_64)0
	
.LOOP $label$66:
	$12 = ((float_64)$12 + (float_64)*($2))
	$2 = ($2 + [-8])
	$6 = ($6 + [-1])
	if ( ((int_32)$6 > (int_32)[0]) ){ goto $label$66 }
	goto $label$58 
	
.LABEL $label$60
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$56 }
	$6 = ($11 + [1])
	$2 = (($5 + [160]) + ($11 << [3]))
	$12 = (float_64)0
	
.LOOP $label$67:
	$12 = ((float_64)$12 + (float_64)*($2))
	$2 = ($2 + [-8])
	$6 = ($6 + [-1])
	if ( ((int_32)$6 > (int_32)[0]) ){ goto $label$67 }
	goto $label$55 
	
.LABEL $label$59
	$12 = (float_64)0
	
.LABEL $label$58
	*($1) = ( !(float_64)$12 ? $12 : $27 )
	$12 = (float_64))(*($5 + [160]) - $12)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$68 }
	$2 = (($5 + [160]) | [8])
	
.LOOP $label$69:
	$12 = ((float_64)$12 + (float_64)*($2))
	$2 = ($2 + [8])
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$69 }
	
.LABEL $label$68
	*($1 + [8]) = ( !(float_64)$12 ? $12 : $27 )
	goto $label$54 
	
.LABEL $label$57
	*($1) = $12
	*($1 + [8]) = *($5 + [168])
	*($1 + [16]) = $28
	goto $label$54 
	
.LABEL $label$56
	$12 = (float_64)0
	
.LABEL $label$55
	*($1) = ( !(float_64)$12 ? $12 : $27 )
	
.LABEL $label$54
	$global$0 = ($5 + [560])
	return ($25 & [7])
	
.LABEL $label$15
	$11 = $14
	return goto $label$10
}

void .FUNC $178 (int_32 $0, int_32 $1)
{
	*(($0 = *(*($0)))) = (*($0) + [8])
}

int_64 .FUNC $4 (float_64 $0, float_64 $1)
{
	float_64 $2
	float_64 $3
	float_64 $4
	$3 = ((float_64)$2 * (float_64)$2)
	$2 = ((float_64)$0 * (float_64)$0)
	$3 = ((float_64)$2 * (float_64)(float_64)0.5)
	$4 = (float_64)
	return ((float_64)$4((float_64)1 - $3)) + (float_64)((float_64)(float_64))((float_64))((float_64)1 - $4) - $3) + (float_64)(float_64))(((float_64)$2 * (float_64)((float_64)((float_64)$2 * (float_64)((float_64)((float_64)$2 * (float_64)((float_64)((float_64)$2 * (float_64)(float_64)2.480158728947673e-05) + (float_64)(float_64)-0.001388888888887411)) + (float_64)(float_64)0.0416666666666666)) + (float_64)((float_64)((float_64)$3 * (float_64)$3) * (float_64)((float_64)((float_64)$2 * (float_64)((float_64)((float_64)$2 * (float_64)(float_64)-1.1359647557788195e-11) + (float_64)(float_64)2.087572321298175e-09)) + (float_64)(float_64)-2.7557314351390663e-07)))) - ((float_64)$0 * (float_64)$1))))
}

int_64 .FUNC $5 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12607])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12653])
	
.LABEL $label$2
	$2 = *($2)
	if ( ((int_64)*($2 + [8]) == (int_64)*($1 + [8])) ){ goto $label$3 }
	CALL eosio_assert([0], [13040])
	
.LABEL $label$3
	$5 = ((int_64)*($1) + (int_64)*($2))
	*($1) = $5
	if ( ((int_64)$5 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [13083])
	$5 = *($1)
	
.LABEL $label$4
	if ( ((int_64)$5 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [13102])
	
.LABEL $label$5
	$2 = $3
	$3 = ($2 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	*($4 + [8]) = *(($1 + [8]))
	CALL memcpy(($2 + [-8]), ($4 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), (int_64)0, $3, [16])
	if ( ((int_64)*($0 + [16]) == (int_64)0) ){ goto $label$6 }
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$6
	*(($0 + [16])) = (int_64)1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $3 (float_64 $0)
{
	$0 = CALL $2($0)
	if ( ((float_64)(float_64)|$0| < (float_64)(float_64)2147483648) ){ goto $label$1 }
	return [-2147483648]
	
.LABEL $label$1
	return (CASTING int_32)(float_64 $0)
}

int_32 .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL $17([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $51($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $52(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $48 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	$6 = ($global$0 - [112])
	$global$0 = $6
	*($6 + [64]) = (int_64)-3000216042388586496
	*($6 + [56]) = *($0)
	*(($6 + [32])) = *(($4 + [8]))
	*($6 + [16]) = $3
	*($6 + [8]) = $2
	*($6 + [24]) = *($4)
	CALL $33((($6 + [8]) + [32]), $5)
	$4 = CALL $49(($6 + [72]), ($6 + [56]), $1, (int_64)-3617168760277827584, ($6 + [8]))
	CALL $50($4)
	$5 = *($4 + [28])
	if ( ($5 == 0) ){ goto $label$1 }
	*(($4 + [32])) = $5
	CALL $19($5)
	
.LABEL $label$1
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$2 }
	*(($4 + [20])) = $5
	CALL $19($5)
	
.LABEL $label$2
	if ( ((*($6 + [40]) & [1]) == 0) ){ goto $label$3 }
	CALL $19(*(($6 + [48])))
	
.LABEL $label$3
	$global$0 = ($6 + [112])
}

void .FUNC $0 ()
{
	CALL $13()
}

int_64 .FUNC $43 ()
{
	int_64 $0
	if ( (*([0] + [11068]) == 0) ){ goto $label$1 }
	return *([0] + [11072])
	
.LABEL $label$1
	$0 = CALL current_time()
	*([0] + [11068]) = [1]
	*([0] + [11072]) = $0
	return $0
}

void .FUNC $42 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_64 .FUNC $41 (float_64 $0)
{
	$0 = CALL $2($0)
	if ( ((float_64)(float_64)|$0| < (float_64)(float_64)9223372036854775808) ){ goto $label$1 }
	return (int_64)-9223372036854775808
	
.LABEL $label$1
	return (Rounds 0)($0)
}

void .FUNC $40 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $36(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $31(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [11200], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $36(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $36(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = ((int_64)$6 + (int_64)1)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$5 = ($5 & [255])
	$10 = ($2 - (($5 + [16]) & [496]))
	$2 = $10
	$global$0 = $2
	*(($11 = ($10 + $5))) = [0]
	$12 = *($1)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)( (int_64)-1 ? (int_64)1 : ((int_64)$12 < (int_64)0) ) * (int_64)((int_64)$12 % (int_64)$9))
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ($11 + [-1])
	
.LOOP $label$5:
	$13 = ((int_64)$8 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$13 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$8 = $13
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	$11 = ($2 - (($5 + [47]) & [496]))
	$global$0 = $11
	$14 = ( [11945] ? [11947] : *($10) )
	$9 = ((int_64)$12 / (int_64)$9)
	$15 = ($5 + [32])
	$8 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (int_64)($8) == 0) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	*((($3 + [41]) + ($1 = $5))) = $8
	$5 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [24]) = ($5 << [1])
	$2 = (($3 + [24]) | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [24]) = [0]
	$1 = (($3 + [24]) | [1])
	$5 = $1
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$2 = CALL $17($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $5
	
.LABEL $label$7
	$7 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$12:
	*(($2 + $1)) = *((($3 + [41]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$12 }
	$5 = ($2 + $5)
	$1 = (($3 + [24]) | [1])
	
.LABEL $label$6
	*($5) = [0]
	*(($3 + [16])) = ( *($3 + [32]) ? $1 : (*($3 + [24]) & [1]) )
	*($3 + [12]) = $10
	*($3 + [8]) = $14
	*($3) = $9
	CALL $31($11, $15, [11933], $3)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL $19(*(($3 + [32])))
	
.LABEL $label$13
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $25($11)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($1 + [16]) & [-16])
	$5 = CALL $17($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$16
	CALL memcpy($5, $11, $1)
	
.LABEL $label$15
	*(($5 + $1)) = [0]
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$14
	CALL $32($0)
}

void .FUNC $46 (int_64 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$6 = ($global$0 - [384])
	$global$0 = $6
	if ( ((int_64)$0 == (int_64)0) ){ goto $label$4 }
	$7 = [0]
	$8 = *([0] + [11896])
	
.LOOP $label$6:
	*((($6 + [128]) + ($9 = $7))) = *(($8 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$0 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$9 == (int_32)[12]) )))))
	$7 = ($9 + [1])
	if ( ((uint_32)$9 > (uint_32)[11]) ){ goto $label$5 }
	$0 = ((int_64)$0 << (int_64)5)
	if ( ((int_64)$0 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($6 + [120])) = [0]
	*($6 + [112]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$3 }
	*($6 + [112]) = ($7 << [1])
	$8 = (($6 + [112]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($6 + [120])) = [0]
	*($6 + [112]) = (int_64)0
	*($6 + [112]) = [0]
	$9 = (($6 + [112]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$10 = (($7 + [16]) & [-16])
	$8 = CALL $17($10)
	*($6 + [112]) = ($10 | [1])
	*($6 + [120]) = $8
	*($6 + [116]) = $7
	
.LABEL $label$2
	$10 = ($9 + [1])
	$9 = [0]
	
.LOOP $label$7:
	*(($8 + $9)) = *((($6 + [128]) + $9))
	$9 = ($9 + [1])
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$7 }
	$9 = ($8 + $7)
	
.LABEL $label$1
	$7 = [0]
	*($9) = [0]
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$11 }
	$8 = *([0] + [11896])
	
.LOOP $label$13:
	*((($6 + [128]) + ($9 = $7))) = *(($8 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$9 == (int_32)[12]) )))))
	$7 = ($9 + [1])
	if ( ((uint_32)$9 > (uint_32)[11]) ){ goto $label$12 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$13 }
	
.LABEL $label$12
	*(($6 + [104])) = [0]
	*($6 + [96]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$10 }
	*($6 + [96]) = ($7 << [1])
	$8 = (($6 + [96]) | [1])
	goto $label$9 
	
.LABEL $label$11
	*(($6 + [104])) = [0]
	*($6 + [96]) = (int_64)0
	*($6 + [96]) = [0]
	$9 = (($6 + [96]) | [1])
	goto $label$8 
	
.LABEL $label$10
	$10 = (($7 + [16]) & [-16])
	$8 = CALL $17($10)
	*($6 + [96]) = ($10 | [1])
	*($6 + [104]) = $8
	*($6 + [100]) = $7
	
.LABEL $label$9
	$10 = ($9 + [1])
	$9 = [0]
	
.LOOP $label$14:
	*(($8 + $9)) = *((($6 + [128]) + $9))
	$9 = ($9 + [1])
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$14 }
	$9 = ($8 + $7)
	
.LABEL $label$8
	*($9) = [0]
	CALL $40(($6 + [80]), $2)
	if ( (*($3 + [8]) == 0) ){ goto $label$32 }
	CALL $40(($6 + [64]), *($3))
	if ( (*($4 + [16]) == 0) ){ goto $label$31 }
	goto $label$28 
	
.LABEL $label$32
	*(($6 + [72])) = [0]
	*($6 + [64]) = (int_64)0
	$9 = CALL $25([11237])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$35 }
	*($6 + [64]) = ($9 << [1])
	$7 = (($6 + [64]) | [1])
	if ( $9 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$8 = (($9 + [16]) & [-16])
	$7 = CALL $17($8)
	*($6 + [64]) = ($8 | [1])
	*($6 + [72]) = $7
	*($6 + [68]) = $9
	
.LABEL $label$34
	CALL memcpy($7, [11237], $9)
	
.LABEL $label$33
	*(($7 + $9)) = [0]
	if ( *($4 + [16]) ){ goto $label$28 }
	
.LABEL $label$31
	*(($6 + [56])) = [0]
	*($6 + [48]) = (int_64)0
	$9 = CALL $25([11237])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$38 }
	*($6 + [48]) = ($9 << [1])
	$7 = (($6 + [48]) | [1])
	if ( $9 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$8 = (($9 + [16]) & [-16])
	$7 = CALL $17($8)
	*($6 + [48]) = ($8 | [1])
	*($6 + [56]) = $7
	*($6 + [52]) = $9
	
.LABEL $label$37
	CALL memcpy($7, [11237], $9)
	
.LABEL $label$36
	*(($7 + $9)) = [0]
	if ( *($5 + [8]) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$30
	CALL $32(($6 + [64]))
	
.LABEL $label$29
	CALL $32(($6 + [48]))
	
.LABEL $label$28
	CALL $47(($6 + [48]), $4)
	if ( (*($5 + [8]) == 0) ){ goto $label$26 }
	
.LABEL $label$27
	CALL $40(($6 + [32]), *($5))
	goto $label$25 
	
.LABEL $label$26
	*(($6 + [40])) = [0]
	*($6 + [32]) = (int_64)0
	$9 = CALL $25([11237])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$41 }
	*($6 + [32]) = ($9 << [1])
	$7 = (($6 + [32]) | [1])
	if ( $9 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$8 = (($9 + [16]) & [-16])
	$7 = CALL $17($8)
	*($6 + [32]) = ($8 | [1])
	*($6 + [40]) = $7
	*($6 + [36]) = $9
	
.LABEL $label$40
	CALL memcpy($7, [11237], $9)
	
.LABEL $label$39
	*(($7 + $9)) = [0]
	
.LABEL $label$25
	*(($6 + [20])) = ( *($6 + [40]) ? (($6 + [32]) | [1]) : (*($6 + [32]) & [1]) )
	*(($6 + [16])) = ( *($6 + [56]) ? (($6 + [48]) | [1]) : (*($6 + [48]) & [1]) )
	*($6 + [12]) = ( *($6 + [72]) ? (($6 + [64]) | [1]) : (*($6 + [64]) & [1]) )
	*($6 + [8]) = ( *($6 + [88]) ? (($6 + [80]) | [1]) : (*($6 + [80]) & [1]) )
	*($6 + [4]) = ( *($6 + [104]) ? (($6 + [96]) | [1]) : (*($6 + [96]) & [1]) )
	*($6) = ( *($6 + [120]) ? (($6 + [112]) | [1]) : (*($6 + [112]) & [1]) )
	CALL $31(($6 + [128]), [256], [11242], $6)
	CALL prints(($6 + [128]))
	if ( (*($6 + [32]) & [1]) ){ goto $label$43 }
	if ( (*($6 + [48]) & [1]) ){ goto $label$42 }
	goto $label$23 
	
.LABEL $label$43
	CALL $19(*(($6 + [40])))
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$42
	CALL $19(*(($6 + [56])))
	$9 = [1]
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	CALL $32(($6 + [32]))
	
.LABEL $label$23
	$9 = [1]
	if ( (*($6 + [64]) & [1]) ){ goto $label$21 }
	
.LABEL $label$22
	if ( (*($6 + [80]) & $9) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL $19(*(($6 + [72])))
	if ( ((*($6 + [80]) & $9) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL $19(*(($6 + [88])))
	$9 = [1]
	if ( ((*($6 + [96]) & [1]) == 0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$9 = [1]
	if ( (*($6 + [96]) & [1]) ){ goto $label$17 }
	
.LABEL $label$18
	if ( (*($6 + [112]) & $9) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL $19(*(($6 + [104])))
	if ( ((*($6 + [112]) & $9) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL $19(*(($6 + [120])))
	$global$0 = ($6 + [384])
	return 
	
.LABEL $label$15
	$global$0 = ($6 + [384])
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $45 (int_64 $0, int_32 $1)
{
	int_32 $2
	float_64 $3
	float_64 $4
	$2 = CALL $3((float_64)3339641.3333333335)
	$3 = ((float_64)((float_64)(float_64)360 / (float_64)(CASTING float_64)(uint_32 ($2 << [2]))) * (float_64)(CASTING float_64)(int_32 ((CASTING uint_32)(uint_64 (uint_64)$0 >> (uint_64)(int_64)24)) - ($2 & [1073741823])))
	$2 = ((int_32)CALL $3(((float_64)((float_64)CALL $10(((float_64)((float_64)$3) * (float_64)(float_64)3.141592653589793) / (float_64)(float_64)180)) * (float_64)(float_64)40075696) / (float_64)(float_64)3e4)) * (int_32)[10000]
	if ( $2) ){ goto $label$1 }
	CALL eosio_assert([0], [11226])
	
.LABEL $label$1
	$4 = ((float_64)((float_64)(float_64)360 / (float_64)(CASTING float_64)(uint_32 $2)) * (float_64)(CASTING float_64)(int_32 (((CASTING uint_32)(uint_64 $0) & [16777215]) - uint_32($2 >> [1]))))
	if ( ((int_32)((float_64)$4 <= (float_64)(float_64)-122.3413022914759) ^ (int_32)[1]) ){ goto $label$2 }
	if ( ((int_32)((float_64)$3 >= (float_64)(float_64)37.70525506066241) ^ (int_32)[1]) ){ goto $label$2 }
	if ( ((int_32)((float_64)$3 <= (float_64)(float_64)37.84752731002901) ^ (int_32)[1]) ){ goto $label$2 }
	if ( (((float_64)$4 >= (float_64)(float_64)-122.53064031809856) == 0) ){ goto $label$2 }
	return 
	
.LABEL $label$2
	CALL eosio_assert([0], $1)
}

void .FUNC $44 (int_32 $0)
{
}

void .FUNC $167 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [16])
	$global$0 = $5
	$6 = *($0)
	$7 = *($6 + [4])
	$8 = *($7 + [64])
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$2 }
	$8 = *($6)
	$8 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)-3981182070595518464, ($5 + [8]), *($7))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($8)
	
.LABEL $label$1
	$6 = *($0)
	$7 = *($6 + [4])
	$8 = *(($7 + [68]))
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$4 }
	$8 = *($6)
	$8 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)-3981182070595518463, ($5 + [8]), *($7))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($8)
	
.LABEL $label$3
	$6 = *($0)
	$7 = *($6 + [4])
	$8 = *(($7 + [72]))
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$6 }
	$8 = *($6)
	$8 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)-3981182070595518462, ($5 + [8]), *($7))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($8)
	
.LABEL $label$5
	$8 = *($0)
	$6 = *($8 + [4])
	$0 = *(($6 + [76]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$8 }
	$0 = *($8)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3981182070595518461, ($5 + [8]), *($6))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL db_idx64_remove($0)
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

int_32 .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [12814])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [12814])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [16])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [12814])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $3, [8])
	$2 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $2
	$6 = (int_64)0
	$4 = [0]
	
.LOOP $label$4:
	if ( ($2 <= *(($0 + [8]))) ){ goto $label$5 }
	CALL eosio_assert([0], [13211])
	$2 = *($5)
	
.LABEL $label$5
	$3 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$4 = ($4 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($3 & [127]) << $4)))
	$4 = ($4 + [7])
	$2 = $2
	if ( ($3 & [128]) ){ goto $label$4 }
	CALL $149($0, ($1 + [24]), (CASTING uint_32)(uint_64 $6))
	$4 = ($1 + [48])
	$2 = ($0 + [4])
	$3 = *($2)
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [12814])
	$3 = *($2)
	
.LABEL $label$6
	CALL memcpy($4, $3, [8])
	*($2) = (*($2) + [8])
	return $0
}

int_32 .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [11948])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [11948])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [11948])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$7 = ($0 + [4])
	$1 = ($0 + [8])
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$5 }
	$8 = [2]
	goto $label$3 
	
.LABEL $label$5
	$8 = [0]
	goto $label$3 
	
.LABEL $label$4
	$8 = [3]
	
.LABEL $label$3
	
.LOOP $label$6:
	goto $label$10 
	
.LABEL $label$12
	$4 = *($7)
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$7 }
	$8 = [2]
	goto $label$6 
	
.LABEL $label$11
	CALL eosio_assert([0], [11948])
	$4 = *($7)
	$8 = [0]
	goto $label$6 
	
.LABEL $label$10
	CALL memcpy($4, $6, [2])
	*($7) = (*($7) + [2])
	CALL $162($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$8 }
	$8 = [3]
	goto $label$6 
	
.LABEL $label$9
	$global$0 = ($2 + [16])
	return $0
	
.LABEL $label$8
	$8 = [1]
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	goto $label$6 
	return $8
}

int_32 .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [11948])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [4])
	$4 = (*($3) + [4])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [4])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[1]) ){ goto $label$2 }
	CALL eosio_assert([0], [11948])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [2])
	$4 = (*($3) + [2])
	*($3) = $4
	$3 = ($1 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [11948])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [4])
	$3 = (*($4) + [4])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [12])
	$8 = ($0 + [8])
	
.LOOP $label$4:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert([0], [11948])
	$3 = *($4)
	
.LABEL $label$5
	CALL memcpy($3, ($2 + [14]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$4 }
	$4 = ($1 + [16])
	$8 = ($0 + [8])
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [11948])
	$3 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $4, [1])
	$3 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [20])
	
.LOOP $label$7:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [15]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert([0], [11948])
	$3 = *($4)
	
.LABEL $label$8
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$7 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [11948])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [11948])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $161 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [11948])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11948])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [11948])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $160 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [192])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $11($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [148]) = $2
	*($3 + [144]) = $2
	$5 = ($2 + $4)
	*($3 + [152]) = $5
	*($3 + [136]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	$5 = *(($3 + [152]))
	$2 = *($3 + [148])
	
.LABEL $label$5
	CALL memcpy(($3 + [136]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [128]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [12814])
	$5 = *((($3 + [144]) + [8]))
	$2 = *($3 + [148])
	
.LABEL $label$6
	CALL memcpy(($3 + [128]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [120]) = (int_64)0
	*($3 + [112]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [12814])
	$5 = *(($3 + [152]))
	$2 = *($3 + [148])
	
.LABEL $label$7
	CALL memcpy(($3 + [112]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [64]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [12814])
	$2 = *($3 + [148])
	
.LABEL $label$8
	CALL memcpy(($3 + [64]), $2, [8])
	*(($5 = (($3 + [112]) + [8]))) = *($3 + [64])
	*($3 + [148]) = ($2 + [8])
	*($3 + [104]) = [0]
	*($3 + [96]) = (int_64)0
	CALL $135(($3 + [144]), ($3 + [96]))
	*(($2 = (($3 + [48]) + [8]))) = *((($3 + [144]) + [8]))
	*($3 + [48]) = *($3 + [144])
	*(($4 = (($3 + [160]) + [8]))) = *($2)
	*($3 + [160]) = *($3 + [48])
	$2 = *($4)
	*((($3 + [176]) + [8])) = $2
	*(($3 + [88])) = $2
	*($3 + [64]) = $0
	*($3 + [72]) = $1
	$0 = *($3 + [160])
	*($3 + [80]) = $0
	*($3 + [176]) = $0
	*(($4 = (($3 + [32]) + [8]))) = *($5)
	*($3 + [32]) = *($3 + [112])
	$0 = *($3 + [128])
	$1 = *($3 + [136])
	$2 = CALL $33(($3 + [16]), ($3 + [96]))
	*(($3 + [8])) = *($4)
	*($3) = *($3 + [32])
	CALL $126(($3 + [64]), $1, $0, $3, $3)
	if ( (*($2) & [1]) ){ goto $label$11 }
	if ( (*($3 + [96]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $19(*($2 + [8]))
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $19(*(($3 + [104])))
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$9
	$global$0 = ($3 + [192])
}

int_32 .FUNC $169 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [12814])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [12814])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [12814])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $4, [8])
	*($1 + [16]) = *($2 + [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [12814])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $4, [8])
	*($1 + [24]) = *($2 + [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [32])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $4, [4])
	$4 = (*($3) + [4])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [36])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [12814])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy($5, $4, [4])
	$4 = (*($3) + [4])
	*($3) = $4
	$1 = ($1 + [40])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[3]) ){ goto $label$7 }
	CALL eosio_assert([0], [12814])
	$4 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($1, $4, [4])
	*(($1 = ($0 + [4]))) = (*($1) + [4])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [12814])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [12814])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [12814])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [12814])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $4, [8])
	*(($1 + [24])) = *($2 + [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [32])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [40])
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [12814])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy($5, $4, [4])
	*($3) = (*($3) + [4])
	$0 = CALL $136($0, ($1 + [44]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $175 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [12814])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [12814])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [12814])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $4, [8])
	*($1 + [16]) = *($2 + [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [12814])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $4, [8])
	*($1 + [24]) = *($2 + [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$1 = ($1 + [32])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($1, $4, [4])
	*(($1 = ($0 + [4]))) = (*($1) + [4])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $58 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_64 $15
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [72]) = $1
	*($4 + [64]) = $2
	CALL $59(($4 + [48]), ($4 + [64]), ($4 + [72]))
	$5 = *($4 + [52])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ((int_64)*($4 + [72]) != (int_64)*($5 + [16])) ){ goto $label$1 }
	$6 = *($4 + [48])
	$7 = ($3 + [36])
	$8 = ($3 + [16])
	
.LOOP $label$2:
	if ( ((int_64)*($5 + [16]) != (int_64)*($4 + [72])) ){ goto $label$1 }
	if ( ((int_32)*(($5 + [40])) != (int_32)[1]) ){ goto $label$3 }
	CALL $40(($4 + [32]), *($5))
	$2 = CALL $39(($4 + [32]), [0], [11282])
	$10 = ($2 + [8])
	*(($9 = (($4 + [48]) + [8]))) = *($10)
	*($4 + [48]) = *($2)
	*($2) = (int_64)0
	*($10) = [0]
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $19(*((($4 + [32]) + [8])))
	
.LABEL $label$4
	$11 = CALL $41(((float_64)(CASTING float_64)(int_64 *($5 + [24])) * (float_64)(PROMOTE float_64)(float_32 ((float_32)*($7) + (float_32)(float_32)1))))
	$12 = *($8)
	if ( (uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$5 }
	CALL eosio_assert([0], [11954])
	
.LABEL $label$5
	$1 = (uint_64)$12 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $13
	$10 = $2
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $13
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$10 = ((int_32)$2 < (int_32)[6])
	$14 = ($2 + [1])
	$2 = $14
	if ( $10 ){ goto $label$10 }
	$2 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([0], [12003])
	
.LABEL $label$6
	*((($4 + [16]) + [8])) = $12
	$1 = *($5 + [48])
	$13 = *($0)
	$15 = *($3)
	*(($4 + [8])) = $12
	*($4 + [16]) = $11
	*($4) = $11
	CALL $48($0, $15, $13, $1, $4, ($4 + [48]))
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL $19(*($9))
	
.LABEL $label$3
	*($4 + [48]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $6))
	if ( $5 ){ goto $label$11 }
	CALL eosio_assert([0], [12360])
	$5 = *($4 + [52])
	
.LABEL $label$11
	CALL $60(($4 + [48]))
	CALL $61(*($4 + [64]), $5)
	$1 = *($4 + [48])
	$6 = (CASTING uint_32)(uint_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( $5) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3981182070595518463, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [56]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [12763])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $75($7, CALL $fimport$29(*($7), *($7 + [8]), (int_64)-3981182070595518464, $6))
	if ( ((int_32)*($4 + [56]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [12763])
	
.LABEL $label$2
	*(($4 + [68])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $51($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $53(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL $19($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $17($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $42($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $19($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11948])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11948])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11948])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11948])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $165(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $162(CALL $161($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11948])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11948])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $54 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [16]) = $1
	$4 = [0]
	$5 = CALL db_lowerbound_i64(*($2), *($2 + [8]), (int_64)-3963167672086036480, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $55($2, $5)
	$6 = *($4)
	*($3 + [8]) = $6
	if ( (uint_64)($6 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL eosio_assert([0], [11260])
	$6 = *([0])
	*($3 + [8]) = $6
	if ( ((uint_64)$6 >= (uint_64)$1) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [11271])
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_64)$6 != (int_64)$1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $4 ){ goto $label$6 }
	CALL eosio_assert([0], [12360])
	CALL eosio_assert([0], [12394])
	
.LABEL $label$6
	$5 = CALL db_next_i64(*($4 + [20]), ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	CALL $55($2, $5)
	
.LABEL $label$7
	CALL $56($2, $4)
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$1
	*($3 + [28]) = ($3 + [16])
	*($3 + [24]) = ($3 + [8])
	if ( $4 ){ goto $label$8 }
	CALL eosio_assert([0], [12572])
	
.LABEL $label$8
	CALL $57($2, $4, ($3 + [24]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [16])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [12337])
	
.LABEL $label$5
	$2 = CALL $11($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $17([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [8]) = (int_64)0
	$7 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$8
	CALL memcpy(($3 + [8]), $7, [8])
	*(($5 + [8])) = *($3 + [8])
	*($5 + [20]) = $1
	*($3 + [8]) = $5
	*($3 + [4]) = [0]
	*($3) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = $1
	*($3 + [8]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $128(($0 + [24]), ($3 + [8]), ($3 + [4]), $3)
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $12($2)
	
.LABEL $label$9
	$1 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $19($1)
	
.LABEL $label$12
	$global$0 = ($3 + [16])
	return $5
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12424])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12469])
	
.LABEL $label$2
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$5 }
	$4 = ($3 + [-24])
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert([0], [12519])
	$5 = *($2)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	$2 = $3
	
.LOOP $label$7:
	$4 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $4
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $19($3)
	
.LABEL $label$8
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$7 }
	$4 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$4 = ($3 + [-24])
	
.LABEL $label$4
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $19($2)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $4
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12607])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12653])
	
.LABEL $label$2
	$5 = (int_64)
	*($1) = $5(*(*($2)) - *(*(($2 + [4])))))
	if ( (uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$3 }
	CALL eosio_assert([0], [11954])
	
.LABEL $label$3
	$3 = $3
	$2 = ($3 + [-16])
	$global$0 = $2
	CALL memcpy($2, $1, [8])
	*($4 + [8]) = *($1 + [8])
	CALL memcpy(($3 + [-8]), ($4 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), (int_64)0, $2, [16])
	if ( ((int_64)*($0 + [16]) == (int_64)0) ){ goto $label$4 }
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$4
	*(($0 + [16])) = (int_64)1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $173 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [12814])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [12814])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [12814])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [12814])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $4, [8])
	*(($1 + [24])) = *($2 + [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [32])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [12814])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy(($2 + [8]), $4, [8])
	*(($1 + [40])) = *($2 + [8])
	$4 = (*($3) + [8])
	*($3) = $4
	if ( ((int_32)*($5) != (int_32)$4) ){ goto $label$7 }
	CALL eosio_assert([0], [12814])
	$4 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy(($2 + [8]), $4, [1])
	$4 = (*($3) + [1])
	*(($3 = ($0 + [4]))) = $4
	*(($1 + [48])) = ((int_32)*($2 + [8]) != (int_32)[0])
	$5 = ($0 + [8])
	if ( ((int_32)*($5) != (int_32)$4) ){ goto $label$8 }
	CALL eosio_assert([0], [12814])
	$4 = *($3)
	
.LABEL $label$8
	CALL memcpy(($2 + [8]), $4, [1])
	$4 = (*($3) + [1])
	*($3) = $4
	*(($1 + [49])) = ((int_32)*($2 + [8]) != (int_32)[0])
	if ( ((int_32)*($5) != (int_32)$4) ){ goto $label$9 }
	CALL eosio_assert([0], [12814])
	$4 = *(($0 + [4]))
	
.LABEL $label$9
	CALL memcpy(($2 + [8]), $4, [1])
	*(($3 = ($0 + [4]))) = (*($3) + [1])
	*(($1 + [50])) = ((int_32)*($2 + [8]) != (int_32)[0])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $152 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $11($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [40]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$5
	$5 = ($2 + $4)
	CALL memcpy(($3 + [40]), $2, [8])
	$6 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$6
	CALL memcpy(($3 + [32]), $6, [8])
	*(($3 + [24])) = $5
	*($3 + [16]) = $2
	*(($3 + [20])) = ($2 + [16])
	*($3 + [8]) = $1
	*($3) = $0
	CALL $113($3, *($3 + [40]), *($3 + [32]))
	$global$0 = ($3 + [48])
}

void .FUNC $153 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $11($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [40]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$5
	$5 = ($2 + $4)
	CALL memcpy(($3 + [40]), $2, [8])
	$6 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$6
	CALL memcpy(($3 + [32]), $6, [8])
	*(($3 + [24])) = $5
	*($3 + [16]) = $2
	*(($3 + [20])) = ($2 + [16])
	*($3 + [8]) = $1
	*($3) = $0
	CALL $114($3, *($3 + [40]), *($3 + [32]))
	$global$0 = ($3 + [48])
}

void .FUNC $150 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [144])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $11($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*($3 + [100]) = $4
	*($3 + [96]) = $4
	*($3 + [104]) = ($4 + $5)
	*($3 + [88]) = [0]
	*($3 + [80]) = (int_64)0
	CALL $135(($3 + [96]), ($3 + [80]))
	*($3 + [72]) = (int_64)0
	$4 = *($3 + [100])
	if ( ((uint_32)(*($3 + [104]) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [12814])
	$4 = *($3 + [100])
	
.LABEL $label$4
	CALL memcpy(($3 + [72]), $4, [8])
	$4 = (*($3 + [100]) + [8])
	*($3 + [100]) = $4
	$5 = (($3 + [96]) + [8])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	$4 = *($3 + [100])
	
.LABEL $label$5
	CALL memcpy(($3 + [64]), $4, [8])
	*($3 + [100]) = (*($3 + [100]) + [8])
	*(($4 = (($3 + [16]) + [8]))) = *($5)
	*($3 + [16]) = *($3 + [96])
	*(($5 = (($3 + [112]) + [8]))) = *($4)
	*($3 + [112]) = *($3 + [16])
	$4 = *($5)
	*((($3 + [128]) + [8])) = $4
	*(($3 + [56])) = $4
	*($3 + [32]) = $0
	*($3 + [40]) = $1
	$0 = *($3 + [112])
	*($3 + [48]) = $0
	*($3 + [128]) = $0
	$4 = CALL $33($3, ($3 + [80]))
	CALL $108(($3 + [32]), $4, *($3 + [72]), *($3 + [64]))
	if ( (*($4) & [1]) ){ goto $label$8 }
	if ( (*($3 + [80]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $19(*($4 + [8]))
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $19(*(($3 + [88])))
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [144])
}

void .FUNC $151 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $11($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [40]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$5
	$5 = ($2 + $4)
	CALL memcpy(($3 + [40]), $2, [8])
	$6 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$6
	CALL memcpy(($3 + [32]), $6, [8])
	*(($3 + [24])) = $5
	*($3 + [16]) = $2
	*(($3 + [20])) = ($2 + [16])
	*($3 + [8]) = $1
	*($3) = $0
	CALL $112($3, *($3 + [40]), *($3 + [32]))
	$global$0 = ($3 + [48])
}

void .FUNC $156 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $11($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [40]) = (int_64)0
	$5 = ($2 + $4)
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$5
	CALL memcpy(($3 + [40]), $2, [8])
	*(($3 + [28])) = ($2 + [8])
	*(($3 + [32])) = $5
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [24]) = $2
	CALL $116(($3 + [8]), *($3 + [40]))
	$global$0 = ($3 + [48])
}

void .FUNC $157 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ($4 <= [512]) ){ goto $label$4 }
	$2 = CALL $11($4)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	$5 = ($3 + [44])
	$6 = $4
	goto $label$2 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $4)
	$6 = ($2 + $4)
	$5 = ($3 + [44])
	if ( ((uint_32)$4 > (uint_32)[3]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [12814])
	
.LABEL $label$1
	CALL memcpy($5, $2, [4])
	*(($3 + [28])) = ($2 + [4])
	*(($3 + [32])) = $6
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [24]) = $2
	CALL $122(($3 + [8]), *($3 + [44]))
	$global$0 = ($3 + [48])
}

void .FUNC $154 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $11($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [56]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$5
	CALL memcpy(($3 + [56]), $2, [8])
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$6
	$4 = ($2 + $4)
	CALL memcpy(($3 + [48]), $5, [8])
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$7
	CALL memcpy(($3 + [40]), $5, [8])
	*((($3 + [8]) + [24])) = $4
	*($3 + [24]) = $2
	*(($3 + [28])) = ($2 + [24])
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	CALL $120(($3 + [8]), *($3 + [56]), *($3 + [48]), *($3 + [40]))
	$global$0 = ($3 + [64])
}

void .FUNC $155 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $11($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [88]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$5
	CALL memcpy(($3 + [88]), $2, [8])
	*($3 + [80]) = (int_64)0
	*($3 + [72]) = (int_64)0
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$6
	$4 = ($2 + $4)
	CALL memcpy(($3 + [72]), $5, [8])
	*($3 + [40]) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$7
	CALL memcpy(($3 + [40]), $5, [8])
	*(($5 = (($3 + [72]) + [8]))) = *($3 + [40])
	*((($3 + [40]) + [24])) = $4
	$7 = *($5)
	*((($3 + [24]) + [8])) = $7
	*((($3 + [8]) + [8])) = $7
	*($3 + [56]) = $2
	*(($3 + [60])) = ($2 + [24])
	*($3 + [48]) = $1
	*($3 + [40]) = $0
	$0 = *($3 + [72])
	*($3 + [24]) = $0
	*($3 + [8]) = $0
	CALL $129(($3 + [40]), *($3 + [88]), ($3 + [8]))
	$global$0 = ($3 + [96])
}

void .FUNC $158 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ($4 <= [512]) ){ goto $label$4 }
	$2 = CALL $11($4)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	$5 = ($3 + [40])
	$6 = $4
	goto $label$2 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $4)
	$6 = ($2 + $4)
	$5 = ($3 + [40])
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [12814])
	
.LABEL $label$1
	CALL memcpy($5, $2, [8])
	$5 = ($2 + [8])
	if ( ((int_32)($4 & [-4]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$6
	CALL memcpy(($3 + [36]), $5, [4])
	*(($3 + [24])) = $6
	*($3 + [16]) = $2
	*(($3 + [20])) = ($2 + [12])
	*($3 + [8]) = $1
	*($3) = $0
	CALL $124($3, *($3 + [40]), *($3 + [36]))
	$global$0 = ($3 + [48])
}

void .FUNC $159 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ($4 <= [512]) ){ goto $label$4 }
	$2 = CALL $11($4)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	$5 = ($3 + [40])
	$6 = $4
	goto $label$2 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $4)
	$6 = ($2 + $4)
	$5 = ($3 + [40])
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [12814])
	
.LABEL $label$1
	CALL memcpy($5, $2, [8])
	$5 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$6
	CALL memcpy(($3 + [32]), $5, [8])
	*(($3 + [24])) = $6
	*($3 + [16]) = $2
	*(($3 + [20])) = ($2 + [16])
	*($3 + [8]) = $1
	*($3) = $0
	CALL $131($3, *($3 + [40]), *($3 + [32]))
	$global$0 = ($3 + [48])
}

void .FUNC $179 (int_32 $0, int_32 $1)
{
	*(($0 = *(*($0)))) = (*($0) + [16])
}

void .FUNC $69 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [44]) = [0]
	$5 = *($0)
	*($3 + [8]) = $5
	*($3 + [16]) = $5
	$6 = CALL db_find_i64($5, $5, (int_64)3479593662097129472, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $65(($3 + [8]), $6)
	if ( ((int_32)*($4 + [56]) == (int_32)($3 + [8])) ){ goto $label$4 }
	CALL eosio_assert([0], [12763])
	
.LABEL $label$4
	$8 = *($2 + [4])
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [11403])
	$8 = *($2 + [4])
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($7 + [8])
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$1 }
	$7 = ($2 + [4])
	
.LOOP $label$5:
	$6 = ($6 + [-8])
	$1 = *($6)
	$5 = *($6)
	if ( ((uint_64)$5 > (uint_64)$1) ){ goto $label$6 }
	if ( ((int_64)$5 != (int_64)$1) ){ goto $label$7 }
	CALL eosio_assert([0], [11105])
	
.LABEL $label$7
	CALL eosio_assert([0], [11216])
	$8 = *($7)
	
.LABEL $label$6
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$5 }
	$7 = *($2)
	
.LABEL $label$1
	if ( ((uint_64)*($7) > (uint_64)*((*(($4 + [48])) + [-8]))) ){ goto $label$8 }
	CALL eosio_assert([0], [11413])
	
.LABEL $label$8
	$5 = *($0)
	*($3) = $2
	if ( $4 ){ goto $label$9 }
	CALL eosio_assert([0], [12572])
	
.LABEL $label$9
	CALL $70(($3 + [8]), $4, $5, $3)
	$2 = *($3 + [32])
	if ( ($2 == 0) ){ goto $label$10 }
	$4 = ($3 + [36])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	$7 = *($8 + [44])
	if ( ($7 == 0) ){ goto $label$15 }
	*(($8 + [48])) = $7
	CALL $19($7)
	
.LABEL $label$15
	CALL $19($8)
	
.LABEL $label$14
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$13 }
	$6 = *(($3 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$6 = $2
	
.LABEL $label$11
	*($4) = $2
	CALL $19($6)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $17(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [44])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [48])) = $2
	CALL $19($2)
	
.LABEL $label$11
	CALL $19($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $19($4)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [12337])
	
.LABEL $label$5
	$4 = CALL $11($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL $17([72])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [44 align=4]) = (int_64)0
	*($5 + [52]) = [0]
	*($5 + [56]) = $0
	CALL $168(($3 + [32]), $5)
	*($5 + [64]) = [-1]
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $68(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $12($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$4 = *($1 + [44])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($1 + [48])) = $4
	CALL $19($4)
	
.LABEL $label$11
	CALL $19($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$6 = ($global$0 - [224])
	$global$0 = $6
	*($6 + [176]) = $4
	if ( ((*($1) & [1]) == 0) ){ goto $label$1 }
	if ( (*($1 + [4]) <= [257]) ){ goto $label$1 }
	CALL eosio_assert([0], [11302])
	
.LABEL $label$1
	CALL require_auth(*($0))
	CALL $45($2, [11331])
	if ( CALL is_account($4) ){ goto $label$2 }
	CALL eosio_assert([0], [11342])
	
.LABEL $label$2
	$8 = *($5 + [4])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	$1 = ($7 + [8])
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$3 }
	$7 = ($5 + [4])
	
.LOOP $label$4:
	$1 = ($1 + [-8])
	$9 = *($1)
	$4 = *($1)
	if ( ((uint_64)$4 > (uint_64)$9) ){ goto $label$5 }
	if ( ((int_64)$4 != (int_64)$9) ){ goto $label$6 }
	CALL eosio_assert([0], [11105])
	
.LABEL $label$6
	CALL eosio_assert([0], [11216])
	$8 = *($7)
	
.LABEL $label$5
	$1 = ($1 + [16])
	if ( ((int_32)$1 != (int_32)$8) ){ goto $label$4 }
	$7 = *($5)
	
.LABEL $label$3
	*(($6 + [168])) = [0]
	*($6 + [152]) = (int_64)-1
	*($6 + [160]) = (int_64)0
	*($6 + [172]) = [0]
	$4 = *($0)
	*($6 + [136]) = $4
	*($6 + [144]) = $4
	if ( ((int_64)*($7) == (int_64)$2) ){ goto $label$7 }
	CALL eosio_assert([0], [11352])
	
.LABEL $label$7
	$1 = CALL db_find_i64($4, $4, (int_64)3479593662097129472, $2)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$8 }
	if ( ((int_32)*(CALL $65(($6 + [136]), $1) + [56]) == (int_32)($6 + [136])) ){ goto $label$9 }
	CALL eosio_assert([0], [12763])
	
.LABEL $label$9
	CALL eosio_assert([0], [11362])
	
.LABEL $label$8
	$1 = [0]
	*(($6 + [128])) = [0]
	*($6 + [112]) = (int_64)-1
	$4 = *($0)
	*($6 + [96]) = $4
	*($6 + [104]) = $4
	*($6 + [120]) = (int_64)0
	$8 = CALL db_lowerbound_i64($4, $4, (int_64)-3945153273576554496, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$12 }
	$1 = CALL $66(($6 + [96]), $8)
	if ( ((int_64)*($3 + [8]) == (int_64)*($1 + [16])) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	CALL eosio_assert([0], [11372])
	if ( ((int_64)*($3 + [8]) == (int_64)*([0] + [16])) ){ goto $label$10 }
	
.LABEL $label$11
	CALL eosio_assert([0], [11205])
	
.LABEL $label$10
	*(($6 + [88])) = [0]
	*($6 + [72]) = (int_64)-1
	*($6 + [80]) = (int_64)0
	*($6 + [56]) = *($0)
	*($6 + [64]) = *($6 + [176])
	CALL $54($6, *($3), ($6 + [56]))
	*((($6 + [40]) + [8])) = *(($3 + [8]))
	*($6 + [40]) = *($3)
	$4 = *($1 + [8])
	$9 = *($0)
	$2 = *($1)
	*((($6 + [192]) + [8])) = [0]
	*($6 + [192]) = (int_64)0
	$1 = CALL $25([11383])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$19 }
	*($6 + [192]) = ($1 << [1])
	$8 = (($6 + [192]) | [1])
	if ( $1 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$7 = (($1 + [16]) & [-16])
	$8 = CALL $17($7)
	*($6 + [192]) = ($7 | [1])
	*($6 + [200]) = $8
	*($6 + [196]) = $1
	
.LABEL $label$18
	CALL memcpy($8, [11383], $1)
	
.LABEL $label$17
	*(($8 + $1)) = [0]
	*((($6 + [8]) + [8])) = *((($6 + [40]) + [8]))
	*($6 + [8]) = *($6 + [40])
	CALL $48($0, $2, $9, $4, ($6 + [8]), ($6 + [192]))
	if ( ((*($6 + [192]) & [1]) == 0) ){ goto $label$20 }
	CALL $19(*($6 + [200]))
	
.LABEL $label$20
	$4 = *($0)
	*($6 + [24]) = $5
	*($6 + [32]) = $3
	*($6 + [28]) = ($6 + [176])
	*($6 + [216]) = $4
	if ( ((int_64)CALL current_receiver() == (int_64)*($6 + [136])) ){ goto $label$21 }
	CALL eosio_assert([0], [12819])
	
.LABEL $label$21
	*($6 + [196]) = ($6 + [24])
	*($6 + [192]) = ($6 + [136])
	*($6 + [200]) = ($6 + [216])
	*(($1 = CALL $17([72])) + [16]) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [44 align=4]) = (int_64)0
	*($1 + [52]) = [0]
	*($1 + [56]) = ($6 + [136])
	CALL $67(($6 + [192]), $1)
	*($6 + [208]) = $1
	$4 = *($1)
	*($6 + [192]) = $4
	$0 = *($1 + [60])
	*($6 + [188]) = $0
	$7 = ($6 + [164])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($6 + [168]))) ){ goto $label$23 }
	*($8 + [8]) = $4
	*($8 + [16]) = $0
	*($6 + [208]) = [0]
	*($8) = $1
	*($7) = ($8 + [24])
	$1 = *($6 + [208])
	*($6 + [208]) = [0]
	if ( ($1 == 0) ){ goto $label$22 }
	goto $label$15 
	
.LABEL $label$23
	CALL $68(($6 + [160]), ($6 + [208]), ($6 + [192]), ($6 + [188]))
	$1 = *($6 + [208])
	*($6 + [208]) = [0]
	if ( $1 ){ goto $label$15 }
	
.LABEL $label$22
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$16
	CALL $32(($6 + [192]))
	
.LABEL $label$15
	$8 = *($1 + [44])
	if ( ($8 == 0) ){ goto $label$24 }
	*(($1 + [48])) = $8
	CALL $19($8)
	
.LABEL $label$24
	CALL $19($1)
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$7 = ($6 + [84])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$26 }
	
.LOOP $label$27:
	$1 = ($1 + [-24])
	$8 = *($1)
	*($1) = [0]
	if ( ($8 == 0) ){ goto $label$28 }
	CALL $19($8)
	
.LABEL $label$28
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$27 }
	$1 = *(($6 + [80]))
	goto $label$25 
	
.LABEL $label$26
	$1 = $0
	
.LABEL $label$25
	*($7) = $0
	CALL $19($1)
	
.LABEL $label$13
	$0 = *($6 + [120])
	if ( ($0 == 0) ){ goto $label$29 }
	$7 = ($6 + [124])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$31 }
	
.LOOP $label$32:
	$1 = ($1 + [-24])
	$8 = *($1)
	*($1) = [0]
	if ( ($8 == 0) ){ goto $label$33 }
	CALL $19($8)
	
.LABEL $label$33
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$32 }
	$1 = *(($6 + [120]))
	goto $label$30 
	
.LABEL $label$31
	$1 = $0
	
.LABEL $label$30
	*($7) = $0
	CALL $19($1)
	
.LABEL $label$29
	$7 = *($6 + [160])
	if ( ($7 == 0) ){ goto $label$34 }
	$3 = ($6 + [164])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$36 }
	
.LOOP $label$37:
	$1 = ($1 + [-24])
	$8 = *($1)
	*($1) = [0]
	if ( ($8 == 0) ){ goto $label$38 }
	$0 = *($8 + [44])
	if ( ($0 == 0) ){ goto $label$39 }
	*(($8 + [48])) = $0
	CALL $19($0)
	
.LABEL $label$39
	CALL $19($8)
	
.LABEL $label$38
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$37 }
	$1 = *(($6 + [160]))
	goto $label$35 
	
.LABEL $label$36
	$1 = $7
	
.LABEL $label$35
	*($3) = $7
	CALL $19($1)
	
.LABEL $label$34
	$global$0 = ($6 + [224])
	(unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*(*($4)))
	*($1 + [8]) = *(*($4 + [4]))
	$5 = *($0)
	$6 = *($4 + [8])
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [16]) = *($6)
	*($1 + [32]) = CALL $43()
	*($1 + [40]) = [1065353216]
	$6 = *($4)
	$4 = *($1 + [44])
	if ( ($4 == 0) ){ goto $label$2 }
	*(($1 + [48])) = $4
	CALL $19($4)
	*(($7 = ($1 + [52]))) = [0]
	*($1 + [44 align=4]) = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$7 = ($1 + [52])
	
.LABEL $label$1
	$4 = [44]
	*(($8 = ($1 + [44]))) = *($6)
	*($7) = *($6 + [8])
	*($6) = (int_64)0
	*($6 + [8]) = [0]
	$7 = *($8)
	$6 = *(($1 + [48]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$4 = (($8 & [-8]) + $4)
	
.LABEL $label$4
	if ( ($4 <= [513]) ){ goto $label$6 }
	$6 = CALL $11($4)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($6 + $4)
	CALL $170(($3 + [8]), $1)
	$9 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($5 + [8]), (int_64)3479593662097129472, *(*($0 + [8])), $9, $6, $4)
	if ( ($4 <= [513]) ){ goto $label$7 }
	CALL $12($6)
	
.LABEL $label$7
	if ( (uint_64)($9 <= *($5 + [16])) ){ goto $label$8 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$9 = *(($5 + [8]))
	$10 = *(*(($0 + [8])))
	$11 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [64]) = CALL db_idx64_store($9, (int_64)3479593662097129472, $10, $11, ($3 + [24]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [12337])
	
.LABEL $label$5
	$4 = CALL $11($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $17([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [44]) = $0
	CALL $169(($3 + [16]), $5)
	*($5 + [48]) = $1
	*($3 + [8]) = $5
	*($3 + [4]) = [0]
	*($3) = $1
	$7 = ($0 + [28])
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = $1
	*($3 + [8]) = [0]
	*($2) = $5
	*($7) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $94(($0 + [24]), ($3 + [8]), ($3 + [4]), $3)
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $12($4)
	
.LABEL $label$7
	$1 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $19($1)
	
.LABEL $label$10
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [56]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12424])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12469])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [12519])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $19($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL $19($9)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $167(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]), ($0 + [39]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( $2 ){ goto $label$1 }
	CALL eosio_assert([0], [12394])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	$3 = *(($2 + [68]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$2 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-3981182070595518463, ($1 + [8]), *($2))
	*((*(($0 + [4])) + [68])) = $3
	
.LABEL $label$2
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$5 = *($1 + [8])
	$3 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$7:
	$2 = ($3 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$5 }
	$3 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	if ( ((int_32)*($8 + [56]) == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [12763])
	goto $label$3 
	
.LABEL $label$4
	$8 = CALL $75($6, CALL $fimport$29(*($6), *($6 + [8]), (int_64)-3981182070595518464, $5))
	if ( ((int_32)*($8 + [56]) == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [12763])
	
.LABEL $label$3
	*(($0 + [4])) = $8
	*(($8 + [68])) = $4
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( $2 ){ goto $label$1 }
	CALL eosio_assert([0], [12394])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	$3 = *(($2 + [72]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$2 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-3981182070595518462, ($1 + [8]), *($2))
	*((*(($0 + [4])) + [72])) = $3
	
.LABEL $label$2
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$5 = *($1 + [8])
	$3 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$7:
	$2 = ($3 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$5 }
	$3 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	if ( ((int_32)*($8 + [56]) == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [12763])
	goto $label$3 
	
.LABEL $label$4
	$8 = CALL $75($6, CALL $fimport$29(*($6), *($6 + [8]), (int_64)-3981182070595518464, $5))
	if ( ((int_32)*($8 + [56]) == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [12763])
	
.LABEL $label$3
	*(($0 + [4])) = $8
	*(($8 + [72])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3981182070595518462, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [56]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [12763])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $75($7, CALL $fimport$29(*($7), *($7 + [8]), (int_64)-3981182070595518464, $6))
	if ( ((int_32)*($4 + [56]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [12763])
	
.LABEL $label$2
	*(($4 + [72])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	CALL $0()
	CALL $134($0, $1)
	CALL $139($0, $1)
	CALL $140($0, $1)
	CALL $141($0, $1)
	CALL $142($0, $1)
	CALL $143($0, $1)
	CALL $144($0, $1)
	CALL $145($0, $1)
	CALL $146($0, $1)
	CALL $147($0, $1)
	CALL $148($0, $1)
	CALL $150($0, $1)
	CALL $151($0, $1)
	CALL $152($0, $1)
	CALL $153($0, $1)
	CALL $154($0, $1)
	CALL $155($0, $1)
	CALL $156($0, $1)
	CALL $157($0, $1)
	CALL $158($0, $1)
	CALL $159($0, $1)
	CALL eosio_assert_code([0], (int_64)8000000000000000000)
	CALL eosio_assert_code([0], (int_64)8000000000000000001)
	CALL $160($0, $1)
	CALL $44([0])
	((int_64)$0 == (int_64)$1)
	((int_64)3530822107858468864 == (int_64)$2)
	((int_64)3513370659302408192 == (int_64)$2)
	((int_64)3548836506367950848 == (int_64)$2)
	((int_64)3512807709348986880 == (int_64)$2)
	((int_64)-7475975381435023360 == (int_64)$2)
	((int_64)3494793310839504896 == (int_64)$2)
	((int_64)3497045110653190144 == (int_64)$2)
	((int_64)-7457960982925541376 == (int_64)$2)
	((int_64)-7421932185906577408 == (int_64)$2)
	((int_64)-7403917787397095424 == (int_64)$2)
	((int_64)-7474849481528180736 == (int_64)$2)
	((int_64)-7474286531574759424 == (int_64)$2)
	((int_64)-7473160631667916800 == (int_64)$2)
	((int_64)-7473723581621338112 == (int_64)$2)
	((int_64)-7455709183111856128 == (int_64)$2)
	((int_64)-7439383634462638080 == (int_64)$2)
	((int_64)-7438820684509216768 == (int_64)$2)
	((int_64)-7455146233158434816 == (int_64)$2)
	((int_64)-7456272133065277440 == (int_64)$2)
	((int_64)-7457398032972120064 == (int_64)$2)
	((int_64)-7438257734555795456 == (int_64)$2)
	((int_64)$0 != (int_64)6138663577826885632)
	((int_64)6138663577826885632 == (int_64)$1)
	((int_64)-6569208335818555392 == (int_64)$2)
	((int_64)-3617168760277827584 == (int_64)$2)
}

void .FUNC $89 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [192])
	$global$0 = $5
	*($5 + [104]) = $2
	*($5 + [96]) = $3
	*($5 + [88]) = $4
	*($5 + [112]) = $1
	if ( CALL is_account($1) ){ goto $label$1 }
	CALL eosio_assert([0], [11448])
	
.LABEL $label$1
	if ( CALL is_account($2) ){ goto $label$2 }
	CALL eosio_assert([0], [11459])
	
.LABEL $label$2
	$1 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$1 = $3
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$1 = $3
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $7 ){ goto $label$7 }
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	CALL eosio_assert([0], [11470])
	
.LABEL $label$3
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$1 = $3
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$1 = $3
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $7 ){ goto $label$12 }
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert([0], [11481])
	
.LABEL $label$8
	$6 = [0]
	*((($5 + [48]) + [32])) = [0]
	*($5 + [64]) = (int_64)-1
	$1 = *($0)
	*($5 + [48]) = $1
	*($5 + [56]) = $1
	*($5 + [72]) = (int_64)0
	$7 = CALL db_lowerbound_i64($1, $1, (int_64)-3945153273576554496, (int_64)0)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$15 }
	CALL $66(($5 + [48]), $7)
	$7 = CALL db_lowerbound_i64(*($5 + [48]), *(($5 + [56])), (int_64)-3945153273576554496, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$16 }
	$6 = CALL $66(($5 + [48]), $7)
	
.LABEL $label$16
	$1 = *($0)
	*($5 + [132]) = ($5 + [104])
	*($5 + [128]) = ($5 + [112])
	*($5 + [136]) = ($5 + [96])
	*($5 + [140]) = ($5 + [88])
	if ( $6 ){ goto $label$17 }
	CALL eosio_assert([0], [12572])
	
.LABEL $label$17
	CALL $90(($5 + [48]), $6, $1, ($5 + [128]))
	$8 = *($5 + [72])
	if ( $8 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	*((($5 + [8]) + [32])) = [0]
	*($5 + [24]) = (int_64)-1
	$1 = *($0)
	*($5 + [8]) = $1
	*($5 + [16]) = $1
	*($5 + [32]) = (int_64)0
	$6 = CALL db_lowerbound_i64($1, $1, (int_64)-4017210867614482432, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$18 }
	CALL $91(($5 + [8]), $6)
	$6 = CALL db_lowerbound_i64(*($5 + [8]), *(($5 + [16])), (int_64)-4017210867614482432, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$20 }
	$6 = CALL $91(($5 + [8]), $6)
	goto $label$19 
	
.LABEL $label$20
	$6 = [0]
	CALL eosio_assert([0], [12360])
	CALL eosio_assert([0], [12394])
	
.LABEL $label$19
	$7 = CALL db_next_i64(*($6 + [40]), ($5 + [128]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$21 }
	CALL $91(($5 + [8]), $7)
	
.LABEL $label$21
	CALL $92(($5 + [8]), $6)
	
.LABEL $label$18
	$1 = *($0)
	if ( ((int_64)CALL current_receiver() == (int_64)*($5 + [48])) ){ goto $label$22 }
	CALL eosio_assert([0], [12819])
	
.LABEL $label$22
	*(($6 = CALL $17([56])) + [44]) = ($5 + [48])
	*($6 + [32]) = (int_64)4417130516374033007
	*($6 + [40]) = [1028443341]
	*($6) = *($5 + [112])
	*($6 + [8]) = *($5 + [104])
	*($6 + [16]) = *($5 + [96])
	*($6 + [24]) = *($5 + [88])
	*($5 + [184]) = (($5 + [128]) + [44])
	*($5 + [180]) = ($5 + [128])
	*($5 + [176]) = ($5 + [128])
	CALL $93(($5 + [176]), $6)
	$8 = CALL db_store_i64(*(($5 + [56])), (int_64)-3945153273576554496, $1, (int_64)0, ($5 + [128]), [44])
	*($6 + [48]) = $8
	$7 = ($5 + [64])
	if ( ((int_64)*($7) != (int_64)0) ){ goto $label$23 }
	*($7) = (int_64)1
	
.LABEL $label$23
	*($5 + [128]) = $6
	*($5 + [176]) = [0]
	*($5 + [124]) = $8
	$0 = ($5 + [76])
	$7 = *($0)
	if ( ((uint_32)$7 >= (uint_32)*(($5 + [80]))) ){ goto $label$26 }
	*($7 + [8]) = (int_64)0
	*($7 + [16]) = $8
	*($5 + [128]) = [0]
	*($7) = $6
	*($0) = ($7 + [24])
	$6 = *($5 + [128])
	*($5 + [128]) = [0]
	if ( $6 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	CALL $94(($5 + [72]), ($5 + [128]), ($5 + [176]), ($5 + [124]))
	$6 = *($5 + [128])
	*($5 + [128]) = [0]
	if ( ($6 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	CALL $19($6)
	
.LABEL $label$24
	$8 = *($5 + [32])
	if ( ($8 == 0) ){ goto $label$27 }
	$0 = ($5 + [36])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$29 }
	
.LOOP $label$30:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$31 }
	CALL $19($7)
	
.LABEL $label$31
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$30 }
	$6 = *(($5 + [32]))
	goto $label$28 
	
.LABEL $label$29
	$6 = $8
	
.LABEL $label$28
	*($0) = $8
	CALL $19($6)
	
.LABEL $label$27
	$8 = *($5 + [72])
	if ( ($8 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$0 = ($5 + [76])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$33 }
	
.LOOP $label$34:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$35 }
	CALL $19($7)
	
.LABEL $label$35
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$34 }
	$6 = *(($5 + [72]))
	goto $label$32 
	
.LABEL $label$33
	$6 = $8
	
.LABEL $label$32
	*($0) = $8
	CALL $19($6)
	
.LABEL $label$13
	$global$0 = ($5 + [192])
}

void .FUNC $88 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $1
	*($2 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($3, $1, (int_64)3479030712143708160, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $79($2, $0)
	
.LOOP $label$2:
	$0 = [0]
	$5 = CALL db_next_i64(*($4 + [28]), ($2 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $79($2, $5)
	
.LABEL $label$3
	CALL $80($2, $4)
	$4 = $0
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$4 }
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $19($4)
	
.LABEL $label$8
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($2 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $5
	
.LABEL $label$5
	*($6) = $5
	CALL $19($0)
	
.LABEL $label$4
	$global$0 = ($2 + [48])
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $163($0, $1)
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [28])) - *($1 + [24])) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [14]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [11948])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [14]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *(($1 + [28]))
	$6 = *(($1 + [24]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $53($0, $6)
	$6 = ($6 + [40])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$4 }
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [40])) - *($1 + [36])) / (int_32)[40]))
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$5:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [11948])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$5 }
	$6 = *(($1 + [40]))
	$4 = *(($1 + [36]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $53($0, $4)
	$4 = ($4 + [40])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = CALL $164($0, ($1 + [48]))
	$global$0 = ($2 + [16])
	return $4
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $85 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL $19($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL $19($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL $19($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL $19($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL $19($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL $19($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL $19($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL $19($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	*($4 + [16]) = [0]
	CALL $86(($4 + [16]), $0)
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$2 }
	CALL $51($4, $6)
	$5 = *($4 + [4])
	$6 = *($4)
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	*($4 + [20]) = $6
	*($4 + [16]) = $6
	*($4 + [24]) = $5
	CALL $87(($4 + [16]), $0)
	$0 = *($4)
	CALL send_deferred($1, $2, $0, (*($4 + [4]) - $0), $3)
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$3 }
	*($4 + [4]) = $0
	CALL $19($0)
	
.LABEL $label$3
	$global$0 = ($4 + [32])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL $17(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL $17([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $51(($6 + [28]), [8])
	$2 = ((int_32)$8 * (int_32)[40])
	$8 = *($6 + [28])
	if ( ((int_32)(*(($6 + [32])) - $8) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11948])
	
.LABEL $label$5
	$9 = ($5 + $2)
	CALL memcpy($8, $4, [8])
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$7 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$8:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$8 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$6 
	
.LABEL $label$7
	$5 = $2
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$10:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$11 }
	*(($2 + [-8])) = $8
	CALL $19($8)
	
.LABEL $label$11
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$12 }
	*(($2 + [-20])) = $1
	CALL $19($1)
	
.LABEL $label$12
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ($5 == 0) ){ goto $label$13 }
	CALL $19($5)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $17(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $19($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $19($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11948])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11948])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [16])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11948])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $2, [8])
	*(($2 = ($0 + [4]))) = (*($2) + [8])
	return $0
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [24]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12424])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12469])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [12519])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $19($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL $19($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $149 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$3 = ($global$0 - [32])
	$global$0 = $3
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$2 }
	if ( $2 ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [12814])
	$2 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy(($3 + [8]), $2, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$4 = *($3 + [8])
	if ( (*($1 + [16]) == 0) ){ goto $label$4 }
	*(($1 + [16])) = [0]
	
.LABEL $label$4
	*($1) = $4
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$2
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	$2 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy(($3 + [8]), $2, [8])
	$5 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $5
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $5) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [12814])
	$5 = *($2)
	
.LABEL $label$6
	CALL memcpy(($3 + [24]), $5, [8])
	*(($0 = (($3 + [8]) + [8]))) = *($3 + [24])
	*($2) = (*($2) + [8])
	*($1) = *($3 + [8])
	*(($1 + [8])) = *($0)
	if ( ((int_32)*($1 + [16]) == (int_32)[1]) ){ goto $label$7 }
	*(($1 + [16])) = [1]
	
.LABEL $label$7
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$1
	CALL eosio_assert([0], [13215])
	$global$0 = ($3 + [32])
}

void .FUNC $148 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [192])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $11($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [148]) = $2
	*($3 + [144]) = $2
	$5 = ($2 + $4)
	*($3 + [152]) = $5
	*($3 + [136]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	$5 = *(($3 + [152]))
	$2 = *($3 + [148])
	
.LABEL $label$5
	CALL memcpy(($3 + [136]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [12814])
	$2 = *($3 + [148])
	
.LABEL $label$6
	CALL memcpy(($3 + [128]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [120]) = [0]
	$6 = (int_64)0
	*($3 + [104]) = (int_64)0
	$5 = [0]
	
.LOOP $label$7:
	if ( ($2 <= *((($3 + [144]) + [8]))) ){ goto $label$8 }
	CALL eosio_assert([0], [13211])
	$2 = *($3 + [148])
	
.LABEL $label$8
	$4 = *($2)
	$2 = ($2 + [1])
	*($3 + [148]) = $2
	$5 = ($5 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $5)))
	$5 = ($5 + [7])
	$2 = $2
	if ( ($4 & [128]) ){ goto $label$7 }
	CALL $149(($3 + [144]), ($3 + [104]), (CASTING uint_32)(uint_64 $6))
	*(($2 = (($3 + [56]) + [8]))) = *((($3 + [144]) + [8]))
	*($3 + [56]) = *($3 + [144])
	*(($4 = (($3 + [160]) + [8]))) = *($2)
	*($3 + [160]) = *($3 + [56])
	$2 = *($4)
	*((($3 + [176]) + [8])) = $2
	*(($3 + [96])) = $2
	*($3 + [72]) = $0
	*($3 + [80]) = $1
	$6 = *($3 + [160])
	*($3 + [88]) = $6
	*($3 + [176]) = $6
	$6 = *((($3 + [104]) + [8]))
	*((($3 + [32]) + [8])) = $6
	$0 = *((($3 + [104]) + [16]))
	*((($3 + [32]) + [16])) = $0
	*((($3 + [8]) + [8])) = $6
	*((($3 + [8]) + [16])) = $0
	$6 = *($3 + [104])
	*($3 + [32]) = $6
	*($3 + [8]) = $6
	CALL $103(($3 + [72]), *($3 + [136]), *($3 + [128]), ($3 + [8]))
	$global$0 = ($3 + [192])
}

void .FUNC $145 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [144])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $11($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [136]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$5
	CALL memcpy(($3 + [136]), $2, [8])
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$6
	CALL memcpy(($3 + [128]), $5, [8])
	*($3 + [120]) = (int_64)0
	*($3 + [112]) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$7
	CALL memcpy(($3 + [112]), $5, [8])
	*($3 + [64]) = (int_64)0
	$5 = ($2 + [24])
	if ( ((int_32)$6 != (int_32)[24]) ){ goto $label$8 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$8
	CALL memcpy(($3 + [64]), $5, [8])
	*((($3 + [112]) + [8])) = *($3 + [64])
	*($3 + [104]) = (int_64)0
	*($3 + [96]) = (int_64)0
	$5 = ($2 + [32])
	if ( ((int_32)$6 != (int_32)[32]) ){ goto $label$9 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$9
	CALL memcpy(($3 + [96]), $5, [8])
	*($3 + [64]) = (int_64)0
	$5 = ($2 + [40])
	if ( ((int_32)$6 != (int_32)[40]) ){ goto $label$10 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$10
	CALL memcpy(($3 + [64]), $5, [8])
	*((($3 + [96]) + [8])) = *($3 + [64])
	$6 = ($2 + [48])
	if ( ((int_32)$4 != (int_32)[48]) ){ goto $label$11 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$11
	CALL memcpy(($3 + [64]), $6, [1])
	$6 = ($2 + [49])
	$5 = *($3 + [64])
	if ( ((int_32)$4 != (int_32)[49]) ){ goto $label$12 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$12
	$7 = ($2 + $4)
	CALL memcpy(($3 + [64]), $6, [1])
	$6 = ($2 + [50])
	$8 = *($3 + [64])
	if ( ((int_32)$4 != (int_32)[50]) ){ goto $label$13 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$13
	CALL memcpy(($3 + [64]), $6, [1])
	$4 = *($3 + [64])
	*(($3 + [88])) = $7
	$9 = *((($3 + [112]) + [8]))
	*((($3 + [48]) + [8])) = $9
	$10 = *((($3 + [96]) + [8]))
	*((($3 + [32]) + [8])) = $10
	*((($3 + [16]) + [8])) = $9
	*(($3 + [8])) = $10
	*($3 + [80]) = $2
	*(($3 + [84])) = ($2 + [51])
	*($3 + [72]) = $1
	*($3 + [64]) = $0
	$0 = *($3 + [112])
	*($3 + [48]) = $0
	$1 = *($3 + [96])
	*($3 + [32]) = $1
	*($3 + [16]) = $0
	*($3) = $1
	CALL $95(($3 + [64]), *($3 + [136]), *($3 + [128]), ($3 + [16]), $3, ((int_32)($5 & [255]) != (int_32)[0]), ((int_32)($8 & [255]) != (int_32)[0]), ((int_32)$4 != (int_32)[0]))
	$global$0 = ($3 + [144])
}

void .FUNC $144 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ($4 <= [512]) ){ goto $label$4 }
	$2 = CALL $11($4)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	$5 = ($3 + [40])
	$6 = $4
	goto $label$2 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $4)
	$6 = ($2 + $4)
	$5 = ($3 + [40])
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [12814])
	
.LABEL $label$1
	CALL memcpy($5, $2, [8])
	*(($3 + [28])) = ($2 + [8])
	*(($3 + [32])) = $6
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [24]) = $2
	CALL $76(($3 + [8]), *($3 + [40]))
	$global$0 = ($3 + [48])
}

void .FUNC $147 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [192])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $11($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*($3 + [148]) = $4
	*($3 + [144]) = $4
	*($3 + [152]) = ($4 + $5)
	*($3 + [136]) = [0]
	*($3 + [128]) = (int_64)0
	CALL $135(($3 + [144]), ($3 + [128]))
	*($3 + [120]) = (int_64)0
	$4 = *($3 + [148])
	if ( ((uint_32)(*($3 + [152]) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [12814])
	$4 = *($3 + [148])
	
.LABEL $label$4
	CALL memcpy(($3 + [120]), $4, [8])
	$4 = (*($3 + [148]) + [8])
	*($3 + [148]) = $4
	$5 = (($3 + [144]) + [8])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	$4 = *($3 + [148])
	
.LABEL $label$5
	CALL memcpy(($3 + [112]), $4, [8])
	$4 = (*($3 + [148]) + [8])
	*($3 + [148]) = $4
	*($3 + [104]) = (int_64)0
	*($3 + [96]) = (int_64)0
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [12814])
	$4 = *($3 + [148])
	
.LABEL $label$6
	CALL memcpy(($3 + [96]), $4, [8])
	$4 = (*($3 + [148]) + [8])
	*($3 + [148]) = $4
	*($3 + [64]) = (int_64)0
	$5 = (($3 + [144]) + [8])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [12814])
	$4 = *($3 + [148])
	
.LABEL $label$7
	CALL memcpy(($3 + [64]), $4, [8])
	*(($2 = (($3 + [96]) + [8]))) = *($3 + [64])
	*($3 + [148]) = (*($3 + [148]) + [8])
	*(($4 = (($3 + [48]) + [8]))) = *($5)
	*($3 + [48]) = *($3 + [144])
	*(($5 = (($3 + [160]) + [8]))) = *($4)
	*($3 + [160]) = *($3 + [48])
	$4 = *($5)
	*((($3 + [176]) + [8])) = $4
	*(($3 + [88])) = $4
	*($3 + [64]) = $0
	*($3 + [72]) = $1
	$0 = *($3 + [160])
	*($3 + [80]) = $0
	*($3 + [176]) = $0
	$4 = CALL $33(($3 + [32]), ($3 + [128]))
	$0 = *($2)
	*((($3 + [16]) + [8])) = $0
	*(($3 + [8])) = $0
	$0 = *($3 + [96])
	*($3 + [16]) = $0
	*($3) = $0
	CALL $101(($3 + [64]), $4, *($3 + [120]), *($3 + [112]), $3)
	if ( (*($4) & [1]) ){ goto $label$10 }
	if ( (*($3 + [128]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $19(*($4 + [8]))
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $19(*(($3 + [136])))
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [192])
}

void .FUNC $146 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $11($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [40]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$5
	$5 = ($2 + $4)
	CALL memcpy(($3 + [40]), $2, [8])
	$6 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$6
	CALL memcpy(($3 + [32]), $6, [8])
	*(($3 + [24])) = $5
	*($3 + [16]) = $2
	*(($3 + [20])) = ($2 + [16])
	*($3 + [8]) = $1
	*($3) = $0
	CALL $99($3, *($3 + [40]), *($3 + [32]))
	$global$0 = ($3 + [48])
}

void .FUNC $141 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $11($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [40]) = (int_64)0
	$5 = ($2 + $4)
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$5
	CALL memcpy(($3 + [40]), $2, [8])
	*(($3 + [28])) = ($2 + [8])
	*(($3 + [32])) = $5
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [24]) = $2
	CALL $88(($3 + [8]), *($3 + [40]))
	$global$0 = ($3 + [48])
}

void .FUNC $140 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $11($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [56]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$5
	CALL memcpy(($3 + [56]), $2, [8])
	$5 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$6
	$6 = ($2 + $4)
	CALL memcpy(($3 + [48]), $5, [8])
	$5 = ($2 + [16])
	if ( ((int_32)($4 & [-4]) != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$7
	CALL memcpy(($3 + [44]), $5, [4])
	*(($3 + [32])) = $6
	*($3 + [24]) = $2
	*((($3 + [8]) + [20])) = ($2 + [20])
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	CALL $77(($3 + [8]), *($3 + [56]), *($3 + [48]), *($3 + [44]))
	$global$0 = ($3 + [64])
}

void .FUNC $143 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $11($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*(($3 + [20])) = $2
	*(($3 + [24])) = ($2 + $4)
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $2
	CALL $71($3)
	$global$0 = ($3 + [32])
}

void .FUNC $142 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $11($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [40]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$5
	CALL memcpy(($3 + [40]), $2, [8])
	*($3 + [32]) = (int_64)0
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$6
	CALL memcpy(($3 + [32]), $5, [8])
	*($3) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$7
	$4 = ($2 + $4)
	CALL memcpy($3, $5, [8])
	$7 = *($3)
	*($3) = (int_64)0
	$5 = ($2 + [24])
	if ( ((int_32)$6 != (int_32)[24]) ){ goto $label$8 }
	CALL eosio_assert([0], [12814])
	
.LABEL $label$8
	CALL memcpy($3, $5, [8])
	$8 = *($3)
	*(($3 + [24])) = $4
	*($3 + [16]) = $2
	*(($3 + [20])) = ($2 + [32])
	*($3 + [8]) = $1
	*($3) = $0
	CALL $89($3, *($3 + [40]), *($3 + [32]), $7, $8)
	$global$0 = ($3 + [48])
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [56]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12424])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12469])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [12519])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$3 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	$8 = *($6 + [44])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($6 + [48])) = $8
	CALL $19($8)
	
.LABEL $label$13
	CALL $19($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$3 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$15 }
	$8 = *($9 + [44])
	if ( ($8 == 0) ){ goto $label$16 }
	*(($9 + [48])) = $8
	CALL $19($8)
	
.LABEL $label$16
	CALL $19($9)
	
.LABEL $label$15
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $3
	CALL db_remove_i64(*($1 + [60]))
	$9 = *(($1 + [64]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$18 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3479593662097129472, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL db_idx64_remove($9)
	
.LABEL $label$17
	$global$0 = ($2 + [16])
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [12337])
	
.LABEL $label$5
	$4 = CALL $11($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL $17([64])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [52]) = $0
	CALL $173(($3 + [32]), $5)
	*($5 + [60]) = [-1]
	*($5 + [56]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $98(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $12($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $19($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [56]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12607])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12653])
	
.LABEL $label$2
	*($5 + [24]) = *(($1 + [8]))
	$6 = [44]
	$7 = *($1)
	$3 = *($3)
	$9 = ($1 + [48])
	$8 = ($1 + [44])
	CALL $172($8, *($9), *($3), *(($3 + [4])))
	if ( ((int_64)$7 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [12704])
	
.LABEL $label$3
	$8 = *($8)
	$3 = *($9)
	$9 = ($3 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$5 }
	$6 = (($9 & [-8]) + $6)
	
.LABEL $label$5
	if ( ($6 <= [513]) ){ goto $label$7 }
	$4 = CALL $11($6)
	goto $label$6 
	
.LABEL $label$7
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$6
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $6)
	CALL $170(($5 + [8]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, $6)
	if ( ($6 <= [513]) ){ goto $label$8 }
	CALL $12($4)
	
.LABEL $label$8
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $26(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$10 }
	$1 = ($1 + [64])
	$6 = *($1)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$11 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3479593662097129472, ($5 + [32]), $7)
	*($1) = $6
	
.LABEL $label$11
	CALL db_idx64_update($6, $2, ($5 + [40]))
	
.LABEL $label$10
	$global$0 = ($5 + [48])
}

void .FUNC $71 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [128])
	$global$0 = $1
	CALL require_auth(*($0))
	*((($1 + [80]) + [32])) = [0]
	*($1 + [96]) = (int_64)-1
	*($1 + [116]) = [0]
	$2 = *($0)
	*($1 + [80]) = $2
	*($1 + [88]) = $2
	*($1 + [104]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)3479593662097129472, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $65(($1 + [80]), $3)
	
.LOOP $label$2:
	$3 = [0]
	$5 = CALL db_next_i64(*($4 + [60]), ($1 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $65(($1 + [80]), $5)
	
.LABEL $label$3
	CALL $72(($1 + [80]), $4)
	$4 = $3
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$1
	*((($1 + [40]) + [32])) = [0]
	*($1 + [56]) = (int_64)-1
	*($1 + [76]) = [0]
	$2 = *($0)
	*($1 + [40]) = $2
	*($1 + [48]) = $2
	*($1 + [64]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)-3999196469105000448, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $73(($1 + [40]), $3)
	
.LOOP $label$5:
	$3 = [0]
	$5 = CALL db_next_i64(*($4 + [56]), $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$3 = CALL $73(($1 + [40]), $5)
	
.LABEL $label$6
	CALL $74(($1 + [40]), $4)
	$4 = $3
	if ( $3 ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [32])) = (int_64)0
	*($1 + [16]) = (int_64)-1
	*($1 + [24]) = (int_64)0
	$2 = *($0)
	*($1) = $2
	*($1 + [8]) = $2
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)-3981182070595518464, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $75($1, $3)
	
.LOOP $label$8:
	$3 = [0]
	$5 = CALL db_next_i64(*($4 + [60]), ($1 + [120]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$3 = CALL $75($1, $5)
	
.LABEL $label$9
	CALL $61($1, $4)
	$4 = $3
	if ( $3 ){ goto $label$8 }
	
.LABEL $label$7
	$5 = *($1 + [24])
	if ( ($5 == 0) ){ goto $label$10 }
	$0 = ($1 + [28])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	CALL $19($4)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$13 }
	$3 = *(($1 + [24]))
	goto $label$11 
	
.LABEL $label$12
	$3 = $5
	
.LABEL $label$11
	*($0) = $5
	CALL $19($3)
	
.LABEL $label$10
	$5 = *($1 + [64])
	if ( ($5 == 0) ){ goto $label$15 }
	$0 = ($1 + [68])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$18:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	CALL $19($4)
	
.LABEL $label$19
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$18 }
	$3 = *(($1 + [64]))
	goto $label$16 
	
.LABEL $label$17
	$3 = $5
	
.LABEL $label$16
	*($0) = $5
	CALL $19($3)
	
.LABEL $label$15
	$0 = *($1 + [104])
	if ( ($0 == 0) ){ goto $label$20 }
	$6 = ($1 + [108])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$22 }
	
.LOOP $label$23:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$24 }
	$5 = *($4 + [44])
	if ( ($5 == 0) ){ goto $label$25 }
	*(($4 + [48])) = $5
	CALL $19($5)
	
.LABEL $label$25
	CALL $19($4)
	
.LABEL $label$24
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$23 }
	$3 = *(($1 + [104]))
	goto $label$21 
	
.LABEL $label$22
	$3 = $0
	
.LABEL $label$21
	*($6) = $0
	CALL $19($3)
	
.LABEL $label$20
	$global$0 = ($1 + [128])
}

void .FUNC $76 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	*($2 + [36]) = [0]
	$4 = *($0)
	*($2) = $4
	*($2 + [8]) = $4
	$0 = CALL db_find_i64($4, $4, (int_64)3479593662097129472, $1)
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$2 }
	$3 = CALL $65($2, $0)
	if ( ((int_32)*($3 + [56]) == (int_32)$2) ){ goto $label$1 }
	CALL eosio_assert([0], [12763])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [11403])
	CALL eosio_assert([0], [12360])
	CALL eosio_assert([0], [12394])
	
.LABEL $label$1
	$0 = CALL db_next_i64(*($3 + [60]), ($2 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	CALL $65($2, $0)
	
.LABEL $label$3
	CALL $72($2, $3)
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$4 }
	$6 = ($2 + [28])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	$7 = *($0 + [44])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($0 + [48])) = $7
	CALL $19($7)
	
.LABEL $label$9
	CALL $19($0)
	
.LABEL $label$8
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$7 }
	$3 = *(($2 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($6) = $5
	CALL $19($3)
	
.LABEL $label$4
	$global$0 = ($2 + [48])
}

void .FUNC $77 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	float_64 $9
	float_64 $10
	int_32 $11
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL require_auth($1)
	if ( (($3 + [-10]) <= [1791]) ){ goto $label$1 }
	CALL eosio_assert([0], [11423])
	
.LABEL $label$1
	*($4 + [168]) = [11433]
	*($4 + [172]) = CALL $25([11433])
	*($4 + [16]) = *($4 + [168])
	CALL $78(($4 + [64]), ($4 + [16]))
	*($4 + [184]) = $1
	*($4 + [176]) = (int_64)4923676439623659520
	CALL cancel_deferred(($4 + [176]))
	*(($4 + [160])) = [0]
	*($4 + [136]) = $1
	*($4 + [144]) = (int_64)-1
	$5 = *($0)
	*($4 + [128]) = $5
	*($4 + [152]) = (int_64)0
	$6 = CALL db_lowerbound_i64($5, $1, (int_64)3479030712143708160, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $79(($4 + [128]), $6)
	
.LOOP $label$3:
	$6 = [0]
	$8 = CALL db_next_i64(*($7 + [28]), ($4 + [64]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $79(($4 + [128]), $8)
	
.LABEL $label$4
	CALL $80(($4 + [128]), $7)
	$7 = $6
	if ( $6 ){ goto $label$3 }
	
.LABEL $label$2
	$6 = CALL $3((float_64)3339641.3333333335)
	$9 = ((float_64)((float_64)(float_64)360 / (float_64)(CASTING float_64)(uint_32 ($6 << [2]))) * (float_64)(CASTING float_64)(int_32 ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)24)) - ($6 & [1073741823])))
	$6 = ((int_32)CALL $3(((float_64)((float_64)CALL $10(((float_64)((float_64)$9) * (float_64)(float_64)3.141592653589793) / (float_64)(float_64)180)) * (float_64)(float_64)40075696) / (float_64)(float_64)3e4)) * (int_32)[10000]
	if ( $6) ){ goto $label$5 }
	CALL eosio_assert([0], [11226])
	
.LABEL $label$5
	$10 = ((float_64)((float_64)(float_64)360 / (float_64)(CASTING float_64)(uint_32 $6)) * (float_64)(CASTING float_64)(int_32 (((CASTING uint_32)(uint_64 $2) & [16777215]) - uint_32($6 >> [1]))))
	$5 = *($0)
	if ( ((int_64)CALL current_receiver() == (int_64)*($4 + [128])) ){ goto $label$6 }
	CALL eosio_assert([0], [12819])
	
.LABEL $label$6
	*(($6 = CALL $17([40])) + [24]) = ($4 + [128])
	*($6 + [8]) = $9
	*($6) = $2
	*($6 + [16]) = $10
	*($4 + [56]) = (($4 + [64]) + [24])
	*($4 + [52]) = ($4 + [64])
	*($4 + [48]) = ($4 + [64])
	CALL $81(($4 + [48]), $6)
	$2 = *($6)
	$8 = CALL db_store_i64(*(($4 + [136])), (int_64)3479030712143708160, $5, $2, ($4 + [64]), [24])
	*($6 + [28]) = $8
	$7 = ($4 + [144])
	if ( (uint_64)($2 <= *($7)) ){ goto $label$7 }
	*($7) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($4 + [48]) = $6
	$2 = *($6)
	*($4 + [64]) = $2
	*($4 + [40]) = $8
	$11 = ($4 + [156])
	$7 = *($11)
	if ( ((uint_32)$7 >= (uint_32)*(($4 + [160]))) ){ goto $label$10 }
	*($7 + [8]) = $2
	*($7 + [16]) = $8
	*($4 + [48]) = [0]
	*($7) = $6
	*($11) = ($7 + [24])
	$7 = *($4 + [48])
	$6 = [0]
	*($4 + [48]) = [0]
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $82(($4 + [152]), ($4 + [48]), ($4 + [64]), ($4 + [40]))
	$7 = *($4 + [48])
	$6 = [0]
	*($4 + [48]) = [0]
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $19($7)
	
.LABEL $label$8
	$2 = CALL $43()
	*((($4 + [64]) + [28])) = (int_64)0
	*(($4 + [108])) = (int_64)0
	*(($4 + [116])) = (int_64)0
	*($4 + [76]) = $6
	*($4 + [80]) = $6
	*($4 + [84 align=4]) = (int_64)0
	*($4 + [100 align=4]) = (int_64)0
	*($4 + [64]) = ((CASTING uint_32)(uint_64 ((int_64)$2 / (int_64)1000000)) + [60])
	*($4 + [56]) = (int_64)-3000216042388586496
	*($4 + [48]) = *($0)
	*($4 + [32]) = [11445]
	*($4 + [36]) = CALL $25([11445])
	*($4 + [8]) = *($4 + [32])
	$7 = CALL $78(($4 + [40]), ($4 + [8]))
	*($4 + [24]) = $1
	CALL $83(($4 + [100]), ($4 + [48]), $0, $7, ($4 + [24]))
	$1 = *($0)
	*($4 + [84]) = $3
	CALL $84(($4 + [64]), ($4 + [176]), $1, $6)
	CALL $85(($4 + [64]))
	$8 = *($4 + [152])
	if ( ($8 == 0) ){ goto $label$11 }
	$6 = *((($4 + [128]) + [28]))
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$13 }
	
.LOOP $label$14:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	CALL $19($7)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$14 }
	$6 = *(($4 + [152]))
	goto $label$12 
	
.LABEL $label$13
	$6 = $8
	
.LABEL $label$12
	*(($4 + [156])) = $8
	CALL $19($6)
	
.LABEL $label$11
	$global$0 = ($4 + [192])
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*(($1 + [52])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12424])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12469])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [12519])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $19($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL $19($9)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [56]))
	$9 = *($1 + [60])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$16 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3999196469105000448, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL db_idx64_remove($9)
	
.LABEL $label$15
	$global$0 = ($2 + [16])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [12337])
	
.LABEL $label$5
	$4 = CALL $11($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL $17([80])) + [24]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [40]) = [0]
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = $0
	CALL $166(($3 + [32]), $5)
	*($5 + [60]) = $1
	*($5 + [64 align=4]) = (int_64)-1
	*($5 + [72 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $106(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $12($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $19($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [12023])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [12128])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [12061])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [12128])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [12337])
	
.LABEL $label$5
	$4 = CALL $11($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL $17([40])) + [24]) = $0
	CALL $174(($3 + [32]), $5)
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $82(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $12($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $19($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $98 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $17(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $19($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $19($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $99 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth($1)
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	*($3 + [52]) = [0]
	$4 = *($0)
	*($3 + [16]) = $4
	*($3 + [24]) = $4
	CALL $100(($3 + [8]), ($3 + [16]), $2, [11547])
	if ( ((int_64)*(*($3 + [12]) + [8]) == (int_64)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [11492])
	
.LABEL $label$1
	$1 = *($3 + [8])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( $0) ){ goto $label$2 }
	CALL eosio_assert([0], [12360])
	CALL eosio_assert([0], [12394])
	
.LABEL $label$2
	$5 = CALL db_next_i64(*($0 + [56]), ($3 + [56]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	CALL $73((CASTING uint_32)(uint_64 $1), $5)
	
.LABEL $label$3
	CALL $74(($3 + [16]), $0)
	$6 = *($3 + [40])
	if ( ($6 == 0) ){ goto $label$4 }
	$7 = ($3 + [44])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$8 }
	CALL $19($5)
	
.LABEL $label$8
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($3 + [40]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $6
	
.LABEL $label$5
	*($7) = $6
	CALL $19($0)
	
.LABEL $label$4
	$global$0 = ($3 + [64])
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $17(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $19($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $19($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $95 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_64 $9
	int_32 $10
	$8 = ($global$0 - [272])
	$global$0 = $8
	*($8 + [184]) = $2
	CALL require_auth($1)
	*((($8 + [144]) + [32])) = [0]
	*($8 + [160]) = (int_64)-1
	*($8 + [168]) = (int_64)0
	*($8 + [180]) = [0]
	$9 = *($0)
	*($8 + [144]) = $9
	*($8 + [152]) = $9
	CALL $96(($8 + [136]), ($8 + [144]), $2, [11403])
	if ( ((int_64)*(*($8 + [140]) + [8]) == (int_64)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [11492])
	
.LABEL $label$1
	*((($8 + [96]) + [32])) = (int_64)0
	*($8 + [112]) = (int_64)-1
	*($8 + [120]) = (int_64)0
	$2 = *($0)
	*($8 + [96]) = $2
	*($8 + [104]) = $2
	*($8 + [88]) = ($8 + [96])
	CALL $62(($8 + [192]), ($8 + [88]), ($8 + [184]))
	$10 = *($8 + [196])
	if ( ($10 == 0) ){ goto $label$2 }
	if ( ((int_64)*($8 + [184]) != (int_64)( (int_64)0 ? *($10 + [24]) : *(($10 + [40])) )) ){ goto $label$2 }
	CALL eosio_assert([0], [11503])
	
.LABEL $label$2
	*((($8 + [48]) + [32])) = [0]
	*($8 + [64]) = (int_64)-1
	*($8 + [72]) = (int_64)0
	*($8 + [84]) = [0]
	$2 = *($0)
	*($8 + [48]) = $2
	*($8 + [56]) = $2
	$10 = CALL db_find_i64($2, $2, (int_64)-3999196469105000448, *($8 + [184]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	if ( ((int_32)*(CALL $73(($8 + [48]), $10) + [52]) == (int_32)($8 + [48])) ){ goto $label$4 }
	CALL eosio_assert([0], [12763])
	
.LABEL $label$4
	CALL eosio_assert([0], [11514])
	
.LABEL $label$3
	*((($8 + [8]) + [32])) = [0]
	*($8 + [24]) = (int_64)-1
	$2 = *($0)
	*($8 + [8]) = $2
	*($8 + [16]) = $2
	*($8 + [32]) = (int_64)0
	$10 = CALL db_lowerbound_i64($2, $2, (int_64)-3945153273576554496, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$6 }
	CALL $66(($8 + [8]), $10)
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert([0], [11372])
	
.LABEL $label$5
	$10 = ($8 + [16])
	if ( ((int_64)*(CALL $66(($8 + [8]), CALL $fimport$25(*($8 + [8]), *($10), (int_64)-3945153273576554496, (int_64)0)) + [16]) == (int_64)*($3 + [8])) ){ goto $label$7 }
	CALL eosio_assert([0], [11205])
	
.LABEL $label$7
	if ( ((int_64)*(CALL $66(($8 + [8]), CALL $fimport$25(*($8 + [8]), *($10), (int_64)-3945153273576554496, (int_64)0)) + [24]) == (int_64)*($4 + [8])) ){ goto $label$8 }
	CALL eosio_assert([0], [11525])
	
.LABEL $label$8
	if ( ((int_64)((int_64)*($4) | (int_64)*($3)) != (int_64)0) ){ goto $label$9 }
	CALL eosio_assert([0], [11536])
	
.LABEL $label$9
	$2 = *($0)
	if ( ((int_64)CALL current_receiver() == (int_64)*($8 + [48])) ){ goto $label$10 }
	CALL eosio_assert([0], [12819])
	
.LABEL $label$10
	*(($0 = CALL $17([64])) + [52]) = ($8 + [48])
	*($0 + [8]) = $1
	*($0 + [48]) = $5
	*($0 + [49]) = $6
	*($0 + [50]) = $7
	*($0) = *($8 + [184])
	*($0 + [16]) = *($3)
	*(($0 + [24])) = *(($3 + [8]))
	*($0 + [32]) = *($4)
	*(($0 + [40])) = *(($4 + [8]))
	*($8 + [256]) = (($8 + [192]) + [51])
	*($8 + [252]) = ($8 + [192])
	*($8 + [248]) = ($8 + [192])
	CALL $97(($8 + [248]), $0)
	$1 = *($0)
	$3 = (($8 + [48]) + [8])
	*($0 + [56]) = CALL db_store_i64(*($3), (int_64)-3999196469105000448, $2, $1, ($8 + [192]), [51])
	$4 = ($8 + [64])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$11 }
	*($4) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$1 = *($0)
	$9 = *($3)
	*($8 + [264]) = *(($0 + [8]))
	*($0 + [60]) = CALL db_idx64_store($9, (int_64)-3999196469105000448, $2, $1, ($8 + [264]))
	*($8 + [248]) = $0
	$1 = *($0)
	*($8 + [192]) = $1
	$4 = *(($0 + [56]))
	*($8 + [264]) = $4
	$10 = ($8 + [76])
	$3 = *($10)
	if ( ((uint_32)$3 >= (uint_32)*(($8 + [80]))) ){ goto $label$14 }
	*($3 + [8]) = $1
	*($3 + [16]) = $4
	*($8 + [248]) = [0]
	*($3) = $0
	*($10) = ($3 + [24])
	$0 = *($8 + [248])
	*($8 + [248]) = [0]
	if ( $0 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $98(($8 + [72]), ($8 + [248]), ($8 + [192]), ($8 + [264]))
	$0 = *($8 + [248])
	*($8 + [248]) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL $19($0)
	
.LABEL $label$12
	$4 = *($8 + [32])
	if ( ($4 == 0) ){ goto $label$15 }
	$10 = ($8 + [36])
	$0 = *($10)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$17 }
	
.LOOP $label$18:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$19 }
	CALL $19($3)
	
.LABEL $label$19
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$18 }
	$0 = *(($8 + [32]))
	goto $label$16 
	
.LABEL $label$17
	$0 = $4
	
.LABEL $label$16
	*($10) = $4
	CALL $19($0)
	
.LABEL $label$15
	$4 = *($8 + [72])
	if ( ($4 == 0) ){ goto $label$20 }
	$10 = ($8 + [76])
	$0 = *($10)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$22 }
	
.LOOP $label$23:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$24 }
	CALL $19($3)
	
.LABEL $label$24
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$23 }
	$0 = *(($8 + [72]))
	goto $label$21 
	
.LABEL $label$22
	$0 = $4
	
.LABEL $label$21
	*($10) = $4
	CALL $19($0)
	
.LABEL $label$20
	$4 = *($8 + [120])
	if ( ($4 == 0) ){ goto $label$25 }
	$10 = ($8 + [124])
	$0 = *($10)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$27 }
	
.LOOP $label$28:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$29 }
	CALL $19($3)
	
.LABEL $label$29
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$28 }
	$0 = *(($8 + [120]))
	goto $label$26 
	
.LABEL $label$27
	$0 = $4
	
.LABEL $label$26
	*($10) = $4
	CALL $19($0)
	
.LABEL $label$25
	$10 = *($8 + [168])
	if ( ($10 == 0) ){ goto $label$30 }
	$5 = ($8 + [172])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$10) ){ goto $label$32 }
	
.LOOP $label$33:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$34 }
	$4 = *($3 + [44])
	if ( ($4 == 0) ){ goto $label$35 }
	*(($3 + [48])) = $4
	CALL $19($4)
	
.LABEL $label$35
	CALL $19($3)
	
.LABEL $label$34
	if ( ((int_32)$10 != (int_32)$0) ){ goto $label$33 }
	$0 = *(($8 + [168]))
	goto $label$31 
	
.LABEL $label$32
	$0 = $10
	
.LABEL $label$31
	*($5) = $10
	CALL $19($0)
	
.LABEL $label$30
	$global$0 = ($8 + [272])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$6 = *(($5 + [-24]))
	if ( ((int_32)*($6 + [56]) == (int_32)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [12763])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$2
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)3479593662097129472, $2)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$5 }
	CALL eosio_assert([0], $3)
	
.LABEL $label$5
	$6 = CALL $65($1, $6)
	if ( ((int_32)*($6 + [56]) == (int_32)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [12763])
	
.LABEL $label$1
	*($0 + [4]) = $6
	*($0) = $1
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11948])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11948])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11948])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *(($1 + [24]))
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11948])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [32])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11948])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *(($1 + [40]))
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [11948])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2 + [8]) = *($1 + [48])
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert([0], [11948])
	$4 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($4, ($2 + [8]), [1])
	$4 = (*($3) + [1])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *($1 + [49])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert([0], [11948])
	$4 = *($3)
	
.LABEL $label$8
	CALL memcpy($4, ($2 + [8]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	*($2 + [8]) = *($1 + [50])
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$9 }
	CALL eosio_assert([0], [11948])
	$4 = *(($0 + [4]))
	
.LABEL $label$9
	CALL memcpy($4, ($2 + [8]), [1])
	*(($1 = ($0 + [4]))) = (*($1) + [1])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [44]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12607])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12653])
	
.LABEL $label$2
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	*($1 + [24]) = *(*($3 + [12]))
	$4 = $4
	$3 = ($4 + [-48])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($4 + [-4])
	CALL $93($5, $1)
	CALL db_update_i64(*($1 + [48]), $2, $3, [44])
	if ( ((int_64)*($0 + [16]) == (int_64)0) ){ goto $label$3 }
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$3
	*(($0 + [16])) = (int_64)1
	$global$0 = ($5 + [16])
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [12337])
	
.LABEL $label$5
	$4 = CALL $11($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $17([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [36]) = $0
	CALL $175(($3 + [16]), $5)
	*($5 + [40]) = $1
	*($3 + [8]) = $5
	*($3 + [4]) = [0]
	*($3) = $1
	$7 = ($0 + [28])
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = $1
	*($3 + [8]) = [0]
	*($2) = $5
	*($7) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $176(($0 + [24]), ($3 + [8]), ($3 + [4]), $3)
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $12($4)
	
.LABEL $label$7
	$1 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $19($1)
	
.LABEL $label$10
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)*($1 + [36]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12424])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12469])
	
.LABEL $label$2
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$5 }
	$4 = ($3 + [-24])
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert([0], [12519])
	$5 = *($2)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	$2 = $3
	
.LOOP $label$7:
	$4 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $4
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $19($3)
	
.LABEL $label$8
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$7 }
	$4 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$4 = ($3 + [-24])
	
.LABEL $label$4
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $19($2)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $4
	CALL db_remove_i64(*($1 + [40]))
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11948])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11948])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2 + [8]) = *($1 + [16])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11948])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *($1 + [24])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11948])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [32])
	if ( ((int_32)(*($5) - $4) > (int_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [11948])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $3, [4])
	$4 = (*($3) + [4])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [36])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [11948])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy($4, $5, [4])
	$4 = (*($3) + [4])
	*($3) = $4
	$1 = ($1 + [40])
	if ( ((int_32)(*($6) - $4) > (int_32)[3]) ){ goto $label$7 }
	CALL eosio_assert([0], [11948])
	$4 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($4, $1, [4])
	*(($1 = ($0 + [4]))) = (*($1) + [4])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL $17(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $42($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $19($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $139 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [128])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $11($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [84]) = $2
	*($3 + [80]) = $2
	*($3 + [88]) = ($2 + $4)
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	$2 = *($3 + [84])
	
.LABEL $label$5
	CALL memcpy(($3 + [72]), $2, [8])
	*($3 + [84]) = ($2 + [8])
	*($3 + [64]) = [0]
	*($3 + [56]) = (int_64)0
	CALL $136(($3 + [80]), ($3 + [56]))
	*(($2 = (($3 + [8]) + [8]))) = *((($3 + [80]) + [8]))
	*($3 + [8]) = *($3 + [80])
	*(($4 = (($3 + [96]) + [8]))) = *($2)
	*($3 + [96]) = *($3 + [8])
	$2 = *($4)
	*((($3 + [112]) + [8])) = $2
	*(($3 + [48])) = $2
	*($3 + [24]) = $0
	*($3 + [32]) = $1
	$0 = *($3 + [96])
	*($3 + [40]) = $0
	*($3 + [112]) = $0
	CALL $69(($3 + [24]), *($3 + [72]), ($3 + [56]))
	$2 = *($3 + [56])
	if ( ($2 == 0) ){ goto $label$6 }
	*($3 + [60]) = $2
	CALL $19($2)
	
.LABEL $label$6
	$global$0 = ($3 + [128])
}

void .FUNC $130 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12607])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12653])
	
.LABEL $label$2
	$2 = *($2)
	if ( ((int_64)*($2 + [8]) == (int_64)*($1 + [8])) ){ goto $label$3 }
	CALL eosio_assert([0], [13120])
	
.LABEL $label$3
	$5 = (int_64)
	*($1) = $5(*($1) - *($2)))
	if ( ((int_64)$5 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [13168])
	$5 = *($1)
	
.LABEL $label$4
	if ( ((int_64)$5 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [13190])
	
.LABEL $label$5
	$2 = $3
	$3 = ($2 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	*($4 + [8]) = *(($1 + [8]))
	CALL memcpy(($2 + [-8]), ($4 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), (int_64)0, $3, [16])
	if ( ((int_64)*($0 + [16]) == (int_64)0) ){ goto $label$6 }
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$6
	*(($0 + [16])) = (int_64)1
	$global$0 = ($4 + [16])
}

void .FUNC $131 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = [0]
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [52]) = [0]
	$5 = *($0)
	*($3 + [16]) = $5
	*($3 + [24]) = $5
	*($3 + [40]) = (int_64)0
	$0 = CALL db_lowerbound_i64($5, $5, (int_64)3479593662097129472, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $65(($3 + [16]), $0)
	
.LABEL $label$1
	$0 = CALL $25([11891])
	if ( ($0 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [12239])
	goto $label$5 
	
.LABEL $label$6
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$5 = (int_64)0
	
.LOOP $label$7:
	$6 = *(($0 + [11890]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [12284])
	
.LABEL $label$8
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$7 }
	*($3 + [8]) = ((int_64)((int_64)$5 << (int_64)8) | (int_64)2)
	if ( ($4 == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	*($3 + [8]) = (int_64)2
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	if ( (int_64)($1 == 0) ){ goto $label$2 }
	
.LOOP $label$10:
	$0 = CALL db_next_i64(*($4 + [60]), ($3 + [56]))
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$9 }
	$4 = CALL $65(($3 + [16]), $0)
	$1 = ((int_64)$1 + (int_64)-1)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$10 }
	goto $label$2 
	
.LABEL $label$9
	$4 = [0]
	
.LABEL $label$2
	if ( (int_64)($2 == 0) ){ goto $label$12 }
	if ( ($4 == 0) ){ goto $label$11 }
	
.LOOP $label$13:
	*($3 + [56]) = ($3 + [8])
	CALL $132(($3 + [16]), $4, ($3 + [56]))
	$0 = CALL db_next_i64(*($4 + [60]), ($3 + [56]))
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$11 }
	$4 = CALL $65(($3 + [16]), $0)
	$2 = ((int_64)$2 + (int_64)-1)
	if ( ((int_64)($2 == 0) == 0) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ($4 == 0) ){ goto $label$11 }
	*($3 + [56]) = ($3 + [8])
	CALL $133(($3 + [16]), $4, ($3 + [56]))
	$0 = CALL db_next_i64(*($4 + [60]), ($3 + [56]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$11 }
	
.LOOP $label$14:
	$0 = CALL $65(($3 + [16]), $0)
	*($3 + [56]) = ($3 + [8])
	CALL $133(($3 + [16]), $0, ($3 + [56]))
	$0 = CALL db_next_i64(*($0 + [60]), ($3 + [56]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$14 }
	
.LABEL $label$11
	$7 = *($3 + [40])
	if ( ($7 == 0) ){ goto $label$15 }
	$8 = ($3 + [44])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$17 }
	
.LOOP $label$18:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$19 }
	$4 = *($6 + [44])
	if ( ($4 == 0) ){ goto $label$20 }
	*(($6 + [48])) = $4
	CALL $19($4)
	
.LABEL $label$20
	CALL $19($6)
	
.LABEL $label$19
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$18 }
	$0 = *(($3 + [40]))
	goto $label$16 
	
.LABEL $label$17
	$0 = $7
	
.LABEL $label$16
	*($8) = $7
	CALL $19($0)
	
.LABEL $label$15
	$global$0 = ($3 + [64])
}

void .FUNC $132 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [56]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12607])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12653])
	
.LABEL $label$2
	*($4 + [24]) = *(($1 + [8]))
	*(($1 + [24])) = *(*($2))
	$6 = *($1 + [44])
	$5 = *(($1 + [48]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	$9 = *($1)
	$2 = [44]
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$2 = (($7 & [-8]) + $2)
	
.LABEL $label$4
	if ( ($2 <= [513]) ){ goto $label$6 }
	$3 = CALL $11($2)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$5
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $2)
	CALL $170(($4 + [8]), $1)
	CALL db_update_i64(*($1 + [60]), (int_64)0, $3, $2)
	if ( ($2 <= [513]) ){ goto $label$7 }
	CALL $12($3)
	
.LABEL $label$7
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($4 + [40]) = *(($1 + [8]))
	if ( (CALL $26(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$9 }
	$1 = ($1 + [64])
	$2 = *($1)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$10 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3479593662097129472, ($4 + [32]), $9)
	*($1) = $2
	
.LABEL $label$10
	CALL db_idx64_update($2, (int_64)0, ($4 + [40]))
	
.LABEL $label$9
	$global$0 = ($4 + [48])
}

void .FUNC $133 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [56]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12607])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12653])
	
.LABEL $label$2
	*($4 + [24]) = *(($1 + [8]))
	*(($1 + [24])) = *(*($2))
	$6 = *($1 + [44])
	$5 = *(($1 + [48]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	$9 = *($1)
	$2 = [44]
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$2 = (($7 & [-8]) + $2)
	
.LABEL $label$4
	if ( ($2 <= [513]) ){ goto $label$6 }
	$3 = CALL $11($2)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$5
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $2)
	CALL $170(($4 + [8]), $1)
	CALL db_update_i64(*($1 + [60]), (int_64)0, $3, $2)
	if ( ($2 <= [513]) ){ goto $label$7 }
	CALL $12($3)
	
.LABEL $label$7
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($4 + [40]) = *(($1 + [8]))
	if ( (CALL $26(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$9 }
	$1 = ($1 + [64])
	$2 = *($1)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$10 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3479593662097129472, ($4 + [32]), $9)
	*($1) = $2
	
.LABEL $label$10
	CALL db_idx64_update($2, (int_64)0, ($4 + [40]))
	
.LABEL $label$9
	$global$0 = ($4 + [48])
}

void .FUNC $134 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [208])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $11($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*($3 + [164]) = $4
	*($3 + [160]) = $4
	*($3 + [168]) = ($4 + $5)
	*($3 + [152]) = [0]
	*($3 + [144]) = (int_64)0
	CALL $135(($3 + [160]), ($3 + [144]))
	$4 = *($3 + [164])
	if ( ((uint_32)(*($3 + [168]) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [12814])
	$4 = *($3 + [164])
	
.LABEL $label$4
	CALL memcpy(($3 + [136]), $4, [8])
	$4 = (*($3 + [164]) + [8])
	*($3 + [164]) = $4
	*($3 + [128]) = (int_64)0
	*($3 + [120]) = (int_64)0
	$5 = (($3 + [160]) + [8])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	$4 = *($3 + [164])
	
.LABEL $label$5
	CALL memcpy(($3 + [120]), $4, [8])
	$4 = (*($3 + [164]) + [8])
	*($3 + [164]) = $4
	*($3 + [64]) = (int_64)0
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [12814])
	$4 = *($3 + [164])
	
.LABEL $label$6
	CALL memcpy(($3 + [64]), $4, [8])
	*(($5 = (($3 + [120]) + [8]))) = *($3 + [64])
	$4 = (*($3 + [164]) + [8])
	*($3 + [164]) = $4
	*($3 + [112]) = (int_64)0
	$2 = (($3 + [160]) + [8])
	if ( ((uint_32)(*($2) - $4) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [12814])
	$4 = *($3 + [164])
	
.LABEL $label$7
	CALL memcpy(($3 + [112]), $4, [8])
	*($3 + [164]) = (*($3 + [164]) + [8])
	*($3 + [104]) = [0]
	*($3 + [96]) = (int_64)0
	CALL $136(($3 + [160]), ($3 + [96]))
	*(($4 = (($3 + [48]) + [8]))) = *($2)
	*($3 + [48]) = *($3 + [160])
	*(($2 = (($3 + [176]) + [8]))) = *($4)
	*($3 + [176]) = *($3 + [48])
	$4 = *($2)
	*((($3 + [192]) + [8])) = $4
	*(($3 + [88])) = $4
	*($3 + [64]) = $0
	*($3 + [72]) = $1
	$0 = *($3 + [176])
	*($3 + [80]) = $0
	*($3 + [192]) = $0
	$4 = CALL $33(($3 + [32]), ($3 + [144]))
	$0 = *($5)
	*((($3 + [16]) + [8])) = $0
	*(($3 + [8])) = $0
	$0 = *($3 + [120])
	*($3 + [16]) = $0
	*($3) = $0
	CALL $64(($3 + [64]), $4, *($3 + [136]), $3, *($3 + [112]), ($3 + [96]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL $19(*($4 + [8]))
	
.LABEL $label$8
	$4 = *($3 + [96])
	if ( ($4 == 0) ){ goto $label$9 }
	*($3 + [100]) = $4
	CALL $19($4)
	
.LABEL $label$9
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$10 }
	CALL $19(*(($3 + [152])))
	
.LABEL $label$10
	$global$0 = ($3 + [208])
}

int_32 .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $137($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $17($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $35($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $35($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $32($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $19($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [13211])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$7 = *($1)
	$5 = *($1 + [4])
	$6 = int_32(($5 - $7) >> [3])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $138($1, ($2 - $6))
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$5 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $5
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($0 + [4])
	$2 = *($6)
	$4 = ($0 + [8])
	
.LOOP $label$7:
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [12814])
	$2 = *($6)
	
.LABEL $label$8
	CALL memcpy($7, $2, [8])
	$2 = (*($6) + [8])
	*($6) = $2
	$7 = ($7 + [8])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [13211])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $51($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [12814])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $181 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$0 = *(*($0))
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11948])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11948])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [8]), [8])
	*($3) = (*($3) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $129 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [208])
	$global$0 = $3
	if ( CALL has_auth($1) ){ goto $label$1 }
	if ( CALL has_auth(*($0)) ){ goto $label$1 }
	CALL eosio_assert([0], [11850])
	
.LABEL $label$1
	$4 = [0]
	*(($3 + [200])) = [0]
	*($3 + [184]) = (int_64)-1
	$5 = *($0)
	*($3 + [168]) = $5
	*($3 + [176]) = $5
	*($3 + [192]) = (int_64)0
	$6 = CALL db_lowerbound_i64($5, $5, (int_64)-3945153273576554496, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $66(($3 + [168]), $6)
	if ( ((int_64)*($2 + [8]) == (int_64)*($4 + [16])) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	CALL eosio_assert([0], [11372])
	if ( ((int_64)*($2 + [8]) == (int_64)*([0] + [16])) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert([0], [11205])
	
.LABEL $label$2
	$6 = [0]
	*(($3 + [160])) = [0]
	*($3 + [144]) = (int_64)-1
	$5 = *($0)
	*($3 + [128]) = $5
	*($3 + [136]) = $1
	*($3 + [152]) = (int_64)0
	$7 = CALL db_lowerbound_i64($5, $1, (int_64)-3963167672086036480, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$6 = CALL $55(($3 + [128]), $7)
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert([0], [11260])
	
.LABEL $label$5
	if ( ((int_64)*($6 + [8]) == (int_64)*(($2 + [8]))) ){ goto $label$7 }
	CALL eosio_assert([0], [12180])
	
.LABEL $label$7
	if ( ((int_64)*($6) >= (int_64)*($2)) ){ goto $label$8 }
	CALL eosio_assert([0], [11868])
	
.LABEL $label$8
	*($3 + [80]) = (int_64)-3000216042388586496
	*($3 + [72]) = *($0)
	$5 = *($4)
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$4 = CALL $25([11879])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$12 }
	*($3 + [8]) = ($4 << [1])
	$7 = (($3 + [8]) | [1])
	if ( $4 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$8 = (($4 + [16]) & [-16])
	$7 = CALL $17($8)
	*($3 + [8]) = ($8 | [1])
	*($3 + [16]) = $7
	*($3 + [12]) = $4
	
.LABEL $label$11
	CALL memcpy($7, [11879], $4)
	
.LABEL $label$10
	*(($7 + $4)) = [0]
	*(($3 + [48])) = *(($2 + [8]))
	$4 = (($3 + [8]) + [8])
	*(($3 + [64])) = *($4)
	*($4) = [0]
	*($3 + [32]) = $1
	*($3 + [24]) = *($0)
	*($3 + [40]) = *($2)
	*($3 + [56]) = *($3 + [8])
	*($3 + [8]) = (int_64)0
	$4 = CALL $49(($3 + [88]), ($3 + [72]), $5, (int_64)-3617168760277827584, ($3 + [24]))
	CALL $50($4)
	$0 = *($4 + [28])
	if ( ($0 == 0) ){ goto $label$13 }
	*(($4 + [32])) = $0
	CALL $19($0)
	
.LABEL $label$13
	$0 = *($4 + [16])
	if ( ($0 == 0) ){ goto $label$14 }
	*(($4 + [20])) = $0
	CALL $19($0)
	
.LABEL $label$14
	if ( ((*(($3 + [56])) & [1]) == 0) ){ goto $label$15 }
	CALL $19(*(($3 + [64])))
	
.LABEL $label$15
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$16 }
	CALL $19(*(($3 + [16])))
	
.LABEL $label$16
	if ( ((int_64)*(($6 + [8])) == (int_64)*(($2 + [8]))) ){ goto $label$17 }
	CALL eosio_assert([0], [12180])
	
.LABEL $label$17
	if ( ((int_64)*($6) != (int_64)*($2)) ){ goto $label$20 }
	if ( $6 ){ goto $label$21 }
	CALL eosio_assert([0], [12360])
	CALL eosio_assert([0], [12394])
	
.LABEL $label$21
	$2 = CALL db_next_i64(*($6 + [20]), ($3 + [24]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$22 }
	CALL $55(($3 + [128]), $2)
	
.LABEL $label$22
	CALL $56(($3 + [128]), $6)
	$4 = *($3 + [152])
	if ( $4 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($3 + [24]) = $2
	if ( $6 ){ goto $label$23 }
	CALL eosio_assert([0], [12572])
	
.LABEL $label$23
	CALL $130(($3 + [128]), $6, ($3 + [24]))
	$4 = *($3 + [152])
	if ( ($4 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$0 = ($3 + [156])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$25 }
	
.LOOP $label$26:
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$27 }
	CALL $19($6)
	
.LABEL $label$27
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$26 }
	$2 = *(($3 + [152]))
	goto $label$24 
	
.LABEL $label$25
	$2 = $4
	
.LABEL $label$24
	*($0) = $4
	CALL $19($2)
	
.LABEL $label$18
	$4 = *($3 + [192])
	if ( ($4 == 0) ){ goto $label$28 }
	$0 = ($3 + [196])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$30 }
	
.LOOP $label$31:
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$32 }
	CALL $19($6)
	
.LABEL $label$32
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$31 }
	$2 = *(($3 + [192]))
	goto $label$29 
	
.LABEL $label$30
	$2 = $4
	
.LABEL $label$29
	*($0) = $4
	CALL $19($2)
	
.LABEL $label$28
	$global$0 = ($3 + [208])
	return (unreachable)
	
.LABEL $label$9
	CALL $32(($3 + [8]))
}

void .FUNC $128 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $17(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $19($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $19($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $8 (float_64 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	float_64 $7
	float_64 $8
	float_64 $9
	int_32 $10
	float_64 $11
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = (CASTING int_64)(float_64 $0)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)63))
	$5 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$6 = ($5) & [2147483647]
	if ( ((uint_32)$6) > (uint_32)[1074752122]) ){ goto $label$13 }
	if ( ((int_32)($5 & [1048575]) == (int_32)[598523]) ){ goto $label$10 }
	if ( ((uint_32)$6 > (uint_32)[1073928572]) ){ goto $label$12 }
	if ( ($4 == 0) ){ goto $label$7 }
	$0 = ((float_64)$0 + (float_64)(float_64)1.5707963267341256)
	$7 = ((float_64)$0 + (float_64)(float_64)6.077100506506192e-11)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)6.077100506506192e-11)
	$global$0 = ($2 + [48])
	return [-1]
	
.LABEL $label$13
	if ( ((uint_32)$6 > (uint_32)[1075594811]) ){ goto $label$14 }
	if ( ((uint_32)$6 > (uint_32)[1075183036]) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)[1074977148]) ){ goto $label$10 }
	if ( ($4 == 0) ){ goto $label$5 }
	$0 = ((float_64)$0 + (float_64)(float_64)4.712388980202377)
	$7 = ((float_64)$0 + (float_64)(float_64)1.8231301519518578e-10)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)1.8231301519518578e-10)
	$global$0 = ($2 + [48])
	return [-3]
	
.LABEL $label$14
	if ( ((uint_32)$6 <= (uint_32)[1094263290]) ){ goto $label$10 }
	if ( ($6 <= [2146435072]) ){ goto $label$9 }
	$0 = (float_64)
	*($1) = $0($0 - $0))
	*($1 + [8]) = $0
	$global$0 = ($2 + [48])
	return [0]
	
.LABEL $label$12
	if ( ($4 == 0) ){ goto $label$6 }
	$0 = ((float_64)$0 + (float_64)(float_64)3.1415926534682512)
	$7 = ((float_64)$0 + (float_64)(float_64)1.2154201013012384e-10)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)1.2154201013012384e-10)
	$global$0 = ($2 + [48])
	return [-2]
	
.LABEL $label$11
	if ( ((int_32)$6 != (int_32)[1075388923]) ){ goto $label$8 }
	
.LABEL $label$10
	$9 = ((float_64)$7 * (float_64)(float_64)6.077100506506192e-11)
	$7 = ((float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.6366197723675814) + (float_64)(float_64)6755399441055744) + (float_64)(float_64)-6755399441055744)
	$8 = ((float_64)$0 + (float_64)((float_64)$7 * (float_64)(float_64)-1.5707963267341256))
	$0 = (float_64)
	*($1) = $0($8 - $9))
	$10 = uint_32($6 >> [20])
	$5 = ((int_32)($10 - ((CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $0) >> (uint_64)(int_64)52)) & [2047])) < (int_32)[17])
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)2147483648) ){ goto $label$17 }
	$6 = [-2147483648]
	if ( ($5 == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$6 = (CASTING int_32)(float_64 $7)
	if ( $5 ){ goto $label$15 }
	
.LABEL $label$16
	$9 = (float_64)
	$0 = ((float_64)$7 * (float_64)(float_64)6.077100506303966e-11)
	$11 = (float_64)
	$0 = (float_64)
	*($1) = $0($11($8 - $0)) - $9(((float_64)$7 * (float_64)(float_64)2.0222662487959506e-21) - (float_64))((float_64))($8 - $11) - $0)))))
	if ( ((int_32)($10 - ((CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $0) >> (uint_64)(int_64)52)) & [2047])) < (int_32)[50]) ){ goto $label$18 }
	$9 = (float_64)
	$0 = ((float_64)$7 * (float_64)(float_64)2.0222662487111665e-21)
	$8 = (float_64)
	$0 = (float_64)
	*($1) = $0($8($11 - $0)) - $9(((float_64)$7 * (float_64)(float_64)8.4784276603689e-32) - (float_64))((float_64))($11 - $8) - $0)))))
	goto $label$15 
	
.LABEL $label$18
	$8 = $11
	
.LABEL $label$15
	*($1 + [8]) = (float_64))((float_64))($8 - $0) - $9)
	$global$0 = ($2 + [48])
	return $6
	
.LABEL $label$9
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)$3 & (int_64)4503599627370495) | (int_64)4710765210229538816))
	$7 = (Rounds 0)($0)
	*($2 + [16]) = $7
	$0 = ((float_64)(float_64))($0 - $7) * (float_64)(float_64)16777216
	$7 = (Rounds 0)($0)
	*($2 + [24]) = $7)
	$0 = ((float_64)(float_64))($0 - $7) * (float_64)(float_64)16777216
	*($2 + [32]) = $0)
	if ( ((float_64)$0 != (float_64)(float_64)0) ){ goto $label$4 }
	$5 = (($2 + [16]) | [8])
	$10 = [2]
	
.LOOP $label$19:
	$10 = ($10 + [-1])
	$0 = *($5)
	$5 = ($5 + [-8])
	if ( ((float_64)$0 == (float_64)(float_64)0) ){ goto $label$19 }
	goto $label$3 
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$2 }
	$0 = ((float_64)$0 + (float_64)(float_64)6.2831853069365025)
	$7 = ((float_64)$0 + (float_64)(float_64)2.430840202602477e-10)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)2.430840202602477e-10)
	$global$0 = ($2 + [48])
	return [-4]
	
.LABEL $label$7
	$0 = ((float_64)$0 + (float_64)(float_64)-1.5707963267341256)
	$7 = ((float_64)$0 + (float_64)(float_64)-6.077100506506192e-11)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)-6.077100506506192e-11)
	$global$0 = ($2 + [48])
	return [1]
	
.LABEL $label$6
	$0 = ((float_64)$0 + (float_64)(float_64)-3.1415926534682512)
	$7 = ((float_64)$0 + (float_64)(float_64)-1.2154201013012384e-10)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)-1.2154201013012384e-10)
	$global$0 = ($2 + [48])
	return [2]
	
.LABEL $label$5
	$0 = ((float_64)$0 + (float_64)(float_64)-4.712388980202377)
	$7 = ((float_64)$0 + (float_64)(float_64)-1.8231301519518578e-10)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)-1.8231301519518578e-10)
	$global$0 = ($2 + [48])
	return [3]
	
.LABEL $label$4
	$10 = [2]
	
.LABEL $label$3
	$5 = CALL $7(($2 + [16]), $2, (uint_32($6 >> [20]) + [-1046]), ($10 + [1]), [1])
	$0 = *($2)
	if ( ($4 == 0) ){ goto $label$1 }
	*($1) = !(float_64)$0
	*($1 + [8]) = !(float_64)*($2 + [8])
	$global$0 = ($2 + [48])
	return ([0] - $5)
	
.LABEL $label$2
	$0 = ((float_64)$0 + (float_64)(float_64)-6.2831853069365025)
	$7 = ((float_64)$0 + (float_64)(float_64)-2.430840202602477e-10)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)-2.430840202602477e-10)
	$global$0 = ($2 + [48])
	return [4]
	
.LABEL $label$1
	*($1) = $0
	*($1 + [8]) = *($2 + [8])
	$global$0 = ($2 + [48])
	return $5
}

int_64 .FUNC $9 (float_64 $0, float_64 $1, int_32 $2)
{
	float_64 $3
	float_64 $4
	float_64 $5
	$3 = ((float_64)$0 * (float_64)$0)
	$4 = ((float_64)((float_64)((float_64)$3 * (float_64)((float_64)$3 * (float_64)$3)) * (float_64)((float_64)((float_64)$3 * (float_64)(float_64)1.58969099521155e-10) + (float_64)(float_64)-2.5050760253406863e-08)) + (float_64)((float_64)((float_64)$3 * (float_64)((float_64)((float_64)$3 * (float_64)(float_64)2.7557313707070068e-06) + (float_64)(float_64)-1.984126982985795e-04)) + (float_64)(float_64)0.00833333333332249))
	$5 = ((float_64)$3 * (float_64)$0)
	if ( ($2 == 0) ){ goto $label$1 }
	return (float_64))($0 - ((float_64)((float_64)$5 * (float_64)(float_64)0.16666666666666632) + (float_64)(float_64))(((float_64)$3 * (float_64)(float_64))(((float_64)$1 * (float_64)(float_64)0.5) - ((float_64)$5 * (float_64)$4))) - $1)))
	
.LABEL $label$1
	return ((float_64)((float_64)$5 * (float_64)((float_64)((float_64)$3 * (float_64)$4) + (float_64)(float_64)-0.16666666666666632)) + (float_64)$0)
}

void .FUNC $123 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [44]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12607])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12653])
	
.LABEL $label$2
	*($1 + [32]) = *(*($3))
	$3 = $4
	$4 = ($3 + [-48])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($3 + [-4])
	CALL $93($5, $1)
	CALL db_update_i64(*($1 + [48]), $2, $4, [44])
	if ( ((int_64)*($0 + [16]) == (int_64)0) ){ goto $label$3 }
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$3
	*(($0 + [16])) = (int_64)1
	$global$0 = ($5 + [16])
}

void .FUNC $122 (int_32 $0, float_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [60]) = $1
	CALL require_auth(*($0))
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	$3 = *($0)
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	*($2 + [40]) = (int_64)0
	$4 = CALL db_lowerbound_i64($3, $3, (int_64)-3945153273576554496, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $66(($2 + [16]), $4)
	$3 = *(($2 + [24]))
	$5 = *($2 + [16])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [11372])
	$5 = $3
	
.LABEL $label$1
	$4 = [0]
	$6 = CALL db_lowerbound_i64($5, $3, (int_64)-3945153273576554496, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $66(($2 + [16]), $6)
	$3 = *($0)
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0)
	CALL eosio_assert([0], [12572])
	
.LABEL $label$3
	*($2 + [8]) = ($2 + [60])
	CALL $123(($2 + [16]), $4, $3, ($2 + [8]))
	$6 = *($2 + [40])
	if ( ($6 == 0) ){ goto $label$5 }
	$7 = ($2 + [44])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	CALL $19($4)
	
.LABEL $label$9
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($2 + [40]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $6
	
.LABEL $label$6
	*($7) = $6
	CALL $19($0)
	
.LABEL $label$5
	$global$0 = ($2 + [64])
}

void .FUNC $121 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [56]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12607])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12653])
	
.LABEL $label$2
	*($5 + [24]) = *(($1 + [8]))
	*($1 + [32]) = *(*($3))
	$7 = *($1 + [44])
	$6 = *(($1 + [48]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$10 = *($1)
	$3 = [44]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$3 = (($8 & [-8]) + $3)
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $11($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL $170(($5 + [8]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL $12($4)
	
.LABEL $label$7
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $26(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$9 }
	$1 = ($1 + [64])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3479593662097129472, ($5 + [32]), $10)
	*($1) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$9
	$global$0 = ($5 + [48])
}

void .FUNC $120 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	float_32 $7
	int_32 $8
	int_64 $9
	float_64 $10
	int_64 $11
	int_64 $12
	float_64 $13
	int_32 $14
	$4 = ($global$0 - [240])
	$global$0 = $4
	*($4 + [232]) = $1
	CALL require_auth($1)
	*(($4 + [224])) = [0]
	*($4 + [208]) = (int_64)-1
	*($4 + [216]) = (int_64)0
	*($4 + [228]) = [0]
	$1 = *($0)
	*($4 + [192]) = $1
	*($4 + [200]) = $1
	*($4 + [184]) = ($4 + [192])
	CALL $117(($4 + [176]), ($4 + [184]), ($4 + [232]))
	$5 = *($4 + [180])
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((int_64)*($4 + [232]) == (int_64)*($5 + [8])) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [11821])
	if ( ((int_64)*($4 + [232]) == (int_64)*(*($4 + [180]) + [8])) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [11821])
	
.LABEL $label$1
	$6 = [0]
	*(($4 + [168])) = [0]
	*($4 + [152]) = (int_64)-1
	$1 = *($0)
	*($4 + [136]) = $1
	*($4 + [144]) = $1
	*($4 + [160]) = (int_64)0
	$5 = CALL db_lowerbound_i64($1, $1, (int_64)-3945153273576554496, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $66(($4 + [136]), $5)
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert([0], [11372])
	
.LABEL $label$4
	$7 = *($6 + [32])
	$1 = CALL $43()
	*($4 + [128]) = $1
	$8 = ((uint_32)(CASTING uint_32)(uint_64 ((int_64)$1 / (int_64)1000000)) / (uint_32)[3600])
	if ( (int_64)($2 == 0) ){ goto $label$6 }
	
.LOOP $label$7:
	CALL $119(($4 + [176]))
	$2 = ((int_64)$2 + (int_64)-1)
	if ( ((int_64)($2 == 0) == 0) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = *($4 + [180])
	if ( ($5 == 0) ){ goto $label$9 }
	$9 = (CASTING uint_64)(uint_32 $8)
	$10 = ((float_64)(PROMOTE float_64)(float_32 $7) / (float_64)(float_64)100)
	$1 = (int_64)0
	
.LOOP $label$11:
	if ( (int_64)($3 == 0) ){ goto $label$10 }
	if ( ((int_64)*($5 + [8]) != (int_64)*($4 + [232])) ){ goto $label$10 }
	$2 = (int_64)
	if ( (int_64)($2($9 - (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((int_64)*($5 + [32]) / (int_64)1000000)) / (uint_32)[3600])))) == 0) ){ goto $label$12 }
	$7 = *($5 + [40])
	$11 = *($5 + [16])
	$12 = *($0)
	*($4 + [8]) = ($4 + [128])
	CALL $121(*($4 + [184]), $5, $12, ($4 + [8]))
	$13 = ((float_64)((float_64)((float_64)$10 * (float_64)(CASTING float_64)(uint_64 ((int_64)$11 * (int_64)$2))) * (float_64)(PROMOTE float_64)(float_32 $7)) + (float_64)(CASTING float_64)(uint_64 $1))
	if ( (((float_64)$13 < (float_64)(float_64)18446744073709551615) & ((float_64)$13 >= (float_64)(float_64)0)) ){ goto $label$13 }
	$1 = (int_64)0
	goto $label$12 
	
.LABEL $label$13
	$1 = (Rounds 0)($13)
	
.LABEL $label$12
	$3 = ((int_64)$3 + (int_64)-1)
	CALL $119(($4 + [176]))
	$5 = *($4 + [180])
	if ( $5 ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$9 }
	$11 = *($6 + [16])
	if ( (uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$8 }
	CALL eosio_assert([0], [11954])
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert([0], [11804])
	$11 = *($6 + [16])
	$1 = (int_64)0
	
.LABEL $label$8
	$2 = (uint_64)$11 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$2 = $3
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$2 = $3
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$14 = ($5 + [1])
	$5 = $14
	if ( $8 ){ goto $label$18 }
	$5 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	CALL eosio_assert([0], [12003])
	
.LABEL $label$14
	*(($4 + [120])) = [0]
	*($4 + [112]) = (int_64)0
	$5 = CALL $25([11815])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$27 }
	*($4 + [112]) = ($5 << [1])
	$8 = (($4 + [112]) | [1])
	if ( $5 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$14 = (($5 + [16]) & [-16])
	$8 = CALL $17($14)
	*($4 + [112]) = ($14 | [1])
	*($4 + [120]) = $8
	*($4 + [116]) = $5
	
.LABEL $label$26
	CALL memcpy($8, [11815], $5)
	
.LABEL $label$25
	*(($8 + $5)) = [0]
	*($4 + [64]) = (int_64)-3000216042388586496
	*($4 + [56]) = *($0)
	$2 = *($6)
	$3 = *($6 + [8])
	*(($4 + [32])) = $11
	*($4 + [8]) = $3
	*($4 + [16]) = *($4 + [232])
	*($4 + [24]) = $1
	CALL $33((($4 + [8]) + [32]), ($4 + [112]))
	$5 = CALL $49(($4 + [72]), ($4 + [56]), $2, (int_64)-3617168760277827584, ($4 + [8]))
	CALL $50($5)
	$8 = *($5 + [28])
	if ( ($8 == 0) ){ goto $label$28 }
	*(($5 + [32])) = $8
	CALL $19($8)
	
.LABEL $label$28
	$8 = *($5 + [16])
	if ( ($8 == 0) ){ goto $label$29 }
	*(($5 + [20])) = $8
	CALL $19($8)
	
.LABEL $label$29
	if ( (*($4 + [40]) & [1]) ){ goto $label$31 }
	if ( (*($4 + [112]) & [1]) ){ goto $label$30 }
	goto $label$23 
	
.LABEL $label$31
	CALL $19(*(($4 + [48])))
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$30
	CALL $19(*($4 + [120]))
	$14 = *($4 + [160])
	if ( ($14 == 0) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	CALL $32(($4 + [112]))
	
.LABEL $label$23
	$14 = *($4 + [160])
	if ( $14 ){ goto $label$21 }
	
.LABEL $label$22
	$0 = *($4 + [216])
	if ( $0 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$0 = ($4 + [164])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$14) ){ goto $label$32 }
	
.LOOP $label$33:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$34 }
	CALL $19($8)
	
.LABEL $label$34
	if ( ((int_32)$14 != (int_32)$5) ){ goto $label$33 }
	$5 = *(($4 + [160]))
	*($0) = $14
	CALL $19($5)
	$0 = *($4 + [216])
	if ( $0 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$32
	*($0) = $14
	CALL $19($14)
	$0 = *($4 + [216])
	if ( ($0 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$6 = ($4 + [220])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$36 }
	
.LOOP $label$37:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$38 }
	$14 = *($8 + [44])
	if ( ($14 == 0) ){ goto $label$39 }
	*(($8 + [48])) = $14
	CALL $19($14)
	
.LABEL $label$39
	CALL $19($8)
	
.LABEL $label$38
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$37 }
	$5 = *(($4 + [216]))
	goto $label$35 
	
.LABEL $label$36
	$5 = $0
	
.LABEL $label$35
	*($6) = $0
	CALL $19($5)
	$global$0 = ($4 + [240])
	return 
	
.LABEL $label$19
	$global$0 = ($4 + [240])
	(unreachable)
}

int_64 .FUNC $2 (float_64 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	float_64 $4
	float_64 $5
	$1 = ($global$0 - [16])
	$2 = (CASTING int_64)(float_64 $0)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$3) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = ( !(float_64)$0 ? $0 : ((int_64)$2 < (int_64)0) )
	if ( ((uint_32)$3 > (uint_32)[1021]) ){ goto $label$2 }
	*($1 + [8]) = ((float_64)$4 + (float_64)(float_64)4503599627370496)
	return ((float_64)$0 * (float_64)(float_64)0)
	
.LABEL $label$2
	$5 = (float_64)
	if ( ((int_32)((float_64)$5(((float_64)((float_64)$4 + (float_64)(float_64)4503599627370496) + (float_64)(float_64)-4503599627370496) - $4)) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$4 }
	$0 = ((float_64)((float_64)$4 + (float_64)$5) + (float_64)(float_64)-1)
	goto $label$3 
	
.LABEL $label$4
	$0 = ((float_64)$4 + (float_64)$5)
	if ( ((int_32)((float_64)$5 <= (float_64)(float_64)-0.5) ^ (int_32)[1]) ){ goto $label$3 }
	$0 = ((float_64)$0 + (float_64)(float_64)1)
	
.LABEL $label$3
	$0 = ( !(float_64)$0 ? $0 : ((int_64)$2 < (int_64)0) )
	
.LABEL $label$1
	return $0
}

void .FUNC $126 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = *($0 + [8])
	if ( ((int_64)$6 == (int_64)6138663591592764928) ){ goto $label$1 }
	$7 = *($0)
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$1 }
	$8 = [0]
	*(($5 + [80])) = [0]
	*($5 + [56]) = $7
	*($5 + [48]) = $7
	*($5 + [64]) = (int_64)-1
	*($5 + [72]) = (int_64)0
	$9 = CALL db_lowerbound_i64($7, $7, (int_64)-3945153273576554496, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$6 }
	$8 = CALL $66(($5 + [48]), $9)
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert([0], [11372])
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$4 }
	
.LABEL $label$5
	if ( ((int_64)$6 != (int_64)*($8)) ){ goto $label$4 }
	if ( ((int_64)*($3 + [8]) == (int_64)*($8 + [16])) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	CALL eosio_assert([0], [11832])
	if ( ((int_64)*($3 + [8]) == (int_64)*($8 + [16])) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert([0], [11205])
	
.LABEL $label$2
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	$7 = *($0)
	*($5 + [8]) = $7
	*($5 + [16]) = $1
	*($5 + [32]) = (int_64)0
	$8 = CALL db_lowerbound_i64($7, $1, (int_64)-3963167672086036480, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$9 }
	$0 = CALL $55(($5 + [8]), $8)
	*($5 + [96]) = $3
	CALL $127(($5 + [8]), $0, ($5 + [96]))
	$8 = *($5 + [32])
	if ( $8 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$1 = *($0)
	if ( ((int_64)CALL current_receiver() == (int_64)*($5 + [8])) ){ goto $label$10 }
	CALL eosio_assert([0], [12819])
	
.LABEL $label$10
	*(($0 = CALL $17([32])) + [16]) = ($5 + [8])
	*($0 + [8]) = *(($3 + [8]))
	*($0) = *($3)
	CALL memcpy(($5 + [96]), $0, [8])
	*($5 + [120]) = *($0 + [8])
	CALL memcpy((($5 + [96]) | [8]), ($5 + [120]), [8])
	$8 = CALL db_store_i64(*((($5 + [8]) + [8])), (int_64)-3963167672086036480, $1, (int_64)0, ($5 + [96]), [16])
	*($0 + [20]) = $8
	$3 = (($5 + [8]) + [16])
	if ( ((int_64)*($3) != (int_64)0) ){ goto $label$11 }
	*($3) = (int_64)1
	
.LABEL $label$11
	*($5 + [96]) = $0
	*($5 + [120]) = [0]
	*($5 + [92]) = $8
	$9 = ($5 + [36])
	$3 = *($9)
	if ( ((uint_32)$3 >= (uint_32)*((($5 + [8]) + [32]))) ){ goto $label$14 }
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = $8
	*($5 + [96]) = [0]
	*($3) = $0
	*($9) = ($3 + [24])
	$0 = *($5 + [96])
	*($5 + [96]) = [0]
	if ( $0 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $128(($5 + [32]), ($5 + [96]), ($5 + [120]), ($5 + [92]))
	$0 = *($5 + [96])
	*($5 + [96]) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL $19($0)
	
.LABEL $label$12
	$8 = *($5 + [32])
	if ( ($8 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$9 = ($5 + [36])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$18 }
	CALL $19($3)
	
.LABEL $label$18
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$17 }
	$0 = *(($5 + [32]))
	goto $label$15 
	
.LABEL $label$16
	$0 = $8
	
.LABEL $label$15
	*($9) = $8
	CALL $19($0)
	
.LABEL $label$7
	$8 = *($5 + [72])
	if ( ($8 == 0) ){ goto $label$1 }
	$9 = ($5 + [76])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$20 }
	
.LOOP $label$21:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$22 }
	CALL $19($3)
	
.LABEL $label$22
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$21 }
	$0 = *(($5 + [72]))
	goto $label$19 
	
.LABEL $label$20
	$0 = $8
	
.LABEL $label$19
	*($9) = $8
	CALL $19($0)
	
.LABEL $label$1
	$global$0 = ($5 + [128])
}

void .FUNC $125 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [56]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12607])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12653])
	
.LABEL $label$2
	*($5 + [24]) = *(($1 + [8]))
	*($1 + [40]) = *(*($3))
	$7 = *($1 + [44])
	$6 = *(($1 + [48]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$10 = *($1)
	$3 = [44]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$3 = (($8 & [-8]) + $3)
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $11($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL $170(($5 + [8]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL $12($4)
	
.LABEL $label$7
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $26(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$9 }
	$1 = ($1 + [64])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3479593662097129472, ($5 + [32]), $10)
	*($1) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$9
	$global$0 = ($5 + [48])
}

void .FUNC $124 (int_32 $0, int_64 $1, float_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [60]) = $2
	CALL require_auth(*($0))
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	*($3 + [52]) = [0]
	$4 = *($0)
	*($3 + [16]) = $4
	*($3 + [24]) = $4
	CALL $96(($3 + [8]), ($3 + [16]), $1, [11403])
	$1 = *($0)
	$0 = *($3 + [12])
	*($3) = ($3 + [60])
	if ( $0 ){ goto $label$1 }
	CALL eosio_assert([0], [12572])
	
.LABEL $label$1
	CALL $125(($3 + [16]), $0, $1, $3)
	$5 = *($3 + [40])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($3 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$6 }
	$8 = *($7 + [44])
	if ( ($8 == 0) ){ goto $label$7 }
	*(($7 + [48])) = $8
	CALL $19($8)
	
.LABEL $label$7
	CALL $19($7)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($3 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL $19($0)
	
.LABEL $label$2
	$global$0 = ($3 + [64])
}

int_32 .FUNC $14 ()
{
	return [11056]
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $11($1)
	
.LABEL $label$2
	*(CALL $14()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $11(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $12($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $16 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $14())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $15($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $11($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11064])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $11($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_64 .FUNC $10 (float_64 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = ((CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $0) >> (uint_64)(int_64)32)) & [2147483647]
	if ( ((uint_32)$2) > (uint_32)[1072243195]) ){ goto $label$3 }
	if ( ((uint_32)$2 > (uint_32)[1044816029]) ){ goto $label$2 }
	*($1) = ((float_64)$0 + (float_64)(float_64)1329227995784915872903807e12)
	$global$0 = ($1 + [16])
	return (float_64)1
	
.LABEL $label$3
	if ( ($2 <= [2146435072]) ){ goto $label$1 }
	$global$0 = ($1 + [16])
	return (float_64))($0 - $0)
	
.LABEL $label$2
	$0 = CALL $4($0, (float_64)0)
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$1
	$2 = (CALL $8($0, $1) & [3])
	if ( ((int_32)$2 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$5 }
	if ( $2 ){ goto $label$4 }
	$0 = CALL $4(*($1), *($1 + [8]))
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$6
	$0 = CALL $4(*($1), *($1 + [8]))
	$global$0 = ($1 + [16])
	return !(float_64)$0
	
.LABEL $label$5
	$0 = CALL $9(*($1), *($1 + [8]), [1])
	$global$0 = ($1 + [16])
	return !(float_64)$0
	
.LABEL $label$4
	$0 = CALL $9(*($1), *($1 + [8]), [1])
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $11 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [11052]) + $1)
	*([0] + [11052]) = $2
	$3 = *([0] + [11044])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [11044]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [11052]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [11080])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $12 (int_32 $0)
{
}

void .FUNC $13 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [11044]) = $0
	*([0] + [11040]) = $0
	*([0] + [11052]) = (current_memory)
}

int_32 .FUNC $18 (int_32 $0)
{
	return CALL $17($0)
}

void .FUNC $19 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $12($0)
	
.LABEL $label$1
}

void .FUNC $180 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = *($0 + [4])
	$0 = *(*($0))
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11948])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
}

void .FUNC $116 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	float_32 $5
	int_32 $6
	int_64 $7
	float_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	float_64 $12
	int_32 $13
	$2 = ($global$0 - [240])
	$global$0 = $2
	*($2 + [232]) = $1
	CALL require_auth($1)
	*(($2 + [224])) = [0]
	*($2 + [208]) = (int_64)-1
	*($2 + [216]) = (int_64)0
	*($2 + [228]) = [0]
	$1 = *($0)
	*($2 + [192]) = $1
	*($2 + [200]) = $1
	*($2 + [184]) = ($2 + [192])
	CALL $117(($2 + [176]), ($2 + [184]), ($2 + [232]))
	$3 = *($2 + [180])
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((int_64)*($2 + [232]) == (int_64)*($3 + [8])) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [11821])
	if ( ((int_64)*($2 + [232]) == (int_64)*(*($2 + [180]) + [8])) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [11821])
	
.LABEL $label$1
	$4 = [0]
	*(($2 + [168])) = [0]
	*($2 + [152]) = (int_64)-1
	$1 = *($0)
	*($2 + [136]) = $1
	*($2 + [144]) = $1
	*($2 + [160]) = (int_64)0
	$3 = CALL db_lowerbound_i64($1, $1, (int_64)-3945153273576554496, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $66(($2 + [136]), $3)
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert([0], [11372])
	
.LABEL $label$4
	$5 = *($4 + [32])
	$1 = CALL $43()
	*($2 + [128]) = $1
	$6 = ((uint_32)(CASTING uint_32)(uint_64 ((int_64)$1 / (int_64)1000000)) / (uint_32)[3600])
	$3 = *($2 + [180])
	if ( ($3 == 0) ){ goto $label$7 }
	$7 = (CASTING uint_64)(uint_32 $6)
	$8 = ((float_64)(PROMOTE float_64)(float_32 $5) / (float_64)(float_64)100)
	$9 = (int_64)0
	
.LOOP $label$9:
	if ( ((int_64)*($3 + [8]) != (int_64)*($2 + [232])) ){ goto $label$8 }
	$1 = (int_64)
	if ( (int_64)($1($7 - (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((int_64)*($3 + [32]) / (int_64)1000000)) / (uint_32)[3600])))) == 0) ){ goto $label$10 }
	$5 = *($3 + [40])
	$10 = *($3 + [16])
	$11 = *($0)
	*($2 + [8]) = ($2 + [128])
	CALL $118(*($2 + [184]), $3, $11, ($2 + [8]))
	$12 = ((float_64)((float_64)((float_64)$8 * (float_64)(CASTING float_64)(uint_64 ((int_64)$10 * (int_64)$1))) * (float_64)(PROMOTE float_64)(float_32 $5)) + (float_64)(CASTING float_64)(uint_64 $9))
	if ( (((float_64)$12 < (float_64)(float_64)18446744073709551615) & ((float_64)$12 >= (float_64)(float_64)0)) ){ goto $label$11 }
	$9 = (int_64)0
	goto $label$10 
	
.LABEL $label$11
	$9 = (Rounds 0)($12)
	
.LABEL $label$10
	CALL $119(($2 + [176]))
	$3 = *($2 + [180])
	if ( $3 ){ goto $label$9 }
	
.LABEL $label$8
	if ( ((int_64)$9 == (int_64)0) ){ goto $label$7 }
	$11 = *($4 + [16])
	if ( (uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$6 }
	CALL eosio_assert([0], [11954])
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([0], [11804])
	$11 = *($4 + [16])
	$9 = (int_64)0
	
.LABEL $label$6
	$1 = (uint_64)$11 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$10 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$1 = $10
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$1 = $10
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$13 = ($3 + [1])
	$3 = $13
	if ( $6 ){ goto $label$16 }
	$3 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	CALL eosio_assert([0], [12003])
	
.LABEL $label$12
	*(($2 + [120])) = [0]
	*($2 + [112]) = (int_64)0
	$3 = CALL $25([11815])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$22 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$25 }
	*($2 + [112]) = ($3 << [1])
	$6 = (($2 + [112]) | [1])
	if ( $3 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$13 = (($3 + [16]) & [-16])
	$6 = CALL $17($13)
	*($2 + [112]) = ($13 | [1])
	*($2 + [120]) = $6
	*($2 + [116]) = $3
	
.LABEL $label$24
	CALL memcpy($6, [11815], $3)
	
.LABEL $label$23
	*(($6 + $3)) = [0]
	*($2 + [64]) = (int_64)-3000216042388586496
	*($2 + [56]) = *($0)
	$1 = *($4)
	$10 = *($4 + [8])
	*(($2 + [32])) = $11
	*($2 + [8]) = $10
	*($2 + [16]) = *($2 + [232])
	*($2 + [24]) = $9
	CALL $33((($2 + [8]) + [32]), ($2 + [112]))
	$3 = CALL $49(($2 + [72]), ($2 + [56]), $1, (int_64)-3617168760277827584, ($2 + [8]))
	CALL $50($3)
	$6 = *($3 + [28])
	if ( ($6 == 0) ){ goto $label$26 }
	*(($3 + [32])) = $6
	CALL $19($6)
	
.LABEL $label$26
	$6 = *($3 + [16])
	if ( ($6 == 0) ){ goto $label$27 }
	*(($3 + [20])) = $6
	CALL $19($6)
	
.LABEL $label$27
	if ( (*($2 + [40]) & [1]) ){ goto $label$29 }
	if ( (*($2 + [112]) & [1]) ){ goto $label$28 }
	goto $label$21 
	
.LABEL $label$29
	CALL $19(*(($2 + [48])))
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$28
	CALL $19(*($2 + [120]))
	$13 = *($2 + [160])
	if ( ($13 == 0) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	CALL $32(($2 + [112]))
	
.LABEL $label$21
	$13 = *($2 + [160])
	if ( $13 ){ goto $label$19 }
	
.LABEL $label$20
	$0 = *($2 + [216])
	if ( $0 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$0 = ($2 + [164])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$13) ){ goto $label$30 }
	
.LOOP $label$31:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$32 }
	CALL $19($6)
	
.LABEL $label$32
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$31 }
	$3 = *(($2 + [160]))
	*($0) = $13
	CALL $19($3)
	$0 = *($2 + [216])
	if ( $0 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$30
	*($0) = $13
	CALL $19($13)
	$0 = *($2 + [216])
	if ( ($0 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$4 = ($2 + [220])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$34 }
	
.LOOP $label$35:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$36 }
	$13 = *($6 + [44])
	if ( ($13 == 0) ){ goto $label$37 }
	*(($6 + [48])) = $13
	CALL $19($13)
	
.LABEL $label$37
	CALL $19($6)
	
.LABEL $label$36
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$35 }
	$3 = *(($2 + [216]))
	goto $label$33 
	
.LABEL $label$34
	$3 = $0
	
.LABEL $label$33
	*($4) = $0
	CALL $19($3)
	$global$0 = ($2 + [240])
	return 
	
.LABEL $label$17
	$global$0 = ($2 + [240])
	(unreachable)
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)3479593662097129472, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [56]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [12763])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $65($7, CALL $fimport$29(*($7), *($7 + [8]), (int_64)3479593662097129472, $6))
	if ( ((int_32)*($4 + [56]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [12763])
	
.LABEL $label$2
	*(($4 + [64])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $114 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	float_32 $7
	int_32 $8
	float_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL require_auth($1)
	*((($3 + [184]) + [32])) = [0]
	*($3 + [200]) = (int_64)-1
	*($3 + [208]) = (int_64)0
	*($3 + [220]) = [0]
	$4 = *($0)
	*($3 + [184]) = $4
	*($3 + [192]) = $4
	CALL $96(($3 + [176]), ($3 + [184]), $2, [11403])
	if ( ((int_64)*(*($3 + [180]) + [8]) == (int_64)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [11794])
	
.LABEL $label$1
	*((($3 + [136]) + [32])) = [0]
	*($3 + [152]) = (int_64)-1
	$2 = *($0)
	*($3 + [136]) = $2
	*($3 + [144]) = $2
	*($3 + [160]) = (int_64)0
	$5 = CALL db_lowerbound_i64($2, $2, (int_64)-3945153273576554496, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $66(($3 + [136]), $5)
	goto $label$2 
	
.LABEL $label$3
	$6 = [0]
	CALL eosio_assert([0], [11372])
	
.LABEL $label$2
	$7 = *($6 + [32])
	$2 = CALL $43()
	*($3 + [128]) = $2
	$5 = *($3 + [180])
	$8 = (((uint_32)(CASTING uint_32)(uint_64 ((int_64)$2 / (int_64)1000000)) / (uint_32)[3600]) - ((uint_32)(CASTING uint_32)(uint_64 ((int_64)*($5 + [32]) / (int_64)1000000)) / (uint_32)[3600]))
	$2 = (CASTING uint_64)(uint_32 $8)
	$9 = (PROMOTE float_64)(float_32 $7)
	if ( $8 ){ goto $label$4 }
	CALL eosio_assert([0], [11804])
	$5 = *($3 + [180])
	
.LABEL $label$4
	$9 = ((float_64)((float_64)((float_64)$9 / (float_64)(float_64)100) * (float_64)(CASTING float_64)(uint_64 ((int_64)*($5 + [16]) * (int_64)$2))) * (float_64)(PROMOTE float_64)(float_32 *($5 + [40])))
	if ( (((float_64)$9 < (float_64)(float_64)18446744073709551615) & ((float_64)$9 >= (float_64)(float_64)0)) ){ goto $label$6 }
	$10 = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	$10 = (Rounds 0)($9)
	
.LABEL $label$5
	$11 = *($6 + [16])
	if ( (uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$7 }
	CALL eosio_assert([0], [11954])
	
.LABEL $label$7
	$2 = (uint_64)$11 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$2 = $4
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$2 = $4
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$12 = ($5 + [1])
	$5 = $12
	if ( $8 ){ goto $label$12 }
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert([0], [12003])
	
.LABEL $label$8
	*(($3 + [120])) = [0]
	*($3 + [112]) = (int_64)0
	$5 = CALL $25([11815])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$16 }
	*($3 + [112]) = ($5 << [1])
	$8 = (($3 + [112]) | [1])
	if ( $5 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$12 = (($5 + [16]) & [-16])
	$8 = CALL $17($12)
	*($3 + [112]) = ($12 | [1])
	*($3 + [120]) = $8
	*($3 + [116]) = $5
	
.LABEL $label$15
	CALL memcpy($8, [11815], $5)
	
.LABEL $label$14
	*(($8 + $5)) = [0]
	*($3 + [56]) = *($6 + [8])
	*($3 + [64]) = (int_64)3617214756542218240
	$2 = *($6)
	$4 = *($6 + [8])
	*(($3 + [32])) = $11
	*($3 + [16]) = $1
	*($3 + [8]) = $4
	*($3 + [24]) = $10
	CALL $33((($3 + [8]) + [32]), ($3 + [112]))
	$5 = CALL $49(($3 + [72]), ($3 + [56]), $2, (int_64)-3617168760277827584, ($3 + [8]))
	CALL $50($5)
	$8 = *($5 + [28])
	if ( ($8 == 0) ){ goto $label$17 }
	*(($5 + [32])) = $8
	CALL $19($8)
	
.LABEL $label$17
	$8 = *($5 + [16])
	if ( ($8 == 0) ){ goto $label$18 }
	*(($5 + [20])) = $8
	CALL $19($8)
	
.LABEL $label$18
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$19 }
	CALL $19(*(($3 + [48])))
	
.LABEL $label$19
	$2 = *($0)
	$5 = *($3 + [180])
	*($3 + [8]) = ($3 + [128])
	if ( $5 ){ goto $label$20 }
	CALL eosio_assert([0], [12572])
	
.LABEL $label$20
	CALL $115(($3 + [184]), $5, $2, ($3 + [8]))
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$21 }
	CALL $19(*($3 + [120]))
	
.LABEL $label$21
	$12 = *($3 + [160])
	if ( ($12 == 0) ){ goto $label$22 }
	$6 = ($3 + [164])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$24 }
	
.LOOP $label$25:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$26 }
	CALL $19($8)
	
.LABEL $label$26
	if ( ((int_32)$12 != (int_32)$5) ){ goto $label$25 }
	$5 = *(($3 + [160]))
	goto $label$23 
	
.LABEL $label$24
	$5 = $12
	
.LABEL $label$23
	*($6) = $12
	CALL $19($5)
	
.LABEL $label$22
	$6 = *($3 + [208])
	if ( ($6 == 0) ){ goto $label$27 }
	$0 = ($3 + [212])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$29 }
	
.LOOP $label$30:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$31 }
	$12 = *($8 + [44])
	if ( ($12 == 0) ){ goto $label$32 }
	*(($8 + [48])) = $12
	CALL $19($12)
	
.LABEL $label$32
	CALL $19($8)
	
.LABEL $label$31
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$30 }
	$5 = *(($3 + [208]))
	goto $label$28 
	
.LABEL $label$29
	$5 = $6
	
.LABEL $label$28
	*($0) = $6
	CALL $19($5)
	
.LABEL $label$27
	$global$0 = ($3 + [224])
	return (unreachable)
	
.LABEL $label$13
	CALL $32(($3 + [112]))
}

void .FUNC $115 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [56]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12607])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12653])
	
.LABEL $label$2
	*($5 + [24]) = *(($1 + [8]))
	*($1 + [32]) = *(*($3))
	$7 = *($1 + [44])
	$6 = *(($1 + [48]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$10 = *($1)
	$3 = [44]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$3 = (($8 & [-8]) + $3)
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $11($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL $170(($5 + [8]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL $12($4)
	
.LABEL $label$7
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $26(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$9 }
	$1 = ($1 + [64])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3479593662097129472, ($5 + [32]), $10)
	*($1) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$9
	$global$0 = ($5 + [48])
}

void .FUNC $112 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	$3 = ($global$0 - [384])
	$global$0 = $3
	CALL require_auth($1)
	*((($3 + [344]) + [32])) = (int_64)0
	*($3 + [360]) = (int_64)-1
	*($3 + [368]) = (int_64)0
	$4 = *($0)
	*($3 + [344]) = $4
	*($3 + [352]) = $4
	CALL $109(($3 + [336]), ($3 + [344]), $2, [11714])
	if ( ((int_64)*(*($3 + [340]) + [8]) == (int_64)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [11772])
	
.LABEL $label$1
	$5 = [0]
	*((($3 + [296]) + [32])) = [0]
	*($3 + [312]) = (int_64)-1
	$4 = *($0)
	*($3 + [296]) = $4
	*($3 + [304]) = $4
	*($3 + [320]) = (int_64)0
	$6 = CALL db_lowerbound_i64($4, $4, (int_64)-3945153273576554496, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $66(($3 + [296]), $6)
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [11372])
	
.LABEL $label$2
	$6 = *($3 + [340])
	$7 = ($6 + [24])
	$8 = *(($6 + [40]))
	if ( ($8 == 0) ){ goto $label$8 }
	if ( ((int_32)$8 != (int_32)[1]) ){ goto $label$4 }
	CALL $40(($3 + [264]), $2)
	$6 = CALL $39(($3 + [264]), [0], [11282])
	$8 = ($6 + [8])
	*((($3 + [280]) + [8])) = *($8)
	*($3 + [280]) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	if ( ((*($3 + [264]) & [1]) == 0) ){ goto $label$9 }
	CALL $19(*($3 + [272]))
	
.LABEL $label$9
	$9 = CALL $41(((float_64)(CASTING float_64)(int_64 *($7)) * (float_64)(PROMOTE float_64)(float_32 ((float_32)*($5 + [36]) + (float_32)(float_32)1))))
	$10 = *($5 + [16])
	if ( (uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$10 }
	CALL eosio_assert([0], [11954])
	
.LABEL $label$10
	$4 = (uint_64)$10 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$4 = $11
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$11 }
	goto $label$6 
	
.LABEL $label$12
	$4 = $11
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $8 ){ goto $label$13 }
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$11 }
	goto $label$6 
	
.LABEL $label$8
	*($3 + [184]) = [1]
	$4 = *($7)
	$11 = *($6 + [48])
	$9 = *($6 + [16])
	*((($3 + [120]) + [8])) = *($3 + [184])
	*((($3 + [96]) + [8])) = *((($3 + [152]) + [8]))
	*($3 + [168]) = [0]
	*(($3 + [112])) = *($3 + [168])
	*($3 + [144]) = [1]
	*((($3 + [80]) + [8])) = *($3 + [144])
	*($3 + [152]) = [0]
	*($3 + [136]) = $2
	*($3 + [176]) = $4
	*($3 + [120]) = $4
	*($3 + [80]) = $2
	*($3 + [96]) = *($3 + [152])
	CALL $46($11, $1, $9, ($3 + [120]), ($3 + [96]), ($3 + [80]))
	goto $label$5 
	
.LABEL $label$7
	CALL eosio_assert([0], [12003])
	
.LABEL $label$6
	$4 = *(*($3 + [340]) + [48])
	$11 = *($0)
	$13 = *($5)
	*((($3 + [64]) + [8])) = $10
	*($3 + [248]) = $9
	*($3 + [256]) = $10
	*($3 + [64]) = $9
	CALL $48($0, $13, $11, $4, ($3 + [64]), ($3 + [280]))
	$11 = *(($7 + [8]))
	*((($3 + [208]) + [8])) = $11
	*($3 + [240]) = [0]
	$6 = *($3 + [340])
	$9 = *($6 + [16])
	$10 = *($6 + [48])
	$4 = *($7)
	*((($3 + [48]) + [8])) = *($3 + [240])
	*((($3 + [24]) + [8])) = $11
	*($3 + [224]) = [1]
	*(($3 + [40])) = *($3 + [224])
	*($3 + [200]) = [1]
	*((($3 + [8]) + [8])) = *($3 + [200])
	*($3 + [232]) = [0]
	*($3 + [192]) = $2
	*($3 + [208]) = $4
	*($3 + [48]) = *($3 + [232])
	*($3 + [24]) = $4
	*($3 + [8]) = $2
	CALL $46($10, $1, $9, ($3 + [48]), ($3 + [24]), ($3 + [8]))
	if ( ((*($3 + [280]) & [1]) == 0) ){ goto $label$5 }
	CALL $19(*($3 + [288]))
	
.LABEL $label$5
	$4 = *($3 + [336])
	$6 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( $6) ){ goto $label$14 }
	CALL eosio_assert([0], [12360])
	CALL eosio_assert([0], [12394])
	
.LABEL $label$14
	$8 = CALL db_next_i64(*($6 + [60]), ($3 + [280]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$15 }
	CALL $75((CASTING uint_32)(uint_64 $4), $8)
	
.LABEL $label$15
	CALL $61(($3 + [344]), $6)
	$12 = *($3 + [320])
	if ( ($12 == 0) ){ goto $label$16 }
	$0 = ($3 + [324])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$18 }
	
.LOOP $label$19:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$20 }
	CALL $19($8)
	
.LABEL $label$20
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$19 }
	$6 = *(($3 + [320]))
	goto $label$17 
	
.LABEL $label$18
	$6 = $12
	
.LABEL $label$17
	*($0) = $12
	CALL $19($6)
	
.LABEL $label$16
	$12 = *($3 + [368])
	if ( ($12 == 0) ){ goto $label$21 }
	$0 = ($3 + [372])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$23 }
	
.LOOP $label$24:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$25 }
	CALL $19($8)
	
.LABEL $label$25
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$24 }
	$6 = *(($3 + [368]))
	goto $label$22 
	
.LABEL $label$23
	$6 = $12
	
.LABEL $label$22
	*($0) = $12
	CALL $19($6)
	
.LABEL $label$21
	$global$0 = ($3 + [384])
	return (unreachable)
	
.LABEL $label$4
	CALL abort()
}

void .FUNC $113 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$3 = ($global$0 - [384])
	$global$0 = $3
	CALL require_auth($1)
	*((($3 + [344]) + [32])) = (int_64)0
	*($3 + [360]) = (int_64)-1
	*($3 + [368]) = (int_64)0
	$4 = *($0)
	*($3 + [344]) = $4
	*($3 + [352]) = $4
	CALL $109(($3 + [336]), ($3 + [344]), $2, [11714])
	if ( ((int_64)*(*($3 + [340]) + [48]) == (int_64)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [11783])
	
.LABEL $label$1
	$5 = [0]
	*((($3 + [296]) + [32])) = [0]
	*($3 + [312]) = (int_64)-1
	$4 = *($0)
	*($3 + [296]) = $4
	*($3 + [304]) = $4
	*($3 + [320]) = (int_64)0
	$6 = CALL db_lowerbound_i64($4, $4, (int_64)-3945153273576554496, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $66(($3 + [296]), $6)
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [11372])
	
.LABEL $label$2
	$6 = *($3 + [340])
	$7 = ($6 + [24])
	$8 = *(($6 + [40]))
	if ( ($8 == 0) ){ goto $label$8 }
	if ( ((int_32)$8 != (int_32)[1]) ){ goto $label$4 }
	CALL $40(($3 + [264]), $2)
	$6 = CALL $39(($3 + [264]), [0], [11282])
	$8 = ($6 + [8])
	*((($3 + [280]) + [8])) = *($8)
	*($3 + [280]) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	if ( ((*($3 + [264]) & [1]) == 0) ){ goto $label$9 }
	CALL $19(*($3 + [272]))
	
.LABEL $label$9
	$9 = CALL $41(((float_64)(CASTING float_64)(int_64 *($7)) * (float_64)(PROMOTE float_64)(float_32 ((float_32)*($5 + [36]) + (float_32)(float_32)1))))
	$10 = *($5 + [16])
	if ( (uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$10 }
	CALL eosio_assert([0], [11954])
	
.LABEL $label$10
	$4 = (uint_64)$10 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$4 = $11
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$11 }
	goto $label$6 
	
.LABEL $label$12
	$4 = $11
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $8 ){ goto $label$13 }
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$11 }
	goto $label$6 
	
.LABEL $label$8
	*($3 + [184]) = [1]
	$4 = *($7)
	$11 = *($6 + [48])
	$1 = *($6 + [8])
	$9 = *($6 + [16])
	*((($3 + [120]) + [8])) = *($3 + [184])
	*((($3 + [96]) + [8])) = *((($3 + [152]) + [8]))
	*($3 + [144]) = [1]
	*((($3 + [80]) + [8])) = *($3 + [144])
	*($3 + [168]) = [0]
	*(($3 + [112])) = *($3 + [168])
	*($3 + [152]) = [0]
	*($3 + [136]) = $2
	*($3 + [176]) = $4
	*($3 + [120]) = $4
	*($3 + [80]) = $2
	*($3 + [96]) = *($3 + [152])
	CALL $46($11, $1, $9, ($3 + [120]), ($3 + [96]), ($3 + [80]))
	goto $label$5 
	
.LABEL $label$7
	CALL eosio_assert([0], [12003])
	
.LABEL $label$6
	$4 = *($0)
	$11 = *($5)
	*((($3 + [64]) + [8])) = $10
	*($3 + [248]) = $9
	*($3 + [256]) = $10
	*($3 + [64]) = $9
	CALL $48($0, $11, $4, $1, ($3 + [64]), ($3 + [280]))
	$6 = *($3 + [340])
	$11 = *($6 + [8])
	*(($8 = (($3 + [208]) + [8]))) = *(($7 + [8]))
	*($3 + [240]) = [0]
	$1 = *($6 + [16])
	$9 = *($6 + [48])
	$4 = *($7)
	*((($3 + [48]) + [8])) = *($3 + [240])
	*((($3 + [24]) + [8])) = *($8)
	*($3 + [224]) = [1]
	*(($3 + [40])) = *($3 + [224])
	*($3 + [232]) = [0]
	*($3 + [200]) = [1]
	*($3 + [192]) = $2
	*($3 + [208]) = $4
	*($3 + [48]) = *($3 + [232])
	*($3 + [24]) = $4
	*((($3 + [8]) + [8])) = *($3 + [200])
	*($3 + [8]) = $2
	CALL $46($9, $11, $1, ($3 + [48]), ($3 + [24]), ($3 + [8]))
	if ( ((*($3 + [280]) & [1]) == 0) ){ goto $label$5 }
	CALL $19(*($3 + [288]))
	
.LABEL $label$5
	$4 = *($3 + [336])
	$6 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( $6) ){ goto $label$14 }
	CALL eosio_assert([0], [12360])
	CALL eosio_assert([0], [12394])
	
.LABEL $label$14
	$8 = CALL db_next_i64(*($6 + [60]), ($3 + [280]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$15 }
	CALL $75((CASTING uint_32)(uint_64 $4), $8)
	
.LABEL $label$15
	CALL $61(($3 + [344]), $6)
	$12 = *($3 + [320])
	if ( ($12 == 0) ){ goto $label$16 }
	$0 = ($3 + [324])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$18 }
	
.LOOP $label$19:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$20 }
	CALL $19($8)
	
.LABEL $label$20
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$19 }
	$6 = *(($3 + [320]))
	goto $label$17 
	
.LABEL $label$18
	$6 = $12
	
.LABEL $label$17
	*($0) = $12
	CALL $19($6)
	
.LABEL $label$16
	$12 = *($3 + [368])
	if ( ($12 == 0) ){ goto $label$21 }
	$0 = ($3 + [372])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$23 }
	
.LOOP $label$24:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$25 }
	CALL $19($8)
	
.LABEL $label$25
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$24 }
	$6 = *(($3 + [368]))
	goto $label$22 
	
.LABEL $label$23
	$6 = $12
	
.LABEL $label$22
	*($0) = $12
	CALL $19($6)
	
.LABEL $label$21
	$global$0 = ($3 + [384])
	return (unreachable)
	
.LABEL $label$4
	CALL abort()
}

void .FUNC $110 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [56]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12607])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12653])
	
.LABEL $label$2
	$6 = ($1 + [8])
	*($5 + [24]) = *($6)
	*($6) = *(*(*($3) + [4]) + [48])
	$7 = *($1 + [44])
	$6 = *(($1 + [48]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$10 = *($1)
	$3 = [44]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$3 = (($8 & [-8]) + $3)
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $11($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL $170(($5 + [8]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL $12($4)
	
.LABEL $label$7
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $26(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$9 }
	$1 = ($1 + [64])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3479593662097129472, ($5 + [32]), $10)
	*($1) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$9
	$global$0 = ($5 + [48])
}

void .FUNC $111 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [56]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12607])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12653])
	
.LABEL $label$2
	$6 = ($1 + [8])
	*($5 + [24]) = *($6)
	*($6) = *(*($3))
	$7 = *($1 + [44])
	$6 = *(($1 + [48]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$10 = *($1)
	$3 = [44]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$3 = (($8 & [-8]) + $3)
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $11($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL $170(($5 + [8]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL $12($4)
	
.LABEL $label$7
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $26(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$9 }
	$1 = ($1 + [64])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3479593662097129472, ($5 + [32]), $10)
	*($1) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$9
	$global$0 = ($5 + [48])
}

void .FUNC $118 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [56]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12607])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12653])
	
.LABEL $label$2
	*($5 + [24]) = *(($1 + [8]))
	*($1 + [32]) = *(*($3))
	$7 = *($1 + [44])
	$6 = *(($1 + [48]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$10 = *($1)
	$3 = [44]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$3 = (($8 & [-8]) + $3)
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $11($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL $170(($5 + [8]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL $12($4)
	
.LABEL $label$7
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $26(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$9 }
	$1 = ($1 + [64])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3479593662097129472, ($5 + [32]), $10)
	*($1) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$9
	$global$0 = ($5 + [48])
}

int_32 .FUNC $119 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = [-1]
	$4 = *($2 + [64])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [12394])
	$3 = [-1]
	$2 = *(($0 + [4]))
	$4 = *($2 + [64])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)3479593662097129472, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [64]) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 <= (int_32)$3) ){ goto $label$7 }
	$6 = *($1 + [8])
	$2 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$8:
	$4 = ($2 + [-24])
	$3 = *($4)
	if ( ((int_64)*($3) == (int_64)$6) ){ goto $label$6 }
	$2 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$7
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$5 }
	if ( ((int_32)*($3 + [56]) == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert([0], [12763])
	goto $label$4 
	
.LABEL $label$5
	$3 = CALL $65($7, CALL $fimport$29(*($7), *($7 + [8]), (int_64)3479593662097129472, $6))
	if ( ((int_32)*($3 + [56]) == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert([0], [12763])
	
.LABEL $label$4
	*(($0 + [4])) = $3
	*(($3 + [64])) = $5
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $16(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [11064])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $16(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $20 (int_32 $0)
{
	CALL $19($0)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $12($0)
	
.LABEL $label$1
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	return CALL $21($0, $1)
}

int_32 .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	CALL $23($0, $1)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [1] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $29($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $29($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $29($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $29($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [11120]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $29($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $29($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $29($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $101 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	float_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [432])
	$global$0 = $5
	*($5 + [400]) = $2
	if ( ((*($1) & [1]) == 0) ){ goto $label$1 }
	if ( (*($1 + [4]) <= [257]) ){ goto $label$1 }
	CALL eosio_assert([0], [11302])
	
.LABEL $label$1
	CALL require_auth($2)
	*((($5 + [360]) + [32])) = [0]
	*($5 + [376]) = (int_64)-1
	*($5 + [384]) = (int_64)0
	*($5 + [396]) = [0]
	$2 = *($0)
	*($5 + [360]) = $2
	*($5 + [368]) = $2
	CALL $100(($5 + [352]), ($5 + [360]), $3, [11547])
	*((($5 + [312]) + [32])) = [0]
	*($5 + [328]) = (int_64)-1
	*($5 + [336]) = (int_64)0
	*($5 + [348]) = [0]
	$2 = *($0)
	*($5 + [312]) = $2
	*($5 + [320]) = $2
	CALL $96(($5 + [304]), ($5 + [312]), $3, [11403])
	$1 = *($5 + [356])
	if ( ((int_64)*($1 + [16]) > (int_64)0) ){ goto $label$2 }
	CALL eosio_assert([0], [11558])
	$1 = *($5 + [356])
	
.LABEL $label$2
	if ( ((int_64)*($4 + [8]) == (int_64)*(($1 + [24]))) ){ goto $label$3 }
	CALL eosio_assert([0], [12180])
	
.LABEL $label$3
	$6 = *($4)
	if ( ((int_64)$6 == (int_64)*($1 + [16])) ){ goto $label$4 }
	CALL eosio_assert([0], [11569])
	
.LABEL $label$4
	$7 = [0]
	*((($5 + [264]) + [32])) = [0]
	*($5 + [280]) = (int_64)-1
	*($5 + [288]) = (int_64)0
	$2 = *($0)
	*($5 + [264]) = $2
	*($5 + [272]) = *($5 + [400])
	*((($5 + [224]) + [32])) = [0]
	*($5 + [232]) = $2
	*($5 + [224]) = $2
	*($5 + [240]) = (int_64)-1
	*($5 + [248]) = (int_64)0
	$1 = CALL db_lowerbound_i64($2, $2, (int_64)-3945153273576554496, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $66(($5 + [224]), $1)
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert([0], [11372])
	
.LABEL $label$5
	$8 = (CASTING float_64)(int_64 $6)
	$2 = CALL $41(((float_64)$8 * (float_64)(PROMOTE float_64)(float_32 ((float_32)*($7 + [36]) + (float_32)(float_32)1))))
	$9 = CALL $41(((float_64)$8 * (float_64)(PROMOTE float_64)(float_32 (float_32))((float_32)1 - *($7 + [40])))))
	CALL $54($5, $2, ($5 + [264]))
	$10 = *($7 + [16])
	if ( (uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$7 }
	CALL eosio_assert([0], [11954])
	
.LABEL $label$7
	$2 = (uint_64)$10 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$2 = $6
	$11 = $1
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$2 = $6
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$11 = ((int_32)$1 < (int_32)[6])
	$12 = ($1 + [1])
	$1 = $12
	if ( $11 ){ goto $label$12 }
	$1 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert([0], [12003])
	
.LABEL $label$8
	*($5 + [208]) = $9
	*($5 + [216]) = $10
	$2 = *(*($5 + [356]) + [8])
	$6 = *($0)
	$9 = *($7)
	*(($5 + [160])) = [0]
	*($5 + [152]) = (int_64)0
	$1 = CALL $25([11580])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($5 + [152]) = ($1 << [1])
	$11 = (($5 + [152]) | [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$12 = (($1 + [16]) & [-16])
	$11 = CALL $17($12)
	*($5 + [152]) = ($12 | [1])
	*($5 + [160]) = $11
	*($5 + [156]) = $1
	
.LABEL $label$16
	CALL memcpy($11, [11580], $1)
	
.LABEL $label$15
	*(($11 + $1)) = [0]
	*((($5 + [80]) + [8])) = *((($5 + [208]) + [8]))
	*($5 + [80]) = *($5 + [208])
	CALL $48($0, $9, $6, $2, ($5 + [80]), ($5 + [152]))
	if ( ((*($5 + [152]) & [1]) == 0) ){ goto $label$18 }
	CALL $19(*($5 + [160]))
	
.LABEL $label$18
	$9 = CALL $41(((float_64)(CASTING float_64)(int_64 *($4)) * (float_64)(PROMOTE float_64)(float_32 ((float_32)*(($7 + [36])) + (float_32)*(($7 + [40]))))))
	if ( (int_64)($9 == 0) ){ goto $label$19 }
	$10 = *(($7 + [16]))
	if ( (uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$20 }
	CALL eosio_assert([0], [11954])
	
.LABEL $label$20
	$2 = (uint_64)$10 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$2 = $6
	$11 = $1
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$2 = $6
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$11 = ((int_32)$1 < (int_32)[6])
	$12 = ($1 + [1])
	$1 = $12
	if ( $11 ){ goto $label$25 }
	$1 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	CALL eosio_assert([0], [12003])
	
.LABEL $label$21
	*($5 + [192]) = $9
	*($5 + [200]) = $10
	$2 = *($7 + [8])
	$6 = *($0)
	$9 = *($7)
	*(($5 + [160])) = [0]
	*($5 + [152]) = (int_64)0
	$1 = CALL $25([11606])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$28 }
	*($5 + [152]) = ($1 << [1])
	$11 = (($5 + [152]) | [1])
	if ( $1 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$12 = (($1 + [16]) & [-16])
	$11 = CALL $17($12)
	*($5 + [152]) = ($12 | [1])
	*($5 + [160]) = $11
	*($5 + [156]) = $1
	
.LABEL $label$27
	CALL memcpy($11, [11606], $1)
	
.LABEL $label$26
	*(($11 + $1)) = [0]
	*((($5 + [64]) + [8])) = *((($5 + [192]) + [8]))
	*($5 + [64]) = *($5 + [192])
	CALL $48($0, $9, $6, $2, ($5 + [64]), ($5 + [152]))
	if ( ((*($5 + [152]) & [1]) == 0) ){ goto $label$19 }
	CALL $19(*($5 + [160]))
	
.LABEL $label$19
	$2 = *($0)
	$1 = *($5 + [308])
	*($5 + [152]) = ($5 + [400])
	if ( $1 ){ goto $label$29 }
	CALL eosio_assert([0], [12572])
	
.LABEL $label$29
	CALL $102(($5 + [312]), $1, $2, ($5 + [152]))
	$2 = *($5 + [352])
	$1 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	if ( $1) ){ goto $label$30 }
	CALL eosio_assert([0], [12360])
	CALL eosio_assert([0], [12394])
	
.LABEL $label$30
	$11 = CALL db_next_i64(*($1 + [56]), ($5 + [152]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$31 }
	CALL $73((CASTING uint_32)(uint_64 $2), $11)
	
.LABEL $label$31
	CALL $74(($5 + [360]), $1)
	*(($5 + [184])) = (int_64)0
	*($5 + [168]) = (int_64)-1
	*($5 + [176]) = (int_64)0
	$2 = *($0)
	*($5 + [152]) = $2
	*($5 + [160]) = $2
	*($5 + [416]) = $3
	CALL $58($0, $3, ($5 + [152]), $7)
	*($5 + [408]) = ($5 + [152])
	CALL $62(($5 + [424]), ($5 + [408]), ($5 + [416]))
	$1 = *($5 + [428])
	if ( ($1 == 0) ){ goto $label$32 }
	if ( ((int_64)*($5 + [416]) != (int_64)( (int_64)0 ? *($1 + [24]) : *(($1 + [40])) )) ){ goto $label$32 }
	*($5 + [424]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)32) | (int_64)*($5 + [424]))
	CALL $63(($5 + [424]))
	CALL $61(*($5 + [408]), $1)
	
.LABEL $label$32
	$6 = *(*($5 + [356]) + [8])
	*(($1 = (($5 + [112]) + [8]))) = *(($4 + [8]))
	*($5 + [144]) = [0]
	$2 = *($4)
	*((($5 + [48]) + [8])) = *($5 + [144])
	*((($5 + [24]) + [8])) = *($1)
	*($5 + [128]) = [1]
	*(($5 + [40])) = *($5 + [128])
	*($5 + [136]) = [0]
	*($5 + [104]) = [0]
	*($5 + [96]) = [0]
	*($5 + [112]) = $2
	*($5 + [48]) = *($5 + [136])
	*($5 + [24]) = $2
	$2 = *($5 + [400])
	*((($5 + [8]) + [8])) = *($5 + [104])
	*($5 + [8]) = *($5 + [96])
	CALL $46($2, $6, $3, ($5 + [48]), ($5 + [24]), ($5 + [8]))
	$12 = *($5 + [176])
	if ( ($12 == 0) ){ goto $label$33 }
	$7 = ($5 + [180])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$35 }
	
.LOOP $label$36:
	$1 = ($1 + [-24])
	$11 = *($1)
	*($1) = [0]
	if ( ($11 == 0) ){ goto $label$37 }
	CALL $19($11)
	
.LABEL $label$37
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$36 }
	$1 = *(($5 + [176]))
	goto $label$34 
	
.LABEL $label$35
	$1 = $12
	
.LABEL $label$34
	*($7) = $12
	CALL $19($1)
	
.LABEL $label$33
	$12 = *($5 + [248])
	if ( ($12 == 0) ){ goto $label$38 }
	$7 = ($5 + [252])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$40 }
	
.LOOP $label$41:
	$1 = ($1 + [-24])
	$11 = *($1)
	*($1) = [0]
	if ( ($11 == 0) ){ goto $label$42 }
	CALL $19($11)
	
.LABEL $label$42
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$41 }
	$1 = *(($5 + [248]))
	goto $label$39 
	
.LABEL $label$40
	$1 = $12
	
.LABEL $label$39
	*($7) = $12
	CALL $19($1)
	
.LABEL $label$38
	$12 = *($5 + [288])
	if ( ($12 == 0) ){ goto $label$43 }
	$7 = ($5 + [292])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$45 }
	
.LOOP $label$46:
	$1 = ($1 + [-24])
	$11 = *($1)
	*($1) = [0]
	if ( ($11 == 0) ){ goto $label$47 }
	CALL $19($11)
	
.LABEL $label$47
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$46 }
	$1 = *(($5 + [288]))
	goto $label$44 
	
.LABEL $label$45
	$1 = $12
	
.LABEL $label$44
	*($7) = $12
	CALL $19($1)
	
.LABEL $label$43
	$7 = *($5 + [336])
	if ( ($7 == 0) ){ goto $label$48 }
	$0 = ($5 + [340])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$50 }
	
.LOOP $label$51:
	$1 = ($1 + [-24])
	$11 = *($1)
	*($1) = [0]
	if ( ($11 == 0) ){ goto $label$52 }
	$12 = *($11 + [44])
	if ( ($12 == 0) ){ goto $label$53 }
	*(($11 + [48])) = $12
	CALL $19($12)
	
.LABEL $label$53
	CALL $19($11)
	
.LABEL $label$52
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$51 }
	$1 = *(($5 + [336]))
	goto $label$49 
	
.LABEL $label$50
	$1 = $7
	
.LABEL $label$49
	*($0) = $7
	CALL $19($1)
	
.LABEL $label$48
	$12 = *($5 + [384])
	if ( ($12 == 0) ){ goto $label$54 }
	$7 = ($5 + [388])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$56 }
	
.LOOP $label$57:
	$1 = ($1 + [-24])
	$11 = *($1)
	*($1) = [0]
	if ( ($11 == 0) ){ goto $label$58 }
	CALL $19($11)
	
.LABEL $label$58
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$57 }
	$1 = *(($5 + [384]))
	goto $label$55 
	
.LABEL $label$56
	$1 = $12
	
.LABEL $label$55
	*($7) = $12
	CALL $19($1)
	
.LABEL $label$54
	$global$0 = ($5 + [432])
	return (unreachable)
	
.LABEL $label$14
	CALL $32(($5 + [152]))
	
.LABEL $label$13
	CALL $32(($5 + [152]))
	(unreachable)
}

void .FUNC $100 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	$6 = ($5 + [-24])
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$2 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$6 = *(($5 + [-24]))
	if ( ((int_32)*(($6 + [52])) == (int_32)$1) ){ goto $label$4 }
	CALL eosio_assert([0], [12763])
	
.LABEL $label$4
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$1
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-3999196469105000448, $2)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$5 }
	CALL eosio_assert([0], $3)
	
.LABEL $label$5
	$6 = CALL $73($1, $6)
	if ( ((int_32)*($6 + [52]) == (int_32)$1) ){ goto $label$6 }
	CALL eosio_assert([0], [12763])
	
.LABEL $label$6
	*($0 + [4]) = $6
	*($0) = $1
}

void .FUNC $103 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [576])
	$global$0 = $4
	*($4 + [520]) = $2
	*($4 + [528]) = $1
	CALL require_auth($1)
	$5 = [0]
	*((($4 + [480]) + [32])) = [0]
	*($4 + [496]) = (int_64)-1
	*($4 + [504]) = (int_64)0
	*($4 + [516]) = [0]
	$6 = *($0)
	*($4 + [480]) = $6
	*($4 + [488]) = $6
	CALL $96(($4 + [472]), ($4 + [480]), $2, [11403])
	$6 = *(*($4 + [476]) + [8])
	*($4 + [464]) = $6
	if ( ((int_64)$6 != (int_64)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [11626])
	$2 = *($4 + [520])
	
.LABEL $label$1
	*((($4 + [424]) + [32])) = [0]
	*($4 + [440]) = (int_64)-1
	*($4 + [448]) = (int_64)0
	*($4 + [460]) = [0]
	$1 = *($0)
	*($4 + [424]) = $1
	*($4 + [432]) = $1
	$7 = CALL db_find_i64($1, $1, (int_64)-3999196469105000448, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $73(($4 + [424]), $7)
	if ( ((int_32)*($5 + [52]) == (int_32)($4 + [424])) ){ goto $label$2 }
	CALL eosio_assert([0], [12763])
	
.LABEL $label$2
	*(($4 + [416])) = (int_64)0
	*($4 + [400]) = (int_64)-1
	*($4 + [408]) = (int_64)0
	$2 = *($0)
	*($4 + [384]) = $2
	*($4 + [392]) = $2
	*($4 + [376]) = ($4 + [384])
	CALL $62(($4 + [240]), ($4 + [376]), ($4 + [520]))
	$7 = *($4 + [244])
	if ( ($7 == 0) ){ goto $label$3 }
	if ( ((int_64)*($4 + [520]) != (int_64)( (int_64)0 ? *($7 + [24]) : *(($7 + [40])) )) ){ goto $label$3 }
	CALL eosio_assert([0], [11637])
	
.LABEL $label$3
	*($4 + [368]) = ($4 + [384])
	CALL $59(($4 + [240]), ($4 + [368]), ($4 + [520]))
	$7 = *($4 + [244])
	if ( ($7 == 0) ){ goto $label$5 }
	if ( ((int_64)*($4 + [520]) != (int_64)*($7 + [16])) ){ goto $label$5 }
	$2 = *($4 + [240])
	*($4 + [360]) = $2
	$7 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	if ( ($7) == 0) ){ goto $label$4 }
	
.LOOP $label$6:
	if ( ((int_64)*($7 + [16]) != (int_64)*($4 + [520])) ){ goto $label$4 }
	if ( ((int_64)*($7 + [48]) != (int_64)*($4 + [528])) ){ goto $label$7 }
	CALL eosio_assert([0], [11648])
	
.LABEL $label$7
	CALL $60(($4 + [360]))
	$7 = *($4 + [364])
	if ( $7 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	*($4 + [364]) = [0]
	*($4 + [360]) = ($4 + [368])
	
.LABEL $label$4
	$8 = *($3 + [16])
	$7 = ( [0] ? $3 : $8 )
	*($4 + [356]) = $7
	if ( ($7 == 0) ){ goto $label$22 }
	if ( ($5 == 0) ){ goto $label$23 }
	if ( *($5 + [50]) ){ goto $label$23 }
	CALL eosio_assert([0], [11659])
	$3 = *($4 + [356])
	
.LABEL $label$23
	$2 = *($3)
	$3 = *(($4 + [452]))
	$5 = *(($4 + [448]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$20 }
	
.LOOP $label$24:
	$7 = ($3 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$21 }
	$3 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$24 }
	goto $label$20 
	
.LABEL $label$22
	if ( ($5 == 0) ){ goto $label$25 }
	if ( *($5 + [49]) ){ goto $label$25 }
	CALL eosio_assert([0], [11703])
	$8 = *(($3 + [16]))
	
.LABEL $label$25
	if ( ((int_32)$8 != (int_32)[1]) ){ goto $label$9 }
	*((($4 + [280]) + [8])) = *(($3 + [8]))
	*($4 + [280]) = *($3)
	*((($4 + [240]) + [32])) = [0]
	*($4 + [256]) = (int_64)-1
	*($4 + [264]) = (int_64)0
	$2 = *($0)
	*($4 + [240]) = $2
	*($4 + [248]) = *($4 + [528])
	*((($4 + [200]) + [32])) = [0]
	*($4 + [208]) = $2
	*($4 + [200]) = $2
	*($4 + [216]) = (int_64)-1
	*($4 + [224]) = (int_64)0
	$7 = CALL db_lowerbound_i64($2, $2, (int_64)-3945153273576554496, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$8 }
	$7 = CALL $66(($4 + [200]), $7)
	CALL $54($4, CALL $41(((float_64)(CASTING float_64)(int_64 *($4 + [280])) * (float_64)(PROMOTE float_64)(float_32 ((float_32)*($7 + [36]) + (float_32)(float_32)1)))), ($4 + [240]))
	$2 = *(($4 + [400]))
	if ( ((int_64)$2 == (int_64)-1) ){ goto $label$17 }
	if ( ((uint_64)$2 >= (uint_64)(int_64)-2) ){ goto $label$16 }
	goto $label$12 
	
.LABEL $label$21
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$20 }
	if ( ((int_32)*(($8 + [52])) == (int_32)($4 + [424])) ){ goto $label$19 }
	CALL eosio_assert([0], [12763])
	goto $label$19 
	
.LABEL $label$20
	$7 = CALL db_find_i64(*($4 + [424]), *(($4 + [432])), (int_64)-3999196469105000448, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$18 }
	if ( ((int_32)*(CALL $73(($4 + [424]), $7) + [52]) == (int_32)($4 + [424])) ){ goto $label$19 }
	CALL eosio_assert([0], [12763])
	
.LABEL $label$19
	CALL eosio_assert([0], [11670])
	
.LABEL $label$18
	CALL $96(($4 + [240]), ($4 + [480]), *(*($4 + [356])), [11681])
	$2 = *($4 + [240])
	*($4 + [472]) = $2
	if ( ((int_64)*((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)) + [8]) == (int_64)*($4 + [528])) ){ goto $label$26 }
	CALL eosio_assert([0], [11692])
	
.LABEL $label$26
	$2 = *(($4 + [400]))
	if ( ((int_64)$2 == (int_64)-1) ){ goto $label$28 }
	if ( ((uint_64)$2 >= (uint_64)(int_64)-2) ){ goto $label$27 }
	goto $label$14 
	
.LABEL $label$28
	$2 = (int_64)0
	$7 = CALL db_lowerbound_i64(*($4 + [384]), *(($4 + [392])), (int_64)-3981182070595518464, (int_64)0)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$15 }
	CALL $75(($4 + [384]), $7)
	*($4 + [244]) = [0]
	*($4 + [240]) = ($4 + [384])
	$2 = *(*(CALL $104(($4 + [240])) + [4]))
	$2 = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	*(($4 + [400])) = $2
	if ( (uint_64)($2 <= (int_64)-2) ){ goto $label$14 }
	
.LABEL $label$27
	CALL eosio_assert([0], [12870])
	$2 = *(($4 + [400]))
	goto $label$14 
	
.LABEL $label$17
	$2 = (int_64)0
	$7 = CALL db_lowerbound_i64(*($4 + [384]), *(($4 + [392])), (int_64)-3981182070595518464, (int_64)0)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$13 }
	CALL $75(($4 + [384]), $7)
	*($4 + [172]) = [0]
	*($4 + [168]) = ($4 + [384])
	$2 = *(*(CALL $104(($4 + [168])) + [4]))
	$2 = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	*(($4 + [400])) = $2
	if ( (uint_64)($2 <= (int_64)-2) ){ goto $label$12 }
	
.LABEL $label$16
	CALL eosio_assert([0], [12870])
	$2 = *(($4 + [400]))
	goto $label$12 
	
.LABEL $label$15
	*(($4 + [400])) = (int_64)0
	
.LABEL $label$14
	*($4 + [280]) = $2
	$2 = *($0)
	*($4 + [244]) = ($4 + [464])
	*($4 + [240]) = ($4 + [280])
	*($4 + [248]) = ($4 + [520])
	*($4 + [252]) = ($4 + [356])
	*($4 + [256]) = ($4 + [528])
	*($4 + [168]) = $2
	if ( ((int_64)CALL current_receiver() == (int_64)*($4 + [384])) ){ goto $label$29 }
	CALL eosio_assert([0], [12819])
	
.LABEL $label$29
	*($4 + [204]) = ($4 + [240])
	*($4 + [200]) = ($4 + [384])
	*($4 + [208]) = ($4 + [168])
	*(($7 = CALL $17([80])) + [24]) = (int_64)0
	*($7 + [8]) = (int_64)0
	*($7 + [40]) = [0]
	*($7 + [48]) = (int_64)0
	*($7 + [56]) = ($4 + [384])
	CALL $105(($4 + [200]), $7)
	*($4 + [544]) = $7
	$2 = *($7)
	*($4 + [200]) = $2
	$5 = *($7 + [60])
	*($4 + [568]) = $5
	$8 = ($4 + [412])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($4 + [416]))) ){ goto $label$32 }
	*($3 + [8]) = $2
	*($3 + [16]) = $5
	*($4 + [544]) = [0]
	*($3) = $7
	*($8) = ($3 + [24])
	$3 = *($4 + [544])
	$7 = [0]
	*($4 + [544]) = [0]
	if ( $3 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	CALL $106(($4 + [408]), ($4 + [544]), ($4 + [200]), ($4 + [568]))
	$3 = *($4 + [544])
	$7 = [0]
	*($4 + [544]) = [0]
	if ( ($3 == 0) ){ goto $label$30 }
	
.LABEL $label$31
	CALL $19($3)
	
.LABEL $label$30
	*($4 + [344]) = [1]
	$2 = *(*($4 + [356]))
	*((($4 + [96]) + [8])) = *($4 + [344])
	*((($4 + [72]) + [8])) = *((($4 + [312]) + [8]))
	*($4 + [328]) = $7
	*(($4 + [88])) = *($4 + [328])
	*($4 + [312]) = $7
	*($4 + [304]) = [1]
	$1 = *($4 + [280])
	*($4 + [296]) = $1
	*($4 + [336]) = $2
	*($4 + [96]) = $2
	*($4 + [72]) = *($4 + [312])
	$2 = *($4 + [520])
	$6 = *($4 + [464])
	$9 = *($4 + [528])
	*((($4 + [56]) + [8])) = *($4 + [304])
	*($4 + [56]) = $1
	CALL $46($9, $6, $2, ($4 + [96]), ($4 + [72]), ($4 + [56]))
	$5 = *($4 + [408])
	if ( $5 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	*(($4 + [400])) = (int_64)0
	
.LABEL $label$12
	*($4 + [192]) = $2
	$2 = *($0)
	*($4 + [172]) = ($4 + [464])
	*($4 + [168]) = ($4 + [192])
	*($4 + [176]) = ($4 + [520])
	*($4 + [180]) = ($4 + [280])
	*($4 + [184]) = ($4 + [528])
	*($4 + [568]) = $2
	if ( ((int_64)CALL current_receiver() == (int_64)*($4 + [384])) ){ goto $label$33 }
	CALL eosio_assert([0], [12819])
	
.LABEL $label$33
	*($4 + [548]) = ($4 + [168])
	*($4 + [544]) = ($4 + [384])
	*($4 + [552]) = ($4 + [568])
	*(($7 = CALL $17([80])) + [24]) = (int_64)0
	*($7 + [8]) = (int_64)0
	*($7 + [40]) = [0]
	*($7 + [48]) = (int_64)0
	*($7 + [56]) = ($4 + [384])
	CALL $107(($4 + [544]), $7)
	*($4 + [560]) = $7
	$2 = *($7)
	*($4 + [544]) = $2
	$5 = *($7 + [60])
	*($4 + [540]) = $5
	$8 = ($4 + [412])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($4 + [416]))) ){ goto $label$36 }
	*($3 + [8]) = $2
	*($3 + [16]) = $5
	*($4 + [560]) = [0]
	*($3) = $7
	*($8) = ($3 + [24])
	$3 = *($4 + [560])
	$7 = [0]
	*($4 + [560]) = [0]
	if ( $3 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	CALL $106(($4 + [408]), ($4 + [560]), ($4 + [544]), ($4 + [540]))
	$3 = *($4 + [560])
	$7 = [0]
	*($4 + [560]) = [0]
	if ( ($3 == 0) ){ goto $label$34 }
	
.LABEL $label$35
	CALL $19($3)
	
.LABEL $label$34
	$2 = *((($4 + [280]) + [8]))
	*((($4 + [128]) + [8])) = $2
	*((($4 + [16]) + [8])) = $2
	*($4 + [160]) = $7
	*((($4 + [40]) + [8])) = *($4 + [160])
	*($4 + [144]) = [1]
	*(($4 + [32])) = *($4 + [144])
	*($4 + [152]) = $7
	*($4 + [120]) = [1]
	$2 = *($4 + [280])
	*($4 + [128]) = $2
	$1 = *($4 + [192])
	*($4 + [112]) = $1
	*($4 + [16]) = $2
	*($4 + [40]) = *($4 + [152])
	$2 = *($4 + [520])
	$6 = *($4 + [464])
	$9 = *($4 + [528])
	*(($4 + [8])) = *($4 + [120])
	*($4) = $1
	CALL $46($9, $6, $2, ($4 + [40]), ($4 + [16]), $4)
	$5 = *($4 + [224])
	if ( ($5 == 0) ){ goto $label$37 }
	$8 = ($4 + [228])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$39 }
	
.LOOP $label$40:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$41 }
	CALL $19($3)
	
.LABEL $label$41
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$40 }
	$7 = *(($4 + [224]))
	goto $label$38 
	
.LABEL $label$39
	$7 = $5
	
.LABEL $label$38
	*($8) = $5
	CALL $19($7)
	
.LABEL $label$37
	$5 = *($4 + [264])
	if ( ($5 == 0) ){ goto $label$42 }
	$8 = ($4 + [268])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$44 }
	
.LOOP $label$45:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$46 }
	CALL $19($3)
	
.LABEL $label$46
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$45 }
	$7 = *(($4 + [264]))
	goto $label$43 
	
.LABEL $label$44
	$7 = $5
	
.LABEL $label$43
	*($8) = $5
	CALL $19($7)
	
.LABEL $label$42
	$5 = *($4 + [408])
	if ( ($5 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$8 = ($4 + [412])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$48 }
	
.LOOP $label$49:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$50 }
	CALL $19($3)
	
.LABEL $label$50
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$49 }
	$7 = *(($4 + [408]))
	goto $label$47 
	
.LABEL $label$48
	$7 = $5
	
.LABEL $label$47
	*($8) = $5
	CALL $19($7)
	
.LABEL $label$10
	$5 = *($4 + [448])
	if ( ($5 == 0) ){ goto $label$51 }
	$8 = ($4 + [452])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$53 }
	
.LOOP $label$54:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$55 }
	CALL $19($3)
	
.LABEL $label$55
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$54 }
	$7 = *(($4 + [448]))
	goto $label$52 
	
.LABEL $label$53
	$7 = $5
	
.LABEL $label$52
	*($8) = $5
	CALL $19($7)
	
.LABEL $label$51
	$8 = *($4 + [504])
	if ( ($8 == 0) ){ goto $label$56 }
	$0 = ($4 + [508])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$58 }
	
.LOOP $label$59:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$60 }
	$5 = *($3 + [44])
	if ( ($5 == 0) ){ goto $label$61 }
	*(($3 + [48])) = $5
	CALL $19($5)
	
.LABEL $label$61
	CALL $19($3)
	
.LABEL $label$60
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$59 }
	$7 = *(($4 + [504]))
	goto $label$57 
	
.LABEL $label$58
	$7 = $8
	
.LABEL $label$57
	*($0) = $8
	CALL $19($7)
	
.LABEL $label$56
	$global$0 = ($4 + [576])
	return (unreachable)
	
.LABEL $label$9
	CALL abort()
	
.LABEL $label$8
	CALL eosio_assert([0], [11372])
	(unreachable)
}

void .FUNC $102 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [56]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12607])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12653])
	
.LABEL $label$2
	$6 = ($1 + [8])
	*($5 + [24]) = *($6)
	*($6) = *(*($3))
	$7 = *($1 + [44])
	$6 = *(($1 + [48]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$10 = *($1)
	$3 = [44]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$3 = (($8 & [-8]) + $3)
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $11($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL $170(($5 + [8]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL $12($4)
	
.LABEL $label$7
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $26(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$9 }
	$1 = ($1 + [64])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3479593662097129472, ($5 + [32]), $10)
	*($1) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$9
	$global$0 = ($5 + [48])
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [16]) = *(*($4 + [8]))
	$5 = *($0)
	$6 = *(*(*($4 + [12])))
	$7 = ($1 + [40])
	if ( (*($7) == 0) ){ goto $label$1 }
	*($7) = [0]
	
.LABEL $label$1
	*($1 + [24]) = $6
	*($1 + [48]) = *(*($4 + [16]))
	*($3 + [24]) = [25]
	*($3 + [16]) = ($3 + [24])
	*($3) = ($3 + [16])
	CALL void $3((int_32 ($1 + [24])), (int_32 *([0] + [13024])))
	$7 = (*($3 + [24]) + [8])
	if ( ($7 <= [513]) ){ goto $label$3 }
	$4 = CALL $11($7)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $7)
	CALL $177($3, $1)
	$6 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($5 + [8]), (int_64)-3981182070595518464, *(*($0 + [8])), $6, $4, $7)
	if ( ($7 <= [513]) ){ goto $label$4 }
	CALL $12($4)
	
.LABEL $label$4
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$5 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$4 = ($5 + [8])
	$6 = *($4)
	$0 = *(($0 + [8]))
	$8 = *($0)
	$9 = *($1)
	*($3 + [16]) = *(($1 + [8]))
	*($1 + [64]) = CALL db_idx64_store($6, (int_64)-3981182070595518464, $8, $9, ($3 + [16]))
	$6 = *($0)
	$8 = *($4)
	$9 = *($1)
	*($3 + [16]) = *(($1 + [16]))
	*(($1 + [68])) = CALL db_idx64_store($8, (int_64)-3981182070595518463, $6, $9, ($3 + [16]))
	$6 = *($0)
	$8 = *($4)
	$9 = *($1)
	*($3 + [16]) = ( (int_64)0 ? *(($1 + [24])) : *(($1 + [40])) )
	*(($1 + [72])) = CALL db_idx64_store($8, (int_64)-3981182070595518462, $6, $9, ($3 + [16]))
	$6 = *($0)
	$8 = *($4)
	$9 = *($1)
	*($3 + [16]) = *(($1 + [48]))
	*(($1 + [76])) = CALL db_idx64_store($8, (int_64)-3981182070595518461, $6, $9, ($3 + [16]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $104 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [60]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [12976])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3981182070595518464)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [12922])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [12922])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $75(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [16]) = *(*($4 + [8]))
	$5 = ($1 + [24])
	$6 = *($0)
	$7 = *($4 + [12])
	$8 = ($1 + [40])
	if ( ((int_32)*($8) != (int_32)[1]) ){ goto $label$2 }
	*($5) = *($7)
	*(($5 + [8])) = *(($7 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($8) = [-1]
	*(($5 + [8])) = *(($7 + [8]))
	*($5) = *($7)
	*($8) = [1]
	
.LABEL $label$1
	*($1 + [48]) = *(*($4 + [16]))
	*($3 + [24]) = [25]
	*($3 + [16]) = ($3 + [24])
	*($3) = ($3 + [16])
	CALL void $3((int_32 $5), (int_32 *([0] + [13028])))
	$5 = (*($3 + [24]) + [8])
	if ( ($5 <= [513]) ){ goto $label$4 }
	$4 = CALL $11($5)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $5)
	CALL $177($3, $1)
	$9 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($6 + [8]), (int_64)-3981182070595518464, *(*($0 + [8])), $9, $4, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL $12($4)
	
.LABEL $label$5
	if ( (uint_64)($9 <= *($6 + [16])) ){ goto $label$6 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$4 = ($6 + [8])
	$9 = *($4)
	$0 = *(($0 + [8]))
	$10 = *($0)
	$11 = *($1)
	*($3 + [16]) = *(($1 + [8]))
	*($1 + [64]) = CALL db_idx64_store($9, (int_64)-3981182070595518464, $10, $11, ($3 + [16]))
	$9 = *($0)
	$10 = *($4)
	$11 = *($1)
	*($3 + [16]) = *(($1 + [16]))
	*(($1 + [68])) = CALL db_idx64_store($10, (int_64)-3981182070595518463, $9, $11, ($3 + [16]))
	$9 = *($0)
	$10 = *($4)
	$11 = *($1)
	*($3 + [16]) = ( (int_64)0 ? *($1 + [24]) : *(($1 + [40])) )
	*(($1 + [72])) = CALL db_idx64_store($10, (int_64)-3981182070595518462, $9, $11, ($3 + [16]))
	$9 = *($0)
	$10 = *($4)
	$11 = *($1)
	*($3 + [16]) = *(($1 + [48]))
	*(($1 + [76])) = CALL db_idx64_store($10, (int_64)-3981182070595518461, $9, $11, ($3 + [16]))
	$global$0 = ($3 + [32])
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $17(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $19($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $19($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $109 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$6 = *(($5 + [-24]))
	if ( ((int_32)*($6 + [56]) == (int_32)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [12763])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$2
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-3981182070595518464, $2)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$5 }
	CALL eosio_assert([0], $3)
	
.LABEL $label$5
	$6 = CALL $75($1, $6)
	if ( ((int_32)*($6 + [56]) == (int_32)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [12763])
	
.LABEL $label$1
	*($0 + [4]) = $6
	*($0) = $1
}

void .FUNC $108 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	float_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$4 = ($global$0 - [512])
	$global$0 = $4
	*($4 + [488]) = $2
	if ( ((*($1) & [1]) == 0) ){ goto $label$1 }
	if ( (*($1 + [4]) <= [257]) ){ goto $label$1 }
	CALL eosio_assert([0], [11302])
	
.LABEL $label$1
	CALL require_auth($2)
	*((($4 + [448]) + [32])) = (int_64)0
	*($4 + [464]) = (int_64)-1
	*($4 + [472]) = (int_64)0
	$2 = *($0)
	*($4 + [448]) = $2
	*($4 + [456]) = $2
	CALL $109(($4 + [440]), ($4 + [448]), $3, [11714])
	*((($4 + [400]) + [32])) = [0]
	*($4 + [416]) = (int_64)-1
	*($4 + [424]) = (int_64)0
	*($4 + [436]) = [0]
	$2 = *($0)
	*($4 + [400]) = $2
	*($4 + [408]) = $2
	CALL $96(($4 + [392]), ($4 + [400]), *(*($4 + [444]) + [16]), [11403])
	$1 = *($4 + [396])
	if ( ((int_64)*($1 + [8]) == (int_64)*($4 + [488])) ){ goto $label$2 }
	CALL eosio_assert([0], [11725])
	$1 = *($4 + [396])
	
.LABEL $label$2
	$2 = *($0)
	*($4 + [352]) = ($4 + [440])
	if ( $1 ){ goto $label$3 }
	CALL eosio_assert([0], [12572])
	
.LABEL $label$3
	CALL $110(($4 + [400]), $1, $2, ($4 + [352]))
	$5 = [0]
	*(($4 + [384])) = [0]
	*($4 + [368]) = (int_64)-1
	$2 = *($0)
	*($4 + [352]) = $2
	*($4 + [360]) = $2
	*($4 + [376]) = (int_64)0
	$1 = CALL db_lowerbound_i64($2, $2, (int_64)-3945153273576554496, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $66(($4 + [352]), $1)
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert([0], [11372])
	
.LABEL $label$4
	$6 = *(($1 + [40]))
	$1 = *($4 + [444])
	$7 = ( [0] ? ($1 + [24]) : $6 )
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((int_32)$6 != (int_32)[1]) ){ goto $label$7 }
	$8 = *(($1 + [32]))
	$9 = *(($1 + [24]))
	$10 = (CASTING float_64)(int_64 $9)
	$11 = CALL $41(((float_64)$10 * (float_64)(PROMOTE float_64)(float_32 (float_32))((float_32)1 - *($5 + [40])))))
	$12 = *($5 + [16])
	if ( (uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$13 }
	CALL eosio_assert([0], [11954])
	
.LABEL $label$13
	$2 = (uint_64)$12 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$13 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$2 = $13
	$14 = $1
	$1 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$2 = $13
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$14 = ((int_32)$1 < (int_32)[6])
	$15 = ($1 + [1])
	$1 = $15
	if ( $14 ){ goto $label$18 }
	$1 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	CALL eosio_assert([0], [12003])
	
.LABEL $label$14
	CALL $40(($4 + [280]), $3)
	$1 = CALL $39(($4 + [280]), [0], [11736])
	$14 = ($1 + [8])
	*((($4 + [152]) + [8])) = *($14)
	*($4 + [152]) = *($1)
	*($1) = (int_64)0
	*($14) = [0]
	if ( ((*($4 + [280]) & [1]) == 0) ){ goto $label$19 }
	CALL $19(*($4 + [288]))
	
.LABEL $label$19
	$2 = *($0)
	$13 = *($5)
	*((($4 + [136]) + [8])) = $12
	*($4 + [264]) = $11
	*($4 + [272]) = $12
	*($4 + [136]) = $11
	CALL $48($0, $13, $2, *($4 + [488]), ($4 + [136]), ($4 + [152]))
	$11 = CALL $41(((float_64)$10 * (float_64)(PROMOTE float_64)(float_32 ((float_32)*($5 + [36]) + (float_32)*(($5 + [40]))))))
	if ( (int_64)($11 == 0) ){ goto $label$9 }
	$12 = *(($5 + [16]))
	if ( (uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$20 }
	CALL eosio_assert([0], [11954])
	
.LABEL $label$20
	$2 = (uint_64)$12 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$13 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$2 = $13
	$14 = $1
	$1 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$21 }
	goto $label$10 
	
.LABEL $label$22
	$2 = $13
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$14 = ((int_32)$1 < (int_32)[6])
	$15 = ($1 + [1])
	$1 = $15
	if ( $14 ){ goto $label$23 }
	$1 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$21 }
	goto $label$10 
	
.LABEL $label$12
	CALL $96(($4 + [152]), ($4 + [400]), *($7), [11403])
	$2 = *($0)
	$1 = *($4 + [156])
	*($4 + [280]) = ($4 + [488])
	if ( $1 ){ goto $label$24 }
	CALL eosio_assert([0], [12572])
	
.LABEL $label$24
	CALL $111(($4 + [400]), $1, $2, ($4 + [280]))
	*($4 + [344]) = [1]
	$1 = *($4 + [444])
	$13 = *($1 + [16])
	$11 = *($1 + [48])
	$2 = *($7)
	*((($4 + [48]) + [8])) = *($4 + [344])
	*((($4 + [24]) + [8])) = *((($4 + [312]) + [8]))
	*($4 + [328]) = [0]
	*(($4 + [40])) = *($4 + [328])
	*($4 + [312]) = [0]
	*($4 + [304]) = [1]
	*($4 + [296]) = $3
	*($4 + [336]) = $2
	*($4 + [48]) = $2
	*($4 + [24]) = *($4 + [312])
	$2 = *($4 + [488])
	*((($4 + [8]) + [8])) = *($4 + [304])
	*($4 + [8]) = $3
	CALL $46($11, $2, $13, ($4 + [48]), ($4 + [24]), ($4 + [8]))
	goto $label$8 
	
.LABEL $label$11
	CALL eosio_assert([0], [12003])
	
.LABEL $label$10
	*($4 + [248]) = $11
	*($4 + [256]) = $12
	$2 = *($5 + [8])
	$13 = *($0)
	$11 = *($5)
	*(($4 + [288])) = [0]
	*($4 + [280]) = (int_64)0
	$1 = CALL $25([11747])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$27 }
	*($4 + [280]) = ($1 << [1])
	$14 = (($4 + [280]) | [1])
	if ( $1 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$15 = (($1 + [16]) & [-16])
	$14 = CALL $17($15)
	*($4 + [280]) = ($15 | [1])
	*($4 + [288]) = $14
	*($4 + [284]) = $1
	
.LABEL $label$26
	CALL memcpy($14, [11747], $1)
	
.LABEL $label$25
	*(($14 + $1)) = [0]
	*((($4 + [120]) + [8])) = *((($4 + [248]) + [8]))
	*($4 + [120]) = *($4 + [248])
	CALL $48($0, $11, $13, $2, ($4 + [120]), ($4 + [280]))
	if ( ((*($4 + [280]) & [1]) == 0) ){ goto $label$9 }
	CALL $19(*($4 + [288]))
	
.LABEL $label$9
	$1 = *($4 + [444])
	$2 = *($1 + [16])
	$13 = *($1 + [48])
	*((($4 + [80]) + [8])) = $8
	*($4 + [240]) = [0]
	*((($4 + [104]) + [8])) = *($4 + [240])
	*($4 + [224]) = [1]
	*(($4 + [96])) = *($4 + [224])
	*($4 + [232]) = [0]
	*($4 + [200]) = [1]
	*($4 + [208]) = $9
	*($4 + [216]) = $8
	*($4 + [192]) = $3
	*($4 + [80]) = $9
	*($4 + [104]) = *($4 + [232])
	$11 = *($4 + [488])
	*((($4 + [64]) + [8])) = *($4 + [200])
	*($4 + [64]) = $3
	CALL $46($13, $11, $2, ($4 + [104]), ($4 + [80]), ($4 + [64]))
	if ( ((*($4 + [152]) & [1]) == 0) ){ goto $label$8 }
	CALL $19(*($4 + [160]))
	
.LABEL $label$8
	*(($4 + [184])) = [0]
	*($4 + [176]) = (int_64)0
	*($4 + [188]) = [0]
	*($4 + [168]) = (int_64)-1
	$2 = *($0)
	*($4 + [152]) = $2
	*($4 + [160]) = $2
	$1 = CALL db_find_i64($2, $2, (int_64)-3999196469105000448, *(*($4 + [444]) + [16]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$28 }
	$1 = CALL $73(($4 + [152]), $1)
	if ( ((int_32)*($1 + [52]) == (int_32)($4 + [152])) ){ goto $label$29 }
	CALL eosio_assert([0], [12763])
	
.LABEL $label$29
	$14 = CALL db_next_i64(*($1 + [56]), ($4 + [280]))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$30 }
	CALL $73(($4 + [152]), $14)
	
.LABEL $label$30
	CALL $74(($4 + [152]), $1)
	
.LABEL $label$28
	$2 = *(*($4 + [444]) + [16])
	$13 = *($4 + [440])
	$1 = (CASTING uint_32)(uint_64 (uint_64)$13 >> (uint_64)(int_64)32)
	if ( $1) ){ goto $label$31 }
	CALL eosio_assert([0], [12360])
	CALL eosio_assert([0], [12394])
	
.LABEL $label$31
	$14 = CALL db_next_i64(*($1 + [60]), ($4 + [280]))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$32 }
	CALL $75((CASTING uint_32)(uint_64 $13), $14)
	
.LABEL $label$32
	CALL $61(($4 + [448]), $1)
	if ( $6 ){ goto $label$33 }
	CALL $58($0, *($7), ($4 + [448]), $5)
	
.LABEL $label$33
	*($4 + [504]) = $2
	CALL $58($0, $2, ($4 + [448]), $5)
	*($4 + [496]) = ($4 + [448])
	CALL $62(($4 + [280]), ($4 + [496]), ($4 + [504]))
	$1 = *($4 + [284])
	if ( ($1 == 0) ){ goto $label$34 }
	if ( ((int_64)*($4 + [504]) != (int_64)( (int_64)0 ? *($1 + [24]) : *(($1 + [40])) )) ){ goto $label$34 }
	*($4 + [280]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)32) | (int_64)*($4 + [280]))
	CALL $63(($4 + [280]))
	CALL $61(*($4 + [496]), $1)
	
.LABEL $label$34
	$15 = *($4 + [176])
	if ( ($15 == 0) ){ goto $label$35 }
	$0 = ($4 + [180])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$15) ){ goto $label$37 }
	
.LOOP $label$38:
	$1 = ($1 + [-24])
	$14 = *($1)
	*($1) = [0]
	if ( ($14 == 0) ){ goto $label$39 }
	CALL $19($14)
	
.LABEL $label$39
	if ( ((int_32)$15 != (int_32)$1) ){ goto $label$38 }
	$1 = *(($4 + [176]))
	goto $label$36 
	
.LABEL $label$37
	$1 = $15
	
.LABEL $label$36
	*($0) = $15
	CALL $19($1)
	
.LABEL $label$35
	$15 = *($4 + [376])
	if ( ($15 == 0) ){ goto $label$40 }
	$0 = ($4 + [380])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$15) ){ goto $label$42 }
	
.LOOP $label$43:
	$1 = ($1 + [-24])
	$14 = *($1)
	*($1) = [0]
	if ( ($14 == 0) ){ goto $label$44 }
	CALL $19($14)
	
.LABEL $label$44
	if ( ((int_32)$15 != (int_32)$1) ){ goto $label$43 }
	$1 = *(($4 + [376]))
	goto $label$41 
	
.LABEL $label$42
	$1 = $15
	
.LABEL $label$41
	*($0) = $15
	CALL $19($1)
	
.LABEL $label$40
	$0 = *($4 + [424])
	if ( ($0 == 0) ){ goto $label$45 }
	$5 = ($4 + [428])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$47 }
	
.LOOP $label$48:
	$1 = ($1 + [-24])
	$14 = *($1)
	*($1) = [0]
	if ( ($14 == 0) ){ goto $label$49 }
	$15 = *($14 + [44])
	if ( ($15 == 0) ){ goto $label$50 }
	*(($14 + [48])) = $15
	CALL $19($15)
	
.LABEL $label$50
	CALL $19($14)
	
.LABEL $label$49
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$48 }
	$1 = *(($4 + [424]))
	goto $label$46 
	
.LABEL $label$47
	$1 = $0
	
.LABEL $label$46
	*($5) = $0
	CALL $19($1)
	
.LABEL $label$45
	$15 = *($4 + [472])
	if ( ($15 == 0) ){ goto $label$51 }
	$0 = ($4 + [476])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$15) ){ goto $label$53 }
	
.LOOP $label$54:
	$1 = ($1 + [-24])
	$14 = *($1)
	*($1) = [0]
	if ( ($14 == 0) ){ goto $label$55 }
	CALL $19($14)
	
.LABEL $label$55
	if ( ((int_32)$15 != (int_32)$1) ){ goto $label$54 }
	$1 = *(($4 + [472]))
	goto $label$52 
	
.LABEL $label$53
	$1 = $15
	
.LABEL $label$52
	*($0) = $15
	CALL $19($1)
	
.LABEL $label$51
	$global$0 = ($4 + [512])
	return (unreachable)
	
.LABEL $label$7
	CALL abort()
	
.LABEL $label$6
	CALL $32(($4 + [280]))
	(unreachable)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $34($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $39 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $38($0, $1, $2, CALL $25($2))
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $37($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $17($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $19($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $17($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $19($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $17(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $19($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $32 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $17($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $27([2], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}