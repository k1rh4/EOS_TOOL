(data (i32.const 4) "`j\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "eosio.token\00")
(data (i32.const 128) "transfer\00")
(data (i32.const 144) "clear\00")
(data (i32.const 160) "cannot pass end iterator to erase\00")
(data (i32.const 208) "cannot increment end iterator\00")
(data (i32.const 240) "object passed to erase is not in multi_index\00")
(data (i32.const 288) "cannot erase objects in table of another contract\00")
(data (i32.const 352) "attempt to remove object that was not in multi_index\00")
(data (i32.const 416) "error reading iterator\00")
(data (i32.const 448) "read\00")
(data (i32.const 464) "invalid symbol name\00")
(data (i32.const 496) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 560) "get\00")
(data (i32.const 576) "Invalid token transfer\00")
(data (i32.const 608) "Quantity must be biger than 0.1EOS\00")
(data (i32.const 656) "Game already exists\00")
(data (i32.const 688) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 752) "Quantity not enough\00")
(data (i32.const 784) "Bet amount out of range\00")
(data (i32.const 832) "System error!\00")
(data (i32.const 848) "\e6\be\b3\e9\97\a8\e9\aa\b0\e5\ae\9d(https://tt.dbet.one \e5\8f\b2\e4\b8\8a\e6\9c\80\e9\ab\98\e8\b5\94\e7\8e\87\e9\aa\b0\e5\ae\9d\e6\b8\b8\e6\88\8f) \e9\82\80\e8\af\b7\e7\94\a8\e6\88\b7\00")
(data (i32.const 928) "\e5\a5\96\e5\8a\b1!\00")
(data (i32.const 944) "cannot create objects in table of another contract\00")
(data (i32.const 1008) "-\00")
(data (i32.const 1024) "EOS without bet type\00")
(data (i32.const 1056) "Bet type not found\00")
(data (i32.const 1088) "Quantity must be positive number\00")
(data (i32.const 1136) "Bet type must be positive number\00")
(data (i32.const 1184) "offertype error\00")
(data (i32.const 1216) "attempt to add asset with different symbol\00")
(data (i32.const 1264) "addition underflow\00")
(data (i32.const 1296) "addition overflow\00")
(data (i32.const 1328) "Bet amount must be bigger than 0.1EOS\00")
(data (i32.const 1376) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1440) "write\00")
(data (i32.const 1456) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1520) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1568) "0\06\00\00")
(data (i32.const 1584) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 1632) "active\00")
(data (i32.const 1648) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 1704) "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\f0?\01\00\00\00\00\00\00\00\00\00\00\00\00\00\f0?\03\00\00\00\00\00\00\00\00\00\00\00\00\00\f0?\02\00\00\00\00\00\00\00\00\00\00\00\00\00\f0?\04\00\00\00\00\00\00\00\00\00\00\00\00\00P@\05\00\00\00\00\00\00\00\00\00\00\00\00\00@@\06\00\00\00\00\00\00\00\00\00\00\00\00\002@\07\00\00\00\00\00\00\00\00\00\00\00\00\00(@\08\00\00\00\00\00\00\00\00\00\00\00\00\00 @\t\00\00\00\00\00\00\00\00\00\00\00\00\00\18@\n\00\00\00\00\00\00\00\00\00\00\00\00\00\18@\0b\00\00\00\00\00\00\00\00\00\00\00\00\00\18@\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\18@\0d\00\00\00\00\00\00\00\00\00\00\00\00\00 @\0e\00\00\00\00\00\00\00\00\00\00\00\00\00(@\0f\00\00\00\00\00\00\00\00\00\00\00\00\002@\10\00\00\00\00\00\00\00\00\00\00\00\00\00@@\11\00\00\00\00\00\00\00\00\00\00\00\00\00P@d\00\00\00\00\00\00\00\9a\99\99\99\99\99\f1?\c8\00\00\00\00\00\00\00\9a\99\99\99\99\99\f1?,\01\00\00\00\00\00\00\9a\99\99\99\99\99\f1?\90\01\00\00\00\00\00\00\9a\99\99\99\99\99\f1?\f4\01\00\00\00\00\00\00\9a\99\99\99\99\99\f1?X\02\00\00\00\00\00\00\9a\99\99\99\99\99\f1?n\00\00\00\00\00\00\00\00\00\00\00\00\00(@\dc\00\00\00\00\00\00\00\00\00\00\00\00\00(@J\01\00\00\00\00\00\00\00\00\00\00\00\00(@\b8\01\00\00\00\00\00\00\00\00\00\00\00\00(@&\02\00\00\00\00\00\00\00\00\00\00\00\00(@\94\02\00\00\00\00\00\00\00\00\00\00\00\00(@o\00\00\00\00\00\00\00\00\00\00\00\00\00i@\de\00\00\00\00\00\00\00\00\00\00\00\00\00i@M\01\00\00\00\00\00\00\00\00\00\00\00\00i@\bc\01\00\00\00\00\00\00\00\00\00\00\00\00i@+\02\00\00\00\00\00\00\00\00\00\00\00\00i@\9a\02\00\00\00\00\00\00\00\00\00\00\00\00i@\t\03\00\00\00\00\00\00\00\00\00\00\00\00@@")
(data (i32.const 10704) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 10800) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 10816) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 10832) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$7 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$8 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$9 (param i32)))
(import "env" "db_idx64_store" (func $fimport$10 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$14 (param i32)))
(import "env" "db_store_i64" (func $fimport$15 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$16 (param i32 i32)))
(import "env" "is_account" (func $fimport$17 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$21 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$22 (param i64)))
(import "env" "require_auth2" (func $fimport$23 (param i64 i64)))
(import "env" "send_inline" (func $fimport$24 (param i32 i32)))
(import "env" "sha256" (func $fimport$25 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$26 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$27 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN5sicbo8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $7))
(export "_ZN5sicbo5clearEv" (func $9))
(export "_ZN5sicbo11_getWinsMapEyPy" (func $23))
(export "_ZN5sicbo11transfer_toEyN5eosio5assetERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $25))
(export "_ZN5sicbo12_split_extraENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPN5eosio5assetEPySA_" (func $30))
(export "_ZN5sicbo7str2eosENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $31))
(export "_Z8isdecnumNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $40))
(export "_Z8isdecnumPKc" (func $41))
(export "_ZN5sicbo17require_offertypeEi" (func $42))
(export "malloc" (func $43))
(export "free" (func $46))
(export "isdigit" (func $61))
(export "pow" (func $62))
(export "sqrt" (func $63))
(export "fabs" (func $64))
(export "scalbn" (func $65))
(export "atoi" (func $66))
(export "atoll" (func $67))
(export "llabs" (func $68))
(export "memchr" (func $69))
(export "memcmp" (func $70))
(export "strlen" (func $71))
(table $0 3 3 anyfunc)
(elem (i32.const 0) $72 $7 $9)



void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $59(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $59(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $48(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $48(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [10816])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [10800]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [10832]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $20($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $52($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $47($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $52($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $48($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $49($7)
	return (unreachable)
}

int_32 .FUNC atoi (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$3 = *($0)
	$1 = int_32(($3 << [24]) >> [24])
	$2 = ($1 + [-9])
	$4 = ($0 + [1])
	$0 = $4
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$1 }
	$0 = $4
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$1 = [1]
	goto $label$4 
	
.LABEL $label$5
	$1 = [0]
	
.LABEL $label$4
	$3 = *($4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-1])
	$1 = [0]
	
.LABEL $label$2
	$2 = [0]
	$3 = (int_32(($3 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($4 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $3)
	$3 = *($0)
	$0 = ($0 + [1])
	$3 = ($3 + [-48])
	if ( ($3 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $1 )
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1440])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1440])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_64 .FUNC atoll (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	
.LOOP $label$1:
	$3 = *($0)
	$1 = int_32(($3 << [24]) >> [24])
	$2 = ($1 + [-9])
	$4 = ($0 + [1])
	$0 = $4
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$1 }
	$0 = $4
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$2 = [1]
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	$3 = *($4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-1])
	$2 = [0]
	
.LABEL $label$2
	$5 = (int_64)0
	$3 = (int_32(($3 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($4 + [1])
	$5 = (int_64)0
	
.LOOP $label$7:
	$5 = (int_64))(((int_64)$5 * (int_64)10) - (CASTING int_64)(int_32 $3))
	$3 = *($0)
	$0 = ($0 + [1])
	$3 = ($3 + [-48])
	if ( ($3 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $5 ? (int_64))((int_64)0 - $5) : $2 )
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	$11 = $12
	*([0] + [4]) = $12
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$8 = ($4 + [40])
	$7 = *($8)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = ($4 + [24])
	$6 = CALL db_lowerbound_i64(*($5), *(($4 + [32])), (int_64)-4354846489561792512, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $12($5, $6)
	*($11 + [12]) = [0]
	*($11 + [8]) = $5
	$7 = *(*(CALL $33(($11 + [8])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [40])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [1376])
	*($1) = *($8)
	*($1 + [8]) = *(*($3 + [4]))
	$7 = *(*($3 + [8]))
	*($1 + [16]) = ( (int_64)0 ? $7 : ((int_64)$7 == (int_64)*(*($3 + [4]))) )
	*($1 + [24]) = *(*($3 + [12]))
	$4 = *($3 + [16])
	*($1 + [32]) = *($4)
	*(($1 + [40])) = *(($4 + [8]))
	*($1 + [48]) = *(*($3 + [20]))
	$3 = *($3 + [24])
	*($1 + [56]) = *($3)
	*(($1 + [64])) = *(($3 + [8]))
	$7 = CALL current_time()
	*($1 + [76]) = [0]
	*($1 + [72]) = ((uint_64)$7 / (uint_64)(int_64)1000000)
	$12 = $12
	$3 = ($12 + [-80])
	*([0] + [4]) = $3
	*($11 + [12]) = $3
	*($11 + [8]) = $3
	*($11 + [16]) = ($12 + [-3])
	CALL $34(($11 + [8]), $1)
	$7 = *($1)
	*($1 + [84]) = CALL db_store_i64(*($2 + [8]), (int_64)-4354846489561792512, *(*($0 + [8])), $7, $3, [77])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$3 = ($2 + [8])
	$7 = *($3)
	$0 = *(($0 + [8]))
	$9 = *($0)
	$10 = *($1)
	*($11 + [24]) = *(($1 + [24]))
	*($1 + [88]) = CALL db_idx64_store($7, (int_64)-4354846489561792512, $9, $10, ($11 + [24]))
	$7 = *($0)
	$9 = *($3)
	$10 = *($1)
	*($11 + [24]) = *(($1 + [8]))
	*(($1 + [92])) = CALL db_idx64_store($9, (int_64)-4354846489561792511, $7, $10, ($11 + [24]))
	*([0] + [4]) = ($11 + [32])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $47([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [1568]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $60($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $52($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $47($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $58($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $48($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [560])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $21($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [448])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC _ZN5sicbo11_getWinsMapEyPy (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	float_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [48])
	*([0] + [4]) = $14
	*($0 + [8]) = [0]
	*($0 + [4]) = [0]
	*($3) = (int_64)0
	$11 = ($0 + [4])
	*($0) = $11
	*($14 + [8]) = ((int_64)(CASTING int_64)(int_32 ((int_32)CALL tapos_block_num() * (int_32)CALL $fimport$27())) + (int_64)$2)
	CALL sha256(($14 + [8]), [4], ($14 + [16]))
	$2 = CALL llabs(*($14 + [16]))
	$12 = CALL pow((float_64)10, (float_64)0)
	$4 = (CASTING uint_32)(uint_64 ((int_64)((int_64)$2 % (int_64)6) + (int_64)1))
	*($3) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *($3)) + (float_64)((float_64)$12 * (float_64)(CASTING float_64)(int_32 $4))))
	$2 = CALL llabs(*($14 + [17]))
	$12 = CALL pow((float_64)10, (float_64)1)
	$5 = (CASTING uint_32)(uint_64 ((int_64)((int_64)$2 % (int_64)6) + (int_64)1))
	*($3) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *($3)) + (float_64)((float_64)$12 * (float_64)(CASTING float_64)(int_32 $5))))
	$2 = CALL llabs(*($14 + [18]))
	$12 = CALL pow((float_64)10, (float_64)2)
	$6 = (CASTING uint_32)(uint_64 ((int_64)((int_64)$2 % (int_64)6) + (int_64)1))
	*($3) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *($3)) + (float_64)((float_64)$12 * (float_64)(CASTING float_64)(int_32 $6))))
	$13 = (($5 + $4) + $6)
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$17 }
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$17 }
	$10 = ((int_32)$4 * (int_32)[111])
	$3 = *($11)
	if ( ($3 == 0) ){ goto $label$16 }
	$9 = $3
	$7 = $11
	
.LOOP $label$18:
	$8 = *($9 + [16])
	if ( ((int_32)$10 >= (int_32)$8) ){ goto $label$20 }
	$7 = $9
	$8 = *($9)
	if ( $8 ){ goto $label$19 }
	goto $label$15 
	
.LABEL $label$20
	if ( ((int_32)$8 >= (int_32)$10) ){ goto $label$14 }
	$7 = ($9 + [4])
	$8 = *($9 + [4])
	if ( ($8 == 0) ){ goto $label$14 }
	
.LABEL $label$19
	$9 = $8
	goto $label$18 
	
.LABEL $label$17
	if ( ((uint_32)($13 + [-4]) > (uint_32)[6]) ){ goto $label$21 }
	$3 = *($11)
	if ( ($3 == 0) ){ goto $label$11 }
	$8 = $11
	
.LOOP $label$22:
	$9 = *($3 + [16])
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$24 }
	$8 = $3
	$9 = *($3)
	if ( $9 ){ goto $label$23 }
	goto $label$10 
	
.LABEL $label$24
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$9 }
	$8 = ($3 + [4])
	$9 = *($3 + [4])
	if ( ($9 == 0) ){ goto $label$9 }
	
.LABEL $label$23
	$3 = $9
	goto $label$22 
	
.LABEL $label$21
	if ( ((uint_32)($13 + [-11]) > (uint_32)[6]) ){ goto $label$2 }
	$3 = *($11)
	if ( ($3 == 0) ){ goto $label$7 }
	$8 = $11
	
.LOOP $label$25:
	$9 = *($3 + [16])
	if ( ((int_32)$9 < (int_32)[2]) ){ goto $label$27 }
	$8 = $3
	$9 = *($3)
	if ( $9 ){ goto $label$26 }
	goto $label$6 
	
.LABEL $label$27
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$5 }
	$8 = ($3 + [4])
	$9 = *($3 + [4])
	if ( ($9 == 0) ){ goto $label$5 }
	
.LABEL $label$26
	$3 = $9
	goto $label$25 
	
.LABEL $label$16
	$9 = $11
	$7 = $11
	$8 = *($7)
	if ( $8 ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$15
	$7 = $9
	
.LABEL $label$14
	$8 = *($7)
	if ( $8 ){ goto $label$12 }
	
.LABEL $label$13
	*(($8 = CALL $47([24]))) = (int_64)0
	*($8 + [8]) = $9
	*($7) = $8
	*($8 + [20]) = [0]
	*($8 + [16]) = $10
	$3 = $8
	$9 = *(*($0))
	if ( ($9 == 0) ){ goto $label$28 }
	*($0) = $9
	$3 = *($7)
	
.LABEL $label$28
	$9 = ($0 + [4])
	CALL $24(*($9), $3)
	*(($3 = ($0 + [8]))) = (*($3) + [1])
	$3 = *($9)
	
.LABEL $label$12
	*(($8 + [20])) = [1]
	if ( ($3 == 0) ){ goto $label$32 }
	$8 = $11
	
.LOOP $label$33:
	$9 = *($3 + [16])
	if ( ((int_32)$9 < (int_32)[778]) ){ goto $label$35 }
	$8 = $3
	$9 = *($3)
	if ( $9 ){ goto $label$34 }
	goto $label$31 
	
.LABEL $label$35
	if ( ((int_32)$9 == (int_32)[777]) ){ goto $label$30 }
	$8 = ($3 + [4])
	$9 = *($3 + [4])
	if ( ($9 == 0) ){ goto $label$30 }
	
.LABEL $label$34
	$3 = $9
	goto $label$33 
	
.LABEL $label$32
	$3 = $11
	$8 = $11
	$9 = *($8)
	if ( $9 ){ goto $label$1 }
	goto $label$29 
	
.LABEL $label$31
	$8 = $3
	
.LABEL $label$30
	$9 = *($8)
	if ( $9 ){ goto $label$1 }
	
.LABEL $label$29
	*(($9 = CALL $47([24]))) = (int_64)0
	*($9 + [8]) = $3
	*($8) = $9
	*($9 + [20]) = [0]
	*($9 + [16]) = [777]
	$3 = $9
	$10 = *(*($0))
	if ( ($10 == 0) ){ goto $label$36 }
	*($0) = $10
	$3 = *($8)
	
.LABEL $label$36
	CALL $24(*(($0 + [4])), $3)
	*(($3 = ($0 + [8]))) = (*($3) + [1])
	goto $label$1 
	
.LABEL $label$11
	$3 = $11
	$8 = $11
	$9 = *($8)
	if ( $9 ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$10
	$8 = $3
	
.LABEL $label$9
	$9 = *($8)
	if ( $9 ){ goto $label$3 }
	
.LABEL $label$8
	*(($9 = CALL $47([24]))) = (int_64)0
	*($9 + [8]) = $3
	*($8) = $9
	*($9 + [20]) = [0]
	*($9 + [16]) = [0]
	$3 = $9
	$10 = *(*($0))
	if ( ($10 == 0) ){ goto $label$37 }
	*($0) = $10
	$3 = *($8)
	
.LABEL $label$37
	CALL $24(*(($0 + [4])), $3)
	*(($3 = ($0 + [8]))) = (*($3) + [1])
	goto $label$3 
	
.LABEL $label$7
	$3 = $11
	$8 = $11
	$9 = *($8)
	if ( $9 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $3
	
.LABEL $label$5
	$9 = *($8)
	if ( $9 ){ goto $label$3 }
	
.LABEL $label$4
	*(($9 = CALL $47([24]))) = (int_64)0
	*($9 + [8]) = $3
	*($8) = $9
	*($9 + [20]) = [0]
	*($9 + [16]) = [1]
	$3 = $9
	$10 = *(*($0))
	if ( ($10 == 0) ){ goto $label$38 }
	*($0) = $10
	$3 = *($8)
	
.LABEL $label$38
	CALL $24(*(($0 + [4])), $3)
	*(($3 = ($0 + [8]))) = (*($3) + [1])
	
.LABEL $label$3
	*(($9 + [20])) = [1]
	
.LABEL $label$2
	$3 = *($11)
	if ( ($13 & [1]) ){ goto $label$47 }
	if ( ($3 == 0) ){ goto $label$46 }
	$8 = $11
	
.LOOP $label$48:
	$9 = *($3 + [16])
	if ( ((int_32)$9 < (int_32)[3]) ){ goto $label$50 }
	$8 = $3
	$9 = *($3)
	if ( $9 ){ goto $label$49 }
	goto $label$44 
	
.LABEL $label$50
	if ( ((int_32)$9 == (int_32)[2]) ){ goto $label$43 }
	$8 = ($3 + [4])
	$9 = *($3 + [4])
	if ( ($9 == 0) ){ goto $label$43 }
	
.LABEL $label$49
	$3 = $9
	goto $label$48 
	
.LABEL $label$47
	if ( ($3 == 0) ){ goto $label$45 }
	$8 = $11
	
.LOOP $label$51:
	$9 = *($3 + [16])
	if ( ((int_32)$9 < (int_32)[4]) ){ goto $label$53 }
	$8 = $3
	$9 = *($3)
	if ( $9 ){ goto $label$52 }
	goto $label$41 
	
.LABEL $label$53
	if ( ((int_32)$9 == (int_32)[3]) ){ goto $label$40 }
	$8 = ($3 + [4])
	$9 = *($3 + [4])
	if ( ($9 == 0) ){ goto $label$40 }
	
.LABEL $label$52
	$3 = $9
	goto $label$51 
	
.LABEL $label$46
	$3 = $11
	$8 = $11
	$9 = *($8)
	if ( $9 ){ goto $label$1 }
	goto $label$42 
	
.LABEL $label$45
	$3 = $11
	$8 = $11
	$9 = *($8)
	if ( $9 ){ goto $label$1 }
	goto $label$39 
	
.LABEL $label$44
	$8 = $3
	
.LABEL $label$43
	$9 = *($8)
	if ( $9 ){ goto $label$1 }
	
.LABEL $label$42
	*(($9 = CALL $47([24]))) = (int_64)0
	*($9 + [8]) = $3
	*($8) = $9
	*($9 + [20]) = [0]
	*($9 + [16]) = [2]
	$3 = $9
	$10 = *(*($0))
	if ( ($10 == 0) ){ goto $label$54 }
	*($0) = $10
	$3 = *($8)
	
.LABEL $label$54
	CALL $24(*(($0 + [4])), $3)
	*(($3 = ($0 + [8]))) = (*($3) + [1])
	goto $label$1 
	
.LABEL $label$41
	$8 = $3
	
.LABEL $label$40
	$9 = *($8)
	if ( $9 ){ goto $label$1 }
	
.LABEL $label$39
	*(($9 = CALL $47([24]))) = (int_64)0
	*($9 + [8]) = $3
	*($8) = $9
	*($9 + [20]) = [0]
	*($9 + [16]) = [3]
	$3 = $9
	$10 = *(*($0))
	if ( ($10 == 0) ){ goto $label$55 }
	*($0) = $10
	$3 = *($8)
	
.LABEL $label$55
	CALL $24(*(($0 + [4])), $3)
	*(($3 = ($0 + [8]))) = (*($3) + [1])
	
.LABEL $label$1
	*(($9 + [20])) = [1]
	if ( ((uint_32)($13 + [-4]) > (uint_32)[13]) ){ goto $label$56 }
	$3 = *($11)
	if ( ($3 == 0) ){ goto $label$61 }
	$8 = $11
	
.LOOP $label$62:
	$9 = *($3 + [16])
	if ( ((int_32)$13 >= (int_32)$9) ){ goto $label$64 }
	$8 = $3
	$9 = *($3)
	if ( $9 ){ goto $label$63 }
	goto $label$60 
	
.LABEL $label$64
	if ( ((int_32)$9 >= (int_32)$13) ){ goto $label$59 }
	$8 = ($3 + [4])
	$9 = *($3 + [4])
	if ( ($9 == 0) ){ goto $label$59 }
	
.LABEL $label$63
	$3 = $9
	goto $label$62 
	
.LABEL $label$61
	$3 = $11
	$8 = $11
	$9 = *($8)
	if ( $9 ){ goto $label$57 }
	goto $label$58 
	
.LABEL $label$60
	$8 = $3
	
.LABEL $label$59
	$9 = *($8)
	if ( $9 ){ goto $label$57 }
	
.LABEL $label$58
	*(($9 = CALL $47([24]))) = (int_64)0
	*($9 + [8]) = $3
	*($8) = $9
	*($9 + [20]) = [0]
	*($9 + [16]) = $13
	$3 = $9
	$13 = *(*($0))
	if ( ($13 == 0) ){ goto $label$65 }
	*($0) = $13
	$3 = *($8)
	
.LABEL $label$65
	CALL $24(*(($0 + [4])), $3)
	*(($3 = ($0 + [8]))) = (*($3) + [1])
	
.LABEL $label$57
	*(($9 + [20])) = [1]
	
.LABEL $label$56
	$8 = ((int_32)$4 * (int_32)[100])
	$3 = *($11)
	if ( ($3 == 0) ){ goto $label$70 }
	$9 = $3
	$10 = $11
	
.LOOP $label$71:
	$13 = *($9 + [16])
	if ( ((int_32)$8 >= (int_32)$13) ){ goto $label$73 }
	$10 = $9
	$13 = *($9)
	if ( $13 ){ goto $label$72 }
	goto $label$69 
	
.LABEL $label$73
	if ( ((int_32)$13 >= (int_32)$8) ){ goto $label$68 }
	$10 = ($9 + [4])
	$13 = *($9 + [4])
	if ( ($13 == 0) ){ goto $label$68 }
	
.LABEL $label$72
	$9 = $13
	goto $label$71 
	
.LABEL $label$70
	$9 = $11
	$10 = $11
	$13 = *($10)
	if ( $13 ){ goto $label$66 }
	goto $label$67 
	
.LABEL $label$69
	$10 = $9
	
.LABEL $label$68
	$13 = *($10)
	if ( $13 ){ goto $label$66 }
	
.LABEL $label$67
	*(($13 = CALL $47([24]))) = (int_64)0
	*($13 + [8]) = $9
	*($10) = $13
	*($13 + [20]) = [0]
	*($13 + [16]) = $8
	$3 = $13
	$9 = *(*($0))
	if ( ($9 == 0) ){ goto $label$74 }
	*($0) = $9
	$3 = *($10)
	
.LABEL $label$74
	$9 = ($0 + [4])
	CALL $24(*($9), $3)
	*(($3 = ($0 + [8]))) = (*($3) + [1])
	$3 = *($9)
	
.LABEL $label$66
	*(($13 + [20])) = [1]
	$8 = ((int_32)$5 * (int_32)[100])
	if ( ($3 == 0) ){ goto $label$79 }
	$9 = $3
	$10 = $11
	
.LOOP $label$80:
	$13 = *($9 + [16])
	if ( ((int_32)$8 >= (int_32)$13) ){ goto $label$82 }
	$10 = $9
	$13 = *($9)
	if ( $13 ){ goto $label$81 }
	goto $label$78 
	
.LABEL $label$82
	if ( ((int_32)$13 >= (int_32)$8) ){ goto $label$77 }
	$10 = ($9 + [4])
	$13 = *($9 + [4])
	if ( ($13 == 0) ){ goto $label$77 }
	
.LABEL $label$81
	$9 = $13
	goto $label$80 
	
.LABEL $label$79
	$9 = $11
	$10 = $11
	$13 = *($10)
	if ( $13 ){ goto $label$75 }
	goto $label$76 
	
.LABEL $label$78
	$10 = $9
	
.LABEL $label$77
	$13 = *($10)
	if ( $13 ){ goto $label$75 }
	
.LABEL $label$76
	*(($13 = CALL $47([24]))) = (int_64)0
	*($13 + [8]) = $9
	*($10) = $13
	*($13 + [20]) = [0]
	*($13 + [16]) = $8
	$3 = $13
	$9 = *(*($0))
	if ( ($9 == 0) ){ goto $label$83 }
	*($0) = $9
	$3 = *($10)
	
.LABEL $label$83
	$9 = ($0 + [4])
	CALL $24(*($9), $3)
	*(($3 = ($0 + [8]))) = (*($3) + [1])
	$3 = *($9)
	
.LABEL $label$75
	*(($13 + [20])) = [1]
	$13 = ((int_32)$6 * (int_32)[100])
	if ( ($3 == 0) ){ goto $label$88 }
	$8 = $11
	
.LOOP $label$89:
	$9 = *($3 + [16])
	if ( ((int_32)$13 >= (int_32)$9) ){ goto $label$91 }
	$8 = $3
	$9 = *($3)
	if ( $9 ){ goto $label$90 }
	goto $label$87 
	
.LABEL $label$91
	if ( ((int_32)$9 >= (int_32)$13) ){ goto $label$86 }
	$8 = ($3 + [4])
	$9 = *($3 + [4])
	if ( ($9 == 0) ){ goto $label$86 }
	
.LABEL $label$90
	$3 = $9
	goto $label$89 
	
.LABEL $label$88
	$3 = $11
	$8 = $11
	$9 = *($8)
	if ( $9 ){ goto $label$84 }
	goto $label$85 
	
.LABEL $label$87
	$8 = $3
	
.LABEL $label$86
	$9 = *($8)
	if ( $9 ){ goto $label$84 }
	
.LABEL $label$85
	*(($9 = CALL $47([24]))) = (int_64)0
	*($9 + [8]) = $3
	*($8) = $9
	*($9 + [20]) = [0]
	*($9 + [16]) = $13
	$3 = $9
	$13 = *(*($0))
	if ( ($13 == 0) ){ goto $label$92 }
	*($0) = $13
	$3 = *($8)
	
.LABEL $label$92
	CALL $24(*(($0 + [4])), $3)
	*(($3 = ($0 + [8]))) = (*($3) + [1])
	
.LABEL $label$84
	*(($9 + [20])) = [1]
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$95 }
	$3 = $4
	goto $label$94 
	
.LABEL $label$95
	$9 = ((int_32)$5 == (int_32)$6)
	$3 = ( $5 ? $4 : $9 )
	if ( $9 ){ goto $label$94 }
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$93 }
	
.LABEL $label$94
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$93 }
	$13 = ((int_32)$3 * (int_32)[110])
	$3 = *($11)
	if ( ($3 == 0) ){ goto $label$100 }
	
.LOOP $label$101:
	$9 = *($3 + [16])
	if ( ((int_32)$13 >= (int_32)$9) ){ goto $label$103 }
	$11 = $3
	$9 = *($3)
	if ( $9 ){ goto $label$102 }
	goto $label$99 
	
.LABEL $label$103
	if ( ((int_32)$9 >= (int_32)$13) ){ goto $label$98 }
	$11 = ($3 + [4])
	$9 = *($3 + [4])
	if ( ($9 == 0) ){ goto $label$98 }
	
.LABEL $label$102
	$3 = $9
	goto $label$101 
	
.LABEL $label$100
	$3 = $11
	$9 = *($11)
	if ( $9 ){ goto $label$96 }
	goto $label$97 
	
.LABEL $label$99
	$11 = $3
	
.LABEL $label$98
	$9 = *($11)
	if ( $9 ){ goto $label$96 }
	
.LABEL $label$97
	*(($9 = CALL $47([24]))) = (int_64)0
	*($9 + [8]) = $3
	*($11) = $9
	*($9 + [20]) = [0]
	*($9 + [16]) = $13
	$3 = $9
	$13 = *(*($0))
	if ( ($13 == 0) ){ goto $label$104 }
	*($0) = $13
	$3 = *($11)
	
.LABEL $label$104
	CALL $24(*(($0 + [4])), $3)
	*(($3 = ($0 + [8]))) = (*($3) + [1])
	
.LABEL $label$96
	*(($9 + [20])) = [1]
	
.LABEL $label$93
	*([0] + [4]) = ($14 + [48])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-4354846489561792512, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$4), [1648])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $12($4, CALL $fimport$5(*($4), *($4 + [8]), (int_64)-4354846489561792512, $5))
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$4), [1648])
	
.LABEL $label$4
	*($2 + [88]) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC _ZN5sicbo11transfer_toEyN5eosio5assetERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [128])
	*([0] + [4]) = $12
	$4 = *($0)
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [1632]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [112]
	$10 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$12 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$10 = ((int_64)$9 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$7 }
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [128]
	$11 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$18 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$5 = ($5 + [165])
	goto $label$16 
	
.LABEL $label$18
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$14
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$13 }
	*((($12 + [8]) + [28])) = *(($2 + [12]))
	*((($12 + [8]) + [24])) = *(($2 + [8]))
	*((($12 + [8]) + [20])) = *(($2 + [4]))
	*($12 + [16]) = $1
	*($12 + [8]) = $4
	*($12 + [24]) = *($2)
	CALL $59((($12 + [8]) + [32]), $3)
	*($12 + [64]) = $11
	*($12 + [56]) = $10
	*(($0 = CALL $47([16]))) = $4
	*($0 + [8]) = $8
	*((($12 + [56]) + [32])) = [0]
	$5 = ($0 + [16])
	*((($12 + [56]) + [24])) = $5
	*((($12 + [56]) + [20])) = $5
	*($12 + [72]) = $0
	*($12 + [84]) = [0]
	*((($12 + [56]) + [36])) = [0]
	$0 = *($12 + [40])
	$5 = ( *((($12 + [8]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($5 + [32])
	$7 = (CASTING uint_64)(uint_32 $5)
	$5 = (($12 + [56]) + [28])
	
.LOOP $label$19:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$19 }
	if ( ($0 == 0) ){ goto $label$21 }
	CALL $21($5, $0)
	$5 = *(($12 + [88]))
	$0 = *(($12 + [84]))
	goto $label$20 
	
.LABEL $label$21
	$5 = [0]
	$0 = [0]
	
.LABEL $label$20
	*($12 + [100]) = $0
	*($12 + [96]) = $0
	*($12 + [104]) = $5
	*($12 + [112]) = ($12 + [96])
	*($12 + [120]) = ($12 + [8])
	CALL $35(($12 + [120]), ($12 + [112]))
	CALL $36(($12 + [96]), ($12 + [56]))
	$0 = *($12 + [96])
	CALL send_inline($0, (*($12 + [100]) - $0))
	$0 = *($12 + [96])
	if ( ($0 == 0) ){ goto $label$22 }
	*($12 + [100]) = $0
	CALL $48($0)
	
.LABEL $label$22
	$0 = *($12 + [84])
	if ( ($0 == 0) ){ goto $label$23 }
	*(($12 + [88])) = $0
	CALL $48($0)
	
.LABEL $label$23
	$0 = *($12 + [72])
	if ( ($0 == 0) ){ goto $label$24 }
	*(($12 + [76])) = $0
	CALL $48($0)
	
.LABEL $label$24
	if ( ((*($12 + [40]) & [1]) == 0) ){ goto $label$25 }
	CALL $48(*(($12 + [48])))
	
.LABEL $label$25
	*([0] + [4]) = ($12 + [128])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $3
	if ( $3 ){ goto $label$3 }
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( *($2 + [12]) ){ goto $label$3 }
	$3 = *($2 + [8])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$10 }
	if ( ($4 == 0) ){ goto $label$8 }
	if ( *($4 + [12]) ){ goto $label$8 }
	$4 = ($4 + [12])
	goto $label$9 
	
.LABEL $label$10
	$4 = *($3 + [4])
	if ( ($4 == 0) ){ goto $label$6 }
	if ( *($4 + [12]) ){ goto $label$6 }
	$4 = ($4 + [12])
	
.LABEL $label$9
	*(($2 + [12])) = [1]
	$2 = ((int_32)$3 == (int_32)$0)
	*($3 + [12]) = $2
	*($4) = [1]
	$1 = $3
	if ( ($2 == 0) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$8
	if ( ((int_32)*($2) == (int_32)$1) ){ goto $label$5 }
	$4 = $2
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_32)*($2) == (int_32)$1) ){ goto $label$2 }
	$4 = *($2 + [4])
	$1 = *($4)
	*($2 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $2
	$3 = *(($2 + [8]))
	
.LABEL $label$11
	*($4 + [8]) = $3
	*(( ($3 = *(($1 = ($2 + [8])))) ? ($3 + [4]) : ((int_32)*($3) == (int_32)$2) )) = $4
	*($1) = $4
	*($4) = $2
	$3 = *($4 + [8])
	goto $label$1 
	
.LABEL $label$5
	$4 = *($2)
	$1 = *($4 + [4])
	*($2) = $1
	if ( ($1 == 0) ){ goto $label$12 }
	*($1 + [8]) = $2
	$3 = *(($2 + [8]))
	
.LABEL $label$12
	*($4 + [8]) = $3
	*(( ($3 = *(($1 = ($2 + [8])))) ? ($3 + [4]) : ((int_32)*($3) == (int_32)$2) )) = $4
	*($1) = $4
	*(($4 + [4])) = $2
	$3 = *($4 + [8])
	
.LABEL $label$4
	*($4 + [12]) = [1]
	*($3 + [12]) = [0]
	$2 = *($3 + [4])
	$4 = *($2)
	*($3 + [4]) = $4
	if ( ($4 == 0) ){ goto $label$13 }
	*($4 + [8]) = $3
	
.LABEL $label$13
	*($2 + [8]) = *($3 + [8])
	*(( ($4 = *($3 + [8])) ? ($4 + [4]) : ((int_32)*($4) == (int_32)$3) )) = $2
	*($3 + [8]) = $2
	*($2) = $3
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	$4 = $2
	
.LABEL $label$1
	*($4 + [12]) = [1]
	*($3 + [12]) = [0]
	$2 = *($3)
	$4 = *($2 + [4])
	*($3) = $4
	if ( ($4 == 0) ){ goto $label$14 }
	*($4 + [8]) = $3
	
.LABEL $label$14
	*($2 + [8]) = *($3 + [8])
	*(( ($4 = *($3 + [8])) ? ($4 + [4]) : ((int_32)*($4) == (int_32)$3) )) = $2
	*($3 + [8]) = $2
	*(($2 + [4])) = $3
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $27($0, *($1))
	CALL $27($0, *($1 + [4]))
	CALL $48($1)
	
.LABEL $label$1
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $26($0, *($1))
	CALL $26($0, *($1 + [4]))
	CALL $48($1)
	
.LABEL $label$1
}

void .FUNC $49 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $48 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_64 .FUNC llabs (int_64 $0)
{
	int_64 $1
	$1 = (int_64)$0 >> (int_64)63
	return ((int_64)((int_64)$0 + (int_64)$1)) ^ (int_64)$1)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $44([2296], $0)
}

void .FUNC _ZN5sicbo17require_offertypeEi (int_32 $0, int_32 $1)
{
	if ( ((int_32)$1 > (int_32)[299]) ){ goto $label$3 }
	if ( ((uint_32)$1 > (uint_32)[222]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)$1 <= (int_32)[499]) ){ goto $label$7 }
	if ( ((int_32)$1 <= (int_32)[599]) ){ goto $label$6 }
	if ( ((int_32)$1 > (int_32)[665]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[600]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[660]) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$7
	if ( ((int_32)$1 > (int_32)[399]) ){ goto $label$5 }
	if ( ((int_32)$1 == (int_32)[300]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[330]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[333]) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[500]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[550]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[555]) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	if ( ((int_32)$1 == (int_32)[400]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[440]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[444]) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$1 == (int_32)[666]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[777]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [1184])
	return 
	
.LABEL $label$1
	$1
}

int_32 .FUNC _Z8isdecnumPKc (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	if ( ($0 == 0) ){ goto $label$6 }
	*(($6 + [24])) = [0]
	*($6 + [16]) = (int_64)0
	$4 = CALL strlen($0)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($6 + [16]) = ($4 << [1])
	$2 = (($6 + [16]) | [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$5 = [0]
	goto $label$2 
	
.LABEL $label$5
	$1 = (($4 + [16]) & [-16])
	$2 = CALL $47($1)
	*($6 + [16]) = ($1 | [1])
	*($6 + [24]) = $2
	*($6 + [20]) = $4
	
.LABEL $label$4
	CALL memcpy($2, $0, $4)
	
.LABEL $label$3
	$0 = [0]
	*(($2 + $4)) = [0]
	CALL $59($6, ($6 + [16]))
	$5 = [1]
	$1 = ($6 | [1])
	$3 = ($6 + [8])
	
.LOOP $label$8:
	$2 = ($4 & [1])
	$4 = *($6)
	if ( ((uint_32)$0 >= (uint_32)( *($6 + [4]) ? uint_32($4 >> [1]) : $2 )) ){ goto $label$7 }
	$4 = (( *($3) ? $1 : $2 ) + $0)
	$0 = ($0 + [1])
	if ( CALL isdigit(*($4)) ){ goto $label$8 }
	$5 = [0]
	$4 = *($6)
	
.LABEL $label$7
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	CALL $48(*(($6 + [8])))
	
.LABEL $label$9
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $48(*($6 + [24]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [32])
	return $5
	
.LABEL $label$1
	CALL $49(($6 + [16]))
	return (unreachable)
}

int_32 .FUNC _Z8isdecnumNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($0 + [1])
	$5 = [0]
	$4 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$2:
	$6 = *($0)
	$2 = ($6 & [1])
	if ( $2 ){ goto $label$4 }
	if ( ($5 <= uint_32($6 >> [1])) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)*($3)) ){ goto $label$1 }
	
.LABEL $label$3
	$6 = $1
	if ( ($2 == 0) ){ goto $label$5 }
	$6 = *($4)
	
.LABEL $label$5
	$6 = ($6 + $5)
	$5 = ($5 + [1])
	if ( CALL isdigit(*($6)) ){ goto $label$2 }
	return [0]
	
.LABEL $label$1
	return [1]
}

int_32 .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10796])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10680])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10488]
	$1 = (((int_32)$2 * (int_32)[12]) + [10488])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $45 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10790]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10792])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10790]) = [1]
	$7 = ($7 << [16])
	*([0] + [10792]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10792])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10792]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10790]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10790]) = [1]
	$3 = ($3 << [16])
	*([0] + [10792]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10792])
	
.LABEL $label$8
	*([0] + [10792]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $45($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10704])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $72 ()
{
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $47($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $48($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $47($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [496])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [464])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $17(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $18(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $48(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN5sicbo5clearEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	CALL require_auth(*($0))
	$3 = CALL db_lowerbound_i64(*($0 + [24]), *(($0 + [32])), (int_64)-4354846489561792512, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$1 = ($0 + [24])
	$3 = CALL $12($1, $3)
	
.LOOP $label$2:
	CALL eosio_assert([1], [160])
	CALL eosio_assert([1], [208])
	$0 = [0]
	$2 = CALL db_next_i64(*($3 + [84]), ($4 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $12($1, $2)
	
.LABEL $label$3
	CALL $13($1, $3)
	$3 = $0
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $6 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	*($0) = $1
	$3 = [0]
	*(($2 = ($0 + [12]))) = [0]
	*(($4 = ($0 + [16]))) = [0]
	*($0 + [8]) = $2
	$7 = [1704]
	if ( ((int_32)$2 != (int_32)$2) ){ goto $label$2 }
	$10 = [24]
	goto $label$1 
	
.LABEL $label$2
	$10 = [3]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$36 
	
.LABEL $label$58
	$3 = *(($0 + [12]))
	if ( ((int_32)*(($0 + [8])) == (int_32)$2) ){ goto $label$32 }
	$10 = [3]
	goto $label$3 
	
.LABEL $label$57
	$8 = $3
	if ( ($3 == 0) ){ goto $label$14 }
	$10 = [4]
	goto $label$3 
	
.LABEL $label$56
	$9 = $8
	$8 = *($9 + [4])
	if ( $8 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$55
	$9 = $2
	if ( $3 ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$54
	$8 = $2
	$10 = [23]
	goto $label$3 
	
.LABEL $label$53
	$9 = *($8 + [8])
	$5 = ((int_32)*($9) == (int_32)$8)
	$8 = $9
	if ( $5 ){ goto $label$13 }
	$10 = [5]
	goto $label$3 
	
.LABEL $label$52
	$8 = *($7)
	if ( ((int_32)*($9 + [16]) >= (int_32)$8) ){ goto $label$12 }
	$10 = [20]
	goto $label$3 
	
.LABEL $label$51
	if ( ($3 == 0) ){ goto $label$31 }
	$10 = [21]
	goto $label$3 
	
.LABEL $label$50
	$3 = ($9 + [4])
	if ( *($3) ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$49
	if ( ($3 == 0) ){ goto $label$28 }
	$10 = [7]
	goto $label$3 
	
.LABEL $label$48
	$5 = $2
	goto $label$11 
	
.LABEL $label$47
	$5 = $3
	$3 = $9
	$10 = [8]
	goto $label$3 
	
.LABEL $label$46
	$9 = *($3 + [16])
	if ( ((int_32)$8 >= (int_32)$9) ){ goto $label$10 }
	$10 = [18]
	goto $label$3 
	
.LABEL $label$45
	$9 = *($3)
	if ( $9 ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$44
	if ( ((int_32)$9 >= (int_32)$8) ){ goto $label$9 }
	$10 = [14]
	goto $label$3 
	
.LABEL $label$43
	$5 = ($3 + [4])
	$9 = *($3 + [4])
	if ( ($9 == 0) ){ goto $label$7 }
	$10 = [15]
	goto $label$3 
	
.LABEL $label$42
	$3 = $5
	goto $label$6 
	
.LABEL $label$41
	$9 = $2
	$3 = $2
	if ( *($3) ){ goto $label$19 }
	$10 = [11]
	goto $label$3 
	
.LABEL $label$40
	$8 = CALL $47([32])
	$1 = *(($7 + [8]))
	$6 = *($7)
	*($8) = (int_64)0
	*(($8 + [24])) = $1
	*($8 + [16]) = $6
	*($8 + [8]) = $9
	*($3) = $8
	$9 = ($0 + [8])
	$5 = *(*($9))
	if ( ($5 == 0) ){ goto $label$8 }
	$10 = [12]
	goto $label$3 
	
.LABEL $label$39
	*($9) = $5
	$8 = *($3)
	$10 = [13]
	goto $label$3 
	
.LABEL $label$38
	CALL $24(*(($0 + [12])), $8)
	*($4) = (*($4) + [1])
	$10 = [1]
	goto $label$3 
	
.LABEL $label$37
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)[2296]) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$36
	$9 = $3
	if ( *($3) ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$35
	$9 = $3
	$3 = $5
	if ( *($3) ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$34
	$9 = $3
	$3 = $5
	if ( *($3) ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$33
	$1 = *($0)
	*($0 + [24]) = $1
	*(($0 + [32])) = $1
	*(($0 + [40])) = (int_64)-1
	*(($0 + [48])) = (int_64)0
	*(($0 + [56])) = [0]
	*(($0 + [60])) = [0]
	return $0
	
.LABEL $label$32
	$10 = [24]
	goto $label$3 
	
.LABEL $label$31
	$10 = [19]
	goto $label$3 
	
.LABEL $label$30
	$10 = [11]
	goto $label$3 
	
.LABEL $label$29
	$10 = [1]
	goto $label$3 
	
.LABEL $label$28
	$10 = [19]
	goto $label$3 
	
.LABEL $label$27
	$10 = [11]
	goto $label$3 
	
.LABEL $label$26
	$10 = [1]
	goto $label$3 
	
.LABEL $label$25
	$10 = [11]
	goto $label$3 
	
.LABEL $label$24
	$10 = [1]
	goto $label$3 
	
.LABEL $label$23
	$10 = [11]
	goto $label$3 
	
.LABEL $label$22
	$10 = [1]
	goto $label$3 
	
.LABEL $label$21
	$10 = [0]
	goto $label$3 
	
.LABEL $label$20
	$10 = [16]
	goto $label$3 
	
.LABEL $label$19
	$10 = [1]
	goto $label$3 
	
.LABEL $label$18
	$10 = [25]
	goto $label$3 
	
.LABEL $label$17
	$10 = [2]
	goto $label$3 
	
.LABEL $label$16
	$10 = [5]
	goto $label$3 
	
.LABEL $label$15
	$10 = [4]
	goto $label$3 
	
.LABEL $label$14
	$10 = [22]
	goto $label$3 
	
.LABEL $label$13
	$10 = [23]
	goto $label$3 
	
.LABEL $label$12
	$10 = [6]
	goto $label$3 
	
.LABEL $label$11
	$10 = [8]
	goto $label$3 
	
.LABEL $label$10
	$10 = [9]
	goto $label$3 
	
.LABEL $label$9
	$10 = [10]
	goto $label$3 
	
.LABEL $label$8
	$10 = [13]
	goto $label$3 
	
.LABEL $label$7
	$10 = [17]
	goto $label$3 
	
.LABEL $label$6
	$10 = [16]
	goto $label$3 
	
.LABEL $label$5
	$10 = [19]
	goto $label$3 
	
.LABEL $label$4
	$10 = [21]
	goto $label$3 
	return $10
}

void .FUNC _ZN5sicbo8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [272])
	*([0] + [4]) = $16
	*($16 + [240]) = $1
	$8 = *($0)
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$8 != (int_64)$2) ){ goto $label$2 }
	$11 = [0]
	$12 = [0]
	$2 = *($3)
	if ( ((uint_64)((int_64)$2 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$1 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$12 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$12 = [0]
	
.LABEL $label$3
	CALL eosio_assert($12, [576])
	CALL eosio_assert(((int_64)$2 > (int_64)999), [608])
	*($16 + [232]) = (int_64)0
	*($16 + [224]) = (int_64)0
	*($16 + [216]) = (int_64)1398362884
	*($16 + [208]) = (int_64)0
	CALL eosio_assert([1], [496])
	$1 = (int_64)5462355
	
.LOOP $label$9:
	$14 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$14 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($14, [464])
	*(($16 + [216])) = (int_64)1397703940
	*($16 + [208]) = (int_64)0
	CALL $59(($16 + [176]), $4)
	CALL _ZN5sicbo12_split_extraENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPN5eosio5assetEPySA_(($16 + [192]), $0, ($16 + [176]), ($16 + [208]), ($16 + [232]), ($16 + [224]))
	if ( ((*($16 + [176]) & [1]) == 0) ){ goto $label$12 }
	CALL $48(*($16 + [184]))
	
.LABEL $label$12
	$5 = ($0 + [24])
	*($16 + [168]) = $5
	CALL $22(($16 + [96]), ($16 + [168]), ($16 + [232]))
	$11 = *($16 + [100])
	if ( ($11 == 0) ){ goto $label$14 }
	$11 = ( $11 ? [0] : ((int_64)*($16 + [232]) == (int_64)*($11 + [24])) )
	goto $label$13 
	
.LABEL $label$14
	$11 = [0]
	
.LABEL $label$13
	CALL eosio_assert(($11 == 0), [656])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($16 + [216]))), [688])
	CALL eosio_assert(((int_64)$2 >= (int_64)*($16 + [208])), [752])
	CALL eosio_assert(((int_64)*($16 + [208]) < (int_64)1000001), [784])
	if ( ((int_64)*($16 + [208]) <= (int_64)0) ){ goto $label$18 }
	CALL _ZN5sicbo11_getWinsMapEyPy(($16 + [144]), $11, *($16 + [232]), ($16 + [160]))
	*($16 + [136]) = (int_64)1398362884
	*($16 + [128]) = (int_64)0
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($16 + [136]) >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	
.LOOP $label$23:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$23 }
	
.LABEL $label$22
	$14 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$14 = [0]
	
.LABEL $label$19
	CALL eosio_assert($14, [464])
	*($16 + [128]) = (int_64)0
	$15 = (($16 + [192]) | [4])
	$14 = *($16 + [192])
	if ( ((int_32)$14 == (int_32)$15) ){ goto $label$24 }
	$7 = ($0 + [12])
	$6 = (($16 + [144]) | [4])
	$9 = ($0 + [16])
	
.LOOP $label$25:
	$4 = $14
	$3 = *($16 + [148])
	if ( ($3 == 0) ){ goto $label$26 }
	$1 = *($4 + [24])
	$14 = *($4 + [16])
	$10 = $6
	$11 = $3
	
.LOOP $label$28:
	if ( ((int_32)*($11 + [16]) >= (int_32)$14) ){ goto $label$29 }
	$11 = *($11 + [4])
	if ( $11 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$10 = $11
	$12 = *($11)
	$11 = $12
	if ( $12 ){ goto $label$28 }
	
.LABEL $label$27
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$26 }
	$12 = $6
	if ( ((int_32)$14 < (int_32)*($10 + [16])) ){ goto $label$26 }
	
.LOOP $label$31:
	$11 = *($3 + [16])
	if ( ((int_32)$14 >= (int_32)$11) ){ goto $label$33 }
	$12 = $3
	$11 = *($3)
	if ( $11 ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$33
	if ( ((int_32)$11 >= (int_32)$14) ){ goto $label$30 }
	$12 = ($3 + [4])
	$11 = *($3 + [4])
	if ( ($11 == 0) ){ goto $label$30 }
	
.LABEL $label$32
	$3 = $11
	goto $label$31 
	
.LABEL $label$30
	$11 = *($12)
	if ( $11 ){ goto $label$34 }
	*(($11 = CALL $47([24]))) = (int_64)0
	*($11 + [8]) = $3
	*($12) = $11
	*($11 + [20]) = [0]
	*($11 + [16]) = $14
	$3 = $11
	$10 = *(*($16 + [144]))
	if ( ($10 == 0) ){ goto $label$35 }
	*($16 + [144]) = $10
	$3 = *($12)
	
.LABEL $label$35
	CALL $24(*($16 + [148]), $3)
	*(($3 = (($16 + [144]) + [8]))) = (*($3) + [1])
	
.LABEL $label$34
	if ( (*(($11 + [20])) == 0) ){ goto $label$40 }
	$11 = *($7)
	if ( ($11 == 0) ){ goto $label$39 }
	$3 = $7
	
.LOOP $label$41:
	$12 = *($11 + [16])
	if ( ((int_32)$14 >= (int_32)$12) ){ goto $label$43 }
	$12 = *($11)
	if ( $12 ){ goto $label$42 }
	goto $label$38 
	
.LABEL $label$43
	if ( ((int_32)$12 >= (int_32)$14) ){ goto $label$37 }
	$3 = ($11 + [4])
	$12 = *($11 + [4])
	if ( ($12 == 0) ){ goto $label$37 }
	$11 = $3
	
.LABEL $label$42
	$3 = $11
	$11 = $12
	goto $label$41 
	
.LABEL $label$40
	$13 = (float_64)0
	goto $label$36 
	
.LABEL $label$39
	$11 = $7
	$3 = $7
	goto $label$37 
	
.LABEL $label$38
	$3 = $11
	
.LABEL $label$37
	$13 = (CASTING float_64)(int_64 $1)
	$12 = *($3)
	if ( $12 ){ goto $label$44 }
	*(($12 = CALL $47([32]))) = (int_64)0
	*($12 + [8]) = $11
	*($3) = $12
	*($12 + [24]) = (int_64)0
	*($12 + [16]) = $14
	$11 = $12
	$14 = ($0 + [8])
	$10 = *(*($14))
	if ( ($10 == 0) ){ goto $label$45 }
	*($14) = $10
	$11 = *($3)
	
.LABEL $label$45
	CALL $24(*(($0 + [12])), $11)
	*($9) = (*($9) + [1])
	
.LABEL $label$44
	$13 = ((float_64)$13 * (float_64)((float_64)*(($12 + [24])) + (float_64)(float_64)1))
	
.LABEL $label$36
	*($16 + [128]) = (Rounds 0)(((float_64)$13 + (float_64)(CASTING float_64)(int_64 *($16 + [128]))))
	
.LABEL $label$26
	$11 = *($4 + [4])
	if ( ($11 == 0) ){ goto $label$47 }
	
.LOOP $label$48:
	$14 = $11
	$11 = *($14)
	if ( $11 ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	$14 = *($4 + [8])
	if ( ((int_32)*($14) == (int_32)$4) ){ goto $label$46 }
	$3 = ($4 + [8])
	
.LOOP $label$49:
	$11 = *($3)
	$3 = ($11 + [8])
	$14 = *($11 + [8])
	if ( ((int_32)$11 != (int_32)*($14)) ){ goto $label$49 }
	
.LABEL $label$46
	if ( ((int_32)$14 != (int_32)$15) ){ goto $label$25 }
	
.LABEL $label$24
	*(($16 + [136])) = (int_64)1397703940
	$1 = *($0)
	*($16 + [96]) = $0
	*($16 + [100]) = ($16 + [240])
	*($16 + [104]) = ($16 + [224])
	*($16 + [108]) = ($16 + [232])
	*($16 + [112]) = ($16 + [208])
	*($16 + [116]) = ($16 + [160])
	*($16 + [120]) = ($16 + [128])
	*($16 + [40]) = $1
	CALL eosio_assert(((int_64)*(($0 + [24])) == (int_64)CALL $fimport$2()), [944])
	*($16 + [256]) = $5
	*($16 + [260]) = ($16 + [96])
	*($16 + [264]) = ($16 + [40])
	$11 = CALL $47([96])
	CALL $14($11)
	*($11 + [80]) = $5
	CALL $29(($16 + [256]), $11)
	*($16 + [72]) = $11
	$1 = *($11)
	*($16 + [256]) = $1
	$3 = *($11 + [84])
	*($16 + [252]) = $3
	$12 = ($0 + [52])
	$14 = *($12)
	if ( ((uint_32)$14 >= (uint_32)*(($0 + [56]))) ){ goto $label$17 }
	*($14 + [8]) = $1
	*($14 + [16]) = $3
	*($16 + [72]) = [0]
	*($14) = $11
	*($12) = ($14 + [24])
	goto $label$16 
	
.LABEL $label$18
	$15 = (($16 + [192]) | [4])
	goto $label$15 
	
.LABEL $label$17
	CALL $16(($0 + [48]), ($16 + [72]), ($16 + [256]), ($16 + [252]))
	
.LABEL $label$16
	$11 = *($16 + [72])
	*($16 + [72]) = [0]
	if ( ($11 == 0) ){ goto $label$50 }
	CALL $48($11)
	
.LABEL $label$50
	if ( ((int_64)*($16 + [128]) < (int_64)1) ){ goto $label$51 }
	*((($16 + [80]) + [8])) = *((($16 + [128]) + [8]))
	$1 = *($16 + [240])
	*($16 + [80]) = *($16 + [128])
	*((($16 + [96]) + [8])) = [0]
	*($16 + [96]) = (int_64)0
	$11 = CALL strlen([816])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$54 }
	*($16 + [96]) = ($11 << [1])
	$14 = (($16 + [96]) | [1])
	if ( $11 ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	$3 = (($11 + [16]) & [-16])
	$14 = CALL $47($3)
	*($16 + [96]) = ($3 | [1])
	*($16 + [104]) = $14
	*($16 + [100]) = $11
	
.LABEL $label$53
	CALL memcpy($14, [816], $11)
	
.LABEL $label$52
	*(($14 + $11)) = [0]
	*((($16 + [24]) + [8])) = *((($16 + [80]) + [8]))
	*($16 + [24]) = *($16 + [80])
	CALL _ZN5sicbo11transfer_toEyN5eosio5assetERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $1, ($16 + [24]), ($16 + [96]))
	if ( ((*($16 + [96]) & [1]) == 0) ){ goto $label$51 }
	CALL $48(*($16 + [104]))
	
.LABEL $label$51
	$1 = *($16 + [224])
	if ( (int_64)($1 == 0) ){ goto $label$55 }
	if ( ((int_64)$1 == (int_64)*($16 + [240])) ){ goto $label$55 }
	CALL eosio_assert([1], [496])
	$1 = (int_64)5462355
	$11 = [0]
	
.LOOP $label$58:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$57 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$59 }
	
.LOOP $label$60:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$57 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$60 }
	
.LABEL $label$59
	$14 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$58 }
	goto $label$56 
	
.LABEL $label$57
	$14 = [0]
	
.LABEL $label$56
	CALL eosio_assert($14, [464])
	$1 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($16 + [208])) * (float_64)(float_64)0.005))
	CALL eosio_assert(((int_64)$1 < (int_64)10000), [832])
	*($16 + [72]) = *($16 + [240])
	*($16 + [64]) = (int_64)1397703940
	$2 = *($16 + [224])
	*($16 + [56]) = $1
	CALL $28(($16 + [40]), ($16 + [72]))
	$11 = CALL $55(($16 + [40]), [0], [848])
	$14 = ($11 + [8])
	*((($16 + [256]) + [8])) = *($14)
	*($16 + [256]) = *($11)
	*($11) = [0]
	*(($11 + [4])) = [0]
	*($14) = [0]
	$11 = CALL $53(($16 + [256]), [928])
	$14 = ($11 + [8])
	*((($16 + [96]) + [8])) = *($14)
	*($16 + [96]) = *($11)
	*($11) = [0]
	*(($11 + [4])) = [0]
	*($14) = [0]
	*((($16 + [8]) + [8])) = *($16 + [64])
	*($16 + [8]) = *($16 + [56])
	CALL _ZN5sicbo11transfer_toEyN5eosio5assetERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $2, ($16 + [8]), ($16 + [96]))
	if ( ((*($16 + [96]) & [1]) == 0) ){ goto $label$61 }
	CALL $48(*($16 + [104]))
	
.LABEL $label$61
	if ( ((*($16 + [256]) & [1]) == 0) ){ goto $label$62 }
	CALL $48(*($16 + [264]))
	
.LABEL $label$62
	if ( ((*($16 + [40]) & [1]) == 0) ){ goto $label$55 }
	CALL $48(*($16 + [48]))
	
.LABEL $label$55
	CALL $26(($16 + [144]), *($16 + [148]))
	
.LABEL $label$15
	CALL $27(($16 + [192]), *($15))
	
.LABEL $label$2
	*([0] + [4]) = ($16 + [272])
	return (unreachable)
	
.LABEL $label$1
	CALL $49(($16 + [96]))
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [96])
	*([0] + [4]) = $12
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [16]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$7 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [32]
	$10 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$9 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$9
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$10 == (int_64)$1), [48])
	
.LABEL $label$7
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [112]
	$10 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$15
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$10 != (int_64)$1) ){ goto $label$22 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [128]
	$10 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$28 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$24
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$10 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$22
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$20 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [144]
	$10 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$9 > (uint_64)(int_64)4) ){ goto $label$34 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$30
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$20 }
	
.LABEL $label$21
	$4 = CALL $6(($12 + [32]), $0)
	if ( ((int_64)$2 == (int_64)4923678490122780672) ){ goto $label$36 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$35 }
	*($12 + [28]) = [0]
	*($12 + [24]) = [1]
	*($12) = *($12 + [24])
	CALL $8($4, $12)
	goto $label$35 
	
.LABEL $label$36
	*($12 + [20]) = [0]
	*($12 + [16]) = [2]
	*($12 + [8 align=4]) = *($12 + [16])
	CALL $10($4, ($12 + [8]))
	
.LABEL $label$35
	$5 = *(($4 + [48]))
	if ( ($5 == 0) ){ goto $label$37 }
	$6 = ($4 + [52])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$39 }
	
.LOOP $label$40:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$41 }
	CALL $48($3)
	
.LABEL $label$41
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$40 }
	$7 = *(($4 + [48]))
	goto $label$38 
	
.LABEL $label$39
	$7 = $5
	
.LABEL $label$38
	*($6) = $5
	CALL $48($7)
	
.LABEL $label$37
	CALL $11(($4 + [8]), *(($4 + [12])))
	
.LABEL $label$20
	*([0] + [4]) = ($12 + [96])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [32]) = (int_64)0
	*(($2 = ($0 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [464])
	*(($2 = ($0 + [64]))) = (int_64)1398362884
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [464])
	*($0 + [72]) = [0]
	return $0
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [448])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [448])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [448])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [448])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [448])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [448])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [448])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [448])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [448])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [448])
	CALL memcpy(($1 + [72]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [448])
	CALL memcpy(($1 + [76]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $47(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $58($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $48($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $48($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [448])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [448])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [448])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [448])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $19(*($1), ($0 + [32]))
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($0, *($1))
	CALL $11($0, *($1 + [4]))
	CALL $48($1)
	
.LABEL $label$1
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [416])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $47([96])
	$4 = CALL $14($6)
	*($6 + [80]) = $0
	CALL $15(($8 + [32]), $4)
	*($6 + [88]) = [-1]
	*($6 + [84]) = $1
	*($6 + [92]) = [-1]
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [84])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $16(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $48($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [288])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [352])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $48($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $48($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [84]))
	$7 = *(($1 + [88]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4354846489561792512, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	$7 = *(($1 + [92]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4354846489561792511, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx64_remove($7)
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $21($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [1440])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [1440])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $38(CALL $37($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1440])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1440])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1440])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1440])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1440])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1440])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1440])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1440])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1440])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1440])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1440])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1440])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1440])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1440])
	CALL memcpy(*($0 + [4]), ($1 + [76]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1440])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1440])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1440])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1440])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $39(*($1), ($0 + [32]))
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$7 = *($1 + [4])
	if ( ($7 == 0) ){ goto $label$3 }
	$8 = ($1 + [4])
	$6 = *($2)
	
.LOOP $label$4:
	$2 = *($7 + [16])
	if ( ((int_32)$6 >= (int_32)$2) ){ goto $label$6 }
	$2 = *($7)
	if ( $2 ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$6
	if ( ((int_32)$2 >= (int_32)$6) ){ goto $label$1 }
	$8 = ($7 + [4])
	$2 = *($7 + [4])
	if ( ($2 == 0) ){ goto $label$1 }
	$7 = $8
	
.LABEL $label$5
	$8 = $7
	$7 = $2
	goto $label$4 
	
.LABEL $label$3
	$7 = ($1 + [4])
	
.LABEL $label$2
	$8 = $7
	
.LABEL $label$1
	$2 = [0]
	$6 = *($8)
	if ( $6 ){ goto $label$7 }
	*(($6 = CALL $47([40])) + [24]) = (int_64)0
	*($6 + [16]) = *(*($4))
	*($6 + [32]) = (int_64)1398362884
	CALL eosio_assert([1], [496])
	$9 = (int_64)5462355
	$2 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$4 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$4 = [0]
	
.LABEL $label$8
	CALL eosio_assert($4, [464])
	*($6 + [8]) = $7
	*($6) = (int_64)0
	*($8) = $6
	$7 = *(*($1))
	if ( ($7 == 0) ){ goto $label$14 }
	*($1) = $7
	$7 = *($8)
	goto $label$13 
	
.LABEL $label$14
	$7 = $6
	
.LABEL $label$13
	CALL $24(*($1 + [4]), $7)
	$2 = [1]
	*($1 + [8]) = (*($1 + [8]) + [1])
	
.LABEL $label$7
	*($0 + [4]) = $2
	*($0) = $6
}

int_32 .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [84]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1520])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-4354846489561792512)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1456])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1456])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $12(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC _ZN5sicbo12_split_extraENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPN5eosio5assetEPySA_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$21 = (*([0] + [4]) - [160])
	*([0] + [4]) = $21
	CALL $59(($21 + [120]), $2)
	*($0 + [8]) = [0]
	*($0 + [4]) = [0]
	$6 = ($0 + [4])
	*($0) = $6
	$19 = ($2 & [1])
	$2 = *($21 + [120])
	$14 = ( *($21 + [124]) ? uint_32($2 >> [1]) : $19 )
	if ( ($14 == 0) ){ goto $label$1 }
	$7 = (($21 + [120]) | [1])
	$9 = *($21 + [128])
	$2 = CALL strlen([1008])
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((int_32)$14 < (int_32)$2) ){ goto $label$1 }
	$13 = ( $9 ? $7 : $19 )
	$9 = ($13 + $14)
	$19 = $13
	
.LOOP $label$3:
	$14 = (($14 - $2) + [1])
	if ( ($14 == 0) ){ goto $label$1 }
	$14 = CALL memchr($19, [45], $14)
	if ( ($14 == 0) ){ goto $label$1 }
	if ( (CALL memcmp($14, [1008], $2) == 0) ){ goto $label$4 }
	$19 = ($14 + [1])
	$14 = ($9 - $19)
	if ( ((int_32)$14 >= (int_32)$2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$1 }
	if ( ((int_32)($14 - $13) == (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($4 == 0) ){ goto $label$9 }
	*($4) = (int_64)0
	$14 = *($21 + [120])
	$13 = ($21 + [128])
	$9 = *($13)
	$19 = *($21 + [124])
	$2 = CALL strlen([1008])
	if ( ($2 == 0) ){ goto $label$10 }
	$12 = ($14 & [1])
	$14 = ( $19 ? uint_32($14 >> [1]) : $12 )
	if ( ((int_32)$14 < (int_32)$2) ){ goto $label$9 }
	$12 = ( $9 ? $7 : $12 )
	$9 = ($12 + $14)
	$19 = $12
	
.LOOP $label$11:
	$14 = (($14 - $2) + [1])
	if ( ($14 == 0) ){ goto $label$9 }
	$14 = CALL memchr($19, [45], $14)
	if ( ($14 == 0) ){ goto $label$9 }
	if ( (CALL memcmp($14, [1008], $2) == 0) ){ goto $label$12 }
	$19 = ($14 + [1])
	$14 = ($9 - $19)
	if ( ((int_32)$14 >= (int_32)$2) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$9 }
	if ( ((int_32)($14 - $12) == (int_32)[-1]) ){ goto $label$9 }
	
.LABEL $label$10
	$19 = *($21 + [120])
	$9 = *($13)
	$12 = *($21 + [124])
	$13 = [0]
	$2 = [0]
	$14 = CALL strlen([1008])
	if ( ($14 == 0) ){ goto $label$13 }
	$19 = ( $12 ? uint_32($19 >> [1]) : $2 )
	$2 = ($19 & [1])
	$20 = ( $9 ? $7 : $2 )
	$9 = ($20 + $19)
	$2 = $9
	if ( ((int_32)$19 < (int_32)$14) ){ goto $label$14 }
	$2 = $20
	
.LOOP $label$16:
	$19 = (($19 - $14) + [1])
	if ( ($19 == 0) ){ goto $label$15 }
	$2 = CALL memchr($2, [45], $19)
	if ( ($2 == 0) ){ goto $label$15 }
	if ( (CALL memcmp($2, [1008], $14) == 0) ){ goto $label$14 }
	$2 = ($2 + [1])
	$19 = ($9 - $2)
	if ( ((int_32)$19 >= (int_32)$14) ){ goto $label$16 }
	
.LABEL $label$15
	$2 = $9
	
.LABEL $label$14
	$2 = ( [-1] ? ($2 - $20) : ((int_32)$2 == (int_32)$9) )
	
.LABEL $label$13
	CALL $60(($21 + [16]), ($21 + [120]), [0], $2, ($21 + [120]))
	$2 = *($21 + [120])
	$19 = *((($21 + [120]) + [8]))
	$9 = *($21 + [124])
	$14 = CALL strlen([1008])
	if ( ($14 == 0) ){ goto $label$17 }
	$19 = ( $9 ? uint_32($2 >> [1]) : $12 )
	$12 = ($2 & [1])
	$13 = ( $19 ? $7 : $12 )
	$9 = ($13 + $19)
	$2 = $9
	if ( ((int_32)$19 < (int_32)$14) ){ goto $label$18 }
	$2 = $13
	
.LOOP $label$20:
	$19 = (($19 - $14) + [1])
	if ( ($19 == 0) ){ goto $label$19 }
	$2 = CALL memchr($2, [45], $19)
	if ( ($2 == 0) ){ goto $label$19 }
	if ( (CALL memcmp($2, [1008], $14) == 0) ){ goto $label$18 }
	$2 = ($2 + [1])
	$19 = ($9 - $2)
	if ( ((int_32)$19 >= (int_32)$14) ){ goto $label$20 }
	
.LABEL $label$19
	$2 = $9
	
.LABEL $label$18
	$13 = ( [-1] ? ($2 - $13) : ((int_32)$2 == (int_32)$9) )
	
.LABEL $label$17
	$2 = [0]
	CALL $50(($21 + [120]), CALL $57(($21 + [120]), [0], ($13 + [1])))
	CALL $59(($21 + [104]), ($21 + [16]))
	$9 = (($21 + [104]) | [1])
	$13 = (($21 + [104]) + [8])
	
.LOOP $label$24:
	$19 = ($14 & [1])
	$14 = *($21 + [104])
	if ( ((uint_32)$2 >= (uint_32)( *($21 + [108]) ? uint_32($14 >> [1]) : $19 )) ){ goto $label$23 }
	$14 = (( *($13) ? $9 : $19 ) + $2)
	$2 = ($2 + [1])
	if ( CALL isdigit(*($14)) ){ goto $label$24 }
	$19 = [0]
	if ( (*($21 + [104]) & [1]) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$19 = [1]
	if ( (($14 & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL $48(*(($21 + [112])))
	
.LABEL $label$21
	$2 = [0]
	$14 = [1]
	if ( ($19 == 0) ){ goto $label$25 }
	$2 = [1]
	*($4) = CALL atoll(( *($21 + [24]) ? (($21 + [16]) | [1]) : (*($21 + [16]) & [1]) ))
	$14 = [0]
	
.LABEL $label$25
	if ( ((*($21 + [16]) & [1]) == 0) ){ goto $label$26 }
	CALL $48(*($21 + [24]))
	
.LABEL $label$26
	if ( ($2 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ($5 == 0) ){ goto $label$5 }
	$14 = *($21 + [120])
	$4 = ($21 + [128])
	$9 = *($4)
	$19 = *($21 + [124])
	$2 = CALL strlen([1008])
	if ( ($2 == 0) ){ goto $label$6 }
	$13 = ($14 & [1])
	$14 = ( $19 ? uint_32($14 >> [1]) : $13 )
	if ( ((int_32)$14 < (int_32)$2) ){ goto $label$5 }
	$13 = ( $9 ? $7 : $13 )
	$9 = ($13 + $14)
	$19 = $13
	
.LOOP $label$27:
	$14 = (($14 - $2) + [1])
	if ( ($14 == 0) ){ goto $label$5 }
	$14 = CALL memchr($19, [45], $14)
	if ( ($14 == 0) ){ goto $label$5 }
	if ( (CALL memcmp($14, [1008], $2) == 0) ){ goto $label$7 }
	$19 = ($14 + [1])
	$14 = ($9 - $19)
	if ( ((int_32)$14 >= (int_32)$2) ){ goto $label$27 }
	goto $label$5 
	
.LABEL $label$8
	if ( $14 ){ goto $label$1 }
	CALL $27($0, *(($0 + [4])))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$5 }
	if ( ((int_32)($14 - $13) == (int_32)[-1]) ){ goto $label$5 }
	
.LABEL $label$6
	$19 = *($21 + [120])
	$9 = *($4)
	$4 = *($21 + [124])
	$2 = [0]
	$14 = CALL strlen([1008])
	if ( ($14 == 0) ){ goto $label$28 }
	$19 = ( $4 ? uint_32($19 >> [1]) : $2 )
	$2 = ($19 & [1])
	$13 = ( $9 ? $7 : $2 )
	$9 = ($13 + $19)
	$2 = $9
	if ( ((int_32)$19 < (int_32)$14) ){ goto $label$29 }
	$2 = $13
	
.LOOP $label$31:
	$19 = (($19 - $14) + [1])
	if ( ($19 == 0) ){ goto $label$30 }
	$2 = CALL memchr($2, [45], $19)
	if ( ($2 == 0) ){ goto $label$30 }
	if ( (CALL memcmp($2, [1008], $14) == 0) ){ goto $label$29 }
	$2 = ($2 + [1])
	$19 = ($9 - $2)
	if ( ((int_32)$19 >= (int_32)$14) ){ goto $label$31 }
	
.LABEL $label$30
	$2 = $9
	
.LABEL $label$29
	$2 = ( [-1] ? ($2 - $13) : ((int_32)$2 == (int_32)$9) )
	
.LABEL $label$28
	CALL $60(($21 + [16]), ($21 + [120]), [0], $2, ($21 + [120]))
	$19 = *($21 + [120])
	$9 = *(($21 + [128]))
	$4 = *($21 + [124])
	$2 = [1]
	$14 = CALL strlen([1008])
	if ( ($14 == 0) ){ goto $label$32 }
	$19 = ( $4 ? uint_32($19 >> [1]) : $2 )
	$2 = ($19 & [1])
	$13 = ( $9 ? $7 : $2 )
	$9 = ($13 + $19)
	$2 = $9
	if ( ((int_32)$19 < (int_32)$14) ){ goto $label$33 }
	$2 = $13
	
.LOOP $label$35:
	$19 = (($19 - $14) + [1])
	if ( ($19 == 0) ){ goto $label$34 }
	$2 = CALL memchr($2, [45], $19)
	if ( ($2 == 0) ){ goto $label$34 }
	if ( (CALL memcmp($2, [1008], $14) == 0) ){ goto $label$33 }
	$2 = ($2 + [1])
	$19 = ($9 - $2)
	if ( ((int_32)$19 >= (int_32)$14) ){ goto $label$35 }
	
.LABEL $label$34
	$2 = $9
	
.LABEL $label$33
	$2 = ( [0] ? (($2 - $13) + [1]) : ((int_32)$2 == (int_32)$9) )
	
.LABEL $label$32
	CALL $50(($21 + [120]), CALL $57(($21 + [120]), [0], $2))
	$2 = ($2 & [1])
	$2 = *($21 + [16])
	if ( ((int_32)( *($21 + [20]) ? uint_32($2 >> [1]) : $2 ) != (int_32)[12]) ){ goto $label$36 }
	$2 = ( *($21 + [24]) ? (($21 + [16]) | [1]) : $2 )
	$14 = [-1]
	
.LOOP $label$37:
	$19 = ($2 + $14)
	$9 = ($14 + [1])
	$14 = $9
	if ( *(($19 + [1])) ){ goto $label$37 }
	$8 = (CASTING uint_64)(uint_32 $9)
	$16 = (int_64)0
	$15 = (int_64)59
	$17 = (int_64)0
	
.LOOP $label$38:
	$18 = (int_64)0
	if ( ((uint_64)$16 >= (uint_64)$8) ){ goto $label$39 }
	$14 = *($2)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$14 = ($14 + [165])
	goto $label$40 
	
.LABEL $label$41
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$39
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$43 }
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	goto $label$42 
	
.LABEL $label$43
	$18 = ((int_64)$18 & (int_64)15)
	
.LABEL $label$42
	$2 = ($2 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$38 }
	if ( (CALL is_account($17) == 0) ){ goto $label$36 }
	*($5) = $17
	
.LABEL $label$36
	if ( ((*($21 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $48(*($21 + [24]))
	
.LABEL $label$5
	$10 = (($21 + [72]) | [1])
	$9 = (($21 + [40]) | [1])
	$4 = (($21 + [56]) | [1])
	$13 = (($21 + [120]) + [8])
	
.LOOP $label$44:
	$14 = *($21 + [120])
	$19 = ($14 & [1])
	$12 = *($13)
	$5 = *($21 + [124])
	$2 = CALL strlen([1008])
	if ( ($2 == 0) ){ goto $label$45 }
	$14 = ( $5 ? uint_32($14 >> [1]) : $19 )
	if ( ((int_32)$14 < (int_32)$2) ){ goto $label$1 }
	$12 = ( $12 ? $7 : $19 )
	$5 = ($12 + $14)
	$19 = $12
	
.LOOP $label$46:
	$14 = (($14 - $2) + [1])
	if ( ($14 == 0) ){ goto $label$1 }
	$14 = CALL memchr($19, [45], $14)
	if ( ($14 == 0) ){ goto $label$1 }
	if ( (CALL memcmp($14, [1008], $2) == 0) ){ goto $label$47 }
	$19 = ($14 + [1])
	$14 = ($5 - $19)
	if ( ((int_32)$14 >= (int_32)$2) ){ goto $label$46 }
	goto $label$1 
	
.LABEL $label$47
	if ( ((int_32)$14 == (int_32)$5) ){ goto $label$1 }
	if ( ((int_32)($14 - $12) == (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$45
	$19 = *($21 + [120])
	$5 = *($13)
	$20 = *($21 + [124])
	$12 = [0]
	$2 = [0]
	$14 = CALL strlen([1008])
	if ( ($14 == 0) ){ goto $label$48 }
	$19 = ( $20 ? uint_32($19 >> [1]) : $2 )
	$2 = ($19 & [1])
	$11 = ( $5 ? $7 : $2 )
	$5 = ($11 + $19)
	$2 = $5
	if ( ((int_32)$19 < (int_32)$14) ){ goto $label$49 }
	$2 = $11
	
.LOOP $label$51:
	$19 = (($19 - $14) + [1])
	if ( ($19 == 0) ){ goto $label$50 }
	$2 = CALL memchr($2, [45], $19)
	if ( ($2 == 0) ){ goto $label$50 }
	if ( (CALL memcmp($2, [1008], $14) == 0) ){ goto $label$49 }
	$2 = ($2 + [1])
	$19 = ($5 - $2)
	if ( ((int_32)$19 >= (int_32)$14) ){ goto $label$51 }
	
.LABEL $label$50
	$2 = $5
	
.LABEL $label$49
	$2 = ( [-1] ? ($2 - $11) : ((int_32)$2 == (int_32)$5) )
	
.LABEL $label$48
	CALL $60(($21 + [88]), ($21 + [120]), [0], $2, ($21 + [120]))
	$2 = *($21 + [120])
	$19 = *($13)
	$5 = *($21 + [124])
	$14 = CALL strlen([1008])
	if ( ($14 == 0) ){ goto $label$52 }
	$19 = ( $5 ? uint_32($2 >> [1]) : $20 )
	$20 = ($2 & [1])
	$12 = ( $19 ? $7 : $20 )
	$5 = ($12 + $19)
	$2 = $5
	if ( ((int_32)$19 < (int_32)$14) ){ goto $label$53 }
	$2 = $12
	
.LOOP $label$55:
	$19 = (($19 - $14) + [1])
	if ( ($19 == 0) ){ goto $label$54 }
	$2 = CALL memchr($2, [45], $19)
	if ( ($2 == 0) ){ goto $label$54 }
	if ( (CALL memcmp($2, [1008], $14) == 0) ){ goto $label$53 }
	$2 = ($2 + [1])
	$19 = ($5 - $2)
	if ( ((int_32)$19 >= (int_32)$14) ){ goto $label$55 }
	
.LABEL $label$54
	$2 = $5
	
.LABEL $label$53
	$12 = ( [-1] ? ($2 - $12) : ((int_32)$2 == (int_32)$5) )
	
.LABEL $label$52
	$20 = [0]
	CALL $50(($21 + [120]), CALL $57(($21 + [120]), [0], ($12 + [1])))
	$19 = *($21 + [120])
	$5 = *($13)
	$12 = *($21 + [124])
	$2 = [0]
	$14 = CALL strlen([1008])
	if ( ($14 == 0) ){ goto $label$56 }
	$19 = ( $12 ? uint_32($19 >> [1]) : $2 )
	$2 = ($19 & [1])
	$11 = ( $5 ? $7 : $2 )
	$5 = ($11 + $19)
	$2 = $5
	if ( ((int_32)$19 < (int_32)$14) ){ goto $label$57 }
	$2 = $11
	
.LOOP $label$59:
	$19 = (($19 - $14) + [1])
	if ( ($19 == 0) ){ goto $label$58 }
	$2 = CALL memchr($2, [45], $19)
	if ( ($2 == 0) ){ goto $label$58 }
	if ( (CALL memcmp($2, [1008], $14) == 0) ){ goto $label$57 }
	$2 = ($2 + [1])
	$19 = ($5 - $2)
	if ( ((int_32)$19 >= (int_32)$14) ){ goto $label$59 }
	
.LABEL $label$58
	$2 = $5
	
.LABEL $label$57
	$2 = ( [-1] ? ($2 - $11) : ((int_32)$2 == (int_32)$5) )
	
.LABEL $label$56
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [1024])
	$2 = *($21 + [120])
	$19 = *($13)
	$5 = *($21 + [124])
	$14 = CALL strlen([1008])
	if ( ($14 == 0) ){ goto $label$60 }
	$19 = ( $5 ? uint_32($2 >> [1]) : $20 )
	$20 = ($2 & [1])
	$12 = ( $19 ? $7 : $20 )
	$5 = ($12 + $19)
	$2 = $5
	if ( ((int_32)$19 < (int_32)$14) ){ goto $label$61 }
	$2 = $12
	
.LOOP $label$63:
	$19 = (($19 - $14) + [1])
	if ( ($19 == 0) ){ goto $label$62 }
	$2 = CALL memchr($2, [45], $19)
	if ( ($2 == 0) ){ goto $label$62 }
	if ( (CALL memcmp($2, [1008], $14) == 0) ){ goto $label$61 }
	$2 = ($2 + [1])
	$19 = ($5 - $2)
	if ( ((int_32)$19 >= (int_32)$14) ){ goto $label$63 }
	
.LABEL $label$62
	$2 = $5
	
.LABEL $label$61
	$20 = ( [-1] ? ($2 - $12) : ((int_32)$2 == (int_32)$5) )
	
.LABEL $label$60
	$2 = [0]
	CALL $60(($21 + [72]), ($21 + [120]), [0], $20, ($21 + [120]))
	$5 = *($21 + [120])
	$12 = *($13)
	$20 = *($21 + [124])
	$14 = [0]
	$19 = CALL strlen([1008])
	if ( ($19 == 0) ){ goto $label$64 }
	$5 = ( $20 ? uint_32($5 >> [1]) : $14 )
	$14 = ($5 & [1])
	$11 = ( $12 ? $7 : $14 )
	$12 = ($11 + $5)
	$14 = $12
	if ( ((int_32)$5 < (int_32)$19) ){ goto $label$65 }
	$14 = $11
	
.LOOP $label$67:
	$5 = (($5 - $19) + [1])
	if ( ($5 == 0) ){ goto $label$66 }
	$14 = CALL memchr($14, [45], $5)
	if ( ($14 == 0) ){ goto $label$66 }
	if ( (CALL memcmp($14, [1008], $19) == 0) ){ goto $label$65 }
	$14 = ($14 + [1])
	$5 = ($12 - $14)
	if ( ((int_32)$5 >= (int_32)$19) ){ goto $label$67 }
	
.LABEL $label$66
	$14 = $12
	
.LABEL $label$65
	$14 = ( [-1] ? ($14 - $11) : ((int_32)$14 == (int_32)$12) )
	
.LABEL $label$64
	CALL $50(($21 + [120]), CALL $57(($21 + [120]), [0], ($14 + [1])))
	$14 = *($21 + [72])
	CALL eosio_assert(( *($21 + [76]) ? uint_32($14 >> [1]) : ($14 & [1]) ), [1056])
	CALL $59(($21 + [56]), ($21 + [88]))
	
.LOOP $label$69:
	$19 = [1]
	$14 = ($14 & [1])
	$14 = *($21 + [56])
	if ( ((uint_32)$2 >= (uint_32)( *($21 + [60]) ? uint_32($14 >> [1]) : $14 )) ){ goto $label$68 }
	$14 = (( *((($21 + [56]) + [8])) ? $4 : $14 ) + $2)
	$2 = ($2 + [1])
	if ( CALL isdigit(*($14)) ){ goto $label$69 }
	$19 = [0]
	
.LABEL $label$68
	CALL eosio_assert($19, [1088])
	if ( ((*($21 + [56]) & [1]) == 0) ){ goto $label$70 }
	CALL $48(*((($21 + [56]) + [8])))
	
.LABEL $label$70
	CALL $59(($21 + [40]), ($21 + [72]))
	$2 = [0]
	
.LOOP $label$72:
	$19 = [1]
	$14 = ($14 & [1])
	$14 = *($21 + [40])
	if ( ((uint_32)$2 >= (uint_32)( *($21 + [44]) ? uint_32($14 >> [1]) : $14 )) ){ goto $label$71 }
	$14 = (( *((($21 + [40]) + [8])) ? $9 : $14 ) + $2)
	$2 = ($2 + [1])
	if ( CALL isdigit(*($14)) ){ goto $label$72 }
	$19 = [0]
	
.LABEL $label$71
	CALL eosio_assert($19, [1136])
	if ( ((*($21 + [40]) & [1]) == 0) ){ goto $label$73 }
	CALL $48(*((($21 + [40]) + [8])))
	
.LABEL $label$73
	$5 = (($21 + [72]) + [8])
	$2 = CALL atoi(( *($5) ? $10 : (*($21 + [72]) & [1]) ))
	*($21 + [36]) = $2
	if ( ((int_32)$2 > (int_32)[299]) ){ goto $label$76 }
	if ( ((uint_32)$2 > (uint_32)[222]) ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$76
	if ( ((int_32)$2 <= (int_32)[499]) ){ goto $label$80 }
	if ( ((int_32)$2 <= (int_32)[599]) ){ goto $label$79 }
	if ( ((int_32)$2 > (int_32)[665]) ){ goto $label$77 }
	if ( ((int_32)$2 == (int_32)[600]) ){ goto $label$74 }
	if ( ((int_32)$2 == (int_32)[660]) ){ goto $label$74 }
	goto $label$75 
	
.LABEL $label$80
	if ( ((int_32)$2 > (int_32)[399]) ){ goto $label$78 }
	if ( ((int_32)$2 == (int_32)[300]) ){ goto $label$74 }
	if ( ((int_32)$2 == (int_32)[330]) ){ goto $label$74 }
	if ( ((int_32)$2 == (int_32)[333]) ){ goto $label$74 }
	goto $label$75 
	
.LABEL $label$79
	if ( ((int_32)$2 == (int_32)[500]) ){ goto $label$74 }
	if ( ((int_32)$2 == (int_32)[550]) ){ goto $label$74 }
	if ( ((int_32)$2 == (int_32)[555]) ){ goto $label$74 }
	goto $label$75 
	
.LABEL $label$78
	if ( ((int_32)$2 == (int_32)[400]) ){ goto $label$74 }
	if ( ((int_32)$2 == (int_32)[440]) ){ goto $label$74 }
	if ( ((int_32)$2 == (int_32)[444]) ){ goto $label$74 }
	goto $label$75 
	
.LABEL $label$77
	if ( ((int_32)$2 == (int_32)[666]) ){ goto $label$74 }
	if ( ((int_32)$2 == (int_32)[777]) ){ goto $label$74 }
	
.LABEL $label$75
	CALL eosio_assert([0], [1184])
	
.LABEL $label$74
	CALL $59($21, ($21 + [88]))
	CALL _ZN5sicbo7str2eosENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(($21 + [16]), $21, $21)
	if ( ((*($21) & [1]) == 0) ){ goto $label$81 }
	CALL $48(*(($21 + [8])))
	
.LABEL $label$81
	$2 = *($6)
	if ( ($2 == 0) ){ goto $label$83 }
	$14 = *($21 + [36])
	$19 = $6
	
.LOOP $label$85:
	if ( ((int_32)*($2 + [16]) < (int_32)$14) ){ goto $label$86 }
	$19 = $2
	$12 = *($2)
	$2 = $12
	if ( $12 ){ goto $label$85 }
	goto $label$84 
	
.LABEL $label$86
	$2 = *($2 + [4])
	if ( $2 ){ goto $label$85 }
	
.LABEL $label$84
	if ( ((int_32)$19 == (int_32)$6) ){ goto $label$83 }
	if ( ((int_32)$14 >= (int_32)*($19 + [16])) ){ goto $label$82 }
	
.LABEL $label$83
	$19 = $6
	
.LABEL $label$82
	*($21 + [144]) = ($21 + [36])
	CALL $32(($21 + [152]), $0, ($21 + [36]), [1200], ($21 + [144]), ($21 + [136]))
	$14 = *($21 + [152])
	$2 = ($14 + [24])
	if ( ((int_32)$19 == (int_32)$6) ){ goto $label$88 }
	CALL eosio_assert(((int_64)*((($21 + [16]) + [8])) == (int_64)*(($14 + [32]))), [1216])
	$16 = ((int_64)*($2) + (int_64)*($21 + [16]))
	*($2) = $16
	CALL eosio_assert(((int_64)$16 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($2) < (int_64)4611686018427387904), [1296])
	goto $label$87 
	
.LABEL $label$88
	*($2) = *($21 + [16])
	*(($2 + [8])) = *((($21 + [16]) + [8]))
	
.LABEL $label$87
	CALL eosio_assert(((int_64)*((($21 + [16]) + [8])) == (int_64)*(($3 + [8]))), [1216])
	$16 = ((int_64)*($3) + (int_64)*($21 + [16]))
	*($3) = $16
	CALL eosio_assert(((int_64)$16 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($3) < (int_64)4611686018427387904), [1296])
	if ( ((*($21 + [72]) & [1]) == 0) ){ goto $label$89 }
	CALL $48(*($5))
	
.LABEL $label$89
	if ( ((*($21 + [88]) & [1]) == 0) ){ goto $label$44 }
	CALL $48(*((($21 + [88]) + [8])))
	goto $label$44 
	
.LABEL $label$1
	if ( ((*($21 + [120]) & [1]) == 0) ){ goto $label$90 }
	CALL $48(*($21 + [128]))
	
.LABEL $label$90
	*([0] + [4]) = ($21 + [160])
	$2
}

void .FUNC _ZN5sicbo7str2eosENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [496])
	$4 = [0]
	$3 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [464])
	if ( (*($2) & [1]) ){ goto $label$7 }
	$4 = ($2 + [1])
	goto $label$6 
	
.LABEL $label$7
	$4 = *($2 + [8])
	
.LABEL $label$6
	$4 = CALL atoi($4)
	*($0) = (CASTING int_64)(int_32 $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[999]), [1328])
	*(($0 + [8])) = (int_64)1397703940
}

void .FUNC $58 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $47($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC isdigit (int_32 $0)
{
	return (($0 + [-48]) <= [10])
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $51($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1440])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1440])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $47(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $48($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	return CALL $54($0, $1, CALL $71($1))
}

int_32 .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $51($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

int_32 .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $56($0, $1, $2, CALL $71($2))
}

int_32 .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$3 }
	$4 = uint_32($5 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $6 ){ goto $label$5 }
	$6 = [10]
	goto $label$4 
	
.LABEL $label$5
	$5 = *($0)
	$6 = (($5 & [-2]) + [-1])
	
.LABEL $label$4
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$6 }
	CALL $51($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	return $0
	
.LABEL $label$6
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ($5 & [1]) ){ goto $label$8 }
	$5 = ($0 + [1])
	goto $label$7 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	
.LABEL $label$7
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$10 }
	CALL memmove(($6 + $3), $6, $1)
	$2 = ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) )
	
.LABEL $label$10
	CALL memmove($6, $2, $3)
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$12 }
	*($0) = ($3 << [1])
	goto $label$11 
	
.LABEL $label$12
	*($0 + [4]) = $3
	
.LABEL $label$11
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}