(data (i32.const 4) "\10d\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "eosio.token\00")
(data (i32.const 128) "transfer\00")
(data (i32.const 144) "tobetiologs1\00")
(data (i32.const 160) "result\00")
(data (i32.const 176) "eosvegasjack\00")
(data (i32.const 192) "dealreceipt\00")
(data (i32.const 208) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 272) "invalid symbol name\00")
(data (i32.const 304) "read\00")
(data (i32.const 320) "get\00")
(data (i32.const 336) "active\00")
(data (i32.const 352) "write\00")
(data (i32.const 368) "wdzteoka1elt\00")
(data (i32.const 384) "imeoswinner1\00")
(data (i32.const 400) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 464) "error\00")
(data (i32.const 480) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 544) "cannot decrement iterator at beginning of table\00")
(data (i32.const 592) "error reading iterator\00")
(data (i32.const 624) "50,0,,,\00")
(data (i32.const 640) "issue\00")
(data (i32.const 656) "eoswincoin11\00")
(data (i32.const 672) "\ntansfer\00")
(data (i32.const 688) "wdzteokj2blt\00")
(data (i32.const 704) "eosgasplatfm\00")
(data (i32.const 720) "weddingdress\00")
(data (i32.const 9136) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_time" (func $fimport$2 (result i64)))
(import "env" "db_end_i64" (func $fimport$3 (param i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_previous_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$7 (param i32 i32)))
(import "env" "memcpy" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$9 (param i32)))
(import "env" "read_action_data" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$11 (param i64)))
(import "env" "require_auth2" (func $fimport$12 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$13 (param i64)))
(import "env" "send_inline" (func $fimport$14 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN12eospromdress8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $7))
(export "_ZN12eospromdress4testEyyyy" (func $9))
(export "_ZN12eospromdress5helloEm" (func $11))
(export "_ZN12eospromdress4sellEy" (func $13))
(export "_ZN12eospromdress7sellallEyy" (func $15))
(export "_ZN12eospromdress5ddiceEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyS6_" (func $17))
(export "_ZN12eospromdress3winENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $19))
(export "_ZN12eospromdress5winokEm" (func $21))
(export "_ZN12eospromdress6createEN5eosio5assetE" (func $22))
(export "_ZN12eospromdress5issueEN5eosio5assetE" (func $24))
(export "_ZN12eospromdress2bbEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $25))
(export "_ZN12eospromdress6resultEyyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5eosio5assetEhhS6_S6_S8_" (func $26))
(export "malloc" (func $52))
(export "free" (func $55))
(export "memcmp" (func $62))
(export "strlen" (func $63))
(table $0 13 13 anyfunc)
(elem (i32.const 0) $64 $15 $22 $19 $24 $26 $13 $21 $25 $9 $7 $17 $11)



int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	*(($2 = $3) + [60]) = $0
	*($2 + [48]) = *($1)
	*($2 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [16])) = [0]
	*(($2 + [36])) = [0]
	*($2) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [32]) = [0]
	*(($2 + [40])) = [0]
	*($2 + [72]) = ($1 + $0)
	*($2 + [64]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [304])
	CALL memcpy($2, $1, [8])
	*($2 + [68]) = ($1 + [8])
	CALL $31(($2 + [64]), ($2 + [8]))
	CALL eosio_assert(((uint_32)(*($2 + [72]) - *($2 + [68])) > (uint_32)[7]), [304])
	CALL memcpy(($2 + [24]), *($2 + [68]), [8])
	*($2 + [68]) = (*($2 + [68]) + [8])
	CALL $31(($2 + [64]), ($2 + [32]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [68]) = ($2 + [48])
	*($2 + [64]) = ($2 + [60])
	CALL $47(($2 + [64]), $2)
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $57(*(($2 + [40])))
	
.LABEL $label$5
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL $57(*(($2 + [16])))
	
.LABEL $label$6
	*([0] + [4]) = ($2 + [80])
	return [1]
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC _ZN12eospromdress3winENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $40(*($1), ($0 + [32]))
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [224])
	*([0] + [4]) = $8
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $61(($8 + [96]), ($1 + [16]))
	*(($6 = (($8 + [80]) + [8]))) = *(($1 + [40]))
	*($8 + [80]) = *($1 + [32])
	$5 = *($1 + [49])
	$4 = *($1 + [48])
	CALL $61(($8 + [64]), ($1 + [52]))
	CALL $61(($8 + [48]), ($1 + [64]))
	*(($7 = (($8 + [32]) + [8]))) = *(($1 + [88]))
	*($8 + [32]) = *($1 + [80])
	*((($8 + [128]) + [8])) = *($7)
	*((($8 + [112]) + [8])) = *($6)
	*($8 + [128]) = *($8 + [32])
	*($8 + [112]) = *($8 + [80])
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$0 = (*(*($0)) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $61(($8 + [208]), ($8 + [96]))
	*(($6 = (($8 + [192]) + [8]))) = *((($8 + [112]) + [8]))
	*($8 + [192]) = *($8 + [112])
	CALL $61(($8 + [176]), ($8 + [64]))
	CALL $61(($8 + [160]), ($8 + [48]))
	*(($7 = (($8 + [144]) + [8]))) = *((($8 + [128]) + [8]))
	*((($8 + [16]) + [8])) = *($6)
	*($8 + [144]) = *($8 + [128])
	*($8 + [16]) = *($8 + [192])
	*(($8 + [8])) = *($7)
	*($8) = *($8 + [144])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($8 + [208])), (int_32 ($8 + [16])), (int_32 ($4 & [255])), (int_32 ($5 & [255])), (int_32 ($8 + [176])), (int_32 ($8 + [160])), (int_32 $8), (int_32 $1))
	if ( ((*($8 + [160]) & [1]) == 0) ){ goto $label$2 }
	CALL $57(*($8 + [168]))
	
.LABEL $label$2
	if ( ((*($8 + [176]) & [1]) == 0) ){ goto $label$3 }
	CALL $57(*($8 + [184]))
	
.LABEL $label$3
	if ( ((*($8 + [208]) & [1]) == 0) ){ goto $label$4 }
	CALL $57(*($8 + [216]))
	
.LABEL $label$4
	if ( ((*($8 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $57(*($8 + [56]))
	
.LABEL $label$5
	if ( ((*($8 + [64]) & [1]) == 0) ){ goto $label$6 }
	CALL $57(*($8 + [72]))
	
.LABEL $label$6
	if ( ((*($8 + [96]) & [1]) == 0) ){ goto $label$7 }
	CALL $57(*($8 + [104]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [224])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [32]) = (int_64)0
	$4 = [0]
	*(($0 + [24])) = [0]
	*(($0 + [40])) = (int_64)1397703940
	CALL eosio_assert([1], [208])
	$3 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [272])
	*($0 + [48]) = [0]
	*($0 + [52 align=4]) = (int_64)0
	*(($0 + [60])) = (int_64)0
	*(($0 + [68])) = (int_64)0
	*($0 + [80]) = (int_64)0
	*(($0 + [88])) = (int_64)1397703940
	CALL eosio_assert([1], [208])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [272])
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $30(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC _ZN12eospromdress5winokEm (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $31(($5 + [32]), $5)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	CALL $61(($5 + [16]), $5)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL $61(($5 + [32]), ($5 + [16]))
	CALL void $1((int_32 ($5 + [32])), (int_32 $4))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $57(*($5 + [40]))
	
.LABEL $label$6
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $57(*($5 + [24]))
	
.LABEL $label$7
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $57(*(($5 + [8])))
	
.LABEL $label$8
	*([0] + [4]) = ($5 + [48])
	return [1]
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [80])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	CALL $46(($6 + [16]), $4, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*(($1 = (($6 + [32]) + [8]))) = *((($6 + [16]) + [8]))
	*($6 + [32]) = *($6 + [16])
	*((($6 + [48]) + [8])) = *($1)
	*($6 + [48]) = *($6 + [32])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$3 = *((($6 + [48]) + [8]))
	*((($6 + [64]) + [8])) = $3
	*(($6 + [8])) = $3
	$3 = *($6 + [48])
	*($6 + [64]) = $3
	*($6) = $3
	CALL void $1((int_32 $6), (int_32 $5))
	*([0] + [4]) = ($6 + [80])
	return [1]
}

void .FUNC _ZN12eospromdress6createEN5eosio5assetE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [144])
	*([0] + [4]) = $12
	CALL require_auth(*($0))
	$7 = (int_64)0
	$9 = (int_64)59
	$4 = [368]
	$5 = (int_64)0
	
.LOOP $label$1:
	$6 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	*(($12 + [120])) = [0]
	*($12 + [112]) = (int_64)0
	$4 = CALL strlen([624])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$8 }
	*($12 + [112]) = ($4 << [1])
	$2 = (($12 + [112]) | [1])
	if ( $4 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$3 = (($4 + [16]) & [-16])
	$2 = CALL $56($3)
	*($12 + [112]) = ($3 | [1])
	*($12 + [120]) = $2
	*($12 + [116]) = $4
	
.LABEL $label$7
	CALL memcpy($2, [624], $4)
	
.LABEL $label$6
	*(($2 + $4)) = [0]
	CALL eosio_assert([1], [208])
	$7 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$2 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$2 = [0]
	
.LABEL $label$9
	CALL eosio_assert($2, [272])
	$11 = *($0)
	$7 = (int_64)0
	$6 = (int_64)59
	$4 = [336]
	$8 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$19 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$2 = ($2 + [165])
	goto $label$17 
	
.LABEL $label$19
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$14 }
	*($12 + [64]) = $8
	*($12 + [56]) = $11
	$7 = (int_64)0
	$6 = (int_64)59
	$4 = [112]
	$8 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$25 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$2 = ($2 + [165])
	goto $label$23 
	
.LABEL $label$25
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$21
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$20 }
	$7 = (int_64)0
	$6 = (int_64)59
	$4 = [128]
	$10 = (int_64)0
	
.LOOP $label$26:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$31 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$2 = ($2 + [165])
	goto $label$29 
	
.LABEL $label$31
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$27
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$26 }
	*(($12 + [36])) = *(($1 + [12]))
	*(($12 + [32])) = *(($1 + [8]))
	*(($12 + [28])) = *(($1 + [4]))
	*($12 + [16]) = $5
	*($12 + [8]) = $11
	*($12 + [24]) = *($1)
	CALL $61(($12 + [40]), ($12 + [112]))
	$4 = CALL $35(($12 + [72]), ($12 + [56]), $8, $10, ($12 + [8]))
	CALL $36(($12 + [128]), $4)
	$2 = *($12 + [128])
	CALL send_inline($2, (*($12 + [132]) - $2))
	$2 = *($12 + [128])
	if ( ($2 == 0) ){ goto $label$32 }
	*($12 + [132]) = $2
	CALL $57($2)
	
.LABEL $label$32
	$2 = *($4 + [28])
	if ( ($2 == 0) ){ goto $label$33 }
	*(($4 + [32])) = $2
	CALL $57($2)
	
.LABEL $label$33
	$2 = *($4 + [16])
	if ( ($2 == 0) ){ goto $label$34 }
	*(($4 + [20])) = $2
	CALL $57($2)
	
.LABEL $label$34
	if ( ((*($12 + [40]) & [1]) == 0) ){ goto $label$35 }
	CALL $57(*(($12 + [48])))
	
.LABEL $label$35
	$7 = (int_64)0
	$6 = (int_64)59
	$4 = [336]
	$8 = (int_64)0
	
.LOOP $label$36:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$41 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$2 = ($2 + [165])
	goto $label$39 
	
.LABEL $label$41
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$40
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$38
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$37
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$36 }
	*($12 + [64]) = $8
	*($12 + [56]) = $5
	$7 = (int_64)0
	$6 = (int_64)59
	$4 = [112]
	$8 = (int_64)0
	
.LOOP $label$42:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$47 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$2 = ($2 + [165])
	goto $label$45 
	
.LABEL $label$47
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$44
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$43
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$42 }
	$7 = (int_64)0
	$6 = (int_64)59
	$4 = [128]
	$10 = (int_64)0
	
.LOOP $label$48:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$53 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$2 = ($2 + [165])
	goto $label$51 
	
.LABEL $label$53
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$52
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$50
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$49
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$48 }
	$7 = (int_64)0
	$9 = (int_64)59
	$4 = [384]
	$11 = (int_64)0
	
.LOOP $label$54:
	$6 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$55 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$2 = ($2 + [165])
	goto $label$56 
	
.LABEL $label$57
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$55
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$11 = ((int_64)$6 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$54 }
	*(($12 + [36])) = *(($1 + [12]))
	*(($12 + [32])) = *(($1 + [8]))
	*(($12 + [28])) = *(($1 + [4]))
	*($12 + [16]) = $11
	*($12 + [8]) = $5
	*($12 + [24]) = *($1)
	CALL $61(($12 + [40]), ($12 + [112]))
	$4 = CALL $35(($12 + [72]), ($12 + [56]), $8, $10, ($12 + [8]))
	CALL $36(($12 + [128]), $4)
	$2 = *($12 + [128])
	CALL send_inline($2, (*($12 + [132]) - $2))
	$2 = *($12 + [128])
	if ( ($2 == 0) ){ goto $label$58 }
	*($12 + [132]) = $2
	CALL $57($2)
	
.LABEL $label$58
	$2 = *($4 + [28])
	if ( ($2 == 0) ){ goto $label$59 }
	*(($4 + [32])) = $2
	CALL $57($2)
	
.LABEL $label$59
	$2 = *($4 + [16])
	if ( ($2 == 0) ){ goto $label$60 }
	*(($4 + [20])) = $2
	CALL $57($2)
	
.LABEL $label$60
	if ( ((*($12 + [40]) & [1]) == 0) ){ goto $label$61 }
	CALL $57(*(($12 + [48])))
	
.LABEL $label$61
	$10 = *($0)
	$7 = (int_64)0
	$6 = (int_64)59
	$4 = [336]
	$5 = (int_64)0
	
.LOOP $label$62:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$67 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$2 = ($2 + [165])
	goto $label$65 
	
.LABEL $label$67
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$66
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$65
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$64
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$63
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$5 = ((int_64)$9 | (int_64)$5)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$62 }
	$7 = (int_64)0
	$6 = (int_64)59
	$4 = [640]
	$8 = (int_64)0
	
.LOOP $label$68:
	if ( ((uint_64)$7 > (uint_64)(int_64)4) ){ goto $label$73 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$72 }
	$2 = ($2 + [165])
	goto $label$71 
	
.LABEL $label$73
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$72
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$71
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$70
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$69
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$68 }
	*(($2 = (($12 + [72]) + [8]))) = *(($1 + [8]))
	*($12 + [72]) = *($1)
	*($12 + [8]) = $10
	*($12 + [16]) = $8
	*(($4 = CALL $56([16]))) = $10
	*($4 + [8]) = $5
	*(($1 = ($12 + [40]))) = [0]
	$0 = ($4 + [16])
	*(($12 + [32])) = $0
	*(($12 + [28])) = $0
	*($12 + [24]) = $4
	*($12 + [36]) = [0]
	*(($12 + [44])) = [0]
	CALL $34(($12 + [36]), [16])
	$4 = *($12 + [36])
	$1 = (*($1) - $4)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [352])
	CALL memcpy($4, ($12 + [72]), [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [352])
	CALL memcpy(($4 + [8]), $2, [8])
	CALL $36(($12 + [56]), ($12 + [8]))
	$4 = *($12 + [56])
	CALL send_inline($4, (*($12 + [60]) - $4))
	$4 = *($12 + [56])
	if ( ($4 == 0) ){ goto $label$74 }
	*($12 + [60]) = $4
	CALL $57($4)
	
.LABEL $label$74
	$4 = *($12 + [36])
	if ( ($4 == 0) ){ goto $label$75 }
	*(($12 + [40])) = $4
	CALL $57($4)
	
.LABEL $label$75
	$4 = *($12 + [24])
	if ( ($4 == 0) ){ goto $label$76 }
	*(($12 + [28])) = $4
	CALL $57($4)
	
.LABEL $label$76
	if ( ((*($12 + [112]) & [1]) == 0) ){ goto $label$77 }
	CALL $57(*($12 + [120]))
	
.LABEL $label$77
	*([0] + [4]) = ($12 + [144])
	return (unreachable)
	
.LABEL $label$5
	CALL $58(($12 + [112]))
}

void .FUNC _ZN12eospromdress2bbEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [128])
	*([0] + [4]) = $10
	CALL require_auth(*($0))
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [336]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	*($10 + [64]) = $8
	*($10 + [56]) = $1
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [128]
	$8 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$12 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$7 }
	*(($10 + [36])) = *(($3 + [12]))
	*(($10 + [32])) = *(($3 + [8]))
	*(($10 + [28])) = *(($3 + [4]))
	*($10 + [8]) = $1
	*($10 + [24]) = *($3)
	*($10 + [16]) = $2
	CALL $61(($10 + [40]), $4)
	$0 = CALL $35(($10 + [72]), ($10 + [56]), $2, $8, ($10 + [8]))
	CALL $36(($10 + [112]), $0)
	$5 = *($10 + [112])
	CALL send_inline($5, (*($10 + [116]) - $5))
	$5 = *($10 + [112])
	if ( ($5 == 0) ){ goto $label$13 }
	*($10 + [116]) = $5
	CALL $57($5)
	
.LABEL $label$13
	$5 = *($0 + [28])
	if ( ($5 == 0) ){ goto $label$14 }
	*(($0 + [32])) = $5
	CALL $57($5)
	
.LABEL $label$14
	$5 = *($0 + [16])
	if ( ($5 == 0) ){ goto $label$15 }
	*(($0 + [20])) = $5
	CALL $57($5)
	
.LABEL $label$15
	if ( ((*($10 + [40]) & [1]) == 0) ){ goto $label$16 }
	CALL $57(*(($10 + [48])))
	
.LABEL $label$16
	*([0] + [4]) = ($10 + [128])
}

void .FUNC _ZN12eospromdress5issueEN5eosio5assetE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	CALL require_auth(*($0))
	$10 = (int_64)0
	$9 = (int_64)59
	$0 = [368]
	$5 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($0)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$5 = ((int_64)$7 | (int_64)$5)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	$9 = (int_64)0
	$7 = (int_64)59
	$0 = [384]
	$10 = (int_64)0
	
.LOOP $label$5:
	$6 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$6 }
	$2 = *($0)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$2 = ($2 + [165])
	goto $label$7 
	
.LABEL $label$8
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$6
	$0 = ($0 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$6 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$5 }
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [384]
	$9 = (int_64)0
	
.LOOP $label$9:
	$8 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$10 }
	$2 = *($0)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$2 = ($2 + [165])
	goto $label$11 
	
.LABEL $label$12
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$10
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$9 }
	*(($11 + [40])) = [0]
	*($11 + [16]) = $9
	*($11 + [8]) = $10
	*($11 + [24]) = (int_64)-1
	*($11 + [32]) = (int_64)0
	*($11 + [4]) = [0]
	*($11) = ($11 + [8])
	$3 = ($11 + [16])
	
.LOOP $label$14:
	$0 = [0]
	$2 = CALL db_lowerbound_i64($10, $9, (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$15 }
	$0 = CALL $41(($11 + [8]), $2)
	
.LABEL $label$15
	$2 = *($11 + [4])
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$13 }
	if ( ((int_64)*($2 + [8]) == (int_64)$5) ){ goto $label$16 }
	CALL $42($11)
	$9 = *($3)
	$10 = *($11 + [8])
	goto $label$14 
	
.LABEL $label$16
	CALL eosio_assert(((int_64)*(($2 + [40])) == (int_64)*(($2 + [24]))), [400])
	CALL eosio_assert(((int_64)*($2 + [32]) > (int_64)*($2 + [16])), [464])
	
.LABEL $label$13
	$3 = *($11 + [32])
	if ( ($3 == 0) ){ goto $label$17 }
	$4 = ($11 + [36])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$19 }
	
.LOOP $label$20:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$21 }
	CALL $57($2)
	
.LABEL $label$21
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$20 }
	$0 = *(($11 + [32]))
	goto $label$18 
	
.LABEL $label$19
	$0 = $3
	
.LABEL $label$18
	*($4) = $3
	CALL $57($0)
	
.LABEL $label$17
	*([0] + [4]) = ($11 + [48])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [128])
	*([0] + [4]) = $2
	*(($3 = $2) + [124]) = $0
	*($3 + [112]) = *($1)
	*($3 + [116]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $28(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [12]) = ($3 + [112])
	*($3 + [8]) = ($3 + [124])
	CALL $29(($3 + [8]), ($3 + [16]))
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$6 }
	CALL $57(*(($3 + [88])))
	
.LABEL $label$6
	if ( ((*($3 + [68]) & [1]) == 0) ){ goto $label$7 }
	CALL $57(*(($3 + [76])))
	
.LABEL $label$7
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL $57(*(($3 + [40])))
	
.LABEL $label$8
	*([0] + [4]) = ($3 + [128])
	return [1]
}

void .FUNC _ZN12eospromdress6resultEyyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5eosio5assetEhhS6_S6_S8_ (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9)
{
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [304])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [304])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [304])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [304])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $31(*($1), ($0 + [32]))
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [304])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [304])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [304])
	CALL memcpy(($0 + [16]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [304])
	CALL memcpy(($0 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC $43 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [16]) = (int_64)0
	*(($2 = ($0 + [24]))) = (int_64)1397703940
	CALL eosio_assert([1], [208])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [272])
	*(($2 = ($0 + [40]))) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [208])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [272])
	return $0
}

int_32 .FUNC $42 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [108]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [544])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)7035937633859534848)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [480])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [480])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $41(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [592])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $56([128])
	$4 = CALL $43($6)
	*($6 + [104]) = $0
	CALL $44(($8 + [32]), $4)
	*($6 + [108]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [108])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $45(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $57($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [352])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [352])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	$2 = *($1)
	CALL $61(($5 + [16]), ($1 + [8]))
	$3 = *($1 + [24])
	CALL $61($5, ($1 + [32]))
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $61(($5 + [48]), ($5 + [16]))
	CALL $61(($5 + [32]), $5)
	CALL void $0((int_32 $2), (int_64 ($5 + [48])), (int_32 $3), (int_64 ($5 + [32])), (int_32 $1))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL $57(*($5 + [40]))
	
.LABEL $label$2
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL $57(*($5 + [56]))
	
.LABEL $label$3
	if ( ((*($5) & [1]) == 0) ){ goto $label$4 }
	CALL $57(*($5 + [8]))
	
.LABEL $label$4
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $57(*($5 + [24]))
	
.LABEL $label$5
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [208])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [272])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [304])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [304])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $56(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $60($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $57($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $57($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [304])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [304])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [304])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [304])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [304])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [304])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [304])
	CALL memcpy(($1 + [48]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [304])
	CALL memcpy(($1 + [49]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [304])
	CALL memcpy(($1 + [50]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[19]), [304])
	CALL memcpy(($1 + [64]), *($0 + [4]), [20])
	$2 = (*($0 + [4]) + [20])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [304])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $56(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $60($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $57($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $60 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1397703940
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [208])
	$3 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [272])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $49(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $50(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $57(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN12eospromdress4testEyyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
}

int_32 .FUNC $6 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	*($0) = $1
	*($0 + [8 align=4]) = (int_64)0
	*(($0 + [16])) = [0]
	*((($11 + [16]) + [8])) = [0]
	*($11 + [16]) = (int_64)0
	$7 = CALL strlen([720])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$4 }
	*($11 + [16]) = ($7 << [1])
	$5 = (($11 + [16]) | [1])
	$6 = $5
	if ( $7 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($7 + [16]) & [-16])
	$6 = CALL $56($5)
	*($11 + [16]) = ($5 | [1])
	*($11 + [24]) = $6
	*($11 + [20]) = $7
	$5 = (($11 + [16]) | [1])
	
.LABEL $label$3
	CALL memcpy($6, [720], $7)
	
.LABEL $label$2
	$2 = ($0 + [8])
	*(($6 + $7)) = [0]
	$7 = ( *($11 + [24]) ? $5 : (*($11 + [16]) & [1]) )
	$6 = [-1]
	
.LOOP $label$5:
	$5 = ($7 + $6)
	$3 = ($6 + [1])
	$6 = $3
	if ( *(($5 + [1])) ){ goto $label$5 }
	$4 = (CASTING uint_64)(uint_32 $3)
	$1 = (int_64)0
	$8 = (int_64)59
	$9 = (int_64)0
	
.LOOP $label$6:
	$10 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$4) ){ goto $label$7 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$6 = ($6 + [165])
	goto $label$8 
	
.LABEL $label$9
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$11 }
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	goto $label$10 
	
.LABEL $label$11
	$10 = ((int_64)$10 & (int_64)15)
	
.LABEL $label$10
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$6 }
	*($11 + [8]) = $9
	$6 = ($0 + [12])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [16]))) ){ goto $label$13 }
	*($7) = $9
	*($6) = ($7 + [8])
	goto $label$12 
	
.LABEL $label$13
	CALL $51($2, ($11 + [8]))
	
.LABEL $label$12
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL $57(*(($11 + [24])))
	
.LABEL $label$14
	*([0] + [4]) = ($11 + [32])
	return $0
	
.LABEL $label$1
	CALL $58(($11 + [16]))
	return (unreachable)
}

void .FUNC _ZN12eospromdress8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	$2 = (int_64)0
	$6 = (int_64)59
	$0 = [656]
	$7 = (int_64)0
	
.LOOP $label$2:
	$8 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$3 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$3
	$0 = ($0 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$2 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$6 }
	CALL prints([672])
	return 
	
.LABEL $label$6
	$2 = (int_64)0
	$6 = (int_64)59
	$0 = [688]
	$7 = (int_64)0
	
.LOOP $label$7:
	$8 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$8 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$5 = ($5 + [165])
	goto $label$9 
	
.LABEL $label$10
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$0 = ($0 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$7 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$1 }
	$2 = (int_64)0
	$6 = (int_64)59
	$0 = [704]
	$7 = (int_64)0
	
.LOOP $label$11:
	$8 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$12 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$5 = ($5 + [165])
	goto $label$13 
	
.LABEL $label$14
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$12
	$0 = ($0 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$11 }
	CALL require_recipient($7)
	
.LABEL $label$1
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [224])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$22 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$22
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$29:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$30 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$3 = ($3 + [165])
	goto $label$31 
	
.LABEL $label$32
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$33 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [160]
	$7 = (int_64)0
	
.LOOP $label$34:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$39 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$3 = ($3 + [165])
	goto $label$37 
	
.LABEL $label$39
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$35
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$34 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$33
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$40 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$46 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$3 = ($3 + [165])
	goto $label$44 
	
.LABEL $label$46
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$42
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$41 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$40
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [176]
	$7 = (int_64)0
	
.LOOP $label$47:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$48 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$50 }
	$3 = ($3 + [165])
	goto $label$49 
	
.LABEL $label$50
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$49
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$48
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$47 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$20 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [192]
	$7 = (int_64)0
	
.LOOP $label$51:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$56 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$55 }
	$3 = ($3 + [165])
	goto $label$54 
	
.LABEL $label$56
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$55
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$54
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$53
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$52
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$51 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$20 }
	
.LABEL $label$21
	$4 = CALL $6(($9 + [200]), $0)
	if ( ((int_64)$2 > (int_64)-2042584741152030721) ){ goto $label$69 }
	if ( ((int_64)$2 > (int_64)-3841130677495922689) ){ goto $label$68 }
	if ( ((int_64)$2 == (int_64)-4994024814571159552) ){ goto $label$66 }
	if ( ((int_64)$2 == (int_64)-4421672816961650688) ){ goto $label$65 }
	if ( ((int_64)$2 != (int_64)-4421669217242185728) ){ goto $label$58 }
	*($9 + [164]) = [0]
	*($9 + [160]) = [1]
	*($9 + [40 align=4]) = *($9 + [160])
	CALL $16($4, ($9 + [40]))
	$3 = *($4 + [8])
	if ( $3 ){ goto $label$57 }
	goto $label$20 
	
.LABEL $label$69
	if ( ((int_64)$2 > (int_64)5358303891710541823) ){ goto $label$67 }
	if ( ((int_64)$2 == (int_64)-2042584741152030720) ){ goto $label$64 }
	if ( ((int_64)$2 == (int_64)4161326055690338304) ){ goto $label$63 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$58 }
	*($9 + [132]) = [0]
	*($9 + [128]) = [2]
	*($9 + [72 align=4]) = *($9 + [128])
	CALL $23($4, ($9 + [72]))
	$3 = *($4 + [8])
	if ( $3 ){ goto $label$57 }
	goto $label$20 
	
.LABEL $label$68
	if ( ((int_64)$2 == (int_64)-3841130677495922688) ){ goto $label$62 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$61 }
	if ( ((int_64)$2 != (int_64)-2042945380965941248) ){ goto $label$58 }
	*($9 + [148]) = [0]
	*($9 + [144]) = [3]
	*($9 + [56 align=4]) = *($9 + [144])
	CALL $20($4, ($9 + [56]))
	$3 = *($4 + [8])
	if ( $3 ){ goto $label$57 }
	goto $label$20 
	
.LABEL $label$67
	if ( ((int_64)$2 == (int_64)5358303891710541824) ){ goto $label$60 }
	if ( ((int_64)$2 == (int_64)7684013976526520320) ){ goto $label$59 }
	if ( ((int_64)$2 != (int_64)8516769789752901632) ){ goto $label$58 }
	*($9 + [124]) = [0]
	*($9 + [120]) = [4]
	*($9 + [80 align=4]) = *($9 + [120])
	CALL $23($4, ($9 + [80]))
	$3 = *($4 + [8])
	if ( $3 ){ goto $label$57 }
	goto $label$20 
	
.LABEL $label$66
	*($9 + [108]) = [0]
	*($9 + [104]) = [5]
	*($9 + [96 align=4]) = *($9 + [104])
	CALL $27($4, ($9 + [96]))
	$3 = *($4 + [8])
	if ( $3 ){ goto $label$57 }
	goto $label$20 
	
.LABEL $label$65
	*($9 + [172]) = [0]
	*($9 + [168]) = [6]
	*($9 + [32 align=4]) = *($9 + [168])
	CALL $14($4, ($9 + [32]))
	$3 = *($4 + [8])
	if ( $3 ){ goto $label$57 }
	goto $label$20 
	
.LABEL $label$64
	*($9 + [140]) = [0]
	*($9 + [136]) = [7]
	*($9 + [64 align=4]) = *($9 + [136])
	CALL $12($4, ($9 + [64]))
	$3 = *($4 + [8])
	if ( $3 ){ goto $label$57 }
	goto $label$20 
	
.LABEL $label$63
	*($9 + [116]) = [0]
	*($9 + [112]) = [8]
	*($9 + [88 align=4]) = *($9 + [112])
	CALL $8($4, ($9 + [88]))
	$3 = *($4 + [8])
	if ( $3 ){ goto $label$57 }
	goto $label$20 
	
.LABEL $label$62
	*($9 + [188]) = [0]
	*($9 + [184]) = [9]
	*($9 + [16 align=4]) = *($9 + [184])
	CALL $10($4, ($9 + [16]))
	$3 = *($4 + [8])
	if ( $3 ){ goto $label$57 }
	goto $label$20 
	
.LABEL $label$61
	*($9 + [196]) = [0]
	*($9 + [192]) = [10]
	*($9 + [8 align=4]) = *($9 + [192])
	CALL $8($4, ($9 + [8]))
	$3 = *($4 + [8])
	if ( $3 ){ goto $label$57 }
	goto $label$20 
	
.LABEL $label$60
	*($9 + [156]) = [0]
	*($9 + [152]) = [11]
	*($9 + [48 align=4]) = *($9 + [152])
	CALL $18($4, ($9 + [48]))
	$3 = *($4 + [8])
	if ( $3 ){ goto $label$57 }
	goto $label$20 
	
.LABEL $label$59
	*($9 + [180]) = [0]
	*($9 + [176]) = [12]
	*($9 + [24 align=4]) = *($9 + [176])
	CALL $12($4, ($9 + [24]))
	
.LABEL $label$58
	$3 = *($4 + [8])
	if ( ($3 == 0) ){ goto $label$20 }
	
.LABEL $label$57
	*(($4 + [12])) = $3
	CALL $57($3)
	
.LABEL $label$20
	*([0] + [4]) = ($9 + [224])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [304])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN12eospromdress7sellallEyy (int_32 $0, int_64 $1, int_64 $2)
{
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [304])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [304])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC _ZN12eospromdress5ddiceEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyS6_ (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4)
{
	CALL require_auth(*($0))
	CALL require_recipient($3)
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($1 + [4])
	$8 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	*($9) = (int_64)0
	*($9 + [16]) = (int_64)0
	*($9 + [24]) = (int_64)0
	*($9 + [36]) = $1
	*($9 + [32]) = $1
	*($9 + [40]) = ($1 + $3)
	*($9 + [48]) = ($9 + [32])
	*($9 + [56]) = $9
	CALL $48(($9 + [56]), ($9 + [48]))
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$7 = *(($9 + [24]))
	$6 = *(($9 + [16]))
	$5 = *(($9 + [8]))
	$4 = *($9)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$8 = *((*($1) + $8))
	
.LABEL $label$6
	CALL void $1((int_32 $4), (int_64 $5), (int_64 $6), (int_64 $7), (int_64 $8))
	*([0] + [4]) = ($9 + [64])
	return [1]
}

void .FUNC _ZN12eospromdress5helloEm (int_32 $0, int_32 $1)
{
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [304])
	CALL memcpy(($5 + [8]), $3, [4])
	$6 = *($5 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 $6), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC _ZN12eospromdress4sellEy (int_32 $0, int_64 $1)
{
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $34($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [352])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [352])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $38(CALL $37($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [352])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [352])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [352])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $56($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $60($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $57($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $56([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $34($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $39(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [304])
	CALL memcpy(($2 + [48]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [304])
	CALL memcpy(($3 + [49]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	CALL $31(*($1), ($3 + [52]))
	CALL $31(*($1), ($3 + [64]))
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [304])
	CALL memcpy(($3 + [80]), *($1 + [4]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $0) > (uint_32)[7]), [304])
	CALL memcpy(($3 + [88]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [320])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $34($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [304])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [304])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [304])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $31(*($1), ($0 + [16]))
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [304])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [304])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($4 + [8]) = $0
	CALL $32(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $33($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $59($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $56($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $59($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $57($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $58($7)
	return (unreachable)
}

void .FUNC $58 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $56(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $57($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $56($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $64 ()
{
	(unreachable)
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $61(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $61(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $57(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $57(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [352])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [352])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $53([736], $0)
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $54($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9136])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9222]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9224])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9222]) = [1]
	$7 = ($7 << [16])
	*([0] + [9224]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9224])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9224]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9222]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9222]) = [1]
	$3 = ($3 << [16])
	*([0] + [9224]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9224])
	
.LABEL $label$8
	*([0] + [9224]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9120])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [8928]
	$1 = (((int_32)$2 * (int_32)[12]) + [8928])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $56 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9228])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $57 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}