(data (i32.const 4) "\c0g\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "eosio.token\00")
(data (i32.const 128) "transfer\00")
(data (i32.const 144) "faireostoken\00")
(data (i32.const 160) "get\00")
(data (i32.const 176) "read\00")
(data (i32.const 192) "global config info not exist\00")
(data (i32.const 224) "cannot pass end iterator to modify\00")
(data (i32.const 272) "object passed to modify is not in multi_index\00")
(data (i32.const 320) "cannot modify objects in table of another contract\00")
(data (i32.const 384) "updater cannot change primary key when modifying an object\00")
(data (i32.const 448) "write\00")
(data (i32.const 464) "error reading iterator\00")
(data (i32.const 496) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 560) "invalid symbol name\00")
(data (i32.const 592) "game record not exist\00")
(data (i32.const 624) "the game is over\00")
(data (i32.const 672) "active\00")
(data (i32.const 688) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 752) "user has stand\00")
(data (i32.const 768) "you has 21\00")
(data (i32.const 784) "Player number is incorrect\00")
(data (i32.const 816) "game param no initialization\00")
(data (i32.const 848) "Range of bets exceeded\00")
(data (i32.const 880) "The number of cards is invalid\00")
(data (i32.const 912) "cannot create objects in table of another contract\00")
(data (i32.const 976) "invalid init deal\00")
(data (i32.const 1008) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1072) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1136) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1184) "Unsupported token type\00")
(data (i32.const 1216) "The game has not yet been activated\00")
(data (i32.const 1264) "bet info not exist\00")
(data (i32.const 1296) "you has stand\00")
(data (i32.const 1312) "poker:\00")
(data (i32.const 1328) "invalide token type\00")
(data (i32.const 1360) "bets amount not initialized \00")
(data (i32.const 1392) "@\00")
(data (i32.const 1408) "player seed length invalid\00")
(data (i32.const 1440) "player seed invalid\00")
(data (i32.const 1472) "inviter account does not exist\00")
(data (i32.const 1504) "referer invalid\00")
(data (i32.const 1520) "The amount of bets is invalid\00")
(data (i32.const 1552) "\e6\9d\a5\e8\87\aaFairEOS\e7\9a\84\e9\80\80\e5\b8\81-Refund From FairEOS\00")
(data (i32.const 1600) "do not transfer money multiple times\00")
(data (i32.const 1648) "need complete the last game\00")
(data (i32.const 10080) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$7 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$8 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$9 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$10 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_previous_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$13 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$14 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$15 (param i32 i32)))
(import "env" "is_account" (func $fimport$16 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$20 (param i64)))
(import "env" "require_auth2" (func $fimport$21 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$22 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$23 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN7betdice8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $6))
(export "_ZN7betdice8setparamEN5eosio5assetES1_" (func $8))
(export "_ZN7betdice8activateEb" (func $10))
(export "_ZN7betdice3hitEyh" (func $12))
(export "_ZN7betdice5standEyh" (func $14))
(export "_ZN7betdice8initdealEyN5eosio5assetEyyNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_6vectorIhNS6_IhEEEES8_S8_S8_S8_" (func $15))
(export "_ZN7betdice4dealEyyhhNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $17))
(export "_ZN7betdice7endgameEyyNSt3__16vectorIhNS0_9allocatorIhEEEEhN5eosio5assetES6_NS0_12basic_stringIcNS0_11char_traitsIcEENS2_IcEEEESB_SB_SB_" (func $19))
(export "_ZN7betdice12setpublickeyENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $21))
(export "_ZN7betdice12getpalyernumERKNSt3__16vectorIhNS0_9allocatorIhEEEE" (func $65))
(export "malloc" (func $97))
(export "free" (func $100))
(export "memcmp" (func $112))
(export "strlen" (func $113))
(export "memchr" (func $114))
(table $0 10 10 anyfunc)
(elem (i32.const 0) $115 $15 $21 $17 $6 $19 $12 $8 $10 $14)



int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $99($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10080])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $99 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10166]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10168])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10166]) = [1]
	$7 = ($7 << [16])
	*([0] + [10168]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10168])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10168]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10166]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10166]) = [1]
	$3 = ($3 << [16])
	*([0] + [10168]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10168])
	
.LABEL $label$8
	*([0] + [10168]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $25($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [448])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [448])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $52(CALL $53($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$3 = *($0 + [4])
	$6 = *($3)
	$5 = *($6 + [16])
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-3604158283595644928, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $77($6, $4)
	*($9 + [28]) = [0]
	*($9 + [24]) = $6
	$5 = *(*(CALL $96(($9 + [24])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [1008])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$6 = *($3 + [4])
	*($1 + [16]) = *($6)
	$5 = *(($6 + [8]))
	*($1 + [40]) = [0]
	*(($1 + [24])) = $5
	$10 = $10
	$6 = ($10 + [-48])
	*([0] + [4]) = $6
	*($9 + [4]) = $6
	*($9) = $6
	*($9 + [8]) = ($10 + [-11])
	*($9 + [16]) = $9
	*($9 + [28]) = ($1 + [8])
	*($9 + [24]) = $1
	*($9 + [32]) = ($1 + [16])
	$10 = ($1 + [32])
	*($9 + [36]) = $10
	*($9 + [40]) = ($1 + [40])
	CALL $76(($9 + [24]), ($9 + [16]))
	$5 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($2 + [8]), (int_64)-3604158283595644928, *(*($0 + [8])), $5, $6, [37])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$5 = *(($2 + [8]))
	$7 = *(*(($0 + [8])))
	$8 = *($1)
	*($9 + [24]) = *($10)
	*($1 + [52]) = CALL db_idx64_store($5, (int_64)-3604158283595644928, $7, $8, ($9 + [24]))
	*([0] + [4]) = ($9 + [48])
}

int_32 .FUNC $96 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [48]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1136])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-3604158283595644928)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1072])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1072])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $77(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $98([1676], $0)
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [176])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [16]), *($2 + [4]), [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $1) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [24]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $0, [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((int_32)(*($2 + [8]) - $1) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), ($0 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $23(*($1), ($0 + [32]))
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $110(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $110(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $102(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $102(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $115 ()
{
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$23 = (*([0] + [4]) - [112])
	*([0] + [4]) = $23
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [320])
	$4 = ($1 + [120])
	*(($22 = $23) + [16]) = *($4)
	$3 = ($1 + [8])
	*($22 + [24]) = *($3)
	$5 = *($1)
	$21 = *($2)
	*(($1 + [56])) = *(($21 + [8]))
	*($1 + [48]) = *($21)
	*($1 + [100]) = *(*($2 + [4]))
	*(*($1 + [88]) + [1]) = *(*(*($2 + [8])) + [3])
	$8 = ($1 + [88])
	$7 = ($1 + [100])
	$6 = ($1 + [48])
	$21 = (*(*($2 + [12])) + [4])
	if ( ((uint_32)($21 & [255]) >= (uint_32)*(*($2 + [16]))) ){ goto $label$1 }
	$17 = ($2 + [8])
	$18 = ($1 + [96])
	$19 = ($1 + [92])
	$20 = ($2 + [16])
	
.LOOP $label$2:
	$9 = (*(*($17)) + ($21 & [255]))
	$10 = *($19)
	if ( ((int_32)$10 == (int_32)*($18)) ){ goto $label$4 }
	*($10) = *($9)
	*($19) = (*($19) + [1])
	goto $label$3 
	
.LABEL $label$4
	CALL $54($8, $9)
	
.LABEL $label$3
	$21 = ($21 + [1])
	if ( (($21 & [255]) <= *(*($20))) ){ goto $label$2 }
	
.LABEL $label$1
	$9 = ($1 + [108])
	CALL $104($9, *($2 + [20]))
	*($1 + [101]) = [1]
	*($1 + [144]) = CALL current_time()
	$10 = ($1 + [128])
	CALL $104($10, *($2 + [24]))
	*($1 + [104]) = [1]
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [384])
	*($22 + [32]) = [0]
	*($22) = ($22 + [32])
	*($22 + [44]) = $3
	*($22 + [40]) = $1
	$17 = ($1 + [16])
	*($22 + [48]) = $17
	$18 = ($1 + [24])
	*($22 + [52]) = $18
	$20 = ($1 + [32])
	*($22 + [56]) = $20
	*($22 + [60]) = $6
	$2 = ($1 + [64])
	*($22 + [64]) = $2
	$14 = ($1 + [76])
	*($22 + [68]) = $14
	*($22 + [72]) = $8
	*($22 + [76]) = $7
	$11 = ($1 + [101])
	*($22 + [80]) = $11
	$15 = ($1 + [102])
	*($22 + [84]) = $15
	$16 = ($1 + [103])
	*($22 + [88]) = $16
	$13 = ($1 + [104])
	*($22 + [92]) = $13
	*($22 + [96]) = $9
	*($22 + [100]) = $4
	*($22 + [104]) = $10
	$12 = ($1 + [144])
	*($22 + [108]) = $12
	CALL $55(($22 + [40]), $22)
	$19 = *($22 + [32])
	if ( ($19 <= [513]) ){ goto $label$6 }
	$21 = CALL malloc($19)
	goto $label$5 
	
.LABEL $label$6
	$21 = ($23 - (($19 + [15]) & [-16]))
	*([0] + [4]) = $21
	
.LABEL $label$5
	*($22 + [4]) = $21
	*($22) = $21
	*($22 + [8]) = ($21 + $19)
	*($22 + [32]) = $22
	*($22 + [44]) = $3
	*($22 + [48]) = $17
	*($22 + [52]) = $18
	*($22 + [56]) = $20
	*($22 + [60]) = $6
	*($22 + [64]) = $2
	*($22 + [40]) = $1
	*($22 + [68]) = $14
	*($22 + [72]) = $8
	*($22 + [76]) = $7
	*($22 + [80]) = $11
	*($22 + [84]) = $15
	*($22 + [88]) = $16
	*($22 + [92]) = $13
	*($22 + [96]) = $9
	*($22 + [100]) = $4
	*($22 + [104]) = $10
	*($22 + [108]) = $12
	CALL $56(($22 + [40]), ($22 + [32]))
	CALL db_update_i64(*($1 + [156]), (int_64)0, $21, $19)
	if ( ($19 <= [513]) ){ goto $label$7 }
	CALL free($21)
	
.LABEL $label$7
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$21 = (($22 + [16]) + [8])
	*($22 + [40]) = *($4)
	if ( (CALL memcmp(($22 + [16]), ($22 + [40]), [8]) == 0) ){ goto $label$9 }
	$9 = ($1 + [160])
	$19 = *($9)
	if ( ((int_32)$19 > (int_32)[-1]) ){ goto $label$10 }
	$19 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534848, ($22 + [32]), $5)
	*($9) = $19
	
.LABEL $label$10
	CALL db_idx64_update($19, (int_64)0, ($22 + [40]))
	
.LABEL $label$9
	*($22 + [40]) = *($3)
	if ( (CALL memcmp($21, ($22 + [40]), [8]) == 0) ){ goto $label$11 }
	$19 = ($1 + [164])
	$21 = *($19)
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$12 }
	$21 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534849, ($22 + [32]), $5)
	*($19) = $21
	
.LABEL $label$12
	CALL db_idx64_update($21, (int_64)0, ($22 + [40]))
	
.LABEL $label$11
	*([0] + [4]) = ($22 + [112])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [448])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [448])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [448])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [448])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $43 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((*($2 + [128]) & [1]) == 0) ){ goto $label$6 }
	CALL $102(*(($2 + [136])))
	
.LABEL $label$6
	if ( ((*($2 + [108]) & [1]) == 0) ){ goto $label$7 }
	CALL $102(*(($2 + [116])))
	
.LABEL $label$7
	$3 = *($2 + [88])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($2 + [92])) = $3
	CALL $102($3)
	
.LABEL $label$8
	$3 = *($2 + [76])
	if ( ($3 == 0) ){ goto $label$9 }
	*(($2 + [80])) = $3
	CALL $102($3)
	
.LABEL $label$9
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$10 }
	CALL $102(*(($2 + [72])))
	
.LABEL $label$10
	CALL $102($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $102($2)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $42 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $102($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $102($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $102($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $102($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $102($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $102($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $102($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $102($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $48($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $25($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $49($4, $1)
	CALL $51(CALL $50(CALL $50($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$7 = ( $6 ? $9 : ($9 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $101(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $109($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	*(($3 = ($9 + [24]))) = [0]
	$2 = CALL $101([16])
	*($9 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $5
	*($9 + [28]) = [0]
	*(($5 = ($9 + [32]))) = [0]
	*(($9 + [36])) = [0]
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$8 = (CASTING uint_64)(uint_32 $1)
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$1 = ($9 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $25($1, $2)
	$7 = *($5)
	$2 = *($1)
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($10 + [4]) = $2
	*($10) = $2
	*($10 + [8]) = $7
	*($10 + [16]) = $10
	*($10 + [24]) = $4
	$5 = ($9 + [40])
	CALL $39(($10 + [24]), ($10 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$9 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$10:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($4 = ($9 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($9 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$4 = $2
	
.LABEL $label$8
	*($0) = $9
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$11 }
	$1 = ([0] - $4)
	$9 = ($2 + [-24])
	
.LOOP $label$12:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($9 + [16])) = $2
	CALL $102($2)
	
.LABEL $label$13
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$14 }
	*(($9 + [4])) = $2
	CALL $102($2)
	
.LABEL $label$14
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($4 == 0) ){ goto $label$15 }
	CALL $102($4)
	
.LABEL $label$15
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $101(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $109($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $102($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $102($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [496])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [560])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [464])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $101([32])
	$6 = CALL $46($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $47(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $102($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$9 = [0]
	*(($10 + [40])) = [0]
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	$7 = *($1)
	*($10 + [8]) = $7
	*($10 + [16]) = $2
	$8 = (uint_64)$3 >> (uint_64)(int_64)8
	$1 = CALL db_find_i64($7, $2, (int_64)3607749779137757184, $8)
	if ( ((int_32)$1) < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $45(($10 + [8]), $1) + [16]) == (int_32)($10 + [8])), [688])
	$4 = *(($10 + [32]))
	$6 = *(($10 + [36]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$6 }
	$9 = ($6 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)(uint_64)*(*($9) + [8]) >> (uint_64)(int_64)8) == (int_64)$8) ){ goto $label$6 }
	$6 = $9
	$1 = ($9 + [-24])
	$9 = $1
	if ( ((int_32)($1 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	$9 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($10 + [8])), [688])
	goto $label$3 
	
.LABEL $label$5
	*($0 + [8]) = $3
	*($0) = (int_64)0
	CALL eosio_assert([1], [496])
	
.LOOP $label$9:
	$1 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$1 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($1, [560])
	$6 = *($10 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$9 = [0]
	$1 = CALL db_find_i64(*($10 + [8]), *(($10 + [16])), (int_64)3607749779137757184, $8)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $45(($10 + [8]), $1)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($10 + [8])), [688])
	
.LABEL $label$3
	*($0) = *($9)
	*(($0 + [8])) = *(($9 + [8]))
	$6 = *($10 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($10 + [36])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$13 }
	
.LOOP $label$14:
	$9 = ($9 + [-24])
	$1 = *($9)
	*($9) = [0]
	if ( ($1 == 0) ){ goto $label$15 }
	CALL $102($1)
	
.LABEL $label$15
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$14 }
	$9 = *(($10 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$9 = $6
	
.LABEL $label$12
	*($5) = $6
	CALL $102($9)
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [48])
}

void .FUNC _ZN7betdice8setparamEN5eosio5assetES1_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*((($6 + [8]) + [32])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$4 = *($0)
	*($6 + [8]) = $4
	*($6 + [16]) = $4
	$3 = CALL db_find_i64($4, $4, (int_64)-6219918174314299392, (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$3) < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $71(($6 + [8]), $3)
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)($6 + [8])), [688])
	CALL eosio_assert([1], [224])
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)($6 + [8])), [272])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $fimport$2()), [320])
	*($0) = *($1)
	$4 = *($0 + [8])
	*($0 + [8]) = *(($1 + [8]))
	*(($0 + [24])) = *(($2 + [8]))
	*($0 + [16]) = *($2)
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$4) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [384])
	*($6 + [88]) = (($6 + [48]) + [32])
	*($6 + [84]) = ($6 + [48])
	*($6 + [80]) = ($6 + [48])
	*($6 + [96]) = ($6 + [80])
	*($6 + [108]) = ($0 + [16])
	*($6 + [104]) = $0
	CALL $91(($6 + [104]), ($6 + [96]))
	CALL db_update_i64(*($0 + [36]), (int_64)0, ($6 + [48]), [32])
	$0 = (($6 + [8]) + [16])
	if ( (uint_64)($4 <= *($0)) ){ goto $label$3 }
	*($0) = ((int_64)$4 + (int_64)1)
	$2 = *($6 + [32])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$5 = *($0)
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $fimport$2()), [912])
	$0 = CALL $101([48])
	CALL $83($0)
	*($0 + [32]) = ($6 + [8])
	*(($3 = ($0 + [8]))) = *(($1 + [8]))
	*($0) = *($1)
	*(($0 + [24])) = *(($2 + [8]))
	*($0 + [16]) = *($2)
	*($6 + [88]) = (($6 + [48]) + [32])
	*($6 + [84]) = ($6 + [48])
	*($6 + [80]) = ($6 + [48])
	*($6 + [96]) = ($6 + [80])
	*($6 + [108]) = ($0 + [16])
	*($6 + [104]) = $0
	CALL $91(($6 + [104]), ($6 + [96]))
	$4 = (uint_64)*($3) >> (uint_64)(int_64)8
	$2 = CALL db_store_i64(*((($6 + [8]) + [8])), (int_64)-6219918174314299392, $5, $4), ($6 + [48]), [32]
	*($0 + [36]) = $2)
	$1 = (($6 + [8]) + [16])
	if ( (uint_64)($4 <= *($1)) ){ goto $label$5 }
	*($1) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$5
	*($6 + [80]) = $0
	$4 = (uint_64)*($3) >> (uint_64)(int_64)8
	*($6 + [48]) = $4)
	*($6 + [104]) = $2
	$3 = ($6 + [36])
	$1 = *($3)
	if ( ((uint_32)$1 >= (uint_32)*(($6 + [40]))) ){ goto $label$7 }
	*($1 + [8]) = $4
	*($1 + [16]) = $2
	*($6 + [80]) = [0]
	*($1) = $0
	*($3) = ($1 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $85(($6 + [32]), ($6 + [80]), ($6 + [48]), ($6 + [104]))
	
.LABEL $label$6
	$0 = *($6 + [80])
	*($6 + [80]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	CALL $102($0)
	
.LABEL $label$3
	$2 = *($6 + [32])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = ($6 + [36])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $102($1)
	
.LABEL $label$11
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($6 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $2
	
.LABEL $label$8
	*($3) = $2
	CALL $102($0)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [112])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = (*([0] + [4]) - [160])
	$5 = $3
	*([0] + [4]) = $3
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	CALL $89(($5 + [32]), $3, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	*(($1 = (($5 + [80]) + [8]))) = *((($5 + [32]) + [8]))
	*(($3 = (($5 + [64]) + [8]))) = *(($5 + [56]))
	*($5 + [80]) = *($5 + [32])
	*($5 + [64]) = *($5 + [48])
	*((($5 + [112]) + [8])) = *($3)
	*((($5 + [96]) + [8])) = *($1)
	*($5 + [112]) = *($5 + [64])
	*($5 + [96]) = *($5 + [80])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$4 = *((*($1) + $4))
	
.LABEL $label$6
	*(($3 = (($5 + [144]) + [8]))) = *((($5 + [96]) + [8]))
	*(($2 = (($5 + [128]) + [8]))) = *((($5 + [112]) + [8]))
	*($5 + [144]) = *($5 + [96])
	*($5 + [128]) = *($5 + [112])
	*((($5 + [16]) + [8])) = *($3)
	*($5 + [16]) = *($5 + [144])
	*(($5 + [8])) = *($2)
	*($5) = *($5 + [128])
	CALL void $1((int_32 ($5 + [16])), (int_32 $5), (int_32 $4))
	*([0] + [4]) = ($5 + [160])
	return [1]
}

void .FUNC _ZN7betdice8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	$19 = (*([0] + [4]) - [320])
	*([0] + [4]) = $19
	$15 = *($0)
	if ( ((int_64)$15 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$15 != (int_64)$2) ){ goto $label$1 }
	CALL $111(($19 + [272]), $4, [0], [6], $4)
	$14 = *($19 + [272])
	$10 = CALL strlen([1312])
	if ( ((int_32)$10 != (int_32)( *($19 + [276]) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$2 }
	if ( CALL $108(($19 + [272]), [0], [-1], [1312], $10) ){ goto $label$2 }
	$14 = [1]
	$2 = *($3 + [8])
	if ( ((int_64)$2 == (int_64)1397703940) ){ goto $label$3 }
	$14 = ((int_64)$2 == (int_64)353416332804)
	
.LABEL $label$3
	CALL eosio_assert($14, [1328])
	$11 = [0]
	*((($19 + [232]) + [32])) = [0]
	*($19 + [248]) = (int_64)-1
	$2 = *($0)
	*($19 + [232]) = $2
	*($19 + [240]) = $2
	*($19 + [256]) = (int_64)0
	$14 = [0]
	$10 = CALL db_lowerbound_i64($2, $2, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$4 }
	$14 = CALL $26(($19 + [232]), $10)
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [1216])
	CALL eosio_assert(*($14 + [8]), [1216])
	*((($19 + [192]) + [32])) = [0]
	*($19 + [208]) = (int_64)-1
	*($19 + [216]) = (int_64)0
	$2 = *($0)
	*($19 + [192]) = $2
	*($19 + [200]) = $2
	$14 = CALL db_find_i64($2, $2, (int_64)-6219918174314299392, (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	if ( ((int_32)$14) < (int_32)[0]) ){ goto $label$5 }
	$11 = CALL $71(($19 + [192]), $14)
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)($19 + [192])), [688])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [1360])
	$14 = *($4)
	if ( ($14 & [1]) ){ goto $label$7 }
	$6 = uint_32($14 >> [1])
	$12 = ($4 + [1])
	goto $label$6 
	
.LABEL $label$7
	$6 = *($4 + [4])
	$12 = *($4 + [8])
	
.LABEL $label$6
	$10 = CALL strlen([1312])
	if ( ($10 == 0) ){ goto $label$9 }
	$5 = ($12 + $6)
	$14 = $5
	if ( ((int_32)$6 < (int_32)$10) ){ goto $label$10 }
	$14 = $12
	
.LOOP $label$12:
	$6 = (($6 - $10) + [1])
	if ( ($6 == 0) ){ goto $label$11 }
	$14 = CALL memchr($14, [112], $6)
	if ( ($14 == 0) ){ goto $label$11 }
	if ( (CALL memcmp($14, [1312], $10) == 0) ){ goto $label$10 }
	$14 = ($14 + [1])
	$6 = ($5 - $14)
	if ( ((int_32)$6 >= (int_32)$10) ){ goto $label$12 }
	
.LABEL $label$11
	$14 = $5
	
.LABEL $label$10
	$12 = ( [-1] ? ($14 - $12) : ((int_32)$14 == (int_32)$5) )
	goto $label$8 
	
.LABEL $label$9
	$12 = [0]
	
.LABEL $label$8
	$14 = *($4)
	if ( ($14 & [1]) ){ goto $label$14 }
	$10 = uint_32($14 >> [1])
	$13 = ($4 + [1])
	goto $label$13 
	
.LABEL $label$14
	$10 = *($4 + [4])
	$13 = *($4 + [8])
	
.LABEL $label$13
	$6 = [0]
	$14 = CALL strlen([1392])
	if ( ($14 == 0) ){ goto $label$15 }
	if ( ((int_32)$10 < (int_32)$14) ){ goto $label$16 }
	$5 = ($13 + $10)
	$6 = $13
	
.LOOP $label$17:
	$10 = (($10 - $14) + [1])
	if ( ($10 == 0) ){ goto $label$16 }
	$10 = CALL memchr($6, [64], $10)
	if ( ($10 == 0) ){ goto $label$16 }
	if ( (CALL memcmp($10, [1392], $14) == 0) ){ goto $label$18 }
	$6 = ($10 + [1])
	$10 = ($5 - $6)
	if ( ((int_32)$10 >= (int_32)$14) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$16 }
	$6 = ($10 - $13)
	goto $label$15 
	
.LABEL $label$16
	$6 = [-1]
	
.LABEL $label$15
	*($19 + [184]) = [0]
	*($19 + [176]) = (int_64)0
	*($19 + [168]) = [0]
	*($19 + [160]) = (int_64)0
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$24 }
	CALL $111(($19 + [16]), $4, ($12 + [6]), (([-6] - $12) + $6), $4)
	if ( (*($19 + [176]) & [1]) ){ goto $label$23 }
	*($19 + [176]) = [0]
	goto $label$22 
	
.LABEL $label$24
	CALL $111(($19 + [16]), $4, ($12 + [6]), [-1], $4)
	if ( (*($19 + [176]) & [1]) ){ goto $label$21 }
	*($19 + [176]) = [0]
	goto $label$20 
	
.LABEL $label$23
	*(*(($19 + [184]))) = [0]
	*($19 + [180]) = [0]
	
.LABEL $label$22
	CALL $106(($19 + [176]), [0])
	*((($19 + [176]) + [8])) = *((($19 + [16]) + [8]))
	*($19 + [176]) = *($19 + [16])
	CALL $111(($19 + [16]), $4, ($6 + [1]), [-1], $4)
	if ( (*($19 + [160]) & [1]) ){ goto $label$26 }
	*($19 + [160]) = [0]
	goto $label$25 
	
.LABEL $label$26
	*(*((($19 + [160]) + [8]))) = [0]
	*($19 + [164]) = [0]
	
.LABEL $label$25
	CALL $106(($19 + [160]), [0])
	*((($19 + [160]) + [8])) = *((($19 + [16]) + [8]))
	*($19 + [160]) = *($19 + [16])
	goto $label$19 
	
.LABEL $label$21
	*(*(($19 + [184]))) = [0]
	*($19 + [180]) = [0]
	
.LABEL $label$20
	CALL $106(($19 + [176]), [0])
	*((($19 + [176]) + [8])) = *((($19 + [16]) + [8]))
	*($19 + [176]) = *($19 + [16])
	CALL $107(($19 + [160]), [656])
	
.LABEL $label$19
	$4 = *($19 + [176])
	CALL eosio_assert(((( *($19 + [180]) ? uint_32($4 >> [1]) : ($4 & [1]) ) + [-10]) <= [23]), [1408])
	$4 = ($4 & [1])
	$4 = *($19 + [176])
	$10 = (( *($19 + [180]) ? uint_32($4 >> [1]) : $4 ) & [255])
	if ( ($10 == 0) ){ goto $label$27 }
	$5 = (($19 + [176]) | [1])
	$6 = ($19 + [184])
	CALL eosio_assert(((int_32)*(( *($6) ? $5 : $4 )) != (int_32)[32]), [1440])
	if ( ((int_32)$10 == (int_32)[1]) ){ goto $label$27 }
	$4 = [1]
	$14 = [1]
	
.LOOP $label$28:
	CALL eosio_assert(((int_32)*((( *($6) ? $5 : (*($19 + [176]) & [1]) ) + $4)) != (int_32)[32]), [1440])
	$14 = ($14 + [1])
	$4 = ($14 & [255])
	if ( ($4 <= $10) ){ goto $label$28 }
	
.LABEL $label$27
	$4 = ($4 & [1])
	$4 = *($19 + [160])
	if ( (( *($19 + [164]) ? uint_32($4 >> [1]) : $4 ) == 0) ){ goto $label$29 }
	$5 = (($19 + [160]) | [1])
	$4 = ( *(($19 + [168])) ? $5 : $4 )
	$14 = [-1]
	
.LOOP $label$30:
	$10 = ($4 + $14)
	$6 = ($14 + [1])
	$14 = $6
	if ( *(($10 + [1])) ){ goto $label$30 }
	$7 = (CASTING uint_64)(uint_32 $6)
	$2 = (int_64)0
	$15 = (int_64)59
	$16 = (int_64)0
	
.LOOP $label$31:
	$17 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$7) ){ goto $label$32 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$14 = ($14 + [165])
	goto $label$33 
	
.LABEL $label$34
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$36 }
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	goto $label$35 
	
.LABEL $label$36
	$17 = ((int_64)$17 & (int_64)15)
	
.LABEL $label$35
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$31 }
	CALL eosio_assert(CALL $fimport$16($16), [1472])
	$4 = ( *(($19 + [168])) ? $5 : (*($19 + [160]) & [1]) )
	$14 = [-1]
	
.LOOP $label$37:
	$10 = ($4 + $14)
	$6 = ($14 + [1])
	$14 = $6
	if ( *(($10 + [1])) ){ goto $label$37 }
	$7 = (CASTING uint_64)(uint_32 $6)
	$2 = (int_64)0
	$15 = (int_64)59
	$16 = (int_64)0
	
.LOOP $label$38:
	$17 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$7) ){ goto $label$39 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$14 = ($14 + [165])
	goto $label$40 
	
.LABEL $label$41
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$39
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$43 }
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	goto $label$42 
	
.LABEL $label$43
	$17 = ((int_64)$17 & (int_64)15)
	
.LABEL $label$42
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$38 }
	CALL eosio_assert(((int_64)$16 != (int_64)$1), [1504])
	
.LABEL $label$29
	$4 = [0]
	$2 = *($3)
	if ( ((int_64)$2 < (int_64)*($11)) ){ goto $label$44 }
	$4 = ((int_64)$2 <= (int_64)*($11 + [16]))
	
.LABEL $label$44
	CALL eosio_assert($4, [1520])
	$2 = *(($3 + [8]))
	*(($19 + [152])) = [0]
	*($19 + [128]) = $1
	*($19 + [136]) = (int_64)-1
	*($19 + [144]) = (int_64)0
	*($19 + [120]) = *($0)
	*($19 + [156]) = [0]
	*($19 + [112]) = ($19 + [120])
	$9 = (CASTING uint_64)(uint_32 ((int_64)$2 == (int_64)353416332804))
	*($19 + [72]) = $9
	CALL $75(($19 + [16]), ($19 + [112]), ($19 + [72]))
	$14 = *($19 + [20])
	if ( ($14 == 0) ){ goto $label$51 }
	if ( ((int_64)*($19 + [72]) != (int_64)*($14 + [32])) ){ goto $label$51 }
	if ( ($14 == 0) ){ goto $label$51 }
	$6 = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) - *($14 + [8]))
	$4 = *($14 + [40])
	if ( $4 ){ goto $label$47 }
	if ( ($6 <= [30]) ){ goto $label$47 }
	$8 = *($0)
	$2 = (int_64)0
	$17 = (int_64)59
	$4 = [672]
	$16 = (int_64)0
	
.LOOP $label$52:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$57 }
	$10 = *($4)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$56 }
	$10 = ($10 + [165])
	goto $label$55 
	
.LABEL $label$57
	$15 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$56
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$55
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$54
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$53
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$52 }
	$2 = (int_64)0
	$17 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$58:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$63 }
	$10 = *($4)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$62 }
	$10 = ($10 + [165])
	goto $label$61 
	
.LABEL $label$63
	$15 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$62
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$61
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$60
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$59
	$4 = ($4 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$7 = ((int_64)$15 | (int_64)$7)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$58 }
	$2 = (int_64)0
	$17 = (int_64)59
	$4 = [128]
	$18 = (int_64)0
	
.LOOP $label$64:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$69 }
	$10 = *($4)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$68 }
	$10 = ($10 + [165])
	goto $label$67 
	
.LABEL $label$69
	$15 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$68
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$67
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$66
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$65
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$15 | (int_64)$18)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$64 }
	*(($19 + [8])) = [0]
	*($19) = (int_64)0
	$4 = CALL strlen([1552])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$46 }
	$10 = ($14 + [16])
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$50 }
	*($19) = ($4 << [1])
	$5 = ($19 | [1])
	if ( $4 ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$51
	$2 = *($0)
	*($19 + [300]) = $3
	*($19 + [296]) = ($19 + [120])
	*($19 + [72]) = $2
	CALL eosio_assert(((int_64)*($19 + [120]) == (int_64)CALL $fimport$2()), [912])
	*($19 + [20]) = ($19 + [296])
	*($19 + [16]) = ($19 + [120])
	*($19 + [24]) = ($19 + [72])
	*(($14 = CALL $101([56])) + [24]) = (int_64)1398362884
	*($14 + [16]) = (int_64)0
	CALL eosio_assert([1], [496])
	$2 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$72:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$71 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$73 }
	
.LOOP $label$74:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$71 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$74 }
	
.LABEL $label$73
	$10 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$72 }
	goto $label$70 
	
.LABEL $label$71
	$10 = [0]
	
.LABEL $label$70
	CALL eosio_assert($10, [560])
	*($14 + [44]) = ($19 + [120])
	CALL $95(($19 + [16]), $14)
	*($19) = $14
	$2 = *($14)
	*($19 + [16]) = $2
	$10 = *($14 + [48])
	*($19 + [312]) = $10
	$6 = ($19 + [148])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($19 + [152]))) ){ goto $label$76 }
	*($4 + [8]) = $2
	*($4 + [16]) = $10
	*($19) = [0]
	*($4) = $14
	*($6) = ($4 + [24])
	goto $label$75 
	
.LABEL $label$76
	CALL $79(($19 + [144]), $19, ($19 + [16]), ($19 + [312]))
	
.LABEL $label$75
	$4 = *($19)
	*($19) = [0]
	if ( ($4 == 0) ){ goto $label$45 }
	CALL $102($4)
	goto $label$45 
	
.LABEL $label$50
	$11 = (($4 + [16]) & [-16])
	$5 = CALL $101($11)
	*($19) = ($11 | [1])
	*($19 + [8]) = $5
	*($19 + [4]) = $4
	
.LABEL $label$49
	CALL memcpy($5, [1552], $4)
	
.LABEL $label$48
	*(($5 + $4)) = [0]
	*((($19 + [16]) + [28])) = *(($10 + [12]))
	*((($19 + [16]) + [24])) = *(($10 + [8]))
	*((($19 + [16]) + [20])) = *(($10 + [4]))
	*($19 + [24]) = $1
	*($19 + [16]) = *($0)
	*($19 + [32]) = *($10)
	$4 = ($19 + [8])
	*(($19 + [56])) = *($4)
	*($19 + [48]) = *($19)
	*($19) = [0]
	*($19 + [4]) = [0]
	*($4) = [0]
	*($19 + [72]) = $7
	*($19 + [80]) = $18
	*($19 + [88]) = [0]
	*(($10 = (($19 + [72]) + [20]))) = [0]
	*(($5 = (($19 + [72]) + [24]))) = [0]
	*(($4 = CALL $101([16]))) = $8
	*($4 + [8]) = $16
	*((($19 + [72]) + [32])) = [0]
	$11 = ($4 + [16])
	*($5) = $11
	*($10) = $11
	*($19 + [88]) = $4
	*($19 + [100]) = [0]
	*((($19 + [72]) + [36])) = [0]
	$4 = *($19 + [48])
	$10 = ( *((($19 + [16]) + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($10 + [32])
	$2 = (CASTING uint_64)(uint_32 $10)
	$10 = (($19 + [72]) + [28])
	
.LOOP $label$77:
	$4 = ($4 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$77 }
	if ( ($4 == 0) ){ goto $label$79 }
	CALL $25($10, $4)
	$10 = *(($19 + [104]))
	$4 = *(($19 + [100]))
	goto $label$78 
	
.LABEL $label$79
	$10 = [0]
	$4 = [0]
	
.LABEL $label$78
	*($19 + [300]) = $4
	*($19 + [296]) = $4
	*($19 + [304]) = $10
	*($19 + [288]) = ($19 + [296])
	*($19 + [312]) = ($19 + [16])
	CALL $39(($19 + [312]), ($19 + [288]))
	CALL $94(($19 + [296]), ($19 + [72]))
	$4 = *($19 + [296])
	CALL send_inline($4, (*($19 + [300]) - $4))
	$4 = *($19 + [296])
	if ( ($4 == 0) ){ goto $label$80 }
	*($19 + [300]) = $4
	CALL $102($4)
	
.LABEL $label$80
	$4 = *($19 + [100])
	if ( ($4 == 0) ){ goto $label$81 }
	*(($19 + [104])) = $4
	CALL $102($4)
	
.LABEL $label$81
	$4 = *($19 + [88])
	if ( ($4 == 0) ){ goto $label$82 }
	*(($19 + [92])) = $4
	CALL $102($4)
	
.LABEL $label$82
	if ( ((*(($19 + [48])) & [1]) == 0) ){ goto $label$83 }
	CALL $102(*(($19 + [56])))
	
.LABEL $label$83
	if ( ((*($19) & [1]) == 0) ){ goto $label$84 }
	CALL $102(*(($19 + [8])))
	
.LABEL $label$84
	CALL eosio_assert([1], [224])
	$4 = *($19 + [112])
	CALL eosio_assert(((int_32)*($14 + [44]) == (int_32)$4), [272])
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$2()), [320])
	$10 = ($14 + [32])
	*($19 + [312]) = *($10)
	$2 = *($14)
	*($14 + [8]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*(($14 + [28])) = *(($3 + [12]))
	*(($14 + [24])) = *(($3 + [8]))
	*(($14 + [20])) = *(($3 + [4]))
	*($14 + [16]) = *($3)
	*($14 + [40]) = [0]
	CALL eosio_assert(((int_64)$2 == (int_64)*($14)), [384])
	*($19 + [304]) = (($19 + [16]) + [37])
	*($19 + [300]) = ($19 + [16])
	*($19 + [296]) = ($19 + [16])
	*($19) = ($19 + [296])
	*($19 + [76]) = ($14 + [8])
	*($19 + [72]) = $14
	*($19 + [80]) = ($14 + [16])
	*($19 + [84]) = $10
	*($19 + [88]) = ($14 + [40])
	CALL $76(($19 + [72]), $19)
	CALL db_update_i64(*($14 + [48]), (int_64)0, ($19 + [16]), [37])
	if ( (uint_64)($2 <= *($4 + [16])) ){ goto $label$85 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$85
	*($19 + [72]) = *($10)
	if ( (CALL memcmp(($19 + [312]), ($19 + [72]), [8]) == 0) ){ goto $label$86 }
	$10 = *($14 + [52])
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$87 }
	$10 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-3604158283595644928, $19, $2)
	*(($14 + [52])) = $10
	
.LABEL $label$87
	CALL db_idx64_update($10, (int_64)0, ($19 + [72]))
	
.LABEL $label$86
	$4 = *(($14 + [40]))
	
.LABEL $label$47
	if ( ((uint_32)$6 > (uint_32)[29]) ){ goto $label$88 }
	if ( ($4 & [255]) ){ goto $label$88 }
	CALL eosio_assert([0], [1600])
	$4 = *(($14 + [40]))
	
.LABEL $label$88
	if ( ((int_32)($4 & [255]) != (int_32)[1]) ){ goto $label$45 }
	CALL eosio_assert([1], [224])
	$4 = *($19 + [112])
	CALL eosio_assert(((int_32)*($14 + [44]) == (int_32)$4), [272])
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$2()), [320])
	*($14 + [40]) = [0]
	$10 = ($14 + [32])
	*($19 + [312]) = *($10)
	$2 = *($14)
	*($14 + [8]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*(($14 + [28])) = *(($3 + [12]))
	*(($14 + [24])) = *(($3 + [8]))
	*(($14 + [20])) = *(($3 + [4]))
	*($14 + [16]) = *($3)
	CALL eosio_assert(((int_64)$2 == (int_64)*($14)), [384])
	*($19 + [304]) = (($19 + [16]) + [37])
	*($19 + [300]) = ($19 + [16])
	*($19 + [296]) = ($19 + [16])
	*($19) = ($19 + [296])
	*($19 + [76]) = ($14 + [8])
	*($19 + [72]) = $14
	*($19 + [80]) = ($14 + [16])
	*($19 + [84]) = $10
	*($19 + [88]) = ($14 + [40])
	CALL $76(($19 + [72]), $19)
	CALL db_update_i64(*($14 + [48]), (int_64)0, ($19 + [16]), [37])
	if ( (uint_64)($2 <= *($4 + [16])) ){ goto $label$89 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$89
	*($19 + [72]) = *($10)
	if ( (CALL memcmp(($19 + [312]), ($19 + [72]), [8]) == 0) ){ goto $label$45 }
	$10 = *($14 + [52])
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$90 }
	$10 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-3604158283595644928, $19, $2)
	*(($14 + [52])) = $10
	
.LABEL $label$90
	CALL db_idx64_update($10, (int_64)0, ($19 + [72]))
	goto $label$45 
	
.LABEL $label$46
	CALL $103($19)
	
.LABEL $label$45
	*(($19 + [48])) = [0]
	*($19 + [24]) = $1
	*($19 + [32]) = (int_64)-1
	*($19 + [40]) = (int_64)0
	*($19 + [16]) = *($0)
	*($19 + [52]) = [0]
	*($19) = ($19 + [16])
	*($19 + [296]) = $9
	CALL $72(($19 + [72]), $19, ($19 + [296]))
	$4 = *($19 + [76])
	if ( ($4 == 0) ){ goto $label$92 }
	if ( ((int_64)*($19 + [296]) != (int_64)*($4 + [120])) ){ goto $label$92 }
	if ( ($4 == 0) ){ goto $label$92 }
	$4 = ((int_32)*($4 + [104]) != (int_32)[0])
	goto $label$91 
	
.LABEL $label$92
	$4 = [1]
	
.LABEL $label$91
	CALL eosio_assert($4, [1648])
	CALL $43(($19 + [40]))
	$10 = *($19 + [144])
	if ( ($10 == 0) ){ goto $label$93 }
	$0 = ($19 + [148])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$95 }
	
.LOOP $label$96:
	$4 = ($4 + [-24])
	$14 = *($4)
	*($4) = [0]
	if ( ($14 == 0) ){ goto $label$97 }
	CALL $102($14)
	
.LABEL $label$97
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$96 }
	$4 = *(($19 + [144]))
	goto $label$94 
	
.LABEL $label$95
	$4 = $10
	
.LABEL $label$94
	*($0) = $10
	CALL $102($4)
	
.LABEL $label$93
	if ( ((*($19 + [160]) & [1]) == 0) ){ goto $label$98 }
	CALL $102(*(($19 + [168])))
	
.LABEL $label$98
	if ( ((*($19 + [176]) & [1]) == 0) ){ goto $label$99 }
	CALL $102(*(($19 + [184])))
	
.LABEL $label$99
	$10 = *($19 + [216])
	if ( ($10 == 0) ){ goto $label$100 }
	$0 = ($19 + [220])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$102 }
	
.LOOP $label$103:
	$4 = ($4 + [-24])
	$14 = *($4)
	*($4) = [0]
	if ( ($14 == 0) ){ goto $label$104 }
	CALL $102($14)
	
.LABEL $label$104
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$103 }
	$4 = *(($19 + [216]))
	goto $label$101 
	
.LABEL $label$102
	$4 = $10
	
.LABEL $label$101
	*($0) = $10
	CALL $102($4)
	
.LABEL $label$100
	$10 = *($19 + [256])
	if ( ($10 == 0) ){ goto $label$2 }
	$0 = ($19 + [260])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$106 }
	
.LOOP $label$107:
	$4 = ($4 + [-24])
	$14 = *($4)
	*($4) = [0]
	if ( ($14 == 0) ){ goto $label$108 }
	if ( ((*($14 + [12]) & [1]) == 0) ){ goto $label$109 }
	CALL $102(*(($14 + [20])))
	
.LABEL $label$109
	CALL $102($14)
	
.LABEL $label$108
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$107 }
	$4 = *(($19 + [256]))
	goto $label$105 
	
.LABEL $label$106
	$4 = $10
	
.LABEL $label$105
	*($0) = $10
	CALL $102($4)
	
.LABEL $label$2
	if ( ((*($19 + [272]) & [1]) == 0) ){ goto $label$1 }
	CALL $102(*($19 + [280]))
	
.LABEL $label$1
	*([0] + [4]) = ($19 + [320])
	(unreachable)
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [496])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [560])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $92(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $93(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $102(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [160])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$22 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$22
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$29 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$35 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$3 = ($3 + [165])
	goto $label$33 
	
.LABEL $label$35
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$31
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$30 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$29
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$36:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$37 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$37
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$36 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$20 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$40:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$45 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$3 = ($3 + [165])
	goto $label$43 
	
.LABEL $label$45
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$44
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$42
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$41
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$40 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$20 }
	
.LABEL $label$21
	*($9 + [152]) = $0
	if ( ((int_64)$2 <= (int_64)3617214701412286463) ){ goto $label$53 }
	if ( ((int_64)$2 <= (int_64)6112162363668955135) ){ goto $label$52 }
	if ( ((int_64)$2 == (int_64)6112162363668955136) ){ goto $label$50 }
	if ( ((int_64)$2 == (int_64)7760265107912785920) ){ goto $label$49 }
	if ( ((int_64)$2 != (int_64)8421050331034550272) ){ goto $label$20 }
	*($9 + [108]) = [0]
	*($9 + [104]) = [1]
	*($9 + [48 align=4]) = *($9 + [104])
	CALL $16(($9 + [152]), ($9 + [48]))
	goto $label$20 
	
.LABEL $label$53
	if ( ((int_64)$2 > (int_64)-4157609156632641537) ){ goto $label$51 }
	if ( ((int_64)$2 == (int_64)-4417095151395012608) ){ goto $label$48 }
	if ( ((int_64)$2 != (int_64)-4417084425313708576) ){ goto $label$20 }
	*($9 + [84]) = [0]
	*($9 + [80]) = [2]
	*($9 + [72 align=4]) = *($9 + [80])
	CALL $22(($9 + [152]), ($9 + [72]))
	goto $label$20 
	
.LABEL $label$52
	if ( ((int_64)$2 == (int_64)3617214701412286464) ){ goto $label$47 }
	if ( ((int_64)$2 != (int_64)5371967522708914176) ){ goto $label$20 }
	*($9 + [100]) = [0]
	*($9 + [96]) = [3]
	*($9 + [56 align=4]) = *($9 + [96])
	CALL $18(($9 + [152]), ($9 + [56]))
	goto $label$20 
	
.LABEL $label$51
	if ( ((int_64)$2 == (int_64)-4157609156632641536) ){ goto $label$46 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$20 }
	*($9 + [148]) = [0]
	*($9 + [144]) = [4]
	*($9 + [8 align=4]) = *($9 + [144])
	CALL $7(($9 + [152]), ($9 + [8]))
	goto $label$20 
	
.LABEL $label$50
	*($9 + [92]) = [0]
	*($9 + [88]) = [5]
	*($9 + [64 align=4]) = *($9 + [88])
	CALL $20(($9 + [152]), ($9 + [64]))
	goto $label$20 
	
.LABEL $label$49
	*($9 + [124]) = [0]
	*($9 + [120]) = [6]
	*($9 + [32 align=4]) = *($9 + [120])
	CALL $13(($9 + [152]), ($9 + [32]))
	goto $label$20 
	
.LABEL $label$48
	*($9 + [140]) = [0]
	*($9 + [136]) = [7]
	*($9 + [16 align=4]) = *($9 + [136])
	CALL $9(($9 + [152]), ($9 + [16]))
	goto $label$20 
	
.LABEL $label$47
	*($9 + [132]) = [0]
	*($9 + [128]) = [8]
	*($9 + [24 align=4]) = *($9 + [128])
	CALL $11(($9 + [152]), ($9 + [24]))
	goto $label$20 
	
.LABEL $label$46
	*($9 + [116]) = [0]
	*($9 + [112]) = [9]
	*($9 + [40 align=4]) = *($9 + [112])
	CALL $13(($9 + [152]), ($9 + [40]))
	
.LABEL $label$20
	*([0] + [4]) = ($9 + [160])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN7betdice5standEyh (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	CALL require_auth($1)
	CALL eosio_assert(($2 <= [2]), [1184])
	*((($6 + [64]) + [32])) = [0]
	*($6 + [80]) = (int_64)-1
	$4 = *($0)
	*($6 + [64]) = $4
	*($6 + [72]) = $4
	*($6 + [88]) = (int_64)0
	$5 = [0]
	$3 = CALL db_lowerbound_i64($4, $4, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $26(($6 + [64]), $3)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [816])
	CALL eosio_assert(*($5 + [8]), [1216])
	*((($6 + [24]) + [32])) = [0]
	*($6 + [32]) = $1
	*($6 + [40]) = (int_64)-1
	*($6 + [48]) = (int_64)0
	*($6 + [24]) = *($0)
	*($6 + [60]) = [0]
	*($6 + [16]) = ($6 + [24])
	*($6 + [8]) = (CASTING uint_64)(uint_32 $2)
	CALL $72(($6 + [104]), ($6 + [16]), ($6 + [8]))
	$5 = *($6 + [108])
	if ( ($5 == 0) ){ goto $label$5 }
	if ( ((int_64)*($6 + [8]) != (int_64)*($5 + [120])) ){ goto $label$5 }
	if ( ($5 == 0) ){ goto $label$4 }
	$0 = [1]
	$2 = ((int_32)*($5 + [104]) ^ (int_32)[1])
	goto $label$2 
	
.LABEL $label$5
	$0 = [0]
	$5 = [0]
	goto $label$3 
	
.LABEL $label$4
	$0 = [0]
	
.LABEL $label$3
	$2 = [0]
	
.LABEL $label$2
	CALL eosio_assert($2, [1264])
	CALL eosio_assert($0, [224])
	CALL $86(*($6 + [16]), $5)
	CALL $43(($6 + [48]))
	$2 = *($6 + [88])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ($6 + [92])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	if ( ((*($0 + [12]) & [1]) == 0) ){ goto $label$11 }
	CALL $102(*(($0 + [20])))
	
.LABEL $label$11
	CALL $102($0)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$9 }
	$5 = *(($6 + [88]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	*($3) = $2
	CALL $102($5)
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [112])
}

void .FUNC _ZN7betdice8initdealEyN5eosio5assetEyyNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_6vectorIhNS6_IhEEEES8_S8_S8_S8_ (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [272])
	*([0] + [4]) = $14
	*($14 + [168]) = $1
	*($14 + [160]) = $3
	*($14 + [152]) = $4
	CALL require_auth(*($0))
	$13 = [0]
	*(($14 + [144])) = [0]
	*($14 + [128]) = (int_64)-1
	*($14 + [136]) = (int_64)0
	$4 = *($0)
	*($14 + [112]) = $4
	*($14 + [120]) = $4
	$12 = [0]
	$11 = CALL db_find_i64($4, $4, (int_64)-6219918174314299392, (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$11) < (int_32)[0]) ){ goto $label$1 }
	$12 = CALL $71(($14 + [112]), $11)
	CALL eosio_assert(((int_32)*($12 + [32]) == (int_32)($14 + [112])), [688])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [816])
	$4 = *($2)
	if ( ((int_64)$4 < (int_64)*($12)) ){ goto $label$2 }
	$13 = ((int_64)$4 <= (int_64)*($12 + [16]))
	
.LABEL $label$2
	CALL eosio_assert($13, [848])
	CALL eosio_assert(((int_32)(*($6 + [4]) - *($6)) == (int_32)[3]), [880])
	*($14 + [111]) = [0]
	$3 = *(($2 + [8]))
	if ( ((int_64)$3 != (int_64)1397703940) ){ goto $label$4 }
	*($14 + [111]) = [0]
	$4 = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$4 = (int_64)0
	if ( ((int_64)$3 != (int_64)353416332804) ){ goto $label$3 }
	*($14 + [111]) = [1]
	$4 = (int_64)1
	
.LABEL $label$3
	*($14 + [80]) = (int_64)-1
	*($14 + [88]) = [0]
	$3 = *($14 + [160])
	*($14 + [64]) = *($0)
	*($14 + [72]) = $3
	*(($14 + [92])) = [0]
	*(($14 + [96])) = [0]
	*($14 + [100]) = [0]
	*($14 + [56]) = ($14 + [64])
	*($14 + [176]) = $4
	CALL $72(($14 + [16]), ($14 + [56]), ($14 + [176]))
	$12 = *($14 + [20])
	if ( ($12 == 0) ){ goto $label$6 }
	if ( ((int_64)*($14 + [176]) != (int_64)*($12 + [120])) ){ goto $label$6 }
	if ( ($12 == 0) ){ goto $label$6 }
	*($14 + [20]) = $2
	*($14 + [32]) = $5
	*($14 + [36]) = $6
	*($14 + [16]) = ($14 + [168])
	*($14 + [24]) = ($14 + [160])
	*($14 + [28]) = ($14 + [152])
	*($14 + [40]) = ($14 + [111])
	CALL eosio_assert([1], [224])
	CALL $74(*($14 + [56]), $12, ($14 + [16]))
	goto $label$5 
	
.LABEL $label$6
	$4 = *($0)
	*($14 + [24]) = $2
	*($14 + [36]) = $5
	*($14 + [40]) = $6
	*($14 + [20]) = ($14 + [168])
	*($14 + [16]) = ($14 + [64])
	*($14 + [28]) = ($14 + [160])
	*($14 + [32]) = ($14 + [152])
	*($14 + [44]) = ($14 + [111])
	*($14 + [248]) = $4
	CALL eosio_assert(((int_64)*($14 + [64]) == (int_64)CALL $fimport$2()), [912])
	*($14 + [180]) = ($14 + [16])
	*($14 + [176]) = ($14 + [64])
	*($14 + [184]) = ($14 + [248])
	$2 = CALL $101([168])
	CALL $59($2)
	*($2 + [152]) = ($14 + [64])
	CALL $73(($14 + [176]), $2)
	*($14 + [216]) = $2
	$4 = *($2)
	*($14 + [176]) = $4
	$6 = *($2 + [156])
	*($14 + [240]) = $6
	$13 = ($14 + [92])
	$12 = *($13)
	if ( ((uint_32)$12 >= (uint_32)*(($14 + [96]))) ){ goto $label$8 }
	*($12 + [8]) = $4
	*($12 + [16]) = $6
	*($14 + [216]) = [0]
	*($12) = $2
	*($13) = ($12 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $61(($14 + [88]), ($14 + [216]), ($14 + [176]), ($14 + [240]))
	
.LABEL $label$7
	$2 = *($14 + [216])
	*($14 + [216]) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((*($2 + [128]) & [1]) == 0) ){ goto $label$9 }
	CALL $102(*(($2 + [136])))
	
.LABEL $label$9
	if ( ((*($2 + [108]) & [1]) == 0) ){ goto $label$10 }
	CALL $102(*(($2 + [116])))
	
.LABEL $label$10
	$12 = *($2 + [88])
	if ( ($12 == 0) ){ goto $label$11 }
	*(($2 + [92])) = $12
	CALL $102($12)
	
.LABEL $label$11
	$12 = *($2 + [76])
	if ( ($12 == 0) ){ goto $label$12 }
	*(($2 + [80])) = $12
	CALL $102($12)
	
.LABEL $label$12
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$13 }
	CALL $102(*(($2 + [72])))
	
.LABEL $label$13
	CALL $102($2)
	
.LABEL $label$5
	*($14 + [32]) = (int_64)-1
	*($14 + [40]) = [0]
	$4 = *($14 + [160])
	*($14 + [16]) = *($0)
	*($14 + [24]) = $4
	*(($14 + [44])) = [0]
	*(($14 + [48])) = [0]
	*($14 + [52]) = [0]
	*($14 + [8]) = ($14 + [16])
	*($14 + [248]) = *($14 + [111])
	CALL $75(($14 + [176]), ($14 + [8]), ($14 + [248]))
	$2 = *($14 + [180])
	if ( ($2 == 0) ){ goto $label$14 }
	if ( ((int_64)*($14 + [248]) != (int_64)*($2 + [32])) ){ goto $label$14 }
	if ( ($2 == 0) ){ goto $label$14 }
	if ( *($2 + [40]) ){ goto $label$15 }
	if ( (((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) - *($2 + [8])) <= [30]) ){ goto $label$15 }
	CALL eosio_assert([0], [976])
	
.LABEL $label$15
	CALL eosio_assert([1], [224])
	$0 = *($14 + [8])
	CALL eosio_assert(((int_32)*($2 + [44]) == (int_32)$0), [272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [320])
	*($2 + [40]) = [1]
	$12 = ($2 + [32])
	*($14 + [232]) = *($12)
	$4 = *($2)
	CALL eosio_assert([1], [384])
	*($14 + [224]) = (($14 + [176]) + [37])
	*($14 + [220]) = ($14 + [176])
	*($14 + [216]) = ($14 + [176])
	*($14 + [240]) = ($14 + [216])
	*($14 + [252]) = ($2 + [8])
	*($14 + [248]) = $2
	*($14 + [256]) = ($2 + [16])
	*($14 + [260]) = $12
	*($14 + [264]) = ($2 + [40])
	CALL $76(($14 + [248]), ($14 + [240]))
	CALL db_update_i64(*($2 + [48]), (int_64)0, ($14 + [176]), [37])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$16 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*($14 + [248]) = *($12)
	if ( (CALL memcmp(($14 + [232]), ($14 + [248]), [8]) == 0) ){ goto $label$14 }
	$12 = *($2 + [52])
	if ( ((int_32)$12 > (int_32)[-1]) ){ goto $label$17 }
	$12 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3604158283595644928, ($14 + [240]), $4)
	*(($2 + [52])) = $12
	
.LABEL $label$17
	CALL db_idx64_update($12, (int_64)0, ($14 + [248]))
	
.LABEL $label$14
	$12 = *($14 + [40])
	if ( ($12 == 0) ){ goto $label$18 }
	$6 = ($14 + [44])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$12) ){ goto $label$20 }
	
.LOOP $label$21:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$22 }
	CALL $102($0)
	
.LABEL $label$22
	if ( ((int_32)$12 != (int_32)$2) ){ goto $label$21 }
	$2 = *(($14 + [40]))
	goto $label$19 
	
.LABEL $label$20
	$2 = $12
	
.LABEL $label$19
	*($6) = $12
	CALL $102($2)
	
.LABEL $label$18
	CALL $43(($14 + [88]))
	$12 = *($14 + [136])
	if ( ($12 == 0) ){ goto $label$23 }
	$6 = ($14 + [140])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$12) ){ goto $label$25 }
	
.LOOP $label$26:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$27 }
	CALL $102($0)
	
.LABEL $label$27
	if ( ((int_32)$12 != (int_32)$2) ){ goto $label$26 }
	$2 = *(($14 + [136]))
	goto $label$24 
	
.LABEL $label$25
	$2 = $12
	
.LABEL $label$24
	*($6) = $12
	CALL $102($2)
	
.LABEL $label$23
	*([0] + [4]) = ($14 + [272])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	*(($5 = $4) + [124]) = $0
	*($5 + [112]) = *($1)
	*($5 + [116]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($4 = ($5 + [16]))) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	CALL eosio_assert([1], [496])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [560])
	*(($5 + [48])) = (int_64)0
	*(($5 + [56])) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [64]) = [0]
	*(($5 + [68])) = [0]
	*(($5 + [72])) = [0]
	*($5 + [76]) = [0]
	*(($5 + [80])) = [0]
	*(($5 + [84])) = [0]
	*($5 + [88]) = [0]
	*(($5 + [92])) = [0]
	*(($5 + [96])) = [0]
	*($5 + [100]) = [0]
	*(($5 + [104])) = [0]
	*(($5 + [108])) = [0]
	*($5 + [132]) = $0
	*($5 + [128]) = $0
	*($5 + [136]) = ($0 + $2)
	*($5 + [144]) = ($5 + [128])
	*($5 + [152]) = $5
	CALL $68(($5 + [152]), ($5 + [144]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [132]) = ($5 + [112])
	*($5 + [128]) = ($5 + [124])
	CALL $69(($5 + [128]), $5)
	if ( ((*($5 + [100]) & [1]) == 0) ){ goto $label$10 }
	CALL $102(*(($5 + [108])))
	
.LABEL $label$10
	if ( ((*($5 + [88]) & [1]) == 0) ){ goto $label$11 }
	CALL $102(*(($5 + [96])))
	
.LABEL $label$11
	if ( ((*($5 + [76]) & [1]) == 0) ){ goto $label$12 }
	CALL $102(*(($5 + [84])))
	
.LABEL $label$12
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$13 }
	CALL $102(*(($5 + [72])))
	
.LABEL $label$13
	$1 = *(($5 + [52]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($5 + [56])) = $1
	CALL $102($1)
	
.LABEL $label$14
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$15 }
	CALL $102(*(($5 + [48])))
	
.LABEL $label$15
	*([0] + [4]) = ($5 + [160])
	return [1]
}

void .FUNC _ZN7betdice4dealEyyhhNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	*($6 + [64]) = $1
	*($6 + [63]) = $4
	CALL require_auth(*($0))
	*(($6 + [48])) = [0]
	*($6 + [24]) = $2
	*($6 + [32]) = (int_64)-1
	*($6 + [40]) = (int_64)0
	*($6 + [16]) = *($0)
	*($6 + [52]) = [0]
	*($6 + [8]) = ($6 + [16])
	CALL $37(($6 + [72]), ($6 + [8]), ($6 + [64]))
	$0 = [0]
	$4 = *($6 + [76])
	if ( ($4 == 0) ){ goto $label$1 }
	$0 = ( $4 ? [0] : ((int_64)*($6 + [64]) == (int_64)*($4 + [8])) )
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [592])
	CALL eosio_assert(((int_32)*($0 + [101]) ^ (int_32)[1]), [752])
	CALL eosio_assert(((int_32)CALL $65($6, ($0 + [76])) < (int_32)[21]), [768])
	*($6 + [72]) = ($6 + [63])
	CALL eosio_assert($4, [224])
	CALL $66(*($6 + [8]), $0, ($6 + [72]))
	CALL $43(($6 + [40]))
	*([0] + [4]) = ($6 + [80])
}

void .FUNC _ZN7betdice8activateEb (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	*($7 + [59]) = $1
	CALL require_auth(*($0))
	*(($3 = ($7 + [48]))) = [0]
	*($7 + [32]) = (int_64)-1
	$2 = *($0)
	*($7 + [16]) = $2
	*($7 + [24]) = $2
	*($7 + [40]) = (int_64)0
	$1 = CALL db_lowerbound_i64($2, $2, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$3 }
	$0 = CALL $26(($7 + [16]), $1)
	*($7 + [64]) = ($7 + [59])
	CALL eosio_assert([1], [224])
	CALL $88(($7 + [16]), $0, ($7 + [64]))
	$3 = *($7 + [40])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0)
	*($7 + [8]) = ($7 + [59])
	*($7 + [88]) = $4
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$2()), [912])
	*($7 + [68]) = ($7 + [8])
	*($7 + [64]) = ($7 + [16])
	*($7 + [72]) = ($7 + [88])
	*(($0 = CALL $101([40])) + [20]) = [0]
	*($0 + [12 align=4]) = (int_64)0
	*($0 + [24]) = ($7 + [16])
	CALL $87(($7 + [64]), $0)
	*($7 + [80]) = $0
	$2 = *($0)
	*($7 + [64]) = $2
	$6 = *($0 + [28])
	*($7 + [60]) = $6
	$5 = ($7 + [44])
	$1 = *($5)
	if ( ((uint_32)$1 >= (uint_32)*($3)) ){ goto $label$5 }
	*($1 + [8]) = $2
	*($1 + [16]) = $6
	*($7 + [80]) = [0]
	*($1) = $0
	*($5) = ($1 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $29(($7 + [40]), ($7 + [80]), ($7 + [64]), ($7 + [60]))
	
.LABEL $label$4
	$0 = *($7 + [80])
	*($7 + [80]) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	if ( ((*($0 + [12]) & [1]) == 0) ){ goto $label$7 }
	CALL $102(*(($0 + [20])))
	
.LABEL $label$7
	CALL $102($0)
	
.LABEL $label$6
	$3 = *($7 + [40])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($7 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$12 }
	CALL $102(*(($1 + [20])))
	
.LABEL $label$12
	CALL $102($1)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($7 + [40]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $3
	
.LABEL $label$8
	*($6) = $3
	CALL $102($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [96])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [176])
	CALL memcpy(($5 + [15]), $3, [1])
	$6 = *($5 + [15])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 ((int_32)($6 & [255]) != (int_32)[0])), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC _ZN7betdice3hitEyh (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	CALL require_auth($1)
	CALL eosio_assert(($2 <= [2]), [1184])
	*((($6 + [64]) + [32])) = [0]
	*($6 + [80]) = (int_64)-1
	$4 = *($0)
	*($6 + [64]) = $4
	*($6 + [72]) = $4
	*($6 + [88]) = (int_64)0
	$5 = [0]
	$3 = CALL db_lowerbound_i64($4, $4, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $26(($6 + [64]), $3)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [816])
	CALL eosio_assert(*($5 + [8]), [1216])
	*((($6 + [24]) + [32])) = [0]
	*($6 + [32]) = $1
	*($6 + [40]) = (int_64)-1
	*($6 + [48]) = (int_64)0
	*($6 + [24]) = *($0)
	*($6 + [60]) = [0]
	*($6 + [16]) = ($6 + [24])
	*($6 + [8]) = (CASTING uint_64)(uint_32 $2)
	CALL $72(($6 + [104]), ($6 + [16]), ($6 + [8]))
	$5 = *($6 + [108])
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((int_64)*($6 + [8]) != (int_64)*($5 + [120])) ){ goto $label$3 }
	if ( ($5 == 0) ){ goto $label$3 }
	$0 = ((int_32)*($5 + [104]) ^ (int_32)[1])
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	$0 = [0]
	
.LABEL $label$2
	CALL eosio_assert($0, [1264])
	CALL eosio_assert(((int_32)CALL $65($5, ($5 + [76])) < (int_32)[21]), [768])
	CALL eosio_assert(((int_32)*($5 + [101]) ^ (int_32)[1]), [1296])
	CALL $43(($6 + [48]))
	$2 = *($6 + [88])
	if ( ($2 == 0) ){ goto $label$4 }
	$3 = ($6 + [92])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	if ( ((*($0 + [12]) & [1]) == 0) ){ goto $label$9 }
	CALL $102(*(($0 + [20])))
	
.LABEL $label$9
	CALL $102($0)
	
.LABEL $label$8
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$5 = *(($6 + [88]))
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($3) = $2
	CALL $102($5)
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [112])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$4 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [176])
	CALL memcpy($6, $4, [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [176])
	$7 = ($6 + [8])
	CALL memcpy($7, ($4 + [8]), [1])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($4)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($7)
	$3 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 ($4 & [255])), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-3604158283595644928, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*(($2 + [44])) == (int_32)$4), [688])
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$8 = CALL db_find_i64(*($4), *($4 + [8]), (int_64)-3604158283595644928, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $77($4, $8)
	CALL eosio_assert(((int_32)*($2 + [44]) == (int_32)$4), [688])
	
.LABEL $label$4
	*($2 + [52]) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [28])) = [0]
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [16]) = [0]
	*($2 + [20 align=4]) = (int_64)0
	*($2 + [52]) = $1
	*($2 + [48]) = $1
	*($2 + [56]) = ($1 + $0)
	*($2 + [64]) = ($2 + [48])
	*($2 + [72]) = $2
	CALL $63(($2 + [72]), ($2 + [64]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $64(($2 + [48]), $2)
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$5 }
	CALL $102(*(($2 + [28])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [80])
	return [1]
}

void .FUNC _ZN7betdice7endgameEyyNSt3__16vectorIhNS0_9allocatorIhEEEEhN5eosio5assetES6_NS0_12basic_stringIcNS0_11char_traitsIcEENS2_IcEEEESB_SB_SB_ (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [272])
	*([0] + [4]) = $16
	*($16 + [232]) = $1
	*($16 + [231]) = $4
	CALL require_auth(*($0))
	*(($16 + [216])) = [0]
	*($16 + [192]) = $2
	*($16 + [200]) = (int_64)-1
	*($16 + [208]) = (int_64)0
	*($16 + [184]) = *($0)
	*($16 + [220]) = [0]
	*($16 + [176]) = ($16 + [184])
	CALL $37(($16 + [88]), ($16 + [176]), ($16 + [232]))
	$4 = [0]
	$11 = *($16 + [92])
	if ( ($11 == 0) ){ goto $label$1 }
	$4 = ( $11 ? [0] : ((int_64)*($16 + [232]) == (int_64)*($11 + [8])) )
	
.LABEL $label$1
	$11 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($11, [592])
	CALL eosio_assert(((int_32)*($4 + [104]) ^ (int_32)[1]), [624])
	*($16 + [175]) = (*($3 + [4]) - *($3))
	*($16 + [174]) = (*($16 + [231]) + [254])
	*($16 + [88]) = $6
	*($16 + [96]) = $3
	*($16 + [108]) = $9
	*($16 + [112]) = $10
	*($16 + [92]) = ($16 + [231])
	*($16 + [100]) = ($16 + [174])
	*($16 + [104]) = ($16 + [175])
	CALL eosio_assert($11, [224])
	CALL $38(*($16 + [176]), $4, ($16 + [88]))
	if ( ((int_64)$2 == (int_64)7606867955589687040) ){ goto $label$17 }
	if ( ((int_64)$2 != (int_64)7606873086263666432) ){ goto $label$4 }
	$1 = (int_64)0
	$12 = (int_64)59
	$4 = [112]
	$13 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$23 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$3 = ($3 + [165])
	goto $label$21 
	
.LABEL $label$23
	$14 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$19
	$4 = ($4 + [1])
	$12 = ((int_64)$12 + (int_64)-5)
	$13 = ((int_64)$14 | (int_64)$13)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$18 }
	*($16 + [88]) = $13
	CALL $44(($16 + [152]), ($16 + [88]), *($0), (int_64)1397703940)
	$1 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($16 + [152])) * (float_64)(float_64)0.8))
	*($16 + [152]) = $1
	if ( ((int_64)$1 <= (int_64)0) ){ goto $label$4 }
	$1 = CALL current_time()
	*(($16 + [116])) = [0]
	*(($16 + [120])) = [0]
	*($16 + [100]) = [0]
	*($16 + [104]) = [0]
	*($16 + [108]) = [0]
	*($16 + [112]) = [0]
	*($16 + [88]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	*($16 + [124]) = [0]
	*(($16 + [128])) = [0]
	*(($16 + [132])) = [0]
	*($16 + [136]) = [0]
	*(($16 + [140])) = [0]
	*(($16 + [144])) = [0]
	*(($16 + [24])) = [0]
	*($16 + [16]) = (int_64)0
	$4 = CALL strlen([656])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$16 }
	*($16 + [16]) = ($4 << [1])
	$3 = (($16 + [16]) | [1])
	if ( $4 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$1 = (int_64)0
	$12 = (int_64)59
	$4 = [112]
	$13 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$29 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$3 = ($3 + [165])
	goto $label$27 
	
.LABEL $label$29
	$14 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$25
	$4 = ($4 + [1])
	$12 = ((int_64)$12 + (int_64)-5)
	$13 = ((int_64)$14 | (int_64)$13)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$24 }
	*($16 + [88]) = $13
	CALL $44(($16 + [152]), ($16 + [88]), *($0), (int_64)1397703940)
	$1 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($16 + [152])) * (float_64)(float_64)0.9))
	*($16 + [152]) = $1
	if ( ((int_64)$1 <= (int_64)0) ){ goto $label$4 }
	$1 = CALL current_time()
	*(($16 + [116])) = [0]
	*(($16 + [120])) = [0]
	*($16 + [100]) = [0]
	*($16 + [104]) = [0]
	*($16 + [108]) = [0]
	*($16 + [112]) = [0]
	*($16 + [88]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	*($16 + [124]) = [0]
	*(($16 + [128])) = [0]
	*(($16 + [132])) = [0]
	*($16 + [136]) = [0]
	*(($16 + [140])) = [0]
	*(($16 + [144])) = [0]
	*(($16 + [24])) = [0]
	*($16 + [16]) = (int_64)0
	$4 = CALL strlen([656])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$13 }
	*($16 + [16]) = ($4 << [1])
	$3 = (($16 + [16]) | [1])
	if ( $4 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$11 = (($4 + [16]) & [-16])
	$3 = CALL $101($11)
	*($16 + [16]) = ($11 | [1])
	*($16 + [24]) = $3
	*($16 + [20]) = $4
	
.LABEL $label$15
	CALL memcpy($3, [656], $4)
	
.LABEL $label$14
	*(($3 + $4)) = [0]
	*(($16 + [60])) = *($16 + [156])
	*($16 + [48]) = (int_64)7606873086263666432
	*(($16 + [68])) = *(($16 + [164]))
	*(($16 + [64])) = *((($16 + [152]) + [8]))
	$15 = *($0)
	*($16 + [40]) = $15
	*($16 + [56]) = *($16 + [152])
	*(($16 + [80])) = *((($16 + [16]) + [8]))
	*($16 + [72]) = *($16 + [16])
	$11 = ($16 + [124])
	$1 = (int_64)0
	$12 = (int_64)59
	$4 = [672]
	$13 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$35 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$3 = ($3 + [165])
	goto $label$33 
	
.LABEL $label$35
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$31
	$4 = ($4 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$30 }
	*($16 + [24]) = $13
	*($16 + [16]) = $15
	$1 = (int_64)0
	$12 = (int_64)59
	$4 = [112]
	$13 = (int_64)0
	
.LOOP $label$36:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$41 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$3 = ($3 + [165])
	goto $label$39 
	
.LABEL $label$41
	$14 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$40
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$38
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$37
	$4 = ($4 + [1])
	$12 = ((int_64)$12 + (int_64)-5)
	$13 = ((int_64)$14 | (int_64)$13)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$36 }
	*($16 + [8]) = $13
	$1 = (int_64)0
	$12 = (int_64)59
	$4 = [128]
	$15 = (int_64)0
	
.LOOP $label$42:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$47 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$3 = ($3 + [165])
	goto $label$45 
	
.LABEL $label$47
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$44
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$43
	$4 = ($4 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$42 }
	*($16) = $15
	$3 = *(($16 + [128]))
	if ( ((uint_32)$3 >= (uint_32)*(($16 + [132]))) ){ goto $label$48 }
	*($3 + [8]) = $15
	*($3) = $13
	*($3 + [16 align=4]) = (int_64)0
	*(($11 = ($3 + [24]))) = [0]
	$4 = CALL $101([16])
	*($3 + [16]) = $4
	$6 = ($4 + [16])
	*($11) = $6
	*(($4 + [8])) = *((($16 + [16]) + [8]))
	*($4) = *($16 + [16])
	*(($3 + [20])) = $6
	*($3 + [28]) = [0]
	*(($3 + [32])) = [0]
	*(($3 + [36])) = [0]
	$4 = *($16 + [72])
	$11 = ( *((($16 + [40]) + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($11 + [32])
	$1 = (CASTING uint_64)(uint_32 $11)
	$11 = ($3 + [28])
	
.LOOP $label$49:
	$4 = ($4 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$49 }
	if ( ($4 == 0) ){ goto $label$10 }
	CALL $25($11, $4)
	$11 = *(($3 + [32]))
	$4 = *(($3 + [28]))
	goto $label$9 
	
.LABEL $label$48
	CALL $40($11, ($16 + [16]), ($16 + [8]), $16, ($16 + [40]))
	goto $label$8 
	
.LABEL $label$13
	$11 = (($4 + [16]) & [-16])
	$3 = CALL $101($11)
	*($16 + [16]) = ($11 | [1])
	*($16 + [24]) = $3
	*($16 + [20]) = $4
	
.LABEL $label$12
	CALL memcpy($3, [656], $4)
	
.LABEL $label$11
	*(($3 + $4)) = [0]
	*(($16 + [60])) = *($16 + [156])
	*($16 + [48]) = $2
	*(($16 + [68])) = *(($16 + [164]))
	*(($16 + [64])) = *((($16 + [152]) + [8]))
	$15 = *($0)
	*($16 + [40]) = $15
	*($16 + [56]) = *($16 + [152])
	*(($16 + [80])) = *((($16 + [16]) + [8]))
	*($16 + [72]) = *($16 + [16])
	$11 = ($16 + [124])
	$1 = (int_64)0
	$12 = (int_64)59
	$4 = [672]
	$13 = (int_64)0
	
.LOOP $label$50:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$55 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$3 = ($3 + [165])
	goto $label$53 
	
.LABEL $label$55
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$54
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$52
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$51
	$4 = ($4 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$50 }
	*($16 + [24]) = $13
	*($16 + [16]) = $15
	$1 = (int_64)0
	$12 = (int_64)59
	$4 = [112]
	$13 = (int_64)0
	
.LOOP $label$56:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$61 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$60 }
	$3 = ($3 + [165])
	goto $label$59 
	
.LABEL $label$61
	$14 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$60
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$59
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$58
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$57
	$4 = ($4 + [1])
	$12 = ((int_64)$12 + (int_64)-5)
	$13 = ((int_64)$14 | (int_64)$13)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$56 }
	*($16 + [8]) = $13
	$1 = (int_64)0
	$12 = (int_64)59
	$4 = [128]
	$15 = (int_64)0
	
.LOOP $label$62:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$67 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$3 = ($3 + [165])
	goto $label$65 
	
.LABEL $label$67
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$66
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$65
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$64
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$63
	$4 = ($4 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$62 }
	*($16) = $15
	$3 = *(($16 + [128]))
	if ( ((uint_32)$3 >= (uint_32)*(($16 + [132]))) ){ goto $label$68 }
	*($3 + [8]) = $15
	*($3) = $13
	*($3 + [16 align=4]) = (int_64)0
	*(($11 = ($3 + [24]))) = [0]
	$4 = CALL $101([16])
	*($3 + [16]) = $4
	$6 = ($4 + [16])
	*($11) = $6
	*(($4 + [8])) = *((($16 + [16]) + [8]))
	*($4) = *($16 + [16])
	*(($3 + [20])) = $6
	*($3 + [28]) = [0]
	*(($3 + [32])) = [0]
	*(($3 + [36])) = [0]
	$4 = *($16 + [72])
	$11 = ( *((($16 + [40]) + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($11 + [32])
	$1 = (CASTING uint_64)(uint_32 $11)
	$11 = ($3 + [28])
	
.LOOP $label$69:
	$4 = ($4 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$69 }
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $25($11, $4)
	$11 = *(($3 + [32]))
	$4 = *(($3 + [28]))
	goto $label$6 
	
.LABEL $label$68
	CALL $40($11, ($16 + [16]), ($16 + [8]), $16, ($16 + [40]))
	goto $label$5 
	
.LABEL $label$10
	$11 = [0]
	$4 = [0]
	
.LABEL $label$9
	*($16 + [260]) = $4
	*($16 + [256]) = $4
	*($16 + [264]) = $11
	*($16 + [240]) = ($16 + [256])
	*($16 + [248]) = ($16 + [40])
	CALL $39(($16 + [248]), ($16 + [240]))
	*(($4 = (($16 + [88]) + [40]))) = (*($4) + [40])
	
.LABEL $label$8
	*(($16 + [108])) = [172800]
	*($16 + [24]) = (int_64)0
	*($16 + [16]) = (int_64)7606873086263666432
	$1 = *($0)
	CALL $41(($16 + [256]), ($16 + [88]))
	$4 = *($16 + [256])
	CALL send_deferred(($16 + [16]), $1, $4, (*($16 + [260]) - $4), [0])
	$4 = *($16 + [256])
	if ( ($4 == 0) ){ goto $label$70 }
	*($16 + [260]) = $4
	CALL $102($4)
	
.LABEL $label$70
	if ( ((*(($16 + [72])) & [1]) == 0) ){ goto $label$71 }
	CALL $102(*(($16 + [80])))
	
.LABEL $label$71
	CALL $42(($16 + [88]))
	goto $label$4 
	
.LABEL $label$7
	$11 = [0]
	$4 = [0]
	
.LABEL $label$6
	*($16 + [260]) = $4
	*($16 + [256]) = $4
	*($16 + [264]) = $11
	*($16 + [240]) = ($16 + [256])
	*($16 + [248]) = ($16 + [40])
	CALL $39(($16 + [248]), ($16 + [240]))
	*(($4 = (($16 + [88]) + [40]))) = (*($4) + [40])
	
.LABEL $label$5
	*(($16 + [108])) = [5]
	*($16 + [24]) = (int_64)0
	*($16 + [16]) = $2
	$1 = *($0)
	CALL $41(($16 + [256]), ($16 + [88]))
	$4 = *($16 + [256])
	CALL send_deferred(($16 + [16]), $1, $4, (*($16 + [260]) - $4), [0])
	$4 = *($16 + [256])
	if ( ($4 == 0) ){ goto $label$72 }
	*($16 + [260]) = $4
	CALL $102($4)
	
.LABEL $label$72
	if ( ((*(($16 + [72])) & [1]) == 0) ){ goto $label$73 }
	CALL $102(*(($16 + [80])))
	
.LABEL $label$73
	CALL $42(($16 + [88]))
	
.LABEL $label$4
	CALL $43(($16 + [208]))
	*([0] + [4]) = ($16 + [272])
	return (unreachable)
	
.LABEL $label$3
	CALL $103(($16 + [16]))
	
.LABEL $label$2
	CALL $103(($16 + [16]))
	(unreachable)
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [464])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $101([168])
	CALL $59($6)
	*($6 + [152]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [32])
	*($8 + [60]) = ($6 + [48])
	*($8 + [64]) = ($6 + [64])
	*($8 + [68]) = ($6 + [76])
	*($8 + [72]) = ($6 + [88])
	*($8 + [76]) = ($6 + [100])
	*($8 + [80]) = ($6 + [101])
	*($8 + [84]) = ($6 + [102])
	*($8 + [88]) = ($6 + [103])
	*($8 + [92]) = ($6 + [104])
	*($8 + [96]) = ($6 + [108])
	*($8 + [100]) = ($6 + [120])
	*($8 + [104]) = ($6 + [128])
	*($8 + [108]) = ($6 + [144])
	CALL $60(($8 + [40]), ($8 + [32]))
	*($6 + [160]) = [-1]
	*($6 + [156]) = $1
	*($6 + [164]) = [-1]
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [156])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $61(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [128]) & [1]) == 0) ){ goto $label$10 }
	CALL $102(*(($4 + [136])))
	
.LABEL $label$10
	if ( ((*($4 + [108]) & [1]) == 0) ){ goto $label$11 }
	CALL $102(*(($4 + [116])))
	
.LABEL $label$11
	$7 = *($4 + [88])
	if ( ($7 == 0) ){ goto $label$12 }
	*(($4 + [92])) = $7
	CALL $102($7)
	
.LABEL $label$12
	$7 = *($4 + [76])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($4 + [80])) = $7
	CALL $102($7)
	
.LABEL $label$13
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$14 }
	CALL $102(*(($4 + [72])))
	
.LABEL $label$14
	CALL $102($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [112])
	return $6
}

int_32 .FUNC $59 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [32]) = (int_64)0
	*(($2 = ($0 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [560])
	*(($2 = ($0 + [56]))) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [560])
	*($0 + [64 align=4]) = (int_64)0
	*(($0 + [72])) = (int_64)0
	*(($0 + [80])) = (int_64)0
	*($0 + [88 align=4]) = (int_64)0
	*(($0 + [96])) = [0]
	*($0 + [108]) = [0]
	*(($0 + [112])) = [0]
	*(($0 + [116])) = [0]
	*($0 + [128]) = [0]
	*(($0 + [132])) = [0]
	*(($0 + [136])) = [0]
	return $0
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [448])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [448])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [448])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $52(CALL $53($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [448])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [448])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $52($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [448])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [448])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [448])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [448])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [448])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ($5 - $4)
	$7 = ($3 + [1])
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$2 = (*($0 + [8]) - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $101($6)
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $109($0)
	
.LABEL $label$1
	*(($3 = ($7 + $3))) = *($1)
	$5 = ($5 - $4)
	$1 = ($3 - $5)
	$6 = ($7 + $6)
	$7 = ($3 + [1])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $102($4)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [160])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = ($3 - $4)
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $36($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + $5)
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	$2 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((int_32)*($2) != (int_32)$7), [176])
	CALL memcpy($4, *($5), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	$4 = ($4 + [1])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $28(*($1), *($0 + [24]))
	CALL $57(*($1), *($0 + [28]))
	CALL $57(*($1), *($0 + [32]))
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [448])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	*($5 + [15]) = *(*($0 + [40]))
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [448])
	CALL memcpy(*($2 + [4]), ($5 + [15]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	*($5 + [14]) = *(*($0 + [44]))
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [448])
	CALL memcpy(*($2 + [4]), ($5 + [14]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	*($5 + [13]) = *(*($0 + [48]))
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [448])
	CALL memcpy(*($2 + [4]), ($5 + [13]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	*($5 + [12]) = *(*($0 + [52]))
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [448])
	CALL memcpy(*($2 + [4]), ($5 + [12]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	CALL $28(*($1), *($0 + [56]))
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $28(*($1), *($0 + [64]))
	$2 = *($0 + [68])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [448])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [8])
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [448])
	CALL memcpy(*($2), $5, [1])
	$7 = (*($2) + [1])
	*($2) = $7
	$5 = ($5 + [1])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy(($3 + [32]), *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [176])
	CALL memcpy(($3 + [40]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [48]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [56]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $23(*($1), ($0 + [64]))
	CALL $23(*($1), ($0 + [76]))
	CALL $23(*($1), ($0 + [88]))
	CALL $23(*($1), ($0 + [100]))
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $101($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $101($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $101(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $109($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$11 }
	CALL $102(*(($1 + [20])))
	
.LABEL $label$11
	CALL $102($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $102($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [448])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [448])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	*(($7 = *($1))) = (*($7) + [8])
	*(($7 = *($1))) = (*($7) + [8])
	*(($7 = *($1))) = (*($7) + [8])
	*(($7 = *($1))) = (*($7) + [8])
	*(($7 = *($1))) = (*($7) + [16])
	*(($7 = *($1))) = (*($7) + [16])
	$7 = *($2)
	$2 = *($0 + [24])
	$6 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ))
	$3 = *($1)
	$7 = *($3)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	*($3) = $7
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $7)
	
.LABEL $label$2
	$3 = *($7)
	$7 = *($0 + [28])
	$2 = *($7 + [4])
	$5 = ($2 - $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	$4 = *($1)
	$7 = *($4)
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	*($4) = ( $7 ? ($5 + $7) : ((int_32)$3 == (int_32)$2) )
	$3 = *($7)
	$7 = *($0 + [32])
	$2 = *($7 + [4])
	$5 = ($2 - $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	$4 = *($1)
	$7 = *($4)
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$4 }
	*($4) = ( $7 ? ($5 + $7) : ((int_32)$3 == (int_32)$2) )
	*(($7 = *($1))) = (*($7) + [1])
	*(($7 = *($1))) = (*($7) + [1])
	*(($7 = *($1))) = (*($7) + [1])
	*(($7 = *($1))) = (*($7) + [1])
	*(($7 = *($1))) = (*($7) + [1])
	$7 = *($2)
	$2 = *($0 + [56])
	$6 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ))
	$3 = *($1)
	$7 = *($3)
	
.LOOP $label$5:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$5 }
	*($3) = $7
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$6 }
	*($3) = ($2 + $7)
	
.LABEL $label$6
	*(($7 = *($1))) = (*($7) + [8])
	$7 = *($0)
	$0 = *($0 + [64])
	$6 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ))
	$2 = *($1)
	$7 = *($2)
	
.LOOP $label$7:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$7 }
	*($2) = $7
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$8 }
	*($2) = ($0 + $7)
	
.LABEL $label$8
	*(($7 = *($1))) = (*($7) + [8])
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $105($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $101(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $102($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC _ZN7betdice12setpublickeyENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	$3 = *($0)
	*($5 + [8]) = $3
	*($5 + [16]) = $3
	*($5 + [32]) = (int_64)0
	$0 = [0]
	$2 = CALL db_lowerbound_i64($3, $3, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $26(($5 + [8]), $2)
	
.LABEL $label$1
	$2 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($2, [192])
	*($5) = $1
	CALL eosio_assert($2, [224])
	CALL $27(($5 + [8]), $0, $5)
	$2 = *($5 + [32])
	if ( ($2 == 0) ){ goto $label$2 }
	$4 = ($5 + [36])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$7 }
	CALL $102(*(($1 + [20])))
	
.LABEL $label$7
	CALL $102($1)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($5 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $2
	
.LABEL $label$3
	*($4) = $2
	CALL $102($0)
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [144])
	*([0] + [4]) = $2
	*(($3 = $2) + [140]) = $0
	*($3 + [128]) = *($1)
	*($3 + [132]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $30(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [12]) = ($3 + [128])
	*($3 + [8]) = ($3 + [140])
	CALL $31(($3 + [8]), ($3 + [16]))
	if ( ((*($3 + [116]) & [1]) == 0) ){ goto $label$6 }
	CALL $102(*(($3 + [124])))
	
.LABEL $label$6
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$7 }
	CALL $102(*(($3 + [112])))
	
.LABEL $label$7
	if ( ((*($3 + [92]) & [1]) == 0) ){ goto $label$8 }
	CALL $102(*(($3 + [100])))
	
.LABEL $label$8
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$9 }
	CALL $102(*(($3 + [88])))
	
.LABEL $label$9
	$1 = *($3 + [32])
	if ( ($1 == 0) ){ goto $label$10 }
	*(($3 + [36])) = $1
	CALL $102($1)
	
.LABEL $label$10
	*([0] + [4]) = ($3 + [144])
	return [1]
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $24($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $106($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $101($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $106($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $102($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $103($7)
	return (unreachable)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $23(($5 + [32]), $5)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	CALL $110(($5 + [16]), $5)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL $110(($5 + [32]), ($5 + [16]))
	CALL void $1((int_32 ($5 + [32])), (int_32 $4))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $102(*($5 + [40]))
	
.LABEL $label$6
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $102(*($5 + [24]))
	
.LABEL $label$7
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $102(*(($5 + [8])))
	
.LABEL $label$8
	*([0] + [4]) = ($5 + [48])
	return [1]
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $101($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $109($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $102($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [160])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $25($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [176])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [320])
	$3 = *($1)
	$4 = ($1 + [12])
	CALL $104($4, *($2))
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [384])
	$2 = *($1 + [12])
	$5 = ( *(($1 + [16])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($5 + [9])
	$7 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($8 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	*($9) = $8
	$5 = ($8 + $2)
	*($9 + [8]) = $5
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [448])
	CALL memcpy($8, $1, [8])
	*($9 + [15]) = *($1 + [8])
	$6 = ($8 + [8])
	CALL eosio_assert(((int_32)($5 - $6) > (int_32)[0]), [448])
	CALL memcpy($6, ($9 + [15]), [1])
	*($9 + [4]) = ($8 + [9])
	CALL $28($9, $4)
	CALL db_update_i64(*($1 + [28]), (int_64)0, $8, $2)
	if ( ($2 <= [513]) ){ goto $label$4 }
	CALL free($8)
	
.LABEL $label$4
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [464])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $101([40])) + [20]) = [0]
	*($6 + [12 align=4]) = (int_64)0
	*($6 + [24]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [176])
	CALL memcpy($6, $4, [8])
	$3 = ($4 + [8])
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [176])
	CALL memcpy(($8 + [16]), $3, [1])
	*($6 + [8]) = ((int_32)*($8 + [16]) != (int_32)[0])
	*($8 + [36]) = ($4 + [9])
	CALL $23(($8 + [32]), ($6 + [12]))
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $29(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [12]) & [1]) == 0) ){ goto $label$10 }
	CALL $102(*(($4 + [20])))
	
.LABEL $label$10
	CALL $102($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $109 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [128])
	*([0] + [4]) = $9
	*((($9 + [112]) + [12])) = *(($1 + [20]))
	*(($8 = (($9 + [112]) + [8]))) = *(($1 + [16]))
	*($9 + [112]) = *($1 + [8])
	*($9 + [116]) = *(($1 + [12]))
	$2 = *($1)
	$4 = *($1 + [32])
	$3 = *($1 + [24])
	CALL $110(($9 + [96]), ($1 + [40]))
	*($9 + [88]) = [0]
	*($9 + [80]) = (int_64)0
	$5 = (*(($1 + [56])) - *($1 + [52]))
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$1 }
	$6 = CALL $101($5)
	*(($9 + [88])) = ($6 + $5)
	*($9 + [80]) = $6
	*($9 + [84]) = $6
	$7 = *(($1 + [52]))
	$5 = (*(($1 + [56])) - $7)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($6, $7, $5)
	*($9 + [84]) = (*($9 + [84]) + $5)
	
.LABEL $label$2
	CALL $110(($9 + [64]), ($1 + [64]))
	CALL $110(($9 + [48]), ($1 + [76]))
	CALL $110(($9 + [32]), ($1 + [88]))
	CALL $110(($9 + [16]), ($1 + [100]))
	*(($9 + [8])) = *($8)
	*($9) = *($9 + [112])
	CALL $70($0, $2, $9, $3, $4, ($9 + [96]), ($9 + [80]), ($9 + [64]), ($9 + [48]), ($9 + [32]), ($9 + [16]))
	if ( ((*($9 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $102(*($9 + [24]))
	
.LABEL $label$3
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $102(*($9 + [40]))
	
.LABEL $label$4
	if ( ((*($9 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $102(*($9 + [56]))
	
.LABEL $label$5
	if ( ((*($9 + [64]) & [1]) == 0) ){ goto $label$6 }
	CALL $102(*($9 + [72]))
	
.LABEL $label$6
	$1 = *($9 + [80])
	if ( ($1 == 0) ){ goto $label$7 }
	*($9 + [84]) = $1
	CALL $102($1)
	
.LABEL $label$7
	if ( ((*($9 + [96]) & [1]) == 0) ){ goto $label$8 }
	CALL $102(*($9 + [104]))
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [128])
	return (unreachable)
	
.LABEL $label$1
	CALL $109(($9 + [80]))
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [176])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [176])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [176])
	CALL memcpy(($3 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $23(*($1), ($3 + [40]))
	CALL $34(*($1), ($3 + [52]))
	CALL $23(*($1), ($3 + [64]))
	CALL $23(*($1), ($3 + [76]))
	CALL $23(*($1), ($3 + [88]))
	CALL $23(*($1), ($3 + [100]))
}

int_32 .FUNC $108 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC _ZN7betdice12getpalyernumERKNSt3__16vectorIhNS0_9allocatorIhEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$1 = *($1)
	$6 = (*($1 + [4]) - $1)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	$3 = [0]
	$2 = [0]
	
.LOOP $label$7:
	$5 = ((uint_32)*($1) % (uint_32)[13])
	if ( ($5 == 0) ){ goto $label$10 }
	$5 = ($5 + [1])
	if ( ((uint_32)($5 & [255]) > (uint_32)[10]) ){ goto $label$9 }
	$2 = ($5 + $2)
	goto $label$8 
	
.LABEL $label$10
	$3 = ($3 + [1])
	goto $label$8 
	
.LABEL $label$9
	$2 = ($2 + [10])
	
.LABEL $label$8
	$1 = ($1 + [1])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$7 }
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$5 }
	*($9 + [24]) = [0]
	*($9 + [16]) = (int_64)0
	$4 = ($9 + [24])
	$6 = [1]
	$5 = [0]
	$1 = [0]
	
.LOOP $label$12:
	*($9 + [12]) = [0]
	if ( ((uint_32)$1 >= (uint_32)$5) ){ goto $label$14 }
	*($1) = [0]
	*($9 + [20]) = ($1 + [4])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	CALL $67(($9 + [16]), ($9 + [12]))
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$11 }
	
.LABEL $label$13
	$6 = ($6 + [1])
	$5 = *($4)
	$1 = *($9 + [20])
	goto $label$12 
	
.LABEL $label$11
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$4 }
	$8 = *($9 + [16])
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = [0]
	$7 = [0]
	
.LOOP $label$15:
	$1 = $8
	$6 = [0]
	
.LOOP $label$16:
	*($1) = [11]
	$1 = ($1 + [4])
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)$3) ){ goto $label$16 }
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$17 }
	$6 = [0]
	$1 = $8
	
.LOOP $label$18:
	*($1) = [1]
	$1 = ($1 + [4])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$18 }
	
.LABEL $label$17
	$5 = [0]
	$1 = $8
	$6 = $2
	
.LOOP $label$19:
	$6 = (*($1) + $6)
	$1 = ($1 + [4])
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)$3) ){ goto $label$19 }
	$7 = ( ( $6 ? $7 : ((int_32)$7 < (int_32)$6) ) ? $7 : ((int_32)$6 < (int_32)[22]) )
	$1 = ((int_32)$4 == (int_32)$3)
	$4 = ($4 + [1])
	if ( ($1 == 0) ){ goto $label$15 }
	goto $label$2 
	
.LABEL $label$6
	$7 = [0]
	goto $label$1 
	
.LABEL $label$5
	$7 = $2
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$8 = *($9 + [16])
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = ( $2 ? [0] : (($2 + [-1]) <= [21]) )
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*($9 + [20]) = $8
	CALL $102($8)
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [32])
	return $7
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$5 = *($1 + [17])
	$4 = *($1 + [16])
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $110($7, ($1 + [20]))
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$0 = (*(*($0)) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $110(($7 + [16]), $7)
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($4 & [255])), (int_32 ($5 & [255])), (int_32 ($7 + [16])), (int_32 $1))
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $102(*($7 + [24]))
	
.LABEL $label$2
	if ( ((*($7) & [1]) == 0) ){ goto $label$3 }
	CALL $102(*($7 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [2])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$4 = [1073741823]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$4 = int_32($2 >> [1])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $101(($4 << [2]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $109($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [2])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [2]))
	$7 = ($3 + [4])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $102($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$23 = (*([0] + [4]) - [112])
	*([0] + [4]) = $23
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [320])
	$4 = ($1 + [120])
	*(($22 = $23) + [16]) = *($4)
	$3 = ($1 + [8])
	*($22 + [24]) = *($3)
	$6 = ($1 + [76])
	$21 = *($2)
	$5 = *($1)
	$2 = ($1 + [80])
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)*(($1 + [84]))) ){ goto $label$2 }
	*($8) = *($21)
	$21 = (*($2) + [1])
	*($2) = $21
	goto $label$1 
	
.LABEL $label$2
	CALL $54($6, $21)
	$21 = *($2)
	
.LABEL $label$1
	$2 = (*($1 + [100]) + [1])
	*($1 + [100]) = $2
	CALL eosio_assert(((int_32)($2 & [255]) == (int_32)($21 - *(($1 + [76])))), [784])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [384])
	*($22 + [32]) = [0]
	*($22) = ($22 + [32])
	*($22 + [44]) = $3
	*($22 + [40]) = $1
	$8 = ($1 + [16])
	*($22 + [48]) = $8
	$9 = ($1 + [24])
	*($22 + [52]) = $9
	$10 = ($1 + [32])
	*($22 + [56]) = $10
	$11 = ($1 + [48])
	*($22 + [60]) = $11
	$12 = ($1 + [64])
	*($22 + [64]) = $12
	*($22 + [68]) = $6
	$13 = ($1 + [88])
	*($22 + [72]) = $13
	$7 = ($1 + [100])
	*($22 + [76]) = $7
	$14 = ($1 + [101])
	*($22 + [80]) = $14
	$15 = ($1 + [102])
	*($22 + [84]) = $15
	$16 = ($1 + [103])
	*($22 + [88]) = $16
	$17 = ($1 + [104])
	*($22 + [92]) = $17
	$18 = ($1 + [108])
	*($22 + [96]) = $18
	*($22 + [100]) = $4
	$19 = ($1 + [128])
	*($22 + [104]) = $19
	$20 = ($1 + [144])
	*($22 + [108]) = $20
	CALL $55(($22 + [40]), $22)
	$21 = *($22 + [32])
	if ( ($21 <= [513]) ){ goto $label$4 }
	$2 = CALL malloc($21)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($23 - (($21 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$3
	*($22 + [4]) = $2
	*($22) = $2
	*($22 + [8]) = ($2 + $21)
	*($22 + [32]) = $22
	*($22 + [44]) = $3
	*($22 + [48]) = $8
	*($22 + [52]) = $9
	*($22 + [56]) = $10
	*($22 + [60]) = $11
	*($22 + [64]) = $12
	*($22 + [40]) = $1
	*($22 + [68]) = $6
	*($22 + [72]) = $13
	*($22 + [76]) = $7
	*($22 + [80]) = $14
	*($22 + [84]) = $15
	*($22 + [88]) = $16
	*($22 + [92]) = $17
	*($22 + [96]) = $18
	*($22 + [100]) = $4
	*($22 + [104]) = $19
	*($22 + [108]) = $20
	CALL $56(($22 + [40]), ($22 + [32]))
	CALL db_update_i64(*($1 + [156]), (int_64)0, $2, $21)
	if ( ($21 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$2 = (($22 + [16]) + [8])
	*($22 + [40]) = *($4)
	if ( (CALL memcmp(($22 + [16]), ($22 + [40]), [8]) == 0) ){ goto $label$7 }
	$4 = ($1 + [160])
	$21 = *($4)
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$8 }
	$21 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534848, ($22 + [32]), $5)
	*($4) = $21
	
.LABEL $label$8
	CALL db_idx64_update($21, (int_64)0, ($22 + [40]))
	
.LABEL $label$7
	*($22 + [40]) = *($3)
	if ( (CALL memcmp($2, ($22 + [40]), [8]) == 0) ){ goto $label$9 }
	$2 = ($1 + [164])
	$1 = *($2)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$10 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534849, ($22 + [32]), $5)
	*($2) = $1
	
.LABEL $label$10
	CALL db_idx64_update($1, (int_64)0, ($22 + [40]))
	
.LABEL $label$9
	*([0] + [4]) = ($22 + [112])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $101(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $109($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $62(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [176])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [176])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $23(*($1), *($0 + [24]))
	CALL $34(*($1), *($0 + [28]))
	CALL $34(*($1), *($0 + [32]))
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [176])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [176])
	CALL memcpy(($5 + [15]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($5 + [15]) != (int_32)[0])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [176])
	CALL memcpy(($5 + [14]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($5 + [14]) != (int_32)[0])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [176])
	CALL memcpy(($5 + [13]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($5 + [13]) != (int_32)[0])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [176])
	CALL memcpy(($5 + [12]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($5 + [12]) != (int_32)[0])
	CALL $23(*($1), *($0 + [56]))
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $23(*($1), *($0 + [64]))
	$2 = *($0 + [68])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [176])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [176])
	CALL memcpy(($2 + [16]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [176])
	CALL memcpy(($2 + [17]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	CALL $23(*($1), ($2 + [20]))
}

int_32 .FUNC $62 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($2 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((*($2 + [128]) & [1]) == 0) ){ goto $label$4 }
	CALL $102(*(($2 + [136])))
	
.LABEL $label$4
	if ( ((*($2 + [108]) & [1]) == 0) ){ goto $label$5 }
	CALL $102(*(($2 + [116])))
	
.LABEL $label$5
	$3 = *($2 + [88])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [92])) = $3
	CALL $102($3)
	
.LABEL $label$6
	$3 = *($2 + [76])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($2 + [80])) = $3
	CALL $102($3)
	
.LABEL $label$7
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$8 }
	CALL $102(*(($2 + [72])))
	
.LABEL $label$8
	CALL $102($2)
	
.LABEL $label$3
	$2 = *($4)
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$9 }
	CALL $102($2)
	
.LABEL $label$9
	return $0
}

int_32 .FUNC $101 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10172])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10060])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9868]
	$1 = (((int_32)$2 * (int_32)[12]) + [9868])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $103 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $102 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $101($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $102($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $105($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [496])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [560])
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [496])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [560])
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $90(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [320])
	*($1 + [8]) = *(*($2))
	$3 = *($1)
	CALL eosio_assert([1], [384])
	$2 = *($1 + [12])
	$4 = ( *(($1 + [16])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($4 + [9])
	$7 = (CASTING uint_64)(uint_32 $4)
	$4 = ($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($8 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	*($9) = $8
	$5 = ($8 + $2)
	*($9 + [8]) = $5
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [448])
	CALL memcpy($8, $1, [8])
	*($9 + [15]) = *(($1 + [8]))
	$6 = ($8 + [8])
	CALL eosio_assert(((int_32)($5 - $6) > (int_32)[0]), [448])
	CALL memcpy($6, ($9 + [15]), [1])
	*($9 + [4]) = ($8 + [9])
	CALL $28($9, $4)
	CALL db_update_i64(*($1 + [28]), (int_64)0, $8, $2)
	if ( ($2 <= [513]) ){ goto $label$4 }
	CALL free($8)
	
.LABEL $label$4
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	*($1 + [8]) = *(*(*($0 + [4])))
	$6 = *($1 + [12])
	$2 = ( *(($1 + [16])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($2 + [9])
	$7 = (CASTING uint_64)(uint_32 $2)
	$3 = ($1 + [12])
	$2 = *($0)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($6)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($8 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	*($9) = $8
	$4 = ($8 + $6)
	*($9 + [8]) = $4
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [448])
	CALL memcpy($8, $1, [8])
	*($9 + [15]) = *(($1 + [8]))
	$5 = ($8 + [8])
	CALL eosio_assert(((int_32)($4 - $5) > (int_32)[0]), [448])
	CALL memcpy($5, ($9 + [15]), [1])
	*($9 + [4]) = ($8 + [9])
	CALL $28($9, $3)
	$7 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)7235159550150574080, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL free($8)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$21 = (*([0] + [4]) - [112])
	*([0] + [4]) = $21
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [320])
	*($1 + [101]) = [1]
	$3 = ($1 + [120])
	*(($22 = $21) + [16]) = *($3)
	$2 = ($1 + [8])
	*($22 + [24]) = *($2)
	$4 = *($1)
	CALL eosio_assert([1], [384])
	*($22 + [32]) = [0]
	*($22) = ($22 + [32])
	*($22 + [44]) = $2
	*($22 + [40]) = $1
	$6 = ($1 + [16])
	*($22 + [48]) = $6
	$7 = ($1 + [24])
	*($22 + [52]) = $7
	$8 = ($1 + [32])
	*($22 + [56]) = $8
	$9 = ($1 + [48])
	*($22 + [60]) = $9
	$10 = ($1 + [64])
	*($22 + [64]) = $10
	$11 = ($1 + [76])
	*($22 + [68]) = $11
	$12 = ($1 + [88])
	*($22 + [72]) = $12
	$13 = ($1 + [100])
	*($22 + [76]) = $13
	$5 = ($1 + [101])
	*($22 + [80]) = $5
	$14 = ($1 + [102])
	*($22 + [84]) = $14
	$15 = ($1 + [103])
	*($22 + [88]) = $15
	$16 = ($1 + [104])
	*($22 + [92]) = $16
	$17 = ($1 + [108])
	*($22 + [96]) = $17
	*($22 + [100]) = $3
	$18 = ($1 + [128])
	*($22 + [104]) = $18
	$19 = ($1 + [144])
	*($22 + [108]) = $19
	CALL $55(($22 + [40]), $22)
	$20 = *($22 + [32])
	if ( ($20 <= [513]) ){ goto $label$2 }
	$21 = CALL malloc($20)
	goto $label$1 
	
.LABEL $label$2
	$21 = ($21 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $21
	
.LABEL $label$1
	*($22 + [4]) = $21
	*($22) = $21
	*($22 + [8]) = ($21 + $20)
	*($22 + [32]) = $22
	*($22 + [44]) = $2
	*($22 + [48]) = $6
	*($22 + [52]) = $7
	*($22 + [56]) = $8
	*($22 + [60]) = $9
	*($22 + [64]) = $10
	*($22 + [40]) = $1
	*($22 + [68]) = $11
	*($22 + [72]) = $12
	*($22 + [76]) = $13
	*($22 + [80]) = $5
	*($22 + [84]) = $14
	*($22 + [88]) = $15
	*($22 + [92]) = $16
	*($22 + [96]) = $17
	*($22 + [100]) = $3
	*($22 + [104]) = $18
	*($22 + [108]) = $19
	CALL $56(($22 + [40]), ($22 + [32]))
	CALL db_update_i64(*($1 + [156]), (int_64)0, $21, $20)
	if ( ($20 <= [513]) ){ goto $label$3 }
	CALL free($21)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$21 = (($22 + [16]) + [8])
	*($22 + [40]) = *($3)
	if ( (CALL memcmp(($22 + [16]), ($22 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [160])
	$20 = *($3)
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$6 }
	$20 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534848, ($22 + [32]), $4)
	*($3) = $20
	
.LABEL $label$6
	CALL db_idx64_update($20, (int_64)0, ($22 + [40]))
	
.LABEL $label$5
	*($22 + [40]) = *($2)
	if ( (CALL memcmp($21, ($22 + [40]), [8]) == 0) ){ goto $label$7 }
	$21 = ($1 + [164])
	$1 = *($21)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534849, ($22 + [32]), $4)
	*($21) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, (int_64)0, ($22 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($22 + [112])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $101(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $109($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $102($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $102($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [176])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($0, *($2 + [4]), [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $1) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $83 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [560])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [560])
	return $0
}

int_32 .FUNC $82 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [156]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1136])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)7035937633859534848)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1072])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1072])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $58(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ($5 - $4)
	$7 = ($3 + [1])
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$2 = (*($0 + [8]) - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $101($6)
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $109($0)
	
.LABEL $label$1
	*(($3 = ($7 + $3))) = *($1)
	$5 = ($5 - $4)
	$1 = ($3 - $5)
	$6 = ($7 + $6)
	$7 = ($3 + [1])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $102($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [176])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [176])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [176])
	CALL memcpy($0, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)7035937633859534848, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [152]) == (int_32)$4), [688])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $58($4, CALL $fimport$5(*($4), *($4 + [8]), (int_64)7035937633859534848, $5))
	CALL eosio_assert(((int_32)*($2 + [152]) == (int_32)$4), [688])
	
.LABEL $label$4
	*(($2 + [160])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	$26 = (*([0] + [4]) - [96])
	$25 = $26
	*([0] + [4]) = $26
	$2 = *($0)
	$3 = *($0 + [4])
	$20 = *($3)
	$21 = *($20 + [16])
	if ( ((int_64)$21 != (int_64)-1) ){ goto $label$1 }
	$21 = (int_64)0
	$12 = CALL db_lowerbound_i64(*($20), *($20 + [8]), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$2 }
	CALL $58($20, $12)
	*($25 + [28]) = [0]
	*($25 + [24]) = $20
	$21 = *(*(CALL $82(($25 + [24])) + [4]))
	$21 = ( (int_64)-2 ? ((int_64)$21 + (int_64)1) : ((uint_64)$21 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($20 + [16])) = $21
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($21 <= (int_64)-2), [1008])
	*($1) = *(($20 + [16]))
	*($1 + [8]) = *(*($3 + [4]))
	$20 = *($3 + [8])
	*($1 + [32]) = *($20)
	*(($12 = ($1 + [40]))) = *(($20 + [8]))
	*(($1 + [56])) = *($12)
	*($1 + [48]) = *($1 + [32])
	*($1 + [48]) = (int_64)0
	*($1 + [16]) = *(*($3 + [12]))
	*($1 + [24]) = *(*($3 + [16]))
	$9 = ($1 + [64])
	CALL $104($9, *($3 + [20]))
	*($1 + [100]) = [2]
	$11 = ($1 + [76])
	$12 = *(*($3 + [24]))
	$20 = ($1 + [80])
	$10 = *($20)
	if ( ((int_32)$10 == (int_32)*(($1 + [84]))) ){ goto $label$4 }
	*($10) = *($12)
	$12 = (*($20) + [1])
	*($20) = $12
	goto $label$3 
	
.LABEL $label$4
	CALL $54($11, $12)
	$12 = *($20)
	
.LABEL $label$3
	$20 = (*(*(($3 + [24]))) + [2])
	if ( ((int_32)$12 == (int_32)*(($1 + [84]))) ){ goto $label$6 }
	*($12) = *($20)
	*(($20 = ($1 + [80]))) = (*($20) + [1])
	goto $label$5 
	
.LABEL $label$6
	CALL $54($11, $20)
	
.LABEL $label$5
	$12 = ($1 + [88])
	$10 = (*(*(($3 + [24]))) + [1])
	$20 = ($1 + [92])
	$8 = *($20)
	if ( ((int_32)$8 == (int_32)*(($1 + [96]))) ){ goto $label$8 }
	*($8) = *($10)
	$24 = (*($20) + [1])
	*($20) = $24
	goto $label$7 
	
.LABEL $label$8
	CALL $54($12, $10)
	$24 = *($20)
	
.LABEL $label$7
	$10 = ($1 + [100])
	$8 = ($1 + [24])
	$7 = ($1 + [16])
	$6 = ($1 + [48])
	$5 = ($1 + [32])
	$4 = ($1 + [8])
	*($25 + [24]) = [255]
	if ( ((uint_32)$24 >= (uint_32)*(($1 + [96]))) ){ goto $label$10 }
	*($24) = [255]
	*(($20 = ($1 + [92]))) = (*($20) + [1])
	goto $label$9 
	
.LABEL $label$10
	CALL $81($12, ($25 + [24]))
	
.LABEL $label$9
	*($1 + [101 align=1]) = [0]
	*($1 + [120]) = *(*($3 + [28]))
	*($1 + [144]) = CALL current_time()
	*($25 + [16]) = [0]
	*($25) = ($25 + [16])
	*($25 + [28]) = $4
	*($25 + [24]) = $1
	*($25 + [32]) = $7
	*($25 + [36]) = $8
	*($25 + [40]) = $5
	*($25 + [44]) = $6
	*($25 + [48]) = $9
	*($25 + [52]) = $11
	*($25 + [56]) = $12
	*($25 + [60]) = $10
	$24 = ($1 + [101])
	*($25 + [64]) = $24
	$13 = ($1 + [102])
	*($25 + [68]) = $13
	$14 = ($1 + [103])
	*($25 + [72]) = $14
	$15 = ($1 + [104])
	*($25 + [76]) = $15
	$18 = ($1 + [108])
	*($25 + [80]) = $18
	$16 = ($1 + [120])
	*($25 + [84]) = $16
	$19 = ($1 + [128])
	*($25 + [88]) = $19
	$17 = ($1 + [144])
	*($25 + [92]) = $17
	CALL $55(($25 + [24]), $25)
	$20 = *($25 + [16])
	if ( ($20 <= [513]) ){ goto $label$12 }
	$3 = CALL malloc($20)
	goto $label$11 
	
.LABEL $label$12
	$3 = ($26 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$11
	*($25 + [4]) = $3
	*($25) = $3
	*($25 + [8]) = ($3 + $20)
	*($25 + [16]) = $25
	*($25 + [28]) = $4
	*($25 + [24]) = $1
	*($25 + [32]) = $7
	*($25 + [36]) = $8
	*($25 + [40]) = $5
	*($25 + [44]) = $6
	*($25 + [48]) = $9
	*($25 + [52]) = $11
	*($25 + [56]) = $12
	*($25 + [60]) = $10
	*($25 + [64]) = $24
	*($25 + [68]) = $13
	*($25 + [72]) = $14
	*($25 + [76]) = $15
	*($25 + [80]) = $18
	*($25 + [84]) = $16
	*($25 + [88]) = $19
	*($25 + [92]) = $17
	CALL $56(($25 + [24]), ($25 + [16]))
	$21 = *($1)
	*($1 + [156]) = CALL db_store_i64(*($2 + [8]), (int_64)7035937633859534848, *(*($0 + [8])), $21, $3, $20)
	if ( ($20 <= [513]) ){ goto $label$13 }
	CALL free($3)
	
.LABEL $label$13
	if ( (uint_64)($21 <= *($2 + [16])) ){ goto $label$14 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$21 + (int_64)1) : ((uint_64)$21 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	$3 = ($2 + [8])
	$21 = *($3)
	$0 = *(($0 + [8]))
	$22 = *($0)
	$23 = *($1)
	*($25 + [24]) = *(($1 + [120]))
	*($1 + [160]) = CALL db_idx64_store($21, (int_64)7035937633859534848, $22, $23, ($25 + [24]))
	$21 = *($0)
	$22 = *($3)
	$23 = *($1)
	*($25 + [24]) = *(($1 + [8]))
	*(($1 + [164])) = CALL db_idx64_store($22, (int_64)7035937633859534849, $21, $23, ($25 + [24]))
	*([0] + [4]) = ($25 + [96])
}

void .FUNC $70 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [128])
	*([0] + [4]) = $13
	$0 = *($0 + [4])
	$12 = *($0 + [4])
	$11 = (*(*($0)) + int_32($12 >> [1]))
	$0 = *($0)
	if ( (($12 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($11) + $0))
	
.LABEL $label$1
	*(($12 = (($13 + [112]) + [8]))) = *(($2 + [8]))
	*($13 + [112]) = *($2)
	CALL $110(($13 + [96]), $5)
	*($13 + [88]) = [0]
	*($13 + [80]) = (int_64)0
	$2 = (*($6 + [4]) - *($6))
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL $101($2)
	*(($13 + [88])) = ($5 + $2)
	*($13 + [80]) = $5
	*($13 + [84]) = $5
	$2 = *($6)
	$6 = (*(($6 + [4])) - $2)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $2, $6)
	*($13 + [84]) = (*($13 + [84]) + $6)
	
.LABEL $label$3
	CALL $110(($13 + [64]), $7)
	CALL $110(($13 + [48]), $8)
	CALL $110(($13 + [32]), $9)
	CALL $110(($13 + [16]), $10)
	*(($13 + [8])) = *($12)
	*($13) = *($13 + [112])
	CALL void $11((int_32 $1), (int_64 $13), (int_32 $3), (int_64 $4), (int_64 ($13 + [96])), (int_32 ($13 + [80])), (int_32 ($13 + [64])), (int_32 ($13 + [48])), (int_32 ($13 + [32])), (int_32 ($13 + [16])), (int_32 $0))
	if ( ((*($13 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL $102(*($13 + [24]))
	
.LABEL $label$4
	if ( ((*($13 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $102(*($13 + [40]))
	
.LABEL $label$5
	if ( ((*($13 + [48]) & [1]) == 0) ){ goto $label$6 }
	CALL $102(*($13 + [56]))
	
.LABEL $label$6
	if ( ((*($13 + [64]) & [1]) == 0) ){ goto $label$7 }
	CALL $102(*($13 + [72]))
	
.LABEL $label$7
	$6 = *($13 + [80])
	if ( ($6 == 0) ){ goto $label$8 }
	*($13 + [84]) = $6
	CALL $102($6)
	
.LABEL $label$8
	if ( ((*($13 + [96]) & [1]) == 0) ){ goto $label$9 }
	CALL $102(*($13 + [104]))
	
.LABEL $label$9
	*([0] + [4]) = ($13 + [128])
	return (unreachable)
	
.LABEL $label$2
	CALL $109(($13 + [80]))
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [464])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $101([48])
	CALL $83($6)
	*($6 + [32]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [16])
	*($8 + [40]) = $6
	CALL $84(($8 + [40]), ($8 + [32]))
	*($6 + [36]) = $1
	*($8 + [32]) = $6
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8
	*($8 + [40]) = $5)
	$7 = *($6 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $85(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $102($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [448])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [448])
	CALL memcpy(*($2 + [4]), $0, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [464])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $101([56])
	$6 = CALL $78($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [48])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $79(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $102($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$23 = (*([0] + [4]) - [112])
	*([0] + [4]) = $23
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [320])
	$4 = ($1 + [120])
	*(($22 = $23) + [16]) = *($4)
	$3 = ($1 + [8])
	*($22 + [24]) = *($3)
	*($3) = *(*($2))
	$5 = *($1)
	$21 = *($2 + [4])
	*($1 + [32]) = *($21)
	*(($13 = ($1 + [40]))) = *(($21 + [8]))
	*($1 + [48]) = *($1 + [32])
	*(($1 + [56])) = *($13)
	*($1 + [48]) = (int_64)0
	*($1 + [16]) = *(*($2 + [8]))
	*($1 + [24]) = *(*($2 + [12]))
	$10 = ($1 + [64])
	CALL $104($10, *($2 + [16]))
	*($1 + [100]) = [2]
	$21 = *($1 + [76])
	*(($13 = ($1 + [80]))) = $21
	*(($1 + [92])) = *($1 + [88])
	$12 = ($1 + [76])
	$11 = *(*($2 + [20]))
	if ( ((int_32)$21 == (int_32)*(($1 + [84]))) ){ goto $label$2 }
	*($21) = *($11)
	$21 = (*($13) + [1])
	*($13) = $21
	goto $label$1 
	
.LABEL $label$2
	CALL $54($12, $11)
	$21 = *($13)
	
.LABEL $label$1
	$13 = (*(*(($2 + [20]))) + [2])
	if ( ((int_32)$21 == (int_32)*(($1 + [84]))) ){ goto $label$4 }
	*($21) = *($13)
	*(($21 = ($1 + [80]))) = (*($21) + [1])
	goto $label$3 
	
.LABEL $label$4
	CALL $54($12, $13)
	
.LABEL $label$3
	$13 = ($1 + [88])
	$11 = (*(*(($2 + [20]))) + [1])
	$21 = ($1 + [92])
	$9 = *($21)
	if ( ((int_32)$9 == (int_32)*(($1 + [96]))) ){ goto $label$6 }
	*($9) = *($11)
	$18 = (*($21) + [1])
	*($21) = $18
	goto $label$5 
	
.LABEL $label$6
	CALL $54($13, $11)
	$18 = *($21)
	
.LABEL $label$5
	$11 = ($1 + [100])
	$9 = ($1 + [24])
	$8 = ($1 + [16])
	$7 = ($1 + [48])
	$6 = ($1 + [32])
	*($22 + [40]) = [255]
	if ( ((uint_32)$18 >= (uint_32)*(($1 + [96]))) ){ goto $label$8 }
	*($18) = [255]
	*(($21 = ($1 + [92]))) = (*($21) + [1])
	goto $label$7 
	
.LABEL $label$8
	CALL $81($13, ($22 + [40]))
	
.LABEL $label$7
	*($1 + [101 align=1]) = [0]
	*(($1 + [120])) = *(*($2 + [24]))
	$18 = ($1 + [108])
	CALL $107($18, [656])
	$19 = ($1 + [128])
	CALL $107($19, [656])
	*($1 + [144]) = CALL current_time()
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [384])
	*($22 + [32]) = [0]
	*($22) = ($22 + [32])
	*($22 + [44]) = $3
	*($22 + [40]) = $1
	*($22 + [48]) = $8
	*($22 + [52]) = $9
	*($22 + [56]) = $6
	*($22 + [60]) = $7
	*($22 + [64]) = $10
	*($22 + [68]) = $12
	*($22 + [72]) = $13
	*($22 + [76]) = $11
	$14 = ($1 + [101])
	*($22 + [80]) = $14
	$15 = ($1 + [102])
	*($22 + [84]) = $15
	$16 = ($1 + [103])
	*($22 + [88]) = $16
	$17 = ($1 + [104])
	*($22 + [92]) = $17
	*($22 + [96]) = $18
	*($22 + [100]) = $4
	*($22 + [104]) = $19
	$20 = ($1 + [144])
	*($22 + [108]) = $20
	CALL $55(($22 + [40]), $22)
	$21 = *($22 + [32])
	if ( ($21 <= [513]) ){ goto $label$10 }
	$2 = CALL malloc($21)
	goto $label$9 
	
.LABEL $label$10
	$2 = ($23 - (($21 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$9
	*($22 + [4]) = $2
	*($22) = $2
	*($22 + [8]) = ($2 + $21)
	*($22 + [32]) = $22
	*($22 + [44]) = $3
	*($22 + [48]) = $8
	*($22 + [52]) = $9
	*($22 + [56]) = $6
	*($22 + [60]) = $7
	*($22 + [64]) = $10
	*($22 + [40]) = $1
	*($22 + [68]) = $12
	*($22 + [72]) = $13
	*($22 + [76]) = $11
	*($22 + [80]) = $14
	*($22 + [84]) = $15
	*($22 + [88]) = $16
	*($22 + [92]) = $17
	*($22 + [96]) = $18
	*($22 + [100]) = $4
	*($22 + [104]) = $19
	*($22 + [108]) = $20
	CALL $56(($22 + [40]), ($22 + [32]))
	CALL db_update_i64(*($1 + [156]), (int_64)0, $2, $21)
	if ( ($21 <= [513]) ){ goto $label$11 }
	CALL free($2)
	
.LABEL $label$11
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$2 = (($22 + [16]) + [8])
	*($22 + [40]) = *($4)
	if ( (CALL memcmp(($22 + [16]), ($22 + [40]), [8]) == 0) ){ goto $label$13 }
	$4 = ($1 + [160])
	$21 = *($4)
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$14 }
	$21 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534848, ($22 + [32]), $5)
	*($4) = $21
	
.LABEL $label$14
	CALL db_idx64_update($21, (int_64)0, ($22 + [40]))
	
.LABEL $label$13
	*($22 + [40]) = *($3)
	if ( (CALL memcmp($2, ($22 + [40]), [8]) == 0) ){ goto $label$15 }
	$2 = ($1 + [164])
	$1 = *($2)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$16 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534849, ($22 + [32]), $5)
	*($2) = $1
	
.LABEL $label$16
	CALL db_idx64_update($1, (int_64)0, ($22 + [40]))
	
.LABEL $label$15
	*([0] + [4]) = ($22 + [112])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $28(*($1), ($0 + [32]))
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $101($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $109($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $102($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)7035937633859534849, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [152]) == (int_32)$4), [688])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $58($4, CALL $fimport$5(*($4), *($4 + [8]), (int_64)7035937633859534848, $5))
	CALL eosio_assert(((int_32)*($2 + [152]) == (int_32)$4), [688])
	
.LABEL $label$4
	*(($2 + [164])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($4 = ($0 + [24]))) = (int_64)1398362884
	CALL eosio_assert([1], [496])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [560])
	*($0 + [44]) = $1
	*($6) = *($2 + [4])
	*($6 + [12]) = ($0 + [8])
	*($6 + [8]) = $0
	*($6 + [16]) = ($0 + [16])
	*($6 + [20]) = ($0 + [32])
	*($6 + [24]) = ($0 + [40])
	CALL $80(($6 + [8]), $6)
	$4 = *(*($2 + [8]))
	*($0 + [52]) = [-1]
	*($0 + [48]) = $4
	*([0] + [4]) = ($6 + [32])
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $101(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $109($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $102($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $102($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [144])
	*([0] + [4]) = $14
	$0 = *($0 + [4])
	$12 = *($0 + [4])
	$11 = (*(*($0)) + int_32($12 >> [1]))
	$0 = *($0)
	if ( (($12 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($11) + $0))
	
.LABEL $label$1
	*($14 + [136]) = [0]
	*($14 + [128]) = (int_64)0
	$12 = (*($3 + [4]) - *($3))
	if ( ($12 == 0) ){ goto $label$3 }
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$2 }
	$13 = CALL $101($12)
	*(($14 + [136])) = ($13 + $12)
	*($14 + [128]) = $13
	*($14 + [132]) = $13
	$12 = *($3)
	$3 = (*(($3 + [4])) - $12)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($13, $12, $3)
	*($14 + [132]) = ($13 + $3)
	
.LABEL $label$3
	*(($3 = (($14 + [112]) + [8]))) = *(($5 + [8]))
	*(($12 = (($14 + [96]) + [8]))) = *(($6 + [8]))
	*($14 + [112]) = *($5)
	*($14 + [96]) = *($6)
	CALL $110(($14 + [80]), $7)
	CALL $110(($14 + [64]), $8)
	CALL $110(($14 + [48]), $9)
	CALL $110(($14 + [32]), $10)
	*((($14 + [16]) + [8])) = *($3)
	*(($14 + [8])) = *($12)
	*($14 + [16]) = *($14 + [112])
	*($14) = *($14 + [96])
	CALL void $11((int_32 $1), (int_64 $2), (int_64 ($14 + [128])), (int_32 $4), (int_32 ($14 + [16])), (int_32 $14), (int_32 ($14 + [80])), (int_32 ($14 + [64])), (int_32 ($14 + [48])), (int_32 ($14 + [32])), (int_32 $0))
	if ( ((*($14 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $102(*($14 + [40]))
	
.LABEL $label$4
	if ( ((*($14 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $102(*($14 + [56]))
	
.LABEL $label$5
	if ( ((*($14 + [64]) & [1]) == 0) ){ goto $label$6 }
	CALL $102(*($14 + [72]))
	
.LABEL $label$6
	if ( ((*($14 + [80]) & [1]) == 0) ){ goto $label$7 }
	CALL $102(*($14 + [88]))
	
.LABEL $label$7
	$3 = *($14 + [128])
	if ( ($3 == 0) ){ goto $label$8 }
	*($14 + [132]) = $3
	CALL $102($3)
	
.LABEL $label$8
	*([0] + [4]) = ($14 + [144])
	return (unreachable)
	
.LABEL $label$2
	CALL $109(($14 + [128]))
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [176])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $34(*($1), ($2 + [16]))
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [176])
	CALL memcpy(($2 + [28]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4 + [8]) = $2
	CALL $35(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	$4 = [0]
	*($0 + [28]) = [0]
	*($0 + [32]) = (int_64)0
	*(($0 + [24])) = [0]
	*(($5 = ($0 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [496])
	$3 = (uint_64)*($5) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [560])
	*(($4 = ($0 + [56]))) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [496])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [560])
	*($0 + [64]) = (int_64)0
	*(($0 + [72])) = (int_64)0
	*(($0 + [80])) = (int_64)0
	*($0 + [88]) = (int_64)0
	*(($0 + [96])) = (int_64)0
	*(($0 + [104])) = [0]
	*(($0 + [108])) = [0]
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $33(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [144])
	*([0] + [4]) = $7
	*($7 + [128]) = (int_64)0
	*($7 + [136]) = [0]
	$3 = *($1 + [8])
	$2 = *($1)
	$4 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL $101($4)
	*(($7 + [136])) = ($5 + $4)
	*($7 + [128]) = $5
	*($7 + [132]) = $5
	$6 = *(($1 + [16]))
	$4 = (*(($1 + [20])) - $6)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $6, $4)
	*($7 + [132]) = ($5 + $4)
	
.LABEL $label$2
	*(($7 + [124])) = *(($1 + [44]))
	*(($4 = (($7 + [112]) + [8]))) = *(($1 + [40]))
	*($7 + [112]) = *($1 + [32])
	*($7 + [116]) = *(($1 + [36]))
	$5 = *($1 + [28])
	*(($6 = (($7 + [96]) + [8]))) = *(($1 + [56]))
	*($7 + [96]) = *($1 + [48])
	CALL $110(($7 + [80]), ($1 + [64]))
	CALL $110(($7 + [64]), ($1 + [76]))
	CALL $110(($7 + [48]), ($1 + [88]))
	CALL $110(($7 + [32]), ($1 + [100]))
	*((($7 + [16]) + [8])) = *($4)
	*(($7 + [8])) = *($6)
	*($7 + [16]) = *($7 + [112])
	*($7) = *($7 + [96])
	CALL $32($0, $2, $3, ($7 + [128]), $5, ($7 + [16]), $7, ($7 + [80]), ($7 + [64]), ($7 + [48]), ($7 + [32]))
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $102(*($7 + [40]))
	
.LABEL $label$3
	if ( ((*($7 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL $102(*($7 + [56]))
	
.LABEL $label$4
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$5 }
	CALL $102(*($7 + [72]))
	
.LABEL $label$5
	if ( ((*($7 + [80]) & [1]) == 0) ){ goto $label$6 }
	CALL $102(*($7 + [88]))
	
.LABEL $label$6
	$1 = *($7 + [128])
	if ( ($1 == 0) ){ goto $label$7 }
	*($7 + [132]) = $1
	CALL $102($1)
	
.LABEL $label$7
	*([0] + [4]) = ($7 + [144])
	return (unreachable)
	
.LABEL $label$1
	CALL $109(($7 + [128]))
}