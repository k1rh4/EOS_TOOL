(data (i32.const 8192) "Intersecting land has already been registered\00")
(data (i32.const 8238) "Your land purchase offer has been rejected\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8367) "Land registration fee\00")
(data (i32.const 8389) "You cannot move a land that is up for sale\00")
(data (i32.const 8432) "unable to find key\00")
(data (i32.const 8451) "The land size has changed during the move\00")
(data (i32.const 8493) "You must set a price in INF\00")
(data (i32.const 8521) "The quantity is not valid\00")
(data (i32.const 8547) "The amount must be positive\00")
(data (i32.const 8575) "Given land is not for sale\00")
(data (i32.const 8602) "Land Id does not exist\00")
(data (i32.const 8625) "You cannot buy your own land\00")
(data (i32.const 8654) "Given price does not match for sale price\00%lu\00")
(data (i32.const 8700) "Your land has been purchased!\00")
(data (i32.const 8730) "You have already made an offer on that land\00")
(data (i32.const 8774) "Offer Id does not exist\00%f\00")
(data (i32.const 8801) "You cancelled your land purchase offer\00")
(data (i32.const 8840) "Given price does not match offer price\00")
(data (i32.const 8879) "You accepted a land purchase offer!\00")
(data (i32.const 8915) "You do not have authority to close this deposit\00")
(data (i32.const 8963) "User does not have a deposit opened\00")
(data (i32.const 8999) "INF deposit refund\00")
(data (i32.const 9018) "The symbol does not match\00")
(data (i32.const 9044) "North edge must have greater latitude than south edge\00")
(data (i32.const 9098) "East edge must have greater longitude than west edge\00")
(data (i32.const 9151) "Latitude cannot be greater than 85 degrees\00")
(data (i32.const 9194) "Latitude cannot be less than -85 degrees\00")
(data (i32.const 9235) "Longitude must be between -180 and 180 degrees\00")
(data (i32.const 9282) "Land cannot exceed a length of \00")
(data (i32.const 9314) " meters on either side\00")
(data (i32.const 9337) "Land must be at least a length of \00")
(data (i32.const 9372) " meters on both sides\00")
(data (i32.const 9394) "User\'s INF deposit balance is too low\00")
(data (i32.const 9432) "Persistent Id does not exist\00")
(data (i32.const 9461) "Asset position is not within land bounds\00")
(data (i32.const 9502) "Asset orientation must be within 0 and 360\00")
(data (i32.const 9545) "Asset scale must be at least 0.2\00")
(data (i32.const 9578) "Poly Id format is invalid\00")
(data (i32.const 9604) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9653) "invalid symbol name\00")
(data (i32.const 9673) "attempt to subtract asset with different symbol\00")
(data (i32.const 9721) "subtraction underflow\00")
(data (i32.const 9743) "subtraction overflow\00")
(data (i32.const 9764) "attempt to add asset with different symbol\00")
(data (i32.const 9807) "addition underflow\00")
(data (i32.const 9826) "addition overflow\00")
(data (i32.const 9844) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9903) "write\00")
(data (i32.const 9909) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9960) "error reading iterator\00")
(data (i32.const 9983) "read\00")
(data (i32.const 9988) "cannot pass end iterator to erase\00")
(data (i32.const 10022) "cannot increment end iterator\00")
(data (i32.const 10052) "object passed to erase is not in multi_index\00")
(data (i32.const 10097) "cannot erase objects in table of another contract\00")
(data (i32.const 10147) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10200) "cannot create objects in table of another contract\00")
(data (i32.const 10251) "cannot pass end iterator to modify\00")
(data (i32.const 10286) "object passed to modify is not in multi_index\00")
(data (i32.const 10332) "cannot modify objects in table of another contract\00")
(data (i32.const 10383) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10442) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10494) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10548) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10596) "get\00")
(data (i32.const 19024) "\03\00\00\00\04\00\00\00\04\00\00\00\06\00\00\00")
(data (i32.const 19040) "\83\f9\a2\00DNn\00\fc)\15\00\d1W\'\00\dd4\f5\00b\db\c0\00<\99\95\00A\90C\00cQ\fe\00\bb\de\ab\00\b7a\c5\00:n$\00\d2MB\00I\06\e0\00\t\ea.\00\1c\92\d1\00\eb\1d\fe\00)\b1\1c\00\e8>\a7\00\f55\82\00D\bb.\00\9c\e9\84\00\b4&p\00A~_\00\d6\919\00S\839\00\9c\f49\00\8b_\84\00(\f9\bd\00\f8\1f;\00\de\ff\97\00\0f\98\05\00\11/\ef\00\nZ\8b\00m\1fm\00\cf~6\00\t\cb\'\00FO\b7\00\9ef?\00-\ea_\00\ba\'u\00\e5\eb\c7\00={\f1\00\f79\07\00\92R\8a\00\fbk\ea\00\1f\b1_\00\08]\8d\000\03V\00{\fcF\00\f0\abk\00 \bc\cf\006\f4\9a\00\e3\a9\1d\00^a\91\00\08\1b\e6\00\85\99e\00\a0\14_\00\8d@h\00\80\d8\ff\00\'sM\00\06\061\00\caV\15\00\c9\a8s\00{\e2`\00k\8c\c0\00\19\c4G\00\cdg\c3\00\t\e8\dc\00Y\83*\00\8bv\c4\00\a6\1c\96\00D\af\dd\00\19W\d1\00\a5>\05\00\05\07\ff\003~?\00\c22\e8\00\98O\de\00\bb}2\00&=\c3\00\1ek\ef\00\9f\f8^\005\1f:\00\7f\f2\ca\00\f1\87\1d\00|\90!\00j$|\00\d5n\fa\000-w\00\15;C\00\b5\14\c6\00\c3\19\9d\00\ad\c4\c2\00,MA\00\0c\00]\00\86}F\00\e3q-\00\9b\c6\9a\003b\00\00\b4\d2|\00\b4\a7\97\007U\d5\00\d7>\f6\00\a3\10\18\00Mv\fc\00d\9d*\00p\d7\ab\00c|\f8\00z\b0W\00\17\15\e7\00\c0IV\00;\d6\d9\00\a7\848\00$#\cb\00\d6\8aw\00ZT#\00\00\1f\b9\00\f1\n\1b\00\19\ce\df\00\9f1\ff\00f\1ej\00\99Wa\00\ac\fbG\00~\7f\d8\00\"e\b7\002\e8\89\00\e6\bf`\00\ef\c4\cd\00l6\t\00]?\d4\00\16\de\d7\00X;\de\00\de\9b\92\00\d2\"(\00(\86\e8\00\e2XM\00\c6\ca2\00\08\e3\16\00\e0}\cb\00\17\c0P\00\f3\1d\a7\00\18\e0[\00.\134\00\83\12b\00\83H\01\00\f5\8e[\00\ad\b0\7f\00\1e\e9\f2\00HJC\00\10g\d3\00\aa\dd\d8\00\ae_B\00ja\ce\00\n(\a4\00\d3\99\b4\00\06\a6\f2\00\\w\7f\00\a3\c2\83\00a<\88\00\8asx\00\af\8cZ\00o\d7\bd\00-\a6c\00\f4\bf\cb\00\8d\81\ef\00&\c1g\00U\caE\00\ca\d96\00(\a8\d2\00\c2a\8d\00\12\c9w\00\04&\14\00\12F\9b\00\c4Y\c4\00\c8\c5D\00M\b2\91\00\00\17\f3\00\d4C\ad\00)I\e5\00\fd\d5\10\00\00\be\fc\00\1e\94\cc\00p\ce\ee\00\13>\f5\00\ec\f1\80\00\b3\e7\c3\00\c7\f8(\00\93\05\94\00\c1q>\00.\t\b3\00\0bE\f3\00\88\12\9c\00\ab {\00.\b5\9f\00G\92\c2\00{2/\00\0cUm\00r\a7\90\00k\e7\1f\001\cb\96\00y\16J\00Ay\e2\00\f4\df\89\00\e8\94\97\00\e2\e6\84\00\991\97\00\88\edk\00__6\00\bb\fd\0e\00H\9a\b4\00g\a4l\00qrB\00\8d]2\00\9f\15\b8\00\bc\e5\t\00\8d1%\00\f7t9\000\05\1c\00\0d\0c\01\00K\08h\00,\eeX\00G\aa\90\00t\e7\02\00\bd\d6$\00\f7}\a6\00nHr\00\9f\16\ef\00\8e\94\a6\00\b4\91\f6\00\d1SQ\00\cf\n\f2\00 \983\00\f5K~\00\b2ch\00\dd>_\00@]\03\00\85\89\7f\00UR)\007d\c0\00m\d8\10\002H2\00[Lu\00Nq\d4\00ETn\00\0b\t\c1\00*\f5i\00\14f\d5\00\'\07\9d\00]\04P\00\b4;\db\00\eav\c5\00\87\f9\17\00Ik}\00\1d\'\ba\00\96i)\00\c6\cc\ac\00\ad\14T\00\90\e2j\00\88\d9\89\00,rP\00\04\a4\be\00w\07\94\00\f30p\00\00\fc\'\00\eaq\a8\00f\c2I\00d\e0=\00\97\dd\83\00\a3?\97\00C\94\fd\00\0d\86\8c\001A\de\00\929\9d\00\ddp\8c\00\17\b7\e7\00\08\df;\00\157+\00\\\80\a0\00Z\80\93\00\10\11\92\00\0f\e8\d8\00l\80\af\00\db\ffK\008\90\0f\00Y\18v\00b\a5\15\00a\cb\bb\00\c7\89\b9\00\10@\bd\00\d2\f2\04\00Iu\'\00\eb\b6\f6\00\db\"\bb\00\n\14\aa\00\89&/\00d\83v\00\t;3\00\0e\94\1a\00Q:\aa\00\1d\a3\c2\00\af\ed\ae\00\\&\12\00m\c2M\00-z\9c\00\c0V\97\00\03?\83\00\t\f0\f6\00+@\8c\00m1\99\009\b4\07\00\0c \15\00\d8\c3[\00\f5\92\c4\00\c6\adK\00N\ca\a5\00\a77\cd\00\e6\a96\00\ab\92\94\00\ddBh\00\19c\de\00v\8c\ef\00h\8bR\00\fc\db7\00\ae\a1\ab\00\df\151\00\00\ae\a1\00\0c\fb\da\00dMf\00\ed\05\b7\00)e0\00WV\bf\00G\ff:\00j\f9\b9\00u\be\f3\00(\93\df\00\ab\800\00f\8c\f6\00\04\cb\15\00\fa\"\06\00\d9\e4\1d\00=\b3\a4\00W\1b\8f\006\cd\t\00NB\e9\00\13\be\a4\003#\b5\00\f0\aa\1a\00Oe\a8\00\d2\c1\a5\00\0b?\0f\00[x\cd\00#\f9v\00{\8b\04\00\89\17r\00\c6\a6S\00on\e2\00\ef\eb\00\00\9bJX\00\c4\da\b7\00\aaf\ba\00v\cf\cf\00\d1\02\1d\00\b1\f1-\00\8c\99\c1\00\c3\adw\00\86H\da\00\f7]\a0\00\c6\80\f4\00\ac\f0/\00\dd\ec\9a\00?\\\bc\00\d0\dem\00\90\c7\1f\00*\db\b6\00\a3%:\00\00\af\9a\00\adS\93\00\b6W\04\00)-\b4\00K\80~\00\da\07\a7\00v\aa\0e\00{Y\a1\00\16\12*\00\dc\b7-\00\fa\e5\fd\00\89\db\fe\00\89\be\fd\00\e4vl\00\06\a9\fc\00>\80p\00\85n\15\00\fd\87\ff\00(>\07\00ag3\00*\18\86\00M\bd\ea\00\b3\e7\af\00\8fmn\00\95g9\001\bf[\00\84\d7H\000\df\16\00\c7-C\00%a5\00\c9p\ce\000\cb\b8\00\bfl\fd\00\a4\00\a2\00\05l\e4\00Z\dd\a0\00!oG\00b\12\d2\00\b9\\\84\00paI\00kV\e0\00\99R\01\00PU7\00\1e\d5\b7\003\f1\c4\00\13n_\00]0\e4\00\85.\a9\00\1d\b2\c3\00\a126\00\08\b7\a4\00\ea\b1\d4\00\16\f7!\00\8fi\e4\00\'\ffw\00\0c\03\80\00\8d@-\00O\cd\a0\00 \a5\99\00\b3\a2\d3\00/]\n\00\b4\f9B\00\11\da\cb\00}\be\d0\00\9b\db\c1\00\ab\17\bd\00\ca\a2\81\00\08j\\\00.U\17\00\'\00U\00\7f\14\f0\00\e1\07\86\00\14\0bd\00\96A\8d\00\87\be\de\00\da\fd*\00k%\b6\00{\894\00\05\f3\fe\00\b9\bf\9e\00hjO\00J*\a8\00O\c4Z\00-\f8\bc\00\d7Z\98\00\f4\c7\95\00\0dM\8d\00 :\a6\00\a4W_\00\14?\b1\00\808\95\00\cc \01\00q\dd\86\00\c9\de\b6\00\bf`\f5\00Me\11\00\01\07k\00\8c\b0\ac\00\b2\c0\d0\00QUH\00\1e\fb\0e\00\95r\c3\00\a3\06;\00\c0@5\00\06\dc{\00\e0E\cc\00N)\fa\00\d6\ca\c8\00\e8\f3A\00|d\de\00\9bd\d8\00\d9\be1\00\a4\97\c3\00wX\d4\00i\e3\c5\00\f0\da\13\00\ba:<\00F\18F\00Uu_\00\d2\bd\f5\00n\92\c6\00\ac.]\00\0eD\ed\00\1c>B\00a\c4\87\00)\fd\e9\00\e7\d6\f3\00\"|\ca\00o\915\00\08\e0\c5\00\ff\d7\8d\00nj\e2\00\b0\fd\c6\00\93\08\c1\00|]t\00k\ad\b2\00\cdn\9d\00>r{\00\c6\11j\00\f7\cf\a9\00)s\df\00\b5\c9\ba\00\b7\00Q\00\e2\b2\0d\00t\ba$\00\e5}`\00t\d8\8a\00\0d\15,\00\81\18\0c\00~f\94\00\01)\16\00\9fzv\00\fd\fd\be\00VE\ef\00\d9~6\00\ec\d9\13\00\8b\ba\b9\00\c4\97\fc\001\a8\'\00\f1n\c3\00\94\c56\00\d8\a8V\00\b4\a8\b5\00\cf\cc\0e\00\12\89-\00oW4\00,V\89\00\99\ce\e3\00\d6 \b9\00k^\aa\00>*\9c\00\11_\cc\00\fd\0bJ\00\e1\f4\fb\00\8e;m\00\e2\86,\00\e9\d4\84\00\fc\b4\a9\00\ef\ee\d1\00.5\c9\00/9a\008!D\00\1b\d9\c8\00\81\fc\n\00\fbJj\00/\1c\d8\00S\b4\84\00N\99\8c\00T\"\cc\00*U\dc\00\c0\c6\d6\00\0b\19\96\00\1ap\b8\00i\95d\00&Z`\00?R\ee\00\7f\11\0f\00\f4\b5\11\00\fc\cb\f5\004\bc-\004\bc\ee\00\e8]\cc\00\dd^`\00g\8e\9b\00\923\ef\00\c9\17\b8\00aX\9b\00\e1W\bc\00Q\83\c6\00\d8>\10\00\ddqH\00-\1c\dd\00\af\18\a1\00!,F\00Y\f3\d7\00\d9z\98\00\9eT\c0\00O\86\fa\00V\06\fc\00\e5y\ae\00\89\"6\008\ad\"\00g\93\dc\00U\e8\aa\00\82&8\00\ca\e7\9b\00Q\0d\a4\00\993\b1\00\a9\d7\0e\00i\05H\00e\b2\f0\00\7f\88\a7\00\88L\97\00\f9\d16\00!\92\b3\00{\82J\00\98\cf!\00@\9f\dc\00\dcGU\00\e1t:\00g\ebB\00\fe\9d\df\00^\d4_\00{g\a4\00\ba\acz\00U\f6\a2\00+\88#\00A\baU\00Yn\08\00!*\86\009G\83\00\89\e3\e6\00\e5\9e\d4\00I\fb@\00\ffV\e9\00\1c\0f\ca\00\c5Y\8a\00\94\fa+\00\d3\c1\c5\00\0f\c5\cf\00\dbZ\ae\00G\c5\86\00\85Cb\00!\86;\00,y\94\00\10a\87\00*L{\00\80,\1a\00C\bf\12\00\88&\90\00x<\89\00\a8\c4\e4\00\e5\db{\00\c4:\c2\00&\f4\ea\00\f7g\8a\00\0d\92\bf\00e\a3+\00=\93\b1\00\bd|\0b\00\a4Q\dc\00\'\ddc\00i\e1\dd\00\9a\94\19\00\a8)\95\00h\ce(\00\t\ed\b4\00D\9f \00N\98\ca\00p\82c\00~|#\00\0f\b92\00\a7\f5\8e\00\14V\e7\00!\f1\08\00\b5\9d*\00o~M\00\a5\19Q\00\b5\f9\ab\00\82\df\d6\00\96\dda\00\166\02\00\c4:\9f\00\83\a2\a1\00r\edm\009\8dz\00\82\b8\a9\00k2\\\00F\'[\00\004\ed\00\d2\00w\00\fc\f4U\00\01YM\00\e0q\80\00")
(data (i32.const 21808) "\00\00\00@\fb!\f9?\00\00\00\00-Dt>\00\00\00\80\98F\f8<\00\00\00`Q\ccx;\00\00\00\80\83\1b\f09\00\00\00@ %z8\00\00\00\80\"\82\e36\00\00\00\00\1d\f3i5")
(data (i32.const 21872) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "current_time" (func $fimport$2 (result i64)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$4 (param i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$5 (param i64)))
(import "env" "memcpy" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$7 (result i64)))
(import "env" "db_idx_double_lowerbound" (func $fimport$8 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$9 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$10 (param i32 i32)))
(import "env" "db_update_i64" (func $fimport$11 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$12 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$13 (param i32 i64 i32)))
(import "env" "db_idx_double_find_primary" (func $fimport$14 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx_double_update" (func $fimport$15 (param i32 i64 i32)))
(import "env" "db_store_i64" (func $fimport$16 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$18 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx_double_store" (func $fimport$19 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx128_find_primary" (func $fimport$20 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_update" (func $fimport$21 (param i32 i64 i32)))
(import "env" "has_auth" (func $fimport$22 (param i64) (result i32)))
(import "env" "action_data_size" (func $fimport$23 (result i32)))
(import "env" "read_action_data" (func $fimport$24 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$26 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$27 (param i32)))
(import "env" "db_idx_double_remove" (func $fimport$28 (param i32)))
(import "env" "db_idx64_next" (func $fimport$29 (param i32 i32) (result i32)))
(import "env" "db_idx_double_next" (func $fimport$30 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$31 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$32 (param i64 i64 i64) (result i32)))
(import "env" "db_idx128_store" (func $fimport$33 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx128_remove" (func $fimport$34 (param i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$35 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$36))
(import "env" "memset" (func $fimport$37 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$38 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$39 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$42 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$43 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$44 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$46 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$47 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$48 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$49 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$50 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$51 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$52 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$53 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$54 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$55 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$56 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$57 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$58 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $71))
(export "_Znwj" (func $101))
(export "_ZdlPv" (func $103))
(export "_Znaj" (func $102))
(export "_ZdaPv" (func $104))
(export "_ZnwjSt11align_val_t" (func $105))
(export "_ZnajSt11align_val_t" (func $106))
(export "_ZdlPvSt11align_val_t" (func $107))
(export "_ZdaPvSt11align_val_t" (func $108))
(table $0 18 18 anyfunc)
(elem (i32.const 1) $1 $70 $34 $65 $36 $32 $62 $47 $43 $37 $27 $58 $46 $45 $68 $134 $136)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 21952))
(global $global$2 i32 (i32.const 21952))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $99($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $113($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $113($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $109($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10596])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $22($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9983])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9903])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9903])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9903])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9903])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9903])
	CALL memcpy(*($0 + [4]), $4, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = *($4 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [9903])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($4, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [9983])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($4 + [8]) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $96 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [76]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10548])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6147546106350911488)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10494])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10494])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $60(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9983])
	CALL memcpy($2, *($3 + [4]), [4])
	$4 = (*($3 + [4]) + [4])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]), [9983])
	CALL memcpy(($2 + [4]), *($3 + [4]), [4])
	$4 = (*($3 + [4]) + [4])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]), [9983])
	CALL memcpy(($2 + [8]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9983])
	CALL memcpy($2, *($3 + [4]), [4])
	$4 = (*($3 + [4]) + [4])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]), [9983])
	CALL memcpy(($2 + [4]), *($3 + [4]), [4])
	$4 = (*($3 + [4]) + [4])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]), [9983])
	CALL memcpy(($2 + [8]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$0 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9983])
	CALL memcpy($0, *($3 + [4]), [4])
	$1 = (*($3 + [4]) + [4])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[3]), [9983])
	CALL memcpy(($0 + [4]), *($3 + [4]), [4])
	$1 = (*($3 + [4]) + [4])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[3]), [9983])
	CALL memcpy(($0 + [8]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9903])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9903])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9983])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *($6 + [60])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-8527970514705055744, ($4 + [8]), *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($7)
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *(($6 + [64]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = *($5)
	$7 = CALL db_idx_double_find_primary(*($7), *($7 + [8]), (int_64)-8527970514705055743, ($4 + [8]), *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx_double_remove($7)
	
.LABEL $label$3
	$7 = *($0)
	$5 = *($7 + [4])
	$0 = *(($5 + [68]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = *($7)
	$0 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-8527970514705055742, ($4 + [8]), *($5))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx_double_remove($0)
	
.LABEL $label$5
	$global$0 = ($4 + [16])
}

int_32 .FUNC $93 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [52]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10548])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-8527959324524806144)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10494])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10494])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $21(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $138 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $123 (int_32 $0)
{
}

void .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $122 ()
{
	return [10604]
}

int_64 .FUNC $130 (float_64 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	float_64 $4
	$1 = ($global$0 - [16])
	if ( ((float_64)$0 == (float_64)(float_64)0) ){ goto $label$1 }
	$2 = (CASTING int_64)(float_64 $0)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$3) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = (float_64))(( ((float_64)((float_64)$0 + (float_64)(float_64)-4503599627370496) + (float_64)(float_64)4503599627370496) ? ((float_64)((float_64)$0 + (float_64)(float_64)4503599627370496) + (float_64)(float_64)-4503599627370496) : ((int_64)$2 < (int_64)0) ) - $0)
	if ( ((uint_32)$3 > (uint_32)[1022]) ){ goto $label$2 }
	*($1 + [8]) = $4
	return (CASTING float_64)(int_32 (CASTING uint_32)(uint_64 (int_64)$2 >> (int_64)63)))
	
.LABEL $label$2
	$0 = ((float_64)$4 + (float_64)$0)
	if ( ((int_32)((float_64)$4 > (float_64)(float_64)0) ^ (int_32)[1]) ){ goto $label$1 }
	$0 = ((float_64)$0 + (float_64)(float_64)-1)
	
.LABEL $label$1
	return $0
}

int_64 .FUNC $131 (float_64 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	float_64 $4
	float_64 $5
	$1 = ($global$0 - [16])
	$2 = (CASTING int_64)(float_64 $0)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$3) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = ( !(float_64)$0 ? $0 : ((int_64)$2 < (int_64)0) )
	if ( ((uint_32)$3 > (uint_32)[1021]) ){ goto $label$2 }
	*($1 + [8]) = ((float_64)$4 + (float_64)(float_64)4503599627370496)
	return ((float_64)$0 * (float_64)(float_64)0)
	
.LABEL $label$2
	$5 = (float_64)
	if ( ((int_32)((float_64)$5(((float_64)((float_64)$4 + (float_64)(float_64)4503599627370496) + (float_64)(float_64)-4503599627370496) - $4)) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$4 }
	$0 = ((float_64)((float_64)$4 + (float_64)$5) + (float_64)(float_64)-1)
	goto $label$3 
	
.LABEL $label$4
	$0 = ((float_64)$4 + (float_64)$5)
	if ( ((int_32)((float_64)$5 <= (float_64)(float_64)-0.5) ^ (int_32)[1]) ){ goto $label$3 }
	$0 = ((float_64)$0 + (float_64)(float_64)1)
	
.LABEL $label$3
	$0 = ( !(float_64)$0 ? $0 : ((int_64)$2 < (int_64)0) )
	
.LABEL $label$1
	return $0
}

int_64 .FUNC $132 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_32 .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [16] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $135($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $135($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $135($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $135($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [21872]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $135($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $135($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $135($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $134 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

void .FUNC $121 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $136 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $133([17], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $120 (int_32 $0, float_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	float_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $114(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (PROMOTE float_64)(float_32 $1)
	$6 = (($2 + [16]) | [1])
	$7 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $5
	$3 = CALL $137(( *($7) ? $6 : ($3 & [1]) ), ($4 + [1]), [8798], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $114(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $114(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-8527959324524806143, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [9909])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $21($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)-8527959324524806144, $6))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [9909])
	
.LABEL $label$2
	*(($4 + [60])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $126 (float_64 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	float_64 $7
	float_64 $8
	float_64 $9
	int_32 $10
	float_64 $11
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = (CASTING int_64)(float_64 $0)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)63))
	$5 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$6 = ($5) & [2147483647]
	if ( ((uint_32)$6) > (uint_32)[1074752122]) ){ goto $label$13 }
	if ( ((int_32)($5 & [1048575]) == (int_32)[598523]) ){ goto $label$10 }
	if ( ((uint_32)$6 > (uint_32)[1073928572]) ){ goto $label$12 }
	if ( ($4 == 0) ){ goto $label$7 }
	$0 = ((float_64)$0 + (float_64)(float_64)1.5707963267341256)
	$7 = ((float_64)$0 + (float_64)(float_64)6.077100506506192e-11)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)6.077100506506192e-11)
	$global$0 = ($2 + [48])
	return [-1]
	
.LABEL $label$13
	if ( ((uint_32)$6 > (uint_32)[1075594811]) ){ goto $label$14 }
	if ( ((uint_32)$6 > (uint_32)[1075183036]) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)[1074977148]) ){ goto $label$10 }
	if ( ($4 == 0) ){ goto $label$5 }
	$0 = ((float_64)$0 + (float_64)(float_64)4.712388980202377)
	$7 = ((float_64)$0 + (float_64)(float_64)1.8231301519518578e-10)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)1.8231301519518578e-10)
	$global$0 = ($2 + [48])
	return [-3]
	
.LABEL $label$14
	if ( ((uint_32)$6 <= (uint_32)[1094263290]) ){ goto $label$10 }
	if ( ($6 <= [2146435072]) ){ goto $label$9 }
	$0 = (float_64)
	*($1) = $0($0 - $0))
	*($1 + [8]) = $0
	$global$0 = ($2 + [48])
	return [0]
	
.LABEL $label$12
	if ( ($4 == 0) ){ goto $label$6 }
	$0 = ((float_64)$0 + (float_64)(float_64)3.1415926534682512)
	$7 = ((float_64)$0 + (float_64)(float_64)1.2154201013012384e-10)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)1.2154201013012384e-10)
	$global$0 = ($2 + [48])
	return [-2]
	
.LABEL $label$11
	if ( ((int_32)$6 != (int_32)[1075388923]) ){ goto $label$8 }
	
.LABEL $label$10
	$9 = ((float_64)$7 * (float_64)(float_64)6.077100506506192e-11)
	$7 = ((float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.6366197723675814) + (float_64)(float_64)6755399441055744) + (float_64)(float_64)-6755399441055744)
	$8 = ((float_64)$0 + (float_64)((float_64)$7 * (float_64)(float_64)-1.5707963267341256))
	$0 = (float_64)
	*($1) = $0($8 - $9))
	$10 = uint_32($6 >> [20])
	$5 = ((int_32)($10 - ((CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $0) >> (uint_64)(int_64)52)) & [2047])) < (int_32)[17])
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)2147483648) ){ goto $label$17 }
	$6 = [-2147483648]
	if ( ($5 == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$6 = (CASTING int_32)(float_64 $7)
	if ( $5 ){ goto $label$15 }
	
.LABEL $label$16
	$9 = (float_64)
	$0 = ((float_64)$7 * (float_64)(float_64)6.077100506303966e-11)
	$11 = (float_64)
	$0 = (float_64)
	*($1) = $0($11($8 - $0)) - $9(((float_64)$7 * (float_64)(float_64)2.0222662487959506e-21) - (float_64))((float_64))($8 - $11) - $0)))))
	if ( ((int_32)($10 - ((CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $0) >> (uint_64)(int_64)52)) & [2047])) < (int_32)[50]) ){ goto $label$18 }
	$9 = (float_64)
	$0 = ((float_64)$7 * (float_64)(float_64)2.0222662487111665e-21)
	$8 = (float_64)
	$0 = (float_64)
	*($1) = $0($8($11 - $0)) - $9(((float_64)$7 * (float_64)(float_64)8.4784276603689e-32) - (float_64))((float_64))($11 - $8) - $0)))))
	goto $label$15 
	
.LABEL $label$18
	$8 = $11
	
.LABEL $label$15
	*($1 + [8]) = (float_64))((float_64))($8 - $0) - $9)
	$global$0 = ($2 + [48])
	return $6
	
.LABEL $label$9
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)$3 & (int_64)4503599627370495) | (int_64)4710765210229538816))
	$7 = (Rounds 0)($0)
	*($2 + [16]) = $7
	$0 = ((float_64)(float_64))($0 - $7) * (float_64)(float_64)16777216
	$7 = (Rounds 0)($0)
	*($2 + [24]) = $7)
	$0 = ((float_64)(float_64))($0 - $7) * (float_64)(float_64)16777216
	*($2 + [32]) = $0)
	if ( ((float_64)$0 != (float_64)(float_64)0) ){ goto $label$4 }
	$5 = (($2 + [16]) | [8])
	$10 = [2]
	
.LOOP $label$19:
	$10 = ($10 + [-1])
	$0 = *($5)
	$5 = ($5 + [-8])
	if ( ((float_64)$0 == (float_64)(float_64)0) ){ goto $label$19 }
	goto $label$3 
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$2 }
	$0 = ((float_64)$0 + (float_64)(float_64)6.2831853069365025)
	$7 = ((float_64)$0 + (float_64)(float_64)2.430840202602477e-10)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)2.430840202602477e-10)
	$global$0 = ($2 + [48])
	return [-4]
	
.LABEL $label$7
	$0 = ((float_64)$0 + (float_64)(float_64)-1.5707963267341256)
	$7 = ((float_64)$0 + (float_64)(float_64)-6.077100506506192e-11)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)-6.077100506506192e-11)
	$global$0 = ($2 + [48])
	return [1]
	
.LABEL $label$6
	$0 = ((float_64)$0 + (float_64)(float_64)-3.1415926534682512)
	$7 = ((float_64)$0 + (float_64)(float_64)-1.2154201013012384e-10)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)-1.2154201013012384e-10)
	$global$0 = ($2 + [48])
	return [2]
	
.LABEL $label$5
	$0 = ((float_64)$0 + (float_64)(float_64)-4.712388980202377)
	$7 = ((float_64)$0 + (float_64)(float_64)-1.8231301519518578e-10)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)-1.8231301519518578e-10)
	$global$0 = ($2 + [48])
	return [3]
	
.LABEL $label$4
	$10 = [2]
	
.LABEL $label$3
	$5 = CALL $125(($2 + [16]), $2, (uint_32($6 >> [20]) + [-1046]), ($10 + [1]), [1])
	$0 = *($2)
	if ( ($4 == 0) ){ goto $label$1 }
	*($1) = !(float_64)$0
	*($1 + [8]) = !(float_64)*($2 + [8])
	$global$0 = ($2 + [48])
	return ([0] - $5)
	
.LABEL $label$2
	$0 = ((float_64)$0 + (float_64)(float_64)-6.2831853069365025)
	$7 = ((float_64)$0 + (float_64)(float_64)-2.430840202602477e-10)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)-2.430840202602477e-10)
	$global$0 = ($2 + [48])
	return [4]
	
.LABEL $label$1
	*($1) = $0
	*($1 + [8]) = *($2 + [8])
	$global$0 = ($2 + [48])
	return $5
}

int_64 .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL require_auth(*($1))
	$4 = *($2)
	CALL eosio_assert(((int_32)( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ) == (int_32)[11]), [9578])
	*(($3 + [80])) = [0]
	*($3 + [64]) = (int_64)-1
	*($3 + [72]) = (int_64)0
	*($3 + [84]) = [0]
	$5 = *($0)
	*($3 + [48]) = $5
	*($3 + [56]) = $5
	*($3 + [40]) = ($3 + [48])
	CALL $52(($3 + [96]), ($3 + [40]), $1)
	$0 = *($3 + [100])
	if ( ($0 == 0) ){ goto $label$7 }
	if ( ((int_64)*($1) != (int_64)*($0 + [8])) ){ goto $label$7 }
	$5 = *($3 + [96])
	*($3 + [32]) = $5
	$4 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	if ( ($4) == 0) ){ goto $label$6 }
	$6 = ($2 + [1])
	$7 = ($2 + [4])
	$8 = ($2 + [8])
	
.LOOP $label$8:
	if ( ((int_64)*($4 + [8]) != (int_64)*($1)) ){ goto $label$6 }
	$0 = ($0 & [1])
	$0 = *($2)
	$10 = ($0 & [1])
	$0 = *($4 + [16])
	$9 = uint_32($0 >> [1])
	$11 = ( *(($4 + [20])) ? $9 : $10 )
	if ( ((int_32)$11 != (int_32)( *($7) ? uint_32($0 >> [1]) : $0 )) ){ goto $label$9 }
	$12 = ( *($8) ? $6 : $0 )
	if ( $10 ){ goto $label$10 }
	if ( ($11 == 0) ){ goto $label$4 }
	$0 = [0]
	
.LOOP $label$11:
	if ( ((int_32)*((($4 + $0) + [17])) != (int_32)*(($12 + $0))) ){ goto $label$9 }
	$0 = ($0 + [1])
	if ( ((int_32)$9 != (int_32)$0) ){ goto $label$11 }
	goto $label$4 
	
.LABEL $label$10
	if ( ($11 == 0) ){ goto $label$4 }
	if ( (CALL $138(( *(($4 + [24])) ? (($4 + [16]) + [1]) : $10 ), $12, $11) == 0) ){ goto $label$5 }
	
.LABEL $label$9
	CALL $53(($3 + [32]))
	$4 = *($3 + [36])
	if ( $4 ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	*($3 + [36]) = [0]
	*($3 + [32]) = ($3 + [40])
	
.LABEL $label$6
	$0 = ($3 + [64])
	$5 = *($0)
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$12 }
	$5 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($3 + [48]), *(($3 + [56])), (int_64)-5970682390358523904, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	CALL $54(($3 + [48]), $4)
	*($3 + [100]) = [0]
	*($3 + [96]) = ($3 + [48])
	$5 = *(*(CALL $55(($3 + [96])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*(($3 + [64])) = $5
	
.LABEL $label$12
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [10442])
	*($3 + [24]) = *($0)
	$5 = *($1)
	*($3 + [12]) = $1
	*($3 + [16]) = $2
	*($3 + [8]) = ($3 + [24])
	*($3 + [120]) = $5
	CALL eosio_assert(((int_64)*($3 + [48]) == (int_64)CALL $fimport$7()), [10200])
	*($3 + [100]) = ($3 + [8])
	*($3 + [96]) = ($3 + [48])
	*($3 + [104]) = ($3 + [120])
	*(($0 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($0 + [16 align=4]) = (int_64)0
	*($0 + [24]) = [0]
	*($0 + [28]) = ($3 + [48])
	CALL $56(($3 + [96]), $0)
	*($3 + [112]) = $0
	$5 = *($0)
	*($3 + [96]) = $5
	$1 = *($0 + [32])
	*($3 + [92]) = $1
	$2 = ($3 + [76])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($3 + [80]))) ){ goto $label$15 }
	*($4 + [8]) = $5
	*($4 + [16]) = $1
	*($3 + [112]) = [0]
	*($4) = $0
	*($2) = ($4 + [24])
	$0 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( ($0 == 0) ){ goto $label$14 }
	goto $label$3 
	
.LABEL $label$15
	CALL $57(($3 + [72]), ($3 + [112]), ($3 + [96]), ($3 + [92]))
	$0 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( $0 ){ goto $label$3 }
	
.LABEL $label$14
	$5 = *($3 + [24])
	$1 = *($3 + [72])
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	$4 = *($3 + [36])
	
.LABEL $label$4
	$5 = *($4)
	$1 = *($3 + [72])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((*($0 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($0 + [24])))
	
.LABEL $label$16
	CALL _ZdlPv($0)
	$5 = *($3 + [24])
	$1 = *($3 + [72])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = ($3 + [76])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$21
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$19 }
	$0 = *(($3 + [72]))
	goto $label$17 
	
.LABEL $label$18
	$0 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($3 + [128])
	return $5
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	float_32 $6
	$4 = [0]
	$5 = [0]
	$6 = *($1)
	if ( ((int_32)((float_32)$6 > (float_32)(float_32)0) ^ (int_32)[1]) ){ goto $label$1 }
	$5 = [0]
	if ( ((float_32)*($1 + [4]) != (float_32)(float_32)0) ){ goto $label$1 }
	$5 = [0]
	if ( ((int_32)((float_32)$6 < (float_32)(float_32)1) ^ (int_32)[1]) ){ goto $label$1 }
	$5 = [0]
	$6 = *($1 + [8])
	if ( ((int_32)((float_32)$6 > (float_32)(float_32)0) ^ (int_32)[1]) ){ goto $label$1 }
	$5 = ((float_32)$6 < (float_32)(float_32)1)
	
.LABEL $label$1
	CALL eosio_assert($5, [9461])
	$6 = *($2)
	if ( ((int_32)((float_32)$6 >= (float_32)(float_32)0) ^ (int_32)[1]) ){ goto $label$2 }
	if ( ((int_32)((float_32)$6 < (float_32)(float_32)360) ^ (int_32)[1]) ){ goto $label$2 }
	$6 = *($2 + [4])
	if ( ((int_32)((float_32)$6 >= (float_32)(float_32)0) ^ (int_32)[1]) ){ goto $label$2 }
	if ( ((int_32)((float_32)$6 < (float_32)(float_32)360) ^ (int_32)[1]) ){ goto $label$2 }
	$6 = *($2 + [8])
	if ( ((int_32)((float_32)$6 >= (float_32)(float_32)0) ^ (int_32)[1]) ){ goto $label$2 }
	$4 = ((float_32)$6 < (float_32)(float_32)360)
	
.LABEL $label$2
	CALL eosio_assert($4, [9502])
	$5 = [0]
	if ( ((int_32)((float_64)(PROMOTE float_64)(float_32 *($3)) >= (float_64)(float_64)0.2) ^ (int_32)[1]) ){ goto $label$3 }
	if ( ((int_32)((float_64)(PROMOTE float_64)(float_32 *($3 + [4])) >= (float_64)(float_64)0.2) ^ (int_32)[1]) ){ goto $label$3 }
	$5 = ((float_64)(PROMOTE float_64)(float_32 *($3 + [8])) >= (float_64)(float_64)0.2)
	
.LABEL $label$3
	CALL eosio_assert($5, [9545])
}

int_32 .FUNC $125 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	float_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	float_64 $24
	int_32 $25
	int_32 $26
	int_32 $27
	float_64 $28
	float_64 $29
	$5 = ($global$0 - [560])
	$global$0 = $5
	$6 = ((int_32)($2 + [-3]) / (int_32)[24])
	$7 = ( $6 ? [0] : ((int_32)$6 > (int_32)[0]) )
	$8 = ($2 + ((int_32)$7 * (int_32)[-24]))
	$2 = ($3 + [-1])
	$9 = *((($4 << [2]) + [19024]))
	if ( ((int_32)($9 + $2) < (int_32)[0]) ){ goto $label$1 }
	$10 = ($9 + $3)
	$2 = ($7 - $2)
	$11 = (((($7 + [1]) - $3) << [2]) + [19040])
	$6 = ($5 + [320])
	
.LOOP $label$2:
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$12 = (CASTING float_64)(int_32 *($11))
	goto $label$3 
	
.LABEL $label$4
	$12 = (float_64)0
	
.LABEL $label$3
	*($6) = $12
	$6 = ($6 + [8])
	$11 = ($11 + [4])
	$2 = ($2 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$2 }
	
.LABEL $label$1
	$13 = ($8 + [-24])
	if ( ((int_32)$3 <= (int_32)[0]) ){ goto $label$6 }
	$14 = ((($5 + [320]) + ($3 << [3])) + [-8])
	$10 = [0]
	
.LOOP $label$7:
	$12 = (float_64)0
	$2 = $0
	$11 = $3
	$6 = $14
	
.LOOP $label$8:
	$12 = ((float_64)$12 + (float_64)((float_64)*($2) * (float_64)*($6)))
	$2 = ($2 + [8])
	$6 = ($6 + [-8])
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$8 }
	*(($5 + ($10 << [3]))) = $12
	$14 = ($14 + [8])
	$2 = ((int_32)$10 < (int_32)$9)
	$10 = ($10 + [1])
	if ( $2 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$6 = [-1]
	$2 = $5
	
.LOOP $label$9:
	*($2) = (int_64)0
	$2 = ($2 + [8])
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$5
	$15 = ([23] - $13)
	$16 = ([24] - $13)
	$17 = ((($5 + [480]) + ($9 << [2])) + [-4])
	$18 = ($5 | [8])
	$19 = (($5 + [480]) + [-4])
	$20 = ($5 + [-8])
	$21 = ((int_32)$3 > (int_32)[0])
	$11 = $9
	
.LOOP $label$10:
	$22 = ($11 << [3])
	$12 = *(($5 + $22))
	$23 = ((int_32)$11 < (int_32)[1])
	if ( $23 ){ goto $label$11 }
	$10 = ($11 + [1])
	$2 = ($20 + $22)
	$6 = ($5 + [480])
	
.LOOP $label$12:
	$24 = (Rounds 0)(((float_64)$12 * (float_64)(float_64)5.9604644775390625e-08))
	$12 = ((float_64)$12 + (float_64)((float_64)$24 * (float_64)(float_64)-16777216))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)2147483648) ){ goto $label$14 }
	$14 = [-2147483648]
	goto $label$13 
	
.LABEL $label$14
	$14 = (CASTING int_32)(float_64 $12)
	
.LABEL $label$13
	*($6) = $14
	$6 = ($6 + [4])
	$12 = ((float_64)*($2) + (float_64)$24)
	$2 = ($2 + [-8])
	$10 = ($10 + [-1])
	if ( ((int_32)$10 > (int_32)[1]) ){ goto $label$12 }
	
.LABEL $label$11
	$12 = CALL $132($12, $13)
	$12 = ((float_64)$12 + (float_64)((float_64)CALL $130(((float_64)$12 * (float_64)(float_64)0.125)) * (float_64)(float_64)-8))
	$24 = (Rounds 0)($12)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)2147483648) ){ goto $label$23 }
	$25 = [-2147483648]
	$12 = (float_64))($12 - $24)
	$26 = ((int_32)$13 < (int_32)[1])
	if ( ($26 == 0) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$25 = (CASTING int_32)(float_64 $12)
	$12 = (float_64))($12 - $24)
	$26 = ((int_32)$13 < (int_32)[1])
	if ( $26 ){ goto $label$21 }
	
.LABEL $label$22
	$2 = int_32($2 >> $16)
	$2 = *($2)
	$6 = ($2 - ($2 << $16))
	*(($2 = ((($5 + [480]) + ($11 << [2])) + [-4]))) = $6
	$25 = ($2 + $25)
	$27 = int_32($6 >> $15)
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	if ( ($13 == 0) ){ goto $label$24 }
	$27 = [2]
	if ( (((int_32)((float_64)$12 >= (float_64)(float_64)0.5) ^ (int_32)[1]) == 0) ){ goto $label$20 }
	$27 = [0]
	if ( ((float_64)$12 != (float_64)(float_64)0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$24
	$27 = int_32(*(((($5 + [480]) + ($11 << [2])) + [-4])) >> [23])
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$19 }
	
.LABEL $label$20
	if ( $23 ){ goto $label$26 }
	$23 = [0]
	$2 = ($5 + [480])
	$14 = $11
	
.LOOP $label$27:
	$6 = *($2)
	$10 = [16777215]
	if ( $23 ){ goto $label$29 }
	if ( ($6 == 0) ){ goto $label$28 }
	$23 = [1]
	$10 = [16777216]
	
.LABEL $label$29
	*($2) = ($10 - $6)
	$2 = ($2 + [4])
	$14 = ($14 + [-1])
	if ( $14 ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$28
	$23 = [0]
	$2 = ($2 + [4])
	$14 = ($14 + [-1])
	if ( $14 ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$23 = [0]
	
.LABEL $label$25
	if ( $26 ){ goto $label$32 }
	if ( ((int_32)$13 == (int_32)[2]) ){ goto $label$31 }
	if ( ((int_32)$13 != (int_32)[1]) ){ goto $label$32 }
	*(($2 = ((($5 + [480]) + ($11 << [2])) + [-4]))) = (*($2) & [8388607])
	
.LABEL $label$32
	$25 = ($25 + [1])
	if ( ((int_32)$27 != (int_32)[2]) ){ goto $label$19 }
	goto $label$30 
	
.LABEL $label$31
	*(($2 = ((($5 + [480]) + ($11 << [2])) + [-4]))) = (*($2) & [4194303])
	$25 = ($25 + [1])
	if ( ((int_32)$27 != (int_32)[2]) ){ goto $label$19 }
	
.LABEL $label$30
	$12 = (float_64))((float_64)1 - $12)
	$27 = [2]
	if ( ($23 == 0) ){ goto $label$19 }
	$12 = (float_64)
	if ( ((float_64)$12($12 - CALL $132((float_64)1, $13))) == (float_64)(float_64)0) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((float_64)$12 == (float_64)(float_64)0) ){ goto $label$17 }
	
.LABEL $label$18
	$12 = CALL $132($12, ([0] - $13))
	if ( (((int_32)((float_64)$12 >= (float_64)(float_64)16777216) ^ (int_32)[1]) == 0) ){ goto $label$37 }
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)2147483648) ){ goto $label$36 }
	$2 = [-2147483648]
	goto $label$33 
	
.LABEL $label$37
	$2 = (($5 + [480]) + ($11 << [2]))
	$24 = ((float_64)$12 * (float_64)(float_64)5.9604644775390625e-08)
	$12 = ((float_64)$12 + (float_64)((float_64)(Rounds 0)($24) * (float_64)(float_64)-16777216))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)2147483648) ){ goto $label$35 }
	$6 = [-2147483648]
	goto $label$34 
	
.LABEL $label$36
	$2 = (CASTING int_32)(float_64 $12)
	goto $label$33 
	
.LABEL $label$35
	$6 = (CASTING int_32)(float_64 $12)
	
.LABEL $label$34
	*($2) = $6
	$11 = ($11 + [1])
	if ( ((float_64)(float_64)|$24| < (float_64)(float_64)2147483648) ){ goto $label$39 }
	$2 = [-2147483648]
	goto $label$38 
	
.LABEL $label$39
	$2 = (CASTING int_32)(float_64 $24)
	
.LABEL $label$38
	$13 = $8
	
.LABEL $label$33
	*((($5 + [480]) + ($11 << [2]))) = $2
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$11 <= (int_32)$9) ){ goto $label$41 }
	$2 = ($19 + ($11 << [2]))
	$6 = [0]
	$10 = $11
	
.LOOP $label$42:
	$6 = (*($2) | $6)
	$2 = ($2 + [-4])
	$10 = ($10 + [-1])
	if ( ((int_32)$10 > (int_32)$9) ){ goto $label$42 }
	if ( $6 ){ goto $label$40 }
	
.LABEL $label$41
	$2 = $17
	$14 = $11
	
.LOOP $label$43:
	$14 = ($14 + [1])
	$6 = *($2)
	$2 = ($2 + [-4])
	if ( ($6 == 0) ){ goto $label$43 }
	if ( ($21 == 0) ){ goto $label$44 }
	$2 = ($11 + [1])
	$23 = (($5 + [320]) + (($3 + $11) << [3]))
	
.LOOP $label$45:
	$10 = $2
	*((($5 + [320]) + (($11 + $3) << [3]))) = (CASTING float_64)(int_32 *(((($10 + $7) << [2]) + [19040])))
	$12 = (float_64)0
	$2 = $0
	$6 = $23
	$11 = $3
	
.LOOP $label$46:
	$12 = ((float_64)$12 + (float_64)((float_64)*($2) * (float_64)*($6)))
	$2 = ($2 + [8])
	$6 = ($6 + [-8])
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$46 }
	*(($5 + ($10 << [3]))) = $12
	$23 = ($23 + [8])
	$2 = ($10 + [1])
	$11 = $10
	if ( ((int_32)$10 < (int_32)$14) ){ goto $label$45 }
	goto $label$15 
	
.LABEL $label$44
	$2 = ($18 + $22)
	$6 = ((($7 + $11) << [2]) + [19044])
	$10 = (($5 + [320]) + (($3 + $11) << [3]))
	
.LOOP $label$47:
	*($2) = (int_64)0
	*($10) = (CASTING float_64)(int_32 *($6))
	$6 = ($6 + [4])
	$2 = ($2 + [8])
	$10 = ($10 + [8])
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)$14) ){ goto $label$47 }
	$11 = $14
	goto $label$10 
	
.LABEL $label$40
	$2 = ((($5 + [480]) + ($11 << [2])) + [-4])
	
.LOOP $label$48:
	$11 = ($11 + [-1])
	$13 = ($13 + [-24])
	$6 = *($2)
	$2 = ($2 + [-4])
	if ( ($6 == 0) ){ goto $label$48 }
	
.LABEL $label$16
	$12 = CALL $132((float_64)1, $13)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$49 }
	$10 = ($11 + [1])
	$2 = ($5 + ($11 << [3]))
	$6 = (($5 + [480]) + ($11 << [2]))
	
.LOOP $label$50:
	*($2) = ((float_64)$12 * (float_64)(CASTING float_64)(int_32 *($6)))
	$2 = ($2 + [-8])
	$6 = ($6 + [-4])
	$12 = ((float_64)$12 * (float_64)(float_64)5.9604644775390625e-08)
	$10 = ($10 + [-1])
	if ( ((int_32)$10 > (int_32)[0]) ){ goto $label$50 }
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$49 }
	$14 = ($5 + ($11 << [3]))
	$2 = $11
	
.LOOP $label$51:
	$3 = $2
	$23 = ($11 - $3)
	$12 = (float_64)0
	$2 = [0]
	$6 = [0]
	
.LOOP $label$53:
	$12 = ((float_64)$12 + (float_64)((float_64)*(($2 + [21808])) * (float_64)*(($14 + $2))))
	if ( ((int_32)$6 >= (int_32)$9) ){ goto $label$52 }
	$2 = ($2 + [8])
	$10 = ($6 <= $23)
	$6 = ($6 + [1])
	if ( $10 ){ goto $label$53 }
	
.LABEL $label$52
	*((($5 + [160]) + ($23 << [3]))) = $12
	$14 = ($14 + [-8])
	$2 = ($3 + [-1])
	if ( ((int_32)$3 > (int_32)[0]) ){ goto $label$51 }
	
.LABEL $label$49
	if ( (($4 + [-1]) <= [2]) ){ goto $label$61 }
	if ( ($4 == 0) ){ goto $label$60 }
	if ( ((int_32)$4 != (int_32)[3]) ){ goto $label$54 }
	$28 = (float_64)0
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$62 }
	$6 = ($11 + [1])
	$10 = (($5 + [160]) + ($11 << [3]))
	$2 = ($10 + [-8])
	$12 = *($10)
	
.LOOP $label$63:
	$29 = *($2)
	$24 = ((float_64)$29 + (float_64)$12)
	*($2) = $24
	*(($2 + [8])) = ((float_64)$12 + (float_64)(float_64))($29 - $24))
	$2 = ($2 + [-8])
	$12 = $24
	$6 = ($6 + [-1])
	if ( ((int_32)$6 > (int_32)[1]) ){ goto $label$63 }
	if ( ((int_32)$11 < (int_32)[2]) ){ goto $label$62 }
	$6 = ($11 + [1])
	$10 = (($5 + [160]) + ($11 << [3]))
	$2 = ($10 + [-8])
	$12 = *($10)
	
.LOOP $label$64:
	$29 = *($2)
	$24 = ((float_64)$29 + (float_64)$12)
	*($2) = $24
	*(($2 + [8])) = ((float_64)$12 + (float_64)(float_64))($29 - $24))
	$2 = ($2 + [-8])
	$12 = $24
	$6 = ($6 + [-1])
	if ( ((int_32)$6 > (int_32)[2]) ){ goto $label$64 }
	if ( ((int_32)$11 < (int_32)[2]) ){ goto $label$62 }
	$6 = ($11 + [1])
	$2 = (($5 + [160]) + ($11 << [3]))
	$28 = (float_64)0
	
.LOOP $label$65:
	$28 = ((float_64)$28 + (float_64)*($2))
	$2 = ($2 + [-8])
	$6 = ($6 + [-1])
	if ( ((int_32)$6 > (int_32)[2]) ){ goto $label$65 }
	
.LABEL $label$62
	$12 = *($5 + [160])
	if ( ($27 == 0) ){ goto $label$57 }
	*($1) = !(float_64)$12
	*($1 + [8]) = !(float_64)*($5 + [168])
	*($1 + [16]) = !(float_64)$28
	goto $label$54 
	
.LABEL $label$61
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$59 }
	$6 = ($11 + [1])
	$2 = (($5 + [160]) + ($11 << [3]))
	$12 = (float_64)0
	
.LOOP $label$66:
	$12 = ((float_64)$12 + (float_64)*($2))
	$2 = ($2 + [-8])
	$6 = ($6 + [-1])
	if ( ((int_32)$6 > (int_32)[0]) ){ goto $label$66 }
	goto $label$58 
	
.LABEL $label$60
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$56 }
	$6 = ($11 + [1])
	$2 = (($5 + [160]) + ($11 << [3]))
	$12 = (float_64)0
	
.LOOP $label$67:
	$12 = ((float_64)$12 + (float_64)*($2))
	$2 = ($2 + [-8])
	$6 = ($6 + [-1])
	if ( ((int_32)$6 > (int_32)[0]) ){ goto $label$67 }
	goto $label$55 
	
.LABEL $label$59
	$12 = (float_64)0
	
.LABEL $label$58
	*($1) = ( !(float_64)$12 ? $12 : $27 )
	$12 = (float_64))(*($5 + [160]) - $12)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$68 }
	$2 = (($5 + [160]) | [8])
	
.LOOP $label$69:
	$12 = ((float_64)$12 + (float_64)*($2))
	$2 = ($2 + [8])
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$69 }
	
.LABEL $label$68
	*($1 + [8]) = ( !(float_64)$12 ? $12 : $27 )
	goto $label$54 
	
.LABEL $label$57
	*($1) = $12
	*($1 + [8]) = *($5 + [168])
	*($1 + [16]) = $28
	goto $label$54 
	
.LABEL $label$56
	$12 = (float_64)0
	
.LABEL $label$55
	*($1) = ( !(float_64)$12 ? $12 : $27 )
	
.LABEL $label$54
	$global$0 = ($5 + [560])
	return ($25 & [7])
	
.LABEL $label$15
	$11 = $14
	return goto $label$10
}

void .FUNC $43 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [160])
	$global$0 = $2
	*(($2 + [144])) = [0]
	*($2 + [128]) = (int_64)-1
	*($2 + [136]) = (int_64)0
	*($2 + [148]) = [0]
	$3 = *($0)
	*($2 + [112]) = $3
	*($2 + [120]) = $3
	$5 = CALL $44(($2 + [112]), $1, [8774])
	*(($4 = (($2 + [96]) + [8]))) = *(($5 + [40]))
	*($2 + [96]) = *($5 + [32])
	$1 = *($5 + [16])
	$6 = *($5 + [8])
	$3 = *($5)
	$7 = *($5 + [24])
	CALL require_auth($7)
	*((($2 + [64]) + [8])) = [0]
	*((($2 + [80]) + [8])) = *($4)
	*($2 + [64]) = (int_64)0
	*($2 + [80]) = *($2 + [96])
	$8 = *($0)
	$5 = CALL $139([8801])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$4 }
	*($2 + [64]) = ($5 << [1])
	$4 = (($2 + [64]) | [1])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$9 = (($5 + [16]) & [-16])
	$4 = CALL _Znwj($9)
	*($2 + [64]) = ($9 | [1])
	*($2 + [72]) = $4
	*($2 + [68]) = $5
	
.LABEL $label$3
	CALL memcpy($4, [8801], $5)
	
.LABEL $label$2
	*(($4 + $5)) = [0]
	*((($2 + [8]) + [8])) = *((($2 + [80]) + [8]))
	*($2 + [8]) = *($2 + [80])
	CALL $9($0, $8, $7, ($2 + [8]), ($2 + [64]))
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($2 + [72]))
	
.LABEL $label$5
	*(($2 + [56])) = [0]
	*(($2 + [62])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	*($2 + [60]) = [0]
	$7 = *($0)
	*($2 + [24]) = $7
	*($2 + [32]) = $7
	$5 = CALL $10(($2 + [24]), CALL $fimport$3($7, $7, (int_64)-8527970514705055744, $6))
	CALL eosio_assert(((int_32)*($5 + [52]) == (int_32)($2 + [24])), [9909])
	CALL require_recipient(*($5 + [8]))
	$0 = *(($2 + [52]))
	$9 = *($2 + [48])
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$7 }
	
.LOOP $label$9:
	$5 = ($0 + [-24])
	$4 = *($5)
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$8 }
	$0 = $5
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($4 + [52]) == (int_32)($2 + [24])), [9909])
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	$5 = CALL db_find_i64(*($2 + [24]), *(($2 + [32])), (int_64)-8527970514705055744, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$4 = CALL $10(($2 + [24]), $5)
	CALL eosio_assert(((int_32)*($4 + [52]) == (int_32)($2 + [24])), [9909])
	
.LABEL $label$6
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [9988])
	CALL eosio_assert($5, [10022])
	$5 = CALL db_next_i64(*($4 + [56]), ($2 + [152]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	CALL $10(($2 + [24]), $5)
	
.LABEL $label$10
	CALL $11(($2 + [24]), $4)
	$0 = *(($2 + [140]))
	$9 = *(($2 + [136]))
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$14:
	$5 = ($0 + [-24])
	$4 = *($5)
	if ( ((int_64)*($4) == (int_64)$3) ){ goto $label$13 }
	$0 = $5
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)($2 + [112])), [9909])
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	$5 = CALL db_find_i64(*($2 + [112]), *(($2 + [120])), (int_64)-8527959324524806144, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$11 }
	$4 = CALL $21(($2 + [112]), $5)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)($2 + [112])), [9909])
	
.LABEL $label$11
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [9988])
	CALL eosio_assert($5, [10022])
	$5 = CALL db_next_i64(*($4 + [52]), ($2 + [152]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$15 }
	CALL $21(($2 + [112]), $5)
	
.LABEL $label$15
	CALL $13(($2 + [112]), $4)
	$4 = *($2 + [48])
	if ( ($4 == 0) ){ goto $label$16 }
	$9 = ($2 + [52])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$20 }
	CALL _ZdlPv($0)
	
.LABEL $label$20
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$19 }
	$5 = *(($2 + [48]))
	goto $label$17 
	
.LABEL $label$18
	$5 = $4
	
.LABEL $label$17
	*($9) = $4
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$4 = *($2 + [136])
	if ( ($4 == 0) ){ goto $label$21 }
	$9 = ($2 + [140])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$23 }
	
.LOOP $label$24:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$25 }
	CALL _ZdlPv($0)
	
.LABEL $label$25
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$24 }
	$5 = *(($2 + [136]))
	goto $label$22 
	
.LABEL $label$23
	$5 = $4
	
.LABEL $label$22
	*($9) = $4
	CALL _ZdlPv($5)
	
.LABEL $label$21
	$global$0 = ($2 + [160])
	return (unreachable)
	
.LABEL $label$1
	CALL $109(($2 + [64]))
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-8527959324524806144, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $21($6, $8)
	*($3 + [28]) = [0]
	*($3 + [24]) = $6
	$7 = *(*(CALL $93(($3 + [24])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [10442])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [24]) = *(*($5 + [12]))
	$5 = *($5 + [16])
	*(($1 + [40])) = *(($5 + [8]))
	*($1 + [32]) = *($5)
	$6 = $2
	$5 = ($6 + [-48])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = $6
	*($3 + [16]) = $3
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	$2 = ($1 + [24])
	*($3 + [36]) = $2
	*($3 + [40]) = ($1 + [32])
	CALL $94(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($4 + [8]), (int_64)-8527959324524806144, *(*($0 + [8])), $7, $5, [48])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$5 = ($4 + [8])
	$7 = *($5)
	$0 = *(($0 + [8]))
	$9 = *($0)
	$10 = *($1)
	*($3 + [24]) = *($6)
	*($1 + [56]) = CALL db_idx64_store($7, (int_64)-8527959324524806144, $9, $10, ($3 + [24]))
	$7 = *($0)
	$9 = *($5)
	$10 = *($1)
	*($3 + [24]) = *($2)
	*(($1 + [60])) = CALL db_idx64_store($9, (int_64)-8527959324524806143, $7, $10, ($3 + [24]))
	$global$0 = ($3 + [48])
}

int_32 .FUNC $40 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [56]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10548])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-8527970514705055744)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10494])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10494])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $10(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $47 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$6 = ($global$0 - [144])
	$global$0 = $6
	*($6 + [56]) = $1
	*(($7 = ($6 + [96]))) = [0]
	*(($6 + [102])) = [0]
	*($6 + [80]) = (int_64)-1
	*($6 + [88]) = (int_64)0
	*($6 + [100]) = [0]
	$8 = *($0)
	*($6 + [64]) = $8
	*($6 + [72]) = $8
	$1 = *(CALL $28(($6 + [64]), $1, [8602]) + [8])
	CALL require_auth($1)
	$9 = *($6 + [88])
	if ( ($9 == 0) ){ goto $label$1 }
	$10 = ($6 + [92])
	$11 = *($10)
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$4:
	$11 = ($11 + [-24])
	$12 = *($11)
	*($11) = [0]
	if ( ($12 == 0) ){ goto $label$5 }
	CALL _ZdlPv($12)
	
.LABEL $label$5
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$4 }
	$11 = *(($6 + [88]))
	goto $label$2 
	
.LABEL $label$3
	$11 = $9
	
.LABEL $label$2
	*($10) = $9
	CALL _ZdlPv($11)
	
.LABEL $label$1
	*($6 + [48]) = $1
	CALL $48($6, $3, $4, $5)
	*($6 + [40]) = (int_64)1
	*($6 + [32]) = CALL $49($0, ($6 + [48]), $2)
	*($7) = [0]
	*($6 + [80]) = (int_64)-1
	*($6 + [88]) = (int_64)0
	*($6 + [100]) = [0]
	$1 = *($0)
	*($6 + [64]) = $1
	*($6 + [72]) = $1
	$8 = *($6 + [48])
	*($6 + [16]) = $3
	*($6 + [20]) = $4
	*($6 + [24]) = $5
	*($6 + [4]) = ($6 + [56])
	*($6) = ($6 + [64])
	*($6 + [8]) = ($6 + [40])
	*($6 + [12]) = ($6 + [32])
	*($6 + [136]) = $8
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$7()), [10200])
	*($6 + [116]) = $6
	*($6 + [112]) = ($6 + [64])
	*($6 + [120]) = ($6 + [136])
	*(($11 = CALL _Znwj([88])) + [72]) = ($6 + [64])
	CALL $50(($6 + [112]), $11)
	*($6 + [128]) = $11
	$1 = *($11)
	*($6 + [112]) = $1
	$9 = *($11 + [76])
	*($6 + [108]) = $9
	$0 = ($6 + [92])
	$12 = *($0)
	if ( ((uint_32)$12 >= (uint_32)*($7)) ){ goto $label$8 }
	*($12 + [8]) = $1
	*($12 + [16]) = $9
	*($6 + [128]) = [0]
	*($12) = $11
	*($0) = ($12 + [24])
	$11 = *($6 + [128])
	*($6 + [128]) = [0]
	if ( $11 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $51(($6 + [88]), ($6 + [128]), ($6 + [112]), ($6 + [108]))
	$11 = *($6 + [128])
	*($6 + [128]) = [0]
	if ( ($11 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($11)
	
.LABEL $label$6
	$9 = *($6 + [88])
	if ( ($9 == 0) ){ goto $label$9 }
	$0 = ($6 + [92])
	$11 = *($0)
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$11 }
	
.LOOP $label$12:
	$11 = ($11 + [-24])
	$12 = *($11)
	*($11) = [0]
	if ( ($12 == 0) ){ goto $label$13 }
	CALL _ZdlPv($12)
	
.LABEL $label$13
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$12 }
	$11 = *(($6 + [88]))
	goto $label$10 
	
.LABEL $label$11
	$11 = $9
	
.LABEL $label$10
	*($0) = $9
	CALL _ZdlPv($11)
	
.LABEL $label$9
	$global$0 = ($6 + [144])
}

void .FUNC $46 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [288])
	$global$0 = $3
	*((($3 + [104]) + [32])) = [0]
	*($3 + [120]) = (int_64)-1
	*($3 + [128]) = (int_64)0
	*($3 + [140]) = [0]
	$4 = *($0)
	*($3 + [104]) = $4
	*($3 + [112]) = $4
	$5 = CALL $44(($3 + [104]), $1, [8774])
	$6 = *($5 + [32])
	$7 = *($5 + [24])
	$1 = *($5 + [16])
	$4 = *($5)
	$8 = *(($5 + [40]))
	$9 = *($5 + [8])
	*((($3 + [144]) + [32])) = [0]
	*(($3 + [182])) = [0]
	*($3 + [160]) = (int_64)-1
	*($3 + [168]) = (int_64)0
	*($3 + [180]) = [0]
	$10 = *($0)
	*($3 + [144]) = $10
	*($3 + [152]) = $10
	$10 = *(CALL $28(($3 + [144]), $9, [8602]) + [8])
	CALL require_auth($10)
	$11 = *($3 + [168])
	if ( ($11 == 0) ){ goto $label$1 }
	$12 = ($3 + [172])
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$3 }
	
.LOOP $label$4:
	$5 = ($5 + [-24])
	$13 = *($5)
	*($5) = [0]
	if ( ($13 == 0) ){ goto $label$5 }
	CALL _ZdlPv($13)
	
.LABEL $label$5
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$4 }
	$5 = *(($3 + [168]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $11
	
.LABEL $label$2
	*($12) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$1
	CALL require_recipient($7)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$8), [9844])
	CALL eosio_assert(((int_64)*($2) == (int_64)$6), [8840])
	*(($3 + [80])) = [0]
	*($3 + [88]) = $6
	*($3 + [96]) = $8
	*($3 + [72]) = (int_64)0
	$6 = *($0)
	$5 = CALL $139([8879])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$9 }
	*($3 + [72]) = ($5 << [1])
	$13 = (($3 + [72]) | [1])
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$11 = (($5 + [16]) & [-16])
	$13 = CALL _Znwj($11)
	*($3 + [72]) = ($11 | [1])
	*($3 + [80]) = $13
	*($3 + [76]) = $5
	
.LABEL $label$8
	CALL memcpy($13, [8879], $5)
	
.LABEL $label$7
	*(($13 + $5)) = [0]
	*((($3 + [8]) + [8])) = *((($3 + [88]) + [8]))
	*($3 + [8]) = *($3 + [88])
	CALL $9($0, $6, $10, ($3 + [8]), ($3 + [72]))
	if ( ((*($3 + [72]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($3 + [80]))
	
.LABEL $label$10
	*(($3 + [64])) = [0]
	*(($3 + [70])) = [0]
	*($3 + [48]) = (int_64)-1
	*($3 + [56]) = (int_64)0
	*($3 + [68]) = [0]
	$6 = *($0)
	*($3 + [32]) = $6
	*($3 + [40]) = $6
	$5 = CALL $28(($3 + [32]), $9, [8432])
	$12 = *($5 + [48])
	$8 = *($5 + [40])
	$9 = *($5 + [32])
	$7 = *($5 + [24])
	$10 = *($5 + [16])
	$6 = *($5)
	*($3 + [24]) = $6
	$13 = *(($3 + [60]))
	$2 = *($3 + [56])
	if ( ((int_32)$2 == (int_32)$13) ){ goto $label$12 }
	
.LOOP $label$14:
	$5 = ($13 + [-24])
	$11 = *($5)
	if ( ((int_64)*($11) == (int_64)$6) ){ goto $label$13 }
	$13 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$2 == (int_32)$13) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*($11 + [52]) == (int_32)($3 + [32])), [9909])
	goto $label$11 
	
.LABEL $label$12
	$11 = [0]
	$5 = CALL db_find_i64(*($3 + [32]), *(($3 + [40])), (int_64)-8527970514705055744, $6)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$11 }
	$11 = CALL $10(($3 + [32]), $5)
	CALL eosio_assert(((int_32)*($11 + [52]) == (int_32)($3 + [32])), [9909])
	
.LABEL $label$11
	$5 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($5, [9988])
	CALL eosio_assert($5, [10022])
	$5 = CALL db_next_i64(*($11 + [56]), ($3 + [144]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$15 }
	CALL $10(($3 + [32]), $5)
	
.LABEL $label$15
	CALL $11(($3 + [32]), $11)
	$11 = *(($3 + [60]))
	$2 = *(($3 + [56]))
	if ( ((int_32)$2 == (int_32)$11) ){ goto $label$17 }
	
.LOOP $label$19:
	$5 = ($11 + [-24])
	$13 = *($5)
	if ( ((int_64)*($13) == (int_64)$1) ){ goto $label$18 }
	$11 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	if ( ((int_32)$2 == (int_32)$11) ){ goto $label$17 }
	CALL eosio_assert(((int_32)*($13 + [52]) == (int_32)($3 + [32])), [9909])
	goto $label$16 
	
.LABEL $label$17
	$13 = [0]
	$5 = CALL db_find_i64(*($3 + [32]), *(($3 + [40])), (int_64)-8527970514705055744, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$16 }
	$13 = CALL $10(($3 + [32]), $5)
	CALL eosio_assert(((int_32)*($13 + [52]) == (int_32)($3 + [32])), [9909])
	
.LABEL $label$16
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [10251])
	CALL eosio_assert(((int_32)*($13 + [52]) == (int_32)($3 + [32])), [10286])
	CALL eosio_assert(((int_64)*($3 + [32]) == (int_64)CALL $fimport$7()), [10332])
	*($13 + [32]) = $9
	*($13 + [40]) = $8
	*($13 + [48]) = $12
	$5 = ($13 + [16])
	$1 = *($5)
	*($5) = $10
	$11 = ($13 + [24])
	$6 = *($11)
	*($11) = $7
	$2 = ($13 + [8])
	*($3 + [224]) = *($2)
	*($3 + [232]) = $1
	*($3 + [240]) = $6
	$1 = *($13)
	CALL eosio_assert([1], [10383])
	*($3 + [216]) = (($3 + [144]) + [52])
	*($3 + [212]) = ($3 + [144])
	*($3 + [208]) = ($3 + [144])
	*($3 + [248]) = ($3 + [208])
	*($3 + [260]) = $2
	*($3 + [256]) = $13
	*($3 + [264]) = $5
	*($3 + [268]) = $11
	*($3 + [272]) = ($13 + [32])
	*($3 + [276]) = ($13 + [40])
	*($3 + [280]) = ($13 + [48])
	CALL $31(($3 + [256]), ($3 + [248]))
	CALL db_update_i64(*($13 + [56]), (int_64)0, ($3 + [144]), [52])
	$12 = (($3 + [32]) + [16])
	if ( (uint_64)($1 <= *($12)) ){ goto $label$20 }
	*($12) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	$12 = (($3 + [224]) + [8])
	*($3 + [256]) = *($2)
	if ( (CALL $138(($3 + [224]), ($3 + [256]), [8]) == 0) ){ goto $label$21 }
	$2 = *($13 + [60])
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$22 }
	$2 = CALL db_idx64_find_primary(*($3 + [32]), *(($3 + [40])), (int_64)-8527970514705055744, ($3 + [248]), $1)
	*(($13 + [60])) = $2
	
.LABEL $label$22
	CALL db_idx64_update($2, (int_64)0, ($3 + [256]))
	
.LABEL $label$21
	$2 = (($3 + [224]) + [16])
	*($3 + [256]) = *($5)
	if ( (CALL $138($12, ($3 + [256]), [8]) == 0) ){ goto $label$23 }
	$12 = ($13 + [64])
	$5 = *($12)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$24 }
	$5 = CALL db_idx_double_find_primary(*($3 + [32]), *(($3 + [40])), (int_64)-8527970514705055743, ($3 + [248]), $1)
	*($12) = $5
	
.LABEL $label$24
	CALL db_idx_double_update($5, (int_64)0, ($3 + [256]))
	
.LABEL $label$23
	*($3 + [256]) = *($11)
	if ( (CALL $138($2, ($3 + [256]), [8]) == 0) ){ goto $label$25 }
	$13 = ($13 + [68])
	$5 = *($13)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$26 }
	$5 = CALL db_idx_double_find_primary(*($3 + [32]), *(($3 + [40])), (int_64)-8527970514705055742, ($3 + [248]), $1)
	*($13) = $5
	
.LABEL $label$26
	CALL db_idx_double_update($5, (int_64)0, ($3 + [256]))
	
.LABEL $label$25
	$13 = *(($3 + [132]))
	$2 = *(($3 + [128]))
	if ( ((int_32)$2 == (int_32)$13) ){ goto $label$28 }
	
.LOOP $label$30:
	$5 = ($13 + [-24])
	$11 = *($5)
	if ( ((int_64)*($11) == (int_64)$4) ){ goto $label$29 }
	$13 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	if ( ((int_32)$2 == (int_32)$13) ){ goto $label$28 }
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)($3 + [104])), [9909])
	goto $label$27 
	
.LABEL $label$28
	$11 = [0]
	$5 = CALL db_find_i64(*($3 + [104]), *(($3 + [112])), (int_64)-8527959324524806144, $4)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$27 }
	$11 = CALL $21(($3 + [104]), $5)
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)($3 + [104])), [9909])
	
.LABEL $label$27
	$5 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($5, [9988])
	CALL eosio_assert($5, [10022])
	$5 = CALL db_next_i64(*($11 + [52]), ($3 + [144]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$31 }
	CALL $21(($3 + [104]), $5)
	
.LABEL $label$31
	CALL $13(($3 + [104]), $11)
	*(($3 + [176])) = [0]
	*($3 + [160]) = (int_64)-1
	*($3 + [168]) = (int_64)0
	$1 = *($0)
	*($3 + [144]) = $1
	*($3 + [152]) = $1
	$5 = CALL db_find_i64($1, $1, (int_64)-8527958567040319488, *($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$32 }
	CALL eosio_assert(((int_32)*(CALL $6(($3 + [144]), $5) + [24]) == (int_32)($3 + [144])), [9909])
	$1 = *($3 + [24])
	$13 = *(($3 + [172]))
	$2 = *(($3 + [168]))
	if ( ((int_32)$2 == (int_32)$13) ){ goto $label$34 }
	
.LOOP $label$36:
	$5 = ($13 + [-24])
	$11 = *($5)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$35 }
	$13 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$35
	if ( ((int_32)$2 == (int_32)$13) ){ goto $label$34 }
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)($3 + [144])), [9909])
	goto $label$33 
	
.LABEL $label$34
	$11 = [0]
	$5 = CALL db_find_i64(*($3 + [144]), *(($3 + [152])), (int_64)-8527958567040319488, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$33 }
	$11 = CALL $6(($3 + [144]), $5)
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)($3 + [144])), [9909])
	
.LABEL $label$33
	$5 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($5, [9988])
	CALL eosio_assert($5, [10022])
	$5 = CALL db_next_i64(*($11 + [28]), ($3 + [256]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$37 }
	CALL $6(($3 + [144]), $5)
	
.LABEL $label$37
	CALL $7(($3 + [144]), $11)
	
.LABEL $label$32
	CALL $5($0, ($3 + [24]))
	$11 = *($3 + [168])
	if ( ($11 == 0) ){ goto $label$38 }
	$2 = ($3 + [172])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$40 }
	
.LOOP $label$41:
	$5 = ($5 + [-24])
	$13 = *($5)
	*($5) = [0]
	if ( ($13 == 0) ){ goto $label$42 }
	CALL _ZdlPv($13)
	
.LABEL $label$42
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$41 }
	$5 = *(($3 + [168]))
	goto $label$39 
	
.LABEL $label$40
	$5 = $11
	
.LABEL $label$39
	*($2) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$38
	$11 = *($3 + [56])
	if ( ($11 == 0) ){ goto $label$43 }
	$2 = ($3 + [60])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$45 }
	
.LOOP $label$46:
	$5 = ($5 + [-24])
	$13 = *($5)
	*($5) = [0]
	if ( ($13 == 0) ){ goto $label$47 }
	CALL _ZdlPv($13)
	
.LABEL $label$47
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$46 }
	$5 = *(($3 + [56]))
	goto $label$44 
	
.LABEL $label$45
	$5 = $11
	
.LABEL $label$44
	*($2) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$43
	$11 = *($3 + [128])
	if ( ($11 == 0) ){ goto $label$48 }
	$2 = ($3 + [132])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$50 }
	
.LOOP $label$51:
	$5 = ($5 + [-24])
	$13 = *($5)
	*($5) = [0]
	if ( ($13 == 0) ){ goto $label$52 }
	CALL _ZdlPv($13)
	
.LABEL $label$52
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$51 }
	$5 = *(($3 + [128]))
	goto $label$49 
	
.LABEL $label$50
	$5 = $11
	
.LABEL $label$49
	*($2) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$48
	$global$0 = ($3 + [288])
	return (unreachable)
	
.LABEL $label$6
	CALL $109(($3 + [72]))
}

void .FUNC $45 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [160])
	$global$0 = $2
	*((($2 + [72]) + [32])) = [0]
	*($2 + [88]) = (int_64)-1
	*($2 + [96]) = (int_64)0
	*($2 + [108]) = [0]
	$3 = *($0)
	*($2 + [72]) = $3
	*($2 + [80]) = $3
	$5 = CALL $44(($2 + [72]), $1, [8774])
	*(($4 = (($2 + [56]) + [8]))) = *(($5 + [40]))
	*($2 + [56]) = *($5 + [32])
	$3 = *($5 + [24])
	$6 = *($5 + [16])
	$1 = *($5)
	$7 = *($5 + [8])
	*((($2 + [112]) + [32])) = [0]
	*(($2 + [150])) = [0]
	*($2 + [128]) = (int_64)-1
	*($2 + [136]) = (int_64)0
	*($2 + [148]) = [0]
	$8 = *($0)
	*($2 + [112]) = $8
	*($2 + [120]) = $8
	CALL require_auth(*(CALL $28(($2 + [112]), $7, [8602]) + [8]))
	$9 = *($2 + [136])
	if ( ($9 == 0) ){ goto $label$1 }
	$10 = ($2 + [140])
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$4:
	$5 = ($5 + [-24])
	$11 = *($5)
	*($5) = [0]
	if ( ($11 == 0) ){ goto $label$5 }
	CALL _ZdlPv($11)
	
.LABEL $label$5
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$4 }
	$5 = *(($2 + [136]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $9
	
.LABEL $label$2
	*($10) = $9
	CALL _ZdlPv($5)
	
.LABEL $label$1
	CALL require_recipient($3)
	*((($2 + [24]) + [8])) = [0]
	*((($2 + [40]) + [8])) = *($4)
	*($2 + [24]) = (int_64)0
	*($2 + [40]) = *($2 + [56])
	$7 = *($0)
	$5 = CALL $139([8238])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$9 }
	*($2 + [24]) = ($5 << [1])
	$9 = (($2 + [24]) | [1])
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$11 = (($5 + [16]) & [-16])
	$9 = CALL _Znwj($11)
	*($2 + [24]) = ($11 | [1])
	*($2 + [32]) = $9
	*($2 + [28]) = $5
	
.LABEL $label$8
	CALL memcpy($9, [8238], $5)
	
.LABEL $label$7
	$11 = [0]
	*(($9 + $5)) = [0]
	*((($2 + [8]) + [8])) = *((($2 + [40]) + [8]))
	*($2 + [8]) = *($2 + [40])
	CALL $9($0, $7, $3, ($2 + [8]), ($2 + [24]))
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($2 + [32]))
	
.LABEL $label$10
	*(($2 + [144])) = [0]
	*(($2 + [150])) = [0]
	*($2 + [128]) = (int_64)-1
	*($2 + [136]) = (int_64)0
	*($2 + [148]) = [0]
	$3 = *($0)
	*($2 + [112]) = $3
	*($2 + [120]) = $3
	$5 = CALL db_find_i64($3, $3, (int_64)-8527970514705055744, $6)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$11 }
	$11 = CALL $10(($2 + [112]), $5)
	CALL eosio_assert(((int_32)*($11 + [52]) == (int_32)($2 + [112])), [9909])
	
.LABEL $label$11
	$5 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($5, [9988])
	CALL eosio_assert($5, [10022])
	$5 = CALL db_next_i64(*($11 + [56]), ($2 + [152]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	CALL $10(($2 + [112]), $5)
	
.LABEL $label$12
	CALL $11(($2 + [112]), $11)
	$11 = *(($2 + [100]))
	$0 = *(($2 + [96]))
	if ( ((int_32)$0 == (int_32)$11) ){ goto $label$14 }
	
.LOOP $label$16:
	$5 = ($11 + [-24])
	$9 = *($5)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$15 }
	$11 = $5
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$0 == (int_32)$11) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)($2 + [72])), [9909])
	goto $label$13 
	
.LABEL $label$14
	$9 = [0]
	$5 = CALL db_find_i64(*($2 + [72]), *(($2 + [80])), (int_64)-8527959324524806144, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$13 }
	$9 = CALL $21(($2 + [72]), $5)
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)($2 + [72])), [9909])
	
.LABEL $label$13
	$5 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($5, [9988])
	CALL eosio_assert($5, [10022])
	$5 = CALL db_next_i64(*($9 + [52]), ($2 + [152]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$17 }
	CALL $21(($2 + [72]), $5)
	
.LABEL $label$17
	CALL $13(($2 + [72]), $9)
	$9 = *($2 + [136])
	if ( ($9 == 0) ){ goto $label$18 }
	$0 = ($2 + [140])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$20 }
	
.LOOP $label$21:
	$5 = ($5 + [-24])
	$11 = *($5)
	*($5) = [0]
	if ( ($11 == 0) ){ goto $label$22 }
	CALL _ZdlPv($11)
	
.LABEL $label$22
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$21 }
	$5 = *(($2 + [136]))
	goto $label$19 
	
.LABEL $label$20
	$5 = $9
	
.LABEL $label$19
	*($0) = $9
	CALL _ZdlPv($5)
	
.LABEL $label$18
	$9 = *($2 + [96])
	if ( ($9 == 0) ){ goto $label$23 }
	$0 = ($2 + [100])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$25 }
	
.LOOP $label$26:
	$5 = ($5 + [-24])
	$11 = *($5)
	*($5) = [0]
	if ( ($11 == 0) ){ goto $label$27 }
	CALL _ZdlPv($11)
	
.LABEL $label$27
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$26 }
	$5 = *(($2 + [96]))
	goto $label$24 
	
.LABEL $label$25
	$5 = $9
	
.LABEL $label$24
	*($0) = $9
	CALL _ZdlPv($5)
	
.LABEL $label$23
	$global$0 = ($2 + [160])
	return (unreachable)
	
.LABEL $label$6
	CALL $109(($2 + [24]))
}

int_32 .FUNC $44 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$0), [9909])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-8527959324524806144, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $21($0, $4)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$0), [9909])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_64 .FUNC $124 (float_64 $0, float_64 $1)
{
	float_64 $2
	float_64 $3
	float_64 $4
	$3 = ((float_64)$2 * (float_64)$2)
	$2 = ((float_64)$0 * (float_64)$0)
	$3 = ((float_64)$2 * (float_64)(float_64)0.5)
	$4 = (float_64)
	return ((float_64)$4((float_64)1 - $3)) + (float_64)((float_64)(float_64))((float_64))((float_64)1 - $4) - $3) + (float_64)(float_64))(((float_64)$2 * (float_64)((float_64)((float_64)$2 * (float_64)((float_64)((float_64)$2 * (float_64)((float_64)((float_64)$2 * (float_64)(float_64)2.480158728947673e-05) + (float_64)(float_64)-0.001388888888887411)) + (float_64)(float_64)0.0416666666666666)) + (float_64)((float_64)((float_64)$3 * (float_64)$3) * (float_64)((float_64)((float_64)$2 * (float_64)((float_64)((float_64)$2 * (float_64)(float_64)-1.1359647557788195e-11) + (float_64)(float_64)2.087572321298175e-09)) + (float_64)(float_64)-2.7557314351390663e-07)))) - ((float_64)$0 * (float_64)$1))))
}

int_64 .FUNC $128 (float_64 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = ((CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $0) >> (uint_64)(int_64)32)) & [2147483647]
	if ( ((uint_32)$2) > (uint_32)[1072243195]) ){ goto $label$3 }
	if ( ((uint_32)$2 > (uint_32)[1044816029]) ){ goto $label$2 }
	*($1) = ((float_64)$0 + (float_64)(float_64)1329227995784915872903807e12)
	$global$0 = ($1 + [16])
	return (float_64)1
	
.LABEL $label$3
	if ( ($2 <= [2146435072]) ){ goto $label$1 }
	$global$0 = ($1 + [16])
	return (float_64))($0 - $0)
	
.LABEL $label$2
	$0 = CALL $124($0, (float_64)0)
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$1
	$2 = (CALL $126($0, $1) & [3])
	if ( ((int_32)$2 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$5 }
	if ( $2 ){ goto $label$4 }
	$0 = CALL $124(*($1), *($1 + [8]))
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$6
	$0 = CALL $124(*($1), *($1 + [8]))
	$global$0 = ($1 + [16])
	return !(float_64)$0
	
.LABEL $label$5
	$0 = CALL $127(*($1), *($1 + [8]), [1])
	$global$0 = ($1 + [16])
	return !(float_64)$0
	
.LABEL $label$4
	$0 = CALL $127(*($1), *($1 + [8]), [1])
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-8527959324524806144, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [9909])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $21($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)-8527959324524806144, $6))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [9909])
	
.LABEL $label$2
	*(($4 + [56])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = *($0)
	*((($5 + [8]) + [24])) = *(($3 + [8]))
	*($5 + [16]) = $2
	*($5 + [8]) = $1
	*($5 + [24]) = *($3)
	$4 = CALL $110((($5 + [8]) + [32]), $4)
	*($5 + [64]) = (int_64)-3617168760277827584
	*($5 + [56]) = (int_64)8419173534537145664
	*(($3 = CALL _Znwj([16]))) = $6
	*($3 + [8]) = (int_64)3617214756542218240
	*((($5 + [56]) + [36])) = [0]
	$0 = ($3 + [16])
	*((($5 + [56]) + [24])) = $0
	*(($5 + [76])) = $0
	*($5 + [72]) = $3
	*($5 + [84 align=4]) = (int_64)0
	$3 = *($4)
	$4 = ( *((($5 + [8]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($4 + [32])
	$1 = (CASTING uint_64)(uint_32 $4)
	$4 = ($5 + [84])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$1 }
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $22($4, $3)
	$4 = *(($5 + [88]))
	$3 = *(($5 + [84]))
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	$3 = [0]
	
.LABEL $label$2
	*($5 + [116]) = $3
	*($5 + [112]) = $3
	*($5 + [120]) = $4
	*($5 + [96]) = ($5 + [112])
	*($5 + [104]) = ($5 + [8])
	CALL $23(($5 + [104]), ($5 + [96]))
	CALL $24(($5 + [112]), ($5 + [56]))
	$3 = *($5 + [112])
	CALL send_inline($3, (*($5 + [116]) - $3))
	$3 = *($5 + [112])
	if ( ($3 == 0) ){ goto $label$4 }
	*($5 + [116]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$3 = *($5 + [84])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [88])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$5
	$3 = *($5 + [72])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($5 + [76])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($5 + [48])))
	
.LABEL $label$7
	$global$0 = ($5 + [128])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9960])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $142($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9983])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [9983])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [9983])
	CALL memcpy(($3 + [24]), ($2 + [16]), [8])
	*($5 + [16]) = *($3 + [24])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$7 = *($5)
	*($3 + [24]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $33(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $145($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10052])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10097])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10147])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10022])
	$3 = *($0 + [4])
	$4 = *(($3 + [64]))
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx_double_find_primary(*($4), *($4 + [8]), (int_64)-8527970514705055743, ($1 + [8]), *($3))
	*((*(($0 + [4])) + [64])) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx_double_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($2 + [52]) == (int_32)$7), [9909])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$4 = CALL db_find_i64(*($7), *($7 + [8]), (int_64)-8527970514705055744, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $10($7, $4)
	CALL eosio_assert(((int_32)*($2 + [52]) == (int_32)$7), [9909])
	
.LABEL $label$3
	*(($2 + [64])) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($2 + [80])) = [0]
	*($2 + [64]) = (int_64)-1
	*($2 + [72]) = (int_64)0
	*($2 + [84]) = [0]
	$3 = *($0)
	*($2 + [48]) = $3
	*($2 + [56]) = $3
	*($2 + [40]) = ($2 + [48])
	CALL $17($2, ($2 + [40]), $1)
	$4 = *($2 + [4])
	if ( ($4 == 0) ){ goto $label$1 }
	if ( ((int_64)*($1) != (int_64)*($4 + [8])) ){ goto $label$1 }
	$5 = *($2)
	
.LOOP $label$2:
	if ( ((int_64)*($4 + [8]) != (int_64)*($1)) ){ goto $label$1 }
	$3 = *($4 + [16])
	*($2 + [32]) = $3
	$6 = *($4 + [24])
	*($2 + [24]) = $6
	*($2 + [8]) = $3
	*($2) = $6
	*($2 + [88]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $5))
	CALL eosio_assert([1], [9988])
	CALL $18(($2 + [88]))
	CALL $19(*($2 + [40]), $4)
	$3 = *($2 + [88])
	CALL $20($0, ($2 + [48]), ($2 + [32]), ($2 + [24]), $2)
	$5 = (CASTING uint_32)(uint_64 $3)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( $4) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($2 + [72])
	if ( ($1 == 0) ){ goto $label$3 }
	$0 = ($2 + [76])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$6 }
	$4 = *(($2 + [72]))
	goto $label$4 
	
.LABEL $label$5
	$4 = $1
	
.LABEL $label$4
	*($0) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$global$0 = ($2 + [96])
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	float_64 $8
	float_64 $9
	float_64 $10
	float_64 $11
	$6 = ($global$0 - [48])
	$global$0 = $6
	CALL eosio_assert(((float_64)*($2) > (float_64)*($4)), [9044])
	CALL eosio_assert(((float_64)*($3) > (float_64)*($5)), [9098])
	CALL eosio_assert(((float_64)*($2) < (float_64)(float_64)85), [9151])
	CALL eosio_assert(((float_64)*($4) > (float_64)(float_64)-85), [9194])
	$7 = [0]
	$8 = *($3)
	if ( ((int_32)((float_64)$8 <= (float_64)(float_64)180) ^ (int_32)[1]) ){ goto $label$1 }
	$7 = [0]
	if ( ((int_32)((float_64)$8 > (float_64)(float_64)-180) ^ (int_32)[1]) ){ goto $label$1 }
	$7 = [0]
	$8 = *($5)
	if ( ((int_32)((float_64)$8 <= (float_64)(float_64)180) ^ (int_32)[1]) ){ goto $label$1 }
	$7 = ((float_64)$8 > (float_64)(float_64)-180)
	
.LABEL $label$1
	CALL eosio_assert($7, [9235])
	$9 = *($4)
	$8 = *($2)
	$10 = CALL $129((float_64))($8 - $9))
	$11 = CALL $129((float_64))(*($3) - *($5)))
	$9 = CALL $128(((float_64)((float_64)((float_64)((float_64)$8 + (float_64)$9) * (float_64)(float_64)0.5) * (float_64)(float_64)3.141592653589793) / (float_64)(float_64)180))
	$8 = ((float_64)$10 * (float_64)(float_64)111133)
	*($0) = $8
	$9 = ((float_64)$9 * (float_64)((float_64)$11 * (float_64)(float_64)111320))
	*($0 + [8]) = $9
	CALL $119($6, [600])
	$3 = CALL $118($6, [0], [9282])
	$2 = ($3 + [8])
	*((($6 + [16]) + [8])) = *($2)
	*($6 + [16]) = *($3)
	*($3) = (int_64)0
	*($2) = [0]
	$3 = CALL $116(($6 + [16]), [9314])
	$4 = ($3 + [8])
	*(($2 = (($6 + [32]) + [8]))) = *($4)
	*($6 + [32]) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	CALL eosio_assert((((float_64)$8 <= (float_64)(float_64)600) & ((float_64)$9 <= (float_64)(float_64)600)), ( *($2) ? (($6 + [32]) | [1]) : (*($6 + [32]) & [1]) ))
	if ( (*($6 + [32]) & [1]) ){ goto $label$6 }
	$3 = [1]
	if ( (*($6 + [16]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($2))
	$3 = [1]
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($6 + [24]))
	if ( (*($6) & $3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((*($6) & $3) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$2
	CALL $120($6, (float_32)0.10000000149011612)
	$3 = CALL $118($6, [0], [9337])
	$2 = ($3 + [8])
	*((($6 + [16]) + [8])) = *($2)
	*($6 + [16]) = *($3)
	*($3) = (int_64)0
	*($2) = [0]
	$3 = CALL $116(($6 + [16]), [9372])
	$4 = ($3 + [8])
	*(($2 = (($6 + [32]) + [8]))) = *($4)
	*($6 + [32]) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	CALL eosio_assert((((float_64)$8 >= (float_64)(float_64)0.10000000149011612) & ((float_64)$9 >= (float_64)(float_64)0.10000000149011612)), ( *($2) ? (($6 + [32]) | [1]) : (*($6 + [32]) & [1]) ))
	if ( (*($6 + [32]) & [1]) ){ goto $label$11 }
	if ( (*($6 + [16]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($2))
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($6 + [24]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( (*($6) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	$global$0 = ($6 + [48])
	return 
	
.LABEL $label$7
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($6 + [48])
}

void .FUNC $3 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx_double_lowerbound(*($2), *($2 + [8]), (int_64)-8527970514705055743, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [52]) == (int_32)$7), [9909])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $10($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)-8527970514705055744, $6))
	CALL eosio_assert(((int_32)*($4 + [52]) == (int_32)$7), [9909])
	
.LABEL $label$2
	*(($4 + [64])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, float_64 $2, float_64 $3, float_64 $4, float_64 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	$6 = ($global$0 - [384])
	$global$0 = $6
	*($6 + [368]) = $1
	*($6 + [352]) = $3
	*($6 + [344]) = $4
	*($6 + [336]) = $5
	*($6 + [360]) = $2
	CALL require_auth($1)
	CALL $2(($6 + [320]), $6, ($6 + [360]), ($6 + [352]), ($6 + [344]), ($6 + [336]))
	$7 = [0]
	*(($6 + [312])) = [0]
	*(($6 + [318])) = [0]
	*($6 + [296]) = (int_64)-1
	*($6 + [304]) = (int_64)0
	*($6 + [316]) = [0]
	$1 = *($0)
	*($6 + [280]) = $1
	*($6 + [288]) = $1
	*($6 + [272]) = ($6 + [280])
	CALL $3(($6 + [264]), ($6 + [272]), ($6 + [344]))
	*($6 + [256]) = (int_64)1179535620
	*($6 + [248]) = (int_64)0
	CALL eosio_assert([1], [9604])
	$4 = ((float_64)$2 + (float_64)(float_64)5.3989364095273235e-03)
	$1 = (int_64)4607561
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$1 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$1 = $8
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $10 ){ goto $label$7 }
	$9 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$4 }
	
.LABEL $label$5
	$12 = [9653]
	CALL eosio_assert($9, [9653])
	$7 = *($6 + [268])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$12 = [9653]
	CALL eosio_assert([0], [9653])
	$7 = *($6 + [268])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$13 = (($6 + [64]) | [1])
	$14 = ($6 + [148])
	$15 = (($6 + [152]) + [28])
	
.LOOP $label$8:
	if ( ((int_32)((float_64)*($7 + [16]) < (float_64)$4) ^ (int_32)[1]) ){ goto $label$1 }
	*(($11 = (($6 + [192]) + [16]))) = *(($7 + [16]))
	*(($16 = (($6 + [192]) + [48]))) = *(($7 + [48]))
	*(($17 = (($6 + [192]) + [40]))) = *(($7 + [40]))
	*(($9 = (($6 + [192]) + [32]))) = *(($7 + [32]))
	*(($10 = (($6 + [192]) + [24]))) = *(($7 + [24]))
	*(($18 = (($6 + [192]) + [8]))) = *(($7 + [8]))
	*($6 + [192]) = *($7)
	$2 = *($6 + [360])
	$5 = *($11)
	if ( ((int_32)((float_64)$5 <= (float_64)$2) ^ (int_32)[1]) ){ goto $label$11 }
	if ( ((int_32)((float_64)*($9) >= (float_64)*($6 + [344])) ^ (int_32)[1]) ){ goto $label$11 }
	if ( ((int_32)((float_64)*($10) <= (float_64)*($6 + [352])) ^ (int_32)[1]) ){ goto $label$11 }
	if ( (((int_32)((float_64)*($17) >= (float_64)*($6 + [336])) ^ (int_32)[1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$7 = [1]
	if ( ((float_64)*($10) <= (float_64)*($6 + [336])) ){ goto $label$12 }
	if ( ((float_64)*($17) >= (float_64)*($6 + [352])) ){ goto $label$12 }
	if ( ((float_64)*($9) >= (float_64)$2) ){ goto $label$12 }
	$7 = ((float_64)$5 <= (float_64)*($6 + [344]))
	
.LABEL $label$12
	CALL eosio_assert($7, [8192])
	CALL $4(($6 + [264]))
	goto $label$9 
	
.LABEL $label$10
	CALL eosio_assert(((int_64)*($6 + [368]) == (int_64)*($18)), [8192])
	$5 = *($9)
	$2 = *($11)
	$2 = CALL $131(((float_64)((float_64)((float_64)CALL $129((float_64))($2 - $5)) * (float_64)(float_64)111133) * (float_64)((float_64)((float_64)CALL $129((float_64))(*($10) - *($17))) * (float_64)(float_64)111320) * (float_64)CALL $128(((float_64)((float_64)((float_64)((float_64)$2 + (float_64)$5) * (float_64)(float_64)0.5) * (float_64)(float_64)3.141592653589793) / (float_64)(float_64)180)))) * (float_64)((float_64)(CASTING float_64)(uint_32 (*($16) - (CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$2() / (uint_64)(int_64)1000000)))) / (float_64)(float_64)31536e3)
	if ( ((float_64)(float_64)|$2))| < (float_64)(float_64)9223372036854775808) ){ goto $label$14 }
	$1 = (int_64)-9223372036854775808
	goto $label$13 
	
.LABEL $label$14
	$1 = (Rounds 0)($2)
	
.LABEL $label$13
	$19 = ((int_64)$1 * (int_64)10000)
	CALL eosio_assert((uint_64)(((int_64)$19 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9604])
	$1 = (int_64)4607561
	$7 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$1 = $8
	$10 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$1 = $8
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $10 ){ goto $label$19 }
	$10 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$10 = [0]
	
.LABEL $label$15
	CALL eosio_assert($10, $12)
	CALL eosio_assert(((int_64)*((($6 + [248]) + [8])) == (int_64)1179535620), [9673])
	$1 = (int_64)
	*($6 + [248]) = $1(*($6 + [248]) - $19))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9721])
	CALL eosio_assert(((int_64)*($6 + [248]) < (int_64)4611686018427387904), [9743])
	CALL $5($0, ($6 + [192]))
	*((($6 + [152]) + [16])) = (int_64)-1
	*(($16 = (($6 + [152]) + [24]))) = (int_64)0
	*((($6 + [152]) + [32])) = [0]
	$1 = *($0)
	*((($6 + [152]) + [8])) = $1
	*($6 + [152]) = $1
	$7 = CALL db_find_i64($1, $1, (int_64)-8527958567040319488, *($6 + [192]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$20 }
	$7 = CALL $6(($6 + [152]), $7)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($6 + [152])), [9909])
	CALL eosio_assert([1], [9988])
	CALL eosio_assert([1], [10022])
	$10 = CALL db_next_i64(*($7 + [28]), ($6 + [112]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$21 }
	CALL $6(($6 + [152]), $10)
	
.LABEL $label$21
	CALL $7(($6 + [152]), $7)
	
.LABEL $label$20
	$1 = *($0)
	*((($6 + [112]) + [8])) = $1
	*((($6 + [112]) + [16])) = (int_64)-1
	*(($18 = (($6 + [112]) + [24]))) = (int_64)0
	*((($6 + [112]) + [32])) = [0]
	*($14) = [0]
	*($6 + [112]) = $1
	*($6 + [104]) = ($6 + [112])
	CALL $8(($6 + [96]), ($6 + [104]), ($6 + [192]))
	$7 = *($6 + [100])
	if ( ($7 == 0) ){ goto $label$23 }
	
.LOOP $label$24:
	if ( ((int_64)*($7 + [8]) != (int_64)*($6 + [192])) ){ goto $label$23 }
	CALL require_recipient(*($7 + [24]))
	*(($11 = (($6 + [64]) + [8]))) = [0]
	$7 = *($6 + [100])
	*(($9 = (($6 + [80]) + [8]))) = *(($7 + [40]))
	*($6 + [64]) = (int_64)0
	*($6 + [80]) = *($7 + [32])
	$1 = *($0)
	$8 = *($7 + [24])
	$7 = CALL $139([8238])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$22 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$27 }
	*($6 + [64]) = ($7 << [1])
	$10 = $13
	if ( $7 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$17 = (($7 + [16]) & [-16])
	$10 = CALL _Znwj($17)
	*($11) = $10
	*($6 + [64]) = ($17 | [1])
	*($6 + [68]) = $7
	
.LABEL $label$26
	CALL memcpy($10, [8238], $7)
	
.LABEL $label$25
	*(($10 + $7)) = [0]
	*((($6 + [16]) + [8])) = *($9)
	*($6 + [16]) = *($6 + [80])
	CALL $9($0, $1, $8, ($6 + [16]), ($6 + [64]))
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$28
	$1 = *(*($6 + [100]) + [16])
	$10 = *((($6 + [280]) + [28]))
	$9 = *((($6 + [280]) + [24]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$30 }
	
.LOOP $label$32:
	$7 = ($10 + [-24])
	$11 = *($7)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$31 }
	$10 = $7
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$30 }
	CALL eosio_assert(((int_32)*($11 + [52]) == (int_32)($6 + [280])), [9909])
	goto $label$29 
	
.LABEL $label$30
	$11 = [0]
	$7 = CALL db_find_i64(*($6 + [280]), *((($6 + [280]) + [8])), (int_64)-8527970514705055744, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$29 }
	$11 = CALL $10(($6 + [280]), $7)
	CALL eosio_assert(((int_32)*($11 + [52]) == (int_32)($6 + [280])), [9909])
	
.LABEL $label$29
	$7 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($7, [9988])
	CALL eosio_assert($7, [10022])
	$7 = CALL db_next_i64(*($11 + [56]), ($6 + [376]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$33 }
	CALL $10(($6 + [280]), $7)
	
.LABEL $label$33
	CALL $11(($6 + [280]), $11)
	$1 = *($6 + [96])
	*($6 + [376]) = $1
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$7) != (int_32)[0]), [9988])
	CALL $12(($6 + [376]))
	CALL $13(*($6 + [104]), $7)
	$1 = *($6 + [376])
	*($6 + [96]) = $1
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( $7) ){ goto $label$24 }
	
.LABEL $label$23
	$1 = *($6 + [264])
	*($6 + [376]) = $1
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$7) != (int_32)[0]), [9988])
	CALL $4(($6 + [376]))
	CALL $11(*($6 + [272]), $7)
	*($6 + [264]) = *($6 + [376])
	$11 = *($18)
	if ( ($11 == 0) ){ goto $label$34 }
	$9 = (($6 + [112]) + [28])
	$7 = *($9)
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$36 }
	
.LOOP $label$37:
	$7 = ($7 + [-24])
	$10 = *($7)
	*($7) = [0]
	if ( ($10 == 0) ){ goto $label$38 }
	CALL _ZdlPv($10)
	
.LABEL $label$38
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$37 }
	$7 = *($18)
	goto $label$35 
	
.LABEL $label$36
	$7 = $11
	
.LABEL $label$35
	*($9) = $11
	CALL _ZdlPv($7)
	
.LABEL $label$34
	$11 = *($16)
	if ( ($11 == 0) ){ goto $label$9 }
	$7 = *($15)
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$39 }
	
.LOOP $label$40:
	$7 = ($7 + [-24])
	$10 = *($7)
	*($7) = [0]
	if ( ($10 == 0) ){ goto $label$41 }
	CALL _ZdlPv($10)
	
.LABEL $label$41
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$40 }
	$7 = *($16)
	*($15) = $11
	CALL _ZdlPv($7)
	$7 = *($6 + [268])
	if ( $7 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$39
	*($15) = $11
	CALL _ZdlPv($11)
	$7 = *($6 + [268])
	if ( $7 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$22
	CALL $109(($6 + [64]))
	
.LABEL $label$9
	$7 = *($6 + [268])
	if ( $7 ){ goto $label$8 }
	
.LABEL $label$1
	$2 = CALL $131(((float_64)max ( (float_64)*($6 + [320]) , (float_64)(float_64)1 ) * (float_64)max ( (float_64)*($6 + [328]) , (float_64)(float_64)1 )))
	if ( ((float_64)(float_64)|$2| < (float_64)(float_64)9223372036854775808) ){ goto $label$43 }
	$1 = (int_64)-9223372036854775808
	goto $label$42 
	
.LABEL $label$43
	$1 = (Rounds 0)($2)
	
.LABEL $label$42
	$19 = ((int_64)$1 * (int_64)10000)
	CALL eosio_assert((uint_64)(((int_64)$19 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9604])
	$1 = (int_64)4607561
	$7 = [0]
	
.LOOP $label$46:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$45 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$47 }
	$1 = $8
	$10 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$47
	$1 = $8
	
.LOOP $label$48:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$45 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $10 ){ goto $label$48 }
	$10 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$45
	$10 = [0]
	
.LABEL $label$44
	CALL eosio_assert($10, [9653])
	$9 = (($6 + [248]) + [8])
	CALL eosio_assert(((int_64)*($9) == (int_64)1179535620), [9764])
	$1 = ((int_64)*($6 + [248]) + (int_64)$19)
	*($6 + [248]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9807])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [9826])
	if ( ((int_64)$1 > (int_64)9999) ){ goto $label$49 }
	CALL eosio_assert([1], [9604])
	$1 = (int_64)4607561
	$7 = [0]
	
.LOOP $label$52:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$51 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$53 }
	$1 = $8
	$10 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$53
	$1 = $8
	
.LOOP $label$54:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$51 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $10 ){ goto $label$54 }
	$10 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$51
	$10 = [0]
	
.LABEL $label$50
	CALL eosio_assert($10, [9653])
	*(($6 + [256])) = (int_64)1179535620
	*($6 + [248]) = (int_64)10000
	
.LABEL $label$49
	CALL $14($0, ($6 + [368]), ($6 + [248]))
	*((($6 + [32]) + [8])) = [0]
	*((($6 + [48]) + [8])) = *($9)
	*($6 + [32]) = (int_64)0
	*($6 + [48]) = *($6 + [248])
	$1 = *($0)
	$7 = CALL $139([8367])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$55 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$58 }
	*($6 + [32]) = ($7 << [1])
	$10 = (($6 + [32]) | [1])
	if ( $7 ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	$11 = (($7 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($6 + [32]) = ($11 | [1])
	*($6 + [40]) = $10
	*($6 + [36]) = $7
	
.LABEL $label$57
	CALL memcpy($10, [8367], $7)
	
.LABEL $label$56
	*(($10 + $7)) = [0]
	*(($6 + [8])) = *((($6 + [48]) + [8]))
	*($6) = *($6 + [48])
	CALL $9($0, $1, (int_64)8419173534537145664, $6, ($6 + [32]))
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$59 }
	CALL _ZdlPv(*($6 + [40]))
	
.LABEL $label$59
	$1 = *($6 + [368])
	*($6 + [196]) = ($6 + [368])
	*($6 + [192]) = ($6 + [280])
	*($6 + [200]) = ($6 + [360])
	*($6 + [204]) = ($6 + [352])
	*($6 + [208]) = ($6 + [344])
	*($6 + [212]) = ($6 + [336])
	*($6 + [112]) = $1
	CALL eosio_assert(((int_64)*($6 + [280]) == (int_64)CALL $fimport$7()), [10200])
	*($6 + [156]) = ($6 + [192])
	*($6 + [152]) = ($6 + [280])
	*($6 + [160]) = ($6 + [112])
	*(($7 = CALL _Znwj([72])) + [48]) = [0]
	*($7 + [8]) = (int_64)0
	*($7 + [52]) = ($6 + [280])
	CALL $15(($6 + [152]), $7)
	*($6 + [376]) = $7
	$1 = *($7)
	*($6 + [152]) = $1
	$11 = *($7 + [56])
	*($6 + [96]) = $11
	$9 = ($6 + [308])
	$10 = *($9)
	if ( ((uint_32)$10 >= (uint_32)*(($6 + [312]))) ){ goto $label$62 }
	*($10 + [8]) = $1
	*($10 + [16]) = $11
	*($6 + [376]) = [0]
	*($10) = $7
	*($9) = ($10 + [24])
	$7 = *($6 + [376])
	*($6 + [376]) = [0]
	if ( $7 ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$62
	CALL $16(($6 + [304]), ($6 + [376]), ($6 + [152]), ($6 + [96]))
	$7 = *($6 + [376])
	*($6 + [376]) = [0]
	if ( ($7 == 0) ){ goto $label$60 }
	
.LABEL $label$61
	CALL _ZdlPv($7)
	
.LABEL $label$60
	$11 = *($6 + [304])
	if ( ($11 == 0) ){ goto $label$63 }
	$9 = ($6 + [308])
	$7 = *($9)
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$65 }
	
.LOOP $label$66:
	$7 = ($7 + [-24])
	$10 = *($7)
	*($7) = [0]
	if ( ($10 == 0) ){ goto $label$67 }
	CALL _ZdlPv($10)
	
.LABEL $label$67
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$66 }
	$7 = *(($6 + [304]))
	goto $label$64 
	
.LABEL $label$65
	$7 = $11
	
.LABEL $label$64
	*($9) = $11
	CALL _ZdlPv($7)
	
.LABEL $label$63
	$global$0 = ($6 + [384])
	return (unreachable)
	
.LABEL $label$55
	CALL $109(($6 + [32]))
	(unreachable)
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$5 = *($0)
	*($3 + [8]) = $5
	*($3 + [16]) = $5
	$0 = CALL $25(($3 + [8]), *($1), [8963])
	$5 = *($0 + [8])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)*($2 + [8])), [9844])
	CALL eosio_assert(((int_64)$5 >= (int_64)*($2)), [9394])
	$5 = *($1)
	$0 = *(($3 + [36]))
	$6 = *($3 + [32])
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($0 + [-24])
	$7 = *($1)
	if ( ((int_64)*($7) == (int_64)$5) ){ goto $label$3 }
	$0 = $1
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($3 + [8])), [9909])
	$4 = $7
	goto $label$1 
	
.LABEL $label$2
	$1 = CALL db_find_i64(*($3 + [8]), *(($3 + [16])), (int_64)5380477996647841792, $5)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $26(($3 + [8]), $1)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)($3 + [8])), [9909])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [10251])
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)($3 + [8])), [10286])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$7()), [10332])
	$5 = *($4)
	$1 = ($4 + [16])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*($1)), [9673])
	$8 = (int_64)
	*($4 + [8]) = $8(*($4 + [8]) - *($2)))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9721])
	CALL eosio_assert(((int_64)*($4 + [8]) < (int_64)4611686018427387904), [9743])
	CALL eosio_assert(((int_64)$5 == (int_64)*($4)), [10383])
	CALL eosio_assert([1], [9903])
	CALL memcpy(($3 + [48]), $4, [8])
	CALL eosio_assert([1], [9903])
	CALL memcpy((($3 + [48]) | [8]), ($4 + [8]), [8])
	*($3 + [72]) = *($1)
	CALL eosio_assert([1], [9903])
	CALL memcpy((($3 + [48]) + [16]), ($3 + [72]), [8])
	CALL db_update_i64(*($4 + [28]), (int_64)0, ($3 + [48]), [24])
	$1 = (($3 + [8]) + [16])
	if ( (uint_64)($5 <= *($1)) ){ goto $label$5 }
	*($1) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$4 = *($3 + [32])
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = ($3 + [36])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	CALL _ZdlPv($0)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$9 }
	$1 = *(($3 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$1 = $4
	
.LABEL $label$7
	*($6) = $4
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$global$0 = ($3 + [80])
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-8527970514705055744, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $10($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $40(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [10442])
	$7 = *(($6 + [16]))
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [24]) = *(*($5 + [12]))
	*($1) = $7
	*($1 + [32]) = *(*($5 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [40]) = *(*($5 + [20]))
	*($1 + [48]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [31536000])
	$6 = $2
	$5 = ($6 + [-64])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($6 + [-12])
	*($3 + [24]) = ($3 + [8])
	$6 = ($1 + [8])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	$2 = ($1 + [16])
	*($3 + [40]) = $2
	$8 = ($1 + [24])
	*($3 + [44]) = $8
	*($3 + [48]) = ($1 + [32])
	*($3 + [52]) = ($1 + [40])
	*($3 + [56]) = ($1 + [48])
	CALL $31(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($4 + [8]), (int_64)-8527970514705055744, *(*($0 + [8])), $7, $5, [52])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$5 = ($4 + [8])
	$7 = *($5)
	$0 = *(($0 + [8]))
	$9 = *($0)
	$10 = *($1)
	*($3 + [32]) = *($6)
	*($1 + [60]) = CALL db_idx64_store($7, (int_64)-8527970514705055744, $9, $10, ($3 + [32]))
	$7 = *($0)
	$9 = *($5)
	$10 = *($1)
	*($3 + [32]) = *($2)
	*(($1 + [64])) = CALL db_idx_double_store($9, (int_64)-8527970514705055743, $7, $10, ($3 + [32]))
	$7 = *($0)
	$9 = *($5)
	$10 = *($1)
	*($3 + [32]) = *($8)
	*(($1 + [68])) = CALL db_idx_double_store($9, (int_64)-8527970514705055742, $7, $10, ($3 + [32]))
	$global$0 = ($3 + [64])
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-6147546106350911488, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [9909])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $60($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)-6147546106350911488, $6))
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [9909])
	
.LABEL $label$2
	*(($4 + [80])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9960])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $142($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [48]) = [0]
	*($5 + [8]) = (int_64)0
	*($5 + [52]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	CALL $91(($3 + [32]), ($3 + [24]))
	*($5 + [56]) = $1
	*($5 + [60 align=4]) = (int_64)-1
	*($5 + [68]) = [-1]
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $16(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $145($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [10052])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10097])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10147])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [56]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $92(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $12 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10022])
	$2 = *($0 + [4])
	$3 = *($2 + [56])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-8527959324524806144, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [56]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$6), [9909])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $21($6, CALL $fimport$3(*($6), *($6 + [8]), (int_64)-8527959324524806144, $5))
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$6), [9909])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [56])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [10052])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10097])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10147])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [52]))
	$6 = *(($1 + [56]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8527959324524806144, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [60]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8527959324524806143, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

int_32 .FUNC $75 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9983])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $145($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10022])
	$2 = *($0 + [4])
	$3 = *($2 + [80])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-6147546106350911488, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [80]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$6), [9909])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $60($6, CALL $fimport$3(*($6), *($6 + [8]), (int_64)-6147546106350911488, $5))
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$6), [9909])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [80])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [10052])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10097])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10147])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [76]))
	$6 = *(($1 + [80]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147546106350911488, $2, *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [84]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-6147546106350911487, $2, *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx128_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

void .FUNC $58 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$6 = ($global$0 - [224])
	$global$0 = $6
	*((($6 + [8]) + [32])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	*($6 + [44]) = [0]
	$7 = *($0)
	*($6 + [8]) = $7
	*($6 + [16]) = $7
	$7 = *(CALL $59(($6 + [8]), $1, [9432]) + [8])
	*((($6 + [48]) + [32])) = [0]
	*(($6 + [86])) = [0]
	*($6 + [64]) = (int_64)-1
	*($6 + [72]) = (int_64)0
	*($6 + [84]) = [0]
	$8 = *($0)
	*($6 + [48]) = $8
	*($6 + [56]) = $8
	CALL require_auth(*(CALL $28(($6 + [48]), $7, [8602]) + [8]))
	$9 = *($6 + [72])
	if ( ($9 == 0) ){ goto $label$1 }
	$10 = ($6 + [76])
	$11 = *($10)
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$4:
	$11 = ($11 + [-24])
	$12 = *($11)
	*($11) = [0]
	if ( ($12 == 0) ){ goto $label$5 }
	CALL _ZdlPv($12)
	
.LABEL $label$5
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$4 }
	$11 = *(($6 + [72]))
	goto $label$2 
	
.LABEL $label$3
	$11 = $9
	
.LABEL $label$2
	*($10) = $9
	CALL _ZdlPv($11)
	
.LABEL $label$1
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$6 }
	*(($6 + [80])) = [0]
	*(($6 + [86])) = [0]
	*($6 + [64]) = (int_64)-1
	*($6 + [72]) = (int_64)0
	*($6 + [84]) = [0]
	$7 = *($0)
	*($6 + [48]) = $7
	*($6 + [56]) = $7
	CALL require_auth(*(CALL $28(($6 + [48]), $2, [8602]) + [8]))
	$9 = *($6 + [72])
	if ( ($9 == 0) ){ goto $label$6 }
	$0 = ($6 + [76])
	$11 = *($0)
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$8 }
	
.LOOP $label$9:
	$11 = ($11 + [-24])
	$12 = *($11)
	*($11) = [0]
	if ( ($12 == 0) ){ goto $label$10 }
	CALL _ZdlPv($12)
	
.LABEL $label$10
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$9 }
	$11 = *(($6 + [72]))
	goto $label$7 
	
.LABEL $label$8
	$11 = $9
	
.LABEL $label$7
	*($0) = $9
	CALL _ZdlPv($11)
	
.LABEL $label$6
	CALL $48($6, $3, $4, $5)
	$9 = *(($6 + [36]))
	$0 = *(($6 + [32]))
	if ( ((int_32)$0 == (int_32)$9) ){ goto $label$12 }
	
.LOOP $label$14:
	$11 = ($9 + [-24])
	$12 = *($11)
	if ( ((int_64)*($12) == (int_64)$1) ){ goto $label$13 }
	$9 = $11
	if ( ((int_32)$0 != (int_32)$11) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$0 == (int_32)$9) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*($12 + [72]) == (int_32)($6 + [8])), [9909])
	goto $label$11 
	
.LABEL $label$12
	$12 = [0]
	$11 = CALL db_find_i64(*($6 + [8]), *(($6 + [16])), (int_64)-6147546106350911488, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$11 }
	$12 = CALL $60(($6 + [8]), $11)
	CALL eosio_assert(((int_32)*($12 + [72]) == (int_32)($6 + [8])), [9909])
	
.LABEL $label$11
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [10251])
	CALL eosio_assert(((int_32)*($12 + [72]) == (int_32)($6 + [8])), [10286])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $fimport$7()), [10332])
	$11 = ($12 + [8])
	$1 = *($11)
	*($11) = $2
	*($12 + [32 align=4]) = *($3)
	*(($12 + [40])) = *(($3 + [8]))
	*(($12 + [52])) = *(($4 + [8]))
	*($12 + [44 align=4]) = *($4)
	$9 = ($12 + [16])
	*((($6 + [144]) + [24])) = *($9)
	*($12 + [56 align=4]) = *($5)
	*(($12 + [64])) = *(($5 + [8]))
	$0 = ($12 + [24])
	*($6 + [160]) = *($0)
	*($6 + [144]) = $1
	$1 = *($12)
	CALL eosio_assert([1], [10383])
	*($6 + [136]) = (($6 + [48]) + [68])
	*($6 + [132]) = ($6 + [48])
	*($6 + [128]) = ($6 + [48])
	*($6 + [176]) = ($6 + [128])
	*($6 + [196]) = $11
	*($6 + [192]) = $12
	*($6 + [200]) = $9
	*($6 + [204]) = $0
	*($6 + [208]) = ($12 + [32])
	*($6 + [212]) = ($12 + [44])
	*($6 + [216]) = ($12 + [56])
	CALL $61(($6 + [192]), ($6 + [176]))
	CALL db_update_i64(*($12 + [76]), (int_64)0, ($6 + [48]), [68])
	$3 = (($6 + [8]) + [16])
	if ( (uint_64)($1 <= *($3)) ){ goto $label$15 }
	*($3) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	$3 = (($6 + [144]) + [16])
	*($6 + [192]) = *($11)
	if ( (CALL $138(($6 + [144]), ($6 + [192]), [8]) == 0) ){ goto $label$16 }
	$4 = ($12 + [80])
	$11 = *($4)
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$17 }
	$11 = CALL db_idx64_find_primary(*($6 + [8]), *(($6 + [16])), (int_64)-6147546106350911488, ($6 + [176]), $1)
	*($4) = $11
	
.LABEL $label$17
	CALL db_idx64_update($11, (int_64)0, ($6 + [192]))
	
.LABEL $label$16
	*($6 + [200]) = *($9)
	*($6 + [192]) = *($0)
	if ( (CALL $138($3, ($6 + [192]), [16]) == 0) ){ goto $label$18 }
	$12 = ($12 + [84])
	$11 = *($12)
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$19 }
	$11 = CALL db_idx128_find_primary(*($6 + [8]), *(($6 + [16])), (int_64)-6147546106350911487, ($6 + [176]), $1)
	*($12) = $11
	
.LABEL $label$19
	CALL db_idx128_update($11, (int_64)0, ($6 + [192]))
	
.LABEL $label$18
	$9 = *($6 + [32])
	if ( ($9 == 0) ){ goto $label$20 }
	$0 = ($6 + [36])
	$11 = *($0)
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$22 }
	
.LOOP $label$23:
	$11 = ($11 + [-24])
	$12 = *($11)
	*($11) = [0]
	if ( ($12 == 0) ){ goto $label$24 }
	CALL _ZdlPv($12)
	
.LABEL $label$24
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$23 }
	$11 = *(($6 + [32]))
	goto $label$21 
	
.LABEL $label$22
	$11 = $9
	
.LABEL $label$21
	*($0) = $9
	CALL _ZdlPv($11)
	
.LABEL $label$20
	$global$0 = ($6 + [224])
}

int_32 .FUNC $59 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$0), [9909])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6147546106350911488, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $60($0, $4)
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$0), [9909])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-6147546106350911488, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $60($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $96(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [10442])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [24]) = *(*($5 + [12]))
	$6 = *($5 + [16])
	*(($1 + [40])) = *(($6 + [8]))
	*($1 + [32 align=4]) = *($6)
	$6 = *($5 + [20])
	*($1 + [44 align=4]) = *($6)
	*(($1 + [52])) = *(($6 + [8]))
	$5 = *($5 + [24])
	*($1 + [56 align=4]) = *($5)
	*(($1 + [64])) = *(($5 + [8]))
	$6 = $2
	$5 = ($6 + [-80])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($6 + [-12])
	*($3 + [24]) = ($3 + [8])
	$6 = ($1 + [8])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	$2 = ($1 + [16])
	*($3 + [40]) = $2
	$8 = ($1 + [24])
	*($3 + [44]) = $8
	*($3 + [48]) = ($1 + [32])
	*($3 + [52]) = ($1 + [44])
	*($3 + [56]) = ($1 + [56])
	CALL $61(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($4 + [8]), (int_64)-6147546106350911488, *(*($0 + [8])), $7, $5, [68])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$5 = ($4 + [8])
	$7 = *($5)
	$0 = *(($0 + [8]))
	$9 = *($0)
	$10 = *($1)
	*($3 + [32]) = *($6)
	*($1 + [80]) = CALL db_idx64_store($7, (int_64)-6147546106350911488, $9, $10, ($3 + [32]))
	$7 = *($0)
	$9 = *($5)
	$10 = *($1)
	*($3 + [40]) = *($2)
	*($3 + [32]) = *($8)
	*(($1 + [84])) = CALL db_idx128_store($9, (int_64)-6147546106350911487, $7, $10, ($3 + [32]))
	$global$0 = ($3 + [64])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-5970682390358523904, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)$7), [9909])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $54($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)-5970682390358523904, $6))
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)$7), [9909])
	
.LABEL $label$2
	*($4 + [36]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10022])
	$3 = *($0 + [4])
	$4 = *($3 + [36])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-5970682390358523904, ($1 + [8]), *($3))
	*(*(($0 + [4])) + [36]) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)$7), [9909])
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $54($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)-5970682390358523904, $6))
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)$7), [9909])
	
.LABEL $label$3
	*($2 + [36]) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9960])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $142($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24]) = [0]
	*($5 + [28]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9983])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9983])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [36]) = ($2 + [16])
	CALL $98(($3 + [32]), ($5 + [16]))
	*($5 + [36]) = [-1]
	*($5 + [32]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $57(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $145($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $34 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = ($2 + [32]))) = [0]
	*(($2 + [38])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	*($2 + [36]) = [0]
	$4 = *($0)
	*($2) = $4
	*($2 + [8]) = $4
	CALL require_auth(*(CALL $28($2, $1, [8602]) + [8]))
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($2 + [28])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$5 }
	CALL _ZdlPv($8)
	
.LABEL $label$5
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	$7 = *(($2 + [24]))
	goto $label$2 
	
.LABEL $label$3
	$7 = $5
	
.LABEL $label$2
	*($6) = $5
	CALL _ZdlPv($7)
	
.LABEL $label$1
	*($3) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$4 = *($0)
	*($2) = $4
	*($2 + [8]) = $4
	CALL $35($2, $1, [8575])
	$8 = *(($2 + [28]))
	$0 = *($2 + [24])
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$7 }
	
.LOOP $label$9:
	$7 = ($8 + [-24])
	$5 = *($7)
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$8 }
	$8 = $7
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$2), [9909])
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	$7 = CALL db_find_i64(*($2), *(($2 + [8])), (int_64)-8527958567040319488, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $6($2, $7)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$2), [9909])
	
.LABEL $label$6
	$7 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($7, [9988])
	CALL eosio_assert($7, [10022])
	$7 = CALL db_next_i64(*($5 + [28]), ($2 + [40]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$10 }
	CALL $6($2, $7)
	
.LABEL $label$10
	CALL $7($2, $5)
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$11 }
	$0 = ($2 + [28])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	CALL _ZdlPv($8)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$14 }
	$7 = *(($2 + [24]))
	goto $label$12 
	
.LABEL $label$13
	$7 = $5
	
.LABEL $label$12
	*($0) = $5
	CALL _ZdlPv($7)
	
.LABEL $label$11
	$global$0 = ($2 + [48])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$5 = *($0)
	$6 = ($1 + [16])
	CALL $111($6, *($4 + [8]))
	$4 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [16])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [9903])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert(((int_32)($4 + [-8]) > (int_32)[7]), [9903])
	CALL memcpy(($2 + [8]), ($1 + [8]), [8])
	*($3 + [12]) = ($2 + [16])
	CALL $100(($3 + [8]), $6)
	$8 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($5 + [8]), (int_64)-5970682390358523904, *(*($0 + [8])), $8, $2, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL $145($2)
	
.LABEL $label$4
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$5 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$8 = *(($5 + [8]))
	$9 = *(*(($0 + [8])))
	$10 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [36]) = CALL db_idx64_store($8, (int_64)-5970682390358523904, $9, $10, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $139($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $112($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $117 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $112($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $115($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

int_32 .FUNC $35 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$0), [9909])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-8527958567040319488, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $6($0, $4)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$0), [9909])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $112($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $139 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $117($0, $1, $2, CALL $139($2))
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $114(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $137(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8696], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $114(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $114(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx_double_lowerbound(*($2), *($2 + [8]), (int_64)-8527970514705055743, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [52]) == (int_32)$7), [9909])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $10($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)-8527970514705055744, $6))
	CALL eosio_assert(((int_32)*($4 + [52]) == (int_32)$7), [9909])
	
.LABEL $label$2
	*(($4 + [64])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $28 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [52]) == (int_32)$0), [9909])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-8527970514705055744, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $10($0, $4)
	CALL eosio_assert(((int_32)*($5 + [52]) == (int_32)$0), [9909])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [32]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10548])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5970682390358523904)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10494])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10494])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $54(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $145($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9960])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $142($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [32]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	CALL $95(($3 + [40]), ($3 + [32]))
	*($5 + [52]) = $1
	*($5 + [56 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $42(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $145($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [64])
	$global$0 = $5
	if ( ((int_64)*($2) != (int_64)1) ){ goto $label$1 }
	*($5 + [48]) = $1
	CALL $63(($5 + [8]), ($5 + [48]), $4)
	$2 = *($5 + [12])
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((int_64)((int_64)((int_64)*($4) ^ (int_64)*($2 + [24])) | (int_64)((int_64)*(($4 + [8])) ^ (int_64)*($2 + [16]))) == (int_64)0) ){ goto $label$1 }
	
.LABEL $label$2
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	*($5 + [44]) = [0]
	$6 = *($0)
	*($5 + [8]) = $6
	*($5 + [16]) = $6
	$4 = [0]
	$2 = CALL db_find_i64($6, $6, (int_64)-5970682390358523904, *($3))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $54(($5 + [8]), $2)
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)($5 + [8])), [9909])
	
.LABEL $label$3
	$2 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($2, [9988])
	CALL eosio_assert($2, [10022])
	$2 = CALL db_next_i64(*($4 + [32]), ($5 + [56]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	CALL $54(($5 + [8]), $2)
	
.LABEL $label$4
	CALL $64(($5 + [8]), $4)
	$1 = *($5 + [32])
	if ( ($1 == 0) ){ goto $label$1 }
	$0 = ($5 + [36])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$7:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$9
	CALL _ZdlPv($2)
	
.LABEL $label$8
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$7 }
	$4 = *(($5 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$4 = $1
	
.LABEL $label$5
	*($0) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($5 + [64])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9903])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9903])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9903])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9903])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $100(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $121($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $25 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$0), [9909])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)5380477996647841792, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $26($0, $4)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$0), [9909])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $22($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9903])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9903])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $90(CALL $89($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $27 (int_32 $0, int_64 $1, float_64 $2, float_64 $3, float_64 $4, float_64 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	float_64 $14
	float_64 $15
	float_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	$6 = ($global$0 - [272])
	$global$0 = $6
	*($6 + [112]) = $3
	*($6 + [120]) = $2
	*($6 + [104]) = $4
	*($6 + [96]) = $5
	$7 = [0]
	*((($6 + [128]) + [32])) = [0]
	*(($6 + [166])) = [0]
	*($6 + [144]) = (int_64)-1
	*($6 + [152]) = (int_64)0
	*($6 + [164]) = [0]
	$8 = *($0)
	*($6 + [128]) = $8
	*($6 + [136]) = $8
	$9 = *(CALL $28(($6 + [128]), $1, [8602]) + [8])
	CALL require_auth($9)
	$10 = *($6 + [152])
	if ( ($10 == 0) ){ goto $label$1 }
	$11 = ($6 + [156])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$3 }
	
.LOOP $label$4:
	$12 = ($12 + [-24])
	$13 = *($12)
	*($12) = [0]
	if ( ($13 == 0) ){ goto $label$5 }
	CALL _ZdlPv($13)
	
.LABEL $label$5
	if ( ((int_32)$10 != (int_32)$12) ){ goto $label$4 }
	$12 = *(($6 + [152]))
	goto $label$2 
	
.LABEL $label$3
	$12 = $10
	
.LABEL $label$2
	*($11) = $10
	CALL _ZdlPv($12)
	
.LABEL $label$1
	*((($6 + [56]) + [32])) = [0]
	*($6 + [72]) = (int_64)-1
	*($6 + [80]) = (int_64)0
	$8 = *($0)
	*($6 + [56]) = $8
	*($6 + [64]) = $8
	$12 = CALL db_find_i64($8, $8, (int_64)-8527958567040319488, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $6(($6 + [56]), $12)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($6 + [56])), [9909])
	
.LABEL $label$6
	CALL eosio_assert(($7 == 0), [8389])
	$12 = [0]
	*(($6 + [48])) = [0]
	*(($6 + [54])) = [0]
	*($6 + [32]) = (int_64)-1
	*($6 + [40]) = (int_64)0
	*($6 + [52]) = [0]
	$8 = *($0)
	*($6 + [16]) = $8
	*($6 + [24]) = $8
	$13 = CALL $28(($6 + [16]), $1, [8432])
	$4 = *($13 + [40])
	$14 = *($13 + [24])
	$16 = *($13 + [32])
	$15 = *($13 + [16])
	$4 = CALL $131(((float_64)max ( (float_64)((float_64)CALL $129((float_64))($15 - $16)) * (float_64)(float_64)111133) , (float_64)(float_64)1 ) * (float_64)max ( (float_64)((float_64)((float_64)CALL $129((float_64))($14 - $4)) * (float_64)(float_64)111320) * (float_64)CALL $128(((float_64)((float_64)((float_64)((float_64)$15 + (float_64)$16) * (float_64)(float_64)0.5) * (float_64)(float_64)3.141592653589793) / (float_64)(float_64)180))) , (float_64)(float_64)1 )
	if ( ((float_64)(float_64)|$4))| < (float_64)(float_64)9223372036854775808) ){ goto $label$8 }
	$8 = (int_64)-9223372036854775808
	goto $label$7 
	
.LABEL $label$8
	$8 = (Rounds 0)($4)
	
.LABEL $label$7
	$17 = ((int_64)$8 * (int_64)10000)
	CALL eosio_assert((uint_64)(((int_64)$17 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9604])
	$8 = (int_64)4607561
	
.LOOP $label$10:
	$0 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$18 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$8 = $18
	$0 = [1]
	$13 = $12
	$12 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$8 = $18
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$13 = ((int_32)$12 < (int_32)[6])
	$10 = ($12 + [1])
	$12 = $10
	if ( $13 ){ goto $label$12 }
	$0 = [1]
	$12 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$10 }
	
.LABEL $label$9
	CALL eosio_assert($0, [9653])
	CALL $2($6, $6, ($6 + [120]), ($6 + [112]), ($6 + [104]), ($6 + [96]))
	$4 = CALL $131(((float_64)max ( (float_64)*($6) , (float_64)(float_64)1 ) * (float_64)max ( (float_64)*($6 + [8]) , (float_64)(float_64)1 )))
	if ( ((float_64)(float_64)|$4| < (float_64)(float_64)9223372036854775808) ){ goto $label$14 }
	$8 = (int_64)-9223372036854775808
	goto $label$13 
	
.LABEL $label$14
	$8 = (Rounds 0)($4)
	
.LABEL $label$13
	$19 = ((int_64)$8 * (int_64)10000)
	CALL eosio_assert((uint_64)(((int_64)$19 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9604])
	$8 = (int_64)4607561
	$12 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$18 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$8 = $18
	$13 = [1]
	$10 = $12
	$12 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$8 = $18
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$13 = ((int_32)$12 < (int_32)[6])
	$10 = ($12 + [1])
	$12 = $10
	if ( $13 ){ goto $label$19 }
	$13 = [1]
	$12 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$13 = [0]
	
.LABEL $label$15
	CALL eosio_assert($13, [9653])
	CALL eosio_assert([1], [9844])
	CALL eosio_assert(((int_64)$17 == (int_64)$19), [8451])
	*($6 + [240]) = ($6 + [16])
	CALL $29(($6 + [128]), ($6 + [240]), ($6 + [104]))
	$12 = *($6 + [132])
	if ( ($12 == 0) ){ goto $label$20 }
	$14 = ((float_64)$2 + (float_64)(float_64)5.3989364095273235e-03)
	
.LOOP $label$21:
	$4 = *($12 + [16])
	if ( ((int_32)((float_64)$4 < (float_64)$14) ^ (int_32)[1]) ){ goto $label$20 }
	$13 = [1]
	if ( ((float_64)*($12 + [24]) <= (float_64)$5) ){ goto $label$22 }
	if ( ((float_64)*($12 + [40]) >= (float_64)$3) ){ goto $label$22 }
	if ( ((float_64)*($12 + [32]) >= (float_64)$2) ){ goto $label$22 }
	if ( ((float_64)$4 <= (float_64)*($6 + [104])) ){ goto $label$22 }
	$13 = ((int_64)*($12) == (int_64)$1)
	
.LABEL $label$22
	CALL eosio_assert($13, [8192])
	CALL $30(($6 + [128]))
	$12 = *($6 + [132])
	if ( $12 ){ goto $label$21 }
	
.LABEL $label$20
	$10 = *(($6 + [44]))
	$0 = *(($6 + [40]))
	if ( ((int_32)$0 == (int_32)$10) ){ goto $label$24 }
	
.LOOP $label$26:
	$12 = ($10 + [-24])
	$13 = *($12)
	if ( ((int_64)*($13) == (int_64)$1) ){ goto $label$25 }
	$10 = $12
	if ( ((int_32)$0 != (int_32)$12) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	if ( ((int_32)$0 == (int_32)$10) ){ goto $label$24 }
	CALL eosio_assert(((int_32)*($13 + [52]) == (int_32)($6 + [16])), [9909])
	goto $label$23 
	
.LABEL $label$24
	$13 = [0]
	$12 = CALL db_find_i64(*($6 + [16]), *(($6 + [24])), (int_64)-8527970514705055744, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$23 }
	$13 = CALL $10(($6 + [16]), $12)
	CALL eosio_assert(((int_32)*($13 + [52]) == (int_32)($6 + [16])), [9909])
	
.LABEL $label$23
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [10251])
	CALL eosio_assert(((int_32)*($13 + [52]) == (int_32)($6 + [16])), [10286])
	CALL eosio_assert(((int_64)*($6 + [16]) == (int_64)CALL $fimport$7()), [10332])
	$12 = ($13 + [16])
	$8 = *($12)
	*($12) = $2
	$10 = ($13 + [24])
	$1 = *($10)
	*($10) = $3
	*($13 + [40]) = $5
	*($13 + [32]) = *($6 + [104])
	$0 = ($13 + [8])
	*($6 + [208]) = *($0)
	*($6 + [216]) = $8
	*($6 + [224]) = $1
	$8 = *($13)
	CALL eosio_assert([1], [10383])
	*($6 + [200]) = (($6 + [128]) + [52])
	*($6 + [196]) = ($6 + [128])
	*($6 + [192]) = ($6 + [128])
	*($6 + [232]) = ($6 + [192])
	*($6 + [244]) = $0
	*($6 + [240]) = $13
	*($6 + [248]) = $12
	*($6 + [252]) = $10
	*($6 + [256]) = ($13 + [32])
	*($6 + [260]) = ($13 + [40])
	*($6 + [264]) = ($13 + [48])
	CALL $31(($6 + [240]), ($6 + [232]))
	CALL db_update_i64(*($13 + [56]), $9, ($6 + [128]), [52])
	$7 = (($6 + [16]) + [16])
	if ( (uint_64)($8 <= *($7)) ){ goto $label$27 }
	*($7) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$27
	$7 = (($6 + [208]) + [8])
	*($6 + [240]) = *($0)
	if ( (CALL $138(($6 + [208]), ($6 + [240]), [8]) == 0) ){ goto $label$28 }
	$0 = *($13 + [60])
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$29 }
	$0 = CALL db_idx64_find_primary(*($6 + [16]), *(($6 + [24])), (int_64)-8527970514705055744, ($6 + [232]), $8)
	*(($13 + [60])) = $0
	
.LABEL $label$29
	CALL db_idx64_update($0, $9, ($6 + [240]))
	
.LABEL $label$28
	$0 = (($6 + [208]) + [16])
	*($6 + [240]) = *($12)
	if ( (CALL $138($7, ($6 + [240]), [8]) == 0) ){ goto $label$30 }
	$7 = ($13 + [64])
	$12 = *($7)
	if ( ((int_32)$12 > (int_32)[-1]) ){ goto $label$31 }
	$12 = CALL db_idx_double_find_primary(*($6 + [16]), *(($6 + [24])), (int_64)-8527970514705055743, ($6 + [232]), $8)
	*($7) = $12
	
.LABEL $label$31
	CALL db_idx_double_update($12, $9, ($6 + [240]))
	
.LABEL $label$30
	*($6 + [240]) = *($10)
	if ( (CALL $138($0, ($6 + [240]), [8]) == 0) ){ goto $label$32 }
	$13 = ($13 + [68])
	$12 = *($13)
	if ( ((int_32)$12 > (int_32)[-1]) ){ goto $label$33 }
	$12 = CALL db_idx_double_find_primary(*($6 + [16]), *(($6 + [24])), (int_64)-8527970514705055742, ($6 + [232]), $8)
	*($13) = $12
	
.LABEL $label$33
	CALL db_idx_double_update($12, $9, ($6 + [240]))
	
.LABEL $label$32
	$10 = *($6 + [40])
	if ( ($10 == 0) ){ goto $label$34 }
	$0 = ($6 + [44])
	$12 = *($0)
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$36 }
	
.LOOP $label$37:
	$12 = ($12 + [-24])
	$13 = *($12)
	*($12) = [0]
	if ( ($13 == 0) ){ goto $label$38 }
	CALL _ZdlPv($13)
	
.LABEL $label$38
	if ( ((int_32)$10 != (int_32)$12) ){ goto $label$37 }
	$12 = *(($6 + [40]))
	goto $label$35 
	
.LABEL $label$36
	$12 = $10
	
.LABEL $label$35
	*($0) = $10
	CALL _ZdlPv($12)
	
.LABEL $label$34
	$10 = *($6 + [80])
	if ( ($10 == 0) ){ goto $label$39 }
	$0 = ($6 + [84])
	$12 = *($0)
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$41 }
	
.LOOP $label$42:
	$12 = ($12 + [-24])
	$13 = *($12)
	*($12) = [0]
	if ( ($13 == 0) ){ goto $label$43 }
	CALL _ZdlPv($13)
	
.LABEL $label$43
	if ( ((int_32)$10 != (int_32)$12) ){ goto $label$42 }
	$12 = *(($6 + [80]))
	goto $label$40 
	
.LABEL $label$41
	$12 = $10
	
.LABEL $label$40
	*($0) = $10
	CALL _ZdlPv($12)
	
.LABEL $label$39
	$global$0 = ($6 + [272])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9960])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $142($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9983])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [9983])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [9983])
	CALL memcpy(($3 + [24]), ($2 + [16]), [8])
	*($5 + [16]) = *($3 + [24])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$7 = *($5)
	*($3 + [24]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $67(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $145($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $109 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $135 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10052])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10097])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10147])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $68 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = [1]
	if ( CALL has_auth($1) ){ goto $label$1 }
	$3 = CALL has_auth(*($0))
	
.LABEL $label$1
	CALL eosio_assert($3, [8915])
	*(($2 + [80])) = [0]
	*($2 + [64]) = (int_64)-1
	*($2 + [72]) = (int_64)0
	$4 = *($0)
	*($2 + [48]) = $4
	*($2 + [56]) = $4
	$3 = CALL $25(($2 + [48]), $1, [8963])
	$4 = *($3 + [8])
	if ( ((int_64)$4 < (int_64)1) ){ goto $label$3 }
	*(($2 + [24])) = [0]
	*($2 + [32]) = $4
	*($2 + [16]) = (int_64)0
	*($2 + [40]) = *(($3 + [16]))
	$4 = *($0)
	$3 = CALL $139([8999])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($2 + [16]) = ($3 << [1])
	$5 = (($2 + [16]) | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2 + [16]) = ($6 | [1])
	*($2 + [24]) = $5
	*($2 + [20]) = $3
	
.LABEL $label$5
	CALL memcpy($5, [8999], $3)
	
.LABEL $label$4
	*(($5 + $3)) = [0]
	*(($2 + [8])) = *((($2 + [32]) + [8]))
	*($2) = *($2 + [32])
	CALL $9($0, $4, $1, $2, ($2 + [16]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($2 + [24]))
	
.LABEL $label$3
	$3 = *(($2 + [76]))
	$6 = *(($2 + [72]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$10:
	$0 = ($3 + [-24])
	$5 = *($0)
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$9 }
	$3 = $0
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($2 + [48])), [9909])
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	$0 = CALL db_find_i64(*($2 + [48]), *(($2 + [56])), (int_64)5380477996647841792, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$7 }
	$5 = CALL $26(($2 + [48]), $0)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($2 + [48])), [9909])
	
.LABEL $label$7
	$0 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($0, [9988])
	CALL eosio_assert($0, [10022])
	$0 = CALL db_next_i64(*($5 + [28]), ($2 + [88]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$11 }
	CALL $26(($2 + [48]), $0)
	
.LABEL $label$11
	CALL $69(($2 + [48]), $5)
	$5 = *($2 + [72])
	if ( ($5 == 0) ){ goto $label$12 }
	$6 = ($2 + [76])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$14 }
	
.LOOP $label$15:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$16 }
	CALL _ZdlPv($3)
	
.LABEL $label$16
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$15 }
	$0 = *(($2 + [72]))
	goto $label$13 
	
.LABEL $label$14
	$0 = $5
	
.LABEL $label$13
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$12
	$global$0 = ($2 + [96])
	return (unreachable)
	
.LABEL $label$2
	CALL $109(($2 + [16]))
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $65 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*($2 + [48]) = $1
	CALL require_auth($1)
	*(($3 = ($2 + [40]))) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$4 = *($0)
	*($2 + [8]) = $4
	*($2 + [16]) = $4
	$0 = CALL db_find_i64($4, $4, (int_64)5380477996647841792, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $26(($2 + [8]), $0) + [24]) == (int_32)($2 + [8])), [9909])
	$5 = *($2 + [32])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($2) = ($2 + [48])
	*($2 + [88]) = $1
	CALL eosio_assert(((int_64)$4 == (int_64)CALL $fimport$7()), [10200])
	*($2 + [68]) = $2
	*($2 + [64]) = ($2 + [8])
	*($2 + [72]) = ($2 + [88])
	*(($0 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = ($2 + [8])
	CALL $66(($2 + [64]), $0)
	*($2 + [80]) = $0
	$1 = *($0)
	*($2 + [64]) = $1
	$6 = *($0 + [28])
	*($2 + [60]) = $6
	$7 = ($2 + [36])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*($3)) ){ goto $label$6 }
	*($5 + [8]) = $1
	*($5 + [16]) = $6
	*($2 + [80]) = [0]
	*($5) = $0
	*($7) = ($5 + [24])
	$0 = *($2 + [80])
	*($2 + [80]) = [0]
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $67(($2 + [32]), ($2 + [80]), ($2 + [64]), ($2 + [60]))
	$0 = *($2 + [80])
	*($2 + [80]) = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($2 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($2 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [96])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [10052])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10097])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10147])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($6 + [24])))
	
.LABEL $label$13
	CALL _ZdlPv($6)
	
.LABEL $label$12
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [32]))
	$6 = *($1 + [36])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5970682390358523904, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	*($1) = *(*(*($0 + [4])))
	$4 = *($0)
	CALL eosio_assert([1], [9604])
	$5 = (int_64)4607561
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $7
	$8 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [9653])
	*(($9 = ($1 + [16]))) = (int_64)1179535620
	*($1 + [8]) = (int_64)0
	$6 = $2
	$8 = ($6 + [-32])
	$global$0 = $8
	CALL eosio_assert([1], [9903])
	CALL memcpy($8, $1, [8])
	CALL eosio_assert([1], [9903])
	CALL memcpy(($6 + [-24]), ($1 + [8]), [8])
	*($3 + [8]) = *($9)
	CALL eosio_assert([1], [9903])
	CALL memcpy(($6 + [-16]), ($3 + [8]), [8])
	$5 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)5380477996647841792, *(*($0 + [8])), $5, $8, [24])
	if ( (uint_64)($5 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9903])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9903])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9903])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9903])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9903])
	CALL memcpy(*($3 + [4]), $2, [4])
	$4 = (*($3 + [4]) + [4])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[3]), [9903])
	CALL memcpy(*($3 + [4]), ($2 + [4]), [4])
	$4 = (*($3 + [4]) + [4])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[3]), [9903])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9903])
	CALL memcpy(*($3 + [4]), $2, [4])
	$4 = (*($3 + [4]) + [4])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[3]), [9903])
	CALL memcpy(*($3 + [4]), ($2 + [4]), [4])
	$4 = (*($3 + [4]) + [4])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[3]), [9903])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$0 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9903])
	CALL memcpy(*($3 + [4]), $0, [4])
	$1 = (*($3 + [4]) + [4])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[3]), [9903])
	CALL memcpy(*($3 + [4]), ($0 + [4]), [4])
	$1 = (*($3 + [4]) + [4])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[3]), [9903])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9960])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $142($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [72]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [44])
	*($3 + [56]) = ($5 + [56])
	CALL $97(($3 + [32]), ($3 + [24]))
	*($5 + [76]) = $1
	*($5 + [80 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $51(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $145($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_lowerbound(*($2), *($2 + [8]), (int_64)-6147546106350911487, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [9909])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $60($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)-6147546106350911488, $6))
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [9909])
	
.LABEL $label$2
	*(($4 + [84])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

void .FUNC $62 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [112])
	$global$0 = $2
	*((($2 + [24]) + [32])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	*($2 + [60]) = [0]
	$3 = *($0)
	*($2 + [24]) = $3
	*($2 + [32]) = $3
	$3 = *(CALL $59(($2 + [24]), $1, [9432]) + [8])
	*((($2 + [64]) + [32])) = [0]
	*(($2 + [102])) = [0]
	*($2 + [80]) = (int_64)-1
	*($2 + [88]) = (int_64)0
	*($2 + [100]) = [0]
	$4 = *($0)
	*($2 + [64]) = $4
	*($2 + [72]) = $4
	CALL require_auth(*(CALL $28(($2 + [64]), $3, [8602]) + [8]))
	$5 = *($2 + [88])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($2 + [92])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$5 }
	CALL _ZdlPv($8)
	
.LABEL $label$5
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	$7 = *(($2 + [88]))
	goto $label$2 
	
.LABEL $label$3
	$7 = $5
	
.LABEL $label$2
	*($6) = $5
	CALL _ZdlPv($7)
	
.LABEL $label$1
	$7 = CALL $59(($2 + [24]), $1, [8432])
	$3 = *($7 + [24])
	$4 = *($7 + [16])
	*($2 + [16]) = $4
	*($2 + [8]) = $3
	*($2 + [72]) = $4
	*($2 + [64]) = $3
	$8 = *(($2 + [52]))
	$6 = *(($2 + [48]))
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$7 }
	
.LOOP $label$9:
	$7 = ($8 + [-24])
	$5 = *($7)
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$8 }
	$8 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)($2 + [24])), [9909])
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	$7 = CALL db_find_i64(*($2 + [24]), *(($2 + [32])), (int_64)-6147546106350911488, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $60(($2 + [24]), $7)
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)($2 + [24])), [9909])
	
.LABEL $label$6
	$7 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($7, [9988])
	CALL eosio_assert($7, [10022])
	$7 = CALL db_next_i64(*($5 + [76]), ($2 + [104]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$10 }
	CALL $60(($2 + [24]), $7)
	
.LABEL $label$10
	CALL $19(($2 + [24]), $5)
	CALL $20($0, ($2 + [24]), ($2 + [16]), ($2 + [8]), ($2 + [64]))
	$5 = *($2 + [48])
	if ( ($5 == 0) ){ goto $label$11 }
	$6 = ($2 + [52])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	CALL _ZdlPv($8)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$14 }
	$7 = *(($2 + [48]))
	goto $label$12 
	
.LABEL $label$13
	$7 = $5
	
.LABEL $label$12
	*($6) = $5
	CALL _ZdlPv($7)
	
.LABEL $label$11
	$global$0 = ($2 + [112])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $142($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10600])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $142($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9903])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9903])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $145($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $140(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10600])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $140(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9903])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9903])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9903])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $110(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $110(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9983])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $98(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [9983])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9983])
	CALL memcpy(($0 + [16]), *($3 + [4]), [4])
	$2 = (*($3 + [4]) + [4])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[3]), [9983])
	CALL memcpy(($0 + [20]), *($3 + [4]), [4])
	$2 = (*($3 + [4]) + [4])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[3]), [9983])
	CALL memcpy(($0 + [24]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9983])
	CALL memcpy(($0 + [28]), *($3 + [4]), [4])
	$2 = (*($3 + [4]) + [4])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[3]), [9983])
	CALL memcpy(($0 + [32]), *($3 + [4]), [4])
	$2 = (*($3 + [4]) + [4])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[3]), [9983])
	CALL memcpy(($0 + [36]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9983])
	CALL memcpy(($0 + [40]), *($3 + [4]), [4])
	$1 = (*($3 + [4]) + [4])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[3]), [9983])
	CALL memcpy(($0 + [44]), *($3 + [4]), [4])
	$1 = (*($3 + [4]) + [4])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[3]), [9983])
	CALL memcpy(($0 + [48]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [224])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $110(($2 + [96]), ($1 + [8]))
	*(($5 = (($2 + [80]) + [8]))) = *(($1 + [28]))
	*(($6 = (($2 + [64]) + [8]))) = *(($1 + [40]))
	*(($7 = (($2 + [48]) + [8]))) = *(($1 + [52]))
	*($2 + [80]) = *($1 + [20 align=4])
	*($2 + [64]) = *($1 + [32 align=4])
	*($2 + [48]) = *($1 + [44 align=4])
	*((($2 + [144]) + [8])) = *($7)
	*((($2 + [128]) + [8])) = *($6)
	*((($2 + [112]) + [8])) = *($5)
	*($2 + [144]) = *($2 + [48])
	*($2 + [128]) = *($2 + [64])
	*($2 + [112]) = *($2 + [80])
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*($0) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$5 = CALL $110(($2 + [208]), $4)
	$6 = *((($2 + [112]) + [8]))
	*((($2 + [192]) + [8])) = $6
	$7 = *((($2 + [128]) + [8]))
	*((($2 + [176]) + [8])) = $7
	$8 = *((($2 + [144]) + [8]))
	*((($2 + [160]) + [8])) = $8
	*((($2 + [32]) + [8])) = $6
	*((($2 + [16]) + [8])) = $7
	*(($2 + [8])) = $8
	$9 = *($2 + [112])
	*($2 + [192]) = $9
	$10 = *($2 + [128])
	*($2 + [176]) = $10
	*($2 + [32]) = $9
	*($2 + [16]) = $10
	$9 = *($2 + [144])
	*($2) = $9
	*($2 + [160]) = $9
	CALL void $0((int_32 $3), (int_64 $5), (int_32 ($2 + [32])), (int_32 ($2 + [16])), (int_32 $2), (int_32 $1))
	if ( (*($2 + [208]) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [224])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [224])
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	CALL $98(*($1), ($0 + [8]))
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9983])
	CALL memcpy(($0 + [20]), *($3 + [4]), [4])
	$2 = (*($3 + [4]) + [4])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[3]), [9983])
	CALL memcpy(($0 + [24]), *($3 + [4]), [4])
	$2 = (*($3 + [4]) + [4])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[3]), [9983])
	CALL memcpy(($0 + [28]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9983])
	CALL memcpy(($0 + [32]), *($3 + [4]), [4])
	$2 = (*($3 + [4]) + [4])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[3]), [9983])
	CALL memcpy(($0 + [36]), *($3 + [4]), [4])
	$2 = (*($3 + [4]) + [4])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[3]), [9983])
	CALL memcpy(($0 + [40]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9983])
	CALL memcpy(($0 + [44]), *($3 + [4]), [4])
	$1 = (*($3 + [4]) + [4])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[3]), [9983])
	CALL memcpy(($0 + [48]), *($3 + [4]), [4])
	$1 = (*($3 + [4]) + [4])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[3]), [9983])
	CALL memcpy(($0 + [52]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy(($3 + [32]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9983])
	CALL memcpy(($3 + [32]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC $80 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [120]) + [24]))) = [0]
	*(($8 = ($4 + [156]))) = [0]
	*(($9 = ($4 + [168]))) = [0]
	*($4 + [128]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [148 align=4]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [108]) = $2
	*($4 + [104]) = $2
	*($4 + [112]) = ($2 + $7)
	*($4 + [304]) = ($4 + [104])
	*($4 + [72]) = ($4 + [120])
	CALL $85(($4 + [72]), ($4 + [304]))
	*(($10 = (($4 + [56]) + [8]))) = *($4 + [112])
	*($4 + [56]) = *($4 + [104])
	*(($11 = (($4 + [288]) + [8]))) = *($10)
	*($4 + [288]) = *($4 + [56])
	$10 = *($11)
	*((($4 + [304]) + [8])) = $10
	*((($4 + [72]) + [24])) = $10
	*($4 + [72]) = $0
	*($4 + [80]) = $1
	$0 = *($4 + [288])
	*($4 + [88]) = $0
	*($4 + [304]) = $0
	*(($10 = (($4 + [208]) + [8]))) = *($3)
	*(($3 = (($4 + [192]) + [8]))) = *($8)
	*(($8 = (($4 + [176]) + [8]))) = *($9)
	*($4 + [208]) = *($4 + [136])
	*($4 + [192]) = *($4 + [148 align=4])
	*($4 + [176]) = *($4 + [160])
	$0 = *($4 + [128])
	$1 = *($4 + [120])
	*((($4 + [256]) + [8])) = *($8)
	*((($4 + [240]) + [8])) = *($3)
	*((($4 + [224]) + [8])) = *($10)
	*($4 + [256]) = *($4 + [176])
	*($4 + [240]) = *($4 + [192])
	*($4 + [224]) = *($4 + [208])
	$3 = (($4 + [72]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = *((($4 + [224]) + [8]))
	*((($4 + [304]) + [8])) = $5
	$8 = *((($4 + [240]) + [8]))
	*((($4 + [288]) + [8])) = $8
	$9 = *((($4 + [256]) + [8]))
	*((($4 + [272]) + [8])) = $9
	*((($4 + [40]) + [8])) = $5
	*((($4 + [24]) + [8])) = $8
	*((($4 + [8]) + [8])) = $9
	$12 = *($4 + [224])
	*($4 + [304]) = $12
	$13 = *($4 + [240])
	*($4 + [288]) = $13
	*($4 + [40]) = $12
	*($4 + [24]) = $13
	$12 = *($4 + [256])
	*($4 + [8]) = $12
	*($4 + [272]) = $12
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [40])), (int_32 ($4 + [24])), (int_32 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $145($2)
	
.LABEL $label$5
	$global$0 = ($4 + [320])
	return [1]
}

void .FUNC $145 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19004])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18812]
	$3 = (((int_32)$1 * (int_32)[12]) + [18812])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $144 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10612]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10616])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10612]) = [1]
	$2 = ($2 << [16])
	*([0] + [10616]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10616])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10616]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10612]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10612]) = [1]
	$3 = ($3 << [16])
	*([0] + [10616]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10616])
	
.LABEL $label$10
	*([0] + [10616]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $142($1)
	
.LABEL $label$2
	*(CALL $122()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $142(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $145($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $140 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $122())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $141($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $144($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8281])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $142 (int_32 $0)
{
	return CALL $143([10620], $0)
}

int_32 .FUNC $72 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	float_64 $9
	float_64 $10
	float_64 $11
	float_64 $12
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [128]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $81(($4 + [24]), ($4 + [128]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($8 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4 + [8])
	$3 = *($8)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$9 = *($4 + [104])
	$10 = *($4 + [96])
	$11 = *($4 + [88])
	$12 = *($4 + [80])
	$0 = *($4 + [72])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $12), (int_64 $11), (int_64 $10), (int_64 $9), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $145($2)
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return [1]
}

int_32 .FUNC $73 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $87(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $88(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $145($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC $70 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$5 = ($global$0 - [80])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)$1 == (int_64)8419173534537145664) ){ goto $label$1 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	$7 = *($3 + [8])
	CALL eosio_assert(((int_64)$7 == (int_64)1179535620), [9018])
	$8 = [0]
	$9 = [0]
	$10 = *($3)
	if ( ((uint_64)((int_64)$10 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$2 = (uint_64)$7 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$2 = $6
	$9 = [1]
	$11 = $3
	$3 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$2 = $6
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$9 = ((int_32)$3 < (int_32)[6])
	$11 = ($3 + [1])
	$3 = $11
	if ( $9 ){ goto $label$6 }
	$9 = [1]
	$3 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	
.LABEL $label$2
	CALL eosio_assert($9, [8521])
	CALL eosio_assert(((int_64)$10 > (int_64)0), [8547])
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$2 = *($0)
	*($5 + [8]) = $2
	*($5 + [16]) = $2
	$3 = CALL db_find_i64($2, $2, (int_64)5380477996647841792, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $26(($5 + [8]), $3)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($5 + [8])), [9909])
	
.LABEL $label$7
	$3 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($3, [8963])
	CALL eosio_assert($3, [10251])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($5 + [8])), [10286])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)CALL $fimport$7()), [10332])
	$2 = *($8)
	$3 = ($8 + [16])
	CALL eosio_assert(((int_64)$7 == (int_64)*($3)), [9764])
	$1 = ((int_64)*($8 + [8]) + (int_64)$10)
	*($8 + [8]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9807])
	CALL eosio_assert(((int_64)*($8 + [8]) < (int_64)4611686018427387904), [9826])
	CALL eosio_assert(((int_64)$2 == (int_64)*($8)), [10383])
	CALL eosio_assert([1], [9903])
	CALL memcpy(($5 + [48]), $8, [8])
	CALL eosio_assert([1], [9903])
	CALL memcpy((($5 + [48]) | [8]), ($8 + [8]), [8])
	*($5 + [72]) = *($3)
	CALL eosio_assert([1], [9903])
	CALL memcpy((($5 + [48]) + [16]), ($5 + [72]), [8])
	CALL db_update_i64(*($8 + [28]), (int_64)0, ($5 + [48]), [24])
	$3 = (($5 + [8]) + [16])
	if ( (uint_64)($2 <= *($3)) ){ goto $label$8 }
	*($3) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$11 = *($5 + [32])
	if ( ($11 == 0) ){ goto $label$1 }
	$8 = ($5 + [36])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)$11) ){ goto $label$10 }
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$9 = *($3)
	*($3) = [0]
	if ( ($9 == 0) ){ goto $label$12 }
	CALL _ZdlPv($9)
	
.LABEL $label$12
	if ( ((int_32)$11 != (int_32)$3) ){ goto $label$11 }
	$3 = *(($5 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$3 = $11
	
.LABEL $label$9
	*($8) = $11
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($5 + [80])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [240])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$15 }
	if ( ((int_64)$2 > (int_64)-3075276115275801217) ){ goto $label$14 }
	if ( ((int_64)$2 <= (int_64)-6147546106165953537) ){ goto $label$13 }
	if ( ((int_64)$2 > (int_64)-4999377776003076609) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-6147546106165953536) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-5000987466190444912) ){ goto $label$1 }
	*($3 + [236]) = [0]
	*($3 + [232]) = [1]
	*($3) = *($3 + [232])
	CALL $72($1, $1, $3)
	goto $label$1 
	
.LABEL $label$15
	if ( ((int_64)$1 != (int_64)8419173534537145664) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [2]
	*($3 + [112]) = *($3 + [120])
	CALL $73($0, (int_64)8419173534537145664, ($3 + [112]))
	goto $label$1 
	
.LABEL $label$14
	if ( ((int_64)$2 <= (int_64)4730614996631465471) ){ goto $label$12 }
	if ( ((int_64)$2 > (int_64)4929617662530952591) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)4730614996631465472) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)4730614998698196992) ){ goto $label$1 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [3]
	*($3 + [64]) = *($3 + [168])
	CALL $74($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)-7953169829895602176) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-7694777532175876096) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-6533257776649227776) ){ goto $label$1 }
	*($3 + [196]) = [0]
	*($3 + [192]) = [4]
	*($3 + [40]) = *($3 + [192])
	CALL $75($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)-3075276115275801216) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)3607571208680943104) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)4520790822920126464) ){ goto $label$1 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [5]
	*($3 + [72]) = *($3 + [160])
	CALL $76($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)-4999377776003076608) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-4417165587185430368) ){ goto $label$1 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [6]
	*($3 + [56]) = *($3 + [176])
	CALL $77($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)4929617662530952592) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)5378050754042797440) ){ goto $label$1 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [7]
	*($3 + [32]) = *($3 + [200])
	CALL $74($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [220]) = [0]
	*($3 + [216]) = [8]
	*($3 + [16]) = *($3 + [216])
	CALL $78($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [148]) = [0]
	*($3 + [144]) = [9]
	*($3 + [88]) = *($3 + [144])
	CALL $74($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [156]) = [0]
	*($3 + [152]) = [10]
	*($3 + [80]) = *($3 + [152])
	CALL $76($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [228]) = [0]
	*($3 + [224]) = [11]
	*($3 + [8]) = *($3 + [224])
	CALL $79($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [212]) = [0]
	*($3 + [208]) = [12]
	*($3 + [24]) = *($3 + [208])
	CALL $80($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [140]) = [0]
	*($3 + [136]) = [13]
	*($3 + [96]) = *($3 + [136])
	CALL $77($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [132]) = [0]
	*($3 + [128]) = [14]
	*($3 + [104]) = *($3 + [128])
	CALL $74($1, $1, ($3 + [104]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [188]) = [0]
	*($3 + [184]) = [15]
	*($3 + [48]) = *($3 + [184])
	CALL $75($1, $1, ($3 + [48]))
	
.LABEL $label$1
	CALL $123([0])
	$global$0 = ($3 + [240])
}

int_32 .FUNC $76 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [80]) + [24]))) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [68]) = $2
	*($4 + [64]) = $2
	*($4 + [72]) = ($2 + $7)
	*($4 + [144]) = ($4 + [64])
	*($4 + [32]) = ($4 + [80])
	CALL $86(($4 + [32]), ($4 + [144]))
	*(($9 = (($4 + [16]) + [8]))) = *($4 + [72])
	*($4 + [16]) = *($4 + [64])
	*(($3 = (($4 + [128]) + [8]))) = *($9)
	*($4 + [128]) = *($4 + [16])
	$9 = *($3)
	*((($4 + [144]) + [8])) = $9
	*((($4 + [32]) + [24])) = $9
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$0 = *($4 + [128])
	*($4 + [48]) = $0
	*($4 + [144]) = $0
	*(($9 = (($4 + [112]) + [8]))) = *($8)
	*($4 + [112]) = *($4 + [96])
	$0 = *($4 + [88])
	$1 = *($4 + [80])
	*($3) = *($9)
	*($4 + [128]) = *($4 + [112])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$10 = *((($4 + [128]) + [8]))
	*((($4 + [144]) + [8])) = $10
	*(($4 + [8])) = $10
	$10 = *($4 + [128])
	*($4) = $10
	*($4 + [144]) = $10
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $145($2)
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return [1]
}

int_32 .FUNC $77 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [56]) + [16]))) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9983])
	CALL memcpy(($4 + [56]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [9983])
	CALL memcpy((($4 + [56]) + [8]), ($2 + [8]), [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [9983])
	CALL memcpy(($4 + [24]), ($2 + [16]), [8])
	*($3) = *($4 + [24])
	*(($4 + [44])) = ($2 + [24])
	*((($4 + [24]) + [24])) = ($2 + $7)
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $2
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4 + [64])
	$0 = *($4 + [56])
	*((($4 + [96]) + [8])) = *($8)
	*($4 + [96]) = *($4 + [80])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [96]) + [8]))
	*((($4 + [112]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [96])
	*($4 + [8]) = $1
	*($4 + [112]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $145($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

int_32 .FUNC $74 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9983])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $145($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10022])
	$2 = *($0 + [4])
	$3 = *(($2 + [60]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-8527959324524806143, ($1 + [8]), *($2))
	*((*(($0 + [4])) + [60])) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$6), [9909])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $21($6, CALL $fimport$3(*($6), *($6 + [8]), (int_64)-8527959324524806144, $5))
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$6), [9909])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [60])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $36 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [320])
	$global$0 = $4
	*($4 + [168]) = $1
	*($4 + [160]) = $2
	CALL require_auth($1)
	*((($4 + [120]) + [32])) = [0]
	*(($4 + [158])) = [0]
	*($4 + [136]) = (int_64)-1
	*($4 + [144]) = (int_64)0
	*($4 + [156]) = [0]
	$5 = *($0)
	*($4 + [120]) = $5
	*($4 + [128]) = $5
	$5 = *(CALL $28(($4 + [120]), $2, [8602]) + [8])
	CALL eosio_assert(((int_64)$5 != (int_64)$1), [8625])
	CALL require_recipient($5)
	*((($4 + [80]) + [32])) = [0]
	*($4 + [96]) = (int_64)-1
	*($4 + [104]) = (int_64)0
	$1 = *($0)
	*($4 + [80]) = $1
	*($4 + [88]) = $1
	$7 = CALL $35(($4 + [80]), $2, [8575])
	$2 = *(($7 + [16]))
	*(($6 = (($4 + [56]) + [16]))) = $2
	*(($8 = (($4 + [56]) + [8]))) = *(($7 + [8]))
	*($4 + [56]) = *($7)
	CALL eosio_assert(((int_64)$2 == (int_64)*($3 + [8])), [9844])
	CALL eosio_assert(((int_64)*($3) == (int_64)*($8)), [8654])
	CALL $14($0, ($4 + [168]), $8)
	*((($4 + [24]) + [8])) = [0]
	*((($4 + [40]) + [8])) = *($6)
	*($4 + [24]) = (int_64)0
	*($4 + [40]) = *($8)
	$2 = *($0)
	$8 = CALL $139([8700])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$4 }
	*($4 + [24]) = ($8 << [1])
	$3 = (($4 + [24]) | [1])
	if ( $8 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$3 = CALL _Znwj($7)
	*($4 + [24]) = ($7 | [1])
	*($4 + [32]) = $3
	*($4 + [28]) = $8
	
.LABEL $label$3
	CALL memcpy($3, [8700], $8)
	
.LABEL $label$2
	*(($3 + $8)) = [0]
	*((($4 + [8]) + [8])) = *((($4 + [40]) + [8]))
	*($4 + [8]) = *($4 + [40])
	CALL $9($0, $2, $5, ($4 + [8]), ($4 + [24]))
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($4 + [32]))
	
.LABEL $label$5
	$2 = *($4 + [160])
	$3 = *(($4 + [108]))
	$6 = *(($4 + [104]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$9:
	$8 = ($3 + [-24])
	$7 = *($8)
	if ( ((int_64)*($7) == (int_64)$2) ){ goto $label$8 }
	$3 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($4 + [80])), [9909])
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	$8 = CALL db_find_i64(*($4 + [80]), *(($4 + [88])), (int_64)-8527958567040319488, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $6(($4 + [80]), $8)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($4 + [80])), [9909])
	
.LABEL $label$6
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [9988])
	CALL eosio_assert($8, [10022])
	$8 = CALL db_next_i64(*($7 + [28]), ($4 + [176]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$10 }
	CALL $6(($4 + [80]), $8)
	
.LABEL $label$10
	CALL $7(($4 + [80]), $7)
	$2 = *($4 + [160])
	$7 = *(($4 + [148]))
	$6 = *(($4 + [144]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$12 }
	
.LOOP $label$14:
	$8 = ($7 + [-24])
	$3 = *($8)
	if ( ((int_64)*($3) == (int_64)$2) ){ goto $label$13 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*($3 + [52]) == (int_32)($4 + [120])), [9909])
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	$8 = CALL db_find_i64(*($4 + [120]), *(($4 + [128])), (int_64)-8527970514705055744, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$11 }
	$3 = CALL $10(($4 + [120]), $8)
	CALL eosio_assert(((int_32)*($3 + [52]) == (int_32)($4 + [120])), [9909])
	
.LABEL $label$11
	$2 = *($4 + [168])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [10251])
	CALL eosio_assert(((int_32)*($3 + [52]) == (int_32)($4 + [120])), [10286])
	CALL eosio_assert(((int_64)*($4 + [120]) == (int_64)CALL $fimport$7()), [10332])
	$8 = ($3 + [8])
	*($4 + [256]) = *($8)
	*($8) = $2
	$7 = ($3 + [16])
	*($4 + [264]) = *($7)
	$6 = ($3 + [24])
	*($4 + [272]) = *($6)
	$1 = *($3)
	CALL eosio_assert([1], [10383])
	*($4 + [248]) = (($4 + [176]) + [52])
	*($4 + [244]) = ($4 + [176])
	*($4 + [240]) = ($4 + [176])
	*($4 + [280]) = ($4 + [240])
	*($4 + [292]) = $8
	*($4 + [288]) = $3
	*($4 + [296]) = $7
	*($4 + [300]) = $6
	*($4 + [304]) = ($3 + [32])
	*($4 + [308]) = ($3 + [40])
	*($4 + [312]) = ($3 + [48])
	CALL $31(($4 + [288]), ($4 + [280]))
	CALL db_update_i64(*($3 + [56]), $2, ($4 + [176]), [52])
	$9 = (($4 + [120]) + [16])
	if ( (uint_64)($1 <= *($9)) ){ goto $label$15 }
	*($9) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	$9 = (($4 + [256]) + [8])
	*($4 + [288]) = *($8)
	if ( (CALL $138(($4 + [256]), ($4 + [288]), [8]) == 0) ){ goto $label$16 }
	$8 = *($3 + [60])
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$17 }
	$8 = CALL db_idx64_find_primary(*($4 + [120]), *(($4 + [128])), (int_64)-8527970514705055744, ($4 + [280]), $1)
	*(($3 + [60])) = $8
	
.LABEL $label$17
	CALL db_idx64_update($8, $2, ($4 + [288]))
	
.LABEL $label$16
	$8 = (($4 + [256]) + [16])
	*($4 + [288]) = *($7)
	if ( (CALL $138($9, ($4 + [288]), [8]) == 0) ){ goto $label$18 }
	$9 = ($3 + [64])
	$7 = *($9)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$19 }
	$7 = CALL db_idx_double_find_primary(*($4 + [120]), *(($4 + [128])), (int_64)-8527970514705055743, ($4 + [280]), $1)
	*($9) = $7
	
.LABEL $label$19
	CALL db_idx_double_update($7, $2, ($4 + [288]))
	
.LABEL $label$18
	*($4 + [288]) = *($6)
	if ( (CALL $138($8, ($4 + [288]), [8]) == 0) ){ goto $label$20 }
	$3 = ($3 + [68])
	$8 = *($3)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$21 }
	$8 = CALL db_idx_double_find_primary(*($4 + [120]), *(($4 + [128])), (int_64)-8527970514705055742, ($4 + [280]), $1)
	*($3) = $8
	
.LABEL $label$21
	CALL db_idx_double_update($8, $2, ($4 + [288]))
	
.LABEL $label$20
	CALL $5($0, ($4 + [160]))
	$7 = *($4 + [104])
	if ( ($7 == 0) ){ goto $label$22 }
	$6 = ($4 + [108])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$24 }
	
.LOOP $label$25:
	$8 = ($8 + [-24])
	$3 = *($8)
	*($8) = [0]
	if ( ($3 == 0) ){ goto $label$26 }
	CALL _ZdlPv($3)
	
.LABEL $label$26
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$25 }
	$8 = *(($4 + [104]))
	goto $label$23 
	
.LABEL $label$24
	$8 = $7
	
.LABEL $label$23
	*($6) = $7
	CALL _ZdlPv($8)
	
.LABEL $label$22
	$7 = *($4 + [144])
	if ( ($7 == 0) ){ goto $label$27 }
	$6 = ($4 + [148])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$29 }
	
.LOOP $label$30:
	$8 = ($8 + [-24])
	$3 = *($8)
	*($8) = [0]
	if ( ($3 == 0) ){ goto $label$31 }
	CALL _ZdlPv($3)
	
.LABEL $label$31
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$30 }
	$8 = *(($4 + [144]))
	goto $label$28 
	
.LABEL $label$29
	$8 = $7
	
.LABEL $label$28
	*($6) = $7
	CALL _ZdlPv($8)
	
.LABEL $label$27
	$global$0 = ($4 + [320])
	return (unreachable)
	
.LABEL $label$1
	CALL $109(($4 + [24]))
}

void .FUNC $37 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [240])
	$global$0 = $4
	*($4 + [112]) = $1
	*($4 + [104]) = $2
	CALL require_auth($1)
	CALL $14($0, ($4 + [112]), $3)
	*((($4 + [64]) + [32])) = [0]
	*(($4 + [102])) = [0]
	*($4 + [80]) = (int_64)-1
	*($4 + [88]) = (int_64)0
	*($4 + [100]) = [0]
	$5 = *($0)
	*($4 + [64]) = $5
	*($4 + [72]) = $5
	$2 = *(CALL $28(($4 + [64]), $2, [8602]) + [8])
	CALL eosio_assert(((int_64)$2 != (int_64)$1), [8625])
	CALL require_recipient($2)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)1179535620), [8493])
	$6 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$1 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $2
	$6 = [1]
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $2
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$8 = ($7 + [1])
	$7 = $8
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8521])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [8547])
	*((($4 + [24]) + [32])) = [0]
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	*($4 + [60]) = [0]
	$1 = *($0)
	*($4 + [24]) = $1
	*($4 + [32]) = $1
	*($4 + [16]) = ($4 + [24])
	CALL $38(($4 + [8]), ($4 + [16]), ($4 + [112]))
	$7 = *($4 + [12])
	if ( ($7 == 0) ){ goto $label$6 }
	
.LOOP $label$7:
	if ( ((int_64)*($7 + [24]) != (int_64)*($4 + [112])) ){ goto $label$6 }
	CALL eosio_assert(((int_64)*($7 + [8]) != (int_64)*($4 + [104])), [8730])
	CALL $39(($4 + [8]))
	$7 = *($4 + [12])
	if ( $7 ){ goto $label$7 }
	
.LABEL $label$6
	$8 = (($4 + [64]) + [16])
	$1 = *($8)
	if ( ((int_64)$1 != (int_64)-1) ){ goto $label$8 }
	$1 = (int_64)0
	$7 = CALL db_lowerbound_i64(*($4 + [64]), *(($4 + [72])), (int_64)-8527970514705055744, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	CALL $10(($4 + [64]), $7)
	*($4 + [132]) = [0]
	*($4 + [128]) = ($4 + [64])
	$1 = *(*(CALL $40(($4 + [128])) + [4]))
	$1 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*(($4 + [80])) = $1
	
.LABEL $label$8
	CALL eosio_assert((uint_64)($1 <= (int_64)-2), [10442])
	$2 = *($8)
	*($4) = $2
	$1 = *($4 + [112])
	CALL eosio_assert(((int_64)*($4 + [64]) == (int_64)CALL $fimport$7()), [10200])
	*(($7 = CALL _Znwj([72])) + [52]) = ($4 + [64])
	*($7) = $2
	*($7 + [16]) = (int_64)4652007308841189376
	*($7 + [24]) = (int_64)4652007308841189376
	*($7 + [32]) = (int_64)4652007308841189376
	*($7 + [40]) = (int_64)4652007308841189376
	*($7 + [48]) = [0]
	*($7 + [8]) = *($4 + [112])
	*($4 + [192]) = (($4 + [128]) + [52])
	*($4 + [188]) = ($4 + [128])
	*($4 + [184]) = ($4 + [128])
	*($4 + [200]) = ($4 + [184])
	$0 = ($7 + [8])
	*($4 + [212]) = $0
	*($4 + [208]) = $7
	*($4 + [216]) = ($7 + [16])
	$9 = ($7 + [24])
	*($4 + [220]) = $9
	*($4 + [224]) = ($7 + [32])
	*($4 + [228]) = ($7 + [40])
	*($4 + [232]) = ($7 + [48])
	CALL $31(($4 + [208]), ($4 + [200]))
	$2 = *($7)
	$6 = (($4 + [64]) + [8])
	*($7 + [56]) = CALL db_store_i64(*($6), (int_64)-8527970514705055744, $1, $2, ($4 + [128]), [52])
	if ( (uint_64)($2 <= *($8)) ){ goto $label$10 }
	*(($4 + [80])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	$2 = *($7)
	$5 = *($6)
	*($4 + [208]) = *($0)
	*($7 + [60]) = CALL db_idx64_store($5, (int_64)-8527970514705055744, $1, $2, ($4 + [208]))
	$2 = *($7)
	$5 = *($6)
	*($4 + [208]) = *(($7 + [16]))
	*($7 + [64]) = CALL db_idx_double_store($5, (int_64)-8527970514705055743, $1, $2, ($4 + [208]))
	$2 = *($7)
	$5 = *($6)
	*($4 + [208]) = *($9)
	*($7 + [68]) = CALL db_idx_double_store($5, (int_64)-8527970514705055742, $1, $2, ($4 + [208]))
	*($4 + [208]) = $7
	$1 = *($7)
	*($4 + [128]) = $1
	$8 = *(($7 + [56]))
	*($4 + [184]) = $8
	$0 = ($4 + [92])
	$6 = *($0)
	if ( ((uint_32)$6 >= (uint_32)*((($4 + [64]) + [32]))) ){ goto $label$13 }
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	*($4 + [208]) = [0]
	*($6) = $7
	*($0) = ($6 + [24])
	$7 = *($4 + [208])
	*($4 + [208]) = [0]
	if ( $7 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $16(($4 + [88]), ($4 + [208]), ($4 + [128]), ($4 + [184]))
	$7 = *($4 + [208])
	*($4 + [208]) = [0]
	if ( ($7 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv($7)
	
.LABEL $label$11
	$1 = *($4 + [112])
	*($4 + [144]) = $3
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [24])
	*($4 + [136]) = $4
	*($4 + [140]) = ($4 + [112])
	*($4 + [184]) = $1
	CALL eosio_assert(((int_64)*($4 + [24]) == (int_64)CALL $fimport$7()), [10200])
	*($4 + [212]) = ($4 + [128])
	*($4 + [208]) = ($4 + [24])
	*($4 + [216]) = ($4 + [184])
	*(($7 = CALL _Znwj([64])) + [32]) = (int_64)0
	*($7 + [24]) = (int_64)0
	*($7 + [40]) = (int_64)0
	*($7 + [48]) = ($4 + [24])
	CALL $41(($4 + [208]), $7)
	*($4 + [200]) = $7
	$1 = *($7)
	*($4 + [208]) = $1
	$8 = *($7 + [52])
	*($4 + [124]) = $8
	$3 = ($4 + [52])
	$6 = *($3)
	if ( ((uint_32)$6 >= (uint_32)*(($4 + [56]))) ){ goto $label$16 }
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	*($4 + [200]) = [0]
	*($6) = $7
	*($3) = ($6 + [24])
	$7 = *($4 + [200])
	*($4 + [200]) = [0]
	if ( $7 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $42(($4 + [48]), ($4 + [200]), ($4 + [208]), ($4 + [124]))
	$7 = *($4 + [200])
	*($4 + [200]) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv($7)
	
.LABEL $label$14
	$8 = *($4 + [48])
	if ( ($8 == 0) ){ goto $label$17 }
	$3 = ($4 + [52])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$19 }
	
.LOOP $label$20:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$21 }
	CALL _ZdlPv($6)
	
.LABEL $label$21
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$20 }
	$7 = *(($4 + [48]))
	goto $label$18 
	
.LABEL $label$19
	$7 = $8
	
.LABEL $label$18
	*($3) = $8
	CALL _ZdlPv($7)
	
.LABEL $label$17
	$8 = *($4 + [88])
	if ( ($8 == 0) ){ goto $label$22 }
	$3 = ($4 + [92])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$24 }
	
.LOOP $label$25:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$26 }
	CALL _ZdlPv($6)
	
.LABEL $label$26
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$25 }
	$7 = *(($4 + [88]))
	goto $label$23 
	
.LABEL $label$24
	$7 = $8
	
.LABEL $label$23
	*($3) = $8
	CALL _ZdlPv($7)
	
.LABEL $label$22
	$global$0 = ($4 + [240])
}

int_32 .FUNC $78 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [80])) = [0]
	*(($4 + [92])) = [0]
	*(($4 + [104])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [84 align=4]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [108 align=4]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [144]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $83(($4 + [16]), ($4 + [144]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4)
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [16])
	CALL $84(($4 + [144]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [72]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $145($2)
	$2 = [1]
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [80])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $79 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	float_64 $9
	float_64 $10
	float_64 $11
	float_64 $12
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [128]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $82(($4 + [24]), ($4 + [128]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($8 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4 + [8])
	$3 = *($8)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$9 = *($4 + [104])
	$10 = *($4 + [96])
	$11 = *($4 + [88])
	$12 = *($4 + [80])
	$0 = *($4 + [72])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $12), (int_64 $11), (int_64 $10), (int_64 $9), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $145($2)
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $32 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = [0]
	*(($3 + [32])) = [0]
	*(($3 + [38])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	*($3 + [36]) = [0]
	$5 = *($0)
	*($3) = $5
	*($3 + [8]) = $5
	$6 = *(CALL $28($3, $1, [8602]) + [8])
	CALL require_auth($6)
	$7 = *($3 + [24])
	if ( ($7 == 0) ){ goto $label$1 }
	$8 = ($3 + [28])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	$9 = ($9 + [-24])
	$10 = *($9)
	*($9) = [0]
	if ( ($10 == 0) ){ goto $label$5 }
	CALL _ZdlPv($10)
	
.LABEL $label$5
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$4 }
	$9 = *(($3 + [24]))
	goto $label$2 
	
.LABEL $label$3
	$9 = $7
	
.LABEL $label$2
	*($8) = $7
	CALL _ZdlPv($9)
	
.LABEL $label$1
	$5 = *($2 + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)1179535620), [8493])
	$11 = *($2)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$5 = $12
	$4 = [1]
	$10 = $9
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$5 = $12
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$10 = ((int_32)$9 < (int_32)[6])
	$7 = ($9 + [1])
	$9 = $7
	if ( $10 ){ goto $label$10 }
	$4 = [1]
	$9 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [8521])
	CALL eosio_assert(((int_64)$11 > (int_64)0), [8547])
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$5 = *($0)
	*($3) = $5
	*($3 + [8]) = $5
	$9 = CALL db_find_i64($5, $5, (int_64)-8527958567040319488, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$14 }
	$9 = CALL $6($3, $9)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$3), [9909])
	CALL eosio_assert([1], [10251])
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$3), [10286])
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$7()), [10332])
	*($9 + [8]) = *($2)
	*(($10 = ($9 + [16]))) = *(($2 + [8]))
	$5 = *($9)
	CALL eosio_assert([1], [10383])
	CALL eosio_assert([1], [9903])
	CALL memcpy(($3 + [48]), $9, [8])
	CALL eosio_assert([1], [9903])
	CALL memcpy((($3 + [48]) | [8]), ($9 + [8]), [8])
	*($3 + [72]) = *($10)
	CALL eosio_assert([1], [9903])
	CALL memcpy((($3 + [48]) + [16]), ($3 + [72]), [8])
	CALL db_update_i64(*($9 + [28]), (int_64)0, ($3 + [48]), [24])
	$9 = ($3 + [16])
	if ( (uint_64)($5 <= *($9)) ){ goto $label$13 }
	*($9) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$7 = *($3 + [24])
	if ( $7 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$7()), [10200])
	*(($9 = CALL _Znwj([40])) + [24]) = $3
	*($9) = $1
	*($9 + [8]) = *($2)
	*($9 + [16]) = *(($2 + [8]))
	CALL eosio_assert([1], [9903])
	CALL memcpy(($3 + [48]), $9, [8])
	CALL eosio_assert([1], [9903])
	CALL memcpy((($3 + [48]) | [8]), ($9 + [8]), [8])
	*($3 + [72]) = *($9 + [16])
	CALL eosio_assert([1], [9903])
	CALL memcpy((($3 + [48]) + [16]), ($3 + [72]), [8])
	$5 = *($9)
	$7 = CALL db_store_i64(*(($3 + [8])), (int_64)-8527958567040319488, $6, $5, ($3 + [48]), [24])
	*($9 + [28]) = $7
	$10 = ($3 + [16])
	if ( (uint_64)($5 <= *($10)) ){ goto $label$15 }
	*($10) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*($3 + [72]) = $9
	$5 = *($9)
	*($3 + [48]) = $5
	*($3 + [44]) = $7
	$2 = ($3 + [28])
	$10 = *($2)
	if ( ((uint_32)$10 >= (uint_32)*(($3 + [32]))) ){ goto $label$17 }
	*($10 + [8]) = $5
	*($10 + [16]) = $7
	*($3 + [72]) = [0]
	*($10) = $9
	*($2) = ($10 + [24])
	$9 = *($3 + [72])
	*($3 + [72]) = [0]
	if ( $9 ){ goto $label$16 }
	goto $label$13 
	
.LABEL $label$17
	CALL $33(($3 + [24]), ($3 + [72]), ($3 + [48]), ($3 + [44]))
	$9 = *($3 + [72])
	*($3 + [72]) = [0]
	if ( ($9 == 0) ){ goto $label$13 }
	
.LABEL $label$16
	CALL _ZdlPv($9)
	
.LABEL $label$13
	$7 = *($3 + [24])
	if ( ($7 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$2 = ($3 + [28])
	$9 = *($2)
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$19 }
	
.LOOP $label$20:
	$9 = ($9 + [-24])
	$10 = *($9)
	*($9) = [0]
	if ( ($10 == 0) ){ goto $label$21 }
	CALL _ZdlPv($10)
	
.LABEL $label$21
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$20 }
	$9 = *(($3 + [24]))
	goto $label$18 
	
.LABEL $label$19
	$9 = $7
	
.LABEL $label$18
	*($2) = $7
	CALL _ZdlPv($9)
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$11
	$global$0 = ($3 + [80])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10022])
	$3 = *($0 + [4])
	$4 = *(($3 + [64]))
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx_double_find_primary(*($4), *($4 + [8]), (int_64)-8527970514705055743, ($1 + [8]), *($3))
	*((*(($0 + [4])) + [64])) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx_double_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($2 + [52]) == (int_32)$7), [9909])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$4 = CALL db_find_i64(*($7), *($7 + [8]), (int_64)-8527970514705055744, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $10($7, $4)
	CALL eosio_assert(((int_32)*($2 + [52]) == (int_32)$7), [9909])
	
.LABEL $label$3
	*(($2 + [64])) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9903])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9903])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9903])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9903])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9903])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9903])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9903])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_64 .FUNC $129 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC $127 (float_64 $0, float_64 $1, int_32 $2)
{
	float_64 $3
	float_64 $4
	float_64 $5
	$3 = ((float_64)$0 * (float_64)$0)
	$4 = ((float_64)((float_64)((float_64)$3 * (float_64)((float_64)$3 * (float_64)$3)) * (float_64)((float_64)((float_64)$3 * (float_64)(float_64)1.58969099521155e-10) + (float_64)(float_64)-2.5050760253406863e-08)) + (float_64)((float_64)((float_64)$3 * (float_64)((float_64)((float_64)$3 * (float_64)(float_64)2.7557313707070068e-06) + (float_64)(float_64)-1.984126982985795e-04)) + (float_64)(float_64)0.00833333333332249))
	$5 = ((float_64)$3 * (float_64)$0)
	if ( ($2 == 0) ){ goto $label$1 }
	return (float_64))($0 - ((float_64)((float_64)$5 * (float_64)(float_64)0.16666666666666632) + (float_64)(float_64))(((float_64)$3 * (float_64)(float_64))(((float_64)$1 * (float_64)(float_64)0.5) - ((float_64)$5 * (float_64)$4))) - $1)))
	
.LABEL $label$1
	return ((float_64)((float_64)$5 * (float_64)((float_64)((float_64)$3 * (float_64)$4) + (float_64)(float_64)-0.16666666666666632)) + (float_64)$0)
}