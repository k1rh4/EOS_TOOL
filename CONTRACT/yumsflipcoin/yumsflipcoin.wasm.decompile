(data (i32.const 8192) "0123456789abcdef\00")
(data (i32.const 8209) "Invalid hex character\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8317) "invalid first pos\00")
(data (i32.const 8335) "parse memo error\00")
(data (i32.const 8352) "read_transaction failed\00")
(data (i32.const 17084) "yumdividends\00")
(data (i32.const 17097) "yumsflipcoin\00")
(data (i32.const 17110) "trxid not match\00")
(data (i32.const 17126) "HEADS\00")
(data (i32.const 17132) "TAILS\00")
(data (i32.const 17138) "(http://yum.games/) [HEADS OR TAILS] PRIZE:Won,\00")
(data (i32.const 17186) ",\00")
(data (i32.const 17188) "|\00")
(data (i32.const 17190) "transfer\00")
(data (i32.const 17199) "Flip Coin -- Transaction Hash:\00")
(data (i32.const 17230) "eosio.token\00")
(data (i32.const 17243) "maintaining, try it later\00")
(data (i32.const 17269) "invalid transfer\00")
(data (i32.const 17286) "only eos\00")
(data (i32.const 17295) "Your transfer amount is too small\00")
(data (i32.const 17329) "Your transfer amount is too large\00")
(data (i32.const 17363) "only yum\00")
(data (i32.const 17372) "divide by zero\00")
(data (i32.const 17387) "signed division overflow\00")
(data (i32.const 17412) "multiplication overflow\00")
(data (i32.const 17436) "multiplication underflow\00")
(data (i32.const 17461) "write\00")
(data (i32.const 17467) "invalid memo\00")
(data (i32.const 17480) "type error\00")
(data (i32.const 17492) "XD\00\00")
(data (i32.const 17496) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 17529) "unable to find key\00")
(data (i32.const 17548) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 17599) "error reading iterator\00")
(data (i32.const 17622) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 17671) "invalid symbol name\00")
(data (i32.const 17691) "read\00")
(data (i32.const 17696) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 17755) "cannot create objects in table of another contract\00")
(data (i32.const 17806) "cannot pass end iterator to modify\00")
(data (i32.const 17841) "object passed to modify is not in multi_index\00")
(data (i32.const 17887) "cannot modify objects in table of another contract\00")
(data (i32.const 17938) "updater cannot change primary key when modifying an object\00")
(data (i32.const 17997) "cannot pass end iterator to erase\00")
(data (i32.const 18031) "cannot increment end iterator\00")
(data (i32.const 18061) "object passed to erase is not in multi_index\00")
(data (i32.const 18106) "cannot erase objects in table of another contract\00")
(data (i32.const 18156) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18209) "get\00")
(data (i32.const 18213) "next primary key in table is at autoincrement limit\00")
(data (i32.const 18265) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 18319) "cannot decrement iterator at beginning of table\00")
(import "env" "current_time" (func $fimport$0 (result i64)))
(import "env" "sha256" (func $fimport$1 (param i32 i32 i32)))
(import "env" "memcpy" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "transaction_size" (func $fimport$4 (result i32)))
(import "env" "read_transaction" (func $fimport$5 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$6 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$8 (result i64)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$10 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "__multi3" (func $fimport$13 (param i32 i64 i64 i64 i64)))
(import "env" "send_inline" (func $fimport$14 (param i32 i32)))
(import "env" "memset" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$16 (result i32)))
(import "env" "read_action_data" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$19 (param i32)))
(import "env" "db_previous_i64" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$21 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$22))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$31 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$34 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$35 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$38 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$40 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$41 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$42 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $28))
(export "_Znwj" (func $52))
(export "_ZdlPv" (func $54))
(export "_Znaj" (func $53))
(export "_ZdaPv" (func $55))
(table $0 7 7 anyfunc)
(elem (i32.const 1) $12 $19 $6 $9 $4 $5)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18367))
(global $global$2 i32 (i32.const 18367))


int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $77([8688], $1)
	CALL memset($0, [0], $1)
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17461])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17461])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17461])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [17461])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $47(*($1), ($0 + [32]))
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $3
	*($2 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($3, $3, (int_64)-8272103852073811968, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $10($2, $0)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = [1]
	
.LOOP $label$2:
	$5 = [0]
	$6 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($6, [17997])
	CALL eosio_assert($6, [18031])
	$6 = CALL db_next_i64(*($0 + [28]), ($2 + [40]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $10($2, $6)
	
.LABEL $label$3
	CALL $11($2, $0)
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($4 <= $1)
	$4 = ($4 + [1])
	$0 = $5
	if ( $6 ){ goto $label$2 }
	
.LABEL $label$1
	$4 = *($2 + [24])
	if ( ($4 == 0) ){ goto $label$4 }
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$8 }
	CALL _ZdlPv($5)
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($2 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $4
	
.LABEL $label$5
	*($6) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($2 + [48])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $78($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8231])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $76 (int_32 $0)
{
	return CALL $77([8688], $0)
}

int_32 .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $71(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $60($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17461])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [17461])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $73 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $72(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $global$0
	$2 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$1 }
	$1 = CALL $76($3)
	CALL read_action_data($1, $3)
	CALL $35($0, $1, $3)
	$global$0 = $2
	return 
	
.LABEL $label$1
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	CALL read_action_data($1, $3)
	CALL $35($0, $1, $3)
	$global$0 = $2
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [352])
	$global$0 = $3
	CALL memory()
	*($3 + [304]) = $0
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17230]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$6 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$8 = ($8 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$1 == (int_64)-674199324417778384) ){ goto $label$11 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$10 }
	
.LABEL $label$11
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17190]
	$7 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$17 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$8 = ($8 + [-91])
	goto $label$15 
	
.LABEL $label$17
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$13
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$12 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$10 }
	$8 = [0]
	*(($3 + [296])) = [0]
	*($3 + [272]) = $0
	*($3 + [264]) = $0
	*($3 + [280]) = (int_64)-1
	*($3 + [288]) = (int_64)0
	$6 = CALL db_lowerbound_i64($0, $0, (int_64)-4098957129023488000, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$18 }
	CALL eosio_assert(((int_32)*(CALL $7(($3 + [264]), $6) + [8]) ^ (int_32)[1]), [17243])
	
.LABEL $label$18
	CALL $29(($3 + [216]))
	if ( ((uint_64)((int_64)*($3 + [232]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$19 }
	$4 = (uint_64)*((($3 + [216]) + [24])) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$9 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$4 = $9
	$8 = [1]
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	$4 = $9
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $8 ){ goto $label$23 }
	$8 = [1]
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$8 = [0]
	
.LABEL $label$19
	CALL eosio_assert($8, [17269])
	$10 = ($3 + [248])
	if ( ((int_64)*($3 + [224]) != (int_64)$0) ){ goto $label$24 }
	$11 = ($6 & [1])
	$6 = *($10)
	if ( (( *(($3 + [252])) ? uint_32($6 >> [1]) : $11 ) == 0) ){ goto $label$24 }
	$12 = ($3 + [232])
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17230]
	$7 = (int_64)0
	
.LOOP $label$25:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$30 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$8 = ($8 + [-91])
	goto $label$28 
	
.LABEL $label$30
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$26
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$25 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$38 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17230]
	$7 = (int_64)0
	
.LOOP $label$39:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$44 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$8 = ($8 + [-91])
	goto $label$42 
	
.LABEL $label$44
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$43
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$42
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$41
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$40
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$39 }
	*(($3 + [344])) = [0]
	*($3 + [320]) = $0
	*($3 + [312]) = $7
	*($3 + [328]) = (int_64)-1
	*($3 + [336]) = (int_64)0
	$6 = CALL $30(($3 + [312]), (int_64)5459781, [17529])
	$4 = *($6 + [8])
	$9 = *($6)
	$11 = *($3 + [336])
	if ( ($11 == 0) ){ goto $label$35 }
	$13 = ($3 + [340])
	$6 = *($13)
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$37 }
	
.LOOP $label$45:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$46 }
	CALL _ZdlPv($8)
	
.LABEL $label$46
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$45 }
	$6 = *(($3 + [336]))
	goto $label$36 
	
.LABEL $label$38
	if ( ((int_64)$1 != (int_64)-674199324417778384) ){ goto $label$47 }
	*(($3 + [344])) = [0]
	*($3 + [320]) = $0
	*($3 + [312]) = (int_64)-674199324417778384
	*($3 + [328]) = (int_64)-1
	*($3 + [336]) = (int_64)0
	$6 = CALL $30(($3 + [312]), (int_64)5068121, [17529])
	$4 = *($6 + [8])
	$9 = *($6)
	$11 = *($3 + [336])
	if ( ($11 == 0) ){ goto $label$32 }
	$13 = ($3 + [340])
	$6 = *($13)
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$34 }
	
.LOOP $label$48:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$49 }
	CALL _ZdlPv($8)
	
.LABEL $label$49
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$48 }
	$6 = *(($3 + [336]))
	goto $label$33 
	
.LABEL $label$47
	if ( ($11 == 0) ){ goto $label$50 }
	CALL _ZdlPv(*(($3 + [256])))
	
.LABEL $label$50
	$10 = *($3 + [288])
	if ( ($10 == 0) ){ goto $label$7 }
	$11 = ($3 + [292])
	$6 = *($11)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$9 }
	
.LOOP $label$51:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$52 }
	CALL _ZdlPv($8)
	
.LABEL $label$52
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$51 }
	$6 = *(($3 + [288]))
	goto $label$8 
	
.LABEL $label$37
	$6 = $11
	
.LABEL $label$36
	*($13) = $11
	CALL _ZdlPv($6)
	
.LABEL $label$35
	CALL eosio_assert([1], [17372])
	CALL eosio_assert([1], [17387])
	$5 = *($3 + [232])
	$7 = *(($3 + [240]))
	CALL eosio_assert(((int_64)$7 == (int_64)1397703940), [17286])
	CALL eosio_assert(((int_64)*($3 + [232]) > (int_64)2499), [17295])
	CALL eosio_assert(((int_64)$7 == (int_64)$4), [17696])
	CALL eosio_assert(((int_64)$5 <= (int_64)((int_64)$9 / (int_64)100)), [17329])
	$6 = ($12 + [8])
	$9 = *($6)
	*((($3 + [200]) + [8])) = $9
	$4 = *($12)
	*((($3 + [72]) + [8])) = $9
	*($3 + [72]) = $4
	*($3 + [200]) = $4
	CALL $20(($3 + [304]), $4, ($3 + [72]))
	$4 = *($12)
	$9 = *($6)
	*((($3 + [56]) + [8])) = $9
	*((($3 + [184]) + [8])) = $9
	*($3 + [56]) = $4
	*($3 + [184]) = $4
	CALL $21(($3 + [304]), *($3 + [216]), ($3 + [56]))
	goto $label$31 
	
.LABEL $label$34
	$6 = $11
	
.LABEL $label$33
	*($13) = $11
	CALL _ZdlPv($6)
	
.LABEL $label$32
	CALL eosio_assert([1], [17372])
	CALL eosio_assert([1], [17387])
	$5 = *($3 + [232])
	$7 = *(($3 + [240]))
	CALL eosio_assert(((int_64)$7 == (int_64)1297438980), [17363])
	CALL eosio_assert(((uint_64)*($3 + [232]) > (uint_64)(int_64)999999), [17295])
	CALL eosio_assert(((int_64)$7 == (int_64)$4), [17696])
	CALL eosio_assert(((int_64)$5 <= (int_64)((int_64)$9 / (int_64)100)), [17329])
	$9 = *(($12 + [8]))
	*((($3 + [168]) + [8])) = $9
	$4 = *($12)
	*((($3 + [88]) + [8])) = $9
	*($3 + [88]) = $4
	*($3 + [168]) = $4
	CALL $20(($3 + [304]), $4, ($3 + [88]))
	
.LABEL $label$31
	*(($8 = (($3 + [152]) + [8]))) = *(($12 + [8]))
	*($3 + [152]) = *($12)
	$4 = *($3 + [216])
	$6 = CALL $57(($3 + [136]), $10)
	*((($3 + [40]) + [8])) = *($8)
	*($3 + [40]) = *($3 + [152])
	CALL $23(($3 + [304]), $4, ($3 + [40]), $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$24
	if ( ((*($10) & [1]) == 0) ){ goto $label$53 }
	CALL _ZdlPv(*(($3 + [256])))
	
.LABEL $label$53
	$10 = *($3 + [288])
	if ( ($10 == 0) ){ goto $label$10 }
	$11 = ($3 + [292])
	$6 = *($11)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$55 }
	
.LOOP $label$56:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$57 }
	CALL _ZdlPv($8)
	
.LABEL $label$57
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$56 }
	$6 = *(($3 + [288]))
	goto $label$54 
	
.LABEL $label$55
	$6 = $10
	
.LABEL $label$54
	*($11) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$10
	if ( ((int_64)$2 > (int_64)4923676291099525119) ){ goto $label$60 }
	if ( ((int_64)$2 == (int_64)-7954134735498772480) ){ goto $label$59 }
	if ( ((int_64)$2 != (int_64)-6533262907872903168) ){ goto $label$7 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [1]
	*($3 + [32]) = *($3 + [104])
	CALL $31(($3 + [304]), ($3 + [32]))
	goto $label$7 
	
.LABEL $label$60
	if ( ((int_64)$2 == (int_64)4923676291099525120) ){ goto $label$58 }
	if ( ((int_64)$2 != (int_64)4923676749050413056) ){ goto $label$7 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [2]
	*($3 + [24]) = *($3 + [112])
	CALL $32(($3 + [304]), ($3 + [24]))
	goto $label$7 
	
.LABEL $label$59
	*($3 + [132]) = [0]
	*($3 + [128]) = [3]
	*($3 + [8]) = *($3 + [128])
	CALL $33(($3 + [304]), ($3 + [8]))
	goto $label$7 
	
.LABEL $label$58
	*($3 + [124]) = [0]
	*($3 + [120]) = [4]
	*($3 + [16]) = *($3 + [120])
	CALL $34(($3 + [304]), ($3 + [16]))
	goto $label$7 
	
.LABEL $label$9
	$6 = $10
	
.LABEL $label$8
	*($11) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$7
	CALL $69([0])
	$global$0 = ($3 + [352])
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	$3 = ($global$0 - [112])
	$global$0 = $3
	$4 = *($0)
	$5 = (int_64)6
	
.LOOP $label$1:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$1 }
	$5 = (int_64)5
	
.LOOP $label$2:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$2 }
	*((($3 + [8]) + [24])) = *(($2 + [8]))
	*($3 + [16]) = $1
	*($3 + [8]) = $4
	*($3 + [40]) = (int_64)-674199324410959600
	*($3 + [48]) = (int_64)-6571125140531183616
	*($3 + [24]) = *($2)
	*(($2 = CALL _Znwj([16]))) = $4
	*($2 + [8]) = (int_64)3617214756542218240
	*(($3 + [76])) = [0]
	$0 = ($2 + [16])
	*((($3 + [40]) + [24])) = $0
	*(($3 + [60])) = $0
	*($3 + [56]) = $2
	*($3 + [68 align=4]) = (int_64)0
	CALL $17(($3 + [68]), [32])
	$2 = *((($3 + [40]) + [32]))
	$0 = *($3 + [68])
	*($3 + [84]) = $0
	*($3 + [80]) = $0
	*($3 + [88]) = $2
	*($3 + [96]) = ($3 + [80])
	*($3 + [104]) = ($3 + [8])
	CALL $22(($3 + [104]), ($3 + [96]))
	CALL $15(($3 + [80]), ($3 + [40]))
	$2 = *($3 + [80])
	CALL send_inline($2, (*($3 + [84]) - $2))
	$2 = *($3 + [80])
	if ( ($2 == 0) ){ goto $label$3 }
	*($3 + [84]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$3
	$2 = *($3 + [68])
	if ( ($2 == 0) ){ goto $label$4 }
	*(($3 + [72])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$2 = *($3 + [56])
	if ( ($2 == 0) ){ goto $label$5 }
	*(($3 + [60])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($3 + [112])
}

void .FUNC $20 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$3 = ($global$0 - [160])
	$global$0 = $3
	$4 = *($2 + [8])
	$5 = *($2)
	CALL eosio_assert(((int_64)$5 < (int_64)288230376151711744), [17412])
	CALL eosio_assert(((int_64)$5 > (int_64)-288230376151711744), [17436])
	CALL eosio_assert([1], [17372])
	CALL eosio_assert([1], [17387])
	CALL $3(($3 + [128]))
	*(($3 + [120])) = [0]
	*($3 + [112]) = (int_64)0
	$6 = ((int_64)((int_64)$5 << (int_64)4) / (int_64)1000)
	$7 = CALL $73([17199])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$7 }
	*($3 + [112]) = ($7 << [1])
	$8 = (($3 + [112]) | [1])
	if ( $7 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($3 + [112]) = ($9 | [1])
	*($3 + [120]) = $8
	*($3 + [116]) = $7
	
.LABEL $label$6
	CALL memcpy($8, [17199], $7)
	
.LABEL $label$5
	*(($8 + $7)) = [0]
	$7 = *($3 + [128])
	$8 = ($7 & [1])
	CALL $65(($3 + [112]), ( *($3 + [136]) ? (($3 + [128]) | [1]) : $8 ), ( *($3 + [132]) ? uint_32($7 >> [1]) : $8 ))
	$10 = (int_64)-674199324417778384
	if ( ((int_64)*(($2 + [8])) != (int_64)1397703940) ){ goto $label$8 }
	$5 = (int_64)0
	$11 = (int_64)59
	$7 = [17230]
	$10 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$14 }
	$2 = *($7)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$2 = ($2 + [-91])
	goto $label$12 
	
.LABEL $label$14
	$12 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$2 = ( ($2 + [-48]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$10
	$7 = ($7 + [1])
	$11 = ((int_64)$11 + (int_64)4294967291)
	$10 = ((int_64)$12 | (int_64)$10)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$9 }
	
.LABEL $label$8
	$13 = *($0)
	$5 = (int_64)6
	
.LOOP $label$15:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$15 }
	*($3 + [64]) = (int_64)3617214756542218240
	*($3 + [56]) = $13
	$5 = (int_64)0
	$11 = (int_64)59
	$7 = [17190]
	$14 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$5 > (uint_64)(int_64)7) ){ goto $label$21 }
	$2 = *($7)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$2 = ($2 + [-91])
	goto $label$19 
	
.LABEL $label$21
	$12 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$2 = ( ($2 + [-48]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$17
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$14 = ((int_64)$12 | (int_64)$14)
	$11 = ((int_64)$11 + (int_64)4294967291)
	if ( ((int_64)$11 != (int_64)55834574842) ){ goto $label$16 }
	*(($3 + [32])) = $4
	*($3 + [16]) = (int_64)-674199324611234480
	*($3 + [8]) = $13
	*($3 + [24]) = $6
	CALL $57(($3 + [40]), ($3 + [112]))
	$7 = CALL $14(($3 + [72]), ($3 + [56]), $10, $14, ($3 + [8]))
	CALL $15(($3 + [144]), $7)
	$2 = *($3 + [144])
	CALL send_inline($2, (*($3 + [148]) - $2))
	$2 = *($3 + [144])
	if ( ($2 == 0) ){ goto $label$22 }
	*($3 + [148]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$22
	$2 = *($7 + [28])
	if ( ($2 == 0) ){ goto $label$23 }
	*(($7 + [32])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$23
	$2 = *($7 + [16])
	if ( ($2 == 0) ){ goto $label$24 }
	*(($7 + [20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$24
	if ( (*($3 + [40]) & [1]) ){ goto $label$26 }
	if ( (*($3 + [112]) & [1]) ){ goto $label$25 }
	goto $label$3 
	
.LABEL $label$26
	CALL _ZdlPv(*(($3 + [48])))
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$25
	CALL _ZdlPv(*($3 + [120]))
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $56(($3 + [112]))
	
.LABEL $label$3
	if ( (*($3 + [128]) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($3 + [160])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*(($3 + [136])))
	$global$0 = ($3 + [160])
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_64 $15
	$4 = ($global$0 - [288])
	$global$0 = $4
	*($4 + [264]) = $1
	$5 = [0]
	*(($4 + [256])) = [0]
	*($4 + [240]) = (int_64)-1
	*($4 + [248]) = (int_64)0
	$1 = *($0)
	*($4 + [224]) = $1
	*($4 + [232]) = $1
	*($4 + [216]) = [0]
	*($4 + [208]) = (int_64)0
	*($4 + [200]) = [0]
	*($4 + [192]) = (int_64)0
	$3 = CALL $57(($4 + [176]), $3)
	CALL $24($0, $3, ($4 + [208]), ($4 + [192]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$1
	CALL $3(($4 + [160]))
	$3 = ( *(($4 + [200])) ? (($4 + [192]) | [1]) : (*($4 + [192]) & [1]) )
	
.LOOP $label$2:
	$6 = ($3 + $5)
	$7 = ($5 + [1])
	$5 = $7
	if ( *($6) ){ goto $label$2 }
	$8 = (CASTING uint_64)(uint_32 ($7 + [-1]))
	$1 = (int_64)0
	$9 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$3:
	$11 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$8) ){ goto $label$4 }
	$5 = *($3)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$5 = ($5 + [-91])
	goto $label$5 
	
.LABEL $label$6
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$8 }
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	goto $label$7 
	
.LABEL $label$8
	$11 = ((int_64)$11 & (int_64)15)
	
.LABEL $label$7
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$3 }
	*($4 + [152]) = $10
	$1 = *($0)
	*($4 + [12]) = $2
	*($4 + [4]) = ($4 + [160])
	*($4) = ($4 + [224])
	*($4 + [8]) = ($4 + [264])
	*($4 + [16]) = ($4 + [208])
	*($4 + [20]) = ($4 + [152])
	*($4 + [48]) = $1
	CALL eosio_assert(((int_64)*($4 + [224]) == (int_64)CALL $fimport$8()), [17755])
	*($4 + [68]) = $4
	*($4 + [64]) = ($4 + [224])
	*($4 + [72]) = ($4 + [48])
	*(($7 = CALL _Znwj([88])) + [16]) = [0]
	*($7 + [8 align=4]) = (int_64)0
	*($7 + [32]) = (int_64)0
	*($7 + [40]) = (int_64)1397703940
	CALL eosio_assert([1], [17622])
	$1 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$9 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$1 = $9
	$5 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$1 = $9
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $5 ){ goto $label$13 }
	$5 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$5 = [0]
	
.LABEL $label$9
	CALL eosio_assert($5, [17671])
	*($7 + [56]) = [0]
	*($7 + [48 align=4]) = (int_64)0
	*($7 + [72]) = ($4 + [224])
	CALL $25(($4 + [64]), $7)
	*($4 + [272]) = $7
	$1 = *($7)
	*($4 + [64]) = $1
	$5 = *($7 + [76])
	*($4 + [136]) = $5
	$6 = ($4 + [252])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($4 + [256]))) ){ goto $label$16 }
	*($3 + [8]) = $1
	*($3 + [16]) = $5
	*($4 + [272]) = [0]
	*($3) = $7
	*($6) = ($3 + [24])
	$3 = *($4 + [272])
	*($4 + [272]) = [0]
	if ( ($3 == 0) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$16
	CALL $26(($4 + [248]), ($4 + [272]), ($4 + [64]), ($4 + [136]))
	$3 = *($4 + [272])
	*($4 + [272]) = [0]
	if ( ($3 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$17
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$18
	CALL _ZdlPv($3)
	
.LABEL $label$14
	$12 = *(($7 + [40]))
	$1 = *(($7 + [32]))
	CALL eosio_assert(((int_64)$1 < (int_64)1152921504606846976), [17412])
	CALL eosio_assert(((int_64)$1 > (int_64)-1152921504606846976), [17436])
	CALL eosio_assert([1], [17372])
	CALL eosio_assert([1], [17387])
	*($4) = *($7 + [24])
	$13 = ((int_64)((int_64)$1 << (int_64)2) / (int_64)1000)
	CALL $27(($4 + [136]), $4)
	$1 = *($7 + [64])
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$34 }
	*($4) = $1
	CALL $27(($4 + [120]), $4)
	goto $label$33 
	
.LABEL $label$34
	*(($4 + [128])) = [0]
	*($4 + [120]) = (int_64)0
	$3 = CALL $73([17242])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$32 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$37 }
	*($4 + [120]) = ($3 << [1])
	$5 = (($4 + [120]) | [1])
	if ( $3 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($4 + [120]) = ($6 | [1])
	*($4 + [128]) = $5
	*($4 + [124]) = $3
	
.LABEL $label$36
	CALL memcpy($5, [17242], $3)
	
.LABEL $label$35
	*(($5 + $3)) = [0]
	
.LABEL $label$33
	$6 = CALL $57(($4 + [104]), ($4 + [136]))
	CALL $63($6, [17188])
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = [0]
	$1 = *(($7 + [32]))
	$5 = (($4 + [64]) | [1])
	
.LOOP $label$38:
	$9 = ((uint_64)$1 / (uint_64)(int_64)10)
	$3 = (CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$9 * (int_64)10))
	CALL $1($4, int_32((( ($3) | [48]) ? ($3 + [55]) : ($3 <= [10]) ) << [24]) >> [24]), ($4 + [64]))
	if ( (*($4 + [64]) & [1]) ){ goto $label$40 }
	*($4 + [64]) = [0]
	goto $label$39 
	
.LABEL $label$40
	*(*((($4 + [64]) + [8]))) = [0]
	*($4 + [68]) = [0]
	
.LABEL $label$39
	CALL $61(($4 + [64]), [0])
	*((($4 + [64]) + [8])) = *(($4 + [8]))
	*($4 + [64]) = *($4)
	$3 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $9
	if ( $3 ){ goto $label$38 }
	$3 = *($4 + [64])
	$7 = ($3 & [1])
	$14 = ($4 + [72])
	CALL $65($6, ( *($14) ? $5 : $7 ), ( *($4 + [68]) ? uint_32($3 >> [1]) : $7 ))
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*($14))
	
.LABEL $label$41
	CALL $63($6, [17188])
	$3 = *($4 + [120])
	$5 = ($3 & [1])
	CALL $65($6, ( *($4 + [128]) ? (($4 + [120]) | [1]) : $5 ), ( *($4 + [124]) ? uint_32($3 >> [1]) : $5 ))
	$8 = (int_64)-674199324417778384
	if ( ((int_64)*($2 + [8]) != (int_64)1397703940) ){ goto $label$42 }
	$1 = (int_64)0
	$11 = (int_64)59
	$3 = [17230]
	$8 = (int_64)0
	
.LOOP $label$43:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$48 }
	$5 = *($3)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$47 }
	$5 = ($5 + [-91])
	goto $label$46 
	
.LABEL $label$48
	$9 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$47
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$46
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$45
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$44
	$3 = ($3 + [1])
	$11 = ((int_64)$11 + (int_64)4294967291)
	$8 = ((int_64)$9 | (int_64)$8)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$43 }
	
.LABEL $label$42
	$15 = *($0)
	$1 = (int_64)6
	
.LOOP $label$49:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$49 }
	*($4 + [56]) = (int_64)3617214756542218240
	*($4 + [48]) = $15
	$1 = (int_64)0
	$11 = (int_64)59
	$3 = [17190]
	$10 = (int_64)0
	
.LOOP $label$50:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$55 }
	$5 = *($3)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$5 = ($5 + [-91])
	goto $label$53 
	
.LABEL $label$55
	$9 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$54
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$52
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$51
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)4294967291)
	if ( ((int_64)$11 != (int_64)55834574842) ){ goto $label$50 }
	*(($4 + [24])) = $12
	*($4 + [8]) = (int_64)-674199324410079360
	*($4) = $15
	*($4 + [16]) = $13
	CALL $57(($4 + [32]), $6)
	$3 = CALL $14(($4 + [64]), ($4 + [48]), $8, $10, $4)
	CALL $15(($4 + [272]), $3)
	$5 = *($4 + [272])
	CALL send_inline($5, (*($4 + [276]) - $5))
	$5 = *($4 + [272])
	if ( ($5 == 0) ){ goto $label$56 }
	*($4 + [276]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$56
	$5 = *($3 + [28])
	if ( ($5 == 0) ){ goto $label$57 }
	*(($3 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$57
	$5 = *($3 + [16])
	if ( ($5 == 0) ){ goto $label$58 }
	*(($3 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$58
	if ( (*($4 + [32]) & [1]) ){ goto $label$60 }
	if ( (*($4 + [104]) & [1]) ){ goto $label$59 }
	goto $label$31 
	
.LABEL $label$60
	CALL _ZdlPv(*(($4 + [40])))
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$31 }
	
.LABEL $label$59
	CALL _ZdlPv(*($6 + [8]))
	$3 = [1]
	if ( ((*($4 + [120]) & [1]) == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	CALL $56(($4 + [120]))
	
.LABEL $label$31
	$3 = [1]
	if ( (*($4 + [120]) & [1]) ){ goto $label$29 }
	
.LABEL $label$30
	if ( (*($4 + [136]) & $3) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	CALL _ZdlPv(*(($4 + [128])))
	if ( ((*($4 + [136]) & $3) == 0) ){ goto $label$27 }
	
.LABEL $label$28
	CALL _ZdlPv(*($4 + [144]))
	$3 = [1]
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$3 = [1]
	if ( (*($4 + [160]) & [1]) ){ goto $label$25 }
	
.LABEL $label$26
	if ( (*($4 + [192]) & $3) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL _ZdlPv(*($4 + [168]))
	if ( ((*($4 + [192]) & $3) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($4 + [200])))
	if ( ((*($4 + [208]) & [1]) == 0) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	if ( (*($4 + [208]) & [1]) ){ goto $label$21 }
	
.LABEL $label$22
	$6 = *($4 + [248])
	if ( ($6 == 0) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL _ZdlPv(*(($4 + [216])))
	$6 = *($4 + [248])
	if ( $6 ){ goto $label$19 }
	
.LABEL $label$20
	$global$0 = ($4 + [288])
	return 
	
.LABEL $label$19
	$7 = ($4 + [252])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$62 }
	
.LOOP $label$63:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$64 }
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$65 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$65
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$66 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$66
	CALL _ZdlPv($3)
	
.LABEL $label$64
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$63 }
	$3 = *(($4 + [248]))
	goto $label$61 
	
.LABEL $label$62
	$3 = $6
	
.LABEL $label$61
	*($7) = $6
	CALL _ZdlPv($3)
	$global$0 = ($4 + [288])
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17461])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17461])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17461])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [17461])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-5003134530400288768, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $13($6, $8)
	*($3 + [28]) = [0]
	*($3 + [24]) = $6
	$7 = *(*(CALL $48(($3 + [24])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [18213])
	*($1) = *(($6 + [16]))
	$8 = ($1 + [8])
	CALL $59($8, *($5 + [4]))
	*($1 + [24]) = *(*($5 + [8]))
	$6 = *($5 + [12])
	*(($1 + [40])) = *(($6 + [8]))
	*($1 + [32]) = *($6)
	$9 = ($1 + [48])
	CALL $59($9, *($5 + [16]))
	*($1 + [64]) = *(*($5 + [20]))
	$5 = *($1 + [8])
	$6 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [40])
	$7 = (CASTING uint_64)(uint_32 $6)
	$10 = ($1 + [64])
	$11 = ($1 + [32])
	$12 = ($1 + [24])
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	$6 = *(($1 + [48]))
	$6 = ( *(($1 + [52])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$5 = ($6 + $5)
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $76($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = $8
	*($3 + [24]) = $1
	*($3 + [32]) = $12
	*($3 + [36]) = $11
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	CALL $49(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($4 + [8]), (int_64)-5003134530400288768, *(*($0 + [8])), $7, $6, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $80($6)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [48])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($1)
	if ( ($5 & [1]) ){ goto $label$3 }
	$6 = ($1 + [1])
	$7 = [0]
	$8 = [0]
	$5 = uint_32($5 >> [1])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = *($1 + [8])
	$7 = [0]
	$8 = [0]
	$5 = *($1 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = [0]
	
.LOOP $label$4:
	$8 = ($8 + ((int_32)*($6) == (int_32)[124]))
	$6 = ($6 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$4 }
	$8 = ((int_32)$8 == (int_32)[1])
	
.LABEL $label$1
	CALL eosio_assert($8, [17467])
	*($4 + [24]) = $7
	*($4 + [16]) = (int_64)0
	*($4 + [15]) = [124]
	*($4) = $7
	$6 = [1]
	*($4 + [14]) = [1]
	$5 = CALL $2($1, ($4 + [16]), ($4 + [15]), $4, ($4 + [14]))
	$8 = *($4 + [16])
	CALL eosio_assert(((int_32)( *($4 + [20]) ? uint_32($8 >> [1]) : ($8 & [1]) ) != (int_32)$7), [17480])
	$8 = *($4 + [16])
	$7 = CALL $73([17126])
	if ( ((int_32)$7 != (int_32)( *($4 + [20]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$6 }
	if ( (CALL $67(($4 + [16]), [0], [-1], [17126], $7) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = CALL $73([17132])
	$6 = *($4 + [16])
	$7 = ($6 & [1])
	$9 = uint_32($6 >> [1])
	$6 = [0]
	if ( ((int_32)$8 != (int_32)( *($4 + [20]) ? $9 : $7 )) ){ goto $label$5 }
	$6 = (CALL $67(($4 + [16]), [0], [-1], [17132], $8) == 0)
	
.LABEL $label$5
	CALL eosio_assert($6, [17480])
	CALL $59($2, ($4 + [16]))
	CALL $58($4, $1, ($5 + [1]), [-1], $1)
	if ( (*($3) & [1]) ){ goto $label$8 }
	*($3) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*($3 + [8])) = [0]
	*($3 + [4]) = [0]
	
.LABEL $label$7
	CALL $61($3, [0])
	*(($3 + [8])) = *(($4 + [8]))
	*($3) = *($4)
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*((($4 + [16]) + [8])))
	
.LABEL $label$9
	$global$0 = ($4 + [32])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL _Znwj([16])
	*($0 + [8]) = $3
	*($0) = (int_64)55834574865
	CALL memset($3, [46], [13])
	*($3 + [13]) = [0]
	$5 = *($1)
	$1 = (CASTING uint_32)(uint_64 $5)
	$4 = *([0] + [17492])
	*($3 + [12]) = *(($4 + ($1 & [15])))
	*($3 + [11]) = *(($4 + (uint_32($1 >> [4]) & [31])))
	*($3 + [10]) = *(($4 + (uint_32($1 >> [9]) & [31])))
	*($3 + [9]) = *(($4 + (uint_32($1 >> [14]) & [31])))
	*($3 + [8]) = *(($4 + (uint_32($1 >> [19]) & [31])))
	*($3 + [7]) = *(($4 + (uint_32($1 >> [24]) & [31])))
	*($3 + [6]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)29)) & [31])))
	*($3 + [5]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)34)) & [31])))
	*($3 + [4]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)39)) & [31])))
	*($3 + [3]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)44)) & [31])))
	*($3 + [2]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)49)) & [31])))
	*($3 + [1]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)54)) & [31])))
	*(*($0 + [8])) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)59))))
	$4 = ($3 & [1])
	$3 = *($0)
	$3 = ( *($0 + [4]) ? uint_32($3 >> [1]) : $4 )
	$1 = ( *($0 + [8]) ? ($0 + [1]) : $4 )
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($1 + $3)
	$6 = ($3 + [-1])
	$3 = $6
	if ( ((int_32)*(($4 + [-1])) == (int_32)[46]) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$1 }
	CALL $58($2, $0, [0], ($6 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$4 }
	*($0) = [0]
	goto $label$3 
	
.LABEL $label$4
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$3
	CALL $61($0, [0])
	*(($0 + [8])) = *(($2 + [8]))
	*($0) = *($2)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $68($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [56])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $74 (int_32 $0)
{
	*($0) = [1]
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17461])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $47(*($1), *($0 + [4]))
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17461])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17461])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17461])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $47(*($1), *($0 + [16]))
	$0 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17461])
	CALL memcpy(*($3 + [4]), $0, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [76]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18319])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5003134530400288768)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18265])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18265])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $13(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $69 (int_32 $0)
{
}

void .FUNC $68 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $80 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17072])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16880]
	$3 = (((int_32)$1 * (int_32)[12]) + [16880])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $68($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17691])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [17691])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [17691])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [17691])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [17691])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $68($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [17599])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $76($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*(($9 = CALL _Znwj([32])) + [8]) = (int_64)1397703940
	*($9) = (int_64)0
	CALL eosio_assert([1], [17622])
	$10 = ($9 + [8])
	$11 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$11 = $12
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$11 = $12
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [17671])
	*($9 + [16]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [17691])
	CALL memcpy($9, $7, [8])
	CALL eosio_assert(((int_32)($6 & [-8]) != (int_32)[8]), [17691])
	CALL memcpy($10, ($7 + [8]), [8])
	*($9 + [20]) = $1
	*($3 + [24]) = $9
	$11 = (uint_64)*(($9 + [8])) >> (uint_64)(int_64)8
	*($3 + [16]) = $11)
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $11
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $41($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $80($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [32])
	return $9
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [17461])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [17461])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18209])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $17($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [17691])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17691])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $36(*($1), *($0 + [4]))
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17691])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17691])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [17691])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $36(*($1), *($0 + [16]))
	$0 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17691])
	CALL memcpy($0, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [32]) = (int_64)0
	$4 = [0]
	*(($0 + [16])) = [0]
	*(($5 = ($0 + [40]))) = (int_64)1397703940
	CALL eosio_assert([1], [17622])
	$6 = (uint_64)*($5) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$5 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [17671])
	*(($0 + [56])) = [0]
	*($0 + [48 align=4]) = (int_64)0
	*($0 + [72]) = $1
	*($3) = *($2 + [4])
	*($3 + [12]) = ($0 + [8])
	*($3 + [8]) = $0
	*($3 + [16]) = ($0 + [24])
	*($3 + [20]) = ($0 + [32])
	*($3 + [24]) = ($0 + [48])
	*($3 + [28]) = ($0 + [64])
	CALL $45(($3 + [8]), $3)
	*($0 + [76]) = *(*($2 + [8]))
	$global$0 = ($3 + [32])
	return $0
}

int_32 .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $51 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	*([0] + [8376 align=4]) = (int_64)0
	*([0] + [8384]) = [0]
	$0 = CALL $73([17084])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$5 }
	*([0] + [8376]) = ($0 << [1])
	$1 = [8377]
	if ( $0 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8376]) = ($2 | [1])
	*([0] + [8384]) = $1
	*([0] + [8380]) = $0
	
.LABEL $label$4
	CALL memcpy($1, [17084], $0)
	
.LABEL $label$3
	*(($1 + $0)) = [0]
	CALL $70([5], [0], [8192])
	*([0] + [8388 align=4]) = (int_64)0
	*([0] + [8396]) = [0]
	$0 = CALL $73([17097])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$8 }
	*([0] + [8388]) = ($0 << [1])
	$1 = [8389]
	if ( $0 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8388]) = ($2 | [1])
	*([0] + [8396]) = $1
	*([0] + [8392]) = $0
	
.LABEL $label$7
	CALL memcpy($1, [17097], $0)
	
.LABEL $label$6
	*(($1 + $0)) = [0]
	CALL $70([6], [0], [8192])
	return (unreachable)
	
.LABEL $label$2
	CALL $56([8376])
	
.LABEL $label$1
	CALL $56([8388])
	(unreachable)
}

int_32 .FUNC $78 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8680]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8684])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8680]) = [1]
	$2 = ($2 << [16])
	*([0] + [8684]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8684])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8684]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8680]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8680]) = [1]
	$3 = ($3 << [16])
	*([0] + [8684]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8684])
	
.LABEL $label$10
	*([0] + [8684]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $70 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $74([8404])
	$3 = *([0] + [8412])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8416])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8420]
	*([0] + [8412]) = [8420]
	$4 = *([0] + [8416])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $79([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8412])
	*([0] + [8412]) = $3
	*([0] + [8416]) = [0]
	
.LABEL $label$2
	*([0] + [8416]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $75([8404])
	return [0]
	
.LABEL $label$1
	CALL $75([8404])
	return [-1]
}

void .FUNC $75 (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $68($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $3
	$0 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)-8272103852073811968, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $10($2, $4)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)$2), [17548])
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [17997])
	CALL eosio_assert($4, [18031])
	$4 = CALL db_next_i64(*($0 + [28]), ($2 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $10($2, $4)
	
.LABEL $label$2
	CALL $11($2, $0)
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth(*($0))
	*((($2 + [8]) + [32])) = [0]
	*($2 + [24]) = (int_64)-1
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	*($2 + [32]) = (int_64)0
	$4 = CALL db_lowerbound_i64($3, $3, (int_64)-4098957129023488000, (int_64)0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$4 }
	$4 = CALL $7(($2 + [8]), $4)
	$5 = *($0)
	CALL eosio_assert([1], [17806])
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($2 + [8])), [17841])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$8()), [17887])
	*($4 + [8]) = $1
	$3 = *($4)
	CALL eosio_assert([1], [17938])
	CALL eosio_assert([1], [17461])
	CALL memcpy(($2 + [64]), $4, [8])
	*($2 + [56]) = *($4 + [8])
	CALL eosio_assert([1], [17461])
	CALL memcpy((($2 + [64]) | [8]), ($2 + [56]), [1])
	CALL db_update_i64(*($4 + [20]), $5, ($2 + [64]), [9])
	$4 = ($2 + [24])
	if ( (uint_64)($3 <= *($4)) ){ goto $label$3 }
	*($4) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$1 = *($2 + [32])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$5 = *($0)
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$8()), [17755])
	*(($4 = CALL _Znwj([32])) + [16]) = ($2 + [8])
	*($4 + [8]) = $1
	CALL eosio_assert([1], [17461])
	CALL memcpy(($2 + [64]), $4, [8])
	*($2 + [56]) = *($4 + [8])
	CALL eosio_assert([1], [17461])
	CALL memcpy((($2 + [64]) | [8]), ($2 + [56]), [1])
	$3 = *($4)
	$1 = CALL db_store_i64(*((($2 + [8]) + [8])), (int_64)-4098957129023488000, $5, $3, ($2 + [64]), [9])
	*($4 + [20]) = $1
	$0 = ($2 + [24])
	if ( (uint_64)($3 <= *($0)) ){ goto $label$5 }
	*($0) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($2 + [56]) = $4
	$3 = *($4)
	*($2 + [64]) = $3
	*($2 + [52]) = $1
	$6 = ($2 + [36])
	$0 = *($6)
	if ( ((uint_32)$0 >= (uint_32)*(($2 + [40]))) ){ goto $label$7 }
	*($0 + [8]) = $3
	*($0 + [16]) = $1
	*($2 + [56]) = [0]
	*($0) = $4
	*($6) = ($0 + [24])
	$4 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( $4 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $8(($2 + [32]), ($2 + [56]), ($2 + [64]), ($2 + [52]))
	$4 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$1 = *($2 + [32])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($2 + [36])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL _ZdlPv($0)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($2 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $1
	
.LABEL $label$8
	*($6) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($2 + [80])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17599])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $76($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17691])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [17691])
	CALL memcpy(($3 + [16]), ($2 + [8]), [1])
	*($5 + [8]) = ((int_32)*($3 + [16]) != (int_32)[0])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $8(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $80($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $4 (int_32 $0)
{
	if ( ((*([0] + [8376]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8384]))
	
.LABEL $label$1
}

void .FUNC $5 (int_32 $0)
{
	if ( ((*([0] + [8388]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8396]))
	
.LABEL $label$1
}

int_32 .FUNC $2 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [16])
	$global$0 = $5
	CALL eosio_assert(((int_32)*($3) != (int_32)[-1]), [8317])
	$2 = CALL $66($0, *($2), *($3))
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	$3 = *($3)
	CALL $58($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$2 }
	*($1) = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)*($4) ^ (int_32)[1]), [8335])
	$global$0 = ($5 + [16])
	return $2
	
.LABEL $label$2
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$1
	CALL $61($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	$global$0 = ($5 + [16])
	return $2
}

void .FUNC $3 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = $1
	$3 = CALL transaction_size()
	$4 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $4
	$5 = CALL read_transaction($4, $3)
	CALL eosio_assert(((int_32)$3 == (int_32)$5), [8352])
	$6 = $1
	CALL sha256($4, $5, $6)
	$1 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	
.LOOP $label$1:
	$3 = *(($6 + $1))
	CALL $64($0, *((uint_32($3 >> [4]) + [8192])))
	CALL $64($0, *((($3 & [15]) + [8192])))
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[32]) ){ goto $label$1 }
	$2
	$global$0 = ($6 + [32])
}

void .FUNC memory ()
{
	CALL $51()
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($3 + [15]) = $1
	$1 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($4 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = (($4 + [17]) & [-16])
	$1 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($3 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $65($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $56($0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $17($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $18(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $17($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [17461])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [17461])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $39(CALL $38($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [18061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18106])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18156])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$10
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [56])))
	
.LABEL $label$14
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [76]))
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $68($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17599])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $76($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [12])
	*($3 + [52]) = ($5 + [16])
	*($3 + [56]) = ($5 + [20])
	CALL $42(($3 + [40]), ($3 + [32]))
	*($5 + [28]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $43(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $80($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [18061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18106])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18156])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	$4 = ($global$0 - [224])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = [0]
	*(($4 + [200])) = [0]
	*($4 + [184]) = (int_64)-1
	*($4 + [192]) = (int_64)0
	$6 = *($0)
	*($4 + [168]) = $6
	*($4 + [176]) = $6
	$7 = [0]
	$8 = CALL db_find_i64($6, $6, (int_64)-5003134530400288768, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $13(($4 + [168]), $8)
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)($4 + [168])), [17548])
	
.LABEL $label$1
	$9 = ($7 + [8])
	$13 = ($8 & [1])
	$8 = *($2)
	$11 = ($8 & [1])
	$8 = *($7 + [8])
	$10 = uint_32($8 >> [1])
	$12 = ( *(($7 + [12])) ? $10 : $11 )
	if ( ((int_32)$12 != (int_32)( *($2 + [4]) ? uint_32($8 >> [1]) : $13 )) ){ goto $label$2 }
	$8 = ($9 + [1])
	$2 = ( *($2 + [8]) ? ($2 + [1]) : $13 )
	if ( $11 ){ goto $label$5 }
	if ( ($12 == 0) ){ goto $label$4 }
	$11 = ([0] - $10)
	
.LOOP $label$6:
	if ( ((int_32)*($8) != (int_32)*($2)) ){ goto $label$3 }
	$5 = [1]
	$2 = ($2 + [1])
	$8 = ($8 + [1])
	$11 = ($11 + [1])
	if ( $11 ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$5
	if ( ($12 == 0) ){ goto $label$4 }
	$5 = (CALL $72(( *(($7 + [16])) ? $8 : $11 ), $2, $12) == 0)
	goto $label$2 
	
.LABEL $label$4
	$5 = [1]
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	CALL eosio_assert($5, [17110])
	$3 = ($5 + [1])
	$5 = CALL $58(($4 + [152]), $3, [63], [1], $3)
	$2 = *(( *($5 + [8]) ? $3 : (*($4 + [152]) & [1]) ))
	$8 = ($2 + [-48])
	if ( (($8 & [255]) <= [10]) ){ goto $label$7 }
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$8 }
	$8 = ($2 + [-87])
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($2 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$9 }
	$8 = ($2 + [-55])
	goto $label$7 
	
.LABEL $label$9
	$8 = [0]
	CALL eosio_assert([0], [8209])
	
.LABEL $label$7
	*(($4 + [144])) = [0]
	*($4 + [136]) = (int_64)0
	$11 = ( [17126] ? [17132] : ($8 & [1]) )
	$8 = CALL $73($11)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$19 }
	*($4 + [136]) = ($8 << [1])
	$2 = (($4 + [136]) | [1])
	if ( $8 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$12 = (($8 + [16]) & [-16])
	$2 = CALL _Znwj($12)
	*($4 + [136]) = ($12 | [1])
	*($4 + [144]) = $2
	*($4 + [140]) = $8
	
.LABEL $label$18
	CALL memcpy($2, $11, $8)
	
.LABEL $label$17
	*(($2 + $8)) = [0]
	$8 = ($8 & [1])
	$8 = *($7 + [48])
	$2 = ($8 & [1])
	$8 = *($4 + [136])
	$12 = uint_32($8 >> [1])
	$11 = ( *($4 + [140]) ? $12 : $2 )
	if ( ((int_32)$11 != (int_32)( *(($7 + [52])) ? uint_32($8 >> [1]) : $8 )) ){ goto $label$20 }
	$13 = (($4 + [136]) | [1])
	$8 = ( *(($7 + [56])) ? (($7 + [48]) + [1]) : $8 )
	if ( $2 ){ goto $label$22 }
	if ( ($11 == 0) ){ goto $label$21 }
	$11 = ([0] - $12)
	$2 = $13
	
.LOOP $label$23:
	if ( ((int_32)*($2) != (int_32)*($8)) ){ goto $label$20 }
	$8 = ($8 + [1])
	$2 = ($2 + [1])
	$11 = ($11 + [1])
	if ( $11 ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	if ( ($11 == 0) ){ goto $label$21 }
	if ( CALL $72(( *($4 + [144]) ? $13 : $2 ), $8, $11) ){ goto $label$20 }
	
.LABEL $label$21
	$6 = *($7 + [32])
	CALL __multi3($4, $6, (int_64)$6 >> (int_64)63), (int_64)196, (int_64)0)
	$14 = *(($7 + [40]))
	$6 = *(($4 + [8]))
	$1 = *($4)
	CALL eosio_assert(( (uint_64)($1 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [17412])
	CALL eosio_assert(( ((uint_64)$1 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [17436])
	CALL eosio_assert([1], [17372])
	CALL eosio_assert([1], [17387])
	*((($4 + [120]) + [8])) = [0]
	*($4 + [120]) = (int_64)0
	$15 = ((int_64)$1 / (int_64)100)
	$8 = CALL $73([17138])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$26 }
	*($4 + [120]) = ($8 << [1])
	$2 = (($4 + [120]) | [1])
	if ( $8 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$11 = (($8 + [16]) & [-16])
	$2 = CALL _Znwj($11)
	*($4 + [120]) = ($11 | [1])
	*($4 + [128]) = $2
	*($4 + [124]) = $8
	
.LABEL $label$25
	CALL memcpy($2, [17138], $8)
	
.LABEL $label$24
	*(($2 + $8)) = [0]
	$8 = *($4 + [152])
	$2 = ($8 & [1])
	CALL $65(($4 + [120]), ( *(($5 + [8])) ? $3 : $2 ), ( *($5 + [4]) ? uint_32($8 >> [1]) : $2 ))
	CALL $63(($4 + [120]), [17186])
	$8 = *($4 + [136])
	$2 = ($8 & [1])
	CALL $65(($4 + [120]), ( *((($4 + [136]) + [8])) ? $13 : $2 ), ( *($4 + [140]) ? uint_32($8 >> [1]) : $2 ))
	CALL $63(($4 + [120]), [17188])
	$8 = *(($7 + [8]))
	$2 = ($8 & [1])
	CALL $65(($4 + [120]), ( *(($7 + [16])) ? ($9 + [1]) : $2 ), ( *(($7 + [12])) ? uint_32($8 >> [1]) : $2 ))
	$16 = (int_64)-674199324417778384
	if ( ((int_64)*(($7 + [40])) != (int_64)1397703940) ){ goto $label$27 }
	$17 = (int_64)0
	$1 = (int_64)59
	$8 = [17230]
	$16 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$17 > (uint_64)(int_64)10) ){ goto $label$33 }
	$2 = *($8)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$2 = ($2 + [-91])
	goto $label$31 
	
.LABEL $label$33
	$6 = (int_64)0
	if ( ((int_64)$1 == (int_64)47244640260) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$2 = ( ($2 + [-48]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$29
	$8 = ($8 + [1])
	$17 = ((int_64)$17 + (int_64)1)
	$16 = ((int_64)$6 | (int_64)$16)
	$1 = ((int_64)$1 + (int_64)4294967291)
	if ( ((int_64)$1 != (int_64)55834574842) ){ goto $label$28 }
	
.LABEL $label$27
	$18 = *($0)
	$6 = (int_64)6
	
.LOOP $label$34:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$34 }
	*($4 + [72]) = (int_64)3617214756542218240
	*($4 + [64]) = $18
	$6 = (int_64)0
	$17 = (int_64)59
	$8 = [17190]
	$19 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$40 }
	$2 = *($8)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$2 = ($2 + [-91])
	goto $label$38 
	
.LABEL $label$40
	$1 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$2 = ( ($2 + [-48]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$36
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$19 = ((int_64)$1 | (int_64)$19)
	$17 = ((int_64)$17 + (int_64)4294967291)
	if ( ((int_64)$17 != (int_64)55834574842) ){ goto $label$35 }
	$6 = *($7 + [24])
	*(($4 + [40])) = $14
	*($4 + [16]) = $18
	*($4 + [32]) = $15
	*($4 + [24]) = $6
	CALL $57(($4 + [48]), ($4 + [120]))
	$8 = CALL $14(($4 + [80]), ($4 + [64]), $16, $19, ($4 + [16]))
	CALL $15(($4 + [208]), $8)
	$2 = *($4 + [208])
	CALL send_inline($2, (*($4 + [212]) - $2))
	$2 = *($4 + [208])
	if ( ($2 == 0) ){ goto $label$41 }
	*($4 + [212]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$41
	$2 = *($8 + [28])
	if ( ($2 == 0) ){ goto $label$42 }
	*(($8 + [32])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$42
	$2 = *($8 + [16])
	if ( ($2 == 0) ){ goto $label$43 }
	*(($8 + [20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$43
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$44 }
	CALL _ZdlPv(*(($4 + [56])))
	
.LABEL $label$44
	if ( ((*($4 + [120]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($4 + [128]))
	
.LABEL $label$20
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [17997])
	CALL eosio_assert($8, [18031])
	$8 = CALL db_next_i64(*($7 + [76]), ($4 + [16]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$45 }
	CALL $13(($4 + [168]), $8)
	
.LABEL $label$45
	CALL $16(($4 + [168]), $7)
	if ( (*($4 + [136]) & [1]) ){ goto $label$47 }
	if ( (*($4 + [152]) & [1]) ){ goto $label$46 }
	goto $label$14 
	
.LABEL $label$47
	CALL _ZdlPv(*($4 + [144]))
	if ( ((*($4 + [152]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$46
	CALL _ZdlPv(*(($5 + [8])))
	$2 = *($4 + [192])
	if ( $2 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$16
	CALL $56(($4 + [136]))
	
.LABEL $label$15
	CALL $56(($4 + [120]))
	
.LABEL $label$14
	$2 = *($4 + [192])
	if ( ($2 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$11 = ($4 + [196])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$11 }
	
.LOOP $label$48:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$49 }
	if ( ((*($8 + [48]) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*(($8 + [56])))
	
.LABEL $label$50
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$51 }
	CALL _ZdlPv(*(($8 + [16])))
	
.LABEL $label$51
	CALL _ZdlPv($8)
	
.LABEL $label$49
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$48 }
	$8 = *(($4 + [192]))
	goto $label$10 
	
.LABEL $label$12
	$global$0 = ($4 + [224])
	return 
	
.LABEL $label$11
	$8 = $2
	
.LABEL $label$10
	*($11) = $2
	CALL _ZdlPv($8)
	$global$0 = ($4 + [224])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [17599])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $76($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([88])
	$6 = CALL $44($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [76])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $26(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $80($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [56])))
	
.LABEL $label$10
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $46($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $61($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $61($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $56($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $57(($2 + [16]), ($1 + [8]))
	$1 = CALL $57($2, ($1 + [20]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$7 = CALL $57(($2 + [32]), $1)
	$5 = CALL $57(($2 + [48]), $4)
	CALL void $6((int_32 $3), (int_64 $5), (int_32 $7), (int_32 $0))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($5 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($4) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($4) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $76($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [17691])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $80($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1397703940
	CALL eosio_assert([1], [17622])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [17671])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($3 + [12]) = $1
	*($3 + [8]) = $1
	*($3 + [16]) = ($1 + $2)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($0 + [8])
	*($3 + [32]) = $0
	*($3 + [40]) = ($0 + [16])
	*($3 + [44]) = ($0 + [32])
	CALL $50(($3 + [32]), ($3 + [24]))
	$global$0 = ($3 + [48])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $76($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [17691])
	CALL memcpy(($3 + [8]), $6, [4])
	$2 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $80($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $2), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $76($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [17691])
	CALL memcpy(($3 + [15]), $6, [1])
	$2 = *($3 + [15])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $80($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ((int_32)($2 & [255]) != (int_32)[0])), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $30 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [17548])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $40($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [17548])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $76($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*(($3 + [16])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [56]) = ($2 + $1)
	*($3 + [48]) = $2
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [17691])
	CALL memcpy($3, $2, [8])
	*($3 + [52]) = ($2 + [8])
	CALL $36(($3 + [48]), ($3 + [8]))
	CALL $36(($3 + [48]), ($3 + [20]))
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $80($2)
	
.LABEL $label$5
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $37(($3 + [48]), $3)
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$6
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$7
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $60($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $73($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $60($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $62($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17691])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17691])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17691])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [17691])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $36(*($1), *($0 + [12]))
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17461])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17461])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17461])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $76($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8400])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $76($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $80($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $56 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}