(data (i32.const 8192) "memo:\00")
(data (i32.const 8198) " --\00")
(data (i32.const 8202) "idx:\00")
(data (i32.const 8207) " num:\00")
(data (i32.const 8213) "--\00")
(data (i32.const 8216) "lottery_num: \00")
(data (i32.const 8230) "[\00")
(data (i32.const 8232) ",\00")
(data (i32.const 8234) "]\00")
(data (i32.const 8236) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 8300) "transfer\00")
(data (i32.const 8309) "eosio.token\00")
(data (i32.const 8321) "0123456789\00")
(data (i32.const 8332) "error reading iterator\00")
(data (i32.const 8355) "read\00")
(data (i32.const 8360) "cannot create objects in table of another contract\00")
(data (i32.const 8411) "write\00")
(data (i32.const 8417) "object passed to erase is not in multi_index\00")
(data (i32.const 8462) "cannot erase objects in table of another contract\00")
(data (i32.const 8512) "attempt to remove object that was not in multi_index\00")
(data (i32.const 8565) "get\00")
(data (i32.const 8569) "cannot pass end iterator to erase\00")
(data (i32.const 8603) "cannot increment end iterator\00")
(data (i32.const 17044) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "db_store_i64" (func $fimport$4 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$5 (param i32 i64 i32 i32)))
(import "env" "memcpy" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$7 (param i64) (result i32)))
(import "env" "require_recipient" (func $fimport$8 (param i64)))
(import "env" "db_remove_i64" (func $fimport$9 (param i32)))
(import "env" "prints" (func $fimport$10 (param i32)))
(import "env" "prints_l" (func $fimport$11 (param i32 i32)))
(import "env" "printi" (func $fimport$12 (param i64)))
(import "env" "tapos_block_num" (func $fimport$13 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$14 (result i32)))
(import "env" "current_time" (func $fimport$15 (result i64)))
(import "env" "memmove" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$20 (param i32 i32 i32)))
(import "env" "action_data_size" (func $fimport$21 (result i32)))
(import "env" "read_action_data" (func $fimport$22 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$24 (param i32 i32)))
(import "env" "abort" (func $fimport$25))
(import "env" "__unordtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$34 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$35 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$36 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$37 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$40 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$42 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$43 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$44 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $22))
(export "_ZdlPv" (func $36))
(export "_Znwj" (func $34))
(export "_Znaj" (func $35))
(export "_ZdaPv" (func $37))
(table $0 6 6 anyfunc)
(elem (i32.const 1) $13 $1 $19 $5 $16)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17130))
(global $global$2 i32 (i32.const 17130))


void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $47($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $19 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [128])
	$global$0 = $4
	*($4 + [80]) = $1
	CALL require_auth(*($0))
	$5 = CALL tapos_block_num()
	$6 = CALL tapos_block_prefix()
	if ( ((int_64)*([0]) != (int_64)0) ){ goto $label$1 }
	*([0]) = ((int_64)((int_64)(CASTING int_64)(int_32 ((int_32)$6 * (int_32)$5)) + (int_64)$3) + (int_64)CALL current_time())
	
.LABEL $label$1
	*((($4 + [64]) + [8])) = *([0])
	*($4 + [64]) = *([0])
	*((($4 + [48]) + [8])) = [0]
	*($4 + [48]) = (int_64)0
	$5 = CALL $49([8230])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($4 + [48]) = ($5 << [1])
	$6 = (($4 + [48]) | [1])
	if ( $5 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [48]) = ($7 | [1])
	*($4 + [56]) = $6
	*($4 + [52]) = $5
	
.LABEL $label$7
	CALL memcpy($6, [8230], $5)
	
.LABEL $label$6
	*(($6 + $5)) = [0]
	$8 = (($4 + [8]) | [1])
	$9 = [4]
	$10 = ($4 + [16])
	
.LOOP $label$9:
	$5 = CALL $4(($4 + [64]), [10])
	*($10) = [0]
	*($4 + [8]) = (int_64)0
	CALL $42(($4 + [8]), [40])
	$1 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$10:
	$3 = ((int_64)$1 / (int_64)10)
	CALL $45(($4 + [8]), *(((CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$3 * (int_64)10))) + [8321])))
	$11 = ((int_64)$1 + (int_64)9)
	$1 = $3
	if ( ((uint_64)$11 > (uint_64)(int_64)18) ){ goto $label$10 }
	$12 = *($10)
	$7 = ($5 & [1])
	$5 = *($4 + [8])
	$14 = uint_32($5 >> [1])
	$13 = *($4 + [12])
	$6 = ( $13 ? $14 : $7 )
	if ( ($6 == 0) ){ goto $label$11 }
	$5 = ( $12 ? $8 : $7 )
	$6 = (($5 + $6) + [-1])
	if ( ((uint_32)$6 <= (uint_32)$5) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = *($5)
	*($5) = *($6)
	*($6) = $7
	$6 = ($6 + [-1])
	$5 = ($5 + [1])
	if ( ($5 <= $6) ){ goto $label$12 }
	$5 = *($4 + [8])
	$14 = uint_32($5 >> [1])
	$7 = ($5 & [1])
	$12 = *($10)
	$13 = *($4 + [12])
	
.LABEL $label$11
	CALL $46(($4 + [48]), ( $12 ? $8 : $7 ), ( $13 ? $14 : $7 ))
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$13
	if ( ($9 == 0) ){ goto $label$14 }
	CALL $44(($4 + [48]), [8232])
	$9 = ($9 + [-1])
	goto $label$9 
	
.LABEL $label$14
	CALL $44(($4 + [48]), [8234])
	if ( (int_64)(*($4 + [80]) == 0) ){ goto $label$2 }
	*(($7 = ($4 + [40]))) = [0]
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$1 = *($0)
	*($4 + [8]) = $1
	*($4 + [4]) = ($4 + [48])
	*($4) = ($4 + [80])
	*($4 + [120]) = $1
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$3()), [8360])
	*($4 + [100]) = $4
	*($4 + [96]) = ($4 + [8])
	*($4 + [104]) = ($4 + [120])
	*(($5 = CALL _Znwj([48])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32]) = ($4 + [8])
	CALL $20(($4 + [96]), $5)
	*($4 + [112]) = $5
	$1 = *($5)
	*($4 + [96]) = $1
	$9 = *($5 + [36])
	*($4 + [92]) = $9
	$12 = ($4 + [36])
	$6 = *($12)
	if ( ((uint_32)$6 >= (uint_32)*($7)) ){ goto $label$16 }
	*($6 + [8]) = $1
	*($6 + [16]) = $9
	*($4 + [112]) = [0]
	*($6) = $5
	*($12) = ($6 + [24])
	$5 = *($4 + [112])
	*($4 + [112]) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	goto $label$4 
	
.LABEL $label$16
	CALL $21(($4 + [32]), ($4 + [112]), ($4 + [96]), ($4 + [92]))
	$5 = *($4 + [112])
	*($4 + [112]) = [0]
	if ( $5 ){ goto $label$4 }
	
.LABEL $label$15
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$5
	CALL $38(($4 + [48]))
	
.LABEL $label$4
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($5 + [28])))
	
.LABEL $label$17
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$18
	CALL _ZdlPv($5)
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = (($4 + [8]) + [28])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$20 }
	
.LOOP $label$21:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$22 }
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($5 + [28])))
	
.LABEL $label$23
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$24
	CALL _ZdlPv($5)
	
.LABEL $label$22
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$21 }
	$5 = *(($4 + [32]))
	goto $label$19 
	
.LABEL $label$20
	$5 = $7
	
.LABEL $label$19
	*($9) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$2
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*($4 + [56]))
	
.LABEL $label$25
	$global$0 = ($4 + [128])
	(unreachable)
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $47($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $39($2, ($1 + [8]))
	$5 = *($1 + [24])
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$0 = (*(*($0)) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$6 = CALL $39(($2 + [16]), $4)
	CALL void $0((int_32 $3), (int_64 $6), (int_32 $5), (int_64 $1))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $47($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [8])
	CALL $40($6, *(($4 + [4])))
	$4 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [20])
	$7 = ( *(($1 + [24])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$4 = ($7 + $4)
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [20])
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $50($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [8411])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $30($3, $6)
	CALL $30($3, $7)
	$8 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($5 + [8]), (int_64)-4729582951088139392, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $53($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $50($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [16])) = [0]
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [56]) = ($1 + $0)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [8355])
	CALL memcpy($3, $1, [8])
	*($3 + [52]) = ($1 + [8])
	CALL $26(($3 + [48]), ($3 + [8]))
	CALL eosio_assert(((uint_32)(*($3 + [56]) - *($3 + [52])) > (uint_32)[7]), [8355])
	CALL memcpy(($3 + [24]), *($3 + [52]), [8])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $53($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $28(($3 + [48]), $3)
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL memory()
	$4 = (int_64)7
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$2 }
	$4 = (int_64)5
	
.LOOP $label$3:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	CALL eosio_assert(((int_64)6138663577826885632 == (int_64)$1), [8236])
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$6 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8300]
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$12 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$8 = ($8 + [-91])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$7 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$5 }
	
.LABEL $label$6
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8309]
	$7 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$18 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$8 = ($8 + [-91])
	goto $label$16 
	
.LABEL $label$18
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$14
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$13 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$19 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8300]
	$7 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$25 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$8 = ($8 + [-91])
	goto $label$23 
	
.LABEL $label$25
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$21
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$20 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$5 }
	
.LABEL $label$19
	$4 = (int_64)7
	
.LOOP $label$26:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$26 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$4 }
	
.LABEL $label$5
	*($3 + [88]) = $0
	if ( ((int_64)$2 <= (int_64)-5004312024498490401) ){ goto $label$30 }
	if ( ((int_64)$2 == (int_64)-5004312024498490400) ){ goto $label$29 }
	if ( ((int_64)$2 == (int_64)-4997502822602145792) ){ goto $label$28 }
	if ( ((int_64)$2 != (int_64)5987535704589074432) ){ goto $label$4 }
	*($3 + [68]) = [0]
	*($3 + [64]) = [1]
	*($3 + [24]) = *($3 + [64])
	CALL $23(($3 + [88]), ($3 + [24]))
	goto $label$4 
	
.LABEL $label$30
	if ( ((int_64)$2 == (int_64)-5075299833515343872) ){ goto $label$27 }
	if ( ((int_64)$2 != (int_64)-5069194682928054272) ){ goto $label$4 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [2]
	*($3 + [8]) = *($3 + [80])
	CALL $24(($3 + [88]), ($3 + [8]))
	goto $label$4 
	
.LABEL $label$29
	*($3 + [60]) = [0]
	*($3 + [56]) = [3]
	*($3 + [32]) = *($3 + [56])
	CALL $23(($3 + [88]), ($3 + [32]))
	goto $label$4 
	
.LABEL $label$28
	*($3 + [52]) = [0]
	*($3 + [48]) = [4]
	*($3 + [40]) = *($3 + [48])
	CALL $25(($3 + [88]), ($3 + [40]))
	goto $label$4 
	
.LABEL $label$27
	*($3 + [76]) = [0]
	*($3 + [72]) = [5]
	*($3 + [16]) = *($3 + [72])
	CALL $23(($3 + [88]), ($3 + [16]))
	
.LABEL $label$4
	CALL $48([0])
	$global$0 = ($3 + [96])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $50($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [8355])
	CALL memcpy(($3 + [8]), $2, [4])
	CALL eosio_assert(((int_32)($1 & [-4]) != (int_32)[4]), [8355])
	CALL memcpy((($3 + [8]) | [4]), ($2 + [4]), [4])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $53($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$2 = *($3 + [12])
	$0 = *($3 + [8])
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $0), (int_32 $2), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $50($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($1 + $0)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [8355])
	CALL memcpy(($3 + [8]), $1, [8])
	*($3 + [52]) = ($1 + [8])
	CALL $26(($3 + [48]), (($3 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $53($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $27(($3 + [48]), ($3 + [8]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$1 = CALL $39($2, ($1 + [8]))
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	$4 = CALL $39(($2 + [16]), $1)
	CALL void $5((int_32 $3), (int_64 $4), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $31($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $42($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $42($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $38($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $49 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $48 (int_32 $0)
{
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $41($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $47 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $41($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $43($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $49($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $41($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $52($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [17044])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8332])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $50($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([56])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = [0]
	*($5 + [44]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8355])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $26(($3 + [32]), ($5 + [8]))
	CALL $26(($3 + [32]), ($5 + [20]))
	CALL $26(($3 + [32]), ($5 + [32]))
	*($5 + [48]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $15(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $53($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [32]) & [1]) ){ goto $label$14 }
	if ( (*($1 + [20]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [40])))
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($1 + [28])))
	if ( (*($1 + [8]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [8417])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [8462])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [8512])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [40])))
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [28])))
	if ( (*($3 + [8]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$15:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$16 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($5 + [40])))
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($5 + [28])))
	if ( (*($5 + [8]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$17
	CALL _ZdlPv($5)
	
.LABEL $label$16
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$15 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [48]))
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8332])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $50($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([48])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8355])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $26(($3 + [32]), ($5 + [8]))
	CALL $26(($3 + [32]), ($5 + [20]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $18(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $53($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$10
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8417])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [8462])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [8512])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$10
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [28])))
	
.LABEL $label$14
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2) = (int_64)0
	*($2 + [8]) = [0]
	$3 = *($0 + [8])
	CALL $42($2, [40])
	$4 = ($0 + [8])
	
.LOOP $label$1:
	$5 = ((int_64)$3 / (int_64)10)
	CALL $45($2, *(((CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$5 * (int_64)10))) + [8321])))
	$6 = ((int_64)$3 + (int_64)9)
	$3 = $5
	if ( ((uint_64)$6 > (uint_64)(int_64)18) ){ goto $label$1 }
	$0 = ($0 & [1])
	$0 = *($2)
	$7 = ( *($2 + [4]) ? uint_32($0 >> [1]) : $0 )
	if ( ($7 == 0) ){ goto $label$2 }
	$0 = ( *(($2 + [8])) ? ($2 | [1]) : $0 )
	$7 = (($0 + $7) + [-1])
	if ( ((uint_32)$7 <= (uint_32)$0) ){ goto $label$2 }
	
.LOOP $label$3:
	$8 = *($0)
	*($0) = *($7)
	*($7) = $8
	$7 = ($7 + [-1])
	$0 = ($0 + [1])
	if ( ($0 <= $7) ){ goto $label$3 }
	
.LABEL $label$2
	CALL sha256($4, [8], ($2 + [16]))
	$3 = ((int_64)((int_64)*($2 + [17]) << (int_64)32) | (int_64)*($2 + [16]))
	*($4) = $3
	$0 = (CASTING uint_32)(uint_64 ((uint_64)$3 % (uint_64)(CASTING uint_64)(uint_32 $1)))
	if ( ((*($2) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$4
	$global$0 = ($2 + [48])
	return $0
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = CALL current_time()
	CALL prints([8216])
	$4 = (CASTING uint_64)(uint_32 (((uint_32)((((int_32)$2 * (int_32)[-86400]) + (CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000))) + [-1550419200]) / (uint_32)[120]) + [10000]))
	CALL printi($4)
	*(($3 + [112])) = [0]
	*($3 + [88]) = (int_64)0
	*($3 + [96]) = (int_64)-1
	*($3 + [104]) = (int_64)0
	$5 = *($0)
	*($3 + [80]) = $5
	$2 = CALL db_lowerbound_i64($5, (int_64)0, (int_64)-5075299833514950656, (int_64)0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = ((int_32)$1 > (int_32)[0])
	$2 = CALL $6(($3 + [80]), $2)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$1 }
	$7 = [1]
	
.LOOP $label$3:
	if ( ((uint_64)*($2) > (uint_64)$4) ){ goto $label$1 }
	$8 = [0]
	$9 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($9, [8569])
	CALL eosio_assert($9, [8603])
	$9 = CALL db_next_i64(*($2 + [36]), ($3 + [40]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$4 }
	$8 = CALL $6(($3 + [80]), $9)
	
.LABEL $label$4
	CALL $7(($3 + [80]), $2)
	if ( ($8 == 0) ){ goto $label$1 }
	$9 = ((int_32)$7 < (int_32)$1)
	$7 = ($7 + [1])
	$2 = $8
	if ( $9 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = ((int_32)$1 > (int_32)[0])
	
.LABEL $label$1
	*((($3 + [40]) + [32])) = [0]
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$5 = *($0)
	*($3 + [40]) = $5
	$2 = CALL db_lowerbound_i64($5, (int_64)0, (int_64)5987945970993201152, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$2 = CALL $8(($3 + [40]), $2)
	if ( ($6 == 0) ){ goto $label$5 }
	$7 = [1]
	
.LOOP $label$6:
	if ( ((uint_64)*($2) > (uint_64)$4) ){ goto $label$5 }
	$8 = [0]
	$9 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($9, [8569])
	CALL eosio_assert($9, [8603])
	$9 = CALL db_next_i64(*($2 + [48]), $3)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $8(($3 + [40]), $9)
	
.LABEL $label$7
	CALL $9(($3 + [40]), $2)
	if ( ($8 == 0) ){ goto $label$5 }
	$9 = ((int_32)$7 < (int_32)$1)
	$7 = ($7 + [1])
	$2 = $8
	if ( $9 ){ goto $label$6 }
	
.LABEL $label$5
	*(($3 + [32])) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$5 = *($0)
	*($3) = $5
	$2 = CALL db_lowerbound_i64($5, (int_64)0, (int_64)-4729582951088139392, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$8 }
	$2 = CALL $10($3, $2)
	if ( ($6 == 0) ){ goto $label$8 }
	$7 = [1]
	
.LOOP $label$9:
	if ( ((uint_64)*($2) > (uint_64)$4) ){ goto $label$8 }
	$8 = [0]
	$9 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($9, [8569])
	CALL eosio_assert($9, [8603])
	$9 = CALL db_next_i64(*($2 + [36]), ($3 + [120]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$10 }
	$8 = CALL $10($3, $9)
	
.LABEL $label$10
	CALL $11($3, $2)
	if ( ($8 == 0) ){ goto $label$8 }
	$9 = ((int_32)$7 < (int_32)$1)
	$7 = ($7 + [1])
	$2 = $8
	if ( $9 ){ goto $label$9 }
	
.LABEL $label$8
	$7 = *($3 + [24])
	if ( ($7 == 0) ){ goto $label$11 }
	$1 = ($3 + [28])
	$8 = *($1)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$13 }
	
.LOOP $label$14:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($2 + [28])))
	
.LABEL $label$16
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$17
	CALL _ZdlPv($2)
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	$2 = *(($3 + [24]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $7
	
.LABEL $label$12
	*($1) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL $12(($3 + [64]))
	$7 = *($3 + [104])
	if ( ($7 == 0) ){ goto $label$18 }
	$1 = (($3 + [80]) + [28])
	$8 = *($1)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$20 }
	
.LOOP $label$21:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$22 }
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($2 + [28])))
	
.LABEL $label$23
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$24
	CALL _ZdlPv($2)
	
.LABEL $label$22
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$21 }
	$2 = *(($3 + [104]))
	goto $label$19 
	
.LABEL $label$20
	$2 = $7
	
.LABEL $label$19
	*($1) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$18
	$global$0 = ($3 + [128])
}

void .FUNC $2 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	$5 = CALL tapos_block_num()
	$6 = CALL tapos_block_prefix()
	if ( ((int_64)*([0]) != (int_64)0) ){ goto $label$1 }
	*([0]) = ((int_64)((int_64)(CASTING int_64)(int_32 ((int_32)$6 * (int_32)$5)) + (int_64)$1) + (int_64)CALL current_time())
	
.LABEL $label$1
	*((($4 + [32]) + [8])) = *([0])
	*($4 + [32]) = *([0])
	*($4 + [24]) = [0]
	*($4 + [16]) = (int_64)0
	*($4 + [12]) = [0]
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	$7 = (($4 + [16]) + [8])
	$6 = [0]
	$5 = [0]
	if ( ((int_32)[0] != (int_32)[0]) ){ goto $label$4 }
	$8 = [11]
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$2 
	
.LABEL $label$3
	$8 = [3]
	
.LABEL $label$2
	
.LOOP $label$5:
	goto $label$23 
	
.LABEL $label$24
	$6 = *($4 + [20])
	if ( ((int_32)$6 == (int_32)*($7)) ){ goto $label$12 }
	$8 = [0]
	goto $label$5 
	
.LABEL $label$23
	*($6) = $5
	*($4 + [20]) = ($6 + [4])
	goto $label$11 
	
.LABEL $label$22
	CALL $3(($4 + [16]), ($4 + [12]))
	$8 = [1]
	goto $label$5 
	
.LABEL $label$21
	$5 = (*($4 + [12]) + [1])
	*($4 + [12]) = $5
	if ( ((int_32)$5 < (int_32)$3) ){ goto $label$10 }
	$8 = [2]
	goto $label$5 
	
.LABEL $label$20
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	$8 = [6]
	goto $label$5 
	
.LABEL $label$19
	$5 = *($4 + [20])
	$8 = [7]
	goto $label$5 
	
.LABEL $label$18
	$5 = CALL $4(($4 + [32]), int_32(($5 - *($4 + [16])) >> [2]))
	$5 = (*($4 + [16]) + ($5 << [2]))
	*($2) = *($5)
	$9 = ($5 + [4])
	$6 = (*($4 + [20]) - $9)
	$7 = int_32($6 >> [2])
	if ( ($6 == 0) ){ goto $label$6 }
	$8 = [8]
	goto $label$5 
	
.LABEL $label$17
	CALL memmove($5, $9, $6)
	$8 = [9]
	goto $label$5 
	
.LABEL $label$16
	$5 = ($5 + ($7 << [2]))
	*($4 + [20]) = $5
	$2 = ($2 + [4])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$8 }
	$8 = [3]
	goto $label$5 
	
.LABEL $label$15
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$7 }
	$8 = [4]
	goto $label$5 
	
.LABEL $label$14
	*($4 + [20]) = $5
	CALL _ZdlPv($5)
	$8 = [5]
	goto $label$5 
	
.LABEL $label$13
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$12
	$8 = [11]
	goto $label$5 
	
.LABEL $label$11
	$8 = [1]
	goto $label$5 
	
.LABEL $label$10
	$8 = [10]
	goto $label$5 
	
.LABEL $label$9
	$8 = [3]
	goto $label$5 
	
.LABEL $label$8
	$8 = [7]
	goto $label$5 
	
.LABEL $label$7
	$8 = [5]
	goto $label$5 
	
.LABEL $label$6
	$8 = [9]
	goto $label$5 
	$8
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [2])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$6 = int_32($7 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [2]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $47($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [2])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [2]))
	$5 = ($4 + [4])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth(*($0))
	*(($0 = ($3 + [32]))) = (int_64)0
	*(($4 = ($3 + [24]))) = (int_64)0
	*(($5 = ($3 + [16]))) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL $2($3, $1, $3, [10])
	CALL prints([8192])
	$6 = *($2)
	$7 = ($6 & [1])
	CALL prints_l(( *($2 + [8]) ? ($2 + [1]) : $7 ), ( *($2 + [4]) ? uint_32($6 >> [1]) : $7 ))
	CALL prints([8198])
	CALL prints([8202])
	CALL printi((int_64)0)
	CALL prints([8207])
	CALL printi(*($3))
	CALL prints([8213])
	CALL prints([8202])
	CALL printi((int_64)1)
	CALL prints([8207])
	CALL printi(*($3 + [4]))
	CALL prints([8213])
	CALL prints([8202])
	CALL printi((int_64)2)
	CALL prints([8207])
	CALL printi(*($3 + [8]))
	CALL prints([8213])
	CALL prints([8202])
	CALL printi((int_64)3)
	CALL prints([8207])
	CALL printi(*($3 + [12]))
	CALL prints([8213])
	CALL prints([8202])
	CALL printi((int_64)4)
	CALL prints([8207])
	CALL printi(*($5))
	CALL prints([8213])
	CALL prints([8202])
	CALL printi((int_64)5)
	CALL prints([8207])
	CALL printi(*($3 + [20]))
	CALL prints([8213])
	CALL prints([8202])
	CALL printi((int_64)6)
	CALL prints([8207])
	CALL printi(*($4))
	CALL prints([8213])
	CALL prints([8202])
	CALL printi((int_64)7)
	CALL prints([8207])
	CALL printi(*($3 + [28]))
	CALL prints([8213])
	CALL prints([8202])
	CALL printi((int_64)8)
	CALL prints([8207])
	CALL printi(*($0))
	CALL prints([8213])
	CALL prints([8202])
	CALL printi((int_64)9)
	CALL prints([8207])
	CALL printi(*($3 + [36]))
	CALL prints([8213])
	$global$0 = ($3 + [48])
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$5 = ($1 + [20])
	CALL $40($5, *(($3 + [4])))
	*(($3 = $2)) = [0]
	*($3 + [8]) = $3
	$6 = ($1 + [8])
	*($3 + [20]) = $6
	*($3 + [16]) = $1
	*($3 + [24]) = $5
	$7 = ($1 + [32])
	*($3 + [28]) = $7
	CALL $33(($3 + [16]), ($3 + [8]))
	$8 = *($3)
	if ( ($8 <= [513]) ){ goto $label$2 }
	$2 = CALL $50($8)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($8 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $8)
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [8411])
	CALL memcpy($2, $1, [8])
	*($3 + [20]) = ($2 + [8])
	CALL $30(($3 + [16]), $6)
	CALL $30(($3 + [16]), $5)
	CALL $30(($3 + [16]), $7)
	$9 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($4 + [8]), (int_64)5987945970993201152, *(*($0 + [8])), $9, $2, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$9 >= (uint_64)*($4 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $53($2)
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [32])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $47($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $32(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [160])
	$global$0 = $4
	*($4 + [112]) = $1
	CALL require_auth(*($0))
	*(($4 + [96])) = (int_64)0
	*(($4 + [88])) = (int_64)0
	*(($4 + [80])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	CALL $2($4, $3, ($4 + [64]), [10])
	CALL prints([8192])
	$5 = *($2)
	$6 = ($5 & [1])
	CALL prints_l(( *($2 + [8]) ? ($2 + [1]) : $6 ), ( *($2 + [4]) ? uint_32($5 >> [1]) : $6 ))
	CALL prints([8198])
	*(($4 + [56])) = [0]
	*($4 + [48]) = (int_64)0
	$2 = CALL $49([8230])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$7 }
	*($4 + [48]) = ($2 << [1])
	$5 = (($4 + [48]) | [1])
	if ( $2 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($2 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($4 + [48]) = ($6 | [1])
	*($4 + [56]) = $5
	*($4 + [52]) = $2
	
.LABEL $label$6
	CALL memcpy($5, [8230], $2)
	
.LABEL $label$5
	*(($5 + $2)) = [0]
	$7 = (($4 + [8]) | [1])
	$8 = ($4 + [16])
	$9 = [0]
	
.LOOP $label$8:
	*($8) = [0]
	*($4 + [8]) = (int_64)0
	$2 = *((($4 + [64]) + ($9 << [2])))
	CALL $42(($4 + [8]), [40])
	$3 = (CASTING int_64)(int_32 ($2 + [1]))
	
.LOOP $label$9:
	$1 = ((int_64)$3 / (int_64)10)
	CALL $45(($4 + [8]), *(((CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$1 * (int_64)10))) + [8321])))
	$10 = ((int_64)$3 + (int_64)9)
	$3 = $1
	if ( ((uint_64)$10 > (uint_64)(int_64)18) ){ goto $label$9 }
	$11 = *($8)
	$6 = ($2 & [1])
	$2 = *($4 + [8])
	$13 = uint_32($2 >> [1])
	$12 = *($4 + [12])
	$5 = ( $12 ? $13 : $6 )
	if ( ($5 == 0) ){ goto $label$10 }
	$2 = ( $11 ? $7 : $6 )
	$5 = (($2 + $5) + [-1])
	if ( ((uint_32)$5 <= (uint_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = *($2)
	*($2) = *($5)
	*($5) = $6
	$5 = ($5 + [-1])
	$2 = ($2 + [1])
	if ( ($2 <= $5) ){ goto $label$11 }
	$2 = *($4 + [8])
	$13 = uint_32($2 >> [1])
	$6 = ($2 & [1])
	$11 = *($8)
	$12 = *($4 + [12])
	
.LABEL $label$10
	CALL $46(($4 + [48]), ( $11 ? $7 : $6 ), ( $12 ? $13 : $6 ))
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($8))
	
.LABEL $label$12
	if ( ((int_32)$9 == (int_32)[9]) ){ goto $label$13 }
	CALL $44(($4 + [48]), [8232])
	$9 = ($9 + [1])
	goto $label$8 
	
.LABEL $label$13
	CALL $44(($4 + [48]), [8234])
	if ( (int_64)(*($4 + [112]) == 0) ){ goto $label$1 }
	*(($6 = ($4 + [40]))) = [0]
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$3 = *($0)
	*($4 + [8]) = $3
	*($4 + [4]) = ($4 + [48])
	*($4) = ($4 + [112])
	*($4 + [152]) = $3
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$3()), [8360])
	*($4 + [132]) = $4
	*($4 + [128]) = ($4 + [8])
	*($4 + [136]) = ($4 + [152])
	*(($2 = CALL _Znwj([48])) + [8 align=4]) = (int_64)0
	*($2 + [16 align=4]) = (int_64)0
	*($2 + [24 align=4]) = (int_64)0
	*($2 + [32]) = ($4 + [8])
	CALL $17(($4 + [128]), $2)
	*($4 + [144]) = $2
	$3 = *($2)
	*($4 + [128]) = $3
	$9 = *($2 + [36])
	*($4 + [124]) = $9
	$11 = ($4 + [36])
	$5 = *($11)
	if ( ((uint_32)$5 >= (uint_32)*($6)) ){ goto $label$15 }
	*($5 + [8]) = $3
	*($5 + [16]) = $9
	*($4 + [144]) = [0]
	*($5) = $2
	*($11) = ($5 + [24])
	$2 = *($4 + [144])
	*($4 + [144]) = [0]
	if ( ($2 == 0) ){ goto $label$14 }
	goto $label$3 
	
.LABEL $label$15
	CALL $18(($4 + [32]), ($4 + [144]), ($4 + [128]), ($4 + [124]))
	$2 = *($4 + [144])
	*($4 + [144]) = [0]
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$14
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL $38(($4 + [48]))
	
.LABEL $label$3
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($2 + [28])))
	
.LABEL $label$16
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$17
	CALL _ZdlPv($2)
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$9 = (($4 + [8]) + [28])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$19 }
	
.LOOP $label$20:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$21 }
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($2 + [28])))
	
.LABEL $label$22
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$23
	CALL _ZdlPv($2)
	
.LABEL $label$21
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$20 }
	$2 = *(($4 + [32]))
	goto $label$18 
	
.LABEL $label$19
	$2 = $6
	
.LABEL $label$18
	*($9) = $6
	CALL _ZdlPv($2)
	
.LABEL $label$1
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($4 + [56]))
	
.LABEL $label$24
	$global$0 = ($4 + [160])
	(unreachable)
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [8])
	CALL $40($6, *(($4 + [4])))
	$4 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [20])
	$7 = ( *(($1 + [24])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$4 = ($7 + $4)
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [20])
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $50($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [8411])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $30($3, $6)
	CALL $30($3, $7)
	$8 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($5 + [8]), (int_64)-5075299833514950656, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $53($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8332])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $50($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([48])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8355])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $26(($3 + [32]), ($5 + [8]))
	CALL $26(($3 + [32]), ($5 + [20]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $21(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $53($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$10
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8417])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [8462])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [8512])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$10
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [28])))
	
.LABEL $label$14
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

int_32 .FUNC $12 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [28])))
	if ( (*($3 + [8]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [432])
	$global$0 = $4
	*($4 + [384]) = $1
	CALL require_auth(*($0))
	$5 = [0]
	CALL memset(($4 + [64]), [0], [320])
	CALL $2($4, $3, ($4 + [64]), [80])
	$6 = *($4 + [64])
	
.LOOP $label$2:
	$7 = (($4 + [64]) + $5)
	$8 = ($7 + [4])
	$9 = *($8)
	if ( ((int_32)$6 <= (int_32)$9) ){ goto $label$3 }
	*($8) = $6
	*($7) = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[76]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[76]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = [0]
	$6 = *($4 + [64])
	
.LOOP $label$5:
	$7 = (($4 + [64]) + $5)
	$8 = ($7 + [4])
	$9 = *($8)
	if ( ((int_32)$6 <= (int_32)$9) ){ goto $label$6 }
	*($8) = $6
	*($7) = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[72]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[72]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [0]
	$6 = *($4 + [64])
	
.LOOP $label$8:
	$7 = (($4 + [64]) + $5)
	$8 = ($7 + [4])
	$9 = *($8)
	if ( ((int_32)$6 <= (int_32)$9) ){ goto $label$9 }
	*($8) = $6
	*($7) = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[68]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$6 = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[68]) ){ goto $label$8 }
	
.LABEL $label$7
	$5 = [0]
	$6 = *($4 + [64])
	
.LOOP $label$11:
	$7 = (($4 + [64]) + $5)
	$8 = ($7 + [4])
	$9 = *($8)
	if ( ((int_32)$6 <= (int_32)$9) ){ goto $label$12 }
	*($8) = $6
	*($7) = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[64]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$6 = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[64]) ){ goto $label$11 }
	
.LABEL $label$10
	$5 = [0]
	$6 = *($4 + [64])
	
.LOOP $label$14:
	$7 = (($4 + [64]) + $5)
	$8 = ($7 + [4])
	$9 = *($8)
	if ( ((int_32)$6 <= (int_32)$9) ){ goto $label$15 }
	*($8) = $6
	*($7) = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[60]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[60]) ){ goto $label$14 }
	
.LABEL $label$13
	$5 = [0]
	$6 = *($4 + [64])
	
.LOOP $label$17:
	$7 = (($4 + [64]) + $5)
	$8 = ($7 + [4])
	$9 = *($8)
	if ( ((int_32)$6 <= (int_32)$9) ){ goto $label$18 }
	*($8) = $6
	*($7) = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[56]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$6 = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[56]) ){ goto $label$17 }
	
.LABEL $label$16
	$5 = [0]
	$6 = *($4 + [64])
	
.LOOP $label$20:
	$7 = (($4 + [64]) + $5)
	$8 = ($7 + [4])
	$9 = *($8)
	if ( ((int_32)$6 <= (int_32)$9) ){ goto $label$21 }
	*($8) = $6
	*($7) = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[52]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$6 = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[52]) ){ goto $label$20 }
	
.LABEL $label$19
	$5 = [0]
	$6 = *($4 + [64])
	
.LOOP $label$23:
	$7 = (($4 + [64]) + $5)
	$8 = ($7 + [4])
	$9 = *($8)
	if ( ((int_32)$6 <= (int_32)$9) ){ goto $label$24 }
	*($8) = $6
	*($7) = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[48]) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$6 = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[48]) ){ goto $label$23 }
	
.LABEL $label$22
	$5 = [0]
	$6 = *($4 + [64])
	
.LOOP $label$26:
	$7 = (($4 + [64]) + $5)
	$8 = ($7 + [4])
	$9 = *($8)
	if ( ((int_32)$6 <= (int_32)$9) ){ goto $label$27 }
	*($8) = $6
	*($7) = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[44]) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$6 = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[44]) ){ goto $label$26 }
	
.LABEL $label$25
	$5 = [0]
	$6 = *($4 + [64])
	
.LOOP $label$29:
	$7 = (($4 + [64]) + $5)
	$8 = ($7 + [4])
	$9 = *($8)
	if ( ((int_32)$6 <= (int_32)$9) ){ goto $label$30 }
	*($8) = $6
	*($7) = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[40]) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$6 = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[40]) ){ goto $label$29 }
	
.LABEL $label$28
	$5 = [0]
	$6 = *($4 + [64])
	
.LOOP $label$32:
	$7 = (($4 + [64]) + $5)
	$8 = ($7 + [4])
	$9 = *($8)
	if ( ((int_32)$6 <= (int_32)$9) ){ goto $label$33 }
	*($8) = $6
	*($7) = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[36]) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$6 = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[36]) ){ goto $label$32 }
	
.LABEL $label$31
	$5 = [0]
	$6 = *($4 + [64])
	
.LOOP $label$35:
	$7 = (($4 + [64]) + $5)
	$8 = ($7 + [4])
	$9 = *($8)
	if ( ((int_32)$6 <= (int_32)$9) ){ goto $label$36 }
	*($8) = $6
	*($7) = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$6 = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$35 }
	
.LABEL $label$34
	$5 = [0]
	$6 = *($4 + [64])
	
.LOOP $label$38:
	$7 = (($4 + [64]) + $5)
	$8 = ($7 + [4])
	$9 = *($8)
	if ( ((int_32)$6 <= (int_32)$9) ){ goto $label$39 }
	*($8) = $6
	*($7) = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[28]) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$6 = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[28]) ){ goto $label$38 }
	
.LABEL $label$37
	$5 = [0]
	$6 = *($4 + [64])
	
.LOOP $label$41:
	$7 = (($4 + [64]) + $5)
	$8 = ($7 + [4])
	$9 = *($8)
	if ( ((int_32)$6 <= (int_32)$9) ){ goto $label$42 }
	*($8) = $6
	*($7) = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[24]) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$6 = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[24]) ){ goto $label$41 }
	
.LABEL $label$40
	$5 = [0]
	$6 = *($4 + [64])
	
.LOOP $label$44:
	$7 = (($4 + [64]) + $5)
	$8 = ($7 + [4])
	$9 = *($8)
	if ( ((int_32)$6 <= (int_32)$9) ){ goto $label$45 }
	*($8) = $6
	*($7) = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[20]) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$6 = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[20]) ){ goto $label$44 }
	
.LABEL $label$43
	$5 = [0]
	$6 = *($4 + [64])
	
.LOOP $label$47:
	$7 = (($4 + [64]) + $5)
	$8 = ($7 + [4])
	$9 = *($8)
	if ( ((int_32)$6 <= (int_32)$9) ){ goto $label$48 }
	*($8) = $6
	*($7) = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[16]) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	$6 = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[16]) ){ goto $label$47 }
	
.LABEL $label$46
	$5 = [0]
	$6 = *($4 + [64])
	
.LOOP $label$50:
	$7 = (($4 + [64]) + $5)
	$8 = ($7 + [4])
	$9 = *($8)
	if ( ((int_32)$6 <= (int_32)$9) ){ goto $label$51 }
	*($8) = $6
	*($7) = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	$6 = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$50 }
	
.LABEL $label$49
	$5 = [0]
	$6 = *($4 + [64])
	
.LOOP $label$53:
	$7 = (($4 + [64]) + $5)
	$8 = ($7 + [4])
	$9 = *($8)
	if ( ((int_32)$6 <= (int_32)$9) ){ goto $label$54 }
	*($8) = $6
	*($7) = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[8]) ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	$6 = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[8]) ){ goto $label$53 }
	
.LABEL $label$52
	$5 = [0]
	$6 = *($4 + [64])
	
.LOOP $label$56:
	$7 = (($4 + [64]) + $5)
	$8 = ($7 + [4])
	$9 = *($8)
	if ( ((int_32)$6 <= (int_32)$9) ){ goto $label$57 }
	*($8) = $6
	*($7) = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[4]) ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$57
	$6 = $9
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[4]) ){ goto $label$56 }
	
.LABEL $label$55
	*(($4 + [56])) = [0]
	*($4 + [48]) = (int_64)0
	$5 = CALL $49([8230])
	if ( ((uint_32)$5 > (uint_32)[-17]) ){ goto $label$61 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$64 }
	*($4 + [48]) = ($5 << [1])
	$6 = (($4 + [48]) | [1])
	if ( $5 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$64
	$9 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($9)
	*($4 + [48]) = ($9 | [1])
	*($4 + [56]) = $6
	*($4 + [52]) = $5
	
.LABEL $label$63
	CALL memcpy($6, [8230], $5)
	
.LABEL $label$62
	*(($6 + $5)) = [0]
	$10 = (($4 + [8]) | [1])
	$11 = ($4 + [16])
	$5 = [0]
	$7 = [0]
	
.LOOP $label$65:
	$5 = (($5 + *((($4 + [64]) + ($7 << [2])))) + [1])
	$7 = ($7 + [1])
	if ( ((uint_32)($7 & [255]) % (uint_32)[6]) ){ goto $label$66 }
	*($11) = [0]
	*($4 + [8]) = (int_64)0
	CALL $42(($4 + [8]), [40])
	$3 = (CASTING int_64)(int_32 ((int_32)$5 % (int_32)[10]))
	
.LOOP $label$67:
	$1 = ((int_64)$3 / (int_64)10)
	CALL $45(($4 + [8]), *(((CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$1 * (int_64)10))) + [8321])))
	$12 = ((int_64)$3 + (int_64)9)
	$3 = $1
	if ( ((uint_64)$12 > (uint_64)(int_64)18) ){ goto $label$67 }
	$8 = *($11)
	$9 = ($5 & [1])
	$5 = *($4 + [8])
	$14 = uint_32($5 >> [1])
	$13 = *($4 + [12])
	$6 = ( $13 ? $14 : $9 )
	if ( ($6 == 0) ){ goto $label$68 }
	$5 = ( $8 ? $10 : $9 )
	$6 = (($5 + $6) + [-1])
	if ( ((uint_32)$6 <= (uint_32)$5) ){ goto $label$68 }
	
.LOOP $label$69:
	$9 = *($5)
	*($5) = *($6)
	*($6) = $9
	$6 = ($6 + [-1])
	$5 = ($5 + [1])
	if ( ($5 <= $6) ){ goto $label$69 }
	$5 = *($4 + [8])
	$14 = uint_32($5 >> [1])
	$9 = ($5 & [1])
	$8 = *($11)
	$13 = *($4 + [12])
	
.LABEL $label$68
	CALL $46(($4 + [48]), ( $8 ? $10 : $9 ), ( $13 ? $14 : $9 ))
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$70 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$70
	$5 = [0]
	if ( ((uint_32)$7 > (uint_32)[17]) ){ goto $label$66 }
	CALL $44(($4 + [48]), [8232])
	
.LABEL $label$66
	if ( ((int_32)$7 != (int_32)[20]) ){ goto $label$65 }
	CALL $44(($4 + [48]), [8234])
	if ( (int_64)(*($4 + [384]) == 0) ){ goto $label$58 }
	*(($9 = ($4 + [40]))) = [0]
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$3 = *($0)
	*($4 + [8]) = $3
	*($4 + [4]) = ($4 + [48])
	*($4) = ($4 + [384])
	*($4 + [424]) = $3
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$3()), [8360])
	*($4 + [404]) = $4
	*($4 + [400]) = ($4 + [8])
	*($4 + [408]) = ($4 + [424])
	*(($5 = CALL _Znwj([56])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = [0]
	*($5 + [44]) = ($4 + [8])
	CALL $14(($4 + [400]), $5)
	*($4 + [416]) = $5
	$3 = *($5)
	*($4 + [400]) = $3
	$7 = *($5 + [48])
	*($4 + [396]) = $7
	$8 = ($4 + [36])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$71 }
	*($6 + [8]) = $3
	*($6 + [16]) = $7
	*($4 + [416]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	$5 = *($4 + [416])
	*($4 + [416]) = [0]
	if ( ($5 == 0) ){ goto $label$59 }
	goto $label$60 
	
.LABEL $label$71
	CALL $15(($4 + [32]), ($4 + [416]), ($4 + [400]), ($4 + [396]))
	$5 = *($4 + [416])
	*($4 + [416]) = [0]
	if ( $5 ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$61
	CALL $38(($4 + [48]))
	
.LABEL $label$60
	if ( (*($5 + [32]) & [1]) ){ goto $label$76 }
	if ( (*($5 + [20]) & [1]) ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$76
	CALL _ZdlPv(*(($5 + [40])))
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$74 }
	
.LABEL $label$75
	CALL _ZdlPv(*(($5 + [28])))
	if ( (*($5 + [8]) & [1]) ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$74
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$72 }
	
.LABEL $label$73
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$72
	CALL _ZdlPv($5)
	
.LABEL $label$59
	CALL $12(($4 + [32]))
	
.LABEL $label$58
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$77 }
	CALL _ZdlPv(*($4 + [56]))
	
.LABEL $label$77
	$global$0 = ($4 + [432])
	(unreachable)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $53($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $50($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8636])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $50($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [40])))
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [28])))
	if ( (*($1 + [8]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [8])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [4])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($3)
	$3 = *($0 + [8])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$3 = *($0)
	$0 = *($0 + [12])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	*($2) = ($0 + $1)
	
.LABEL $label$6
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8411])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8411])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8565])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $29($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8355])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $50 (int_32 $0)
{
	return CALL $51([8648], $0)
}

void .FUNC $38 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8640]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8644])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8640]) = [1]
	$2 = ($2 << [16])
	*([0] + [8644]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8644])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8644]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8640]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8640]) = [1]
	$3 = ($3 << [16])
	*([0] + [8644]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8644])
	
.LABEL $label$10
	*([0] + [8644]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17032])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16840]
	$3 = (((int_32)$1 * (int_32)[12]) + [16840])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}