(data (i32.const 4) "\b0i\00\00")
(data (i32.const 16) "invalid symbol name\00")
(data (i32.const 48) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 112) "token with symbol already exists\00")
(data (i32.const 160) "cannot create objects in table of another contract\00")
(data (i32.const 224) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 288) "write\00")
(data (i32.const 304) "error reading iterator\00")
(data (i32.const 336) "read\00")
(data (i32.const 352) "can not invite self\00")
(data (i32.const 384) "player account does not exist\00")
(data (i32.const 416) "inviter account does not exist\00")
(data (i32.const 448) "relation already exist\00")
(data (i32.const 480) "token with symbol does not exist, create token before issue\00")
(data (i32.const 544) "invalid quantity\00")
(data (i32.const 576) "must issue positive quantity\00")
(data (i32.const 608) "symbol precision mismatch\00")
(data (i32.const 640) "active\00")
(data (i32.const 656) "cannot pass end iterator to modify\00")
(data (i32.const 704) "object passed to modify is not in multi_index\00")
(data (i32.const 752) "cannot modify objects in table of another contract\00")
(data (i32.const 816) "attempt to add asset with different symbol\00")
(data (i32.const 864) "addition underflow\00")
(data (i32.const 896) "addition overflow\00")
(data (i32.const 928) "updater cannot change primary key when modifying an object\00")
(data (i32.const 992) "must positive quantity\00")
(data (i32.const 1024) "multiplication overflow\00")
(data (i32.const 1056) "multiplication underflow\00")
(data (i32.const 1088) "divide by zero\00")
(data (i32.const 1104) "signed division overflow\00")
(data (i32.const 1136) "attempt to subtract asset with different symbol\00")
(data (i32.const 1184) "subtraction underflow\00")
(data (i32.const 1216) "subtraction overflow\00")
(data (i32.const 1248) "EOZ rewards\00")
(data (i32.const 1264) "inviter shares EOZ!\00")
(data (i32.const 1296) "bind\00")
(data (i32.const 1312) "token with symbol(EOZ) does not exist, create token before grant\00")
(data (i32.const 1392) "cannot transfer to self\00")
(data (i32.const 1424) "to account does not exist\00")
(data (i32.const 1456) "unable to find key\00")
(data (i32.const 1488) "must transfer positive quantity\00")
(data (i32.const 1520) "memo has more than 256 bytes\00")
(data (i32.const 1552) "player do not exist\00")
(data (i32.const 1584) "overdrawn balance\00")
(data (i32.const 1616) "no balance object found\00")
(data (i32.const 1648) "object passed to erase is not in multi_index\00")
(data (i32.const 1696) "cannot erase objects in table of another contract\00")
(data (i32.const 1760) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1824) "eosio.token\00")
(data (i32.const 1840) "transfer\00")
(data (i32.const 1856) "sell EOZ\00")
(data (i32.const 1872) "for the activity and operation\00")
(data (i32.const 1904) "token with symbol(EOZ) does not exist\00")
(data (i32.const 1952) "delete PlayerTable ok\00")
(data (i32.const 1984) "cannot pass end iterator to erase\00")
(data (i32.const 2032) "cannot increment end iterator\00")
(data (i32.const 2064) "delete BindTable ok\00")
(data (i32.const 2096) "delete StatusTable ok\00")
(data (i32.const 2128) "get\00")
(data (i32.const 10528) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 10624) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 10640) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 10656) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$1))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$9 (param i32)))
(import "env" "db_store_i64" (func $fimport$10 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$11 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$12 (param i32 i32)))
(import "env" "is_account" (func $fimport$13 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$15 (param i32)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$17 (param i64)))
(import "env" "require_auth2" (func $fimport$18 (param i64 i64)))
(import "env" "send_inline" (func $fimport$19 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN2cx5token6createEv" (func $5))
(export "_ZN2cx5token4bindEyy" (func $11))
(export "_ZN2cx5token5issueEyRKN5eosio5assetERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE" (func $14))
(export "_ZN2cx5token10addBalanceEyRKN5eosio5assetEy" (func $16))
(export "_ZN2cx5token5grantEyRKN5eosio5assetE" (func $30))
(export "_ZN2cx5token8transferEyyRKN5eosio5assetERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE" (func $31))
(export "_ZN2cx5token10subBalanceEyRKN5eosio5assetE" (func $32))
(export "_ZN2cx5token4sellERKN5eosio5assetEy" (func $37))
(export "_ZN2cx5token5cleanEv" (func $39))
(export "apply" (func $42))
(export "malloc" (func $51))
(export "free" (func $54))
(export "pow" (func $61))
(export "sqrt" (func $62))
(export "fabs" (func $63))
(export "scalbn" (func $64))
(export "memcmp" (func $65))
(export "strlen" (func $66))
(table $0 7 7 anyfunc)
(elem (i32.const 0) $67 $11 $5 $37 $31 $39 $30)



void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $55($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $59($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $56($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), ($0 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $23(*($1), *($0 + [20]))
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC _ZN2cx5token5cleanEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [96])
	*([0] + [4]) = $13
	CALL require_auth(*($0))
	*((($13 + [48]) + [32])) = [0]
	*($13 + [56]) = (int_64)5918533
	*($13 + [64]) = (int_64)-1
	*($13 + [48]) = *($0)
	*($13 + [72]) = (int_64)0
	CALL $41(($13 + [48]), CALL $15(($13 + [48]), (int_64)5918533, [1904]))
	CALL prints([2096])
	$12 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)-6030912142679474176, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$1 }
	$1 = ($0 + [48])
	$12 = CALL $24($1, $12)
	$5 = ($13 + [16])
	$6 = ($13 + [24])
	$7 = ($13 + [32])
	$9 = ($13 + [36])
	$10 = (($13 + [8]) + [32])
	
.LOOP $label$2:
	$4 = *($12)
	*($5) = $4
	*($6) = (int_64)-1
	*($7) = [0]
	$8 = *($0)
	*($13 + [8]) = $8
	*($9) = [0]
	*($10) = [0]
	$3 = CALL db_find_i64($8, $4, (int_64)3607749779137757184, (int_64)5918533)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $26(($13 + [8]), $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($13 + [8])), [48])
	CALL eosio_assert([1], [1984])
	CALL eosio_assert([1], [2032])
	$2 = CALL db_next_i64(*($3 + [20]), ($13 + [88]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	CALL $26(($13 + [8]), $2)
	
.LABEL $label$4
	CALL $36(($13 + [8]), $3)
	
.LABEL $label$3
	$11 = [0]
	$3 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($3, [1984])
	CALL eosio_assert($3, [2032])
	$3 = CALL db_next_i64(*($12 + [28]), ($13 + [88]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$11 = CALL $24($1, $3)
	
.LABEL $label$5
	CALL $34($1, $12)
	$2 = *($7)
	if ( ($2 == 0) ){ goto $label$6 }
	$12 = *($9)
	if ( ((int_32)$12 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$12 = ($12 + [-24])
	$3 = *($12)
	*($12) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	CALL $56($3)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$12) ){ goto $label$9 }
	$12 = *($7)
	goto $label$7 
	
.LABEL $label$8
	$12 = $2
	
.LABEL $label$7
	*($9) = $2
	CALL $56($12)
	
.LABEL $label$6
	$12 = $11
	if ( $11 ){ goto $label$2 }
	
.LABEL $label$1
	CALL prints([1952])
	$12 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)4298281224046116864, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$11 }
	$2 = ($0 + [8])
	$3 = CALL $12($2, $12)
	
.LOOP $label$12:
	CALL eosio_assert([1], [1984])
	CALL eosio_assert([1], [2032])
	$12 = [0]
	$11 = CALL db_next_i64(*($3 + [20]), ($13 + [8]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$13 }
	$12 = CALL $12($2, $11)
	
.LABEL $label$13
	CALL $40($2, $3)
	$3 = $12
	if ( $12 ){ goto $label$12 }
	
.LABEL $label$11
	CALL prints([2064])
	$2 = *($13 + [72])
	if ( ($2 == 0) ){ goto $label$14 }
	$11 = ($13 + [76])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$2) ){ goto $label$16 }
	
.LOOP $label$17:
	$12 = ($12 + [-24])
	$3 = *($12)
	*($12) = [0]
	if ( ($3 == 0) ){ goto $label$18 }
	CALL $56($3)
	
.LABEL $label$18
	if ( ((int_32)$2 != (int_32)$12) ){ goto $label$17 }
	$12 = *(($13 + [72]))
	goto $label$15 
	
.LABEL $label$16
	$12 = $2
	
.LABEL $label$15
	*($11) = $2
	CALL $56($12)
	
.LABEL $label$14
	*([0] + [4]) = ($13 + [96])
}

void .FUNC $67 ()
{
	(unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [224])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [16])
	*($0 + [24]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [336])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [336])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [224])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [16])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [336])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [288])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [288])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [288])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $18($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [288])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [288])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $22(CALL $21($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [288])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [288])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [288])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [288])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $55(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $59($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $56($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $56($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [304])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $55([40])
	$6 = CALL $29($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [28])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $25(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $56($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $55(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $59($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $56($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $56($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [304])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $55([32])
	$6 = CALL $28($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $27(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $56($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $50($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $58($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $55($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $58($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $56($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $57($7)
	return (unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [336])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [336])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $49(*($1), ($0 + [32]))
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [192])
	*([0] + [4]) = $7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	*(($7 + [120])) = $1
	*(($7 + [128])) = (int_64)-1
	*(($7 + [136])) = (int_64)0
	*(($7 + [144])) = [0]
	*($7 + [112]) = $1
	*($7 + [104]) = $1
	*($7 + [152]) = $1
	*(($7 + [160])) = $1
	*(($7 + [168])) = (int_64)-1
	*(($7 + [176])) = [0]
	*(($7 + [180])) = [0]
	*(($7 + [184])) = [0]
	if ( ((int_64)$2 > (int_64)4923676291099525119) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-4421672816961650688) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)4298281224046116864) ){ goto $label$2 }
	*($7 + [92]) = [0]
	*($7 + [88]) = [1]
	*($7 + [16 align=4]) = *($7 + [88])
	CALL $44(($7 + [104]), ($7 + [16]))
	goto $label$2 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)4923676291099525120) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)7335585888509886464) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$2 }
	*($7 + [100]) = [0]
	*($7 + [96]) = [2]
	*($7 + [8 align=4]) = *($7 + [96])
	CALL $43(($7 + [104]), ($7 + [8]))
	goto $label$2 
	
.LABEL $label$6
	*($7 + [76]) = [0]
	*($7 + [72]) = [3]
	*($7 + [32 align=4]) = *($7 + [72])
	CALL $46(($7 + [104]), ($7 + [32]))
	goto $label$2 
	
.LABEL $label$5
	*($7 + [60]) = [0]
	*($7 + [56]) = [4]
	*($7 + [48 align=4]) = *($7 + [56])
	CALL $47(($7 + [104]), ($7 + [48]))
	goto $label$2 
	
.LABEL $label$4
	*($7 + [68]) = [0]
	*($7 + [64]) = [5]
	*($7 + [40 align=4]) = *($7 + [64])
	CALL $43(($7 + [104]), ($7 + [40]))
	goto $label$2 
	
.LABEL $label$3
	*($7 + [84]) = [0]
	*($7 + [80]) = [6]
	*($7 + [24 align=4]) = *($7 + [80])
	CALL $45(($7 + [104]), ($7 + [24]))
	
.LABEL $label$2
	$3 = *(($7 + [176]))
	if ( ($3 == 0) ){ goto $label$8 }
	$5 = ($7 + [180])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $56($4)
	
.LABEL $label$12
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$11 }
	$6 = *(($7 + [176]))
	goto $label$9 
	
.LABEL $label$10
	$6 = $3
	
.LABEL $label$9
	*($5) = $3
	CALL $56($6)
	
.LABEL $label$8
	$3 = *(($7 + [136]))
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($7 + [140])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$14 }
	
.LOOP $label$15:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	CALL $56($4)
	
.LABEL $label$16
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$15 }
	$6 = *(($7 + [136]))
	goto $label$13 
	
.LABEL $label$14
	$6 = $3
	
.LABEL $label$13
	*($5) = $3
	CALL $56($6)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [192])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [752])
	$3 = *($1 + [8])
	CALL eosio_assert([1], [224])
	$2 = (uint_64)$3 >> (uint_64)(int_64)8)
	$3 = (int_64)5918533
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [16])
	*(($1 + [8])) = (int_64)1515144452
	*($1) = (int_64)0
	CALL eosio_assert([1], [224])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [16])
	*(($1 + [32])) = (int_64)1397703940
	*($1 + [24]) = (int_64)500000000
	CALL eosio_assert(((int_64)$2 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)), [928])
	$5 = $7
	$4 = ($5 + [-48])
	*([0] + [4]) = $4
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = $5
	CALL $8($6, $1)
	CALL db_update_i64(*($1 + [52]), (int_64)0, $4, [48])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$11
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1648])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1696])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1760])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $56($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $56($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [24])) = (int_64)1398362884
	*($9 + [8]) = (int_64)0
	*($9) = (int_64)0
	*($9 + [16]) = (int_64)0
	CALL eosio_assert([1], [224])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$4
	CALL eosio_assert($7, [16])
	*(($9 + [40])) = [0]
	*($9 + [32]) = (int_64)0
	*($9 + [84]) = $5
	*($9 + [80]) = $5
	*($9 + [88]) = ($5 + $3)
	*($9 + [48]) = ($9 + [80])
	*($9 + [64]) = $9
	CALL $48(($9 + [64]), ($9 + [48]))
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($5)
	
.LABEL $label$9
	$6 = *(($9 + [8]))
	*(($9 + [76])) = *(($9 + [28]))
	*(($1 = (($9 + [64]) + [8]))) = *(($9 + [24]))
	*($9 + [68]) = *(($9 + [20]))
	$4 = *($9)
	*($9 + [64]) = *($9 + [16])
	CALL $60(($9 + [48]), ($9 + [32]))
	*((($9 + [80]) + [8])) = *($1)
	*($9 + [80]) = *($9 + [64])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$10 }
	$8 = *((*($1) + $8))
	
.LABEL $label$10
	CALL void $1((int_32 $4), (int_64 $6), (int_64 ($9 + [80])), (int_32 ($9 + [48])), (int_32 $8))
	if ( ((*($9 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL $56(*($9 + [56]))
	
.LABEL $label$11
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL $56(*(($9 + [40])))
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [96])
	return [1]
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [64])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = [0]
	$4 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $3)
	
.LABEL $label$1
	*($8 + [16]) = (int_64)1398362884
	*($8 + [8]) = (int_64)0
	CALL eosio_assert([1], [224])
	$5 = (int_64)5462355
	
.LOOP $label$5:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$6 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($6, [16])
	*($8 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [336])
	CALL memcpy(($8 + [8]), $4, [8])
	$1 = ($3 & [-8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [336])
	$6 = (($8 + [8]) + [8])
	CALL memcpy($6, ($4 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [336])
	$1 = (($8 + [8]) + [16])
	CALL memcpy($1, ($4 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($4)
	
.LABEL $label$8
	*(($3 = (($8 + [32]) + [8]))) = *($6)
	*($8 + [32]) = *($8 + [8])
	$5 = *($1)
	*((($8 + [48]) + [8])) = *($3)
	*($8 + [48]) = *($8 + [32])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$7 = *((*($1) + $7))
	
.LABEL $label$9
	CALL void $1((int_32 ($8 + [48])), (int_32 $5), (int_64 $7))
	*([0] + [4]) = ($8 + [64])
	return [1]
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [64])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = [0]
	$4 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $3)
	
.LABEL $label$1
	*(($8 + [24])) = (int_64)1398362884
	*($8 + [16]) = (int_64)0
	*($8 + [8]) = (int_64)0
	CALL eosio_assert([1], [224])
	$5 = (int_64)5462355
	
.LOOP $label$5:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$6 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($6, [16])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [336])
	CALL memcpy(($8 + [8]), $4, [8])
	$6 = ($3 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [336])
	$1 = (($8 + [8]) + [8])
	CALL memcpy($1, ($4 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [336])
	CALL memcpy((($8 + [8]) + [16]), ($4 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($4)
	
.LABEL $label$8
	*(($6 = (($8 + [32]) + [8]))) = *(($1 + [8]))
	$5 = *($8 + [8])
	*($8 + [32]) = *($1)
	*((($8 + [48]) + [8])) = *($6)
	*($8 + [48]) = *($8 + [32])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$7 = *((*($1) + $7))
	
.LABEL $label$9
	CALL void $1((int_32 $5), (int_64 ($8 + [48])), (int_32 $7))
	*([0] + [4]) = ($8 + [64])
	return [1]
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [336])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [336])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $52([2132], $0)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $55($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [288])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [288])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [288])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [288])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [288])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $55(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $59($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $56($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $56($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [304])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $55([64])
	$4 = CALL $7($6)
	*($6 + [48]) = $0
	CALL $10(($8 + [32]), $4)
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8
	*($8 + [16]) = $5)
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $9(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $56($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $7 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [224])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [16])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [224])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [16])
	*($0 + [40]) = (int_64)4602678819172646912
	return $0
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN2cx5token6createEv (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	CALL eosio_assert([1], [224])
	$6 = [0]
	$5 = (int_64)5918533
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$1 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	
.LABEL $label$1
	CALL eosio_assert($1, [16])
	$2 = *($0)
	CALL eosio_assert([1], [224])
	$5 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$1 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	
.LABEL $label$6
	CALL eosio_assert($1, [16])
	$6 = [0]
	*(($7 + [32])) = [0]
	*($7 + [16]) = (int_64)-1
	*($7 + [24]) = (int_64)0
	$5 = *($0)
	*($7) = $5
	*($7 + [8]) = (int_64)5918533
	$1 = CALL db_find_i64($5, (int_64)5918533, (int_64)-4157493845350678528, (int_64)5918533)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $6($7, $1) + [48]) == (int_32)$7), [48])
	goto $label$11 
	
.LABEL $label$12
	$6 = [1]
	
.LABEL $label$11
	CALL eosio_assert($6, [112])
	$3 = *($0)
	CALL eosio_assert(((int_64)*($7) == (int_64)CALL $fimport$3()), [160])
	$6 = CALL $55([64])
	$1 = CALL $7($6)
	*($6 + [48]) = $7
	*($6 + [8]) = (int_64)1515144452
	*($6) = (int_64)0
	*($6 + [16]) = $2
	*($6 + [24]) = (int_64)500000000
	*($6 + [32]) = (int_64)1397703940
	*($7 + [104]) = (($7 + [48]) + [48])
	*($7 + [100]) = ($7 + [48])
	*($7 + [96]) = ($7 + [48])
	CALL $8(($7 + [96]), $1)
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8
	$0 = CALL db_store_i64(*(($7 + [8])), (int_64)-4157493845350678528, $3, $5), ($7 + [48]), [48]
	*($6 + [52]) = $0)
	$1 = ($7 + [16])
	if ( (uint_64)($5 <= *($1)) ){ goto $label$13 }
	*($1) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$13
	*($7 + [96]) = $6
	$5 = (uint_64)*(($6 + [8])) >> (uint_64)(int_64)8
	*($7 + [48]) = $5)
	*($7 + [44]) = $0
	$4 = ($7 + [28])
	$1 = *($4)
	if ( ((uint_32)$1 >= (uint_32)*(($7 + [32]))) ){ goto $label$15 }
	*($1 + [8]) = $5
	*($1 + [16]) = $0
	*($7 + [96]) = [0]
	*($1) = $6
	*($4) = ($1 + [24])
	goto $label$14 
	
.LABEL $label$15
	CALL $9(($7 + [24]), ($7 + [96]), ($7 + [48]), ($7 + [44]))
	
.LABEL $label$14
	$6 = *($7 + [96])
	*($7 + [96]) = [0]
	if ( ($6 == 0) ){ goto $label$16 }
	CALL $56($6)
	
.LABEL $label$16
	$0 = *($7 + [24])
	if ( ($0 == 0) ){ goto $label$17 }
	$4 = ($7 + [28])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$19 }
	
.LOOP $label$20:
	$6 = ($6 + [-24])
	$1 = *($6)
	*($6) = [0]
	if ( ($1 == 0) ){ goto $label$21 }
	CALL $56($1)
	
.LABEL $label$21
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$20 }
	$6 = *(($7 + [24]))
	goto $label$18 
	
.LABEL $label$19
	$6 = $0
	
.LABEL $label$18
	*($4) = $0
	CALL $56($6)
	
.LABEL $label$17
	*([0] + [4]) = ($7 + [112])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN2cx5token5issueEyRKN5eosio5assetERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [112])
	*([0] + [4]) = $14
	$9 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [16])
	*($14 + [48]) = (int_64)-1
	$7 = [0]
	*($14 + [56]) = [0]
	*($14 + [32]) = *($0)
	$8 = ($2 + [8])
	$9 = (uint_64)*($8) >> (uint_64)(int_64)8
	*($14 + [40]) = $9)
	*(($14 + [60])) = [0]
	*(($14 + [64])) = [0]
	$4 = CALL $15(($14 + [32]), $9, [480])
	CALL require_auth(*($4 + [16]))
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$9 = (uint_64)*($8) >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$7 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [544])
	$9 = (int_64)0
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [576])
	CALL eosio_assert(((int_64)*($8) == (int_64)*($4 + [8])), [608])
	$10 = ($4 + [16])
	$13 = *($10)
	CALL _ZN2cx5token10addBalanceEyRKN5eosio5assetEy($0, $13, $2, $13)
	$5 = *($10)
	if ( ((int_64)$5 == (int_64)$1) ){ goto $label$11 }
	$6 = *($0)
	$11 = (int_64)59
	$10 = [640]
	$12 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$17 }
	$7 = *($10)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$7 = ($7 + [165])
	goto $label$15 
	
.LABEL $label$17
	$13 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$13
	$10 = ($10 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$12 }
	*(($10 = CALL $55([16]))) = $5
	*($10 + [8]) = $12
	$7 = ($10 + [16])
	*($14 + [104]) = $7
	*($14 + [80]) = $1
	*(($14 + [16])) = *($14 + [80])
	*($14 + [96]) = $10
	*($14 + [100]) = $7
	*($14 + [72]) = $5
	*($14 + [88]) = $2
	*($14 + [92]) = $3
	*((($14 + [8]) + [16])) = *($14 + [88])
	*($14 + [8]) = *($14 + [72])
	CALL $17($6, (int_64)-3617168760277827584, ($14 + [96]), ($14 + [8]))
	$10 = *($14 + [96])
	if ( ($10 == 0) ){ goto $label$11 }
	*($14 + [100]) = $10
	CALL $56($10)
	
.LABEL $label$11
	$2 = *($14 + [56])
	if ( ($2 == 0) ){ goto $label$18 }
	$0 = ($14 + [60])
	$10 = *($0)
	if ( ((int_32)$10 == (int_32)$2) ){ goto $label$20 }
	
.LOOP $label$21:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$22 }
	CALL $56($7)
	
.LABEL $label$22
	if ( ((int_32)$2 != (int_32)$10) ){ goto $label$21 }
	$10 = *(($14 + [56]))
	goto $label$19 
	
.LABEL $label$20
	$10 = $2
	
.LABEL $label$19
	*($0) = $2
	CALL $56($10)
	
.LABEL $label$18
	*([0] + [4]) = ($14 + [112])
}

int_32 .FUNC $15 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$0), [48])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157493845350678528, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $6($0, $5)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$0), [48])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC _ZN2cx5token10addBalanceEyRKN5eosio5assetEy (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$1 }
	$4 = *(($0 + [72]))
	$7 = *(($0 + [76]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	$11 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$3:
	if ( ((int_64)*(*($11)) == (int_64)$1) ){ goto $label$2 }
	$7 = $11
	$8 = ($11 + [-24])
	$11 = $8
	if ( ((int_32)($8 + $5) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$5 = ($0 + [48])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$11 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)$5), [48])
	if ( $11 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$11 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$4 }
	$11 = CALL $24($5, $11)
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)$5), [48])
	
.LABEL $label$5
	CALL eosio_assert([1], [656])
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)$5), [704])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$3()), [752])
	$10 = *($11)
	$8 = ($11 + [16])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($8)), [816])
	$9 = ((int_64)*($11 + [8]) + (int_64)*($2))
	*($11 + [8]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [864])
	CALL eosio_assert(((int_64)*($11 + [8]) < (int_64)4611686018427387904), [896])
	CALL eosio_assert(((int_64)$10 == (int_64)*($11)), [928])
	CALL eosio_assert([1], [288])
	CALL memcpy($12, $11, [8])
	CALL eosio_assert([1], [288])
	CALL memcpy(($12 | [8]), ($11 + [8]), [8])
	CALL eosio_assert([1], [288])
	CALL memcpy(($12 + [16]), $8, [8])
	CALL db_update_i64(*($11 + [28]), (int_64)0, $12, [24])
	$11 = ($0 + [64])
	if ( (uint_64)($10 <= *($11)) ){ goto $label$1 }
	*($11) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$3()), [160])
	*(($8 = CALL $55([40])) + [16]) = (int_64)1398362884
	*($8 + [8]) = (int_64)0
	CALL eosio_assert([1], [224])
	$6 = ($8 + [16])
	$7 = ($8 + [8])
	$10 = (int_64)5462355
	$11 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$4 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [16])
	*($8 + [24]) = $5
	*($8) = $1
	*(($7 + [12])) = *(($2 + [12]))
	*(($7 + [8])) = *(($2 + [8]))
	*(($7 + [4])) = *(($2 + [4]))
	*($7) = *($2)
	CALL eosio_assert([1], [288])
	CALL memcpy($12, $8, [8])
	CALL eosio_assert([1], [288])
	CALL memcpy(($12 | [8]), $7, [8])
	CALL eosio_assert([1], [288])
	CALL memcpy(($12 + [16]), $6, [8])
	$10 = *($8)
	$7 = CALL db_store_i64(*(($0 + [56])), (int_64)-6030912142679474176, $3, $10, $12, [24])
	*($8 + [28]) = $7
	$11 = ($0 + [64])
	if ( (uint_64)($10 <= *($11)) ){ goto $label$12 }
	*($11) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*($12 + [64]) = $8
	$10 = *($8)
	*($12) = $10
	*($12 + [56]) = $7
	$5 = ($0 + [76])
	$11 = *($5)
	if ( ((uint_32)$11 >= (uint_32)*(($0 + [80]))) ){ goto $label$14 }
	*($11 + [8]) = $10
	*($11 + [16]) = $7
	*($12 + [64]) = [0]
	*($11) = $8
	*($5) = ($11 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $25(($0 + [72]), ($12 + [64]), $12, ($12 + [56]))
	
.LABEL $label$13
	$11 = *($12 + [64])
	*($12 + [64]) = [0]
	if ( ($11 == 0) ){ goto $label$1 }
	CALL $56($11)
	
.LABEL $label$1
	$11 = [0]
	*(($12 + [32])) = [0]
	*($12 + [16]) = (int_64)-1
	*($12 + [24]) = (int_64)0
	$10 = *($0)
	*($12) = $10
	*($12 + [8]) = $1
	$8 = CALL db_find_i64($10, $1, (int_64)3607749779137757184, (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$8) < (int_32)[0]) ){ goto $label$18 }
	$11 = CALL $26($12, $8)
	CALL eosio_assert(((int_32)*($11 + [16]) == (int_32)$12), [48])
	CALL eosio_assert([1], [656])
	CALL eosio_assert(((int_32)*($11 + [16]) == (int_32)$12), [704])
	CALL eosio_assert(((int_64)*($12) == (int_64)CALL $fimport$3()), [752])
	$10 = *($11 + [8])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)$10), [816])
	$1 = ((int_64)*($11) + (int_64)*($2))
	*($11) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [864])
	CALL eosio_assert(((int_64)*($11) < (int_64)4611686018427387904), [896])
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$10) == (int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8)), [928])
	CALL eosio_assert([1], [288])
	CALL memcpy(($12 + [64]), $11, [8])
	CALL eosio_assert([1], [288])
	CALL memcpy((($12 + [64]) | [8]), ($11 + [8]), [8])
	CALL db_update_i64(*($11 + [20]), (int_64)0, ($12 + [64]), [16])
	$11 = ($12 + [16])
	if ( (uint_64)($10 <= *($11)) ){ goto $label$17 }
	*($11) = ((int_64)$10 + (int_64)1)
	$7 = *($12 + [24])
	if ( $7 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	CALL eosio_assert(((int_64)*($12) == (int_64)CALL $fimport$3()), [160])
	*(($8 = CALL $55([32])) + [8]) = (int_64)1398362884
	*($8) = (int_64)0
	CALL eosio_assert([1], [224])
	$0 = ($8 + [8])
	$10 = (int_64)5462355
	
.LOOP $label$20:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$21 }
	
.LOOP $label$22:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$22 }
	
.LABEL $label$21
	$7 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	CALL eosio_assert($7, [16])
	*($8 + [16]) = $12
	*(($11 = ($8 + [8]))) = *(($2 + [8]))
	*($8) = *($2)
	CALL eosio_assert([1], [288])
	CALL memcpy(($12 + [64]), $8, [8])
	CALL eosio_assert([1], [288])
	CALL memcpy((($12 + [64]) | [8]), $0, [8])
	$10 = (uint_64)*($11) >> (uint_64)(int_64)8
	$7 = CALL db_store_i64(*(($12 + [8])), (int_64)3607749779137757184, $3, $10), ($12 + [64]), [16]
	*($8 + [20]) = $7)
	$0 = ($12 + [16])
	if ( (uint_64)($10 <= *($0)) ){ goto $label$23 }
	*($0) = ((int_64)$10 + (int_64)1)
	
.LABEL $label$23
	*($12 + [56]) = $8
	$10 = (uint_64)*($11) >> (uint_64)(int_64)8
	*($12 + [64]) = $10)
	*($12 + [52]) = $7
	$0 = ($12 + [28])
	$11 = *($0)
	if ( ((uint_32)$11 >= (uint_32)*(($12 + [32]))) ){ goto $label$25 }
	*($11 + [8]) = $10
	*($11 + [16]) = $7
	*($12 + [56]) = [0]
	*($11) = $8
	*($0) = ($11 + [24])
	goto $label$24 
	
.LABEL $label$25
	CALL $27(($12 + [24]), ($12 + [56]), ($12 + [64]), ($12 + [52]))
	
.LABEL $label$24
	$11 = *($12 + [56])
	*($12 + [56]) = [0]
	if ( ($11 == 0) ){ goto $label$17 }
	CALL $56($11)
	
.LABEL $label$17
	$7 = *($12 + [24])
	if ( ($7 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$0 = ($12 + [28])
	$11 = *($0)
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$27 }
	
.LOOP $label$28:
	$11 = ($11 + [-24])
	$8 = *($11)
	*($11) = [0]
	if ( ($8 == 0) ){ goto $label$29 }
	CALL $56($8)
	
.LABEL $label$29
	if ( ((int_32)$7 != (int_32)$11) ){ goto $label$28 }
	$11 = *(($12 + [24]))
	goto $label$26 
	
.LABEL $label$27
	$11 = $7
	
.LABEL $label$26
	*($0) = $7
	CALL $56($11)
	
.LABEL $label$15
	*([0] + [4]) = ($12 + [80])
}

void .FUNC $17 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $55($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	*($9 + [52]) = [0]
	*((($9 + [24]) + [32])) = [0]
	*(($9 + [60])) = [0]
	$8 = *($8)
	$8 = *($3 + [20])
	$2 = ( *($8 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($9 + [52])
	
.LOOP $label$4:
	$8 = ($8 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($8 == 0) ){ goto $label$6 }
	CALL $18($2, $8)
	$2 = *(($9 + [56]))
	$8 = *(($9 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$8 = [0]
	
.LABEL $label$5
	*($9 + [84]) = $8
	*($9 + [80]) = $8
	*($9 + [88]) = $2
	*($9 + [64]) = ($9 + [80])
	*($9 + [72]) = $3
	CALL $19(($9 + [72]), ($9 + [64]))
	CALL $20(($9 + [80]), ($9 + [24]))
	$8 = *($9 + [80])
	CALL send_inline($8, (*($9 + [84]) - $8))
	$8 = *($9 + [80])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [84]) = $8
	CALL $56($8)
	
.LABEL $label$7
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$8 }
	*(($9 + [56])) = $8
	CALL $56($8)
	
.LABEL $label$8
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$9 }
	*(($9 + [44])) = $8
	CALL $56($8)
	
.LABEL $label$9
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$10 }
	*($9 + [12]) = $8
	CALL $56($8)
	
.LABEL $label$10
	*([0] + [4]) = ($9 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $59(($9 + [8]))
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC _ZN2cx5token4bindEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [352])
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$13($1), [384])
	CALL eosio_assert(CALL $fimport$13($2), [416])
	$3 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$5 = ($7 + [-24])
	$7 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$5), [48])
	$8 = ($0 + [16])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = ($0 + [16])
	$4 = CALL db_find_i64(*(($0 + [8])), *($8), (int_64)4298281224046116864, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $12($5, $4)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$5), [48])
	
.LABEL $label$3
	CALL eosio_assert(($7 == 0), [448])
	$6 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$3()), [160])
	*(($7 = CALL $55([32])) + [16]) = $5
	*($7 + [8]) = $2
	*($7) = $1
	CALL eosio_assert([1], [288])
	CALL memcpy(($9 + [16]), $7, [8])
	CALL eosio_assert([1], [288])
	CALL memcpy((($9 + [16]) | [8]), ($7 + [8]), [8])
	$1 = *($7)
	$8 = CALL db_store_i64(*($8), (int_64)4298281224046116864, $6, $1, ($9 + [16]), [16])
	*($7 + [20]) = $8
	$5 = ($0 + [24])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$5 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($9 + [8]) = $7
	$1 = *($7)
	*($9 + [16]) = $1
	*($9 + [4]) = $8
	$4 = ($0 + [36])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [40]))) ){ goto $label$7 }
	*($5 + [8]) = $1
	*($5 + [16]) = $8
	*($9 + [8]) = [0]
	*($5) = $7
	*($4) = ($5 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $13(($0 + [32]), ($9 + [8]), ($9 + [16]), ($9 + [4]))
	
.LABEL $label$6
	$7 = *($9 + [8])
	*($9 + [8]) = [0]
	if ( ($7 == 0) ){ goto $label$8 }
	CALL $56($7)
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [32])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [304])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $55([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [336])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [336])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $13(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $56($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $55(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $59($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $56($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $56($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1648])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1696])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1 + [8])
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( (uint_64)(((int_64)*(*($8) + [8]) ^ (int_64)$2) <= (int_64)256) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1760])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $56($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $56($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC _ZN2cx5token4sellERKN5eosio5assetEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [192])
	*([0] + [4]) = $16
	CALL require_auth(*($0))
	$9 = [0]
	$8 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$11 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [544])
	CALL eosio_assert(((int_64)*($1) > (int_64)0), [992])
	CALL eosio_assert(((int_64)*(($1 + [8])) == (int_64)1515144452), [608])
	*(($16 + [104])) = [0]
	*($16 + [88]) = (int_64)-1
	*($16 + [96]) = (int_64)0
	*($16 + [72]) = *($0)
	*($16 + [80]) = (int_64)5918533
	$6 = CALL $15(($16 + [72]), (int_64)5918533, [1904])
	$13 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($6 + [24])) * (float_64)(float_64))((float_64)1 - CALL pow((float_64))((float_64)1 - ((float_64)(CASTING float_64)(int_64 *($1)) / (float_64)(CASTING float_64)(int_64 ((int_64)*($6) + (int_64)100000000000)))), ((float_64)(float_64)1 / (float_64)*($6 + [40]))))
	CALL eosio_assert((uint_64)(((int_64)$13)) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [224])
	$11 = (int_64)5459781
	
.LOOP $label$7:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$8 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$11 = (int_64)0
	CALL __multi3($16, $13, (int_64)$13 >> (int_64)63), (int_64)70, (int_64)0)
	CALL eosio_assert($8, [16])
	$10 = *(($16 + [8]))
	$12 = *($16)
	CALL eosio_assert(( (uint_64)($12 <= (int_64)4611686018427387904) ? ((int_64)$10 < (int_64)0) : (int_64)($10 == 0) ), [1024])
	CALL eosio_assert(( ((uint_64)$12 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$10 > (int_64)-1) : ((int_64)$10 == (int_64)-1) ), [1056])
	CALL eosio_assert([1], [1088])
	CALL eosio_assert([1], [1104])
	CALL eosio_assert([1], [1136])
	$3 = ((int_64)$12 / (int_64)100)
	$4 = (int_64)
	CALL eosio_assert(((int_64)$4($13 - $3)) > (int_64)-4611686018427387904), [1184])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [1216])
	CALL _ZN2cx5token10subBalanceEyRKN5eosio5assetE($0, $2, $1)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)($16 + [72])), [704])
	CALL eosio_assert(((int_64)*($16 + [72]) == (int_64)CALL $fimport$3()), [752])
	$13 = *($6 + [8])
	CALL eosio_assert(((int_64)*(($1 + [8])) == (int_64)$13), [1136])
	$10 = (int_64)
	*($6) = $10(*($6) - *($1)))
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [1184])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [1216])
	CALL eosio_assert(((int_64)1397703940 == (int_64)*(($6 + [32]))), [1136])
	$10 = (int_64)
	*(($9 = ($6 + [24]))) = $10(*($9) - $3))
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [1184])
	CALL eosio_assert(((int_64)*($9) < (int_64)4611686018427387904), [1216])
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$13) == (int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8)), [928])
	*($16 + [40]) = (($16 + [112]) + [48])
	*($16 + [36]) = ($16 + [112])
	*($16 + [32]) = ($16 + [112])
	CALL $8(($16 + [32]), $6)
	CALL db_update_i64(*($6 + [52]), (int_64)0, ($16 + [112]), [48])
	$9 = ($16 + [88])
	if ( (uint_64)($13 <= *($9)) ){ goto $label$10 }
	*($9) = ((int_64)$13 + (int_64)1)
	
.LABEL $label$10
	$5 = *($0)
	$10 = (int_64)59
	$9 = [640]
	$12 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$16 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$6 = ($6 + [165])
	goto $label$14 
	
.LABEL $label$16
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$12
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$11 }
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [1824]
	$14 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$22 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$6 = ($6 + [165])
	goto $label$20 
	
.LABEL $label$22
	$13 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$18
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$14 = ((int_64)$13 | (int_64)$14)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$17 }
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [1840]
	$15 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$11 > (uint_64)(int_64)7) ){ goto $label$28 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$6 = ($6 + [165])
	goto $label$26 
	
.LABEL $label$28
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$24
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$23 }
	*(($16 + [24])) = [0]
	*($16 + [16]) = (int_64)0
	$9 = CALL strlen([1856])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$33 }
	*($16 + [16]) = ($9 << [1])
	$6 = (($16 + [16]) | [1])
	if ( $9 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$1 = (($9 + [16]) & [-16])
	$6 = CALL $55($1)
	*($16 + [16]) = ($1 | [1])
	*($16 + [24]) = $6
	*($16 + [20]) = $9
	
.LABEL $label$32
	CALL memcpy($6, [1856], $9)
	
.LABEL $label$31
	*(($6 + $9)) = [0]
	*((($16 + [112]) + [24])) = (int_64)1397703940
	*(($6 = (($16 + [112]) + [36]))) = *($16 + [20])
	*($16 + [120]) = $2
	$9 = ($16 + [24])
	*(($16 + [152])) = *($9)
	*($16 + [112]) = *($0)
	*($16 + [128]) = $3
	*($16 + [144]) = *($16 + [16])
	*($16 + [16]) = [0]
	*($16 + [20]) = [0]
	*($9) = [0]
	*($16 + [32]) = $14
	*($16 + [40]) = $15
	*($16 + [48]) = [0]
	*(($1 = ($16 + [52]))) = [0]
	*(($8 = (($16 + [32]) + [24]))) = [0]
	*(($9 = CALL $55([16]))) = $5
	*($9 + [8]) = $12
	*((($16 + [32]) + [32])) = [0]
	$7 = ($9 + [16])
	*($8) = $7
	*($1) = $7
	*($16 + [48]) = $9
	*($16 + [60]) = [0]
	*((($16 + [32]) + [36])) = [0]
	$9 = *($16 + [144])
	$6 = ( *($6) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($6 + [32])
	$11 = (CASTING uint_64)(uint_32 $6)
	$6 = ($16 + [60])
	
.LOOP $label$34:
	$9 = ($9 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$34 }
	if ( ($9 == 0) ){ goto $label$36 }
	CALL $18($6, $9)
	$6 = *(($16 + [64]))
	$9 = *(($16 + [60]))
	goto $label$35 
	
.LABEL $label$36
	$6 = [0]
	$9 = [0]
	
.LABEL $label$35
	*($16 + [180]) = $9
	*($16 + [176]) = $9
	*($16 + [184]) = $6
	*($16 + [160]) = ($16 + [176])
	*($16 + [168]) = ($16 + [112])
	CALL $38(($16 + [168]), ($16 + [160]))
	CALL $20(($16 + [176]), ($16 + [32]))
	$9 = *($16 + [176])
	CALL send_inline($9, (*($16 + [180]) - $9))
	$9 = *($16 + [176])
	if ( ($9 == 0) ){ goto $label$37 }
	*($16 + [180]) = $9
	CALL $56($9)
	
.LABEL $label$37
	$9 = *($16 + [60])
	if ( ($9 == 0) ){ goto $label$38 }
	*(($16 + [64])) = $9
	CALL $56($9)
	
.LABEL $label$38
	$9 = *($16 + [48])
	if ( ($9 == 0) ){ goto $label$39 }
	*(($16 + [52])) = $9
	CALL $56($9)
	
.LABEL $label$39
	if ( ((*(($16 + [144])) & [1]) == 0) ){ goto $label$40 }
	CALL $56(*(($16 + [152])))
	
.LABEL $label$40
	if ( ((*($16 + [16]) & [1]) == 0) ){ goto $label$41 }
	CALL $56(*(($16 + [24])))
	
.LABEL $label$41
	$2 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [640]
	$12 = (int_64)0
	
.LOOP $label$42:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$47 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$6 = ($6 + [165])
	goto $label$45 
	
.LABEL $label$47
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$44
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$43
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$42 }
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [1824]
	$14 = (int_64)0
	
.LOOP $label$48:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$53 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$6 = ($6 + [165])
	goto $label$51 
	
.LABEL $label$53
	$13 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$52
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$50
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$49
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$14 = ((int_64)$13 | (int_64)$14)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$48 }
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [1840]
	$15 = (int_64)0
	
.LOOP $label$54:
	if ( ((uint_64)$11 > (uint_64)(int_64)7) ){ goto $label$59 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$58 }
	$6 = ($6 + [165])
	goto $label$57 
	
.LABEL $label$59
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$58
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$57
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$56
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$55
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$54 }
	*(($16 + [24])) = [0]
	*($16 + [16]) = (int_64)0
	$9 = CALL strlen([1872])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$62 }
	*($16 + [16]) = ($9 << [1])
	$6 = (($16 + [16]) | [1])
	if ( $9 ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$62
	$1 = (($9 + [16]) & [-16])
	$6 = CALL $55($1)
	*($16 + [16]) = ($1 | [1])
	*($16 + [24]) = $6
	*($16 + [20]) = $9
	
.LABEL $label$61
	CALL memcpy($6, [1872], $9)
	
.LABEL $label$60
	*(($6 + $9)) = [0]
	*((($16 + [112]) + [24])) = (int_64)1397703940
	*(($6 = (($16 + [112]) + [36]))) = *($16 + [20])
	*($16 + [120]) = (int_64)7864382610577073440
	$9 = ($16 + [24])
	*(($16 + [152])) = *($9)
	*($16 + [112]) = *($0)
	*($16 + [128]) = $4
	*($16 + [144]) = *($16 + [16])
	*($16 + [16]) = [0]
	*($16 + [20]) = [0]
	*($9) = [0]
	*($16 + [32]) = $14
	*($16 + [40]) = $15
	*(($9 = CALL $55([16]))) = $2
	*($9 + [8]) = $12
	*((($16 + [32]) + [32])) = [0]
	$1 = ($9 + [16])
	*((($16 + [32]) + [24])) = $1
	*(($16 + [52])) = $1
	*($16 + [48]) = $9
	*($16 + [60]) = [0]
	*((($16 + [32]) + [36])) = [0]
	$9 = *($16 + [144])
	$6 = ( *($6) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($6 + [32])
	$11 = (CASTING uint_64)(uint_32 $6)
	$6 = ($16 + [60])
	
.LOOP $label$63:
	$9 = ($9 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$63 }
	if ( ($9 == 0) ){ goto $label$65 }
	CALL $18($6, $9)
	$6 = *(($16 + [64]))
	$9 = *(($16 + [60]))
	goto $label$64 
	
.LABEL $label$65
	$6 = [0]
	$9 = [0]
	
.LABEL $label$64
	*($16 + [180]) = $9
	*($16 + [176]) = $9
	*($16 + [184]) = $6
	*($16 + [160]) = ($16 + [176])
	*($16 + [168]) = ($16 + [112])
	CALL $38(($16 + [168]), ($16 + [160]))
	CALL $20(($16 + [176]), ($16 + [32]))
	$9 = *($16 + [176])
	CALL send_inline($9, (*($16 + [180]) - $9))
	$9 = *($16 + [176])
	if ( ($9 == 0) ){ goto $label$66 }
	*($16 + [180]) = $9
	CALL $56($9)
	
.LABEL $label$66
	$9 = *($16 + [60])
	if ( ($9 == 0) ){ goto $label$67 }
	*(($16 + [64])) = $9
	CALL $56($9)
	
.LABEL $label$67
	$9 = *($16 + [48])
	if ( ($9 == 0) ){ goto $label$68 }
	*(($16 + [52])) = $9
	CALL $56($9)
	
.LABEL $label$68
	if ( ((*(($16 + [144])) & [1]) == 0) ){ goto $label$69 }
	CALL $56(*(($16 + [152])))
	
.LABEL $label$69
	if ( ((*($16 + [16]) & [1]) == 0) ){ goto $label$70 }
	CALL $56(*(($16 + [24])))
	
.LABEL $label$70
	$1 = *($16 + [96])
	if ( ($1 == 0) ){ goto $label$71 }
	$8 = ($16 + [100])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$73 }
	
.LOOP $label$74:
	$9 = ($9 + [-24])
	$6 = *($9)
	*($9) = [0]
	if ( ($6 == 0) ){ goto $label$75 }
	CALL $56($6)
	
.LABEL $label$75
	if ( ((int_32)$1 != (int_32)$9) ){ goto $label$74 }
	$9 = *(($16 + [96]))
	goto $label$72 
	
.LABEL $label$73
	$9 = $1
	
.LABEL $label$72
	*($8) = $1
	CALL $56($9)
	
.LABEL $label$71
	*([0] + [4]) = ($16 + [192])
	return (unreachable)
	
.LABEL $label$30
	CALL $57(($16 + [16]))
	
.LABEL $label$29
	CALL $57(($16 + [16]))
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1648])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1696])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1760])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $56($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $56($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC $35 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [48])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $26($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [48])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC _ZN2cx5token10subBalanceEyRKN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$1 }
	$3 = ($0 + [48])
	$5 = CALL $33($3, $1, [1552])
	CALL eosio_assert(((int_64)*($5 + [8]) >= (int_64)*($2)), [1584])
	if ( ((int_64)*($5 + [8]) != (int_64)*($2)) ){ goto $label$2 }
	CALL $34($3, $5)
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$3), [704])
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$3()), [752])
	$4 = *($5)
	$6 = ($5 + [16])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($6)), [1136])
	$7 = (int_64)
	*(($3 = ($5 + [8]))) = $7(*($3) - *($2)))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [1184])
	CALL eosio_assert(((int_64)*($3) < (int_64)4611686018427387904), [1216])
	CALL eosio_assert(((int_64)$4 == (int_64)*($5)), [928])
	CALL eosio_assert([1], [288])
	CALL memcpy($8, $5, [8])
	CALL eosio_assert([1], [288])
	CALL memcpy(($8 | [8]), $3, [8])
	CALL eosio_assert([1], [288])
	CALL memcpy(($8 + [16]), $6, [8])
	CALL db_update_i64(*($5 + [28]), (int_64)0, $8, [24])
	$5 = ($0 + [64])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$1 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*(($8 + [32])) = [0]
	*($8 + [8]) = $1
	*($8 + [16]) = (int_64)-1
	*($8 + [24]) = (int_64)0
	*($8) = *($0)
	$0 = CALL $35($8, (uint_64)*($2 + [8]) >> (uint_64)(int_64)8), [1616]
	CALL eosio_assert(((int_64)*($0)) >= (int_64)*($2)), [1584])
	if ( ((int_64)*($0) != (int_64)*($2)) ){ goto $label$5 }
	CALL $36($8, $0)
	$5 = *($8 + [24])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$8), [704])
	CALL eosio_assert(((int_64)*($8) == (int_64)CALL $fimport$3()), [752])
	$1 = *($0 + [8])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)$1), [1136])
	$4 = (int_64)
	*($0) = $4(*($0) - *($2)))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [1184])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [1216])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [928])
	CALL eosio_assert([1], [288])
	CALL memcpy(($8 + [48]), $0, [8])
	CALL eosio_assert([1], [288])
	CALL memcpy((($8 + [48]) | [8]), ($0 + [8]), [8])
	CALL db_update_i64(*($0 + [20]), (int_64)0, ($8 + [48]), [16])
	$0 = ($8 + [16])
	if ( (uint_64)($1 <= *($0)) ){ goto $label$6 }
	*($0) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$6
	$5 = *($8 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$3 = ($8 + [28])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $56($2)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($8 + [24]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $5
	
.LABEL $label$7
	*($3) = $5
	CALL $56($0)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
}

int_32 .FUNC $33 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$0), [48])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $24($0, $5)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$0), [48])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC _ZN2cx5token5grantEyRKN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [176])
	*([0] + [4]) = $16
	$11 = [0]
	$6 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$10 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [544])
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [992])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)1397703940), [608])
	*(($16 + [104])) = [0]
	$10 = (int_64)5918533
	*($16 + [80]) = (int_64)5918533
	*($16 + [88]) = (int_64)-1
	*($16 + [96]) = (int_64)0
	*($16 + [72]) = *($0)
	$8 = CALL $15(($16 + [72]), (int_64)5918533, [1312])
	$9 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 ((int_64)*($8) + (int_64)100000000000)) * (float_64)((float_64)CALL pow(((float_64)((float_64)(CASTING float_64)(int_64 *($2)) / (float_64)(CASTING float_64)(int_64 *($8 + [24]))) + (float_64)(float_64)1), *($8 + [40])) + (float_64)(float_64)-1)))
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [224])
	
.LOOP $label$7:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$7 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	CALL __multi3(($16 + [8]), $9, (int_64)$9 >> (int_64)63), (int_64)10, (int_64)0)
	CALL eosio_assert($7, [16])
	$10 = *((($16 + [8]) + [8]))
	$14 = *($16 + [8])
	CALL eosio_assert(( (uint_64)($14 <= (int_64)4611686018427387904) ? ((int_64)$10 < (int_64)0) : (int_64)($10 == 0) ), [1024])
	CALL eosio_assert(( ((uint_64)$14 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$10 > (int_64)-1) : ((int_64)$10 == (int_64)-1) ), [1056])
	*($16 + [64]) = (int_64)1515144452
	CALL eosio_assert([1], [1088])
	CALL eosio_assert([1], [1104])
	$10 = ((int_64)$14 / (int_64)100)
	*($16 + [56]) = $10
	*($16 + [48]) = (int_64)1515144452
	CALL eosio_assert([1], [1136])
	$10 = (int_64)
	*($16 + [40]) = $10($9 - $10))
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [1184])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [1216])
	$3 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$10 }
	$11 = ($6 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$11:
	if ( ((int_64)*(*($11)) == (int_64)$1) ){ goto $label$10 }
	$6 = $11
	$7 = ($11 + [-24])
	$11 = $7
	if ( ((int_32)($7 + $4) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$11 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$25 }
	$7 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$11), [48])
	if ( $7 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)4298281224046116864, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$23 }
	$7 = CALL $12($11, $7)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$11), [48])
	
.LABEL $label$24
	*(($16 + [120])) = [0]
	*($16 + [112]) = (int_64)0
	$11 = CALL strlen([1248])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$22 }
	*($16 + [112]) = ($11 << [1])
	$6 = (($16 + [112]) | [1])
	if ( $11 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$5 = *($0)
	$10 = (int_64)0
	$12 = (int_64)59
	$11 = [640]
	$13 = (int_64)0
	
.LOOP $label$26:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$31 }
	$7 = *($11)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$7 = ($7 + [165])
	goto $label$29 
	
.LABEL $label$31
	$14 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$27
	$11 = ($11 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$26 }
	$10 = (int_64)0
	$12 = (int_64)59
	$11 = [1296]
	$15 = (int_64)0
	
.LOOP $label$32:
	if ( ((uint_64)$10 > (uint_64)(int_64)3) ){ goto $label$37 }
	$7 = *($11)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$7 = ($7 + [165])
	goto $label$35 
	
.LABEL $label$37
	$14 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$33
	$11 = ($11 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$32 }
	*(($7 = ($16 + [136]))) = [0]
	*($16 + [32]) = (int_64)7864382610577073440
	*($16 + [24]) = $1
	*($16 + [128]) = (int_64)0
	*($16 + [120]) = $15
	*($16 + [112]) = $5
	*(($11 = CALL $55([16]))) = $5
	*($11 + [8]) = $13
	*(($6 = ($16 + [144]))) = [0]
	$4 = ($11 + [16])
	*($7) = $4
	*(($16 + [132])) = $4
	*($16 + [128]) = $11
	*($16 + [140]) = [0]
	*(($16 + [148])) = [0]
	CALL $18(($16 + [140]), [16])
	$11 = *($16 + [140])
	$7 = (*($6) - $11)
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [288])
	CALL memcpy($11, ($16 + [24]), [8])
	CALL eosio_assert(((int_32)($7 + [-8]) > (int_32)[7]), [288])
	CALL memcpy(($11 + [8]), (($16 + [24]) + [8]), [8])
	CALL $20(($16 + [160]), ($16 + [112]))
	$11 = *($16 + [160])
	CALL send_inline($11, (*($16 + [164]) - $11))
	$11 = *($16 + [160])
	if ( ($11 == 0) ){ goto $label$38 }
	*($16 + [164]) = $11
	CALL $56($11)
	
.LABEL $label$38
	$11 = *($16 + [140])
	if ( ($11 == 0) ){ goto $label$39 }
	*(($16 + [144])) = $11
	CALL $56($11)
	
.LABEL $label$39
	$11 = *($16 + [128])
	if ( ($11 == 0) ){ goto $label$40 }
	*(($16 + [132])) = $11
	CALL $56($11)
	
.LABEL $label$40
	*(($16 + [120])) = [0]
	*($16 + [112]) = (int_64)0
	$11 = CALL strlen([1248])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$19 }
	*($16 + [112]) = ($11 << [1])
	$7 = (($16 + [112]) | [1])
	if ( $11 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$22
	$4 = (($11 + [16]) & [-16])
	$6 = CALL $55($4)
	*($16 + [112]) = ($4 | [1])
	*($16 + [120]) = $6
	*($16 + [116]) = $11
	
.LABEL $label$21
	CALL memcpy($6, [1248], $11)
	
.LABEL $label$20
	*(($6 + $11)) = [0]
	CALL _ZN2cx5token5issueEyRKN5eosio5assetERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($0, $1, ($16 + [40]), ($16 + [112]))
	if ( ((*($16 + [112]) & [1]) == 0) ){ goto $label$41 }
	CALL $56(*($16 + [120]))
	
.LABEL $label$41
	$10 = *($7 + [8])
	*(($16 + [120])) = [0]
	*($16 + [112]) = (int_64)0
	$11 = CALL strlen([1264])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$44 }
	*($16 + [112]) = ($11 << [1])
	$7 = (($16 + [112]) | [1])
	if ( $11 ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$44
	$6 = (($11 + [16]) & [-16])
	$7 = CALL $55($6)
	*($16 + [112]) = ($6 | [1])
	*($16 + [120]) = $7
	*($16 + [116]) = $11
	
.LABEL $label$43
	CALL memcpy($7, [1264], $11)
	
.LABEL $label$42
	*(($7 + $11)) = [0]
	CALL _ZN2cx5token5issueEyRKN5eosio5assetERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($0, $10, ($16 + [56]), ($16 + [112]))
	if ( ((*($16 + [112]) & [1]) == 0) ){ goto $label$16 }
	CALL $56(*($16 + [120]))
	goto $label$16 
	
.LABEL $label$19
	$6 = (($11 + [16]) & [-16])
	$7 = CALL $55($6)
	*($16 + [112]) = ($6 | [1])
	*($16 + [120]) = $7
	*($16 + [116]) = $11
	
.LABEL $label$18
	CALL memcpy($7, [1248], $11)
	
.LABEL $label$17
	*(($7 + $11)) = [0]
	CALL _ZN2cx5token5issueEyRKN5eosio5assetERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($0, $1, ($16 + [40]), ($16 + [112]))
	if ( ((*($16 + [112]) & [1]) == 0) ){ goto $label$45 }
	CALL $56(*($16 + [120]))
	
.LABEL $label$45
	*(($16 + [120])) = [0]
	*($16 + [112]) = (int_64)0
	$11 = CALL strlen([1264])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$48 }
	*($16 + [112]) = ($11 << [1])
	$7 = (($16 + [112]) | [1])
	if ( $11 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	$6 = (($11 + [16]) & [-16])
	$7 = CALL $55($6)
	*($16 + [112]) = ($6 | [1])
	*($16 + [120]) = $7
	*($16 + [116]) = $11
	
.LABEL $label$47
	CALL memcpy($7, [1264], $11)
	
.LABEL $label$46
	*(($7 + $11)) = [0]
	CALL _ZN2cx5token5issueEyRKN5eosio5assetERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($0, (int_64)7864382610577073440, ($16 + [56]), ($16 + [112]))
	if ( ((*($16 + [112]) & [1]) == 0) ){ goto $label$16 }
	CALL $56(*($16 + [120]))
	
.LABEL $label$16
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)($16 + [72])), [704])
	CALL eosio_assert(((int_64)*($16 + [72]) == (int_64)CALL $fimport$3()), [752])
	$10 = *($8 + [8])
	CALL eosio_assert(((int_64)1515144452 == (int_64)$10), [816])
	$14 = ((int_64)*($8) + (int_64)$9)
	*($8) = $14
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [864])
	CALL eosio_assert(((int_64)*($8) < (int_64)4611686018427387904), [896])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*(($8 + [32]))), [816])
	$14 = ((int_64)*($11) + (int_64)*($2))
	*(($11 = ($8 + [24]))) = $14
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [864])
	CALL eosio_assert(((int_64)*($11) < (int_64)4611686018427387904), [896])
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$10) == (int_64)(uint_64)*($8 + [8]) >> (uint_64)(int_64)8)), [928])
	*($16 + [32]) = (($16 + [112]) + [48])
	*($16 + [28]) = ($16 + [112])
	*($16 + [24]) = ($16 + [112])
	CALL $8(($16 + [24]), $8)
	CALL db_update_i64(*($8 + [52]), (int_64)0, ($16 + [112]), [48])
	$11 = ($16 + [88])
	if ( (uint_64)($10 <= *($11)) ){ goto $label$49 }
	*($11) = ((int_64)$10 + (int_64)1)
	
.LABEL $label$49
	$6 = *($16 + [96])
	if ( ($6 == 0) ){ goto $label$50 }
	$8 = ($16 + [100])
	$11 = *($8)
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$52 }
	
.LOOP $label$53:
	$11 = ($11 + [-24])
	$7 = *($11)
	*($11) = [0]
	if ( ($7 == 0) ){ goto $label$54 }
	CALL $56($7)
	
.LABEL $label$54
	if ( ((int_32)$6 != (int_32)$11) ){ goto $label$53 }
	$11 = *(($16 + [96]))
	goto $label$51 
	
.LABEL $label$52
	$11 = $6
	
.LABEL $label$51
	*($8) = $6
	CALL $56($11)
	
.LABEL $label$50
	*([0] + [4]) = ($16 + [176])
	return (unreachable)
	
.LABEL $label$15
	CALL $57(($16 + [112]))
	
.LABEL $label$14
	CALL $57(($16 + [112]))
	
.LABEL $label$13
	CALL $57(($16 + [112]))
	
.LABEL $label$12
	CALL $57(($16 + [112]))
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC _ZN2cx5token8transferEyyRKN5eosio5assetERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [1392])
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$13($2), [1424])
	$7 = *($3 + [8])
	$6 = [0]
	*(($9 + [40])) = [0]
	*($9 + [24]) = (int_64)-1
	*($9 + [32]) = (int_64)0
	*($9 + [8]) = *($0)
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	*($9 + [16]) = $7)
	$5 = CALL $15(($9 + [8]), $7, [1456])
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [544])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [1488])
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)*($5 + [8])), [608])
	$8 = *($4)
	CALL eosio_assert((( *($4 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) ) <= [257]), [1520])
	CALL _ZN2cx5token10subBalanceEyRKN5eosio5assetE($0, $1, $3)
	CALL _ZN2cx5token10addBalanceEyRKN5eosio5assetEy($0, $2, $3, $1)
	$6 = *($9 + [32])
	if ( ($6 == 0) ){ goto $label$6 }
	$0 = ($9 + [36])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = ($8 + [-24])
	$3 = *($8)
	*($8) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	CALL $56($3)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$9 }
	$8 = *(($9 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$8 = $6
	
.LABEL $label$7
	*($0) = $6
	CALL $56($8)
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $55(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $56($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $59 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [10640])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [10624]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [10656]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [2128])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $18($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [336])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [288])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $23(*($1), ($0 + [32]))
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $53($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10528])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10614]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10616])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10614]) = [1]
	$7 = ($7 << [16])
	*([0] + [10616]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10616])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10616]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10614]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10614]) = [1]
	$3 = ($3 << [16])
	*([0] + [10616]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10616])
	
.LABEL $label$8
	*([0] + [10616]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10516])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10324]
	$1 = (((int_32)$2 * (int_32)[12]) + [10324])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10620])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $56 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $57 (int_32 $0)
{
	CALL abort()
	(unreachable)
}