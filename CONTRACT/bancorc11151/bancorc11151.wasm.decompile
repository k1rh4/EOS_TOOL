(data (i32.const 8265) "failed to allocate pages\00\00")
(data (i32.const 8304) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 8384) "%f\00prev_fee\00")
(data (i32.const 8400) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 8416) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 8432) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 8448) " \00")
(data (i32.const 8450) ",\00")
(data (i32.const 8452) ";\00")
(data (i32.const 8454) ":\00")
(data (i32.const 8456) "convert\00")
(data (i32.const 8464) "maximum fee must be lower or equal to \00")
(data (i32.const 8503) "fee must be lower or equal to the maximum fee\00")
(data (i32.const 8549) "settings already defined\00")
(data (i32.const 8574) "settings undefined\00")
(data (i32.const 8593) "{\00")
(data (i32.const 8595) "version\00")
(data (i32.const 8603) "1.1\00")
(data (i32.const 8607) "etype\00")
(data (i32.const 8613) "conversion_fee_update\00")
(data (i32.const 8635) "new_fee\00")
(data (i32.const 8643) "}\n\00")
(data (i32.const 8646) "ratio must be between 1 and \00")
(data (i32.const 8675) "cannot update the reserve contract name\00")
(data (i32.const 8715) "total ratio cannot exceed \00")
(data (i32.const 8742) "1.4\00")
(data (i32.const 8746) "price_data\00")
(data (i32.const 8757) "smart_supply\00")
(data (i32.const 8770) "reserve_contract\00")
(data (i32.const 8787) "reserve_symbol\00")
(data (i32.const 8802) "reserve_balance\00")
(data (i32.const 8818) "reserve_ratio\00")
(data (i32.const 8832) "invalid quantity\00")
(data (i32.const 8849) "zero quantity is disallowed\00")
(data (i32.const 8877) "invalid memo format\00")
(data (i32.const 8897) "converter is disabled\00")
(data (i32.const 8919) "converter can only receive from network contract\00")
(data (i32.const 8968) "wrong converter\00")
(data (i32.const 8984) "cannot convert to self\00")
(data (i32.const 9007) "\'to\' token purchases disabled\00")
(data (i32.const 9037) "unknown \'from\' contract\00")
(data (i32.const 9061) "destroy on conversion\00")
(data (i32.const 9083) "smart token must be final currency\00")
(data (i32.const 9118) "1.3\00")
(data (i32.const 9122) "conversion\00")
(data (i32.const 9133) "memo\00")
(data (i32.const 9138) "from_contract\00")
(data (i32.const 9152) "from_symbol\00")
(data (i32.const 9164) "to_contract\00")
(data (i32.const 9176) "to_symbol\00")
(data (i32.const 9186) "amount\00")
(data (i32.const 9193) "return\00")
(data (i32.const 9200) "conversion_fee\00")
(data (i32.const 9215) "reserve not found\00")
(data (i32.const 9233) "unable to find key\00")
(data (i32.const 9252) "must have entry for token (claim token first)\00")
(data (i32.const 9298) "below min return\00")
(data (i32.const 9315) "setup\00")
(data (i32.const 9321) "string is too long to be a valid name\00")
(data (i32.const 9359) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9426) "character is not in allowed character set for names\00")
(data (i32.const 9478) "string is too long to be a valid symbol_code\00")
(data (i32.const 9523) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9576) "write\00")
(data (i32.const 9582) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9631) "invalid symbol name\00")
(data (i32.const 9651) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9702) "error reading iterator\00")
(data (i32.const 9725) "object passed to modify is not in multi_index\00")
(data (i32.const 9771) "cannot modify objects in table of another contract\00")
(data (i32.const 9822) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9881) "cannot create objects in table of another contract\00")
(data (i32.const 9932) "singleton does not exist\00")
(data (i32.const 9957) "get\00")
(data (i32.const 9961) "read\00")
(data (i32.const 0) "\f0&\00\00")
(import "env" "abort" (func $fimport$0))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$5 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$8 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$11 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$15 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$16 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$18 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$19 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$21 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$22 (param i64 i64) (result i32)))
(import "env" "require_auth" (func $fimport$23 (param i64)))
(import "env" "db_find_i64" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "prints" (func $fimport$25 (param i32)))
(import "env" "printui" (func $fimport$26 (param i64)))
(import "env" "current_receiver" (func $fimport$27 (result i64)))
(import "env" "db_store_i64" (func $fimport$28 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$30 (param i32 i32) (result i32)))
(import "env" "printdf" (func $fimport$31 (param f64)))
(import "env" "printn" (func $fimport$32 (param i64)))
(import "env" "send_inline" (func $fimport$33 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$34 (result i32)))
(import "env" "read_action_data" (func $fimport$35 (param i32 i32) (result i32)))
(import "env" "eosio_assert_code" (func $fimport$36 (param i32 i64)))
(import "env" "db_get_i64" (func $fimport$37 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$38 (param i32 i64 i32 i32)))
(export "apply" (func $82))
(table $0 7 7 anyfunc)
(elem (i32.const 1) $21 $23 $81 $54 $61 $59)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 9966))
(global $global$2 i32 (i32.const 9966))


void .FUNC $98 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $9(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $11($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $11($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9576])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9576])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2) = *(($1 + [16]))
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9576])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [13]) = *($1 + [24])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert([0], [9576])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($4, ($2 + [13]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	*($2 + [14]) = *($1 + [25])
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert([0], [9576])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [32])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9576])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2 + [15]) = *($1 + [40])
	if ( ((int_32)(*($6) - $4) > (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert([0], [9576])
	$4 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [48])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9576])
	$4 = *($3)
	
.LABEL $label$8
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$1 = ($1 + [56])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [9576])
	$4 = *(($0 + [4]))
	
.LABEL $label$9
	CALL memcpy($4, $1, [8])
	*(($1 = ($0 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $94 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [88]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$5
	CALL memcpy(($3 + [88]), $2, [8])
	*($3 + [80]) = (int_64)0
	*($3 + [72]) = (int_64)0
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$6
	CALL memcpy(($3 + [72]), $5, [8])
	*($3 + [32]) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$7
	CALL memcpy(($3 + [32]), $5, [8])
	*((($3 + [72]) + [8])) = *($3 + [32])
	$5 = ($2 + [24])
	if ( ((int_32)$6 != (int_32)[24]) ){ goto $label$8 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$8
	$6 = ($2 + $4)
	CALL memcpy(($3 + [64]), $5, [8])
	$5 = ($2 + [32])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$9 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$9
	CALL memcpy(($3 + [32]), $5, [1])
	$4 = *($3 + [32])
	*(($3 + [56])) = $6
	$7 = *((($3 + [72]) + [8]))
	*((($3 + [16]) + [8])) = $7
	*(($3 + [8])) = $7
	*($3 + [48]) = $2
	*(($3 + [52])) = ($2 + [33])
	*($3 + [40]) = $1
	*($3 + [32]) = $0
	$0 = *($3 + [72])
	*($3 + [16]) = $0
	*($3) = $0
	CALL $61(($3 + [32]), *($3 + [88]), $3, *($3 + [64]), ((int_32)$4 != (int_32)[0]))
	$global$0 = ($3 + [96])
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9576])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9576])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9576])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9576])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9576])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9961])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9961])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2) = (int_64)0
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9961])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($1 + [16])) = *($2)
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($0 + [8])
	if ( ((int_32)*($5) != (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert([0], [9961])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy(($2 + [13]), $4, [1])
	$4 = (*($3) + [1])
	*($3) = $4
	*(($1 + [24])) = ((int_32)*($2 + [13]) != (int_32)[0])
	if ( ((int_32)*($5) != (int_32)$4) ){ goto $label$5 }
	CALL eosio_assert([0], [9961])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [14]), $4, [1])
	$4 = (*($3) + [1])
	*(($3 = ($0 + [4]))) = $4
	*(($1 + [25])) = ((int_32)*($2 + [14]) != (int_32)[0])
	$5 = ($1 + [32])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9961])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	if ( ((int_32)*($6) != (int_32)$4) ){ goto $label$7 }
	CALL eosio_assert([0], [9961])
	$4 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy(($2 + [15]), $4, [1])
	$4 = (*($3) + [1])
	*(($3 = ($0 + [4]))) = $4
	*(($1 + [40])) = ((int_32)*($2 + [15]) != (int_32)[0])
	$5 = ($1 + [48])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9961])
	$4 = *($3)
	
.LABEL $label$8
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$1 = ($1 + [56])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [9961])
	$4 = *(($0 + [4]))
	
.LABEL $label$9
	CALL memcpy($1, $4, [8])
	*(($1 = ($0 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$1 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy(($2 + [13]), $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	*($3) = ((int_32)*($2 + [13]) != (int_32)[0])
	$4 = *($0)
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)*($0 + [8]) != (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert([0], [9961])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy(($2 + [14]), $5, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	*(($4 + [1])) = ((int_32)*($2 + [14]) != (int_32)[0])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)*($0 + [8]) != (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert([0], [9961])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [15]), $5, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	*(($4 + [2])) = ((int_32)*($2 + [15]) != (int_32)[0])
	$0 = ($4 + [8])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9961])
	$4 = *(($1 + [4]))
	
.LABEL $label$4
	CALL memcpy($0, $4, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = *($0)
	$3 = ($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $5, [8])
	*(($0 + [16])) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$1 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$1) ){ goto $label$5 }
	CALL eosio_assert([0], [9961])
	$1 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [7]), $1, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	*(($0 + [32])) = ((int_32)*($2 + [7]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $92 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [104]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$5
	CALL memcpy(($3 + [104]), $2, [8])
	*($3 + [96]) = (int_64)0
	*($3 + [88]) = (int_64)0
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$6
	CALL memcpy(($3 + [88]), $5, [8])
	*($3 + [32]) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$7
	CALL memcpy(($3 + [32]), $5, [8])
	*((($3 + [88]) + [8])) = *($3 + [32])
	$5 = ($2 + [24])
	if ( ((int_32)$4 != (int_32)[24]) ){ goto $label$8 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$8
	CALL memcpy(($3 + [32]), $5, [1])
	$5 = ($2 + [25])
	$6 = *($3 + [32])
	if ( ((int_32)$4 != (int_32)[25]) ){ goto $label$9 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$9
	CALL memcpy(($3 + [32]), $5, [1])
	$5 = *($3 + [32])
	*($3 + [80]) = (int_64)0
	$7 = ($2 + [26])
	if ( ((uint_32)($4 + [-26]) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$10
	CALL memcpy(($3 + [80]), $7, [8])
	$7 = ($2 + [34])
	if ( ((int_32)$4 != (int_32)[34]) ){ goto $label$11 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$11
	CALL memcpy(($3 + [32]), $7, [1])
	$7 = ($2 + [35])
	$8 = *($3 + [32])
	if ( ((uint_32)($4 + [-35]) > (uint_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$12
	$9 = ($2 + $4)
	CALL memcpy(($3 + [72]), $7, [8])
	$7 = ($2 + [43])
	if ( ((uint_32)($4 + [-43]) > (uint_32)[7]) ){ goto $label$13 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$13
	CALL memcpy(($3 + [64]), $7, [8])
	*(($3 + [56])) = $9
	$10 = *((($3 + [88]) + [8]))
	*((($3 + [16]) + [8])) = $10
	*(($3 + [8])) = $10
	*($3 + [48]) = $2
	*(($3 + [52])) = ($2 + [51])
	*($3 + [40]) = $1
	*($3 + [32]) = $0
	$0 = *($3 + [88])
	*($3 + [16]) = $0
	*($3) = $0
	CALL $54(($3 + [32]), *($3 + [104]), $3, ((int_32)($6 & [255]) != (int_32)[0]), ((int_32)($5 & [255]) != (int_32)[0]), *($3 + [80]), ((int_32)($8 & [255]) != (int_32)[0]), *($3 + [72]), *($3 + [64]))
	$global$0 = ($3 + [112])
}

void .FUNC $93 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	CALL eosio_assert([0], [9961])
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	CALL memcpy(($3 + [8]), $2, [1])
	$5 = ($2 + [1])
	$6 = *($3 + [8])
	if ( ((int_32)$4 != (int_32)[1]) ){ goto $label$5 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$5
	CALL memcpy(($3 + [8]), $5, [1])
	$5 = ($2 + [2])
	$7 = *($3 + [8])
	if ( ((int_32)$4 != (int_32)[2]) ){ goto $label$6 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$6
	$8 = ($2 + $4)
	CALL memcpy(($3 + [8]), $5, [1])
	$5 = ($2 + [3])
	$9 = *($3 + [8])
	if ( ((uint_32)($4 + [-3]) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$7
	CALL memcpy(($3 + [40]), $5, [8])
	*(($3 + [32])) = $8
	*($3 + [24]) = $2
	*(($3 + [28])) = ($2 + [11])
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	CALL $59(($3 + [8]), ((int_32)($6 & [255]) != (int_32)[0]), ((int_32)($7 & [255]) != (int_32)[0]), ((int_32)($9 & [255]) != (int_32)[0]), *($3 + [40]))
	$global$0 = ($3 + [48])
}

int_32 .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $2(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[12])) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$4 = ($6 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL $11(*(($6 + [-4])))
	
.LABEL $label$8
	$6 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$7 }
	$4 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$7 = ((int_32)(*($0 + [4]) - $5) / (int_32)[12])
	$4 = ($1 + ((int_32)$7 * (int_32)[12]))
	$6 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $28($5, $1)
	$5 = ($5 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	$1 = ($0 + [4])
	$5 = *($1)
	
.LOOP $label$12:
	CALL $26($5, $4)
	$5 = (*($1) + [12])
	*($1) = $5
	$4 = ($4 + [12])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $11(*(($4 + [-4])))
	
.LABEL $label$15
	$4 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $5
	return 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*(($0 + [4])) = $5
	CALL $11($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = [357913941]
	$4 = ((int_32)$4 / (int_32)[12])
	if ( ((uint_32)$4 > (uint_32)[178956969]) ){ goto $label$16 }
	$5 = ($4 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$16
	$4 = ((int_32)$5 * (int_32)[12])
	$5 = CALL $9($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$17:
	CALL $26($5, $1)
	$5 = (*($4) + [12])
	*($4) = $5
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $42($0)
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[12])) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$4 = ($6 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL $11(*(($6 + [-4])))
	
.LABEL $label$8
	$6 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$7 }
	$4 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$7 = ((int_32)(*($0 + [4]) - $5) / (int_32)[12])
	$4 = ($1 + ((int_32)$7 * (int_32)[12]))
	$6 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $28($5, $1)
	$5 = ($5 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	$1 = ($0 + [4])
	$5 = *($1)
	
.LOOP $label$12:
	CALL $26($5, $4)
	$5 = (*($1) + [12])
	*($1) = $5
	$4 = ($4 + [12])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $11(*(($4 + [-4])))
	
.LABEL $label$15
	$4 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $5
	return 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*(($0 + [4])) = $5
	CALL $11($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = [357913941]
	$4 = ((int_32)$4 / (int_32)[12])
	if ( ((uint_32)$4 > (uint_32)[178956969]) ){ goto $label$16 }
	$5 = ($4 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$16
	$4 = ((int_32)$5 * (int_32)[12])
	$5 = CALL $9($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$17:
	CALL $26($5, $1)
	$5 = (*($4) + [12])
	*($4) = $5
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $42($0)
}

void .FUNC $43 (int_32 $0)
{
}

void .FUNC $42 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_64 .FUNC $41 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $40($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $19($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [8416])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [8400]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [8432]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $18($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

int_64 .FUNC $40 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [128])
	$global$0 = $2
	*($0) = (int_64)0
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [24 align=4]) = (int_64)0
	*($0 + [48 align=4]) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = (int_64)0
	*(($0 + [56])) = (int_64)0
	*(($0 + [64])) = (int_64)0
	*(($2 + [48])) = [0]
	*($2 + [40]) = (int_64)0
	$3 = CALL $17([8452])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$7 }
	*($2 + [40]) = ($3 << [1])
	$4 = (($2 + [40]) | [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$5 = (($3 + [16]) & [-16])
	$4 = CALL $9($5)
	*($2 + [40]) = ($5 | [1])
	*($2 + [48]) = $4
	*($2 + [44]) = $3
	
.LABEL $label$6
	CALL memcpy($4, [8452], $3)
	
.LABEL $label$5
	*(($4 + $3)) = [0]
	CALL $44(($2 + [112]), $1, ($2 + [40]))
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$8 }
	CALL $11(*($2 + [48]))
	
.LABEL $label$8
	$1 = *($2 + [112])
	*(($2 + [48])) = [0]
	*($2 + [40]) = (int_64)0
	$3 = CALL $17([8450])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$11 }
	*($2 + [40]) = ($3 << [1])
	$4 = (($2 + [40]) | [1])
	if ( $3 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$5 = (($3 + [16]) & [-16])
	$4 = CALL $9($5)
	*($2 + [40]) = ($5 | [1])
	*($2 + [48]) = $4
	*($2 + [44]) = $3
	
.LABEL $label$10
	CALL memcpy($4, [8450], $3)
	
.LABEL $label$9
	*(($4 + $3)) = [0]
	CALL $44(($2 + [96]), $1, ($2 + [40]))
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$12 }
	CALL $11(*($2 + [48]))
	
.LABEL $label$12
	CALL $28(($0 + [24]), *($2 + [96]))
	$4 = *($2 + [96])
	*(($2 + [48])) = [0]
	*($2 + [40]) = (int_64)0
	$3 = CALL $17([8448])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$1 = ($4 + [12])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$15 }
	*($2 + [40]) = ($3 << [1])
	$4 = (($2 + [40]) | [1])
	if ( $3 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$5 = (($3 + [16]) & [-16])
	$4 = CALL $9($5)
	*($2 + [40]) = ($5 | [1])
	*($2 + [48]) = $4
	*($2 + [44]) = $3
	
.LABEL $label$14
	CALL memcpy($4, [8448], $3)
	
.LABEL $label$13
	*(($4 + $3)) = [0]
	CALL $44(($2 + [80]), $1, ($2 + [40]))
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$16 }
	CALL $11(*($2 + [48]))
	
.LABEL $label$16
	$3 = *($2 + [80])
	if ( ((int_32)(*($2 + [84]) - $3) != (int_32)[12]) ){ goto $label$18 }
	$4 = *($3)
	$1 = CALL $17([8290])
	if ( ((int_32)$1 != (int_32)( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$18 }
	if ( (CALL $38($3, [0], [-1], [8290], $1) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	if ( ((int_32)$0 == (int_32)($2 + [80])) ){ goto $label$1 }
	CALL $48($0, *($2 + [80]), *($2 + [84]))
	goto $label$1 
	
.LABEL $label$17
	CALL $49($0, [0], [0])
	goto $label$1 
	
.LABEL $label$4
	CALL $25(($2 + [40]))
	
.LABEL $label$3
	CALL $25(($2 + [40]))
	
.LABEL $label$2
	CALL $25(($2 + [40]))
	
.LABEL $label$1
	$6 = ($0 + [12])
	CALL $50($6, [0], [0])
	$4 = *($0)
	$7 = ($0 + [4])
	if ( ((int_32)*($7) == (int_32)$4) ){ goto $label$19 }
	$8 = (($2 + [16]) | [1])
	$5 = (($2 + [40]) + [8])
	$9 = (($2 + [40]) | [1])
	$10 = (($2 + [40]) + [16])
	$11 = ($0 + [20])
	$12 = [0]
	
.LOOP $label$20:
	*($5) = [0]
	*($2 + [40]) = (int_64)0
	$3 = CALL $17([8454])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$24 }
	$1 = ($4 + ((int_32)$12 * (int_32)[12]))
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$27 }
	*($2 + [40]) = ($3 << [1])
	$4 = $9
	if ( $3 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$13 = (($3 + [16]) & [-16])
	$4 = CALL $9($13)
	*($5) = $4
	*($2 + [40]) = ($13 | [1])
	*($2 + [44]) = $3
	
.LABEL $label$26
	CALL memcpy($4, [8454], $3)
	
.LABEL $label$25
	*(($4 + $3)) = [0]
	CALL $44(($2 + [64]), $1, ($2 + [40]))
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$28 }
	CALL $11(*($5))
	
.LABEL $label$28
	*($10) = (int_64)0
	*($5) = (int_64)0
	*($10) = [0]
	*($2 + [40]) = (int_64)0
	$3 = *($2 + [64])
	if ( (*($3) & [1]) ){ goto $label$30 }
	$3 = ($3 + [1])
	goto $label$29 
	
.LABEL $label$30
	$3 = *($3 + [8])
	
.LABEL $label$29
	*($2 + [32]) = $3
	*($2 + [36]) = CALL $17($3)
	*($2 + [8]) = *($2 + [32])
	CALL $51(($2 + [16]), ($2 + [8]))
	*($2 + [40]) = *($2 + [16])
	$3 = *($2 + [64])
	if ( (((int_32)(*($2 + [68]) - $3) / (int_32)[12]) <= [2]) ){ goto $label$32 }
	CALL $26(($2 + [16]), ($3 + [12]))
	if ( (*($5) & [1]) ){ goto $label$31 }
	goto $label$22 
	
.LABEL $label$32
	*(($1 = (($2 + [16]) + [8]))) = [0]
	*($2 + [16]) = (int_64)0
	$3 = CALL $17([8290])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$35 }
	*($2 + [16]) = ($3 << [1])
	$4 = $8
	if ( $3 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$13 = (($3 + [16]) & [-16])
	$4 = CALL $9($13)
	*($1) = $4
	*($2 + [16]) = ($13 | [1])
	*($2 + [20]) = $3
	
.LABEL $label$34
	CALL memcpy($4, [8290], $3)
	
.LABEL $label$33
	*(($4 + $3)) = [0]
	if ( ((*($5) & [1]) == 0) ){ goto $label$22 }
	
.LABEL $label$31
	*(*($10)) = [0]
	*((($2 + [40]) + [12])) = [0]
	goto $label$21 
	
.LABEL $label$24
	CALL $25(($2 + [40]))
	
.LABEL $label$23
	CALL $25(($2 + [16]))
	
.LABEL $label$22
	*($5) = [0]
	
.LABEL $label$21
	CALL $30($5, [0])
	*(($5 + [8])) = *((($2 + [16]) + [8]))
	*($5) = *($2 + [16])
	$3 = ($0 + [16])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)*($11)) ){ goto $label$38 }
	*($4) = *($2 + [40])
	CALL $26(($4 + [8]), $5)
	*($3) = (*($3) + [24])
	if ( ((*($5) & [1]) == 0) ){ goto $label$36 }
	goto $label$37 
	
.LABEL $label$38
	CALL $52($6, ($2 + [40]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$36 }
	
.LABEL $label$37
	CALL $11(*($10))
	
.LABEL $label$36
	$1 = *($2 + [64])
	if ( ($1 == 0) ){ goto $label$39 }
	$4 = *($2 + [68])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$41 }
	
.LOOP $label$42:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$43 }
	CALL $11(*(($4 + [-4])))
	
.LABEL $label$43
	$4 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$42 }
	$3 = *($2 + [64])
	goto $label$40 
	
.LABEL $label$41
	$3 = $1
	
.LABEL $label$40
	*($2 + [68]) = $1
	CALL $11($3)
	
.LABEL $label$39
	$4 = *($0)
	$12 = ($12 + [2])
	if ( ($12 <= ((int_32)(*($7) - $4) / (int_32)[12])) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = *($2 + [112])
	if ( ((int_32)(*($2 + [116]) - $3) != (int_32)[24]) ){ goto $label$45 }
	CALL $28(($0 + [60]), ($3 + [12]))
	goto $label$44 
	
.LABEL $label$45
	CALL $31(($0 + [60]), [8456])
	
.LABEL $label$44
	CALL $28(($0 + [36]), (*($2 + [96]) + [24]))
	CALL $28(($0 + [48]), (*($2 + [96]) + [36]))
	$1 = *($2 + [80])
	if ( ($1 == 0) ){ goto $label$46 }
	$4 = *($2 + [84])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$48 }
	
.LOOP $label$49:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$50 }
	CALL $11(*(($4 + [-4])))
	
.LABEL $label$50
	$4 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$49 }
	$3 = *($2 + [80])
	goto $label$47 
	
.LABEL $label$48
	$3 = $1
	
.LABEL $label$47
	*($2 + [84]) = $1
	CALL $11($3)
	
.LABEL $label$46
	$1 = *($2 + [96])
	if ( ($1 == 0) ){ goto $label$51 }
	$4 = *($2 + [100])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$53 }
	
.LOOP $label$54:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$55 }
	CALL $11(*(($4 + [-4])))
	
.LABEL $label$55
	$4 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$54 }
	$3 = *($2 + [96])
	goto $label$52 
	
.LABEL $label$53
	$3 = $1
	
.LABEL $label$52
	*($2 + [100]) = $1
	CALL $11($3)
	
.LABEL $label$51
	$1 = *($2 + [112])
	if ( ($1 == 0) ){ goto $label$56 }
	$4 = *($2 + [116])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$58 }
	
.LOOP $label$59:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$60 }
	CALL $11(*(($4 + [-4])))
	
.LABEL $label$60
	$4 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$59 }
	$3 = *($2 + [112])
	goto $label$57 
	
.LABEL $label$58
	$3 = $1
	
.LABEL $label$57
	*($2 + [116]) = $1
	CALL $11($3)
	
.LABEL $label$56
	$global$0 = ($2 + [128])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$3 = CALL $17([8290])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($2) = ($3 << [1])
	$4 = ($2 | [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = (($3 + [16]) & [-16])
	$4 = CALL $9($5)
	*($2) = ($5 | [1])
	*($2 + [8]) = $4
	*($2 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($4, [8290], $3)
	
.LABEL $label$3
	$5 = [0]
	*(($4 + $3)) = [0]
	$3 = *($1)
	if ( ((int_32)*($1 + [4]) == (int_32)$3) ){ goto $label$6 }
	$6 = ($1 + [4])
	$4 = [0]
	
.LOOP $label$7:
	if ( ($5 == 0) ){ goto $label$8 }
	CALL $34($2, [8448])
	$3 = (*($1) + $5)
	
.LABEL $label$8
	$7 = *($3)
	$8 = ($7 & [1])
	CALL $35($2, ( *($3 + [8]) ? ($3 + [1]) : $8 ), ( *($3 + [4]) ? uint_32($7 >> [1]) : $8 ))
	$5 = ($5 + [12])
	$3 = *($1)
	$4 = ($4 + [1])
	if ( ($4 <= ((int_32)(*($6) - $3) / (int_32)[12])) ){ goto $label$7 }
	
.LABEL $label$6
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$3 = CALL $17([8290])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $9($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$10
	CALL memcpy($5, [8290], $3)
	
.LABEL $label$9
	*(($5 + $3)) = [0]
	$3 = *($1 + [24])
	$5 = ($3 & [1])
	CALL $35($0, ( *(($1 + [32])) ? ($1 + [25]) : $5 ), ( *(($1 + [28])) ? uint_32($3 >> [1]) : $5 ))
	CALL $34($0, [8450])
	$3 = *($2)
	$5 = ($3 & [1])
	CALL $35($0, ( *($2 + [8]) ? ($2 | [1]) : $5 ), ( *($2 + [4]) ? uint_32($3 >> [1]) : $5 ))
	CALL $34($0, [8450])
	$3 = *($1 + [36])
	$5 = ($3 & [1])
	CALL $35($0, ( *(($1 + [44])) ? ($1 + [37]) : $5 ), ( *(($1 + [40])) ? uint_32($3 >> [1]) : $5 ))
	CALL $34($0, [8450])
	$3 = *($1 + [48])
	$5 = ($3 & [1])
	CALL $35($0, ( *(($1 + [56])) ? ($1 + [49]) : $5 ), ( *(($1 + [52])) ? uint_32($3 >> [1]) : $5 ))
	CALL $34($0, [8452])
	$3 = *($1 + [60])
	$5 = ($3 & [1])
	CALL $35($0, ( *(($1 + [68])) ? ($1 + [61]) : $5 ), ( *(($1 + [64])) ? uint_32($3 >> [1]) : $5 ))
	if ( ((*($2) & [1]) == 0) ){ goto $label$12 }
	CALL $11(*(($2 + [8])))
	
.LABEL $label$12
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $25($2)
	
.LABEL $label$1
	CALL $25($0)
	(unreachable)
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL $9(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $26(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $11(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL $11($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($2 + [1])
	$6 = ($1 + [1])
	$7 = *($1 + [4])
	$8 = *($1)
	$9 = ($2 + [4])
	
.LOOP $label$1:
	$10 = ($8 & [1])
	$7 = ( $7 ? uint_32(($8 & [254]) >> [1]) : $10 )
	if ( ($7 <= $4) ){ goto $label$3 }
	$11 = $4
	$13 = ($8 & [1])
	$8 = *($2)
	$8 = ( *($9) ? uint_32($8 >> [1]) : $13 )
	if ( ($8 == 0) ){ goto $label$2 }
	$7 = ($12 + $4)
	$12 = ( *(($1 + [8])) ? $6 : $10 )
	$10 = ($12 + $7)
	$11 = ($10 - $7)
	if ( ((int_32)$11 < (int_32)$8) ){ goto $label$3 }
	$14 = ( *(($2 + [8])) ? $5 : $13 )
	$13 = *($14)
	
.LOOP $label$4:
	$11 = (($11 - $8) + [1])
	if ( ($11 == 0) ){ goto $label$3 }
	$11 = CALL $1($7, $13, $11)
	if ( ($11 == 0) ){ goto $label$3 }
	if ( (CALL $2($11, $14, $8) == 0) ){ goto $label$5 }
	$7 = ($11 + [1])
	$11 = ($10 - $7)
	if ( ((int_32)$11 >= (int_32)$8) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$3 }
	$11 = ($11 - $12)
	if ( ((int_32)$11 != (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = *($1)
	if ( ($8 & [1]) ){ goto $label$6 }
	$11 = uint_32($8 >> [1])
	goto $label$2 
	
.LABEL $label$6
	$11 = *(($1 + [4]))
	
.LABEL $label$2
	$8 = CALL $27($3, $1, $4, ($11 - $4), $1)
	$4 = ($0 + [4])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)*(($0 + [8]))) ){ goto $label$8 }
	CALL $26($7, $8)
	*($4) = (*($4) + [12])
	goto $label$7 
	
.LABEL $label$8
	CALL $45($0, $8)
	
.LABEL $label$7
	$4 = *($2)
	$10 = *($9)
	if ( ((*($3) & [1]) == 0) ){ goto $label$9 }
	CALL $11(*(($3 + [8])))
	
.LABEL $label$9
	$8 = *($1)
	$7 = *(($1 + [4]))
	$13 = ( $7 ? uint_32($8 >> [1]) : ($8 & [1]) )
	if ( ((uint_32)$11 >= (uint_32)$13) ){ goto $label$10 }
	$4 = (( $10 ? uint_32($4 >> [1]) : ($4 & [1]) ) + $11)
	if ( ($4 <= $13) ){ goto $label$1 }
	
.LABEL $label$10
	$global$0 = ($3 + [16])
}

int_32 .FUNC $8 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $6())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $7($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $3($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $3($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $6 ()
{
	return [8208]
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $3($1)
	
.LABEL $label$2
	*(CALL $6()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $3(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $4($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $4 (int_32 $0)
{
}

void .FUNC $5 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

int_32 .FUNC $2 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $3 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8265])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $0 ()
{
	CALL $5()
}

int_32 .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	return CALL $13($0, $1)
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $4($0)
	
.LABEL $label$1
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	CALL $15($0, $1)
}

int_32 .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $10 (int_32 $0)
{
	return CALL $9($0)
}

void .FUNC $11 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $4($0)
	
.LABEL $label$1
}

void .FUNC $12 (int_32 $0)
{
	CALL $11($0)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $8(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $8(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $75 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $73($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $80(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL $11($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

int_64 .FUNC $18 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_64 .FUNC $19 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [96])
	$global$0 = $4
	if ( ((int_64)CALL current_receiver() == (int_64)*($1)) ){ goto $label$1 }
	CALL eosio_assert([0], [9881])
	
.LABEL $label$1
	*(($5 = CALL $9([80])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [64]) = $1
	$3 = *($3)
	*($5) = *($3)
	*($5 + [8]) = *(($3 + [8]))
	*($5 + [16]) = *(($3 + [16]))
	*(($5 + [24])) = *(($3 + [24]))
	*($5 + [32]) = *(($3 + [32]))
	*(($5 + [40])) = *(($3 + [40]))
	*(($5 + [48])) = *(($3 + [48]))
	*(($5 + [56])) = *(($3 + [56]))
	*($4 + [88]) = (($4 + [16]) + [51])
	*($4 + [84]) = ($4 + [16])
	*($4 + [80]) = ($4 + [16])
	CALL $99(($4 + [80]), $5)
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-4417020450001911808, $2, (int_64)-4417020450001911808, ($4 + [16]), [51])
	*($5 + [68]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-4417020450001911808) ){ goto $label$2 }
	*(($1 + [16])) = (int_64)-4417020450001911807
	
.LABEL $label$2
	*($4 + [80]) = $5
	*($4 + [16]) = (int_64)-4417020450001911808
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = (int_64)-4417020450001911808
	*($3 + [16]) = $6
	*($4 + [80]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $98(($1 + [24]), ($4 + [80]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $11($5)
	
.LABEL $label$5
	$global$0 = ($4 + [96])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = ($global$0 - [112])
	$global$0 = $5
	CALL require_auth(*($0))
	*(($5 + [96])) = [0]
	*($5 + [80]) = (int_64)-1
	*($5 + [88]) = (int_64)0
	$6 = *($0)
	*($5 + [64]) = $6
	*($5 + [72]) = $6
	$7 = CALL db_find_i64($6, $6, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)*(CALL $55(($5 + [64]), $7) + [64]) == (int_32)($5 + [64])) ){ goto $label$1 }
	CALL eosio_assert([0], [9651])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [8574])
	
.LABEL $label$1
	CALL $60($5, ($5 + [64]))
	if ( ((uint_64)*($5 + [48]) >= (uint_64)$4) ){ goto $label$3 }
	CALL eosio_assert([0], [8503])
	
.LABEL $label$3
	*($5 + [24]) = $1
	*($5 + [25]) = $2
	*($5 + [40]) = $3
	$6 = *($5 + [56])
	*($5 + [56]) = $4
	CALL $56(($5 + [64]), $5, *($0))
	if ( ((int_64)$6 == (int_64)$4) ){ goto $label$4 }
	CALL prints([8593])
	*($5 + [111]) = [34]
	CALL prints_l(($5 + [111]), [1])
	CALL prints([8595])
	*($5 + [111]) = [34]
	CALL prints_l(($5 + [111]), [1])
	*($5 + [111]) = [58]
	CALL prints_l(($5 + [111]), [1])
	*($5 + [111]) = [34]
	CALL prints_l(($5 + [111]), [1])
	CALL prints([8603])
	*($5 + [111]) = [34]
	CALL prints_l(($5 + [111]), [1])
	CALL prints([8450])
	*($5 + [111]) = [34]
	CALL prints_l(($5 + [111]), [1])
	CALL prints([8607])
	*($5 + [111]) = [34]
	CALL prints_l(($5 + [111]), [1])
	*($5 + [111]) = [58]
	CALL prints_l(($5 + [111]), [1])
	*($5 + [111]) = [34]
	CALL prints_l(($5 + [111]), [1])
	CALL prints([8613])
	*($5 + [111]) = [34]
	CALL prints_l(($5 + [111]), [1])
	CALL prints([8450])
	*($5 + [111]) = [34]
	CALL prints_l(($5 + [111]), [1])
	CALL prints([8387])
	*($5 + [111]) = [34]
	CALL prints_l(($5 + [111]), [1])
	*($5 + [111]) = [58]
	CALL prints_l(($5 + [111]), [1])
	*($5 + [111]) = [34]
	CALL prints_l(($5 + [111]), [1])
	CALL printui($6)
	*($5 + [111]) = [34]
	CALL prints_l(($5 + [111]), [1])
	CALL prints([8450])
	*($5 + [111]) = [34]
	CALL prints_l(($5 + [111]), [1])
	CALL prints([8635])
	*($5 + [111]) = [34]
	CALL prints_l(($5 + [111]), [1])
	*($5 + [111]) = [58]
	CALL prints_l(($5 + [111]), [1])
	*($5 + [111]) = [34]
	CALL prints_l(($5 + [111]), [1])
	CALL printui($4)
	*($5 + [111]) = [34]
	CALL prints_l(($5 + [111]), [1])
	CALL prints([8643])
	
.LABEL $label$4
	$2 = *($5 + [88])
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = ($5 + [92])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $11($1)
	
.LABEL $label$9
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($5 + [88]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $2
	
.LABEL $label$6
	*($3) = $2
	CALL $11($0)
	
.LABEL $label$5
	$global$0 = ($5 + [112])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[24])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[24])) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$3 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$6 = ($4 + [-24])
	if ( ((*(($4 + [-16])) & [1]) == 0) ){ goto $label$8 }
	CALL $11(*(($4 + [-8])))
	
.LABEL $label$8
	$4 = $6
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$7 }
	$4 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$7 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$4 = ($1 + ((int_32)$7 * (int_32)[24]))
	$6 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	*($5) = *($1)
	CALL $28(($5 + [8]), ($1 + [8]))
	$5 = ($5 + [24])
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	$5 = ($0 + [4])
	$1 = *($5)
	
.LOOP $label$12:
	*($1) = *($4)
	CALL $26(($1 + [8]), ($4 + [8]))
	$1 = (*($5) + [24])
	*($5) = $1
	$4 = ($4 + [24])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$6 = ($0 + [4])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($1 + [-24])
	if ( ((*(($1 + [-16])) & [1]) == 0) ){ goto $label$15 }
	CALL $11(*(($1 + [-8])))
	
.LABEL $label$15
	$1 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$14 }
	
.LABEL $label$13
	*($6) = $5
	return 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*(($0 + [4])) = $5
	CALL $11($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$1 }
	$5 = [178956970]
	$4 = ((int_32)$4 / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$16 }
	$5 = ($4 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$16
	$4 = ((int_32)$5 * (int_32)[24])
	$5 = CALL $9($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$17:
	*($5) = *($1)
	CALL $26(($5 + [8]), ($1 + [8]))
	$5 = (*($4) + [24])
	*($4) = $5
	$1 = ($1 + [24])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $42($0)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [9321])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [9426])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9359])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9426])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[24])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = [178956970]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL $9(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	*(($4 = ($2 + ((int_32)$3 * (int_32)[24])))) = *($1)
	CALL $26(($4 + [8]), ($1 + [8]))
	$6 = ($2 + ((int_32)$5 * (int_32)[24]))
	$7 = ($4 + [24])
	$5 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$6 }
	$9 = ($5 - $8)
	$5 = [0]
	
.LOOP $label$7:
	$2 = ($8 + $5)
	*((($1 = ($4 + $5)) + [-24])) = *(($2 + [-24]))
	$3 = ($2 + [-8])
	*(($1 + [-8])) = *($3)
	$1 = ($2 + [-16])
	*(($1 + [-16])) = *($1)
	*($1) = (int_64)0
	*($3) = [0]
	$5 = ($5 + [-24])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$7 }
	$4 = ($4 + $5)
	$5 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $5
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$1 = ($5 + [-24])
	if ( ((*(($5 + [-16])) & [1]) == 0) ){ goto $label$10 }
	CALL $11(*(($5 + [-8])))
	
.LABEL $label$10
	$5 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $11($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	if ( (*($0 + [60]) & [1]) ){ goto $label$11 }
	if ( (*($0 + [48]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $11(*(($0 + [68])))
	if ( ((*($0 + [48]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $11(*(($0 + [56])))
	$1 = [1]
	if ( ((*($0 + [36]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$1 = [1]
	if ( (*($0 + [36]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( (*($0 + [24]) & $1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $11(*(($0 + [44])))
	if ( ((*($0 + [24]) & $1) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $11(*(($0 + [32])))
	$2 = *($0 + [12])
	if ( ($2 == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$2 = *($0 + [12])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$4
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = ($0 + [16])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$3 = ($1 + [-24])
	if ( ((*(($1 + [-16])) & [1]) == 0) ){ goto $label$14 }
	CALL $11(*(($1 + [-8])))
	
.LABEL $label$14
	$1 = $3
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$13 }
	$1 = *(($0 + [12]))
	*($4) = $2
	CALL $11($1)
	$2 = *($0)
	if ( $2 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$12
	*($4) = $2
	CALL $11($2)
	$2 = *($0)
	if ( $2 ){ goto $label$1 }
	
.LABEL $label$2
	return $0
	
.LABEL $label$1
	$3 = *($0 + [4])
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$16 }
	
.LOOP $label$17:
	$1 = ($3 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$18 }
	CALL $11(*(($3 + [-4])))
	
.LABEL $label$18
	$3 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	$1 = *($0)
	goto $label$15 
	
.LABEL $label$16
	$1 = $2
	
.LABEL $label$15
	*(($0 + [4])) = $2
	CALL $11($1)
	return $0
}

void .FUNC $54 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5, int_32 $6, int_64 $7, int_64 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$9 = ($global$0 - [112])
	$global$0 = $9
	CALL require_auth(*($0))
	CALL $39(($9 + [72]), (float_64)1e6)
	$10 = CALL $37(($9 + [72]), [0], [8464])
	$11 = ($10 + [8])
	*((($9 + [8]) + [8])) = *($11)
	*($9 + [8]) = *($10)
	*($10) = (int_64)0
	*($11) = [0]
	if ( ((uint_64)$7 >= (uint_64)(int_64)1000001) ){ goto $label$7 }
	$10 = [1]
	if ( (*($9 + [8]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL eosio_assert([0], ( *($9 + [16]) ? (($9 + [8]) | [1]) : (*($9 + [8]) & [1]) ))
	$10 = [1]
	if ( ((*($9 + [8]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $11(*($9 + [16]))
	if ( ((*($9 + [72]) & $10) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( (*($9 + [72]) & $10) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ((uint_64)$8 <= (uint_64)$7) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	CALL $11(*($9 + [80]))
	if ( ((uint_64)$8 <= (uint_64)$7) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8503])
	
.LABEL $label$1
	*(($9 + [104])) = [0]
	*($9 + [88]) = (int_64)-1
	*($9 + [96]) = (int_64)0
	$12 = *($0)
	*($9 + [72]) = $12
	*($9 + [80]) = $12
	$10 = CALL db_find_i64($12, $12, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$8 }
	if ( ((int_32)*(CALL $55(($9 + [72]), $10) + [64]) == (int_32)($9 + [72])) ){ goto $label$9 }
	CALL eosio_assert([0], [9651])
	
.LABEL $label$9
	CALL eosio_assert([0], [8549])
	
.LABEL $label$8
	*(($9 + [24])) = *(($2 + [8]))
	*($9 + [8]) = $1
	*($9 + [32]) = $3
	*($9 + [33]) = $4
	*($9 + [40]) = $5
	*($9 + [48]) = $6
	*($9 + [56]) = $7
	*($9 + [64]) = $8
	*($9 + [16]) = *($2)
	CALL $56(($9 + [72]), ($9 + [8]), *($0))
	$10 = *($9 + [96])
	if ( ($10 == 0) ){ goto $label$10 }
	$3 = ($9 + [100])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$10) ){ goto $label$12 }
	
.LOOP $label$13:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$14 }
	CALL $11($2)
	
.LABEL $label$14
	if ( ((int_32)$10 != (int_32)$0) ){ goto $label$13 }
	$0 = *(($9 + [96]))
	goto $label$11 
	
.LABEL $label$12
	$0 = $10
	
.LABEL $label$11
	*($3) = $10
	CALL $11($0)
	
.LABEL $label$10
	$global$0 = ($9 + [112])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $17($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $29($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*($4 + [64]) == (int_32)$0) ){ goto $label$4 }
	CALL eosio_assert([0], [9651])
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $55($0, $4)
	if ( ((int_32)*($4 + [64]) == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [9651])
	
.LABEL $label$2
	*($3) = $1
	CALL $57($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $58($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9725])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9771])
	
.LABEL $label$2
	$3 = *($3)
	*($1) = *($3)
	*(($1 + [56])) = *(($3 + [56]))
	*(($1 + [48])) = *(($3 + [48]))
	*(($1 + [40])) = *(($3 + [40]))
	*(($1 + [32])) = *(($3 + [32]))
	*(($1 + [24])) = *(($3 + [24]))
	*(($1 + [16])) = *(($3 + [16]))
	*(($1 + [8])) = *(($3 + [8]))
	$4 = $4
	$3 = ($4 + [-64])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($4 + [-13])
	CALL $99($5, $1)
	CALL db_update_i64(*($1 + [68]), $2, $3, [51])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-4417020450001911808) ){ goto $label$3 }
	*(($0 + [16])) = (int_64)-4417020450001911807
	
.LABEL $label$3
	$global$0 = ($5 + [16])
}

int_32 .FUNC $35 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $29($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $9($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $11($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $29($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9702])
	
.LABEL $label$5
	$4 = CALL $3($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL $9([80])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [64]) = $0
	CALL $97(($3 + [32]), $5)
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-4417020450001911808
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = (int_64)-4417020450001911808
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($7) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $98(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $4($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $11($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (*($0) + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)*($0 + [8]) != (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert([0], [9961])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy(($2 + [15]), $5, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	*(($4 + [40])) = ((int_32)*($2 + [15]) != (int_32)[0])
	$3 = ($4 + [48])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9961])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$0 = ($4 + [56])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9961])
	$4 = *(($1 + [4]))
	
.LABEL $label$4
	CALL memcpy($0, $4, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [9957])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $73($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [9961])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [1] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $22($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $22($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $22($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $22($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [8304]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $22($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $22($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $22($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $25 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $20([2], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL $9($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $9($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9702])
	
.LABEL $label$5
	$2 = CALL $3($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $9([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$8
	CALL memcpy(($3 + [24]), $7, [8])
	$8 = *($3 + [24])
	*(($5 + [8])) = $8
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	*($3 + [24]) = $8)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $8
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $102(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $4($2)
	
.LABEL $label$9
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $11($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9702])
	
.LABEL $label$5
	$4 = CALL $3($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $9([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $103(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $7)
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $104(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $4($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $11($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $9(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $11($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $11($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9576])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9576])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9576])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9576])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($1)
	*($2 + [7]) = *(*($0 + [12]))
	$0 = *($4 + [4])
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert([0], [9576])
	$0 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($0, ($2 + [7]), [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	$global$0 = ($2 + [16])
}

int_64 .FUNC $67 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	$5 = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [16]) = $2
	*($4 + [8]) = $1
	$6 = CALL db_find_i64($1, $2, (int_64)3607749779137757184, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $69(($4 + [8]), $6)
	if ( ((int_32)*($6 + [16]) == (int_32)($4 + [8])) ){ goto $label$2 }
	CALL eosio_assert([0], [9651])
	
.LABEL $label$2
	$5 = *($6)
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$1 }
	$8 = ($4 + [36])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$6 }
	CALL $11($9)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$5 }
	$6 = *(($4 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$6 = $7
	
.LABEL $label$3
	*($8) = $7
	CALL $11($6)
	
.LABEL $label$1
	$global$0 = ($4 + [48])
	return $5
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [16]) = $3
	*($4 + [8]) = $2
	$5 = CALL db_find_i64($2, $3, (int_64)-4157508551318700032, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $68(($4 + [8]), $5)
	if ( ((int_32)*($5 + [40]) == (int_32)($4 + [8])) ){ goto $label$5 }
	CALL eosio_assert([0], [9651])
	
.LABEL $label$5
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($4 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $11($5)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($4 + [32]))
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [9233])
	*(($0 + [8])) = *([0] + [8])
	*($0) = *([0])
	
.LABEL $label$3
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$2
	$0 = $6
	
.LABEL $label$1
	*($7) = $6
	CALL $11($0)
	$global$0 = ($4 + [48])
}

void .FUNC $61 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	int_64 $12
	float_64 $13
	$5 = ($global$0 - [192])
	$global$0 = $5
	*($5 + [175]) = $4
	*($5 + [176]) = $3
	CALL require_auth(*($0))
	CALL $39(($5 + [128]), (float_64)1e6)
	$4 = CALL $37(($5 + [128]), [0], [8646])
	$6 = ($4 + [8])
	*((($5 + [16]) + [8])) = *($6)
	*($5 + [16]) = *($4)
	*($4) = (int_64)0
	*($6) = [0]
	if ( ((uint_64)((int_64)$3 + (int_64)-1) >= (uint_64)(int_64)1000000) ){ goto $label$5 }
	$4 = [1]
	if ( (*($5 + [16]) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL eosio_assert([0], ( *($5 + [24]) ? (($5 + [16]) | [1]) : (*($5 + [16]) & [1]) ))
	$4 = [1]
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL $11(*($5 + [24]))
	if ( (*($5 + [128]) & $4) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((*($5 + [128]) & $4) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $11(*($5 + [136]))
	
.LABEL $label$1
	*(($5 + [160])) = [0]
	*($5 + [144]) = (int_64)-1
	*($5 + [152]) = (int_64)0
	$3 = *($0)
	*($5 + [128]) = $3
	*($5 + [136]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)-4994302950881886208, (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$4) < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $62(($5 + [128]), $4)
	if ( ((int_32)*($4 + [36]) == (int_32)($5 + [128])) ){ goto $label$8 }
	CALL eosio_assert([0], [9651])
	
.LABEL $label$8
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$9 }
	CALL eosio_assert([0], [8675])
	
.LABEL $label$9
	$3 = *($0)
	*($5 + [16]) = $2
	*($5 + [20]) = ($5 + [176])
	*($5 + [24]) = ($5 + [175])
	CALL $63(($5 + [128]), $4, $3, ($5 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$7 = *($0)
	if ( ((int_64)CALL current_receiver() == (int_64)*($5 + [128])) ){ goto $label$10 }
	CALL eosio_assert([0], [9881])
	
.LABEL $label$10
	*(($4 = CALL $9([48])) + [36]) = ($5 + [128])
	*($4) = $1
	*($4 + [8]) = *($2)
	*($4 + [16]) = *(($2 + [8]))
	*($4 + [24]) = *($5 + [176])
	*($4 + [32]) = *($5 + [175])
	*($5 + [8]) = (($5 + [16]) + [33])
	*($5 + [4]) = ($5 + [16])
	*($5) = ($5 + [16])
	*($5 + [184]) = $5
	*($5 + [92]) = ($4 + [8])
	*($5 + [88]) = $4
	*($5 + [96]) = ($4 + [24])
	*($5 + [100]) = ($4 + [32])
	CALL $64(($5 + [88]), ($5 + [184]))
	$3 = (uint_64)*($4 + [16]) >> (uint_64)(int_64)8
	$8 = CALL db_store_i64(*((($5 + [128]) + [8])), (int_64)-4994302950881886208, $7, $3), ($5 + [16]), [33]
	*($4 + [40]) = $8)
	$6 = (($5 + [128]) + [16])
	if ( (uint_64)($3 <= *($6)) ){ goto $label$11 }
	*($6) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$11
	*($5 + [88]) = $4
	$3 = (uint_64)*(($4 + [16])) >> (uint_64)(int_64)8
	*($5 + [16]) = $3)
	*($5) = $8
	$9 = ($5 + [156])
	$6 = *($9)
	if ( ((uint_32)$6 >= (uint_32)*((($5 + [128]) + [32]))) ){ goto $label$13 }
	*($6 + [8]) = $3
	*($6 + [16]) = $8
	*($5 + [88]) = [0]
	*($6) = $4
	*($9) = ($6 + [24])
	$4 = *($5 + [88])
	*($5 + [88]) = [0]
	if ( $4 ){ goto $label$12 }
	goto $label$6 
	
.LABEL $label$13
	CALL $65(($5 + [152]), ($5 + [88]), ($5 + [16]), $5)
	$4 = *($5 + [88])
	*($5 + [88]) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	
.LABEL $label$12
	CALL $11($4)
	
.LABEL $label$6
	$4 = CALL db_lowerbound_i64(*($5 + [128]), *((($5 + [128]) + [8])), (int_64)-4994302950881886208, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$15 }
	$4 = CALL $62(($5 + [128]), $4)
	$3 = *($4 + [24])
	$4 = CALL db_next_i64(*($4 + [40]), ($5 + [16]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = CALL $62(($5 + [128]), $4)
	$3 = ((int_64)*($4 + [24]) + (int_64)$3)
	$4 = CALL db_next_i64(*($4 + [40]), ($5 + [16]))
	if ( ((int_32)$4 >= (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$16
	$8 = (uint_64)($3 <= (int_64)1000001)
	goto $label$14 
	
.LABEL $label$15
	$8 = [1]
	
.LABEL $label$14
	CALL $39(($5 + [88]), (float_64)1e6)
	$4 = CALL $37(($5 + [88]), [0], [8715])
	$6 = ($4 + [8])
	*((($5 + [16]) + [8])) = *($6)
	*($5 + [16]) = *($4)
	*($4) = (int_64)0
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$22 }
	$4 = [1]
	if ( (*($5 + [16]) & [1]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL eosio_assert([0], ( *($5 + [24]) ? (($5 + [16]) | [1]) : (*($5 + [16]) & [1]) ))
	$4 = [1]
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL $11(*($5 + [24]))
	if ( (*($5 + [88]) & $4) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	if ( ((*($5 + [88]) & $4) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL $11(*($5 + [96]))
	
.LABEL $label$18
	*(($5 + [120])) = [0]
	*($5 + [104]) = (int_64)-1
	*($5 + [112]) = (int_64)0
	$3 = *($0)
	*($5 + [88]) = $3
	*($5 + [96]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$24 }
	if ( ((int_32)*(CALL $55(($5 + [88]), $4) + [64]) == (int_32)($5 + [88])) ){ goto $label$23 }
	CALL eosio_assert([0], [9651])
	goto $label$23 
	
.LABEL $label$24
	CALL eosio_assert([0], [8574])
	
.LABEL $label$23
	CALL $60(($5 + [16]), ($5 + [88]))
	$4 = ($5 + [32])
	CALL $66($5, $5, *($5 + [16]), (uint_64)*($4) >> (uint_64)(int_64)8))
	$3 = *($5 + [24])
	$7 = *($5)
	$10 = CALL $41((float_64)10, (CASTING float_64)(uint_32 *($4)))
	$4 = ($2 + [8])
	$11 = CALL $67($5, $1, *($0), (uint_64)*($4) >> (uint_64)(int_64)8))
	$12 = *($2)
	$13 = CALL $41((float_64)10, (CASTING float_64)(uint_32 *($4)))
	CALL prints([8593])
	*($5) = [34]
	CALL prints_l($5, [1])
	CALL prints([8595])
	*($5) = [34]
	CALL prints_l($5, [1])
	*($5) = [58]
	CALL prints_l($5, [1])
	*($5) = [34]
	CALL prints_l($5, [1])
	CALL prints([8742])
	*($5) = [34]
	CALL prints_l($5, [1])
	CALL prints([8450])
	*($5) = [34]
	CALL prints_l($5, [1])
	CALL prints([8607])
	*($5) = [34]
	CALL prints_l($5, [1])
	*($5) = [58]
	CALL prints_l($5, [1])
	*($5) = [34]
	CALL prints_l($5, [1])
	CALL prints([8746])
	*($5) = [34]
	CALL prints_l($5, [1])
	CALL prints([8450])
	*($5) = [34]
	CALL prints_l($5, [1])
	CALL prints([8757])
	*($5) = [34]
	CALL prints_l($5, [1])
	*($5) = [58]
	CALL prints_l($5, [1])
	*($5) = [34]
	CALL prints_l($5, [1])
	CALL printdf(((float_64)(CASTING float_64)(int_64 ((int_64)$3 + (int_64)$7)) / (float_64)$10))
	*($5) = [34]
	CALL prints_l($5, [1])
	CALL prints([8450])
	*($5) = [34]
	CALL prints_l($5, [1])
	CALL prints([8770])
	*($5) = [34]
	CALL prints_l($5, [1])
	*($5) = [58]
	CALL prints_l($5, [1])
	*($5) = [34]
	CALL prints_l($5, [1])
	CALL printn($1)
	*($5) = [34]
	CALL prints_l($5, [1])
	CALL prints([8450])
	*($5) = [34]
	CALL prints_l($5, [1])
	CALL prints([8787])
	*($5) = [34]
	CALL prints_l($5, [1])
	*($5) = [58]
	CALL prints_l($5, [1])
	*($5) = [34]
	CALL prints_l($5, [1])
	$10 = ((float_64)(CASTING float_64)(uint_64 ((int_64)$12 + (int_64)$11)) / (float_64)$13)
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$25 }
	$4 = [0]
	
.LOOP $label$27:
	*(($5 + $4)) = $3
	$0 = ($4 + [1])
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$26 }
	$4 = $0
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$27 }
	
.LABEL $label$26
	CALL prints_l($5, $0)
	
.LABEL $label$25
	*($5) = [34]
	CALL prints_l($5, [1])
	CALL prints([8450])
	*($5) = [34]
	CALL prints_l($5, [1])
	CALL prints([8802])
	*($5) = [34]
	CALL prints_l($5, [1])
	*($5) = [58]
	CALL prints_l($5, [1])
	*($5) = [34]
	CALL prints_l($5, [1])
	CALL printdf($10)
	*($5) = [34]
	CALL prints_l($5, [1])
	CALL prints([8450])
	*($5) = [34]
	CALL prints_l($5, [1])
	CALL prints([8818])
	*($5) = [34]
	CALL prints_l($5, [1])
	*($5) = [58]
	CALL prints_l($5, [1])
	*($5) = [34]
	CALL prints_l($5, [1])
	CALL printdf(((float_64)(CASTING float_64)(uint_64 *($5 + [176])) / (float_64)(float_64)1e6))
	*($5) = [34]
	CALL prints_l($5, [1])
	CALL prints([8643])
	$2 = *($5 + [112])
	if ( ($2 == 0) ){ goto $label$28 }
	$6 = ($5 + [116])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$30 }
	
.LOOP $label$31:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$32 }
	CALL $11($0)
	
.LABEL $label$32
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$31 }
	$4 = *(($5 + [112]))
	goto $label$29 
	
.LABEL $label$30
	$4 = $2
	
.LABEL $label$29
	*($6) = $2
	CALL $11($4)
	
.LABEL $label$28
	$2 = *($5 + [152])
	if ( ($2 == 0) ){ goto $label$33 }
	$6 = ($5 + [156])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$35 }
	
.LOOP $label$36:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$37 }
	CALL $11($0)
	
.LABEL $label$37
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$36 }
	$4 = *(($5 + [152]))
	goto $label$34 
	
.LABEL $label$35
	$4 = $2
	
.LABEL $label$34
	*($6) = $2
	CALL $11($4)
	
.LABEL $label$33
	$global$0 = ($5 + [192])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = *(($1 + [28]))
	if ( ((int_32)$2 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$2 = *(($2 + [-24]))
	if ( ((int_32)*($2 + [64]) == (int_32)$1) ){ goto $label$4 }
	CALL eosio_assert([0], [9651])
	
.LABEL $label$4
	if ( $2 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$2 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$2 = CALL $55($1, $2)
	if ( ((int_32)*($2 + [64]) == (int_32)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [9651])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	CALL eosio_assert([0], [9932])
	
.LABEL $label$1
	*($0) = *($2)
	*(($0 + [56])) = *(($2 + [56]))
	*(($0 + [48])) = *(($2 + [48]))
	*(($0 + [40])) = *(($2 + [40]))
	*(($0 + [32])) = *(($2 + [32]))
	*(($0 + [24])) = *(($2 + [24]))
	*(($0 + [16])) = *(($2 + [16]))
	*(($0 + [8])) = *(($2 + [8]))
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*(($1 + [36])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9725])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9771])
	
.LABEL $label$2
	$6 = *($3)
	*($1 + [8]) = *($6)
	$7 = ($1 + [16])
	$8 = *($7)
	$9 = *(($6 + [8]))
	*($7) = $9
	*($1 + [24]) = *(*($3 + [4]))
	*($1 + [32]) = *(*($3 + [8]))
	$6 = ($1 + [32])
	$7 = ($1 + [24])
	$10 = ($1 + [8])
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) == (int_64)(uint_64)$9 >> (uint_64)(int_64)8)) ){ goto $label$3 }
	CALL eosio_assert([0], [9822])
	
.LABEL $label$3
	$4 = $4
	$3 = ($4 + [-48])
	$global$0 = $3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($4 + [-15])
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $10
	*($5 + [40]) = $7
	*($5 + [44]) = $6
	*($5 + [32]) = $1
	CALL $64(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [40]), $2, $3, [33])
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9702])
	
.LABEL $label$5
	$4 = CALL $3($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $9([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [36]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [32])
	CALL $100(($3 + [32]), ($3 + [24]))
	*($5 + [40]) = $1
	*($3 + [24]) = $5
	$7 = (uint_64)*($5 + [16]) >> (uint_64)(int_64)8
	*($3 + [32]) = $7)
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $65(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $4($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $11($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9576])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [9576])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0 + [12])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$0) ){ goto $label$5 }
	CALL eosio_assert([0], [9961])
	$0 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [7]), $0, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	*($5) = ((int_32)*($2 + [7]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9961])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9961])
	$6 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$0 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($0, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $9(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $11($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $11($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $106($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $9($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $30($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $30($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $25($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $11($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $9(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $11($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $11($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = *($0)
	$3 = ($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [16]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [16]), $5, [8])
	*(($0 + [16])) = *($2 + [16])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$4 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy(($2 + [31]), $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	*(($0 + [24])) = ((int_32)*($2 + [31]) != (int_32)[0])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$5 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [15]), $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	*(($0 + [25])) = ((int_32)*($2 + [15]) != (int_32)[0])
	*($2 + [8]) = $0
	CALL $107(($2 + [8]), $1)
	$global$0 = ($2 + [32])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $26(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $26(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $11(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $11(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9961])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9961])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9961])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($5 + [24])) = *($2 + [8])
	*($0) = (*($0) + [8])
	CALL $105(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $86 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $3($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [66]) = [0]
	*($4 + [64]) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [96]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $90(($4 + [16]), ($4 + [96]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4)
	$3 = *($8)
	*((($4 + [96]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [80])
	*($4 + [32]) = $0
	*($4 + [96]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [72])
	$8 = *($4 + [66])
	$9 = *($4 + [65])
	$10 = *($4 + [64])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ((int_32)($10 & [255]) != (int_32)[0])), (int_32 ((int_32)($9 & [255]) != (int_32)[0])), (int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $4($2)
	
.LABEL $label$5
	$global$0 = ($4 + [112])
	return [1]
}

int_32 .FUNC $85 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $3($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [104]))) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = [0]
	*($4 + [76]) = $2
	*($4 + [72]) = $2
	*($4 + [80]) = ($2 + $7)
	*($4 + [160]) = ($4 + [72])
	*($4 + [40]) = ($4 + [88])
	CALL $91(($4 + [40]), ($4 + [160]))
	*(($9 = (($4 + [24]) + [8]))) = *($4 + [80])
	*($4 + [24]) = *($4 + [72])
	*(($3 = (($4 + [144]) + [8]))) = *($9)
	*($4 + [144]) = *($4 + [24])
	$9 = *($3)
	*((($4 + [160]) + [8])) = $9
	*(($4 + [64])) = $9
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$0 = *($4 + [144])
	*($4 + [56]) = $0
	*($4 + [160]) = $0
	*(($9 = (($4 + [128]) + [8]))) = *($8)
	*($4 + [128]) = *($4 + [96])
	$0 = *($4 + [88])
	$1 = *($4 + [112])
	$8 = *($4 + [120])
	*($3) = *($9)
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$10 = *((($4 + [144]) + [8]))
	*((($4 + [160]) + [8])) = $10
	*((($4 + [8]) + [8])) = $10
	$10 = *($4 + [144])
	*($4 + [8]) = $10
	*($4 + [160]) = $10
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $1), (int_64 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $4($2)
	
.LABEL $label$5
	$global$0 = ($4 + [176])
	return [1]
}

int_32 .FUNC $84 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $3($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [96]))) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [104]) = [0]
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = [0]
	*($4 + [128]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [68]) = $2
	*($4 + [64]) = $2
	*($4 + [72]) = ($2 + $7)
	*($4 + [176]) = ($4 + [64])
	*($4 + [32]) = ($4 + [80])
	CALL $89(($4 + [32]), ($4 + [176]))
	*(($9 = (($4 + [16]) + [8]))) = *($4 + [72])
	*($4 + [16]) = *($4 + [64])
	*(($3 = (($4 + [160]) + [8]))) = *($9)
	*($4 + [160]) = *($4 + [16])
	$9 = *($3)
	*((($4 + [176]) + [8])) = $9
	*(($4 + [56])) = $9
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$0 = *($4 + [160])
	*($4 + [48]) = $0
	*($4 + [176]) = $0
	*(($9 = (($4 + [144]) + [8]))) = *($8)
	*($4 + [144]) = *($4 + [88])
	$0 = *($4 + [80])
	$8 = *($4 + [104])
	$10 = *($4 + [105])
	$1 = *($4 + [112])
	$11 = *($4 + [120])
	$12 = *($4 + [128])
	$13 = *($4 + [136])
	*($3) = *($9)
	*($4 + [160]) = *($4 + [144])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$14 = *((($4 + [160]) + [8]))
	*((($4 + [176]) + [8])) = $14
	*(($4 + [8])) = $14
	$14 = *($4 + [160])
	*($4) = $14
	*($4 + [176]) = $14
	CALL void $3((int_32 $0), (int_64 $4), (int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 ((int_32)($10 & [255]) != (int_32)[0])), (int_32 $1), (int_64 ((int_32)($11 & [255]) != (int_32)[0])), (int_32 $12), (int_64 $13), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $4($2)
	
.LABEL $label$5
	$global$0 = ($4 + [192])
	return [1]
}

int_32 .FUNC $83 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $3($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $87(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $88(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $4($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $11(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL $0()
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [60]) = [0]
	*($3 + [56]) = [3]
	*($3 + [24]) = *($3 + [56])
	CALL $83($0, $1, ($3 + [24]))
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$2 }
	if ( ((int_64)$2 == (int_64)-4417057748574109696) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-3075276126730321920) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$2 }
	*($3 + [52]) = [0]
	*($3 + [48]) = [4]
	*($3) = *($3 + [48])
	CALL $84($1, $1, $3)
	goto $label$2 
	
.LABEL $label$4
	*($3 + [36]) = [0]
	*($3 + [32]) = [5]
	*($3 + [16]) = *($3 + [32])
	CALL $85($1, $1, ($3 + [16]))
	goto $label$2 
	
.LABEL $label$3
	*($3 + [44]) = [0]
	*($3 + [40]) = [6]
	*($3 + [8]) = *($3 + [40])
	CALL $86($1, $1, ($3 + [8]))
	
.LABEL $label$2
	CALL $43([0])
	$global$0 = ($3 + [64])
}

void .FUNC $81 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [48])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)$1 == (int_64)6138663591134630912) ){ goto $label$1 }
	if ( ((int_64)$1 == (int_64)6138663590285017088) ){ goto $label$1 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	$8 = *($4)
	$7 = CALL $17([9315])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$2 }
	if ( (CALL $38($4, [0], [-1], [9315], $7) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*(($8 = (($5 + [32]) + [8]))) = *(($3 + [8]))
	*($5 + [32]) = *($3)
	$4 = CALL $26(($5 + [16]), $4)
	$2 = *($0 + [8])
	*(($5 + [8])) = *($8)
	*($5) = *($5 + [32])
	CALL $70($0, $1, $5, $4, $2)
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	CALL $11(*($4 + [8]))
	
.LABEL $label$1
	$global$0 = ($5 + [48])
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $96(CALL $95($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9576])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9576])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [48])
	$global$0 = $5
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	*($5 + [16]) = $3
	*($5 + [8]) = $2
	$6 = CALL db_find_i64($2, $3, (int_64)3607749779137757184, $4)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $69(($5 + [8]), $6)
	if ( ((int_32)*($6 + [16]) == (int_32)($5 + [8])) ){ goto $label$5 }
	CALL eosio_assert([0], [9651])
	
.LABEL $label$5
	*($0) = *($6)
	*(($0 + [8])) = *(($6 + [8]))
	$7 = *($5 + [32])
	if ( ($7 == 0) ){ goto $label$3 }
	$8 = ($5 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	CALL $11($6)
	
.LABEL $label$7
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($5 + [32]))
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [9233])
	*(($0 + [8])) = *([0] + [8])
	*($0) = *([0])
	
.LABEL $label$3
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$2
	$0 = $7
	
.LABEL $label$1
	*($8) = $7
	CALL $11($0)
	$global$0 = ($5 + [48])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $9($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $42($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $70 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	float_64 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	float_64 $21
	int_64 $22
	float_64 $23
	float_64 $24
	int_64 $25
	int_64 $26
	float_64 $27
	float_64 $28
	float_64 $29
	int_32 $30
	float_64 $31
	float_64 $32
	float_64 $33
	float_64 $34
	float_64 $35
	int_32 $36
	float_32 $37
	float_32 $38
	int_32 $39
	$5 = ($global$0 - [512])
	$global$0 = $5
	$6 = *($2)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$7 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$7 = $9
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $9
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$7 }
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( ((int_64)$6 == (int_64)0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [8832])
	if ( ((int_64)$6 != (int_64)0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8849])
	
.LABEL $label$1
	$9 = *($2 + [8])
	$12 = CALL $41((float_64)10, (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $9) & [255])))
	$8 = CALL $26(($5 + [392]), $3)
	CALL $47(($5 + [408]), $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$8 }
	CALL $11(*($8 + [8]))
	
.LABEL $label$8
	if ( ((uint_32)((int_32)(*($5 + [412]) - *($5 + [408])) / (int_32)[12]) > (uint_32)[1]) ){ goto $label$9 }
	CALL eosio_assert([0], [8877])
	
.LABEL $label$9
	*(($5 + [384])) = [0]
	*($5 + [368]) = (int_64)-1
	*($5 + [376]) = (int_64)0
	$7 = *($0)
	*($5 + [352]) = $7
	*($5 + [360]) = $7
	$8 = CALL db_find_i64($7, $7, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$11 }
	if ( ((int_32)*(CALL $55(($5 + [352]), $8) + [64]) == (int_32)($5 + [352])) ){ goto $label$10 }
	CALL eosio_assert([0], [9651])
	goto $label$10 
	
.LABEL $label$11
	CALL eosio_assert([0], [8574])
	
.LABEL $label$10
	CALL $60(($5 + [288]), ($5 + [352]))
	if ( (*($5 + [313]) == 0) ){ goto $label$14 }
	if ( ((int_64)*($5 + [320]) == (int_64)$1) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	CALL eosio_assert([0], [8897])
	if ( ((int_64)*($5 + [320]) == (int_64)$1) ){ goto $label$12 }
	
.LABEL $label$13
	CALL eosio_assert([0], [8919])
	
.LABEL $label$12
	$8 = *($5 + [408])
	if ( (*($8) & [1]) ){ goto $label$16 }
	$8 = ($8 + [1])
	goto $label$15 
	
.LABEL $label$16
	$8 = *($8 + [8])
	
.LABEL $label$15
	*($5 + [272]) = $8
	*($5 + [276]) = CALL $17($8)
	*($5 + [24]) = *($5 + [272])
	if ( ((int_64)*(CALL $51(($5 + [280]), ($5 + [24]))) == (int_64)*($0)) ){ goto $label$17 }
	CALL eosio_assert([0], [8968])
	
.LABEL $label$17
	$8 = *($5 + [408])
	if ( (*($8 + [12]) & [1]) ){ goto $label$19 }
	$13 = (($8 + [12]) + [1])
	goto $label$18 
	
.LABEL $label$19
	$13 = *(($8 + [20]))
	
.LABEL $label$18
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$8 = CALL $17($13)
	if ( ($8 <= [8]) ){ goto $label$24 }
	CALL eosio_assert([0], [9478])
	goto $label$23 
	
.LABEL $label$24
	if ( ($8 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	$7 = (int_64)0
	
.LOOP $label$25:
	$11 = (($13 + $8) + [-1])
	$10 = *($11)
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$26 }
	CALL eosio_assert([0], [9523])
	$10 = *($11)
	
.LABEL $label$26
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$25 }
	if ( ((int_64)$9 != (int_64)$7) ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$22
	$7 = (int_64)0
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL eosio_assert([0], [8984])
	
.LABEL $label$20
	$1 = *((($5 + [288]) + [16]))
	$8 = CALL $71($0, $9, ($5 + [288]))
	$9 = *(($8 + [16]))
	$14 = *($8 + [24])
	$15 = *($8 + [8])
	$16 = *($8)
	$8 = CALL $71($0, $7, ($5 + [288]))
	$17 = *(($8 + [16]))
	$18 = *($8 + [24])
	$19 = *($8 + [8])
	$20 = *($8)
	if ( *($8 + [32]) ){ goto $label$27 }
	CALL eosio_assert([0], [9007])
	
.LABEL $label$27
	$21 = (CASTING float_64)(int_64 $6)
	$22 = (uint_64)$1 >> (uint_64)(int_64)8)
	$1 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = (uint_64)$17 >> (uint_64)(int_64)8)
	$10 = (CASTING uint_32)(uint_64 $17)
	if ( ((int_64)$16 == (int_64)$4) ){ goto $label$28 }
	CALL eosio_assert([0], [9037])
	
.LABEL $label$28
	$23 = ((float_64)$21 / (float_64)$12)
	CALL $72(($5 + [32]), $5, $16, *($0), $1)
	$4 = *($5 + [32])
	$12 = CALL $41((float_64)10, (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $9) & [255])))
	CALL $72(($5 + [32]), $5, $20, *($0), $7)
	$9 = *($5 + [32])
	$24 = (CASTING float_64)(uint_32 ($10 & [255]))
	$21 = CALL $41((float_64)10, $24)
	$8 = ($5 + [304])
	CALL $66(($5 + [32]), $5, *($5 + [288]), (uint_64)*($8) >> (uint_64)(int_64)8))
	$25 = *($5 + [296])
	$26 = *($5 + [32])
	$27 = CALL $41((float_64)10, (CASTING float_64)(uint_32 *($8)))
	$8 = ( *(($5 + [464])) ? ($5 + [457]) : (*($5 + [456]) & [1]) )
	*($5 + [256]) = $8
	*($5 + [260]) = CALL $17($8)
	*($5 + [16]) = *($5 + [256])
	$28 = ((float_64)(CASTING float_64)(int_64 ((int_64)$4 + (int_64))($15 - $6))) / (float_64)$12)
	$29 = ((float_64)(CASTING float_64)(int_64 ((int_64)$9 + (int_64)$19)) / (float_64)$21)
	$12 = ((float_64)(CASTING float_64)(int_64 ((int_64)$25 + (int_64)$26)) / (float_64)$27)
	$30 = CALL $51(($5 + [264]), ($5 + [16]))
	if ( ((int_64)$1 != (int_64)$22) ){ goto $label$36 }
	$9 = *($0)
	$6 = *($5 + [288])
	*(($5 + [248])) = [0]
	*($5 + [240]) = (int_64)0
	$8 = CALL $17([9061])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$31 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$35 }
	*($5 + [240]) = ($8 << [1])
	$11 = (($5 + [240]) | [1])
	if ( $8 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	if ( ((int_64)$14 != (int_64)$18) ){ goto $label$37 }
	if ( ((int_64)$7 == (int_64)$22) ){ goto $label$37 }
	$27 = ((float_64)((float_64)$23 / (float_64)((float_64)$23 + (float_64)$28)) * (float_64)$29)
	$21 = (float_64)0
	$8 = [1]
	if ( ((int_64)$7 != (int_64)$22) ){ goto $label$30 }
	goto $label$32 
	
.LABEL $label$37
	$21 = ((float_64)$12 * (float_64)(float_64))((float_64)1 - CALL $41(((float_64)((float_64)$23 / (float_64)$28) + (float_64)(float_64)1), ((float_64)(CASTING float_64)(int_64 $14) / (float_64)(float_64)1e6)))
	$12 = (float_64))($12 - $21))
	$21 = !(float_64)$21
	$27 = (float_64)0
	$8 = [0]
	if ( ((int_64)$7 == (int_64)$22) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$35
	$13 = (($8 + [16]) & [-16])
	$11 = CALL $9($13)
	*($5 + [240]) = ($13 | [1])
	*($5 + [248]) = $11
	*($5 + [244]) = $8
	
.LABEL $label$34
	CALL memcpy($11, [9061], $8)
	
.LABEL $label$33
	*(($11 + $8)) = [0]
	*(($11 = (($5 + [32]) + [24]))) = [0]
	*((($5 + [80]) + [8])) = *(($2 + [8]))
	$8 = (($5 + [240]) + [8])
	*((($5 + [80]) + [24])) = *($8)
	*($8) = [0]
	*($5 + [32]) = $6
	*($5 + [40]) = (int_64)-4993669930013425664
	*($5 + [48]) = (int_64)0
	*($5 + [80]) = *($2)
	*($5 + [96]) = *($5 + [240])
	*($5 + [240]) = (int_64)0
	*(($8 = CALL $9([16]))) = $9
	*($8 + [8]) = (int_64)3617214756542218240
	*(($5 + [68])) = [0]
	$13 = ($8 + [16])
	*($11) = $13
	*((($5 + [32]) + [20])) = $13
	*($5 + [48]) = $8
	*($5 + [60 align=4]) = (int_64)0
	$8 = *($5 + [96])
	$11 = ( *((($5 + [80]) + [20])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($11 + [16])
	$9 = (CASTING uint_64)(uint_32 $11)
	$11 = ($5 + [60])
	
.LOOP $label$38:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$38 }
	if ( ($8 == 0) ){ goto $label$40 }
	CALL $73($11, $8)
	$11 = *(($5 + [64]))
	$8 = *(($5 + [60]))
	goto $label$39 
	
.LABEL $label$40
	$11 = [0]
	$8 = [0]
	
.LABEL $label$39
	*($5 + [492]) = $8
	*($5 + [488]) = $8
	*($5 + [496]) = $11
	*($5 + [504]) = ($5 + [488])
	*($5 + [224]) = ($5 + [80])
	CALL $74(($5 + [224]), ($5 + [504]))
	CALL $75(($5 + [32]))
	$8 = *($5 + [60])
	if ( ($8 == 0) ){ goto $label$41 }
	*(($5 + [64])) = $8
	CALL $11($8)
	
.LABEL $label$41
	$8 = *($5 + [48])
	if ( ($8 == 0) ){ goto $label$42 }
	*(($5 + [52])) = $8
	CALL $11($8)
	
.LABEL $label$42
	if ( ((*(($5 + [96])) & [1]) == 0) ){ goto $label$43 }
	CALL $11(*(($5 + [104])))
	
.LABEL $label$43
	if ( ((*($5 + [240]) & [1]) == 0) ){ goto $label$44 }
	CALL $11(*(($5 + [248])))
	
.LABEL $label$44
	$27 = (float_64)0
	$8 = [0]
	$21 = $23
	if ( ((int_64)$7 != (int_64)$22) ){ goto $label$30 }
	
.LABEL $label$32
	$2 = [1]
	if ( ((int_32)(*($5 + [412]) - *($5 + [408])) == (int_32)[24]) ){ goto $label$29 }
	CALL eosio_assert([0], [9083])
	goto $label$29 
	
.LABEL $label$31
	CALL $25(($5 + [240]))
	
.LABEL $label$30
	$2 = [0]
	if ( ($8 == 0) ){ goto $label$45 }
	$21 = $27
	goto $label$29 
	
.LABEL $label$45
	$27 = ((float_64)$21 / (float_64)$12)
	$12 = (float_64))($12 - $21)
	$21 = ((float_64)$29 * (float_64)(float_64))((float_64)1 - CALL $41((float_64))((float_64)1 - $27), ((float_64)(float_64)1e6 / (float_64)(CASTING float_64)(int_64 $18)))))
	
.LABEL $label$29
	$13 = ((int_64)$1 == (int_64)$22)
	$11 = ((int_64)$7 == (int_64)$22)
	$31 = CALL $41(((float_64)((float_64)(CASTING float_64)(uint_64 *($5 + [344])) / (float_64)(float_64)-1e6) + (float_64)(float_64)1), ( (float_64)1 ? ( (float_64)1 ? (float_64)2 : $11 ) : $13 ))
	$27 = (CASTING float_64)(int_32 ($10 & [255]))
	$32 = CALL $41((float_64)10, $27)
	$33 = CALL $41((float_64)10, $27)
	$34 = CALL $41((float_64)10, $27)
	$35 = CALL $41((float_64)10, $27)
	CALL prints([8593])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8595])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([9118])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8607])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([9122])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([9133])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	$8 = *($3)
	$10 = ($8 & [1])
	CALL prints_l(( *($3 + [8]) ? ($3 + [1]) : $10 ), ( *($3 + [4]) ? uint_32($8 >> [1]) : $10 ))
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([9138])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL printn($16)
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([9152])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	$27 = ((float_64)$21 * (float_64)(float_64))((float_64)1 - $31)
	$31 = (Rounds 0)(((float_64)$32 * (float_64)$27)))
	$21 = (Rounds 0)(((float_64)$34 * (float_64)(float_64))($21 - $27)))
	$3 = (int_64)($1 == 0)
	if ( $3 ){ goto $label$46 }
	$8 = [0]
	$9 = $1
	
.LOOP $label$48:
	*((($5 + [32]) + $8)) = $9
	$10 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[5]) ){ goto $label$47 }
	$8 = $10
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$48 }
	
.LABEL $label$47
	CALL prints_l(($5 + [32]), $10)
	
.LABEL $label$46
	$27 = (float_64))($12 - $27)
	$31 = ((float_64)$31 / (float_64)$33)
	$21 = ((float_64)$21 / (float_64)$35)
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([9164])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL printn($20)
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([9176])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	$36 = (int_64)($7 == 0)
	if ( $36 ){ goto $label$49 }
	$8 = [0]
	$9 = $7
	
.LOOP $label$51:
	*((($5 + [32]) + $8)) = $9
	$10 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[5]) ){ goto $label$50 }
	$8 = $10
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$51 }
	
.LABEL $label$50
	CALL prints_l(($5 + [32]), $10)
	
.LABEL $label$49
	$12 = ( $27 ? $12 : $11 )
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([9186])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL printdf($23)
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([9193])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL printdf($21)
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([9200])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL printdf($31)
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8643])
	if ( $13 ){ goto $label$52 }
	CALL prints([8593])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8595])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8742])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8607])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8746])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8757])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL printdf($12)
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8770])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL printn($16)
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8787])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	if ( $3 ){ goto $label$53 }
	$8 = [0]
	
.LOOP $label$55:
	*((($5 + [32]) + $8)) = $1
	$10 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[5]) ){ goto $label$54 }
	$8 = $10
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$55 }
	
.LABEL $label$54
	CALL prints_l(($5 + [32]), $10)
	
.LABEL $label$53
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8802])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL printdf(((float_64)$23 + (float_64)$28))
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8818])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL printdf(((float_64)(CASTING float_64)(uint_64 $14) / (float_64)(float_64)1e6))
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8643])
	
.LABEL $label$52
	if ( $11 ){ goto $label$56 }
	CALL prints([8593])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8595])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8742])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8607])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8746])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8757])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL printdf($12)
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8770])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL printn($20)
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8787])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	if ( $36 ){ goto $label$57 }
	$8 = [0]
	$9 = $7
	
.LOOP $label$59:
	*((($5 + [32]) + $8)) = $9
	$10 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[5]) ){ goto $label$58 }
	$8 = $10
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$59 }
	
.LABEL $label$58
	CALL prints_l(($5 + [32]), $10)
	
.LABEL $label$57
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8802])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL printdf((float_64))($29 - $21))
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8450])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8818])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [58]
	CALL prints_l(($5 + [32]), [1])
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL printdf(((float_64)(CASTING float_64)(uint_64 $18) / (float_64)(float_64)1e6))
	*($5 + [32]) = [34]
	CALL prints_l(($5 + [32]), [1])
	CALL prints([8643])
	
.LABEL $label$56
	*($5 + [248]) = [0]
	*($5 + [240]) = (int_64)0
	$8 = (*($5 + [412]) - *($5 + [408]))
	$10 = ((int_32)$8 / (int_32)[12])
	if ( ($8 == 0) ){ goto $label$68 }
	if ( ((uint_32)$10 >= (uint_32)[357913942]) ){ goto $label$64 }
	$11 = CALL $9($8)
	*(($5 + [248])) = ($11 + ((int_32)$10 * (int_32)[12]))
	*($5 + [240]) = $11
	*($5 + [244]) = $11
	$10 = *($5 + [412])
	$8 = *($5 + [408])
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$67 }
	
.LOOP $label$69:
	CALL $26($11, $8)
	$11 = (*($5 + [244]) + [12])
	*($5 + [244]) = $11
	$8 = ($8 + [12])
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$69 }
	$8 = *($5 + [240])
	$10 = ($8 + [24])
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$68
	$10 = [24]
	$8 = [0]
	$11 = [0]
	goto $label$66 
	
.LABEL $label$67
	$8 = $11
	$10 = ($8 + [24])
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$65 }
	
.LABEL $label$66
	
.LOOP $label$70:
	if ( (*($8) & [1]) ){ goto $label$72 }
	*($8) = [0]
	goto $label$71 
	
.LABEL $label$72
	*(*(($8 + [8]))) = [0]
	*(($8 + [4])) = [0]
	
.LABEL $label$71
	CALL $30($8, [0])
	$13 = ($10 + [8])
	*(($8 + [8])) = *($13)
	*($8) = *($10)
	*($10) = (int_64)0
	*($13) = [0]
	$8 = ($8 + [12])
	$10 = ($10 + [12])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$70 }
	$11 = *($5 + [244])
	
.LABEL $label$65
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$73 }
	
.LOOP $label$74:
	$10 = ($11 + [-12])
	if ( ((*($10) & [1]) == 0) ){ goto $label$75 }
	CALL $11(*(($11 + [-4])))
	
.LABEL $label$75
	$11 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$74 }
	
.LABEL $label$73
	*($5 + [244]) = $8
	CALL $48(($5 + [408]), *($5 + [240]), $8)
	$8 = CALL $76(($5 + [152]), ($5 + [408]))
	CALL $46(($5 + [224]), $8)
	CALL $53($8)
	$12 = ((float_64)$21 * (float_64)CALL $41((float_64)10, $24))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$77 }
	$1 = (int_64)-9223372036854775808
	goto $label$76 
	
.LABEL $label$77
	$1 = (Rounds 0)($12)
	
.LABEL $label$76
	if ( (uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$78 }
	CALL eosio_assert([0], [9582])
	
.LABEL $label$78
	$8 = [0]
	
.LOOP $label$81:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$80 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$83 }
	$7 = $9
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$81 }
	goto $label$82 
	
.LABEL $label$83
	$7 = $9
	
.LOOP $label$84:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$80 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$84 }
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)*($5 + [412]) != (int_32)*($5 + [408])) ){ goto $label$79 }
	goto $label$61 
	
.LABEL $label$80
	CALL eosio_assert([0], [9631])
	if ( ((int_32)*($5 + [412]) == (int_32)*($5 + [408])) ){ goto $label$61 }
	
.LABEL $label$79
	$9 = *(($5 + [320]))
	if ( $2 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$64
	CALL $42(($5 + [240]))
	
.LABEL $label$63
	$39 = [43]
	goto $label$60 
	
.LABEL $label$62
	$39 = [11]
	goto $label$60 
	
.LABEL $label$61
	$9 = *($30)
	$13 = CALL $26(($5 + [136]), ($5 + [444]))
	$8 = ( *($13 + [8]) ? ($13 + [1]) : (*($13) & [1]) )
	$10 = ((int_32)*($8) == (int_32)[45])
	$37 = ( (float_32)-1 ? (float_32)1 : $10 )
	$11 = [0]
	$38 = (float_32)0
	$10 = ( ($8 + [1]) ? $8 : $10 )
	$8 = *($10)
	if ( ((int_32)$8 != (int_32)[46]) ){ goto $label$85 }
	$39 = [3]
	goto $label$60 
	
.LABEL $label$85
	$39 = [0]
	
.LABEL $label$60
	
.LOOP $label$86:
	goto $label$173 
	
.LABEL $label$175
	$10 = ($10 + [1])
	$8 = *($10)
	if ( ((int_32)$8 != (int_32)[46]) ){ goto $label$121 }
	$39 = [3]
	goto $label$86 
	
.LABEL $label$174
	$11 = [1]
	$10 = ($10 + [1])
	$8 = *($10)
	if ( ((int_32)$8 == (int_32)[46]) ){ goto $label$122 }
	$39 = [0]
	goto $label$86 
	
.LABEL $label$173
	if ( ($8 == 0) ){ goto $label$123 }
	$39 = [1]
	goto $label$86 
	
.LABEL $label$172
	if ( ((uint_32)(($8 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$119 }
	$39 = [4]
	goto $label$86 
	
.LABEL $label$171
	$38 = ((float_32)((float_32)$38 * (float_32)(float_32)10) + (float_32)(CASTING float_32)(int_32 (int_32(($8 << [24]) >> [24]) + [-48])))
	$37 = ( ((float_32)$37 / (float_32)(float_32)10) ? $37 : $11 )
	goto $label$120 
	
.LABEL $label$170
	$12 = ((float_64)CALL $41((float_64)10, $24) * (float_64)(PROMOTE float_64)(float_32 ((float_32)$38 * (float_32)$37)))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$118 }
	$39 = [51]
	goto $label$86 
	
.LABEL $label$169
	if ( ((int_64)$1 < (int_64)-9223372036854775808) ){ goto $label$116 }
	goto $label$115 
	
.LABEL $label$168
	if ( ((int_64)$1 >= (int_64)(Rounds 0)($12)) ){ goto $label$117 }
	$39 = [50]
	goto $label$86 
	
.LABEL $label$167
	CALL eosio_assert([0], [9298])
	$39 = [7]
	goto $label$86 
	
.LABEL $label$166
	if ( (*($13) & [1]) ){ goto $label$114 }
	$39 = [49]
	goto $label$86 
	
.LABEL $label$165
	if ( (*($5 + [328]) == 0) ){ goto $label$113 }
	$39 = [9]
	goto $label$86 
	
.LABEL $label$164
	*(($5 + [8])) = $17
	*($5 + [128]) = $17
	*($5) = $1
	*($5 + [120]) = $1
	CALL $77($5, $9, $20, $5)
	$39 = [10]
	goto $label$86 
	
.LABEL $label$163
	CALL $28(($5 + [224]), ($5 + [468]))
	if ( ($2 == 0) ){ goto $label$109 }
	$39 = [43]
	goto $label$86 
	
.LABEL $label$162
	$7 = *($0)
	*((($5 + [80]) + [16])) = $17
	*($5 + [88]) = $1
	*($5 + [80]) = $7
	CALL $26((($5 + [80]) + [24]), ($5 + [224]))
	*(($10 = (($5 + [32]) + [24]))) = [0]
	*($5 + [40]) = (int_64)8516769789752901632
	*($5 + [32]) = $20
	*($5 + [48]) = (int_64)0
	*(($8 = CALL $9([16]))) = $7
	*($8 + [8]) = (int_64)3617214756542218240
	$11 = ($8 + [16])
	*($10) = $11
	*(($5 + [52])) = $11
	*($5 + [48]) = $8
	CALL $78(($5 + [60]), ($5 + [80]))
	CALL $75(($5 + [32]))
	$8 = *($5 + [60])
	if ( ($8 == 0) ){ goto $label$88 }
	$39 = [44]
	goto $label$86 
	
.LABEL $label$161
	*(($5 + [64])) = $8
	CALL $11($8)
	$39 = [45]
	goto $label$86 
	
.LABEL $label$160
	$8 = *($5 + [48])
	if ( ($8 == 0) ){ goto $label$87 }
	$39 = [46]
	goto $label$86 
	
.LABEL $label$159
	*(($5 + [52])) = $8
	CALL $11($8)
	$39 = [47]
	goto $label$86 
	
.LABEL $label$158
	if ( ((*($5 + [104]) & [1]) == 0) ){ goto $label$110 }
	$39 = [48]
	goto $label$86 
	
.LABEL $label$157
	CALL $11(*(($5 + [112])))
	$39 = [11]
	goto $label$86 
	
.LABEL $label$156
	$7 = *($0)
	*((($5 + [32]) + [24])) = $17
	*($5 + [40]) = $9
	*($5 + [32]) = $7
	*($5 + [48]) = $1
	$10 = CALL $26((($5 + [32]) + [32]), ($5 + [224]))
	*($5 + [88]) = (int_64)-3617168760277827584
	*($5 + [80]) = $20
	*(($8 = CALL $9([16]))) = $7
	*($8 + [8]) = (int_64)3617214756542218240
	*((($5 + [80]) + [36])) = [0]
	$11 = ($8 + [16])
	*((($5 + [80]) + [24])) = $11
	*(($5 + [100])) = $11
	*($5 + [96]) = $8
	*($5 + [108 align=4]) = (int_64)0
	$8 = *($10)
	$10 = ( *((($5 + [32]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($10 + [32])
	$7 = (CASTING uint_64)(uint_32 $10)
	$10 = ($5 + [108])
	$39 = [12]
	goto $label$86 
	
.LABEL $label$155
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$108 }
	$39 = [13]
	goto $label$86 
	
.LABEL $label$154
	if ( ($8 == 0) ){ goto $label$107 }
	$39 = [14]
	goto $label$86 
	
.LABEL $label$153
	CALL $73($10, $8)
	$10 = *(($5 + [112]))
	$8 = *(($5 + [108]))
	goto $label$106 
	
.LABEL $label$152
	$10 = [0]
	$8 = [0]
	$39 = [15]
	goto $label$86 
	
.LABEL $label$151
	*($5 + [492]) = $8
	*($5 + [488]) = $8
	*($5 + [496]) = $10
	*($5 + [480]) = ($5 + [488])
	*($5 + [504]) = ($5 + [32])
	CALL $79(($5 + [504]), ($5 + [480]))
	CALL $75(($5 + [80]))
	$8 = *($5 + [108])
	if ( ($8 == 0) ){ goto $label$105 }
	$39 = [16]
	goto $label$86 
	
.LABEL $label$150
	*(($5 + [112])) = $8
	CALL $11($8)
	$39 = [17]
	goto $label$86 
	
.LABEL $label$149
	$8 = *($5 + [96])
	if ( ($8 == 0) ){ goto $label$104 }
	$39 = [18]
	goto $label$86 
	
.LABEL $label$148
	*(($5 + [100])) = $8
	CALL $11($8)
	$39 = [19]
	goto $label$86 
	
.LABEL $label$147
	if ( (*($5 + [64]) & [1]) ){ goto $label$103 }
	$39 = [41]
	goto $label$86 
	
.LABEL $label$146
	if ( (*($5 + [224]) & [1]) ){ goto $label$102 }
	$39 = [40]
	goto $label$86 
	
.LABEL $label$145
	$11 = *($5 + [240])
	if ( ($11 == 0) ){ goto $label$100 }
	$39 = [22]
	goto $label$86 
	
.LABEL $label$144
	$10 = *($5 + [244])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$97 }
	$39 = [23]
	goto $label$86 
	
.LABEL $label$143
	$39 = [24]
	goto $label$86 
	
.LABEL $label$142
	$8 = ($10 + [-12])
	if ( ((*($8) & [1]) == 0) ){ goto $label$95 }
	$39 = [25]
	goto $label$86 
	
.LABEL $label$141
	CALL $11(*(($10 + [-4])))
	$39 = [26]
	goto $label$86 
	
.LABEL $label$140
	$10 = $8
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$96 }
	$39 = [27]
	goto $label$86 
	
.LABEL $label$139
	$8 = *($5 + [240])
	goto $label$94 
	
.LABEL $label$138
	CALL $11(*(($5 + [72])))
	if ( ((*($5 + [224]) & [1]) == 0) ){ goto $label$101 }
	$39 = [21]
	goto $label$86 
	
.LABEL $label$137
	CALL $11(*($5 + [232]))
	$11 = *($5 + [240])
	if ( $11 ){ goto $label$98 }
	goto $label$99 
	
.LABEL $label$136
	CALL $11(*(($13 + [8])))
	if ( *($5 + [328]) ){ goto $label$111 }
	goto $label$112 
	
.LABEL $label$135
	$8 = $11
	$39 = [28]
	goto $label$86 
	
.LABEL $label$134
	*($5 + [244]) = $11
	CALL $11($8)
	$39 = [29]
	goto $label$86 
	
.LABEL $label$133
	$11 = *($5 + [376])
	if ( ($11 == 0) ){ goto $label$93 }
	$39 = [30]
	goto $label$86 
	
.LABEL $label$132
	$13 = ($5 + [380])
	$8 = *($13)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$92 }
	$39 = [31]
	goto $label$86 
	
.LABEL $label$131
	$39 = [32]
	goto $label$86 
	
.LABEL $label$130
	$8 = ($8 + [-24])
	$10 = *($8)
	*($8) = [0]
	if ( ($10 == 0) ){ goto $label$90 }
	$39 = [33]
	goto $label$86 
	
.LABEL $label$129
	CALL $11($10)
	$39 = [34]
	goto $label$86 
	
.LABEL $label$128
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$91 }
	$39 = [35]
	goto $label$86 
	
.LABEL $label$127
	$8 = *(($5 + [376]))
	goto $label$89 
	
.LABEL $label$126
	$8 = $11
	$39 = [36]
	goto $label$86 
	
.LABEL $label$125
	*($13) = $11
	CALL $11($8)
	$39 = [37]
	goto $label$86 
	
.LABEL $label$124
	CALL $53(($5 + [408]))
	$global$0 = ($5 + [512])
	return 
	
.LABEL $label$123
	$39 = [5]
	goto $label$86 
	
.LABEL $label$122
	$39 = [3]
	goto $label$86 
	
.LABEL $label$121
	$39 = [0]
	goto $label$86 
	
.LABEL $label$120
	$39 = [2]
	goto $label$86 
	
.LABEL $label$119
	$39 = [2]
	goto $label$86 
	
.LABEL $label$118
	$39 = [6]
	goto $label$86 
	
.LABEL $label$117
	$39 = [7]
	goto $label$86 
	
.LABEL $label$116
	$39 = [50]
	goto $label$86 
	
.LABEL $label$115
	$39 = [7]
	goto $label$86 
	
.LABEL $label$114
	$39 = [8]
	goto $label$86 
	
.LABEL $label$113
	$39 = [10]
	goto $label$86 
	
.LABEL $label$112
	$39 = [10]
	goto $label$86 
	
.LABEL $label$111
	$39 = [9]
	goto $label$86 
	
.LABEL $label$110
	$39 = [11]
	goto $label$86 
	
.LABEL $label$109
	$39 = [11]
	goto $label$86 
	
.LABEL $label$108
	$39 = [12]
	goto $label$86 
	
.LABEL $label$107
	$39 = [42]
	goto $label$86 
	
.LABEL $label$106
	$39 = [15]
	goto $label$86 
	
.LABEL $label$105
	$39 = [17]
	goto $label$86 
	
.LABEL $label$104
	$39 = [19]
	goto $label$86 
	
.LABEL $label$103
	$39 = [20]
	goto $label$86 
	
.LABEL $label$102
	$39 = [21]
	goto $label$86 
	
.LABEL $label$101
	$39 = [40]
	goto $label$86 
	
.LABEL $label$100
	$39 = [29]
	goto $label$86 
	
.LABEL $label$99
	$39 = [29]
	goto $label$86 
	
.LABEL $label$98
	$39 = [22]
	goto $label$86 
	
.LABEL $label$97
	$39 = [39]
	goto $label$86 
	
.LABEL $label$96
	$39 = [24]
	goto $label$86 
	
.LABEL $label$95
	$39 = [26]
	goto $label$86 
	
.LABEL $label$94
	$39 = [28]
	goto $label$86 
	
.LABEL $label$93
	$39 = [37]
	goto $label$86 
	
.LABEL $label$92
	$39 = [38]
	goto $label$86 
	
.LABEL $label$91
	$39 = [32]
	goto $label$86 
	
.LABEL $label$90
	$39 = [34]
	goto $label$86 
	
.LABEL $label$89
	$39 = [36]
	goto $label$86 
	
.LABEL $label$88
	$39 = [45]
	goto $label$86 
	
.LABEL $label$87
	$39 = [47]
	goto $label$86 
	(unreachable)
	(unreachable)
	$39
}

int_32 .FUNC $71 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	if ( ((int_64)(uint_64)*(($2 + [16])) >> (uint_64)(int_64)8) != (int_64)$1) ){ goto $label$4 }
	$0 = ($2 + [8])
	if ( (*([0] + [8264]) == 0) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$5 = *($0)
	*($3 + [8]) = $5
	*($3 + [16]) = $5
	$2 = CALL db_find_i64($5, $5, (int_64)-4994302950881886208, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	$4 = CALL $62(($3 + [8]), $2)
	if ( ((int_32)*($4 + [36]) == (int_32)($3 + [8])) ){ goto $label$7 }
	CALL eosio_assert([0], [9651])
	
.LABEL $label$7
	$6 = *($3 + [32])
	if ( $6 ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$6
	CALL eosio_assert([0], [9215])
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = ($3 + [36])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $11($0)
	
.LABEL $label$11
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($3 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $6
	
.LABEL $label$8
	*($7) = $6
	CALL $11($2)
	$global$0 = ($3 + [48])
	return $4
	
.LABEL $label$3
	*([0] + [8232]) = (int_64)0
	*([0] + [8224]) = (int_64)0
	*([0] + [8240]) = (int_64)0
	*([0] + [8264]) = [1]
	goto $label$1 
	
.LABEL $label$2
	$global$0 = ($3 + [48])
	return $4
	
.LABEL $label$1
	*([0] + [8248]) = (int_64)0
	$1 = *($2)
	*([0] + [8240]) = *(($0 + [8]))
	*([0] + [8232]) = *($0)
	*([0] + [8224]) = $1
	*([0] + [8256]) = *($2 + [24])
	$global$0 = ($3 + [48])
	return [8224]
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$2 = (*($1 + [4]) - *($1))
	$3 = ((int_32)$2 / (int_32)[12])
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = CALL $9($2)
	*(($4 = ($0 + [4]))) = $5
	*(($0 + [8])) = ($5 + ((int_32)$3 * (int_32)[12]))
	*($0) = $5
	$3 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $26($5, $2)
	$5 = (*($4) + [12])
	*($4) = $5
	$2 = ($2 + [12])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$4 }
	
.LABEL $label$3
	*($0 + [12 align=4]) = (int_64)0
	*(($0 + [20])) = [0]
	$2 = (*(($1 + [16])) - *($1 + [12]))
	$3 = ((int_32)$2 / (int_32)[24])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$1 }
	$5 = CALL $9($2)
	*(($4 = ($0 + [16]))) = $5
	*(($0 + [20])) = ($5 + ((int_32)$3 * (int_32)[24]))
	*(($0 + [12])) = $5
	$3 = *(($1 + [16]))
	$2 = *(($1 + [12]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	*($5) = *($2)
	CALL $26(($5 + [8]), ($2 + [8]))
	$5 = (*($4) + [24])
	*($4) = $5
	$2 = ($2 + [24])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$5
	CALL $26(($0 + [24]), ($1 + [24]))
	CALL $26(($0 + [36]), ($1 + [36]))
	CALL $26(($0 + [48]), ($1 + [48]))
	CALL $26(($0 + [60]), ($1 + [60]))
	return $0
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	CALL $42(($0 + [12]))
	(unreachable)
	return (unreachable)
}

void .FUNC $77 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($3 + [8])
	*($4 + [16]) = $1
	*($4 + [8]) = $2
	$3 = CALL db_find_i64($2, $1, (int_64)3607749779137757184, (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_32)$3) < (int_32)[0]) ){ goto $label$3 }
	if ( ((int_32)*(CALL $69(($4 + [8]), $3) + [16]) == (int_32)($4 + [8])) ){ goto $label$4 }
	CALL eosio_assert([0], [9651])
	
.LABEL $label$4
	$6 = *($4 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [9252])
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($4 + [36])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($3 + [-24])
	$8 = *($3)
	*($3) = [0]
	if ( ($8 == 0) ){ goto $label$8 }
	CALL $11($8)
	
.LABEL $label$8
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$7 }
	$3 = *(($4 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $6
	
.LABEL $label$5
	*($7) = $6
	CALL $11($3)
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9576])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $6) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9576])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy($6, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	CALL $101(*($1), (*($0) + [16]))
	$global$0 = ($2 + [16])
}

void .FUNC $39 (int_32 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $32(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $24(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8384], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $32(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $32(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $29($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $36($0, $1, $2, CALL $17($2))
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1 + [24])
	$4 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ([-24] - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$6 = ($1 + [24])
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $73($0, ([0] - $3))
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	
.LABEL $label$2
	*($2 + [12]) = $3
	*($2 + [8]) = $3
	*($2 + [16]) = $4
	$0 = ($4 - $3)
	if ( ((int_32)$0 > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9576])
	
.LABEL $label$4
	CALL memcpy($3, $1, [8])
	$4 = ($3 + [8])
	*($2 + [12]) = $4
	$7 = ($1 + [8])
	if ( ((int_32)($0 + [-8]) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9576])
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = ($3 + [16])
	*($2 + [12]) = $4
	*($2 + [24]) = *(($1 + [16]))
	if ( ((int_32)($0 + [-16]) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9576])
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [24]), [8])
	*($2 + [12]) = ($3 + [24])
	CALL $101(($2 + [8]), $6)
	$global$0 = ($2 + [32])
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9576])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9576])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9576])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9576])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $101(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $33($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $9($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $11($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $9(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $11($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $17($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $29($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $29($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}