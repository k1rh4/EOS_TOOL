(data (i32.const 8192) "invalid first pos\00")
(data (i32.const 8210) "parse memo error\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8313) "0123456789abcdef\00")
(data (i32.const 8330) "read_transaction failed\00")
(data (i32.const 17273) "\e2\99\a0\00")
(data (i32.const 17277) "\e2\99\a5\00")
(data (i32.const 17281) "\e2\99\a3\00")
(data (i32.const 17285) "\e2\99\a6\00")
(data (i32.const 17289) "A\00")
(data (i32.const 17291) "2\00")
(data (i32.const 17293) "3\00")
(data (i32.const 17295) "4\00")
(data (i32.const 17297) "5\00")
(data (i32.const 17299) "6\00")
(data (i32.const 17301) "7\00")
(data (i32.const 17303) "8\00")
(data (i32.const 17305) "9\00")
(data (i32.const 17307) "10\00")
(data (i32.const 17310) "J\00")
(data (i32.const 17312) "Q\00")
(data (i32.const 17314) "K\00")
(data (i32.const 17316) "had a unfinished game\00")
(data (i32.const 17338) "you need to handle your left card first\00")
(data (i32.const 17378) "round end error\00")
(data (i32.const 17394) "Push.\00")
(data (i32.const 17400) "Dealer Blackjack, insurance worked. (https://yum.games/blackjack.html#/)\00")
(data (i32.const 17473) "Surrendered.\00")
(data (i32.const 17486) "BlackJack.\00")
(data (i32.const 17497) "Won.\00")
(data (i32.const 17502) "Right BlackJack.\00")
(data (i32.const 17519) "Right won.\00")
(data (i32.const 17530) "Right push.\00")
(data (i32.const 17542) "you can only buy insurance once\00")
(data (i32.const 17574) "Only available as first decision of a hand\00")
(data (i32.const 17617) "insurance shoule be half of your bet\00")
(data (i32.const 17654) "you can only double bet once\00")
(data (i32.const 17683) "need double pay\00")
(data (i32.const 17699) "you can only double bet when your score is 11 and never hit\00")
(data (i32.const 17759) "you can only surrender at game begin\00")
(data (i32.const 17796) "you need to pay same to split\00")
(data (i32.const 17826) "you can only split your card when you hold two same cards in game started\00")
(data (i32.const 17900) "can only hit in spliting\00")
(data (i32.const 17925) "game not ready\00")
(data (i32.const 17940) "maintaining, try it later\00")
(data (i32.const 17966) "bet\00")
(data (i32.const 17970) "insure\00")
(data (i32.const 17977) "doublebet\00")
(data (i32.const 17987) "split\00")
(data (i32.const 17993) "already clean\00")
(data (i32.const 18007) "eosio.token\00")
(data (i32.const 18019) "transfer\00")
(data (i32.const 18028) "yumgamescoin\00")
(data (i32.const 18041) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 18090) "invalid symbol name\00")
(data (i32.const 18110) "overflow\00")
(data (i32.const 18119) "yumgamespool\00")
(data (i32.const 18132) "write\00")
(data (i32.const 18138) "|\00")
(data (i32.const 18140) "yumgamesrefs\00")
(data (i32.const 18156) "\f0F\00\00")
(data (i32.const 18160) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 18193) "Blackjack -- Transaction Hash:\00")
(data (i32.const 18224) "yumgamegroup\00")
(data (i32.const 18237) "cannot pass end iterator to modify\00")
(data (i32.const 18272) "object passed to modify is not in multi_index\00")
(data (i32.const 18318) "cannot modify objects in table of another contract\00")
(data (i32.const 18369) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18428) "need bet\00")
(data (i32.const 18437) "this round closed\00")
(data (i32.const 18455) "multiplication overflow\00")
(data (i32.const 18479) "multiplication underflow\00")
(data (i32.const 18504) " \00")
(data (i32.const 18506) "divide by zero\00")
(data (i32.const 18521) "signed division overflow\00")
(data (i32.const 18546) "player\00")
(data (i32.const 18553) "banker\00")
(data (i32.const 18560) "push\00")
(data (i32.const 18565) "error\00")
(data (i32.const 18571) ";\00")
(data (i32.const 18573) "cannot create objects in table of another contract\00")
(data (i32.const 18624) "you had split\00")
(data (i32.const 18638) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 18697) "attempt to add asset with different symbol\00")
(data (i32.const 18740) "addition underflow\00")
(data (i32.const 18759) "addition overflow\00")
(data (i32.const 18777) "only EOS, YUM token allowed\00")
(data (i32.const 18805) "quantity invalid\00")
(data (i32.const 18822) "invalid memo\00")
(data (i32.const 18835) "type error\00")
(data (i32.const 18846) "only allow EOS, YUM transfer\00")
(data (i32.const 18875) "no allow proxy transfer\00")
(data (i32.const 18899) "get\00")
(data (i32.const 18903) "read\00")
(data (i32.const 18908) "please check your bet amount\00")
(data (i32.const 18937) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18988) "error reading iterator\00")
(data (i32.const 19011) "cannot pass end iterator to erase\00")
(data (i32.const 19045) "cannot increment end iterator\00")
(data (i32.const 19075) "object passed to erase is not in multi_index\00")
(data (i32.const 19120) "cannot erase objects in table of another contract\00")
(data (i32.const 19170) "attempt to remove object that was not in multi_index\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "transaction_size" (func $fimport$2 (result i32)))
(import "env" "read_transaction" (func $fimport$3 (param i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$4 (param i32 i32 i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "db_lowerbound_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "tapos_block_num" (func $fimport$9 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$10 (result i32)))
(import "env" "current_receiver" (func $fimport$11 (result i64)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$13 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$14 (param i32 i32)))
(import "env" "require_auth" (func $fimport$15 (param i64)))
(import "env" "__multi3" (func $fimport$16 (param i32 i64 i64 i64 i64)))
(import "env" "send_deferred" (func $fimport$17 (param i32 i64 i32 i32 i32)))
(import "env" "require_recipient" (func $fimport$18 (param i64)))
(import "env" "action_data_size" (func $fimport$19 (result i32)))
(import "env" "read_action_data" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$23))
(import "env" "db_get_i64" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$25 (param i32)))
(import "env" "__unordtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$34 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$35 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$36 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$37 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$40 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$42 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$43 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$44 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $94))
(export "_Znwj" (func $141))
(export "_ZdlPv" (func $143))
(export "_Znaj" (func $142))
(export "_ZdaPv" (func $144))
(table $0 20 20 anyfunc)
(elem (i32.const 1) $79 $90 $77 $9 $71 $42 $65 $40 $89 $75 $74 $92 $93 $63 $39 $36 $6 $7 $8)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19223))
(global $global$2 i32 (i32.const 19223))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $165($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [32])) = (int_64)1398362884
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [18041])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [18090])
	*($3 + [40]) = (int_64)0
	*($3 + [84]) = $6
	*($3 + [80]) = $6
	*($3 + [88]) = ($6 + $7)
	*($3 + [48]) = ($3 + [80])
	*($3 + [64]) = ($3 + [16])
	CALL $106(($3 + [64]), ($3 + [48]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $169($6)
	
.LABEL $label$8
	*(($1 = (($3 + [48]) + [8]))) = *(($3 + [32]))
	*($3 + [48]) = *($3 + [24])
	$8 = *(($3 + [40]))
	$10 = *($3 + [16])
	*((($3 + [64]) + [8])) = *($1)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$12 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $12
	*(($3 + [8])) = $12
	$12 = *($3 + [64])
	*($3) = $12
	*($3 + [80]) = $12
	CALL void $1((int_32 $10), (int_64 $3), (int_32 $8), (int_64 $5))
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $165($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18903])
	CALL memcpy(($3 + [15]), $6, [1])
	$2 = *($3 + [15])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $169($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ((int_32)($2 & [255]) != (int_32)[0])), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [496])
	$global$0 = $3
	CALL memory()
	*((($3 + [256]) + [16])) = $0
	*((($3 + [256]) + [24])) = (int_64)-1
	$4 = (int_64)0
	*(($3 + [288])) = (int_64)0
	*(($3 + [296])) = [0]
	*(($3 + [312])) = $0
	*(($3 + [320])) = (int_64)-1
	*(($3 + [328])) = (int_64)0
	*(($3 + [336])) = [0]
	*(($3 + [352])) = $0
	*(($3 + [360])) = (int_64)-1
	*(($3 + [368])) = (int_64)0
	*(($3 + [376])) = [0]
	*(($3 + [392])) = $0
	*($3 + [264]) = $0
	*($3 + [256]) = $0
	*($3 + [304]) = $0
	*($3 + [344]) = $0
	*($3 + [384]) = $0
	*(($3 + [400])) = (int_64)-1
	*(($3 + [408])) = (int_64)0
	*(($3 + [416])) = [0]
	CALL $3(($3 + [464]))
	*(($3 + [456])) = *((($3 + [464]) + [24]))
	*(($3 + [448])) = *((($3 + [464]) + [16]))
	*(($3 + [440])) = *($3 + [472])
	*($3 + [432]) = *($3 + [464])
	$5 = (int_64)59
	$6 = [18007]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$6 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$8 = ($8 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$11 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [18019]
	$7 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$17 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$8 = ($8 + [-91])
	goto $label$15 
	
.LABEL $label$17
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$13
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$12 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$10 }
	
.LABEL $label$11
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [18028]
	$7 = (int_64)0
	
.LOOP $label$18:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$19 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$8 = ($8 + [-91])
	goto $label$20 
	
.LABEL $label$21
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$19
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$18 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$9 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [18019]
	$7 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$27 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$8 = ($8 + [-91])
	goto $label$25 
	
.LABEL $label$27
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$23
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$22 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$9 }
	
.LABEL $label$10
	*($3 + [252]) = [0]
	*($3 + [248]) = [1]
	*($3) = *($3 + [248])
	CALL $95(($3 + [256]), $3)
	$10 = *(($3 + [408]))
	if ( $10 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$29 }
	$4 = (int_64)7
	
.LOOP $label$30:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$30 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$28 }
	$4 = (int_64)5
	
.LOOP $label$31:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$31 }
	if ( ((int_64)6138663577826885632 != (int_64)$1) ){ goto $label$28 }
	
.LABEL $label$29
	if ( ((int_64)$2 <= (int_64)4923676291099525119) ){ goto $label$45 }
	if ( ((int_64)$2 > (int_64)6714450476416532479) ){ goto $label$44 }
	if ( ((int_64)$2 > (int_64)5563204106598219775) ){ goto $label$42 }
	if ( ((int_64)$2 == (int_64)4923676291099525120) ){ goto $label$39 }
	if ( ((int_64)$2 != (int_64)4923676749050413056) ){ goto $label$28 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [2]
	*($3 + [72]) = *($3 + [176])
	CALL $96(($3 + [256]), ($3 + [72]))
	$10 = *(($3 + [408]))
	if ( $10 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$45
	if ( ((int_64)$2 <= (int_64)-4223553234746212353) ){ goto $label$43 }
	if ( ((int_64)$2 > (int_64)-4157609156632641537) ){ goto $label$41 }
	if ( ((int_64)$2 == (int_64)-4223553234746212352) ){ goto $label$38 }
	if ( ((int_64)$2 != (int_64)-4223553040170729472) ){ goto $label$28 }
	*($3 + [196]) = [0]
	*($3 + [192]) = [3]
	*($3 + [56]) = *($3 + [192])
	CALL $97(($3 + [256]), ($3 + [56]))
	$10 = *(($3 + [408]))
	if ( $10 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$44
	if ( ((int_64)$2 > (int_64)7760265107912785919) ){ goto $label$40 }
	if ( ((int_64)$2 == (int_64)6714450476416532480) ){ goto $label$37 }
	if ( ((int_64)$2 != (int_64)7035938066976473088) ){ goto $label$28 }
	*($3 + [244]) = [0]
	*($3 + [240]) = [4]
	*($3 + [8]) = *($3 + [240])
	CALL $98(($3 + [256]), ($3 + [8]))
	$10 = *(($3 + [408]))
	if ( $10 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$43
	if ( ((int_64)$2 == (int_64)-7954134735498772480) ){ goto $label$36 }
	if ( ((int_64)$2 == (int_64)-5003315193367756800) ){ goto $label$35 }
	if ( ((int_64)$2 != (int_64)-4244761092849401856) ){ goto $label$28 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [5]
	*($3 + [112]) = *($3 + [136])
	CALL $97(($3 + [256]), ($3 + [112]))
	$10 = *(($3 + [408]))
	if ( $10 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$42
	if ( ((int_64)$2 == (int_64)5563204106598219776) ){ goto $label$34 }
	if ( ((int_64)$2 != (int_64)6112162363668955136) ){ goto $label$28 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [6]
	*($3 + [88]) = *($3 + [160])
	CALL $97(($3 + [256]), ($3 + [88]))
	$10 = *(($3 + [408]))
	if ( $10 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$41
	if ( ((int_64)$2 == (int_64)-4157609156632641536) ){ goto $label$33 }
	if ( ((int_64)$2 != (int_64)-4129953358985822208) ){ goto $label$28 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [7]
	*($3 + [40]) = *($3 + [208])
	CALL $97(($3 + [256]), ($3 + [40]))
	$10 = *(($3 + [408]))
	if ( $10 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$40
	if ( ((int_64)$2 == (int_64)7760265107912785920) ){ goto $label$32 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$28 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [8]
	*($3 + [104]) = *($3 + [144])
	CALL $96(($3 + [256]), ($3 + [104]))
	$10 = *(($3 + [408]))
	if ( $10 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$39
	*($3 + [188]) = [0]
	*($3 + [184]) = [9]
	*($3 + [64]) = *($3 + [184])
	CALL $97(($3 + [256]), ($3 + [64]))
	$10 = *(($3 + [408]))
	if ( $10 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$38
	*($3 + [204]) = [0]
	*($3 + [200]) = [10]
	*($3 + [48]) = *($3 + [200])
	CALL $97(($3 + [256]), ($3 + [48]))
	$10 = *(($3 + [408]))
	if ( $10 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$37
	*($3 + [132]) = [0]
	*($3 + [128]) = [11]
	*($3 + [120]) = *($3 + [128])
	CALL $97(($3 + [256]), ($3 + [120]))
	$10 = *(($3 + [408]))
	if ( $10 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$36
	*($3 + [172]) = [0]
	*($3 + [168]) = [12]
	*($3 + [80]) = *($3 + [168])
	CALL $99(($3 + [256]), ($3 + [80]))
	$10 = *(($3 + [408]))
	if ( $10 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$35
	*($3 + [156]) = [0]
	*($3 + [152]) = [13]
	*($3 + [96]) = *($3 + [152])
	CALL $100(($3 + [256]), ($3 + [96]))
	$10 = *(($3 + [408]))
	if ( $10 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$34
	*($3 + [220]) = [0]
	*($3 + [216]) = [14]
	*($3 + [32]) = *($3 + [216])
	CALL $101(($3 + [256]), ($3 + [32]))
	$10 = *(($3 + [408]))
	if ( $10 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$33
	*($3 + [228]) = [0]
	*($3 + [224]) = [15]
	*($3 + [24]) = *($3 + [224])
	CALL $97(($3 + [256]), ($3 + [24]))
	$10 = *(($3 + [408]))
	if ( $10 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$32
	*($3 + [236]) = [0]
	*($3 + [232]) = [16]
	*($3 + [16]) = *($3 + [232])
	CALL $97(($3 + [256]), ($3 + [16]))
	
.LABEL $label$28
	$10 = *(($3 + [408]))
	if ( ($10 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$11 = ($3 + [412])
	$6 = *($11)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$47 }
	
.LOOP $label$48:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$49 }
	CALL _ZdlPv($8)
	
.LABEL $label$49
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$48 }
	$6 = *(($3 + [408]))
	goto $label$46 
	
.LABEL $label$47
	$6 = $10
	
.LABEL $label$46
	*($11) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$7
	CALL $102(($3 + [368]))
	$10 = *(($3 + [328]))
	if ( ($10 == 0) ){ goto $label$50 }
	$11 = ($3 + [332])
	$6 = *($11)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$52 }
	
.LOOP $label$53:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$54 }
	CALL _ZdlPv($8)
	
.LABEL $label$54
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$53 }
	$6 = *(($3 + [328]))
	goto $label$51 
	
.LABEL $label$52
	$6 = $10
	
.LABEL $label$51
	*($11) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$50
	CALL $103(($3 + [288]))
	CALL $158([0])
	$global$0 = ($3 + [496])
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $165($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [18041])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [18090])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $104(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $169($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $105(($3 + [64]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = $global$0
	$3 = $2
	$4 = *($1 + [4])
	$1 = *($1)
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$2 }
	$2 = CALL $165($5)
	CALL read_action_data($2, $5)
	CALL $169($2)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	$5 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($5) + $1))
	
.LABEL $label$3
	CALL void $5((int_32 $1))
	$global$0 = $3
	return [1]
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $165($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [18903])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $169($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $90 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = ($0 + [8])
	$5 = CALL $10($4, $3)
	
.LOOP $label$2:
	CALL eosio_assert([1], [19011])
	CALL eosio_assert([1], [19045])
	$3 = [0]
	$6 = CALL db_next_i64(*($5 + [192]), ($1 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $10($4, $6)
	
.LABEL $label$3
	CALL $12($4, $5)
	$5 = $3
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [48])
	$5 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $14($3, $5)
	
.LABEL $label$4
	$5 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($5, [19011])
	CALL eosio_assert($5, [19045])
	$5 = CALL db_next_i64(*($2 + [36]), ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	CALL $14($3, $5)
	
.LABEL $label$5
	CALL $91($3, $2)
	$3 = CALL db_lowerbound_i64(*($0 + [88]), *(($0 + [96])), (int_64)7760153360560291840, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$4 = ($0 + [88])
	$5 = CALL $52($4, $3)
	
.LOOP $label$7:
	CALL eosio_assert([1], [19011])
	CALL eosio_assert([1], [19045])
	$3 = [0]
	$6 = CALL db_next_i64(*($5 + [228]), ($1 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$3 = CALL $52($4, $6)
	
.LABEL $label$8
	CALL $53($4, $5)
	$5 = $3
	if ( $3 ){ goto $label$7 }
	
.LABEL $label$6
	$3 = CALL db_lowerbound_i64(*($0 + [128]), *(($0 + [136])), (int_64)6454109460926300160, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	$4 = ($0 + [128])
	$5 = CALL $11($4, $3)
	
.LOOP $label$10:
	CALL eosio_assert([1], [19011])
	CALL eosio_assert([1], [19045])
	$3 = [0]
	$6 = CALL db_next_i64(*($5 + [52]), ($1 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$11 }
	$3 = CALL $11($4, $6)
	
.LABEL $label$11
	CALL $13($4, $5)
	$5 = $3
	if ( $3 ){ goto $label$10 }
	
.LABEL $label$9
	$global$0 = ($1 + [16])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [19075])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [19120])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [19170])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [48])
	$4 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $14($3, $5)
	
.LABEL $label$1
	$6 = *($0)
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [18237])
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$3), [18272])
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL eosio_assert1()), [18318])
	*($4 + [8]) = $1
	$7 = *($4)
	CALL eosio_assert([1], [18369])
	*($2 + [48]) = ($2 + [25])
	*($2 + [44]) = $2
	*($2 + [40]) = $2
	*($2 + [56]) = ($2 + [40])
	*($2 + [68]) = ($4 + [8])
	*($2 + [64]) = $4
	*($2 + [72]) = ($4 + [16])
	*($2 + [76]) = ($4 + [24])
	CALL $17(($2 + [64]), ($2 + [56]))
	CALL db_update_i64(*($4 + [36]), $6, $2, [25])
	$4 = ($0 + [64])
	if ( (uint_64)($7 <= *($4)) ){ goto $label$2 }
	*($4) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$global$0 = ($2 + [80])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	CALL require_auth(*($0))
	CALL require_recipient($2)
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = *($0 + [224])
	$0 = *($0)
	$3 = (CASTING uint_64)(uint_32 ( *(($0 + [228])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	$2 = *($1)
	$1 = *($2)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$4 = *(($0 + [224]))
	$4 = ( *(($0 + [228])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$2 }
	$1 = ($4 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($0 + [236])
	$3 = (CASTING uint_64)(uint_32 ( *(($0 + [240])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$4 = *(($0 + [236]))
	$4 = ( *(($0 + [240])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$4 }
	$1 = ($4 + $1)
	*($2) = $1
	
.LABEL $label$4
	$4 = *($0 + [248])
	$3 = (CASTING uint_64)(uint_32 ( *(($0 + [252])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *(($0 + [248]))
	$0 = ( *(($0 + [252])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	*($2) = ($0 + $1)
	
.LABEL $label$6
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18132])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [18132])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $119($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0 + [4])
	*($1 + [16]) = *($2 + [8])
	*($1 + [8]) = *($2)
	*($1) = *(*(*($0) + [4]) + [24])
	$3 = *($0 + [8])
	*(($1 + [56])) = *(($2 + [56]))
	*(($1 + [48])) = *(($2 + [48]))
	*(($1 + [40])) = *(($2 + [40]))
	*($1 + [32]) = *($2 + [32])
	$2 = *($0 + [4])
	*($1 + [64]) = *($2 + [64])
	*(($1 + [88])) = *(($2 + [88]))
	*(($1 + [80])) = *(($2 + [80]))
	*(($1 + [72])) = *(($2 + [72]))
	$2 = *($0 + [4])
	*($1 + [96]) = *($2 + [96])
	*($1 + [104]) = *($2 + [104])
	*(($1 + [120])) = *(($2 + [120]))
	*($1 + [112]) = *($2 + [112])
	$2 = *($0 + [4])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	CALL $109(($1 + [128]), *(($2 + [128])), *(($2 + [132])))
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	CALL $109(($1 + [140]), *(($2 + [140])), *(($2 + [144])))
	$2 = *(($0 + [4]))
	
.LABEL $label$2
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$3 }
	CALL $109(($1 + [152]), *(($2 + [152])), *(($2 + [156])))
	$2 = *(($0 + [4]))
	
.LABEL $label$3
	*($1 + [178 align=2]) = *($2 + [181 align=1])
	*($1 + [176]) = *($2 + [179 align=1])
	*($1 + [168]) = *($2 + [168])
	*($1 + [182]) = *($2 + [185])
	*(($1 + [216])) = *(($3 + [200]))
	*($1 + [192]) = *($3 + [176])
	*(($1 + [200])) = *(($3 + [184]))
	*(($1 + [208])) = *(($3 + [192]))
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18132])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [18132])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [18132])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $119(CALL $118($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $130 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [112])
	$global$0 = $3
	*($0 + [112]) = (int_64)0
	*(($4 = ($0 + [120]))) = (int_64)1398362884
	CALL eosio_assert([1], [18041])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [18090])
	*($0 + [128 align=4]) = (int_64)0
	*(($0 + [136])) = (int_64)0
	*(($0 + [144])) = (int_64)0
	*($0 + [152 align=4]) = (int_64)0
	*(($0 + [160])) = [0]
	*($0 + [188]) = $1
	*($3 + [8]) = *($2 + [4])
	*($3 + [20]) = ($0 + [8])
	*($3 + [16]) = $0
	*($3 + [24]) = ($0 + [16])
	*($3 + [28]) = ($0 + [32])
	*($3 + [32]) = ($0 + [64])
	*($3 + [36]) = ($0 + [96])
	*($3 + [40]) = ($0 + [104])
	*($3 + [44]) = ($0 + [112])
	*($3 + [48]) = ($0 + [128])
	*($3 + [52]) = ($0 + [140])
	*($3 + [56]) = ($0 + [152])
	*($3 + [60]) = ($0 + [168])
	*($3 + [64]) = ($0 + [176])
	*($3 + [68]) = ($0 + [177])
	*($3 + [72]) = ($0 + [178])
	*($3 + [76]) = ($0 + [179])
	*($3 + [80]) = ($0 + [180])
	*($3 + [84]) = ($0 + [181])
	*($3 + [88]) = ($0 + [182])
	*($3 + [96]) = ($0 + [184])
	*($3 + [92]) = ($0 + [183])
	*($3 + [100]) = ($0 + [185])
	*($3 + [104]) = ($0 + [186])
	CALL $131(($3 + [16]), ($3 + [8]))
	*($0 + [192]) = *(*($2 + [8]))
	$global$0 = ($3 + [112])
	return $0
}

void .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18903])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [18903])
	CALL memcpy($3, *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [18903])
	CALL memcpy($3, *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18903])
	CALL memcpy(($3 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $132(*($1), *($0 + [32]))
	CALL $132(*($1), *($0 + [36]))
	CALL $132(*($1), *($0 + [40]))
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18903])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [52])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18903])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [56])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18903])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [60])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18903])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [64])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18903])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [68])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18903])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [72])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18903])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [76])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18903])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [80])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18903])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [84])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18903])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($0 + [88])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [18903])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18899])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = ($6 - $7)
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $133($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + $2)
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((int_32)*($5) != (int_32)$3), [18903])
	CALL memcpy($7, *($2), [1])
	$3 = (*($2) + [1])
	*($2) = $3
	$7 = ($7 + [1])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $157($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $134 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = *($1 + [152])
	if ( ($4 == 0) ){ goto $label$4 }
	*(($1 + [156])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$4 = *($1 + [140])
	if ( ($4 == 0) ){ goto $label$5 }
	*(($1 + [144])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($1 + [128])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($1 + [132])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$7 }
	CALL _ZdlPv($1)
	
.LABEL $label$7
	return $0
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [18132])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [18132])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [18132])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [18132])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [18132])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [18132])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $136 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($0 + [112]) = (int_64)0
	*(($4 = ($0 + [120]))) = (int_64)1398362884
	CALL eosio_assert([1], [18041])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [18090])
	*($0 + [128 align=4]) = (int_64)0
	*(($0 + [136])) = (int_64)0
	*(($0 + [144])) = (int_64)0
	*($0 + [152 align=4]) = (int_64)0
	*(($0 + [160])) = [0]
	*($0 + [224]) = $1
	*($3 + [8]) = *($2 + [4])
	*($3 + [20]) = ($0 + [8])
	*($3 + [16]) = $0
	*($3 + [24]) = ($0 + [16])
	*($3 + [28]) = ($0 + [32])
	*($3 + [32]) = ($0 + [64])
	*($3 + [36]) = ($0 + [96])
	*($3 + [40]) = ($0 + [104])
	*($3 + [44]) = ($0 + [112])
	*($3 + [48]) = ($0 + [128])
	*($3 + [52]) = ($0 + [140])
	*($3 + [56]) = ($0 + [152])
	*($3 + [60]) = ($0 + [168])
	*($3 + [64]) = ($0 + [176])
	*($3 + [68]) = ($0 + [177])
	*($3 + [72]) = ($0 + [178])
	*($3 + [76]) = ($0 + [179])
	*($3 + [80]) = ($0 + [180])
	*($3 + [84]) = ($0 + [181])
	*($3 + [88]) = ($0 + [182])
	*($3 + [92]) = ($0 + [192])
	CALL $137(($3 + [16]), ($3 + [8]))
	*($0 + [228]) = *(*($2 + [8]))
	$global$0 = ($3 + [96])
	return $0
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [18903])
	CALL memcpy($2, *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [18903])
	CALL memcpy($2, *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18903])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $132(*($1), *($0 + [32]))
	CALL $132(*($1), *($0 + [36]))
	CALL $132(*($1), *($0 + [40]))
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18903])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18903])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18903])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18903])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18903])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [68])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18903])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [72])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18903])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [76])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [18903])
	CALL memcpy($3, *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$4 = ($global$0 - [128])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [188])) == (int_32)$0), [18272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [18318])
	$6 = ($1 + [8])
	$7 = *($1 + [8])
	$8 = $7
	$10 = *($3)
	$9 = ($1 + [140])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$1 }
	CALL $109($9, *($10), *($10 + [4]))
	$8 = *($6)
	
.LABEL $label$1
	*($1 + [176]) = *(*($3 + [4]))
	CALL eosio_assert(((int_64)$7 == (int_64)$8), [18369])
	$11 = ($1 + [128])
	$12 = ($1 + [176])
	$13 = *($1 + [128])
	$10 = *(($1 + [132]))
	$14 = ($10 - $13)
	$8 = (CASTING uint_64)(uint_32 $14)
	$3 = [113]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	$3 = ( $3 ? ($14 + $3) : ((int_32)$13 == (int_32)$10) )
	$13 = *($1 + [140])
	$10 = *(($1 + [144]))
	$14 = ($10 - $13)
	$8 = (CASTING uint_64)(uint_32 $14)
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$3 = ( $3 ? ($14 + $3) : ((int_32)$13 == (int_32)$10) )
	$13 = ($1 + [152])
	$14 = *($1 + [152])
	$10 = *(($1 + [156]))
	$15 = ($10 - $14)
	$8 = (CASTING uint_64)(uint_32 $15)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	$10 = (( $3 ? ($15 + $3) : ((int_32)$14 == (int_32)$10) ) + [19])
	if ( ($10 <= [513]) ){ goto $label$6 }
	$3 = CALL $165($10)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($4 - (($10 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$5
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $10)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $6
	*($5 + [64]) = $11
	*($5 + [68]) = $9
	*($5 + [72]) = $13
	*($5 + [80]) = $12
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [32])
	*($5 + [48]) = ($1 + [64])
	*($5 + [52]) = ($1 + [96])
	*($5 + [56]) = ($1 + [104])
	*($5 + [60]) = ($1 + [112])
	*($5 + [76]) = ($1 + [168])
	*($5 + [84]) = ($1 + [177])
	*($5 + [88]) = ($1 + [178])
	*($5 + [92]) = ($1 + [179])
	*($5 + [96]) = ($1 + [180])
	*($5 + [100]) = ($1 + [181])
	*($5 + [104]) = ($1 + [182])
	*($5 + [112]) = ($1 + [184])
	*($5 + [108]) = ($1 + [183])
	*($5 + [116]) = ($1 + [185])
	*($5 + [120]) = ($1 + [186])
	CALL $110(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [192]), $2, $3, $10)
	if ( ((uint_32)$10 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $169($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [128])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [128])
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[40])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$3 }
	$3 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$2 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	$3 = (*($2) + [40])
	*($2) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $157($0)
	
.LABEL $label$2
	$7 = ($2 + ((int_32)$3 * (int_32)[40]))
	$8 = ($2 + ((int_32)$5 * (int_32)[40]))
	$3 = $8
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	$3 = ($3 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$9 = ($2 + ((int_32)$6 * (int_32)[40]))
	$3 = *($0)
	$10 = *(($0 + [4]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$10 }
	$11 = ($3 - $10)
	$2 = [0]
	
.LOOP $label$11:
	$1 = ($10 + $2)
	*((($3 = ($8 + $2)) + [-32])) = *(($1 + [-32]))
	*(($3 + [-40])) = *(($1 + [-40]))
	*(($6 = ($3 + [-24]))) = (int_64)0
	*(($4 = ($3 + [-16]))) = [0]
	$5 = ($1 + [-24])
	*($6) = *($5)
	$6 = ($1 + [-16])
	*($4) = *($6)
	*($6) = [0]
	*(($6 = ($3 + [-12]))) = (int_64)0
	*(($3 = ($3 + [-4]))) = [0]
	$4 = ($1 + [-12])
	*($6) = *($4)
	*($5) = (int_64)0
	$1 = ($1 + [-4])
	*($3) = *($1)
	*($1) = [0]
	*($4) = (int_64)0
	$2 = ($2 + [-40])
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$11 }
	$8 = ($8 + $2)
	$3 = *(($0 + [4]))
	$6 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$6 = $3
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $9
	*(($0 + [8])) = $7
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = *(($3 + [-12]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($3 + [-8])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$1 = ($3 + [-40])
	$2 = *(($3 + [-24]))
	if ( ($2 == 0) ){ goto $label$15 }
	*(($3 + [-20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$15
	$3 = $1
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($6 == 0) ){ goto $label$1 }
	CALL _ZdlPv($6)
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $49 (int_32 $0)
{
	int_32 $1
	if ( (*($0 + [248]) & [1]) ){ goto $label$11 }
	if ( (*($0 + [236]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*(($0 + [256])))
	if ( ((*($0 + [236]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($0 + [244])))
	$1 = [1]
	if ( ((*($0 + [224]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$1 = [1]
	if ( (*($0 + [224]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( (*($0 + [212]) & $1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*(($0 + [232])))
	if ( ((*($0 + [212]) & $1) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($0 + [220])))
	if ( ((*($0 + [200]) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( (*($0 + [200]) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = *($0 + [152])
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	CALL _ZdlPv(*(($0 + [208])))
	$1 = *($0 + [152])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*(($0 + [156])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$1 = *($0 + [140])
	if ( ($1 == 0) ){ goto $label$12 }
	*(($0 + [144])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$1 = *($0 + [128])
	if ( ($1 == 0) ){ goto $label$13 }
	*(($0 + [132])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$13
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [112])
	$global$0 = $2
	$3 = *($0)
	*($2 + [8]) = *($1)
	*($2 + [20]) = ($3 + [8])
	*($2 + [16]) = $3
	*($2 + [24]) = ($3 + [16])
	*($2 + [28]) = ($3 + [32])
	*($2 + [32]) = ($3 + [64])
	*($2 + [36]) = ($3 + [96])
	*($2 + [40]) = ($3 + [104])
	*($2 + [44]) = ($3 + [112])
	*($2 + [48]) = ($3 + [128])
	*($2 + [52]) = ($3 + [140])
	*($2 + [56]) = ($3 + [152])
	*($2 + [60]) = ($3 + [168])
	*($2 + [64]) = ($3 + [176])
	*($2 + [68]) = ($3 + [177])
	*($2 + [72]) = ($3 + [178])
	*($2 + [76]) = ($3 + [179])
	*($2 + [80]) = ($3 + [180])
	*($2 + [84]) = ($3 + [181])
	*($2 + [88]) = ($3 + [182])
	*($2 + [96]) = ($3 + [184])
	*($2 + [92]) = ($3 + [183])
	*($2 + [100]) = ($3 + [185])
	*($2 + [104]) = ($3 + [186])
	CALL $110(($2 + [16]), ($2 + [8]))
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($0 + [4]), ($3 + [192]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $112(*($1), ($3 + [200]))
	CALL $112(*($1), ($3 + [212]))
	CALL $112(*($1), ($3 + [224]))
	CALL $112(*($1), ($3 + [236]))
	CALL $112(*($1), ($3 + [248]))
	$global$0 = ($2 + [112])
}

int_32 .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18899])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $26($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18903])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$4 = ($global$0 - [128])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [188])) == (int_32)$0), [18272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [18318])
	$3 = *($3)
	*($1 + [32]) = *($3)
	*(($1 + [56])) = *(($3 + [24]))
	*(($1 + [48])) = *(($3 + [16]))
	*(($1 + [40])) = *(($3 + [8]))
	*($1 + [186]) = [1]
	$6 = *($1 + [8])
	CALL eosio_assert([1], [18369])
	$7 = ($1 + [128])
	$8 = ($1 + [186])
	$9 = ($1 + [32])
	$10 = ($1 + [8])
	$12 = *($1 + [128])
	$11 = *(($1 + [132]))
	$13 = ($11 - $12)
	$14 = (CASTING uint_64)(uint_32 $13)
	$3 = [113]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$1 }
	$3 = ( $3 ? ($13 + $3) : ((int_32)$12 == (int_32)$11) )
	$12 = ($1 + [140])
	$13 = *($1 + [140])
	$11 = *(($1 + [144]))
	$15 = ($11 - $13)
	$14 = (CASTING uint_64)(uint_32 $15)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$2 }
	$3 = ( $3 ? ($15 + $3) : ((int_32)$13 == (int_32)$11) )
	$13 = ($1 + [152])
	$15 = *($1 + [152])
	$11 = *(($1 + [156]))
	$16 = ($11 - $15)
	$14 = (CASTING uint_64)(uint_32 $16)
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$3 }
	$11 = (( $3 ? ($16 + $3) : ((int_32)$15 == (int_32)$11) ) + [19])
	if ( ($11 <= [513]) ){ goto $label$5 }
	$3 = CALL $165($11)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($4 - (($11 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$4
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $11)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $10
	*($5 + [44]) = $9
	*($5 + [64]) = $7
	*($5 + [68]) = $12
	*($5 + [72]) = $13
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [16])
	*($5 + [48]) = ($1 + [64])
	*($5 + [52]) = ($1 + [96])
	*($5 + [56]) = ($1 + [104])
	*($5 + [60]) = ($1 + [112])
	*($5 + [76]) = ($1 + [168])
	*($5 + [80]) = ($1 + [176])
	*($5 + [84]) = ($1 + [177])
	*($5 + [88]) = ($1 + [178])
	*($5 + [92]) = ($1 + [179])
	*($5 + [96]) = ($1 + [180])
	*($5 + [100]) = ($1 + [181])
	*($5 + [104]) = ($1 + [182])
	*($5 + [112]) = ($1 + [184])
	*($5 + [108]) = ($1 + [183])
	*($5 + [116]) = ($1 + [185])
	*($5 + [120]) = $8
	CALL $110(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [192]), $2, $3, $11)
	if ( ((uint_32)$11 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $169($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [128])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [128])
}

void .FUNC $42 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [1168])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [8])
	$5 = *(($0 + [36]))
	$4 = *(($0 + [32]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7 + [8]) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($7 + [188])) == (int_32)$3), [18937])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [16])), (int_64)7035937633859534848, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $10($3, $6)
	CALL eosio_assert(((int_32)*($7 + [188]) == (int_32)$3), [18937])
	
.LABEL $label$1
	$8 = ($0 + [128])
	$9 = *($7)
	$5 = *(($0 + [156]))
	$10 = *(($0 + [152]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$8:
	$6 = ($5 + [-24])
	$4 = *($6)
	if ( ((int_64)*($4) == (int_64)$9) ){ goto $label$7 }
	$5 = $6
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$8), [18937])
	goto $label$5 
	
.LABEL $label$6
	$4 = [0]
	$6 = CALL db_find_i64(*($8), *(($0 + [136])), (int_64)6454109460926300160, $9)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $11($8, $6)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$8), [18937])
	
.LABEL $label$5
	*((($2 + [1104]) + [24])) = *(($4 + [40]))
	*(($2 + [1120])) = *(($4 + [32]))
	*($2 + [1104]) = *($4 + [16])
	*($2 + [1112]) = *(($4 + [24]))
	$6 = [0]
	if ( ($7 == 0) ){ goto $label$9 }
	$6 = [0]
	if ( (int_64)(*($7 + [104]) == 0) ){ goto $label$9 }
	$6 = ((int_32)*($7 + [186]) ^ (int_32)[1])
	
.LABEL $label$9
	CALL eosio_assert($6, [17378])
	$9 = *($0)
	*($2 + [176]) = ($2 + [1104])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18237])
	CALL $43($3, $7, $9, ($2 + [176]))
	$11 = *($7 + [179])
	*($2 + [1096]) = [0]
	*($2 + [1088]) = (int_64)0
	$6 = (*(($7 + [144])) - *($7 + [140]))
	if ( ($6 == 0) ){ goto $label$36 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$35 }
	$5 = CALL _Znwj($6)
	*(($2 + [1096])) = ($5 + $6)
	*($2 + [1088]) = $5
	*($2 + [1092]) = $5
	$4 = *(($7 + [140]))
	$6 = (*(($7 + [144])) - $4)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$36 }
	CALL memcpy($5, $4, $6)
	*($2 + [1092]) = (*($2 + [1092]) + $6)
	
.LABEL $label$36
	*($2 + [1080]) = [0]
	*($2 + [1072]) = (int_64)0
	$6 = (*(($7 + [132])) - *($7 + [128]))
	if ( ($6 == 0) ){ goto $label$37 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$34 }
	$5 = CALL _Znwj($6)
	*(($2 + [1080])) = ($5 + $6)
	*($2 + [1072]) = $5
	*($2 + [1076]) = $5
	$4 = *(($7 + [128]))
	$6 = (*(($7 + [132])) - $4)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$37 }
	CALL memcpy($5, $4, $6)
	*($2 + [1076]) = (*($2 + [1076]) + $6)
	
.LABEL $label$37
	*($2 + [1064]) = [0]
	*($2 + [1056]) = (int_64)0
	$6 = (*(($7 + [156])) - *($7 + [152]))
	if ( ($6 == 0) ){ goto $label$38 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$33 }
	$5 = CALL _Znwj($6)
	*(($2 + [1064])) = ($5 + $6)
	*($2 + [1056]) = $5
	*($2 + [1060]) = $5
	$4 = *(($7 + [152]))
	$6 = (*(($7 + [156])) - $4)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$38 }
	CALL memcpy($5, $4, $6)
	*($2 + [1060]) = (*($2 + [1060]) + $6)
	
.LABEL $label$38
	$5 = [0]
	$10 = *($2 + [1092])
	$8 = *($2 + [1088])
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$39 }
	$3 = [0]
	$6 = $8
	
.LOOP $label$41:
	$4 = ((uint_32)*($6) % (uint_32)[13])
	if ( ((uint_32)$4 > (uint_32)[12]) ){ goto $label$51 }
	goto $label$46 
	
.LABEL $label$52
	$5 = ($5 + [10])
	
.LABEL $label$51
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$50
	$5 = ($5 + [5])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$49
	$5 = ($5 + [3])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$48
	$5 = ($5 + [4])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$47
	$5 = ($5 + [8])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$46
	$3 = ($3 + [1])
	$5 = ($5 + [11])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$45
	$5 = ($5 + [2])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$44
	$5 = ($5 + [6])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$43
	$5 = ($5 + [7])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$5 = ($5 + [9])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$41 }
	
.LABEL $label$40
	if ( (($3 & [255]) == 0) ){ goto $label$39 }
	if ( (($5 & [255]) <= [22]) ){ goto $label$39 }
	$4 = ((int_32)((uint_32)(($5 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$6 = ([0] - $3)
	$5 = (((int_32)( $6 ? $4 : ((uint_32)($6 & [255]) > (uint_32)($4 & [255])) ) * (int_32)[10]) + $5)
	
.LABEL $label$39
	if ( ((int_32)*($7 + [183]) != (int_32)[2]) ){ goto $label$69 }
	$12 = *(($7 + [120]))
	$9 = *($7 + [112])
	CALL eosio_assert(((int_64)$9 < (int_64)2305843009213693952), [18455])
	CALL eosio_assert(((int_64)$9 > (int_64)-2305843009213693952), [18479])
	$10 = *($2 + [1092])
	$8 = *($2 + [1088])
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$65 }
	$5 = [0]
	$3 = [0]
	$6 = $8
	
.LOOP $label$71:
	$4 = ((uint_32)*($6) % (uint_32)[13])
	if ( ((uint_32)$4 > (uint_32)[12]) ){ goto $label$81 }
	goto $label$76 
	
.LABEL $label$82
	$5 = ($5 + [10])
	
.LABEL $label$81
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$80
	$5 = ($5 + [5])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$79
	$5 = ($5 + [3])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$78
	$5 = ($5 + [4])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$77
	$5 = ($5 + [8])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$76
	$3 = ($3 + [1])
	$5 = ($5 + [11])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$75
	$5 = ($5 + [2])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$74
	$5 = ($5 + [6])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$73
	$5 = ($5 + [7])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$72
	$5 = ($5 + [9])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$71 }
	
.LABEL $label$70
	if ( (($3 & [255]) == 0) ){ goto $label$83 }
	if ( (($5 & [255]) <= [22]) ){ goto $label$83 }
	$4 = ((int_32)((uint_32)(($5 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$6 = ([0] - $3)
	$5 = (((int_32)( $6 ? $4 : ((uint_32)($6 & [255]) > (uint_32)($4 & [255])) ) * (int_32)[10]) + $5)
	
.LABEL $label$83
	if ( ((int_32)($10 - $8) != (int_32)[2]) ){ goto $label$65 }
	if ( ((int_32)($5 & [255]) != (int_32)[21]) ){ goto $label$65 }
	*((($2 + [1024]) + [8])) = [0]
	$13 = *(($7 + [120]))
	*((($2 + [176]) + [8])) = $13
	*((($2 + [1040]) + [8])) = $13
	*($2 + [1024]) = (int_64)0
	$13 = *($7 + [112])
	*($2 + [1040]) = $13
	*($2 + [176]) = $13
	$6 = CALL $162([17394])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$68 }
	*($2 + [1024]) = ($6 << [1])
	$5 = (($2 + [1024]) | [1])
	if ( $6 ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$69
	if ( ((int_32)*($7 + [185]) != (int_32)[1]) ){ goto $label$88 }
	$9 = *(($7 + [120]))
	$12 = *($7 + [112])
	CALL eosio_assert([1], [18506])
	CALL eosio_assert([1], [18521])
	*(($2 + [968])) = [0]
	*($2 + [984]) = $9
	*($2 + [976]) = ((int_64)$12 / (int_64)2)
	*($2 + [960]) = (int_64)0
	$6 = CALL $162([17473])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$31 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$87 }
	*($2 + [960]) = ($6 << [1])
	$5 = (($2 + [960]) | [1])
	if ( $6 ){ goto $label$86 }
	goto $label$85 
	
.LABEL $label$88
	if ( ((int_32)$11 == (int_32)[3]) ){ goto $label$84 }
	if ( ((int_32)$11 != (int_32)[1]) ){ goto $label$54 }
	$12 = *(($7 + [120]))
	$9 = *($7 + [112])
	if ( ((((int_32)($10 - $8) == (int_32)[2]) & ((int_32)($5 & [255]) == (int_32)[21])) == 0) ){ goto $label$64 }
	CALL __multi3(($2 + [128]), $9, (int_64)$9 >> (int_64)63), (int_64)5, (int_64)0)
	$9 = *((($2 + [128]) + [8]))
	$13 = *($2 + [128])
	CALL eosio_assert(( (uint_64)($13 <= (int_64)4611686018427387904) ? ((int_64)$9 < (int_64)0) : (int_64)($9 == 0) ), [18455])
	CALL eosio_assert(( ((uint_64)$13 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$9 > (int_64)-1) : ((int_64)$9 == (int_64)-1) ), [18479])
	CALL eosio_assert([1], [18506])
	CALL eosio_assert([1], [18521])
	*((($2 + [928]) + [8])) = [0]
	*($2 + [952]) = $12
	*($2 + [944]) = ((int_64)$13 / (int_64)2)
	*($2 + [928]) = (int_64)0
	$6 = CALL $162([17486])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$27 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$60 }
	*($2 + [928]) = ($6 << [1])
	$5 = (($2 + [928]) | [1])
	if ( $6 ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$87
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [960]) = ($4 | [1])
	*($2 + [968]) = $5
	*($2 + [964]) = $6
	
.LABEL $label$86
	CALL memcpy($5, [17473], $6)
	
.LABEL $label$85
	*(($5 + $6)) = [0]
	*((($2 + [32]) + [8])) = *((($2 + [976]) + [8]))
	*($2 + [32]) = *($2 + [976])
	CALL $30($0, $1, ($2 + [32]), ($2 + [960]), [1])
	if ( ((*($2 + [960]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($2 + [968]))
	goto $label$20 
	
.LABEL $label$84
	*((($2 + [864]) + [8])) = [0]
	$9 = *(($7 + [120]))
	*((($2 + [176]) + [8])) = $9
	*((($2 + [880]) + [8])) = $9
	*($2 + [864]) = (int_64)0
	$9 = *($7 + [112])
	*($2 + [880]) = $9
	*($2 + [176]) = $9
	$6 = CALL $162([17394])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$63 }
	*($2 + [864]) = ($6 << [1])
	$5 = (($2 + [864]) | [1])
	if ( $6 ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$68
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [1024]) = ($4 | [1])
	*($2 + [1032]) = $5
	*($2 + [1028]) = $6
	
.LABEL $label$67
	CALL memcpy($5, [17394], $6)
	
.LABEL $label$66
	*(($5 + $6)) = [0]
	*((($2 + [16]) + [8])) = *((($2 + [1040]) + [8]))
	*($2 + [16]) = *($2 + [1040])
	CALL $30($0, $1, ($2 + [16]), ($2 + [1024]), [1])
	if ( ((*($2 + [1024]) & [1]) == 0) ){ goto $label$65 }
	CALL _ZdlPv(*($2 + [1032]))
	
.LABEL $label$65
	*(($2 + [1000])) = [0]
	*($2 + [1016]) = $12
	*($2 + [1008]) = ((int_64)$9 << (int_64)1)
	*($2 + [992]) = (int_64)0
	$6 = CALL $162([17400])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$32 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$91 }
	*($2 + [992]) = ($6 << [1])
	$5 = (($2 + [992]) | [1])
	if ( $6 ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$91
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [992]) = ($4 | [1])
	*($2 + [1000]) = $5
	*($2 + [996]) = $6
	
.LABEL $label$90
	CALL memcpy($5, [17400], $6)
	
.LABEL $label$89
	*(($5 + $6)) = [0]
	*(($2 + [8])) = *((($2 + [1008]) + [8]))
	*($2) = *($2 + [1008])
	CALL $30($0, $1, $2, ($2 + [992]), [1])
	if ( ((*($2 + [992]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($2 + [1000]))
	goto $label$20 
	
.LABEL $label$64
	CALL eosio_assert(((int_64)$9 < (int_64)2305843009213693952), [18455])
	CALL eosio_assert(((int_64)$9 > (int_64)-2305843009213693952), [18479])
	*(($2 + [904])) = [0]
	*($2 + [920]) = $12
	*($2 + [912]) = ((int_64)$9 << (int_64)1)
	*($2 + [896]) = (int_64)0
	$6 = CALL $162([17497])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$57 }
	*($2 + [896]) = ($6 << [1])
	$5 = (($2 + [896]) | [1])
	if ( $6 ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$63
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [864]) = ($4 | [1])
	*($2 + [872]) = $5
	*($2 + [868]) = $6
	
.LABEL $label$62
	CALL memcpy($5, [17394], $6)
	
.LABEL $label$61
	*(($5 + $6)) = [0]
	*((($2 + [160]) + [8])) = *((($2 + [880]) + [8]))
	*($2 + [160]) = *($2 + [880])
	CALL $30($0, $1, ($2 + [160]), ($2 + [864]), [1])
	if ( ((*($2 + [864]) & [1]) == 0) ){ goto $label$54 }
	CALL _ZdlPv(*($2 + [872]))
	if ( ((int_32)*($7 + [182]) == (int_32)[2]) ){ goto $label$53 }
	goto $label$20 
	
.LABEL $label$60
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [928]) = ($4 | [1])
	*($2 + [936]) = $5
	*($2 + [932]) = $6
	
.LABEL $label$59
	CALL memcpy($5, [17486], $6)
	
.LABEL $label$58
	*(($5 + $6)) = [0]
	*((($2 + [112]) + [8])) = *((($2 + [944]) + [8]))
	*($2 + [112]) = *($2 + [944])
	CALL $30($0, $1, ($2 + [112]), ($2 + [928]), [1])
	if ( ((*($2 + [928]) & [1]) == 0) ){ goto $label$54 }
	CALL _ZdlPv(*($2 + [936]))
	if ( ((int_32)*($7 + [182]) == (int_32)[2]) ){ goto $label$53 }
	goto $label$20 
	
.LABEL $label$57
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [896]) = ($4 | [1])
	*($2 + [904]) = $5
	*($2 + [900]) = $6
	
.LABEL $label$56
	CALL memcpy($5, [17497], $6)
	
.LABEL $label$55
	*(($5 + $6)) = [0]
	*((($2 + [144]) + [8])) = *((($2 + [912]) + [8]))
	*($2 + [144]) = *($2 + [912])
	CALL $30($0, $1, ($2 + [144]), ($2 + [896]), [1])
	if ( ((*($2 + [896]) & [1]) == 0) ){ goto $label$54 }
	CALL _ZdlPv(*($2 + [904]))
	
.LABEL $label$54
	if ( ((int_32)*($7 + [182]) != (int_32)[2]) ){ goto $label$20 }
	
.LABEL $label$53
	$8 = *($7 + [181])
	*($2 + [456]) = (int_64)0
	$5 = [0]
	*($2 + [464]) = [0]
	$3 = [0]
	$6 = (*(($7 + [156])) - *(($7 + [152])))
	if ( ($6 == 0) ){ goto $label$94 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$28 }
	$3 = CALL _Znwj($6)
	*(($2 + [464])) = ($3 + $6)
	*($2 + [456]) = $3
	*($2 + [460]) = $3
	$4 = *(($7 + [152]))
	$6 = (*(($7 + [156])) - $4)
	if ( ((int_32)$6 <= (int_32)[0]) ){ goto $label$94 }
	CALL memcpy($3, $4, $6)
	$10 = (*($2 + [460]) + $6)
	*($2 + [460]) = $10
	$5 = [0]
	$3 = *($2 + [456])
	if ( ((int_32)$3 == (int_32)$10) ){ goto $label$93 }
	$11 = [0]
	$6 = $3
	
.LOOP $label$96:
	$4 = ((uint_32)*($6) % (uint_32)[13])
	if ( ((uint_32)$4 > (uint_32)[12]) ){ goto $label$106 }
	goto $label$101 
	
.LABEL $label$107
	$5 = ($5 + [10])
	
.LABEL $label$106
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$96 }
	goto $label$95 
	
.LABEL $label$105
	$5 = ($5 + [5])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$96 }
	goto $label$95 
	
.LABEL $label$104
	$5 = ($5 + [3])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$96 }
	goto $label$95 
	
.LABEL $label$103
	$5 = ($5 + [4])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$96 }
	goto $label$95 
	
.LABEL $label$102
	$5 = ($5 + [8])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$96 }
	goto $label$95 
	
.LABEL $label$101
	$11 = ($11 + [1])
	$5 = ($5 + [11])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$96 }
	goto $label$95 
	
.LABEL $label$100
	$5 = ($5 + [2])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$96 }
	goto $label$95 
	
.LABEL $label$99
	$5 = ($5 + [6])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$96 }
	goto $label$95 
	
.LABEL $label$98
	$5 = ($5 + [7])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$96 }
	goto $label$95 
	
.LABEL $label$97
	$5 = ($5 + [9])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$96 }
	
.LABEL $label$95
	if ( (($11 & [255]) == 0) ){ goto $label$93 }
	if ( (($5 & [255]) <= [22]) ){ goto $label$93 }
	$4 = ((int_32)((uint_32)(($5 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$6 = ([0] - $11)
	$5 = (((int_32)( $6 ? $4 : ((uint_32)($6 & [255]) > (uint_32)($4 & [255])) ) * (int_32)[10]) + $5)
	if ( ((int_32)$8 != (int_32)[3]) ){ goto $label$92 }
	goto $label$23 
	
.LABEL $label$94
	$10 = $3
	
.LABEL $label$93
	if ( ((int_32)$8 == (int_32)[3]) ){ goto $label$23 }
	
.LABEL $label$92
	if ( ((int_32)$8 != (int_32)[1]) ){ goto $label$22 }
	$12 = *(($7 + [120]))
	$9 = *($7 + [112])
	if ( ((int_32)($10 - $3) != (int_32)[2]) ){ goto $label$111 }
	if ( ((int_32)($5 & [255]) != (int_32)[21]) ){ goto $label$111 }
	CALL __multi3(($2 + [64]), $9, (int_64)$9 >> (int_64)63), (int_64)5, (int_64)0)
	$9 = *((($2 + [64]) + [8]))
	$13 = *($2 + [64])
	CALL eosio_assert(( (uint_64)($13 <= (int_64)4611686018427387904) ? ((int_64)$9 < (int_64)0) : (int_64)($9 == 0) ), [18455])
	CALL eosio_assert(( ((uint_64)$13 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$9 > (int_64)-1) : ((int_64)$9 == (int_64)-1) ), [18479])
	CALL eosio_assert([1], [18506])
	CALL eosio_assert([1], [18521])
	*((($2 + [832]) + [8])) = [0]
	*($2 + [856]) = $12
	*($2 + [848]) = ((int_64)$13 / (int_64)2)
	*($2 + [832]) = (int_64)0
	$6 = CALL $162([17502])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$110 }
	*($2 + [832]) = ($6 << [1])
	$5 = (($2 + [832]) | [1])
	if ( $6 ){ goto $label$109 }
	goto $label$108 
	
.LABEL $label$111
	CALL eosio_assert(((int_64)$9 < (int_64)2305843009213693952), [18455])
	CALL eosio_assert(((int_64)$9 > (int_64)-2305843009213693952), [18479])
	*(($2 + [808])) = [0]
	*($2 + [824]) = $12
	*($2 + [816]) = ((int_64)$9 << (int_64)1)
	*($2 + [800]) = (int_64)0
	$6 = CALL $162([17519])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$114 }
	*($2 + [800]) = ($6 << [1])
	$5 = (($2 + [800]) | [1])
	if ( $6 ){ goto $label$113 }
	goto $label$112 
	
.LABEL $label$114
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [800]) = ($4 | [1])
	*($2 + [808]) = $5
	*($2 + [804]) = $6
	
.LABEL $label$113
	CALL memcpy($5, [17519], $6)
	
.LABEL $label$112
	*(($5 + $6)) = [0]
	*((($2 + [80]) + [8])) = *((($2 + [816]) + [8]))
	*($2 + [80]) = *($2 + [816])
	CALL $30($0, $1, ($2 + [80]), ($2 + [800]), [1])
	if ( ((*($2 + [800]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($2 + [808]))
	$6 = *($2 + [456])
	if ( $6 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$110
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [832]) = ($4 | [1])
	*($2 + [840]) = $5
	*($2 + [836]) = $6
	
.LABEL $label$109
	CALL memcpy($5, [17502], $6)
	
.LABEL $label$108
	*(($5 + $6)) = [0]
	*((($2 + [48]) + [8])) = *((($2 + [848]) + [8]))
	*($2 + [48]) = *($2 + [848])
	CALL $30($0, $1, ($2 + [48]), ($2 + [832]), [1])
	if ( ((*($2 + [832]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($2 + [840]))
	goto $label$22 
	
.LABEL $label$35
	CALL $157(($2 + [1088]))
	
.LABEL $label$34
	CALL $157(($2 + [1072]))
	
.LABEL $label$33
	CALL $157(($2 + [1056]))
	
.LABEL $label$32
	CALL $145(($2 + [992]))
	
.LABEL $label$31
	CALL $145(($2 + [960]))
	
.LABEL $label$30
	CALL $145(($2 + [1024]))
	
.LABEL $label$29
	CALL $145(($2 + [864]))
	
.LABEL $label$28
	CALL $157(($2 + [456]))
	
.LABEL $label$27
	CALL $145(($2 + [928]))
	
.LABEL $label$26
	CALL $145(($2 + [896]))
	
.LABEL $label$25
	CALL $145(($2 + [832]))
	
.LABEL $label$24
	CALL $145(($2 + [800]))
	
.LABEL $label$23
	*((($2 + [768]) + [8])) = [0]
	$9 = *(($7 + [120]))
	*((($2 + [176]) + [8])) = $9
	*((($2 + [784]) + [8])) = $9
	*($2 + [768]) = (int_64)0
	$9 = *($7 + [112])
	*($2 + [784]) = $9
	*($2 + [176]) = $9
	$6 = CALL $162([17530])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$117 }
	*($2 + [768]) = ($6 << [1])
	$5 = (($2 + [768]) | [1])
	if ( $6 ){ goto $label$116 }
	goto $label$115 
	
.LABEL $label$117
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [768]) = ($4 | [1])
	*($2 + [776]) = $5
	*($2 + [772]) = $6
	
.LABEL $label$116
	CALL memcpy($5, [17530], $6)
	
.LABEL $label$115
	*(($5 + $6)) = [0]
	*((($2 + [96]) + [8])) = *((($2 + [784]) + [8]))
	*($2 + [96]) = *($2 + [784])
	CALL $30($0, $1, ($2 + [96]), ($2 + [768]), [1])
	if ( ((*($2 + [768]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($2 + [776]))
	$6 = *($2 + [456])
	if ( $6 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$6 = *($2 + [456])
	if ( ($6 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	*($2 + [460]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$20
	*(($2 + [760])) = [0]
	*($2 + [752]) = (int_64)0
	$6 = CALL $162([17272])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$119 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$122 }
	*($2 + [752]) = ($6 << [1])
	$5 = (($2 + [752]) | [1])
	if ( $6 ){ goto $label$121 }
	goto $label$120 
	
.LABEL $label$122
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [752]) = ($4 | [1])
	*($2 + [760]) = $5
	*($2 + [756]) = $6
	
.LABEL $label$121
	CALL memcpy($5, [17272], $6)
	
.LABEL $label$120
	*(($5 + $6)) = [0]
	*(($2 + [744])) = [0]
	*($2 + [736]) = (int_64)0
	$6 = CALL $162([17272])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$118 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$125 }
	*($2 + [736]) = ($6 << [1])
	$5 = (($2 + [736]) | [1])
	if ( $6 ){ goto $label$124 }
	goto $label$123 
	
.LABEL $label$125
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [736]) = ($4 | [1])
	*($2 + [744]) = $5
	*($2 + [740]) = $6
	
.LABEL $label$124
	CALL memcpy($5, [17272], $6)
	
.LABEL $label$123
	*(($5 + $6)) = [0]
	CALL $44(($2 + [720]), $0, *(($7 + [179])))
	CALL $45(($2 + [704]), $0, ($2 + [1072]))
	CALL $45(($2 + [688]), $0, ($2 + [1088]))
	if ( ((int_32)*($7 + [182]) != (int_32)[2]) ){ goto $label$126 }
	CALL $44(($2 + [176]), $0, *($7 + [181]))
	if ( (*($2 + [752]) & [1]) ){ goto $label$128 }
	*($2 + [752]) = [0]
	goto $label$127 
	
.LABEL $label$128
	*(*($2 + [760])) = [0]
	*($2 + [756]) = [0]
	
.LABEL $label$127
	CALL $150(($2 + [752]), [0])
	*((($2 + [752]) + [8])) = *((($2 + [176]) + [8]))
	*($2 + [752]) = *($2 + [176])
	CALL $45(($2 + [176]), $0, ($2 + [1056]))
	if ( (*($2 + [736]) & [1]) ){ goto $label$130 }
	*($2 + [736]) = [0]
	goto $label$129 
	
.LABEL $label$130
	*(*($2 + [744])) = [0]
	*($2 + [740]) = [0]
	
.LABEL $label$129
	CALL $150(($2 + [736]), [0])
	*((($2 + [736]) + [8])) = *((($2 + [176]) + [8]))
	*($2 + [736]) = *($2 + [176])
	
.LABEL $label$126
	$6 = CALL $22(($2 + [496]), $7)
	CALL $46($0, $6)
	$5 = *($6 + [152])
	if ( ($5 == 0) ){ goto $label$131 }
	*(($6 + [156])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$131
	$5 = *($6 + [140])
	if ( ($5 == 0) ){ goto $label$132 }
	*(($6 + [144])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$132
	$5 = *($6 + [128])
	if ( ($5 == 0) ){ goto $label$133 }
	*(($6 + [132])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$133
	$9 = *($0)
	$1 = (int_64)6
	
.LOOP $label$134:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$134 }
	$1 = (int_64)7
	
.LOOP $label$135:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$135 }
	CALL $22(($2 + [176]), $7)
	*($2 + [368]) = *($7 + [8])
	CALL $146(($2 + [376]), ($2 + [720]))
	CALL $146(($2 + [388]), ($2 + [704]))
	CALL $146(($2 + [400]), ($2 + [688]))
	CALL $146(($2 + [412]), ($2 + [752]))
	CALL $146(($2 + [424]), ($2 + [736]))
	*($2 + [464]) = (int_64)-5003315193367756800
	*($2 + [456]) = $9
	*(($6 = CALL _Znwj([16]))) = $9
	*($6 + [8]) = (int_64)3617214756542218240
	$5 = [0]
	*(($2 + [492])) = [0]
	$4 = ($6 + [16])
	*(($2 + [480])) = $4
	*(($2 + [476])) = $4
	*($2 + [472]) = $6
	*($2 + [484 align=4]) = (int_64)0
	*($2 + [1136]) = [0]
	*($2 + [1144]) = ($2 + [1136])
	*($2 + [1152]) = ($2 + [176])
	CALL $47(($2 + [1152]), ($2 + [1144]))
	$6 = *($2 + [1136])
	if ( ($6 == 0) ){ goto $label$137 }
	$4 = ($2 + [484])
	CALL $26($4, $6)
	$5 = *(($2 + [488]))
	$6 = *($4)
	goto $label$136 
	
.LABEL $label$137
	$6 = [0]
	
.LABEL $label$136
	*($2 + [1156]) = $6
	*($2 + [1152]) = $6
	*($2 + [1160]) = $5
	*($2 + [1136]) = ($2 + [1152])
	*($2 + [1144]) = ($2 + [176])
	CALL $48(($2 + [1144]), ($2 + [1136]))
	CALL $28(($2 + [1152]), ($2 + [456]))
	$6 = *($2 + [1152])
	CALL send_inline($6, (*($2 + [1156]) - $6))
	$6 = *($2 + [1152])
	if ( ($6 == 0) ){ goto $label$138 }
	*($2 + [1156]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$138
	$6 = *($2 + [484])
	if ( ($6 == 0) ){ goto $label$139 }
	*(($2 + [488])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$139
	$6 = *($2 + [472])
	if ( ($6 == 0) ){ goto $label$140 }
	*(($2 + [476])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$140
	CALL $49(($2 + [176]))
	if ( (*($2 + [688]) & [1]) ){ goto $label$142 }
	if ( (*($2 + [704]) & [1]) ){ goto $label$141 }
	goto $label$18 
	
.LABEL $label$142
	CALL _ZdlPv(*($2 + [696]))
	if ( ((*($2 + [704]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$141
	CALL _ZdlPv(*($2 + [712]))
	$6 = [1]
	if ( ((*($2 + [720]) & [1]) == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$119
	CALL $145(($2 + [752]))
	
.LABEL $label$118
	CALL $145(($2 + [736]))
	
.LABEL $label$19
	CALL $145(($2 + [768]))
	
.LABEL $label$18
	$6 = [1]
	if ( (*($2 + [720]) & [1]) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($2 + [736]) & $6) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*($2 + [728]))
	if ( ((*($2 + [736]) & $6) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*($2 + [744]))
	if ( ((*($2 + [752]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( (*($2 + [752]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	$6 = *($2 + [1056])
	if ( ($6 == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	CALL _ZdlPv(*($2 + [760]))
	$6 = *($2 + [1056])
	if ( ($6 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	*($2 + [1060]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$10
	$6 = *($2 + [1072])
	if ( ($6 == 0) ){ goto $label$143 }
	*($2 + [1076]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$143
	$6 = *($2 + [1088])
	if ( ($6 == 0) ){ goto $label$144 }
	*($2 + [1092]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$144
	$global$0 = ($2 + [1168])
	$4
	$4
	$4
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $157($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $40 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [80])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = *($0)
	CALL eosio_assert(((int_64)*($0 + [48]) == (int_64)CALL eosio_assert1()), [18573])
	*(($3 = CALL _Znwj([48])) + [32]) = ($0 + [48])
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = [0]
	*($3 + [24]) = (int_64)0
	*($1 + [48]) = ($1 + [25])
	*($1 + [44]) = $1
	*($1 + [40]) = $1
	*($1 + [56]) = ($1 + [40])
	*($1 + [68]) = ($3 + [8])
	*($1 + [64]) = $3
	*($1 + [72]) = ($3 + [16])
	*($1 + [76]) = ($3 + [24])
	CALL $17(($1 + [64]), ($1 + [56]))
	$4 = *($3)
	$5 = CALL db_store_i64(*(($0 + [56])), (int_64)7235159537265672192, $2, $4, $1, [25])
	*($3 + [36]) = $5
	$6 = ($0 + [64])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$1 }
	*($6) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($1 + [64]) = $3
	$4 = *($3)
	*($1) = $4
	*($1 + [40]) = $5
	$7 = ($0 + [76])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [80]))) ){ goto $label$4 }
	*($6 + [8]) = $4
	*($6 + [16]) = $5
	*($1 + [64]) = [0]
	*($6) = $3
	*($7) = ($6 + [24])
	$3 = *($1 + [64])
	*($1 + [64]) = [0]
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $41(($0 + [72]), ($1 + [64]), $1, ($1 + [40]))
	$3 = *($1 + [64])
	*($1 + [64]) = [0]
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$global$0 = ($1 + [80])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$4 = (*($3) + [113])
	*(($3 = *($1))) = $4
	$6 = *($0 + [128])
	$0 = *($0)
	$5 = *(($0 + [132]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$4 = ( $4 ? ($7 + $4) : ((int_32)$6 == (int_32)$5) )
	*($3) = $4
	$6 = *($0 + [140])
	$5 = *(($0 + [144]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	$4 = ( $4 ? ($7 + $4) : ((int_32)$6 == (int_32)$5) )
	*($3) = $4
	$6 = *($0 + [152])
	$5 = *(($0 + [156]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$4 = (( $4 ? ($7 + $4) : ((int_32)$6 == (int_32)$5) ) + [27])
	*($3) = $4
	$5 = *($0 + [200])
	$8 = (CASTING uint_64)(uint_32 ( *(($0 + [204])) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	
.LOOP $label$4:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	*($3) = $4
	$5 = *(($0 + [200]))
	$5 = ( *(($0 + [204])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$5 }
	$4 = ($5 + $4)
	*($3) = $4
	
.LABEL $label$5
	$5 = *($0 + [212])
	$8 = (CASTING uint_64)(uint_32 ( *(($0 + [216])) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	
.LOOP $label$6:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	*($3) = $4
	$5 = *(($0 + [212]))
	$5 = ( *(($0 + [216])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$7 }
	*($3) = ($5 + $4)
	
.LABEL $label$7
	*($2 + [8]) = $0
	CALL $138(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = ($0 + [48])
	$4 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $14($3, $5)
	
.LABEL $label$1
	*($2 + [28]) = $4
	*($2 + [24]) = $3
	$6 = *($0)
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [18237])
	CALL $51($3, $4, $6, ($2 + [8]))
	$3 = ($0 + [88])
	if ( (uint_64)(*($4 + [24]) <= (int_64)50) ){ goto $label$2 }
	$4 = [0]
	$5 = CALL db_lowerbound_i64(*($3), *(($0 + [96])), (int_64)7760153360560291840, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $52($3, $5)
	
.LABEL $label$3
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [19011])
	CALL eosio_assert($5, [19045])
	$5 = CALL db_next_i64(*($4 + [228]), ($2 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	CALL $52($3, $5)
	
.LABEL $label$4
	CALL $53($3, $4)
	
.LABEL $label$2
	$6 = *($0)
	*($2 + [12]) = $1
	*($2 + [16]) = $0
	*($2 + [8]) = ($2 + [24])
	CALL $54($2, $3, $6, ($2 + [8]))
	$global$0 = ($2 + [32])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	if ( ((int_32)*($2 + [4]) == (int_32)$4) ){ goto $label$1 }
	$5 = ($3 | [1])
	$6 = (($3 + [16]) | [1])
	$7 = ($2 + [4])
	$8 = [0]
	
.LOOP $label$2:
	*(($9 = (($3 + [16]) + [8]))) = [0]
	*($3 + [16]) = (int_64)0
	*(($10 = ($3 + [8]))) = [0]
	*($3) = (int_64)0
	CALL $148(($3 + [16]), (((int_32)((uint_32)*(($4 + $8)) / (uint_32)[13]) * (int_32)[12]) + [8384]))
	CALL $148($3, (((int_32)((uint_32)*((*($2) + $8)) % (uint_32)[13]) * (int_32)[12]) + [8432]))
	$4 = *($3 + [16])
	$11 = ($4 & [1])
	CALL $154($0, ( *($9) ? $6 : $11 ), ( *($3 + [20]) ? uint_32($4 >> [1]) : $11 ))
	CALL $152($0, [18504])
	$4 = *($3)
	$11 = ($4 & [1])
	CALL $154($0, ( *($10) ? $5 : $11 ), ( *($3 + [4]) ? uint_32($4 >> [1]) : $11 ))
	CALL $152($0, [18571])
	if ( ((*($3) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$3
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$4
	$4 = *($2)
	$8 = ($8 + [1])
	if ( ($8 <= (*($7) - $4)) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($3 + [32])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$15 }
	if ( ((int_32)$2 == (int_32)[2]) ){ goto $label$16 }
	if ( ((int_32)$2 != (int_32)[1]) ){ goto $label$14 }
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$2 = CALL $162([18546])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$10 }
	*($0) = ($2 << [1])
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$16
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$2 = CALL $162([18553])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$13 }
	*($0) = ($2 << [1])
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$15
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$2 = CALL $162([18560])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$14
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$2 = CALL $162([18565])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$13
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $3
	*($0 + [4]) = $2
	
.LABEL $label$12
	CALL memcpy($3, [18553], $2)
	
.LABEL $label$11
	*(($3 + $2)) = [0]
	return 
	
.LABEL $label$10
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $3
	*($0 + [4]) = $2
	
.LABEL $label$9
	CALL memcpy($3, [18546], $2)
	
.LABEL $label$8
	*(($3 + $2)) = [0]
	return 
	
.LABEL $label$7
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $3
	*($0 + [4]) = $2
	
.LABEL $label$6
	CALL memcpy($3, [18560], $2)
	
.LABEL $label$5
	*(($3 + $2)) = [0]
	return 
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $3
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($3, [18565], $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL $145($0)
}

void .FUNC $169 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17260])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17068]
	$3 = (((int_32)$1 * (int_32)[12]) + [17068])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $165 (int_32 $0)
{
	return CALL $166([8876], $0)
}

int_32 .FUNC $168 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $166([8876], $1)
	CALL memset($0, [0], $1)
	return $0
}

int_32 .FUNC $167 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8868]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8872])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8868]) = [1]
	$2 = ($2 << [16])
	*([0] + [8872]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8872])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8872]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8868]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8868]) = [1]
	$3 = ($3 << [16])
	*([0] + [8872]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8872])
	
.LABEL $label$10
	*([0] + [8872]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $167($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8227])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $157($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$8 = ($7 + ($6 << [4]))
	$9 = ($7 + ($3 << [4]))
	$6 = $9
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$10 = ($9 + ($1 << [4]))
	$6 = *($0)
	$11 = ($0 + [4])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$10 }
	$13 = (($3 + [-1]) - uint_32((($12 + [-16]) - $6) >> [4]))
	$14 = ($6 - $12)
	$6 = [0]
	
.LOOP $label$11:
	*(($3 = (($2 = ($9 + $6)) + [-12]))) = (int_64)0
	*(($4 = ($2 + [-4]))) = [0]
	$1 = ($12 + $6)
	$5 = ($1 + [-12])
	*($3) = *($5)
	$3 = ($1 + [-4])
	*($4) = *($3)
	*(($2 + [-16])) = *(($1 + [-16]))
	*($3) = [0]
	*($5) = (int_64)0
	$6 = ($6 + [-16])
	if ( ((int_32)$14 != (int_32)$6) ){ goto $label$11 }
	$9 = ($7 + ($13 << [4]))
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$3 = $6
	
.LABEL $label$9
	*($0) = $9
	*($11) = $10
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($6 + [-16])
	$1 = *(($6 + [-12]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-8])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
	(unreachable)
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [4])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	$7 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$7 = int_32($2 >> [3])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ((uint_32)$7 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($7 << [4]))
	$3 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$5
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $157($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($3 - $4)
	$6 = ($2 + ($5 << [4]))
	$5 = ($6 - $3)
	$1 = ($6 + ($1 << [4]))
	$7 = ($2 + ($7 << [4]))
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($5, $4, $3)
	$4 = *($0)
	
.LABEL $label$7
	*($0) = $5
	*(($0 + [4])) = $1
	*(($0 + [8])) = $7
	if ( ($4 == 0) ){ goto $label$8 }
	CALL _ZdlPv($4)
	
.LABEL $label$8
	(unreachable)
}

void .FUNC $163 (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC $162 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $8 (int_32 $0)
{
	if ( ((*([0] + [8576]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8584]))
	
.LABEL $label$1
	if ( ((*([0] + [8564]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*([0] + [8572]))
	
.LABEL $label$2
	if ( ((*([0] + [8552]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*([0] + [8560]))
	
.LABEL $label$3
	if ( ((*([0] + [8540]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*([0] + [8548]))
	
.LABEL $label$4
	if ( ((*([0] + [8528]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*([0] + [8536]))
	
.LABEL $label$5
	if ( ((*([0] + [8516]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*([0] + [8524]))
	
.LABEL $label$6
	if ( ((*([0] + [8504]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*([0] + [8512]))
	
.LABEL $label$7
	if ( ((*([0] + [8492]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*([0] + [8500]))
	
.LABEL $label$8
	if ( ((*([0] + [8480]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*([0] + [8488]))
	
.LABEL $label$9
	if ( ((*([0] + [8468]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*([0] + [8476]))
	
.LABEL $label$10
	if ( ((*([0] + [8456]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*([0] + [8464]))
	
.LABEL $label$11
	if ( ((*([0] + [8444]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*([0] + [8452]))
	
.LABEL $label$12
	if ( ((*([0] + [8432]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*([0] + [8440]))
	
.LABEL $label$13
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [688])
	$global$0 = $4
	*($4 + [576]) = $3
	*($4 + [584]) = $1
	$5 = ($0 + [8])
	$7 = *(($0 + [36]))
	$6 = *(($0 + [32]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9 + [8]) == (int_64)$1) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($9 + [188])) == (int_32)$5), [18937])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [16])), (int_64)7035937633859534848, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $10($5, $8)
	CALL eosio_assert(((int_32)*($9 + [188]) == (int_32)$5), [18937])
	
.LABEL $label$1
	$10 = ($0 + [128])
	$1 = *($9)
	$7 = *(($0 + [156]))
	$11 = *(($0 + [152]))
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$9:
	$8 = ($7 + [-24])
	$6 = *($8)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$8 }
	$7 = $8
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$10), [18937])
	if ( $9 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = [0]
	$8 = CALL db_find_i64(*($10), *(($0 + [136])), (int_64)6454109460926300160, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$10 }
	$6 = CALL $11($10, $8)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$10), [18937])
	
.LABEL $label$10
	if ( ($9 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*($9 + [104]) != (int_64)0), [17316])
	CALL eosio_assert([1], [19011])
	CALL eosio_assert([1], [19045])
	$8 = CALL db_next_i64(*($9 + [192]), ($4 + [592]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$11 }
	CALL $10($5, $8)
	
.LABEL $label$11
	CALL $12($5, $9)
	$8 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($8, [19011])
	CALL eosio_assert($8, [19045])
	$8 = CALL db_next_i64(*($6 + [52]), ($4 + [592]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$12 }
	CALL $11($10, $8)
	
.LABEL $label$12
	CALL $13($10, $6)
	
.LABEL $label$5
	*($4 + [568]) = CALL current_time()
	*($4 + [567]) = ((int_64)*($2 + [8]) != (int_64)1397703940)
	*($4 + [560]) = [0]
	*($4 + [552]) = (int_64)0
	*($4 + [544]) = [0]
	*($4 + [536]) = (int_64)0
	$12 = ($0 + [48])
	$8 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$13 }
	CALL $14($12, $8)
	
.LABEL $label$13
	*($4 + [592]) = CALL tapos_block_num()
	*($4 + [596]) = CALL tapos_block_prefix()
	$1 = CALL current_time()
	*((($4 + [592]) + [24])) = *(($0 + [184]))
	*((($4 + [592]) + [32])) = *(($0 + [192]))
	*(($4 + [632])) = *(($0 + [200]))
	*($4 + [608]) = *($0 + [176])
	*($4 + [600]) = ((uint_64)$1 / (uint_64)(int_64)1000000)
	CALL sha256(($4 + [592]), [48], ($4 + [496]))
	CALL sha256(($4 + [496]), [32], ($4 + [464]))
	$1 = *((($4 + [496]) + [24]))
	*((($4 + [432]) + [24])) = $1
	$3 = *((($4 + [496]) + [16]))
	*((($4 + [432]) + [16])) = $3
	*((($4 + [96]) + [16])) = $3
	*((($4 + [96]) + [24])) = $1
	$1 = *($4 + [504])
	*($4 + [440]) = $1
	$3 = *($4 + [496])
	*($4 + [96]) = $3
	*($4 + [432]) = $3
	*($4 + [104]) = $1
	$8 = CALL $15($0, ($4 + [96]), [0])
	*($4 + [592]) = $8
	$7 = *($4 + [540])
	if ( ((uint_32)$7 >= (uint_32)*(($4 + [544]))) ){ goto $label$15 }
	*($7) = $8
	*($4 + [540]) = (*($4 + [540]) + [1])
	goto $label$14 
	
.LABEL $label$15
	CALL $16(($4 + [536]), ($4 + [592]))
	
.LABEL $label$14
	$1 = *((($4 + [496]) + [24]))
	*((($4 + [400]) + [24])) = $1
	$3 = *((($4 + [496]) + [16]))
	*((($4 + [400]) + [16])) = $3
	*((($4 + [64]) + [16])) = $3
	*((($4 + [64]) + [24])) = $1
	$1 = *($4 + [504])
	*($4 + [408]) = $1
	$3 = *($4 + [496])
	*($4 + [64]) = $3
	*($4 + [400]) = $3
	*($4 + [72]) = $1
	$8 = CALL $15($0, ($4 + [64]), [2])
	*($4 + [592]) = $8
	$7 = *($4 + [556])
	if ( ((uint_32)$7 >= (uint_32)*(($4 + [560]))) ){ goto $label$17 }
	*($7) = $8
	*($4 + [556]) = (*($4 + [556]) + [1])
	goto $label$16 
	
.LABEL $label$17
	CALL $16(($4 + [552]), ($4 + [592]))
	
.LABEL $label$16
	$1 = *((($4 + [496]) + [24]))
	*((($4 + [368]) + [24])) = $1
	$3 = *((($4 + [496]) + [16]))
	*((($4 + [368]) + [16])) = $3
	*((($4 + [32]) + [16])) = $3
	*((($4 + [32]) + [24])) = $1
	$1 = *($4 + [504])
	*($4 + [376]) = $1
	$3 = *($4 + [496])
	*($4 + [32]) = $3
	*($4 + [368]) = $3
	*($4 + [40]) = $1
	$8 = CALL $15($0, ($4 + [32]), [3])
	*($4 + [592]) = $8
	$7 = *($4 + [540])
	if ( ((uint_32)$7 >= (uint_32)*(($4 + [544]))) ){ goto $label$19 }
	*($7) = $8
	*($4 + [540]) = (*($4 + [540]) + [1])
	goto $label$18 
	
.LABEL $label$19
	CALL $16(($4 + [536]), ($4 + [592]))
	
.LABEL $label$18
	*($4 + [592]) = [255]
	$8 = *($4 + [556])
	if ( ((uint_32)$8 >= (uint_32)*(($4 + [560]))) ){ goto $label$21 }
	*($8) = [255]
	*($4 + [556]) = (*($4 + [556]) + [1])
	goto $label$20 
	
.LABEL $label$21
	CALL $16(($4 + [552]), ($4 + [592]))
	
.LABEL $label$20
	$11 = [0]
	$7 = [0]
	$6 = *($4 + [540])
	$8 = *($4 + [536])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$22 }
	$7 = [0]
	$13 = [0]
	
.LOOP $label$24:
	$9 = ((uint_32)*($8) % (uint_32)[13])
	if ( ((uint_32)$9 > (uint_32)[12]) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$7 = ($7 + [10])
	
.LABEL $label$34
	$8 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$33
	$13 = ($13 + [1])
	$7 = ($7 + [11])
	$8 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$32
	$7 = ($7 + [2])
	$8 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$31
	$7 = ($7 + [3])
	$8 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$30
	$7 = ($7 + [4])
	$8 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$29
	$7 = ($7 + [5])
	$8 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$28
	$7 = ($7 + [6])
	$8 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$27
	$7 = ($7 + [7])
	$8 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$7 = ($7 + [8])
	$8 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$7 = ($7 + [9])
	$8 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$24 }
	
.LABEL $label$23
	if ( (($13 & [255]) == 0) ){ goto $label$22 }
	if ( (($7 & [255]) <= [22]) ){ goto $label$22 }
	$9 = ((int_32)((uint_32)(($7 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$8 = ([0] - $13)
	$7 = ($7 + ((int_32)( $8 ? $9 : ((uint_32)($8 & [255]) > (uint_32)($9 & [255])) ) * (int_32)[10]))
	
.LABEL $label$22
	*($4 + [360]) = ((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255)
	$7 = ($0 + [48])
	$8 = CALL db_lowerbound_i64(*($7), *(($0 + [56])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$36 }
	$11 = CALL $14($12, $8)
	
.LABEL $label$36
	*($4 + [356]) = $11
	$8 = [0]
	$3 = *($0)
	*($4 + [352]) = $12
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [18237])
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)$12), [18272])
	CALL eosio_assert(((int_64)*($7) == (int_64)CALL eosio_assert1()), [18318])
	*($11 + [16]) = ((int_64)*($11 + [16]) + (int_64)1)
	$1 = *($11)
	CALL eosio_assert([1], [18369])
	*($4 + [648]) = (($4 + [592]) + [25])
	*($4 + [644]) = ($4 + [592])
	*($4 + [640]) = ($4 + [592])
	*($4 + [680]) = ($4 + [640])
	*($4 + [660]) = ($11 + [8])
	*($4 + [656]) = $11
	*($4 + [664]) = ($11 + [16])
	*($4 + [668]) = ($11 + [24])
	CALL $17(($4 + [656]), ($4 + [680]))
	CALL db_update_i64(*($11 + [36]), $3, ($4 + [592]), [25])
	$7 = ($0 + [64])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$37 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$37
	$1 = *($0)
	*($4 + [616]) = $2
	*($4 + [596]) = ($4 + [584])
	*($4 + [592]) = ($4 + [352])
	*($4 + [600]) = ($4 + [567])
	*($4 + [604]) = ($4 + [576])
	*($4 + [608]) = ($4 + [464])
	*($4 + [612]) = ($4 + [568])
	*($4 + [620]) = ($4 + [552])
	*($4 + [624]) = ($4 + [360])
	*($4 + [628]) = ($4 + [536])
	*($4 + [640]) = $1
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL eosio_assert1()), [18573])
	*($4 + [656]) = $5
	*($4 + [660]) = ($4 + [592])
	*($4 + [664]) = ($4 + [640])
	*(($6 = CALL _Znwj([208])) + [120]) = (int_64)1398362884
	*($6 + [112]) = (int_64)0
	CALL eosio_assert([1], [18041])
	$1 = (int_64)5462355
	
.LOOP $label$40:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$39 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$41 }
	$1 = $3
	$7 = [1]
	$9 = $8
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$41
	$1 = $3
	
.LOOP $label$42:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$39 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$9 = ($8 + [1])
	$8 = $9
	if ( $7 ){ goto $label$42 }
	$7 = [1]
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	$7 = [0]
	
.LABEL $label$38
	CALL eosio_assert($7, [18090])
	*($6 + [128 align=4]) = (int_64)0
	*($6 + [136 align=4]) = (int_64)0
	*($6 + [144 align=4]) = (int_64)0
	*($6 + [152 align=4]) = (int_64)0
	*($6 + [160]) = [0]
	*($6 + [188]) = $5
	CALL $18(($4 + [656]), $6)
	*($4 + [680]) = $6
	$1 = *($6 + [8])
	*($4 + [656]) = $1
	$7 = *($6 + [192])
	*($4 + [676]) = $7
	$9 = ($0 + [36])
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [40]))) ){ goto $label$45 }
	*($8 + [8]) = $1
	*($8 + [16]) = $7
	*($4 + [680]) = [0]
	*($8) = $6
	*($9) = ($8 + [24])
	$8 = *($4 + [680])
	*($4 + [680]) = [0]
	if ( ($8 == 0) ){ goto $label$43 }
	goto $label$44 
	
.LABEL $label$45
	CALL $19(($0 + [32]), ($4 + [680]), ($4 + [656]), ($4 + [676]))
	$8 = *($4 + [680])
	*($4 + [680]) = [0]
	if ( ($8 == 0) ){ goto $label$43 }
	
.LABEL $label$44
	$7 = *($8 + [152])
	if ( ($7 == 0) ){ goto $label$46 }
	*(($8 + [156])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$46
	$7 = *($8 + [140])
	if ( ($7 == 0) ){ goto $label$47 }
	*(($8 + [144])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$47
	$7 = *($8 + [128])
	if ( ($7 == 0) ){ goto $label$48 }
	*(($8 + [132])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$48
	CALL _ZdlPv($8)
	
.LABEL $label$43
	$3 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [128])) == (int_64)CALL eosio_assert1()), [18573])
	*(($8 = CALL _Znwj([64])) + [48]) = $10
	*($8) = *(*($4 + [356]) + [16])
	*($8 + [16]) = *($4 + [496])
	*(($8 + [24])) = *($4 + [504])
	*(($8 + [32])) = *((($4 + [496]) + [16]))
	*(($8 + [40])) = *((($4 + [496]) + [24]))
	CALL eosio_assert([1], [18132])
	CALL memcpy(($4 + [592]), $8, [8])
	CALL eosio_assert([1], [18132])
	CALL memcpy((($4 + [592]) | [8]), ($8 + [16]), [32])
	$1 = *($8)
	$9 = CALL db_store_i64(*(($0 + [136])), (int_64)6454109460926300160, $3, $1, ($4 + [592]), [40])
	*($8 + [52]) = $9
	$7 = ($0 + [144])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$49 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$49
	*($4 + [656]) = $8
	$1 = *($8)
	*($4 + [592]) = $1
	*($4 + [640]) = $9
	$11 = ($0 + [156])
	$7 = *($11)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [160]))) ){ goto $label$52 }
	*($7 + [8]) = $1
	*($7 + [16]) = $9
	*($4 + [656]) = [0]
	*($7) = $8
	*($11) = ($7 + [24])
	$8 = *($4 + [656])
	*($4 + [656]) = [0]
	if ( $8 ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	CALL $20(($0 + [152]), ($4 + [656]), ($4 + [592]), ($4 + [640]))
	$8 = *($4 + [656])
	*($4 + [656]) = [0]
	if ( ($8 == 0) ){ goto $label$50 }
	
.LABEL $label$51
	CALL _ZdlPv($8)
	
.LABEL $label$50
	$8 = ($2 + [8])
	if ( ((int_64)*($8) != (int_64)1397703940) ){ goto $label$53 }
	$3 = *($8)
	*((($4 + [336]) + [8])) = $3
	$1 = *($2)
	*((($4 + [16]) + [8])) = $3
	*($4 + [336]) = $1
	*($4 + [16]) = $1
	CALL $21($0, *($4 + [584]), ($4 + [16]))
	
.LABEL $label$53
	$8 = CALL $22(($4 + [144]), $6)
	CALL $23($0, $8)
	$7 = *($8 + [152])
	if ( ($7 == 0) ){ goto $label$54 }
	*(($8 + [156])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$54
	$7 = *($8 + [140])
	if ( ($7 == 0) ){ goto $label$55 }
	*(($8 + [144])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$55
	$7 = *($8 + [128])
	if ( ($7 == 0) ){ goto $label$56 }
	*(($8 + [132])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$56
	$3 = *(($2 + [8]))
	*((($4 + [128]) + [8])) = $3
	$1 = *($2)
	*(($4 + [8])) = $3
	*($4 + [128]) = $1
	*($4) = $1
	CALL $24($0, $4)
	if ( ((int_64)*($4 + [360]) != (int_64)21) ){ goto $label$57 }
	CALL $25($0, *($4 + [584]))
	
.LABEL $label$57
	$8 = *($4 + [536])
	if ( ($8 == 0) ){ goto $label$58 }
	*($4 + [540]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$58
	$8 = *($4 + [552])
	if ( ($8 == 0) ){ goto $label$59 }
	*($4 + [556]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$59
	$global$0 = ($4 + [688])
	$9
}

void .FUNC $6 (int_32 $0)
{
	if ( ((*([0] + [8368]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8376]))
	
.LABEL $label$1
}

void .FUNC $7 (int_32 $0)
{
	if ( ((*([0] + [8420]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8428]))
	
.LABEL $label$1
	if ( ((*([0] + [8408]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*([0] + [8416]))
	
.LABEL $label$2
	if ( (*([0] + [8396]) & [1]) ){ goto $label$5 }
	if ( (*([0] + [8384]) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*([0] + [8404]))
	if ( ((*([0] + [8384]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*([0] + [8392]))
	return 
	
.LABEL $label$3
}

void .FUNC $4 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	$5 = [0]
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [16]) = $2
	*($4 + [8]) = $1
	$6 = (uint_64)$3 >> (uint_64)(int_64)8
	$7 = CALL db_find_i64($1, $2, (int_64)3607749779137757184, $6)
	if ( ((int_32)$7) <= (int_32)[-1]) ){ goto $label$4 }
	$5 = CALL $5(($4 + [8]), $7)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($4 + [8])), [18937])
	*(($0 + [8])) = *(($5 + [8]))
	*($0) = *($5)
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$3 }
	$8 = ($4 + [36])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$5:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	$5 = *(($4 + [32]))
	goto $label$1 
	
.LABEL $label$4
	*($0 + [8]) = $3
	*($0) = (int_64)0
	CALL eosio_assert([1], [18041])
	
.LOOP $label$8:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$6 = $1
	$8 = [1]
	$0 = $5
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$6 = $1
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$0 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $0 ){ goto $label$10 }
	$8 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($8, [18090])
	
.LABEL $label$3
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$2
	$5 = $7
	
.LABEL $label$1
	*($8) = $7
	CALL _ZdlPv($5)
	$global$0 = ($4 + [48])
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$2 = $global$0
	$3 = $2
	$5 = *($0 + [24])
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_32)*(($4 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$4 = ($4 + [-24])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$4 = *(($4 + [-24]))
	$global$0 = $3
	return $4
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [18988])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $165($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*(($9 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($9) = (int_64)0
	CALL eosio_assert([1], [18041])
	$10 = ($9 + [8])
	$11 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$11 = $12
	$5 = [1]
	$2 = $4
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$11 = $12
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$2 = ($4 + [1])
	$4 = $2
	if ( $5 ){ goto $label$10 }
	$5 = [1]
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [18090])
	*($9 + [16]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [18903])
	CALL memcpy($9, $7, [8])
	CALL eosio_assert(((int_32)($6 & [-8]) != (int_32)[8]), [18903])
	CALL memcpy($10, ($7 + [8]), [8])
	*($9 + [20]) = $1
	$11 = (uint_64)*(($9 + [8])) >> (uint_64)(int_64)8)
	$2 = *(($0 + [32]))
	$5 = ($0 + [28])
	$4 = *($5)
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$13 }
	*($4 + [8]) = $11
	*($4) = $9
	*($4 + [16]) = $1
	*($5) = ($4 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$10 = *($8)
	$5 = ((int_32)($4 - $10) / (int_32)[24])
	$13 = ($5 + [1])
	if ( ((uint_32)$13 >= (uint_32)[178956971]) ){ goto $label$15 }
	$8 = [178956970]
	$2 = ((int_32)($2 - $10) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$17 }
	$2 = ($2 << [1])
	$8 = ( $13 ? $2 : ($2 <= $13) )
	if ( ($8 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	$2 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	$4 = *(($0 + [28]))
	$10 = *(($0 + [24]))
	goto $label$14 
	
.LABEL $label$16
	$8 = [0]
	$2 = [0]
	goto $label$14 
	
.LABEL $label$15
	CALL $157($8)
	
.LABEL $label$14
	*(($5 = ($2 + ($14 = ((int_32)$5 * (int_32)[24])))) + [8]) = $11
	*($5) = $9
	*($5 + [16]) = $1
	$8 = ($2 + ((int_32)$8 * (int_32)[24]))
	$13 = ($5 + [24])
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$18 }
	$5 = (($2 + $14) + [-24])
	
.LOOP $label$19:
	$2 = ($4 + [-24])
	$1 = *($2)
	*($2) = [0]
	*($5) = $1
	*(($5 + [16])) = *(($4 + [-8]))
	*(($5 + [8])) = *(($4 + [-16]))
	$5 = ($5 + [-24])
	$4 = $2
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$19 }
	$5 = ($5 + [24])
	$4 = *(($0 + [28]))
	$10 = *(($0 + [24]))
	
.LABEL $label$18
	*(($0 + [28])) = $13
	*(($0 + [24])) = $5
	*(($0 + [32])) = $8
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$20 }
	
.LOOP $label$21:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$22 }
	CALL _ZdlPv($5)
	
.LABEL $label$22
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$21 }
	
.LABEL $label$20
	if ( ($10 == 0) ){ goto $label$23 }
	CALL _ZdlPv($10)
	
.LABEL $label$23
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $169($7)
	
.LABEL $label$11
	$global$0 = $3
	(unreachable)
	return $9
}

int_32 .FUNC $2 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [16])
	$global$0 = $5
	CALL eosio_assert(((int_32)*($3) != (int_32)[-1]), [8192])
	$2 = CALL $155($0, *($2), *($3))
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	$3 = *($3)
	CALL $147($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$2 }
	*($1) = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)*($4) ^ (int_32)[1]), [8210])
	$global$0 = ($5 + [16])
	return $2
	
.LABEL $label$2
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$1
	CALL $150($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	$global$0 = ($5 + [16])
	return $2
}

void .FUNC $3 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = CALL transaction_size()
	$1 = $global$0
	$3 = ($1 - (($2 + [15]) & [-16]))
	$global$0 = $3
	$4 = CALL read_transaction($3, $2)
	CALL eosio_assert(((int_32)$2 == (int_32)$4), [8330])
	CALL sha256($3, $4, $0)
	$global$0 = $1
}

void .FUNC memory ()
{
	CALL $140()
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($3 + [15]) = $1
	$1 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($4 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = (($4 + [17]) & [-16])
	$1 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($3 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $154($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $145($0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18988])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $165($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	CALL $135(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $41(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $169($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $15 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(($2 <= [52]), [18110])
	*(($3 = CALL _Znwj([52]))) = (int_64)0
	*($3 + [8 align=1]) = (int_64)0
	*($3 + [18 align=1]) = (int_64)0
	*($3 + [26 align=1]) = [0]
	*($3 + [30 align=1]) = [0]
	*($3 + [32 align=1]) = (int_64)0
	*($3 + [40 align=1]) = [0]
	*($3 + [44 align=1]) = (int_64)0
	*($3 + [16 align=1]) = [4368]
	*($3) = [256]
	*($3 + [2]) = [2]
	*($3 + [3 align=1]) = [100992003]
	*($3 + [7]) = [7]
	*($3 + [8 align=1]) = [2312]
	*($3 + [10]) = [10]
	*($3 + [11 align=1]) = [235736075]
	*($3 + [15]) = [15]
	*($3 + [18 align=1]) = [4882]
	*($3 + [20]) = [20]
	*($3 + [21]) = [21]
	*($3 + [22]) = [22]
	*($3 + [23]) = [23]
	*($3 + [24]) = [24]
	*($3 + [25]) = [25]
	*($3 + [26]) = [26]
	*($3 + [27]) = [27]
	*($3 + [28]) = [28]
	*($3 + [29]) = [29]
	*($3 + [30]) = [30]
	*($3 + [31]) = [31]
	*($3 + [32]) = [32]
	*($3 + [33]) = [33]
	*($3 + [34]) = [34]
	*($3 + [35]) = [35]
	*($3 + [36]) = [36]
	*($3 + [37]) = [37]
	*($3 + [38]) = [38]
	*($3 + [39]) = [39]
	*($3 + [40]) = [40]
	*($3 + [41]) = [41]
	*($3 + [42]) = [42]
	*($3 + [43]) = [43]
	*($3 + [44]) = [44]
	*($3 + [45]) = [45]
	*($3 + [46]) = [46]
	*($3 + [47]) = [47]
	*($3 + [48]) = [48]
	*($3 + [49]) = [49]
	*($3 + [50]) = [50]
	$4 = [51]
	*($3 + [51]) = [51]
	$5 = ((int_64)((int_64)*($1 + [1]) << (int_64)32) | (int_64)*($1))
	$6 = (int_64)52
	
.LOOP $label$1:
	$1 = ($3 + $4)
	$7 = *($1)
	$8 = ($3 + (CASTING uint_32)(uint_64 ((uint_64)$5 % (uint_64)$6)))
	*($1) = *($8)
	*($8) = $7
	$6 = ((int_64)$6 + (int_64)-1)
	$4 = ($4 + [-1])
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$1 }
	$4 = *(($3 + $2))
	CALL _ZdlPv($3)
	return $4
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $157($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [15]) = *(*($0 + [4]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18132])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18988])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $165($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([208])
	$6 = CALL $130($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1 + [8])
	*($3 + [8]) = $7
	$8 = *($1 + [192])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $19(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $169($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	$1 = *($5 + [152])
	if ( ($1 == 0) ){ goto $label$10 }
	*(($5 + [156])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$1 = *($5 + [140])
	if ( ($1 == 0) ){ goto $label$11 }
	*(($5 + [144])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$1 = *($5 + [128])
	if ( ($1 == 0) ){ goto $label$12 }
	*(($5 + [132])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$12
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18988])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $165($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18903])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[31]), [18903])
	CALL memcpy(($5 + [16]), ($2 + [8]), [32])
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $20(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $169($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [188])) == (int_32)$0), [19075])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [19120])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((int_64)*(*(($5 + [-24])) + [8]) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8) + [8]) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [19170])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [152])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [156])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = *($3 + [140])
	if ( ($8 == 0) ){ goto $label$11 }
	*(($3 + [144])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$11
	$8 = *($3 + [128])
	if ( ($8 == 0) ){ goto $label$12 }
	*(($3 + [132])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$12
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$13:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	$8 = *($5 + [152])
	if ( ($8 == 0) ){ goto $label$15 }
	*(($5 + [156])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$15
	$8 = *($5 + [140])
	if ( ($8 == 0) ){ goto $label$16 }
	*(($5 + [144])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$16
	$8 = *($5 + [128])
	if ( ($8 == 0) ){ goto $label$17 }
	*(($5 + [132])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$17
	CALL _ZdlPv($5)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$13 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [192]))
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [19075])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [19120])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [19170])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC $75 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$2 = ($global$0 - [352])
	$global$0 = $2
	CALL require_auth($1)
	CALL $37($0, $1)
	$3 = ($0 + [8])
	$5 = *(($0 + [36]))
	$4 = *(($0 + [32]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7 + [8]) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($7 + [188])) == (int_32)$3), [18937])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [16])), (int_64)7035937633859534848, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $10($3, $6)
	CALL eosio_assert(((int_32)*($7 + [188]) == (int_32)$3), [18937])
	
.LABEL $label$1
	$8 = ($0 + [128])
	$9 = *($7)
	$5 = *(($0 + [156]))
	$10 = *(($0 + [152]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$8:
	$6 = ($5 + [-24])
	$4 = *($6)
	if ( ((int_64)*($4) == (int_64)$9) ){ goto $label$7 }
	$5 = $6
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$8), [18937])
	goto $label$5 
	
.LABEL $label$6
	$4 = [0]
	$6 = CALL db_find_i64(*($8), *(($0 + [136])), (int_64)6454109460926300160, $9)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $11($8, $6)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$8), [18937])
	
.LABEL $label$5
	*((($2 + [320]) + [24])) = *(($4 + [40]))
	*(($2 + [336])) = *(($4 + [32]))
	*($2 + [320]) = *($4 + [16])
	*($2 + [328]) = *(($4 + [24]))
	CALL eosio_assert(((int_32)*($7 + [182]) == (int_32)[1]), [17900])
	*($2 + [312]) = [0]
	*($2 + [304]) = (int_64)0
	$6 = (*(($7 + [156])) - *($7 + [152]))
	if ( ($6 == 0) ){ goto $label$11 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$10 }
	$5 = CALL _Znwj($6)
	*(($2 + [312])) = ($5 + $6)
	*($2 + [304]) = $5
	*($2 + [308]) = $5
	$4 = *(($7 + [152]))
	$6 = (*(($7 + [156])) - $4)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($5, $4, $6)
	*($2 + [308]) = ($5 + $6)
	
.LABEL $label$11
	*($2 + [296]) = [0]
	*($2 + [288]) = (int_64)0
	$6 = (*(($7 + [144])) - *($7 + [140]))
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$9 }
	$5 = CALL _Znwj($6)
	*(($2 + [296])) = ($5 + $6)
	*($2 + [288]) = $5
	*($2 + [292]) = $5
	$4 = *(($7 + [140]))
	$6 = (*(($7 + [144])) - $4)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($5, $4, $6)
	*($2 + [292]) = ($5 + $6)
	
.LABEL $label$12
	$6 = CALL $22(($2 + [96]), $7)
	$4 = CALL $32($0, $6)
	$5 = *($6 + [152])
	if ( ($5 == 0) ){ goto $label$13 }
	*(($6 + [156])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$13
	$5 = *($6 + [140])
	if ( ($5 == 0) ){ goto $label$14 }
	*(($6 + [144])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$5 = *($6 + [128])
	if ( ($5 == 0) ){ goto $label$15 }
	*(($6 + [132])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$9 = *((($2 + [320]) + [24]))
	*((($2 + [48]) + [24])) = $9
	$11 = *((($2 + [320]) + [16]))
	*((($2 + [48]) + [16])) = $11
	*(($2 + [16])) = $11
	*(($2 + [24])) = $9
	$9 = *($2 + [328])
	*($2 + [56]) = $9
	$11 = *($2 + [320])
	*($2) = $11
	*($2 + [48]) = $11
	*($2 + [8]) = $9
	$6 = CALL $15($0, $2, $4)
	*($2 + [95]) = $6
	$5 = *($2 + [308])
	if ( ((int_32)$5 == (int_32)*(($2 + [312]))) ){ goto $label$17 }
	*($5) = $6
	$10 = (*($2 + [308]) + [1])
	*($2 + [308]) = $10
	goto $label$16 
	
.LABEL $label$17
	CALL $33(($2 + [304]), ($2 + [95]))
	$10 = *($2 + [308])
	
.LABEL $label$16
	$5 = [0]
	$6 = *($2 + [304])
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$18 }
	$5 = [0]
	$8 = [0]
	
.LOOP $label$20:
	$4 = ((uint_32)*($6) % (uint_32)[13])
	if ( ((uint_32)$4 > (uint_32)[12]) ){ goto $label$30 }
	goto $label$25 
	
.LABEL $label$31
	$5 = ($5 + [10])
	
.LABEL $label$30
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$29
	$5 = ($5 + [5])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$28
	$5 = ($5 + [3])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$27
	$5 = ($5 + [4])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$26
	$5 = ($5 + [8])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$5 = ($5 + [11])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$24
	$5 = ($5 + [2])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$23
	$5 = ($5 + [6])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$5 = ($5 + [7])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$5 = ($5 + [9])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	
.LABEL $label$19
	if ( (($8 & [255]) == 0) ){ goto $label$18 }
	if ( (($5 & [255]) <= [22]) ){ goto $label$18 }
	$4 = ((int_32)((uint_32)(($5 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$6 = ([0] - $8)
	$5 = ($5 + ((int_32)( $6 ? $4 : ((uint_32)($6 & [255]) > (uint_32)($4 & [255])) ) * (int_32)[10]))
	
.LABEL $label$18
	*($2 + [47]) = $5
	$9 = *($0)
	*($2 + [36]) = ($2 + [47])
	*($2 + [32]) = ($2 + [304])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18237])
	CALL $76($3, $7, $9, ($2 + [32]))
	$7 = *($2 + [292])
	$10 = *($2 + [288])
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$32 }
	$5 = [0]
	$8 = [0]
	$6 = $10
	
.LOOP $label$34:
	$4 = ((uint_32)*($6) % (uint_32)[13])
	if ( ((uint_32)$4 > (uint_32)[12]) ){ goto $label$44 }
	goto $label$39 
	
.LABEL $label$45
	$5 = ($5 + [10])
	
.LABEL $label$44
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$43
	$5 = ($5 + [5])
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$42
	$5 = ($5 + [3])
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$41
	$5 = ($5 + [4])
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$40
	$5 = ($5 + [8])
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$39
	$8 = ($8 + [1])
	$5 = ($5 + [11])
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$38
	$5 = ($5 + [2])
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$37
	$5 = ($5 + [6])
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$5 = ($5 + [7])
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$5 = ($5 + [9])
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$34 }
	
.LABEL $label$33
	if ( (($8 & [255]) == 0) ){ goto $label$46 }
	if ( (($5 & [255]) <= [22]) ){ goto $label$46 }
	$4 = ((int_32)((uint_32)(($5 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$6 = ([0] - $8)
	$5 = (((int_32)( $6 ? $4 : ((uint_32)($6 & [255]) > (uint_32)($4 & [255])) ) * (int_32)[10]) + $5)
	
.LABEL $label$46
	if ( ((int_32)($7 - $10) != (int_32)[2]) ){ goto $label$32 }
	if ( ((int_32)($5 & [255]) != (int_32)[21]) ){ goto $label$32 }
	CALL $31($0, $1)
	$10 = *($2 + [288])
	
.LABEL $label$32
	if ( ($10 == 0) ){ goto $label$47 }
	*($2 + [292]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$47
	$6 = *($2 + [304])
	if ( ($6 == 0) ){ goto $label$48 }
	*($2 + [308]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$48
	$global$0 = ($2 + [352])
	return (unreachable)
	
.LABEL $label$10
	CALL $157(($2 + [304]))
	
.LABEL $label$9
	CALL $157(($2 + [288]))
	$4
	$4
	(unreachable)
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_32 $20
	$2 = ($global$0 - [128])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*(*($4) + [4]) + [16])
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [16]) = *(*($4 + [8]))
	*($1 + [168]) = *(*($4 + [12]))
	$5 = *($0)
	$6 = *($4 + [16])
	*(($1 + [88])) = *(($6 + [24]))
	*(($1 + [80])) = *(($6 + [16]))
	*(($1 + [72])) = *(($6 + [8]))
	*($1 + [64]) = *($6)
	*($1 + [96]) = *(*($4 + [20]))
	*($1 + [104]) = (int_64)0
	$6 = *($4 + [24])
	*($1 + [112]) = *($6)
	*(($1 + [120])) = *(($6 + [8]))
	$6 = *($4 + [28])
	$7 = ($1 + [128])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$1 }
	CALL $109($7, *($6), *($6 + [4]))
	
.LABEL $label$1
	*($1 + [176]) = *(*($4 + [32]))
	$4 = *($4 + [36])
	$8 = ($1 + [140])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$2 }
	CALL $109($8, *($4), *($4 + [4]))
	
.LABEL $label$2
	$9 = ($1 + [112])
	$10 = ($1 + [104])
	$11 = ($1 + [96])
	$12 = ($1 + [64])
	$13 = ($1 + [168])
	$14 = ($1 + [16])
	$15 = ($1 + [8])
	$16 = ($1 + [176])
	$17 = *($1 + [128])
	$6 = *(($1 + [132]))
	$18 = ($6 - $17)
	$19 = (CASTING uint_64)(uint_32 $18)
	$4 = [113]
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$19 = (uint_64)$19 >> (uint_64)(int_64)7
	if ( ((int_64)$19) != (int_64)0) ){ goto $label$3 }
	$4 = ( $4 ? ($18 + $4) : ((int_32)$17 == (int_32)$6) )
	$17 = *($1 + [140])
	$6 = *(($1 + [144]))
	$18 = ($6 - $17)
	$19 = (CASTING uint_64)(uint_32 $18)
	
.LOOP $label$4:
	$4 = ($4 + [1])
	$19 = (uint_64)$19 >> (uint_64)(int_64)7
	if ( ((int_64)$19) != (int_64)0) ){ goto $label$4 }
	$4 = ( $4 ? ($18 + $4) : ((int_32)$17 == (int_32)$6) )
	$17 = ($1 + [152])
	$18 = *($1 + [152])
	$6 = *(($1 + [156]))
	$20 = ($6 - $18)
	$19 = (CASTING uint_64)(uint_32 $20)
	
.LOOP $label$5:
	$4 = ($4 + [1])
	$19 = (uint_64)$19 >> (uint_64)(int_64)7
	if ( ((int_64)$19) != (int_64)0) ){ goto $label$5 }
	$6 = (( $4 ? ($20 + $4) : ((int_32)$18 == (int_32)$6) ) + [19])
	if ( ($6 <= [513]) ){ goto $label$7 }
	$4 = CALL $165($6)
	goto $label$6 
	
.LABEL $label$7
	$4 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$6
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $6)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $15
	*($3 + [32]) = $1
	*($3 + [40]) = $14
	*($3 + [44]) = ($1 + [32])
	*($3 + [48]) = $12
	*($3 + [52]) = $11
	*($3 + [56]) = $10
	*($3 + [60]) = $9
	*($3 + [64]) = $7
	*($3 + [68]) = $8
	*($3 + [72]) = $17
	*($3 + [76]) = $13
	*($3 + [80]) = $16
	*($3 + [84]) = ($1 + [177])
	*($3 + [88]) = ($1 + [178])
	*($3 + [92]) = ($1 + [179])
	*($3 + [96]) = ($1 + [180])
	*($3 + [100]) = ($1 + [181])
	*($3 + [104]) = ($1 + [182])
	*($3 + [112]) = ($1 + [184])
	*($3 + [108]) = ($1 + [183])
	*($3 + [116]) = ($1 + [185])
	*($3 + [120]) = ($1 + [186])
	CALL $110(($3 + [32]), ($3 + [24]))
	$19 = *(($1 + [8]))
	*($1 + [192]) = CALL db_store_i64(*($5 + [8]), (int_64)7035937633859534848, *(*($0 + [8])), $19, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$19 >= (uint_64)*($5 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $169($4)
	if ( (uint_64)($19 <= *($5 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$19 + (int_64)1) : ((uint_64)$19 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [128])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [128])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $157($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $134(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($1 + [188])) == (int_32)$0), [18272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [18318])
	*($1 + [183]) = [1]
	$5 = *($1 + [8])
	CALL eosio_assert([1], [18369])
	$6 = ($1 + [128])
	$7 = ($1 + [183])
	$8 = ($1 + [8])
	$10 = *($1 + [128])
	$9 = *(($1 + [132]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 $11)
	$13 = [113]
	
.LOOP $label$1:
	$13 = ($13 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	$13 = ( $13 ? ($11 + $13) : ((int_32)$10 == (int_32)$9) )
	$10 = ($1 + [140])
	$11 = *($1 + [140])
	$9 = *(($1 + [144]))
	$14 = ($9 - $11)
	$12 = (CASTING uint_64)(uint_32 $14)
	
.LOOP $label$2:
	$13 = ($13 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$2 }
	$13 = ( $13 ? ($14 + $13) : ((int_32)$11 == (int_32)$9) )
	$11 = ($1 + [152])
	$14 = *($1 + [152])
	$9 = *(($1 + [156]))
	$15 = ($9 - $14)
	$12 = (CASTING uint_64)(uint_32 $15)
	
.LOOP $label$3:
	$13 = ($13 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$3 }
	$9 = (( $13 ? ($15 + $13) : ((int_32)$14 == (int_32)$9) ) + [19])
	if ( ($9 <= [513]) ){ goto $label$5 }
	$13 = CALL $165($9)
	goto $label$4 
	
.LABEL $label$5
	$13 = ($3 - (($9 + [15]) & [-16]))
	$global$0 = $13
	
.LABEL $label$4
	*($4 + [12]) = $13
	*($4 + [8]) = $13
	*($4 + [16]) = ($13 + $9)
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = $8
	*($4 + [64]) = $6
	*($4 + [68]) = $10
	*($4 + [72]) = $11
	*($4 + [32]) = $1
	*($4 + [40]) = ($1 + [16])
	*($4 + [44]) = ($1 + [32])
	*($4 + [48]) = ($1 + [64])
	*($4 + [52]) = ($1 + [96])
	*($4 + [56]) = ($1 + [104])
	*($4 + [60]) = ($1 + [112])
	*($4 + [76]) = ($1 + [168])
	*($4 + [80]) = ($1 + [176])
	*($4 + [84]) = ($1 + [177])
	*($4 + [88]) = ($1 + [178])
	*($4 + [92]) = ($1 + [179])
	*($4 + [96]) = ($1 + [180])
	*($4 + [100]) = ($1 + [181])
	*($4 + [104]) = ($1 + [182])
	*($4 + [112]) = ($1 + [184])
	*($4 + [108]) = $7
	*($4 + [116]) = ($1 + [185])
	*($4 + [120]) = ($1 + [186])
	CALL $110(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [192]), $2, $13, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $169($13)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [128])
	return 
	
.LABEL $label$6
	$global$0 = ($4 + [128])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$4 = ($global$0 - [128])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [188])) == (int_32)$0), [18272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [18318])
	$6 = ($1 + [8])
	$7 = *($1 + [8])
	$8 = $7
	$10 = *($3)
	$9 = ($1 + [128])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$1 }
	CALL $109($9, *($10), *($10 + [4]))
	$8 = *($6)
	
.LABEL $label$1
	*($1 + [177]) = *(*($3 + [4]))
	CALL eosio_assert(((int_64)$7 == (int_64)$8), [18369])
	$11 = ($1 + [177])
	$12 = *($1 + [128])
	$10 = *(($1 + [132]))
	$13 = ($10 - $12)
	$8 = (CASTING uint_64)(uint_32 $13)
	$3 = [113]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	$3 = ( $3 ? ($13 + $3) : ((int_32)$12 == (int_32)$10) )
	$12 = ($1 + [140])
	$13 = *($1 + [140])
	$10 = *(($1 + [144]))
	$14 = ($10 - $13)
	$8 = (CASTING uint_64)(uint_32 $14)
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$3 = ( $3 ? ($14 + $3) : ((int_32)$13 == (int_32)$10) )
	$13 = ($1 + [152])
	$14 = *($1 + [152])
	$10 = *(($1 + [156]))
	$15 = ($10 - $14)
	$8 = (CASTING uint_64)(uint_32 $15)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	$10 = (( $3 ? ($15 + $3) : ((int_32)$14 == (int_32)$10) ) + [19])
	if ( ($10 <= [513]) ){ goto $label$6 }
	$3 = CALL $165($10)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($4 - (($10 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$5
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $10)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $6
	*($5 + [64]) = $9
	*($5 + [68]) = $12
	*($5 + [72]) = $13
	*($5 + [84]) = $11
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [32])
	*($5 + [48]) = ($1 + [64])
	*($5 + [52]) = ($1 + [96])
	*($5 + [56]) = ($1 + [104])
	*($5 + [60]) = ($1 + [112])
	*($5 + [76]) = ($1 + [168])
	*($5 + [80]) = ($1 + [176])
	*($5 + [88]) = ($1 + [178])
	*($5 + [92]) = ($1 + [179])
	*($5 + [96]) = ($1 + [180])
	*($5 + [100]) = ($1 + [181])
	*($5 + [104]) = ($1 + [182])
	*($5 + [112]) = ($1 + [184])
	*($5 + [108]) = ($1 + [183])
	*($5 + [116]) = ($1 + [185])
	*($5 + [120]) = ($1 + [186])
	CALL $110(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [192]), $2, $3, $10)
	if ( ((uint_32)$10 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $169($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [128])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [128])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [18132])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $112(*($1), ($0 + [32]))
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [18272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [18318])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)1)
	$5 = *($1)
	CALL eosio_assert([1], [18369])
	*($4 + [48]) = ($4 + [25])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [8])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [16])
	*($4 + [76]) = ($1 + [24])
	CALL $17(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [36]), $2, $4, [25])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18988])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $165($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([240])
	$6 = CALL $136($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [228])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $114(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $169($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	$1 = *($5 + [152])
	if ( ($1 == 0) ){ goto $label$10 }
	*(($5 + [156])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$1 = *($5 + [140])
	if ( ($1 == 0) ){ goto $label$11 }
	*(($5 + [144])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$1 = *($5 + [128])
	if ( ($1 == 0) ){ goto $label$12 }
	*(($5 + [132])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$12
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [224]) == (int_32)$0), [19075])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [19120])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [19170])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [152])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [156])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = *($3 + [140])
	if ( ($8 == 0) ){ goto $label$11 }
	*(($3 + [144])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$11
	$8 = *($3 + [128])
	if ( ($8 == 0) ){ goto $label$12 }
	*(($3 + [132])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$12
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$13:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	$8 = *($5 + [152])
	if ( ($8 == 0) ){ goto $label$15 }
	*(($5 + [156])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$15
	$8 = *($5 + [140])
	if ( ($8 == 0) ){ goto $label$16 }
	*(($5 + [144])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$16
	$8 = *($5 + [128])
	if ( ($8 == 0) ){ goto $label$17 }
	*(($5 + [132])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$17
	CALL _ZdlPv($5)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$13 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [228]))
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert1()), [18573])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($5 = CALL _Znwj([240])) + [120]) = (int_64)1398362884
	*($5 + [112]) = (int_64)0
	CALL eosio_assert([1], [18041])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [18090])
	*($5 + [128 align=4]) = (int_64)0
	*($5 + [136 align=4]) = (int_64)0
	*($5 + [144 align=4]) = (int_64)0
	*($5 + [152 align=4]) = (int_64)0
	*($5 + [160]) = [0]
	*($5 + [224]) = $1
	CALL $113(($4 + [16]), $5)
	*($4 + [32]) = $5
	$2 = *($5)
	*($4 + [16]) = $2
	$7 = *($5 + [228])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $7
	*($4 + [32]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $114(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	$7 = *($3 + [152])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($3 + [156])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($3 + [140])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($3 + [144])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$7 = *($3 + [128])
	if ( ($7 == 0) ){ goto $label$11 }
	*(($3 + [132])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	$4 = ($global$0 - [128])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [188])) == (int_32)$0), [18272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [18318])
	*($1 + [177]) = *(*($3))
	$6 = ($1 + [8])
	$7 = *($1 + [8])
	$9 = *($3 + [4])
	$8 = ($1 + [128])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$1 }
	CALL $109($8, *($9), *($9 + [4]))
	
.LABEL $label$1
	$10 = ($1 + [177])
	*($1 + [104]) = CALL current_time()
	*($1 + [179]) = *(*($3 + [8]))
	*($1 + [180]) = [1]
	CALL eosio_assert(((int_64)$7 == (int_64)*($6)), [18369])
	$11 = ($1 + [180])
	$12 = ($1 + [179])
	$13 = ($1 + [104])
	$14 = *($1 + [128])
	$9 = *(($1 + [132]))
	$15 = ($9 - $14)
	$16 = (CASTING uint_64)(uint_32 $15)
	$3 = [113]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$16 = (uint_64)$16 >> (uint_64)(int_64)7
	if ( ((int_64)$16) != (int_64)0) ){ goto $label$2 }
	$3 = ( $3 ? ($15 + $3) : ((int_32)$14 == (int_32)$9) )
	$14 = ($1 + [140])
	$15 = *($1 + [140])
	$9 = *(($1 + [144]))
	$17 = ($9 - $15)
	$16 = (CASTING uint_64)(uint_32 $17)
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$16 = (uint_64)$16 >> (uint_64)(int_64)7
	if ( ((int_64)$16) != (int_64)0) ){ goto $label$3 }
	$3 = ( $3 ? ($17 + $3) : ((int_32)$15 == (int_32)$9) )
	$15 = ($1 + [152])
	$17 = *($1 + [152])
	$9 = *(($1 + [156]))
	$18 = ($9 - $17)
	$16 = (CASTING uint_64)(uint_32 $18)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$16 = (uint_64)$16 >> (uint_64)(int_64)7
	if ( ((int_64)$16) != (int_64)0) ){ goto $label$4 }
	$9 = (( $3 ? ($18 + $3) : ((int_32)$17 == (int_32)$9) ) + [19])
	if ( ($9 <= [513]) ){ goto $label$6 }
	$3 = CALL $165($9)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$5
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $9)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $6
	*($5 + [56]) = $13
	*($5 + [64]) = $8
	*($5 + [68]) = $14
	*($5 + [72]) = $15
	*($5 + [84]) = $10
	*($5 + [92]) = $12
	*($5 + [96]) = $11
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [32])
	*($5 + [48]) = ($1 + [64])
	*($5 + [52]) = ($1 + [96])
	*($5 + [60]) = ($1 + [112])
	*($5 + [76]) = ($1 + [168])
	*($5 + [80]) = ($1 + [176])
	*($5 + [88]) = ($1 + [178])
	*($5 + [100]) = ($1 + [181])
	*($5 + [104]) = ($1 + [182])
	*($5 + [112]) = ($1 + [184])
	*($5 + [108]) = ($1 + [183])
	*($5 + [116]) = ($1 + [185])
	*($5 + [120]) = ($1 + [186])
	CALL $110(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [192]), $2, $3, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $169($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [128])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [128])
}

int_32 .FUNC $56 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($3 + [80]) = (int_64)0
	$4 = [0]
	*($3 + [88]) = [0]
	$5 = *($1 + [4])
	$6 = (*(($5 + [132])) - *($5 + [128]))
	if ( ($6 == 0) ){ goto $label$2 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$1 }
	$7 = CALL _Znwj($6)
	*(($3 + [88])) = ($7 + $6)
	*($3 + [80]) = $7
	*($3 + [84]) = $7
	$6 = *(($5 + [128]))
	$5 = (*(($5 + [132])) - $6)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($7, $6, $5)
	*($3 + [84]) = ($7 + $5)
	
.LABEL $label$2
	$5 = *(($1 + [4]))
	$8 = *(($5 + [40]))
	$9 = *($5 + [32])
	$10 = *(($5 + [56]))
	$11 = *(($5 + [48]))
	*(($3 + [16])) = $11
	*((($3 + [48]) + [24])) = $10
	*((($3 + [48]) + [16])) = $11
	*(($3 + [24])) = $10
	*($3 + [48]) = $9
	*($3 + [56]) = $8
	*($3) = $9
	*($3 + [8]) = $8
	$5 = CALL $15($0, $3, [3])
	*(*($3 + [80]) + [1]) = $5
	$7 = *($3 + [84])
	$12 = *($3 + [80])
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$3 }
	$4 = [0]
	$13 = [0]
	$5 = $12
	
.LOOP $label$5:
	$6 = ((uint_32)*($5) % (uint_32)[13])
	if ( ((uint_32)$6 > (uint_32)[12]) ){ goto $label$15 }
	goto $label$10 
	
.LABEL $label$16
	$4 = ($4 + [10])
	
.LABEL $label$15
	$5 = ($5 + [1])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$14
	$4 = ($4 + [5])
	$5 = ($5 + [1])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$13
	$4 = ($4 + [3])
	$5 = ($5 + [1])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$12
	$4 = ($4 + [4])
	$5 = ($5 + [1])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$11
	$4 = ($4 + [8])
	$5 = ($5 + [1])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$10
	$13 = ($13 + [1])
	$4 = ($4 + [11])
	$5 = ($5 + [1])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$9
	$4 = ($4 + [2])
	$5 = ($5 + [1])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	$4 = ($4 + [6])
	$5 = ($5 + [1])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$4 = ($4 + [7])
	$5 = ($5 + [1])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = ($4 + [9])
	$5 = ($5 + [1])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$4
	if ( (($13 & [255]) == 0) ){ goto $label$3 }
	if ( (($4 & [255]) <= [22]) ){ goto $label$3 }
	$6 = ((int_32)((uint_32)(($4 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$5 = ([0] - $13)
	$4 = ($4 + ((int_32)( $5 ? $6 : ((uint_32)($5 & [255]) > (uint_32)($6 & [255])) ) * (int_32)[10]))
	
.LABEL $label$3
	*($3 + [47]) = $4
	if ( ($2 == 0) ){ goto $label$17 }
	$5 = *($1 + [4])
	$8 = *($0)
	*($3 + [36]) = ($3 + [47])
	*($3 + [32]) = ($3 + [80])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [18237])
	CALL $59(($0 + [8]), $5, $8, ($3 + [32]))
	$12 = *($3 + [80])
	$4 = *($3 + [47])
	
.LABEL $label$17
	if ( ($12 == 0) ){ goto $label$18 }
	*($3 + [84]) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$18
	$global$0 = ($3 + [96])
	return ($4 & [255])
	
.LABEL $label$1
	CALL $157(($3 + [80]))
	$6
	return (unreachable)
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($1 + [188])) == (int_32)$0), [18272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [18318])
	$5 = *($1 + [8])
	*($1 + [104]) = CALL current_time()
	*($1 + [179 align=1]) = [258]
	*($1 + [183]) = [2]
	CALL eosio_assert(((int_64)$5 == (int_64)*($1 + [8])), [18369])
	$6 = ($1 + [128])
	$7 = ($1 + [183])
	$8 = ($1 + [180])
	$9 = ($1 + [179])
	$10 = ($1 + [104])
	$11 = ($1 + [8])
	$13 = *($1 + [128])
	$12 = *(($1 + [132]))
	$14 = ($12 - $13)
	$15 = (CASTING uint_64)(uint_32 $14)
	$16 = [113]
	
.LOOP $label$1:
	$16 = ($16 + [1])
	$15 = (uint_64)$15 >> (uint_64)(int_64)7
	if ( ((int_64)$15) != (int_64)0) ){ goto $label$1 }
	$16 = ( $16 ? ($14 + $16) : ((int_32)$13 == (int_32)$12) )
	$13 = ($1 + [140])
	$14 = *($1 + [140])
	$12 = *(($1 + [144]))
	$17 = ($12 - $14)
	$15 = (CASTING uint_64)(uint_32 $17)
	
.LOOP $label$2:
	$16 = ($16 + [1])
	$15 = (uint_64)$15 >> (uint_64)(int_64)7
	if ( ((int_64)$15) != (int_64)0) ){ goto $label$2 }
	$16 = ( $16 ? ($17 + $16) : ((int_32)$14 == (int_32)$12) )
	$14 = ($1 + [152])
	$17 = *($1 + [152])
	$12 = *(($1 + [156]))
	$18 = ($12 - $17)
	$15 = (CASTING uint_64)(uint_32 $18)
	
.LOOP $label$3:
	$16 = ($16 + [1])
	$15 = (uint_64)$15 >> (uint_64)(int_64)7
	if ( ((int_64)$15) != (int_64)0) ){ goto $label$3 }
	$12 = (( $16 ? ($18 + $16) : ((int_32)$17 == (int_32)$12) ) + [19])
	if ( ($12 <= [513]) ){ goto $label$5 }
	$16 = CALL $165($12)
	goto $label$4 
	
.LABEL $label$5
	$16 = ($3 - (($12 + [15]) & [-16]))
	$global$0 = $16
	
.LABEL $label$4
	*($4 + [12]) = $16
	*($4 + [8]) = $16
	*($4 + [16]) = ($16 + $12)
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = $11
	*($4 + [56]) = $10
	*($4 + [64]) = $6
	*($4 + [68]) = $13
	*($4 + [72]) = $14
	*($4 + [92]) = $9
	*($4 + [96]) = $8
	*($4 + [32]) = $1
	*($4 + [40]) = ($1 + [16])
	*($4 + [44]) = ($1 + [32])
	*($4 + [48]) = ($1 + [64])
	*($4 + [52]) = ($1 + [96])
	*($4 + [60]) = ($1 + [112])
	*($4 + [76]) = ($1 + [168])
	*($4 + [80]) = ($1 + [176])
	*($4 + [84]) = ($1 + [177])
	*($4 + [88]) = ($1 + [178])
	*($4 + [100]) = ($1 + [181])
	*($4 + [104]) = ($1 + [182])
	*($4 + [112]) = ($1 + [184])
	*($4 + [108]) = $7
	*($4 + [116]) = ($1 + [185])
	*($4 + [120]) = ($1 + [186])
	CALL $110(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [192]), $2, $16, $12)
	if ( ((uint_32)$12 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $169($16)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [128])
	return 
	
.LABEL $label$6
	$global$0 = ($4 + [128])
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [18132])
	CALL memcpy(*($3 + [4]), $2, [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [18132])
	CALL memcpy(*($3 + [4]), $2, [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18132])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $111(*($1), *($0 + [32]))
	CALL $111(*($1), *($0 + [36]))
	CALL $111(*($1), *($0 + [40]))
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18132])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18132])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18132])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18132])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18132])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [68])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18132])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [72])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18132])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [76])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [18132])
	CALL memcpy(*($0 + [4]), $3, [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
}

int_32 .FUNC $117 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = *($1 + [152])
	if ( ($4 == 0) ){ goto $label$4 }
	*(($1 + [156])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$4 = *($1 + [140])
	if ( ($4 == 0) ){ goto $label$5 }
	*(($1 + [144])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($1 + [128])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($1 + [132])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$7 }
	CALL _ZdlPv($1)
	
.LABEL $label$7
	return $0
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $157($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $117(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [112])
	$global$0 = $2
	$3 = CALL current_time()
	*(($2 + [60])) = (int_64)0
	*(($2 + [76])) = (int_64)0
	*(($2 + [84])) = (int_64)0
	*($2 + [44]) = [0]
	*($2 + [48]) = [0]
	*($2 + [52 align=4]) = (int_64)0
	*($2 + [68 align=4]) = (int_64)0
	*($2 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) + [60])
	$4 = ($2 + [68])
	$5 = *($0)
	$3 = (int_64)6
	
.LOOP $label$1:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$1 }
	*($2 + [24]) = (int_64)3617214756542218240
	*($2 + [16]) = $5
	$3 = (int_64)7
	
.LOOP $label$2:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$2 }
	*($2 + [96]) = (int_64)6112162363668955136
	*($2 + [8]) = $1
	CALL $60($4, ($2 + [16]), $0, ($2 + [96]), ($2 + [8]))
	*(($2 + [52])) = [1]
	$3 = CALL current_time()
	*($2 + [24]) = (int_64)0
	*($2 + [16]) = ((int_64)((int_64)((uint_64)$3 / (uint_64)(int_64)1000000) & (int_64)4294967295) + (int_64)$1)
	$3 = *($0)
	CALL $61(($2 + [96]), ($2 + [32]))
	$0 = *($2 + [96])
	CALL send_deferred(($2 + [16]), $3, $0, (*($2 + [100]) - $0), [0])
	$0 = *($2 + [96])
	if ( ($0 == 0) ){ goto $label$3 }
	*($2 + [100]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	CALL $62(($2 + [32]))
	$global$0 = ($2 + [112])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [18132])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [18132])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	CALL $115(*($0 + [4]), $1)
	$5 = ($1 + [128])
	$7 = *($1 + [128])
	$6 = *(($1 + [132]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 $8)
	$10 = [120]
	
.LOOP $label$1:
	$10 = ($10 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$10 = ( $10 ? ($8 + $10) : ((int_32)$7 == (int_32)$6) )
	$7 = ($1 + [140])
	$8 = *($1 + [140])
	$6 = *(($1 + [144]))
	$11 = ($6 - $8)
	$9 = (CASTING uint_64)(uint_32 $11)
	
.LOOP $label$2:
	$10 = ($10 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	$10 = ( $10 ? ($11 + $10) : ((int_32)$8 == (int_32)$6) )
	$8 = ($1 + [152])
	$11 = *($1 + [152])
	$6 = *(($1 + [156]))
	$12 = ($6 - $11)
	$9 = (CASTING uint_64)(uint_32 $12)
	
.LOOP $label$3:
	$10 = ($10 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	$6 = (( $10 ? ($12 + $10) : ((int_32)$11 == (int_32)$6) ) + [47])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$10 = CALL $165($6)
	goto $label$4 
	
.LABEL $label$5
	$10 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $10
	
.LABEL $label$4
	*($3 + [12]) = $10
	*($3 + [8]) = $10
	*($3 + [16]) = ($10 + $6)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = ($1 + [32])
	*($3 + [48]) = ($1 + [64])
	*($3 + [52]) = ($1 + [96])
	*($3 + [56]) = ($1 + [104])
	*($3 + [60]) = ($1 + [112])
	*($3 + [64]) = $5
	*($3 + [68]) = $7
	*($3 + [72]) = $8
	*($3 + [76]) = ($1 + [168])
	*($3 + [80]) = ($1 + [176])
	*($3 + [84]) = ($1 + [177])
	*($3 + [88]) = ($1 + [178])
	*($3 + [92]) = ($1 + [179])
	*($3 + [96]) = ($1 + [180])
	*($3 + [100]) = ($1 + [181])
	*($3 + [104]) = ($1 + [182])
	*($3 + [108]) = ($1 + [192])
	CALL $116(($3 + [32]), ($3 + [24]))
	$9 = *($1)
	*($1 + [228]) = CALL db_store_i64(*($4 + [8]), (int_64)7760153360560291840, *(*($0 + [8])), $9, $10, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$9 >= (uint_64)*($4 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $169($10)
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [112])
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18132])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [18132])
	CALL memcpy(*($4 + [4]), $3, [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [18132])
	CALL memcpy(*($4 + [4]), $3, [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [18132])
	CALL memcpy(*($4 + [4]), ($3 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $111(*($1), *($0 + [32]))
	CALL $111(*($1), *($0 + [36]))
	CALL $111(*($1), *($0 + [40]))
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18132])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [52])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18132])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [56])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18132])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [60])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18132])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [64])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18132])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [68])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18132])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [72])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18132])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [76])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18132])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [80])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18132])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [84])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18132])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$1 = *($1)
	*($2 + [15]) = *(*($0 + [88]))
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[0]), [18132])
	CALL memcpy(*($1 + [4]), ($2 + [15]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18132])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18132])
	CALL memcpy(*($7), $6, [1])
	$4 = (*($7) + [1])
	*($7) = $4
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $139 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$8 = ($global$0 - [272])
	$global$0 = $8
	$0 = *($0 + [4])
	$9 = *($0 + [4])
	$10 = (*(*($0)) + int_32($9 >> [1]))
	$11 = *($0)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$11 = *((*($10) + $11))
	
.LABEL $label$1
	$6 = CALL $146($8, $7)
	$5 = CALL $146(($8 + [16]), $6)
	$4 = CALL $146(($8 + [32]), $5)
	$3 = CALL $146(($8 + [48]), $4)
	$1 = CALL $146(($8 + [64]), $3)
	$0 = CALL $22(($8 + [80]), $1)
	CALL void $10((int_32 $0), (int_32 $2), (int_64 $1), (int_32 $3), (int_32 $4), (int_32 $5), (int_32 $6), (int_32 $11))
	if ( (*($6) & [1]) ){ goto $label$12 }
	if ( (*($5) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($5 + [8]))
	$11 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$11 = [1]
	if ( (*($4) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($3) & $11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $11) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	$11 = *($0 + [152])
	if ( ($11 == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	$11 = *($0 + [152])
	if ( ($11 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*(($0 + [156])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$2
	$11 = *($0 + [140])
	if ( ($11 == 0) ){ goto $label$13 }
	*(($0 + [144])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$13
	$11 = *($0 + [128])
	if ( ($11 == 0) ){ goto $label$14 }
	*(($0 + [132])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$14
	$global$0 = ($8 + [272])
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18132])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18132])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18132])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18132])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [18132])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $162($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $149($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $151($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $151 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $156 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $161(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $157 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $154 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $149($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $155 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $160(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $158 (int_32 $0)
{
}

int_32 .FUNC $159 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $163([8592])
	$3 = *([0] + [8600])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8604])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8608]
	*([0] + [8600]) = [8608]
	$4 = *([0] + [8604])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $168([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8600])
	*([0] + [8600]) = $3
	*([0] + [8604]) = [0]
	
.LABEL $label$2
	*([0] + [8604]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $164([8592])
	return [0]
	
.LABEL $label$1
	CALL $164([8592])
	return [-1]
}

int_32 .FUNC $160 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL _Znwj([16])
	*($0 + [8]) = $3
	*($0) = (int_64)55834574865
	CALL memset($3, [46], [13])
	*($3 + [13]) = [0]
	$5 = *($1)
	$1 = (CASTING uint_32)(uint_64 $5)
	$4 = *([0] + [18156])
	*($3 + [12]) = *(($4 + ($1 & [15])))
	*($3 + [11]) = *(($4 + (uint_32($1 >> [4]) & [31])))
	*($3 + [10]) = *(($4 + (uint_32($1 >> [9]) & [31])))
	*($3 + [9]) = *(($4 + (uint_32($1 >> [14]) & [31])))
	*($3 + [8]) = *(($4 + (uint_32($1 >> [19]) & [31])))
	*($3 + [7]) = *(($4 + (uint_32($1 >> [24]) & [31])))
	*($3 + [6]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)29)) & [31])))
	*($3 + [5]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)34)) & [31])))
	*($3 + [4]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)39)) & [31])))
	*($3 + [3]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)44)) & [31])))
	*($3 + [2]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)49)) & [31])))
	*($3 + [1]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)54)) & [31])))
	*(*($0 + [8])) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)59))))
	$4 = ($3 & [1])
	$3 = *($0)
	$3 = ( *($0 + [4]) ? uint_32($3 >> [1]) : $4 )
	$1 = ( *($0 + [8]) ? ($0 + [1]) : $4 )
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($1 + $3)
	$6 = ($3 + [-1])
	$3 = $6
	if ( ((int_32)*(($4 + [-1])) == (int_32)[46]) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$1 }
	CALL $147($2, $0, [0], ($6 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$4 }
	*($0) = [0]
	goto $label$3 
	
.LABEL $label$4
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$3
	CALL $150($0, [0])
	*(($0 + [8])) = *(($2 + [8]))
	*($0) = *($2)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $26($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [18132])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [18132])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $119(CALL $118($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $55 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [240])
	$global$0 = $3
	CALL $37($0, $1)
	$4 = ($0 + [8])
	$6 = *(($0 + [36]))
	$5 = *(($0 + [32]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8 + [8]) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($8 + [188])) == (int_32)$4), [18937])
	*($3 + [236]) = $8
	*($3 + [232]) = $4
	$6 = (($3 + [232]) | [4])
	goto $label$1 
	
.LABEL $label$2
	$7 = CALL db_find_i64(*($4), *(($0 + [16])), (int_64)7035937633859534848, $1)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$5 }
	$8 = CALL $10($4, $7)
	CALL eosio_assert(((int_32)*($8 + [188]) == (int_32)$4), [18937])
	*($3 + [236]) = $8
	*($3 + [232]) = $4
	$6 = (($3 + [232]) | [4])
	goto $label$1 
	
.LABEL $label$5
	$8 = [0]
	*($3 + [236]) = [0]
	*($3 + [232]) = $4
	$6 = (($3 + [232]) | [4])
	
.LABEL $label$1
	$7 = CALL $22(($3 + [32]), $8)
	CALL eosio_assert((*($7 + [182]) == 0), [18624])
	$8 = *($7 + [152])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($7 + [156])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$6
	$8 = *($7 + [140])
	if ( ($8 == 0) ){ goto $label$7 }
	*(($7 + [144])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$7
	$8 = *($7 + [128])
	if ( ($8 == 0) ){ goto $label$8 }
	*(($7 + [132])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$8
	$7 = *($6)
	$1 = *(($7 + [120]))
	$9 = *($7 + [112])
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	$8 = (*(($7 + [144])) - *($7 + [140]))
	if ( ($8 == 0) ){ goto $label$11 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$10 }
	$5 = CALL _Znwj($8)
	*(($3 + [24])) = ($5 + $8)
	*($3 + [16]) = $5
	*($3 + [20]) = $5
	$8 = *(($7 + [140]))
	$7 = (*(($7 + [144])) - $8)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($5, $8, $7)
	*($3 + [20]) = (*($3 + [20]) + $7)
	
.LABEL $label$11
	*($3) = (int_64)0
	*($3 + [8]) = [0]
	$7 = *($6)
	$8 = (*(($7 + [132])) - *($7 + [128]))
	if ( ($8 == 0) ){ goto $label$12 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$9 }
	$5 = CALL _Znwj($8)
	*(($3 + [8])) = ($5 + $8)
	*($3) = $5
	*($3 + [4]) = $5
	$8 = *(($7 + [128]))
	$7 = (*(($7 + [132])) - $8)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($5, $8, $7)
	*($3 + [4]) = (*($3 + [4]) + $7)
	
.LABEL $label$12
	CALL eosio_assert((*(*($6) + [183]) == 0), [17542])
	$7 = [0]
	if ( ((uint_32)*(*($3)) % (uint_32)[13]) ){ goto $label$13 }
	$7 = ((int_32)(*($3 + [20]) - *($3 + [16])) == (int_32)[2])
	
.LABEL $label$13
	CALL eosio_assert($7, [17574])
	CALL eosio_assert([1], [18506])
	CALL eosio_assert([1], [18521])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$1), [18638])
	CALL eosio_assert(((int_64)*($2) == (int_64)((int_64)$9 / (int_64)2)), [17617])
	if ( ((int_32)CALL $56($0, ($3 + [232]), [0]) != (int_32)[21]) ){ goto $label$16 }
	CALL $56($0, ($3 + [232]), [1])
	$1 = *($0)
	$7 = *($3 + [236])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18237])
	CALL $57($4, $7, $1)
	CALL $35($0, *(*($6) + [8]))
	$7 = *($3)
	if ( $7 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$1 = *($0)
	$7 = *($3 + [236])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18237])
	CALL $58($4, $7, $1)
	$7 = *($3)
	if ( ($7 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	*($3 + [4]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$14
	$7 = *($3 + [16])
	if ( ($7 == 0) ){ goto $label$17 }
	*($3 + [20]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$17
	$global$0 = ($3 + [240])
	return (unreachable)
	
.LABEL $label$10
	CALL $157(($3 + [16]))
	
.LABEL $label$9
	CALL $157($3)
	(unreachable)
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [112])
	$global$0 = $2
	$3 = *($0)
	*($2 + [8]) = *($1)
	*($2 + [20]) = ($3 + [8])
	*($2 + [16]) = $3
	*($2 + [24]) = ($3 + [16])
	*($2 + [28]) = ($3 + [32])
	*($2 + [32]) = ($3 + [64])
	*($2 + [36]) = ($3 + [96])
	*($2 + [40]) = ($3 + [104])
	*($2 + [44]) = ($3 + [112])
	*($2 + [48]) = ($3 + [128])
	*($2 + [52]) = ($3 + [140])
	*($2 + [56]) = ($3 + [152])
	*($2 + [60]) = ($3 + [168])
	*($2 + [64]) = ($3 + [176])
	*($2 + [68]) = ($3 + [177])
	*($2 + [72]) = ($3 + [178])
	*($2 + [76]) = ($3 + [179])
	*($2 + [80]) = ($3 + [180])
	*($2 + [84]) = ($3 + [181])
	*($2 + [88]) = ($3 + [182])
	*($2 + [96]) = ($3 + [184])
	*($2 + [92]) = ($3 + [183])
	*($2 + [100]) = ($3 + [185])
	*($2 + [104]) = ($3 + [186])
	CALL $131(($2 + [16]), ($2 + [8]))
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy(($3 + [192]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $129(*($1), ($3 + [200]))
	CALL $129(*($1), ($3 + [212]))
	CALL $129(*($1), ($3 + [224]))
	CALL $129(*($1), ($3 + [236]))
	CALL $129(*($1), ($3 + [248]))
	$global$0 = ($2 + [112])
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [18903])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [112])
	$global$0 = $3
	$4 = *($0)
	$5 = (int_64)6
	
.LOOP $label$1:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$1 }
	$5 = (int_64)0
	$6 = (int_64)59
	$0 = [18119]
	$7 = (int_64)0
	
.LOOP $label$2:
	$8 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$3 }
	$9 = *($0)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$9 = ($9 + [-91])
	goto $label$4 
	
.LABEL $label$5
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$3
	$0 = ($0 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$2 }
	$5 = (int_64)5
	
.LOOP $label$6:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$6 }
	*((($3 + [8]) + [24])) = *(($2 + [8]))
	*($3 + [16]) = $1
	*($3 + [8]) = $4
	*($3 + [40]) = $7
	*($3 + [48]) = (int_64)-6571125140531183616
	*($3 + [24]) = *($2)
	*(($0 = CALL _Znwj([16]))) = $4
	*($0 + [8]) = (int_64)3617214756542218240
	*(($3 + [76])) = [0]
	$9 = ($0 + [16])
	*((($3 + [40]) + [24])) = $9
	*(($3 + [60])) = $9
	*($3 + [56]) = $0
	*($3 + [68 align=4]) = (int_64)0
	CALL $26(($3 + [68]), [32])
	$0 = *((($3 + [40]) + [32]))
	$9 = *($3 + [68])
	*($3 + [84]) = $9
	*($3 + [80]) = $9
	*($3 + [88]) = $0
	*($3 + [96]) = ($3 + [80])
	*($3 + [104]) = ($3 + [8])
	CALL $27(($3 + [104]), ($3 + [96]))
	CALL $28(($3 + [80]), ($3 + [40]))
	$0 = *($3 + [80])
	CALL send_inline($0, (*($3 + [84]) - $0))
	$0 = *($3 + [80])
	if ( ($0 == 0) ){ goto $label$7 }
	*($3 + [84]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$7
	$0 = *($3 + [68])
	if ( ($0 == 0) ){ goto $label$8 }
	*(($3 + [72])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$0 = *($3 + [56])
	if ( ($0 == 0) ){ goto $label$9 }
	*(($3 + [60])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$9
	$global$0 = ($3 + [112])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $157($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [128])
	$global$0 = $2
	$3 = *(($1 + [120]))
	$4 = *($1 + [112])
	CALL eosio_assert(((int_64)$4 < (int_64)1152921504606846976), [18455])
	CALL eosio_assert(((int_64)$4 > (int_64)-1152921504606846976), [18479])
	CALL eosio_assert([1], [18506])
	CALL eosio_assert([1], [18521])
	*($2 + [112]) = *($1 + [8])
	$5 = ((int_64)((int_64)$4 << (int_64)2) / (int_64)1000)
	CALL $29(($2 + [96]), ($2 + [112]))
	$4 = *($1 + [168])
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$8 }
	*($2 + [112]) = $4
	CALL $29(($2 + [80]), ($2 + [112]))
	goto $label$7 
	
.LABEL $label$8
	*(($2 + [88])) = [0]
	*($2 + [80]) = (int_64)0
	$6 = CALL $162([17272])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$11 }
	*($2 + [80]) = ($6 << [1])
	$7 = (($2 + [80]) | [1])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($2 + [80]) = ($8 | [1])
	*($2 + [88]) = $7
	*($2 + [84]) = $6
	
.LABEL $label$10
	CALL memcpy($7, [17272], $6)
	
.LABEL $label$9
	*(($7 + $6)) = [0]
	
.LABEL $label$7
	$7 = CALL $146(($2 + [64]), ($2 + [96]))
	CALL $152($7, [18138])
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = [0]
	$4 = *(($1 + [112]))
	$6 = (($2 + [48]) | [1])
	
.LOOP $label$12:
	$9 = ((uint_64)$4 / (uint_64)(int_64)10)
	$1 = (CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$9 * (int_64)10))
	CALL $1(($2 + [112]), int_32((( ($1) | [48]) ? ($1 + [55]) : ($1 <= [10]) ) << [24]) >> [24]), ($2 + [48]))
	if ( (*($2 + [48]) & [1]) ){ goto $label$14 }
	*($2 + [48]) = [0]
	goto $label$13 
	
.LABEL $label$14
	*(*((($2 + [48]) + [8]))) = [0]
	*($2 + [52]) = [0]
	
.LABEL $label$13
	CALL $150(($2 + [48]), [0])
	*((($2 + [48]) + [8])) = *((($2 + [112]) + [8]))
	*($2 + [48]) = *($2 + [112])
	$1 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $9
	if ( $1 ){ goto $label$12 }
	$1 = *($2 + [48])
	$8 = ($1 & [1])
	$10 = ($2 + [56])
	CALL $154($7, ( *($10) ? $6 : $8 ), ( *($2 + [52]) ? uint_32($1 >> [1]) : $8 ))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$15
	CALL $152($7, [18138])
	$1 = *($2 + [80])
	$6 = ($1 & [1])
	CALL $154($7, ( *($2 + [88]) ? (($2 + [80]) | [1]) : $6 ), ( *($2 + [84]) ? uint_32($1 >> [1]) : $6 ))
	$4 = (int_64)0
	$9 = (int_64)59
	$1 = [18140]
	$11 = (int_64)0
	
.LOOP $label$16:
	$12 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$17 }
	$6 = *($1)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$6 = ($6 + [-91])
	goto $label$18 
	
.LABEL $label$19
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$17
	$1 = ($1 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$16 }
	*($2 + [40]) = $3
	*($2 + [32]) = $5
	$1 = CALL $146(($2 + [16]), $7)
	*(($2 + [8])) = *($2 + [40])
	*($2) = *($2 + [32])
	CALL $30($0, $11, $2, $1, [0])
	if ( (*($1) & [1]) ){ goto $label$21 }
	if ( (*($2 + [64]) & [1]) ){ goto $label$20 }
	goto $label$5 
	
.LABEL $label$21
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$20
	CALL _ZdlPv(*($7 + [8]))
	$1 = [1]
	if ( ((*($2 + [80]) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	CALL $145(($2 + [80]))
	
.LABEL $label$5
	$1 = [1]
	if ( (*($2 + [80]) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($2 + [96]) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*(($2 + [88])))
	if ( ((*($2 + [96]) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($2 + [104]))
	$global$0 = ($2 + [128])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [128])
	(unreachable)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*(($0 = CALL memcpy($0, $1, [128])) + [128 align=4]) = (int_64)0
	*(($0 + [136])) = [0]
	$2 = (*(($1 + [132])) - *($1 + [128]))
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL _Znwj($2)
	*(($0 + [128])) = $3
	*(($0 + [136])) = ($3 + $2)
	*(($2 = ($0 + [132]))) = $3
	$4 = *(($1 + [128]))
	$5 = (*(($1 + [132])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($3, $4, $5)
	*($2) = (*($2) + $5)
	
.LABEL $label$4
	*($0 + [140 align=4]) = (int_64)0
	*(($0 + [148])) = [0]
	$2 = (*(($1 + [144])) - *($1 + [140]))
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$2 }
	$3 = CALL _Znwj($2)
	*(($0 + [140])) = $3
	*(($0 + [148])) = ($3 + $2)
	*(($2 = ($0 + [144]))) = $3
	$4 = *(($1 + [140]))
	$5 = (*(($1 + [144])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($3, $4, $5)
	*($2) = (*($2) + $5)
	
.LABEL $label$5
	*($0 + [152 align=4]) = (int_64)0
	*(($0 + [160])) = [0]
	$2 = (*(($1 + [156])) - *($1 + [152]))
	if ( ($2 == 0) ){ goto $label$6 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$1 }
	$3 = CALL _Znwj($2)
	*(($0 + [152])) = $3
	*(($0 + [160])) = ($3 + $2)
	*(($2 = ($0 + [156]))) = $3
	$4 = *(($1 + [152]))
	$5 = (*(($1 + [156])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($3, $4, $5)
	*($2) = (*($2) + $5)
	
.LABEL $label$6
	*($0 + [168]) = *($1 + [168])
	*(($0 + [186])) = *(($1 + [186]))
	*(($0 + [184])) = *(($1 + [184]))
	*(($0 + [176])) = *(($1 + [176]))
	return $0
	
.LABEL $label$3
	CALL $157(($0 + [128]))
	
.LABEL $label$2
	CALL $157(($0 + [140]))
	
.LABEL $label$1
	CALL $157(($0 + [152]))
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $25 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$2 = ($global$0 - [416])
	$global$0 = $2
	$3 = ($0 + [8])
	$5 = *(($0 + [36]))
	$4 = *(($0 + [32]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7 + [8]) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($7 + [188])) == (int_32)$3), [18937])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [16])), (int_64)7035937633859534848, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $10($3, $6)
	CALL eosio_assert(((int_32)*($7 + [188]) == (int_32)$3), [18937])
	
.LABEL $label$1
	$8 = ($0 + [128])
	$9 = *($7)
	$5 = *(($0 + [156]))
	$10 = *(($0 + [152]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$8:
	$6 = ($5 + [-24])
	$4 = *($6)
	if ( ((int_64)*($4) == (int_64)$9) ){ goto $label$7 }
	$5 = $6
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$8), [18937])
	goto $label$5 
	
.LABEL $label$6
	$4 = [0]
	$6 = CALL db_find_i64(*($8), *(($0 + [136])), (int_64)6454109460926300160, $9)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $11($8, $6)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$8), [18937])
	
.LABEL $label$5
	*((($2 + [384]) + [24])) = *(($4 + [40]))
	*(($2 + [400])) = *(($4 + [32]))
	*($2 + [384]) = *($4 + [16])
	*($2 + [392]) = *(($4 + [24]))
	if ( (*($7 + [182]) == 0) ){ goto $label$9 }
	CALL $31($0, $1)
	$global$0 = ($2 + [416])
	return $10
	
.LABEL $label$9
	*($2 + [376]) = [0]
	*($2 + [368]) = (int_64)0
	$6 = (*(($7 + [144])) - *($7 + [140]))
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$11 }
	$5 = CALL _Znwj($6)
	*(($2 + [376])) = ($5 + $6)
	*($2 + [368]) = $5
	*($2 + [372]) = $5
	$4 = *(($7 + [140]))
	$6 = (*(($7 + [144])) - $4)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($5, $4, $6)
	*($2 + [372]) = ($5 + $6)
	
.LABEL $label$12
	*($2 + [360]) = [0]
	*($2 + [352]) = (int_64)0
	$6 = (*(($7 + [132])) - *($7 + [128]))
	if ( ($6 == 0) ){ goto $label$13 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$10 }
	$5 = CALL _Znwj($6)
	*(($2 + [360])) = ($5 + $6)
	*($2 + [352]) = $5
	*($2 + [356]) = $5
	$4 = *(($7 + [128]))
	$6 = (*(($7 + [132])) - $4)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$13 }
	CALL memcpy($5, $4, $6)
	*($2 + [356]) = ($5 + $6)
	
.LABEL $label$13
	$6 = CALL $22(($2 + [160]), $7)
	$11 = CALL $32($0, $6)
	$5 = *($6 + [152])
	if ( ($5 == 0) ){ goto $label$14 }
	*(($6 + [156])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$5 = *($6 + [140])
	if ( ($5 == 0) ){ goto $label$15 }
	*(($6 + [144])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$5 = *($6 + [128])
	if ( ($5 == 0) ){ goto $label$16 }
	*(($6 + [132])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$1 = *((($2 + [384]) + [24]))
	*((($2 + [128]) + [24])) = $1
	$9 = *((($2 + [384]) + [16]))
	*((($2 + [128]) + [16])) = $9
	*((($2 + [32]) + [16])) = $9
	*((($2 + [32]) + [24])) = $1
	$1 = *($2 + [392])
	*($2 + [136]) = $1
	$9 = *($2 + [384])
	*($2 + [32]) = $9
	*($2 + [128]) = $9
	*($2 + [40]) = $1
	$6 = CALL $15($0, ($2 + [32]), [1])
	*(*($2 + [352]) + [1]) = $6
	$5 = [0]
	$8 = [0]
	$4 = *($2 + [372])
	$12 = *($2 + [368])
	$13 = ((int_32)$12 == (int_32)$4)
	if ( $13 ){ goto $label$17 }
	$8 = [0]
	$14 = [0]
	$6 = $12
	
.LOOP $label$19:
	$10 = ((uint_32)*($6) % (uint_32)[13])
	if ( ((uint_32)$10 > (uint_32)[12]) ){ goto $label$29 }
	goto $label$24 
	
.LABEL $label$30
	$8 = ($8 + [10])
	
.LABEL $label$29
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$28
	$8 = ($8 + [5])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$27
	$8 = ($8 + [3])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$26
	$8 = ($8 + [4])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$25
	$8 = ($8 + [8])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$24
	$14 = ($14 + [1])
	$8 = ($8 + [11])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$23
	$8 = ($8 + [2])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$22
	$8 = ($8 + [6])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$8 = ($8 + [7])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$8 = ($8 + [9])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$19 }
	
.LABEL $label$18
	if ( (($14 & [255]) == 0) ){ goto $label$17 }
	if ( (($8 & [255]) <= [22]) ){ goto $label$17 }
	$10 = ((int_32)((uint_32)(($8 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$6 = ([0] - $14)
	$8 = ($8 + ((int_32)( $6 ? $10 : ((uint_32)($6 & [255]) > (uint_32)($10 & [255])) ) * (int_32)[10]))
	
.LABEL $label$17
	$10 = *($2 + [356])
	$15 = *($2 + [352])
	$16 = ((int_32)$15 == (int_32)$10)
	if ( $16 ){ goto $label$31 }
	$5 = [0]
	$17 = [0]
	$6 = $15
	
.LOOP $label$33:
	$14 = ((uint_32)*($6) % (uint_32)[13])
	if ( ((uint_32)$14 > (uint_32)[12]) ){ goto $label$43 }
	goto $label$38 
	
.LABEL $label$44
	$5 = ($5 + [10])
	
.LABEL $label$43
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$42
	$5 = ($5 + [5])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$41
	$5 = ($5 + [3])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$40
	$5 = ($5 + [4])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$39
	$5 = ($5 + [8])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$38
	$17 = ($17 + [1])
	$5 = ($5 + [11])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$37
	$5 = ($5 + [2])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$36
	$5 = ($5 + [6])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	$5 = ($5 + [7])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$5 = ($5 + [9])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$33 }
	
.LABEL $label$32
	if ( (($17 & [255]) == 0) ){ goto $label$31 }
	if ( (($5 & [255]) <= [22]) ){ goto $label$31 }
	$14 = ((int_32)((uint_32)(($5 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$6 = ([0] - $17)
	$5 = ($5 + ((int_32)( $6 ? $14 : ((uint_32)($6 & [255]) > (uint_32)($14 & [255])) ) * (int_32)[10]))
	
.LABEL $label$31
	*($2 + [127]) = $5
	$14 = [0]
	$17 = [0]
	if ( $13 ){ goto $label$45 }
	$17 = [0]
	$18 = [0]
	$6 = $12
	
.LOOP $label$47:
	$13 = ((uint_32)*($6) % (uint_32)[13])
	if ( ((uint_32)$13 > (uint_32)[12]) ){ goto $label$57 }
	goto $label$52 
	
.LABEL $label$58
	$17 = ($17 + [10])
	
.LABEL $label$57
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$56
	$17 = ($17 + [5])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$55
	$17 = ($17 + [3])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$54
	$17 = ($17 + [4])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$53
	$17 = ($17 + [8])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$52
	$18 = ($18 + [1])
	$17 = ($17 + [11])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$51
	$17 = ($17 + [2])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$50
	$17 = ($17 + [6])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$49
	$17 = ($17 + [7])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	$17 = ($17 + [9])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$47 }
	
.LABEL $label$46
	if ( (($18 & [255]) == 0) ){ goto $label$45 }
	if ( (($17 & [255]) <= [22]) ){ goto $label$45 }
	$13 = ((int_32)((uint_32)(($17 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$6 = ([0] - $18)
	$17 = (((int_32)( $6 ? $13 : ((uint_32)($6 & [255]) > (uint_32)($13 & [255])) ) * (int_32)[10]) + $17)
	
.LABEL $label$45
	$19 = (((int_32)($4 - $12) == (int_32)[2]) & ((int_32)($17 & [255]) == (int_32)[21]))
	if ( $16 ){ goto $label$59 }
	$14 = [0]
	$17 = [0]
	$6 = $15
	
.LOOP $label$61:
	$4 = ((uint_32)*($6) % (uint_32)[13])
	if ( ((uint_32)$4 > (uint_32)[12]) ){ goto $label$71 }
	goto $label$66 
	
.LABEL $label$72
	$14 = ($14 + [10])
	
.LABEL $label$71
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$70
	$14 = ($14 + [5])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$69
	$14 = ($14 + [3])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$68
	$14 = ($14 + [4])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$67
	$14 = ($14 + [8])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$66
	$17 = ($17 + [1])
	$14 = ($14 + [11])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$65
	$14 = ($14 + [2])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$64
	$14 = ($14 + [6])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$63
	$14 = ($14 + [7])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$62
	$14 = ($14 + [9])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$61 }
	
.LABEL $label$60
	if ( (($17 & [255]) == 0) ){ goto $label$59 }
	if ( (($14 & [255]) <= [22]) ){ goto $label$59 }
	$4 = ((int_32)((uint_32)(($14 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$6 = ([0] - $17)
	$14 = (((int_32)( $6 ? $4 : ((uint_32)($6 & [255]) > (uint_32)($4 & [255])) ) * (int_32)[10]) + $14)
	
.LABEL $label$59
	$15 = (((int_32)($10 - $15) == (int_32)[2]) & ((int_32)($14 & [255]) == (int_32)[21]))
	if ( ($19 | ((uint_32)($8 & [255]) > (uint_32)[21])) ){ goto $label$73 }
	$17 = ($8 & [255])
	$13 = ($17 <= [22])
	$6 = ($5 & [255])
	if ( ($6 <= [17]) ){ goto $label$74 }
	if ( (($13 & ($6 <= $17)) == 0) ){ goto $label$73 }
	
.LABEL $label$74
	$18 = (($2 + [80]) + [24])
	$12 = (($2 + [352]) + [8])
	
.LOOP $label$75:
	$1 = *((($2 + [384]) + [24]))
	*($18) = $1
	$9 = *((($2 + [384]) + [16]))
	*((($2 + [80]) + [16])) = $9
	*(($2 + [16])) = $9
	*(($2 + [24])) = $1
	$1 = *($2 + [392])
	*($2 + [88]) = $1
	$9 = *($2 + [384])
	*($2) = $9
	*($2 + [80]) = $9
	*($2 + [8]) = $1
	$6 = CALL $15($0, $2, ($11 & [255]))
	*($2 + [64]) = $6
	$5 = *($2 + [356])
	if ( ((int_32)$5 == (int_32)*($12)) ){ goto $label$78 }
	*($5) = $6
	$10 = (*($2 + [356]) + [1])
	*($2 + [356]) = $10
	$5 = [0]
	$6 = *($2 + [352])
	if ( ((int_32)$6 != (int_32)$10) ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$78
	CALL $33(($2 + [352]), ($2 + [64]))
	$5 = [0]
	$10 = *($2 + [356])
	$6 = *($2 + [352])
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$76 }
	
.LABEL $label$77
	$14 = [0]
	
.LOOP $label$80:
	$4 = ((uint_32)*($6) % (uint_32)[13])
	if ( ((uint_32)$4 > (uint_32)[12]) ){ goto $label$90 }
	goto $label$85 
	
.LABEL $label$91
	$5 = ($5 + [10])
	
.LABEL $label$90
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$89
	$5 = ($5 + [5])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$88
	$5 = ($5 + [3])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$87
	$5 = ($5 + [4])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$86
	$5 = ($5 + [8])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$85
	$14 = ($14 + [1])
	$5 = ($5 + [11])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$84
	$5 = ($5 + [2])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$83
	$5 = ($5 + [6])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$82
	$5 = ($5 + [7])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$81
	$5 = ($5 + [9])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$80 }
	
.LABEL $label$79
	if ( (($14 & [255]) == 0) ){ goto $label$76 }
	if ( (($5 & [255]) <= [22]) ){ goto $label$76 }
	$4 = ((int_32)((uint_32)(($5 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$6 = ([0] - $14)
	$5 = ($5 + ((int_32)( $6 ? $4 : ((uint_32)($6 & [255]) > (uint_32)($4 & [255])) ) * (int_32)[10]))
	
.LABEL $label$76
	$11 = ($11 + [1])
	*($2 + [127]) = $5
	$6 = ($5 & [255])
	$4 = ($13 & ($6 <= $17))
	if ( ($6 <= [17]) ){ goto $label$75 }
	if ( $4 ){ goto $label$75 }
	
.LABEL $label$73
	if ( ($15 == 0) ){ goto $label$93 }
	$6 = ( [3] ? [2] : $19 )
	goto $label$92 
	
.LABEL $label$93
	if ( (($5 & [255]) <= [22]) ){ goto $label$94 }
	$6 = ( [2] ? [1] : ((uint_32)($8 & [255]) > (uint_32)[21]) )
	goto $label$92 
	
.LABEL $label$94
	$6 = [2]
	if ( ((uint_32)($8 & [255]) > (uint_32)[21]) ){ goto $label$92 }
	$6 = [1]
	$5 = ($5 & [255])
	$4 = ($8 & [255])
	if ( ((uint_32)$4 > (uint_32)$5) ){ goto $label$92 }
	$6 = ( [3] ? [2] : ((int_32)$4 == (int_32)$5) )
	
.LABEL $label$92
	*($2 + [126]) = $6
	$1 = *($0)
	*($2 + [68]) = ($2 + [352])
	*($2 + [64]) = ($2 + [127])
	*($2 + [72]) = ($2 + [126])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18237])
	CALL $34($3, $7, $1, ($2 + [64]))
	CALL $35($0, *($7 + [8]))
	$6 = *($2 + [352])
	if ( ($6 == 0) ){ goto $label$95 }
	*($2 + [356]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$95
	$6 = *($2 + [368])
	if ( ($6 == 0) ){ goto $label$96 }
	*($2 + [372]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$96
	$global$0 = ($2 + [416])
	return (unreachable)
	
.LABEL $label$11
	CALL $157(($2 + [368]))
	
.LABEL $label$10
	CALL $157(($2 + [352]))
	$14
	$13
	$4
	$4
	(unreachable)
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_64)$4 < (int_64)288230376151711744), [18455])
	CALL eosio_assert(((int_64)$4 > (int_64)-288230376151711744), [18479])
	CALL eosio_assert([1], [18506])
	CALL eosio_assert([1], [18521])
	*(($2 + [72])) = [0]
	*($2 + [64]) = (int_64)0
	$5 = ((int_64)((int_64)$4 << (int_64)4) / (int_64)1000)
	$1 = CALL $162([18193])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$5 }
	*($2 + [64]) = ($1 << [1])
	$6 = (($2 + [64]) | [1])
	if ( $1 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = (($1 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($2 + [64]) = ($7 | [1])
	*($2 + [72]) = $6
	*($2 + [68]) = $1
	
.LABEL $label$4
	CALL memcpy($6, [18193], $1)
	
.LABEL $label$3
	*(($6 + $1)) = [0]
	*($2 + [56]) = [0]
	*($2 + [48]) = (int_64)0
	$1 = [176]
	
.LOOP $label$6:
	$6 = *(($0 + $1))
	CALL $153(($2 + [48]), *((uint_32($6 >> [4]) + [8313])))
	CALL $153(($2 + [48]), *((($6 & [15]) + [8313])))
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[208]) ){ goto $label$6 }
	$1 = *($2 + [48])
	$6 = ($1 & [1])
	$7 = ($2 + [56])
	CALL $154(($2 + [64]), ( *($7) ? (($2 + [48]) | [1]) : $6 ), ( *($2 + [52]) ? uint_32($1 >> [1]) : $6 ))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($7))
	
.LABEL $label$7
	$4 = (int_64)0
	$8 = (int_64)59
	$1 = [18224]
	$9 = (int_64)0
	
.LOOP $label$8:
	$10 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$9 }
	$6 = *($1)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$6 = ($6 + [-91])
	goto $label$10 
	
.LABEL $label$11
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$9
	$1 = ($1 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$8 }
	*($2 + [40]) = $3
	*($2 + [32]) = $5
	$1 = CALL $146(($2 + [16]), ($2 + [64]))
	*(($2 + [8])) = *($2 + [40])
	*($2) = *($2 + [32])
	CALL $30($0, $9, $2, $1, [0])
	if ( (*($1) & [1]) ){ goto $label$13 }
	if ( (*($2 + [64]) & [1]) ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$13
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$12
	CALL _ZdlPv(*($2 + [72]))
	$global$0 = ($2 + [80])
	return (unreachable)
	
.LABEL $label$2
	CALL $145(($2 + [64]))
	
.LABEL $label$1
	$global$0 = ($2 + [80])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18132])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [18132])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $157($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($4 - $5)) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$4 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($4 << [1])
	$2 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$6
	$5 = CALL _Znwj($2)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $2)
	CALL memcpy($5, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$4 = (*($0 + [4]) - $5)
	$6 = ( ($1 + $4) ? $2 : ((uint_32)$3 > (uint_32)$4) )
	$7 = ($6 - $1)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $7)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$8 }
	$0 = ($2 - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $6, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($5 + $7)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $157($0)
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18903])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($4, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($1 + [188])) == (int_32)$0), [18272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [18318])
	*($1 + [182]) = [2]
	$5 = *($1 + [8])
	CALL eosio_assert([1], [18369])
	$6 = ($1 + [128])
	$7 = ($1 + [182])
	$8 = ($1 + [8])
	$10 = *($1 + [128])
	$9 = *(($1 + [132]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 $11)
	$13 = [113]
	
.LOOP $label$1:
	$13 = ($13 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	$13 = ( $13 ? ($11 + $13) : ((int_32)$10 == (int_32)$9) )
	$10 = ($1 + [140])
	$11 = *($1 + [140])
	$9 = *(($1 + [144]))
	$14 = ($9 - $11)
	$12 = (CASTING uint_64)(uint_32 $14)
	
.LOOP $label$2:
	$13 = ($13 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$2 }
	$13 = ( $13 ? ($14 + $13) : ((int_32)$11 == (int_32)$9) )
	$11 = ($1 + [152])
	$14 = *($1 + [152])
	$9 = *(($1 + [156]))
	$15 = ($9 - $14)
	$12 = (CASTING uint_64)(uint_32 $15)
	
.LOOP $label$3:
	$13 = ($13 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$3 }
	$9 = (( $13 ? ($15 + $13) : ((int_32)$14 == (int_32)$9) ) + [19])
	if ( ($9 <= [513]) ){ goto $label$5 }
	$13 = CALL $165($9)
	goto $label$4 
	
.LABEL $label$5
	$13 = ($3 - (($9 + [15]) & [-16]))
	$global$0 = $13
	
.LABEL $label$4
	*($4 + [12]) = $13
	*($4 + [8]) = $13
	*($4 + [16]) = ($13 + $9)
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = $8
	*($4 + [64]) = $6
	*($4 + [68]) = $10
	*($4 + [72]) = $11
	*($4 + [104]) = $7
	*($4 + [32]) = $1
	*($4 + [40]) = ($1 + [16])
	*($4 + [44]) = ($1 + [32])
	*($4 + [48]) = ($1 + [64])
	*($4 + [52]) = ($1 + [96])
	*($4 + [56]) = ($1 + [104])
	*($4 + [60]) = ($1 + [112])
	*($4 + [76]) = ($1 + [168])
	*($4 + [80]) = ($1 + [176])
	*($4 + [84]) = ($1 + [177])
	*($4 + [88]) = ($1 + [178])
	*($4 + [92]) = ($1 + [179])
	*($4 + [96]) = ($1 + [180])
	*($4 + [100]) = ($1 + [181])
	*($4 + [112]) = ($1 + [184])
	*($4 + [108]) = ($1 + [183])
	*($4 + [116]) = ($1 + [185])
	*($4 + [120]) = ($1 + [186])
	CALL $110(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [192]), $2, $13, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $169($13)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [128])
	return 
	
.LABEL $label$6
	$global$0 = ($4 + [128])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	$4 = ($global$0 - [128])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [188])) == (int_32)$0), [18272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [18318])
	*($1 + [176]) = *(*($3))
	$6 = *($1 + [8])
	$8 = *($3 + [4])
	$7 = ($1 + [140])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$1 }
	CALL $109($7, *($8), *($8 + [4]))
	
.LABEL $label$1
	*($1 + [178]) = *(*($3 + [8]))
	$3 = *($3 + [12])
	$9 = ($1 + [152])
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$2 }
	CALL $109($9, *($3), *($3 + [4]))
	
.LABEL $label$2
	$10 = ($1 + [176])
	$11 = ($1 + [8])
	$12 = ($1 + [178])
	*($1 + [181 align=1]) = [257]
	CALL eosio_assert(((int_64)$6 == (int_64)*(($1 + [8]))), [18369])
	$13 = ($1 + [128])
	$14 = ($1 + [182])
	$15 = ($1 + [181])
	$16 = *($1 + [128])
	$8 = *(($1 + [132]))
	$17 = ($8 - $16)
	$18 = (CASTING uint_64)(uint_32 $17)
	$3 = [113]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$18 = (uint_64)$18 >> (uint_64)(int_64)7
	if ( ((int_64)$18) != (int_64)0) ){ goto $label$3 }
	$3 = ( $3 ? ($17 + $3) : ((int_32)$16 == (int_32)$8) )
	$16 = *($1 + [140])
	$8 = *(($1 + [144]))
	$17 = ($8 - $16)
	$18 = (CASTING uint_64)(uint_32 $17)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$18 = (uint_64)$18 >> (uint_64)(int_64)7
	if ( ((int_64)$18) != (int_64)0) ){ goto $label$4 }
	$3 = ( $3 ? ($17 + $3) : ((int_32)$16 == (int_32)$8) )
	$16 = *($1 + [152])
	$8 = *(($1 + [156]))
	$17 = ($8 - $16)
	$18 = (CASTING uint_64)(uint_32 $17)
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$18 = (uint_64)$18 >> (uint_64)(int_64)7
	if ( ((int_64)$18) != (int_64)0) ){ goto $label$5 }
	$8 = (( $3 ? ($17 + $3) : ((int_32)$16 == (int_32)$8) ) + [19])
	if ( ($8 <= [513]) ){ goto $label$7 }
	$3 = CALL $165($8)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$6
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $8)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $11
	*($5 + [64]) = $13
	*($5 + [68]) = $7
	*($5 + [72]) = $9
	*($5 + [80]) = $10
	*($5 + [88]) = $12
	*($5 + [100]) = $15
	*($5 + [104]) = $14
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [32])
	*($5 + [48]) = ($1 + [64])
	*($5 + [52]) = ($1 + [96])
	*($5 + [56]) = ($1 + [104])
	*($5 + [60]) = ($1 + [112])
	*($5 + [76]) = ($1 + [168])
	*($5 + [84]) = ($1 + [177])
	*($5 + [92]) = ($1 + [179])
	*($5 + [96]) = ($1 + [180])
	*($5 + [112]) = ($1 + [184])
	*($5 + [108]) = ($1 + [183])
	*($5 + [116]) = ($1 + [185])
	*($5 + [120]) = ($1 + [186])
	CALL $110(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [192]), $2, $3, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $169($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [128])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [128])
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [272])
	$global$0 = $2
	$1 = CALL $146($2, ($1 + [248]))
	$7 = CALL $146(($2 + [16]), ($1 + [236]))
	$6 = CALL $146(($2 + [32]), ($1 + [224]))
	$5 = CALL $146(($2 + [48]), ($1 + [212]))
	$4 = CALL $146(($2 + [64]), ($1 + [200]))
	$3 = CALL $22(($2 + [80]), $1)
	CALL $139($0, $3, *($1 + [192]), $4, $5, $6, $7, $1)
	if ( (*($1) & [1]) ){ goto $label$11 }
	if ( (*($7) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($7 + [8]))
	$1 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$1 = [1]
	if ( (*($6) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( (*($5) & $1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & $1) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( (*($4) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = *($3 + [152])
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$1 = *($3 + [152])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*(($3 + [156])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$1 = *($3 + [140])
	if ( ($1 == 0) ){ goto $label$12 }
	*(($3 + [144])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$1 = *($3 + [128])
	if ( ($1 == 0) ){ goto $label$13 }
	*(($3 + [132])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$global$0 = ($2 + [272])
}

void .FUNC $65 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [224])
	$global$0 = $2
	CALL require_auth($1)
	CALL $37($0, $1)
	$3 = ($0 + [8])
	$5 = *(($0 + [36]))
	$4 = *(($0 + [32]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7 + [8]) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($7 + [188])) == (int_32)$3), [18937])
	*($2 + [220]) = $7
	*($2 + [216]) = $3
	$4 = (($2 + [216]) | [4])
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL db_find_i64(*($3), *(($0 + [16])), (int_64)7035937633859534848, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$7 = CALL $10($3, $6)
	CALL eosio_assert(((int_32)*($7 + [188]) == (int_32)$3), [18937])
	*($2 + [220]) = $7
	*($2 + [216]) = $3
	$4 = (($2 + [216]) | [4])
	goto $label$1 
	
.LABEL $label$5
	$7 = [0]
	*($2 + [220]) = [0]
	*($2 + [216]) = $3
	$4 = (($2 + [216]) | [4])
	
.LABEL $label$1
	*($2 + [208]) = [0]
	*($2 + [200]) = (int_64)0
	$6 = (*(($7 + [144])) - *($7 + [140]))
	if ( ($6 == 0) ){ goto $label$7 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$6 }
	$5 = CALL _Znwj($6)
	*(($2 + [208])) = ($5 + $6)
	*($2 + [200]) = $5
	*($2 + [204]) = $5
	$8 = *(($7 + [140]))
	$6 = (*(($7 + [144])) - $8)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($5, $8, $6)
	*($2 + [204]) = ($5 + $6)
	
.LABEL $label$7
	$6 = CALL $22($2, $7)
	CALL eosio_assert((*($6 + [182]) == 0), [18624])
	$5 = *($6 + [152])
	if ( ($5 == 0) ){ goto $label$8 }
	*(($6 + [156])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$8
	$5 = *($6 + [140])
	if ( ($5 == 0) ){ goto $label$9 }
	*(($6 + [144])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$5 = *($6 + [128])
	if ( ($5 == 0) ){ goto $label$10 }
	*(($6 + [132])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$10
	CALL eosio_assert(((int_32)(*($2 + [204]) - *($2 + [200])) == (int_32)[2]), [17759])
	CALL $56($0, ($2 + [216]), [1])
	$1 = *($0)
	$6 = *($2 + [220])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [18237])
	CALL $66($3, $6, $1)
	CALL $35($0, *(*($4) + [8]))
	$6 = *($2 + [200])
	if ( ($6 == 0) ){ goto $label$11 }
	*($2 + [204]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$11
	$global$0 = ($2 + [224])
	return (unreachable)
	
.LABEL $label$6
	CALL $157(($2 + [200]))
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [128])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [188])) == (int_32)$0), [18272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [18318])
	*($1 + [184]) = [1]
	$6 = ($1 + [8])
	$7 = *($1 + [8])
	$9 = *($3)
	$8 = ($1 + [140])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$1 }
	CALL $109($8, *($9), *($9 + [4]))
	
.LABEL $label$1
	$10 = ($1 + [184])
	*($1 + [176]) = *(*($3 + [4]))
	$9 = *($3 + [8])
	$11 = *($9)
	$12 = *($9 + [8])
	$3 = *($3 + [12])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$12), [18697])
	$11 = ((int_64)$11 + (int_64)*($3))
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [18740])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [18759])
	*(($1 + [120])) = $12
	*($1 + [112]) = $11
	CALL eosio_assert(((int_64)$7 == (int_64)*($6)), [18369])
	$13 = ($1 + [128])
	$14 = ($1 + [176])
	$15 = *($1 + [128])
	$9 = *(($1 + [132]))
	$16 = ($9 - $15)
	$11 = (CASTING uint_64)(uint_32 $16)
	$3 = [113]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$2 }
	$3 = ( $3 ? ($16 + $3) : ((int_32)$15 == (int_32)$9) )
	$15 = *($1 + [140])
	$9 = *(($1 + [144]))
	$16 = ($9 - $15)
	$11 = (CASTING uint_64)(uint_32 $16)
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$3 }
	$3 = ( $3 ? ($16 + $3) : ((int_32)$15 == (int_32)$9) )
	$15 = ($1 + [152])
	$16 = *($1 + [152])
	$9 = *(($1 + [156]))
	$17 = ($9 - $16)
	$11 = (CASTING uint_64)(uint_32 $17)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	$9 = (( $3 ? ($17 + $3) : ((int_32)$16 == (int_32)$9) ) + [19])
	if ( ($9 <= [513]) ){ goto $label$6 }
	$3 = CALL $165($9)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$5
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $9)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $6
	*($5 + [64]) = $13
	*($5 + [68]) = $8
	*($5 + [72]) = $15
	*($5 + [80]) = $14
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [32])
	*($5 + [48]) = ($1 + [64])
	*($5 + [52]) = ($1 + [96])
	*($5 + [56]) = ($1 + [104])
	*($5 + [60]) = ($1 + [112])
	*($5 + [76]) = ($1 + [168])
	*($5 + [84]) = ($1 + [177])
	*($5 + [88]) = ($1 + [178])
	*($5 + [92]) = ($1 + [179])
	*($5 + [96]) = ($1 + [180])
	*($5 + [100]) = ($1 + [181])
	*($5 + [104]) = ($1 + [182])
	*($5 + [112]) = $10
	*($5 + [108]) = ($1 + [183])
	*($5 + [116]) = ($1 + [185])
	*($5 + [120]) = ($1 + [186])
	CALL $110(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [192]), $2, $3, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $169($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [128])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [128])
}

void .FUNC $67 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL $37($0, $1)
	$4 = ($0 + [8])
	$6 = *(($0 + [36]))
	$5 = *(($0 + [32]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8 + [8]) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($8 + [188])) == (int_32)$4), [18937])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [16])), (int_64)7035937633859534848, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $10($4, $7)
	CALL eosio_assert(((int_32)*($8 + [188]) == (int_32)$4), [18937])
	
.LABEL $label$1
	$9 = ($0 + [128])
	$10 = *($8)
	$6 = *(($0 + [156]))
	$11 = *(($0 + [152]))
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$8:
	$7 = ($6 + [-24])
	$5 = *($7)
	if ( ((int_64)*($5) == (int_64)$10) ){ goto $label$7 }
	$6 = $7
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$9), [18937])
	goto $label$5 
	
.LABEL $label$6
	$5 = [0]
	$7 = CALL db_find_i64(*($9), *(($0 + [136])), (int_64)6454109460926300160, $10)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $11($9, $7)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$9), [18937])
	
.LABEL $label$5
	*((($3 + [192]) + [24])) = *(($5 + [40]))
	*(($3 + [208])) = *(($5 + [32]))
	*($3 + [192]) = *($5 + [16])
	*($3 + [200]) = *(($5 + [24]))
	$10 = *($8 + [112])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($8 + [120]))), [18638])
	CALL eosio_assert(((int_64)$10 == (int_64)*($2)), [17796])
	*($3 + [184]) = [0]
	*($3 + [176]) = (int_64)0
	$5 = ($8 + [144])
	$6 = (*($5) - *($8 + [140]))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL _Znwj($6)
	*((($3 + [176]) + [8])) = ($7 + $6)
	*($3 + [176]) = $7
	*($3 + [180]) = $7
	$6 = $7
	$11 = *(($8 + [140]))
	$5 = (*($5) - $11)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$13 }
	CALL memcpy($7, $11, $5)
	$6 = ($7 + $5)
	*($3 + [180]) = $6
	
.LABEL $label$13
	$6 = ((uint_32)*($7 + [1]) % (uint_32)[13])
	$6 = ((uint_32)*($7) % (uint_32)[13])
	$12 = ( ( [10] ? ($6 + [1]) : ((uint_32)$6 > (uint_32)[8]) ) ? [11] : $6 )
	CALL eosio_assert((((int_32)($6 - $7) == (int_32)[2]) & ((int_32)$12 == (int_32)( ( [10] ? ($6 + [1]) : ((uint_32)$6 > (uint_32)[8]) ) ? [11] : $6 ))), [17826])
	*($3 + [168]) = [0]
	*($3 + [160]) = (int_64)0
	CALL $33(($3 + [160]), ($7 + [1]))
	$10 = *((($3 + [192]) + [24]))
	*((($3 + [128]) + [24])) = $10
	$13 = *((($3 + [192]) + [16]))
	*((($3 + [128]) + [16])) = $13
	*((($3 + [32]) + [16])) = $13
	*((($3 + [32]) + [24])) = $10
	$10 = *($3 + [200])
	*($3 + [136]) = $10
	$13 = *($3 + [192])
	*($3 + [32]) = $13
	*($3 + [128]) = $13
	*($3 + [40]) = $10
	$7 = CALL $15($0, ($3 + [32]), [4])
	*($3 + [64]) = $7
	$6 = *($3 + [164])
	if ( ((uint_32)$6 >= (uint_32)*($3 + [168])) ){ goto $label$15 }
	*($6) = $7
	*($3 + [164]) = (*($3 + [164]) + [1])
	goto $label$14 
	
.LABEL $label$15
	CALL $16(($3 + [160]), ($3 + [64]))
	
.LABEL $label$14
	$10 = *((($3 + [192]) + [24]))
	*((($3 + [96]) + [24])) = $10
	$13 = *((($3 + [192]) + [16]))
	*((($3 + [96]) + [16])) = $13
	*(($3 + [16])) = $13
	*(($3 + [24])) = $10
	$10 = *($3 + [200])
	*($3 + [104]) = $10
	$13 = *($3 + [192])
	*($3) = $13
	*($3 + [96]) = $13
	*($3 + [8]) = $10
	$7 = CALL $15($0, $3, [5])
	*(*($3 + [176]) + [1]) = $7
	$6 = [0]
	$5 = [0]
	$9 = *($3 + [180])
	$7 = *($3 + [176])
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$16 }
	$5 = [0]
	$2 = [0]
	
.LOOP $label$18:
	$11 = ((uint_32)*($7) % (uint_32)[13])
	if ( ((uint_32)$11 > (uint_32)[12]) ){ goto $label$28 }
	goto $label$23 
	
.LABEL $label$29
	$5 = ($5 + [10])
	
.LABEL $label$28
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$27
	$5 = ($5 + [5])
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$26
	$5 = ($5 + [3])
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$25
	$5 = ($5 + [4])
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$24
	$5 = ($5 + [8])
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$23
	$2 = ($2 + [1])
	$5 = ($5 + [11])
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$22
	$5 = ($5 + [2])
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$21
	$5 = ($5 + [6])
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$5 = ($5 + [7])
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$5 = ($5 + [9])
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$18 }
	
.LABEL $label$17
	if ( (($2 & [255]) == 0) ){ goto $label$16 }
	if ( (($5 & [255]) <= [22]) ){ goto $label$16 }
	$11 = ((int_32)((uint_32)(($5 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$7 = ([0] - $2)
	$5 = ($5 + ((int_32)( $7 ? $11 : ((uint_32)($7 & [255]) > (uint_32)($11 & [255])) ) * (int_32)[10]))
	
.LABEL $label$16
	*($3 + [88]) = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$11 = *($3 + [164])
	$7 = *($3 + [160])
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$30 }
	$6 = [0]
	$9 = [0]
	
.LOOP $label$32:
	$5 = ((uint_32)*($7) % (uint_32)[13])
	if ( ((uint_32)$5 > (uint_32)[12]) ){ goto $label$42 }
	goto $label$37 
	
.LABEL $label$43
	$6 = ($6 + [10])
	
.LABEL $label$42
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$41
	$6 = ($6 + [5])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$40
	$6 = ($6 + [3])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$39
	$6 = ($6 + [4])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$38
	$6 = ($6 + [8])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$37
	$9 = ($9 + [1])
	$6 = ($6 + [11])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$36
	$6 = ($6 + [2])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$35
	$6 = ($6 + [6])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$6 = ($6 + [7])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$6 = ($6 + [9])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$32 }
	
.LABEL $label$31
	if ( (($9 & [255]) == 0) ){ goto $label$30 }
	if ( (($6 & [255]) <= [22]) ){ goto $label$30 }
	$5 = ((int_32)((uint_32)(($6 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$7 = ([0] - $9)
	$6 = ($6 + ((int_32)( $7 ? $5 : ((uint_32)($7 & [255]) > (uint_32)($5 & [255])) ) * (int_32)[10]))
	
.LABEL $label$30
	*($3 + [80]) = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	$10 = *($0)
	*($3 + [68]) = ($3 + [176])
	*($3 + [64]) = ($3 + [88])
	*($3 + [72]) = ($3 + [80])
	*($3 + [76]) = ($3 + [160])
	$14 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($14, [18237])
	CALL $68($4, $8, $10, ($3 + [64]))
	if ( ((int_32)$12 == (int_32)[11]) ){ goto $label$11 }
	$11 = *($3 + [180])
	$2 = *($3 + [176])
	if ( ((int_32)$2 == (int_32)$11) ){ goto $label$44 }
	$6 = [0]
	$9 = [0]
	$7 = $2
	
.LOOP $label$46:
	$5 = ((uint_32)*($7) % (uint_32)[13])
	if ( ((uint_32)$5 > (uint_32)[12]) ){ goto $label$56 }
	goto $label$51 
	
.LABEL $label$57
	$6 = ($6 + [10])
	
.LABEL $label$56
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$55
	$6 = ($6 + [5])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$54
	$6 = ($6 + [3])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$53
	$6 = ($6 + [4])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$52
	$6 = ($6 + [8])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$51
	$9 = ($9 + [1])
	$6 = ($6 + [11])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$50
	$6 = ($6 + [2])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$49
	$6 = ($6 + [6])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	$6 = ($6 + [7])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$47
	$6 = ($6 + [9])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$46 }
	
.LABEL $label$45
	if ( (($9 & [255]) == 0) ){ goto $label$58 }
	if ( (($6 & [255]) <= [22]) ){ goto $label$58 }
	$5 = ((int_32)((uint_32)(($6 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$7 = ([0] - $9)
	$6 = (((int_32)( $7 ? $5 : ((uint_32)($7 & [255]) > (uint_32)($5 & [255])) ) * (int_32)[10]) + $6)
	
.LABEL $label$58
	if ( ((int_32)($11 - $2) != (int_32)[2]) ){ goto $label$44 }
	if ( ((int_32)($6 & [255]) != (int_32)[21]) ){ goto $label$44 }
	$11 = *($3 + [164])
	$2 = *($3 + [160])
	if ( ((int_32)$2 == (int_32)$11) ){ goto $label$44 }
	$6 = [0]
	$9 = [0]
	$7 = $2
	
.LOOP $label$60:
	$5 = ((uint_32)*($7) % (uint_32)[13])
	if ( ((uint_32)$5 > (uint_32)[12]) ){ goto $label$70 }
	goto $label$65 
	
.LABEL $label$71
	$6 = ($6 + [10])
	
.LABEL $label$70
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$69
	$6 = ($6 + [5])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$68
	$6 = ($6 + [3])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$67
	$6 = ($6 + [4])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$66
	$6 = ($6 + [8])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$65
	$9 = ($9 + [1])
	$6 = ($6 + [11])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$64
	$6 = ($6 + [2])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$63
	$6 = ($6 + [6])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$62
	$6 = ($6 + [7])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$61
	$6 = ($6 + [9])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$60 }
	
.LABEL $label$59
	if ( (($9 & [255]) == 0) ){ goto $label$72 }
	if ( (($6 & [255]) <= [22]) ){ goto $label$72 }
	$5 = ((int_32)((uint_32)(($6 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$7 = ([0] - $9)
	$6 = (((int_32)( $7 ? $5 : ((uint_32)($7 & [255]) > (uint_32)($5 & [255])) ) * (int_32)[10]) + $6)
	
.LABEL $label$72
	if ( ((int_32)($11 - $2) != (int_32)[2]) ){ goto $label$44 }
	if ( ((int_32)($6 & [255]) == (int_32)[21]) ){ goto $label$11 }
	
.LABEL $label$44
	$11 = *($3 + [164])
	$9 = *($3 + [160])
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$12
	CALL $157(($3 + [176]))
	
.LABEL $label$11
	CALL $31($0, $1)
	$11 = *($3 + [164])
	$9 = *($3 + [160])
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$9 }
	
.LABEL $label$10
	$6 = [0]
	$2 = [0]
	$7 = $9
	
.LOOP $label$74:
	$5 = ((uint_32)*($7) % (uint_32)[13])
	if ( ((uint_32)$5 > (uint_32)[12]) ){ goto $label$84 }
	goto $label$79 
	
.LABEL $label$85
	$6 = ($6 + [10])
	
.LABEL $label$84
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$83
	$6 = ($6 + [5])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$82
	$6 = ($6 + [3])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$81
	$6 = ($6 + [4])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$80
	$6 = ($6 + [8])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$79
	$2 = ($2 + [1])
	$6 = ($6 + [11])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$78
	$6 = ($6 + [2])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$77
	$6 = ($6 + [6])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$76
	$6 = ($6 + [7])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$75
	$6 = ($6 + [9])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$74 }
	
.LABEL $label$73
	if ( (($2 & [255]) == 0) ){ goto $label$86 }
	if ( (($6 & [255]) <= [22]) ){ goto $label$86 }
	$5 = ((int_32)((uint_32)(($6 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$7 = ([0] - $2)
	$6 = (((int_32)( $7 ? $5 : ((uint_32)($7 & [255]) > (uint_32)($5 & [255])) ) * (int_32)[10]) + $6)
	
.LABEL $label$86
	if ( ((int_32)($11 - $9) != (int_32)[2]) ){ goto $label$9 }
	if ( ((int_32)($6 & [255]) != (int_32)[21]) ){ goto $label$9 }
	$1 = *($0)
	CALL eosio_assert($14, [18237])
	CALL $69($4, $8, $1)
	$9 = *($3 + [160])
	
.LABEL $label$9
	if ( ($9 == 0) ){ goto $label$87 }
	*($3 + [164]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$87
	$7 = *($3 + [176])
	if ( ($7 == 0) ){ goto $label$88 }
	*($3 + [180]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$88
	$global$0 = ($3 + [224])
	$11
	$5
	$5
	$5
	(unreachable)
	$5
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($1 + [188])) == (int_32)$0), [18272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [18318])
	*($1 + [179 align=1]) = [258]
	*($1 + [185]) = [1]
	$5 = *($1 + [8])
	*($1 + [104]) = CALL current_time()
	CALL eosio_assert(((int_64)$5 == (int_64)*($1 + [8])), [18369])
	$6 = ($1 + [128])
	$7 = ($1 + [104])
	$8 = ($1 + [185])
	$9 = ($1 + [180])
	$10 = ($1 + [179])
	$11 = ($1 + [8])
	$13 = *($1 + [128])
	$12 = *(($1 + [132]))
	$14 = ($12 - $13)
	$15 = (CASTING uint_64)(uint_32 $14)
	$16 = [113]
	
.LOOP $label$1:
	$16 = ($16 + [1])
	$15 = (uint_64)$15 >> (uint_64)(int_64)7
	if ( ((int_64)$15) != (int_64)0) ){ goto $label$1 }
	$16 = ( $16 ? ($14 + $16) : ((int_32)$13 == (int_32)$12) )
	$13 = ($1 + [140])
	$14 = *($1 + [140])
	$12 = *(($1 + [144]))
	$17 = ($12 - $14)
	$15 = (CASTING uint_64)(uint_32 $17)
	
.LOOP $label$2:
	$16 = ($16 + [1])
	$15 = (uint_64)$15 >> (uint_64)(int_64)7
	if ( ((int_64)$15) != (int_64)0) ){ goto $label$2 }
	$16 = ( $16 ? ($17 + $16) : ((int_32)$14 == (int_32)$12) )
	$14 = ($1 + [152])
	$17 = *($1 + [152])
	$12 = *(($1 + [156]))
	$18 = ($12 - $17)
	$15 = (CASTING uint_64)(uint_32 $18)
	
.LOOP $label$3:
	$16 = ($16 + [1])
	$15 = (uint_64)$15 >> (uint_64)(int_64)7
	if ( ((int_64)$15) != (int_64)0) ){ goto $label$3 }
	$12 = (( $16 ? ($18 + $16) : ((int_32)$17 == (int_32)$12) ) + [19])
	if ( ($12 <= [513]) ){ goto $label$5 }
	$16 = CALL $165($12)
	goto $label$4 
	
.LABEL $label$5
	$16 = ($3 - (($12 + [15]) & [-16]))
	$global$0 = $16
	
.LABEL $label$4
	*($4 + [12]) = $16
	*($4 + [8]) = $16
	*($4 + [16]) = ($16 + $12)
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = $11
	*($4 + [56]) = $7
	*($4 + [64]) = $6
	*($4 + [68]) = $13
	*($4 + [72]) = $14
	*($4 + [92]) = $10
	*($4 + [96]) = $9
	*($4 + [32]) = $1
	*($4 + [40]) = ($1 + [16])
	*($4 + [44]) = ($1 + [32])
	*($4 + [48]) = ($1 + [64])
	*($4 + [52]) = ($1 + [96])
	*($4 + [60]) = ($1 + [112])
	*($4 + [76]) = ($1 + [168])
	*($4 + [80]) = ($1 + [176])
	*($4 + [84]) = ($1 + [177])
	*($4 + [88]) = ($1 + [178])
	*($4 + [100]) = ($1 + [181])
	*($4 + [104]) = ($1 + [182])
	*($4 + [112]) = ($1 + [184])
	*($4 + [108]) = ($1 + [183])
	*($4 + [116]) = $8
	*($4 + [120]) = ($1 + [186])
	CALL $110(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [192]), $2, $16, $12)
	if ( ((uint_32)$12 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $169($16)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [128])
	return 
	
.LABEL $label$6
	$global$0 = ($4 + [128])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $120($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $26($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $121($2, $1)
	CALL $123(CALL $122(CALL $122($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $157($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $26(($6 + [28]), [8])
	$2 = *($6 + [28])
	CALL eosio_assert(((int_32)(*(($6 + [32])) - $2) > (int_32)[7]), [18132])
	CALL memcpy($2, $4, [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $63 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$3 = ($global$0 - [576])
	$global$0 = $3
	CALL $37($0, $1)
	$4 = ($0 + [8])
	$6 = *(($0 + [36]))
	$5 = *(($0 + [32]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8 + [8]) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($8 + [188])) == (int_32)$4), [18937])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [16])), (int_64)7035937633859534848, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $10($4, $7)
	CALL eosio_assert(((int_32)*($8 + [188]) == (int_32)$4), [18937])
	
.LABEL $label$1
	$9 = ($0 + [128])
	$10 = *($8)
	$6 = *(($0 + [156]))
	$11 = *(($0 + [152]))
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$8:
	$7 = ($6 + [-24])
	$5 = *($7)
	if ( ((int_64)*($5) == (int_64)$10) ){ goto $label$7 }
	$6 = $7
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$9), [18937])
	goto $label$5 
	
.LABEL $label$6
	$5 = [0]
	$7 = CALL db_find_i64(*($9), *(($0 + [136])), (int_64)6454109460926300160, $10)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $11($9, $7)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$9), [18937])
	
.LABEL $label$5
	*((($3 + [544]) + [24])) = *(($5 + [40]))
	*(($3 + [560])) = *(($5 + [32]))
	*($3 + [544]) = *($5 + [16])
	*($3 + [552]) = *(($5 + [24]))
	$7 = CALL $22(($3 + [352]), $8)
	CALL eosio_assert((*($7 + [182]) == 0), [18624])
	$6 = *($7 + [152])
	if ( ($6 == 0) ){ goto $label$9 }
	*(($7 + [156])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$9
	$6 = *($7 + [140])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($7 + [144])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$10
	$6 = *($7 + [128])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($7 + [132])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$11
	*(($3 + [344])) = *(($8 + [120]))
	*($3 + [336]) = *($8 + [112])
	*($3 + [328]) = [0]
	*($3 + [320]) = (int_64)0
	$7 = (*(($8 + [144])) - *($8 + [140]))
	if ( ($7 == 0) ){ goto $label$14 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL _Znwj($7)
	*(($3 + [328])) = ($6 + $7)
	*($3 + [320]) = $6
	*($3 + [324]) = $6
	$5 = *(($8 + [140]))
	$7 = (*(($8 + [144])) - $5)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$14 }
	CALL memcpy($6, $5, $7)
	*($3 + [324]) = (*($3 + [324]) + $7)
	
.LABEL $label$14
	*($3 + [312]) = [0]
	*($3 + [304]) = (int_64)0
	$7 = (*(($8 + [132])) - *($8 + [128]))
	if ( ($7 == 0) ){ goto $label$15 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$12 }
	$6 = CALL _Znwj($7)
	*(($3 + [312])) = ($6 + $7)
	*($3 + [304]) = $6
	*($3 + [308]) = $6
	$5 = *(($8 + [128]))
	$7 = (*(($8 + [132])) - $5)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$15 }
	CALL memcpy($6, $5, $7)
	*($3 + [308]) = (*($3 + [308]) + $7)
	
.LABEL $label$15
	$12 = [0]
	$6 = [0]
	$11 = *($3 + [324])
	$7 = *($3 + [320])
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$16 }
	$6 = [0]
	$9 = [0]
	
.LOOP $label$18:
	$5 = ((uint_32)*($7) % (uint_32)[13])
	if ( ((uint_32)$5 > (uint_32)[12]) ){ goto $label$28 }
	goto $label$23 
	
.LABEL $label$29
	$6 = ($6 + [10])
	
.LABEL $label$28
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$27
	$6 = ($6 + [5])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$26
	$6 = ($6 + [3])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$25
	$6 = ($6 + [4])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$24
	$6 = ($6 + [8])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$23
	$9 = ($9 + [1])
	$6 = ($6 + [11])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$22
	$6 = ($6 + [2])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$21
	$6 = ($6 + [6])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$6 = ($6 + [7])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$6 = ($6 + [9])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$18 }
	
.LABEL $label$17
	if ( (($9 & [255]) == 0) ){ goto $label$16 }
	if ( (($6 & [255]) <= [22]) ){ goto $label$16 }
	$5 = ((int_32)((uint_32)(($6 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$7 = ([0] - $9)
	$6 = ($6 + ((int_32)( $7 ? $5 : ((uint_32)($7 & [255]) > (uint_32)($5 & [255])) ) * (int_32)[10]))
	
.LABEL $label$16
	*($3 + [303]) = $6
	CALL eosio_assert((*($8 + [184]) == 0), [17654])
	$13 = *($3 + [344])
	$10 = *($3 + [336])
	CALL eosio_assert(((int_64)$10 < (int_64)2305843009213693952), [18455])
	CALL eosio_assert(((int_64)$10 > (int_64)-2305843009213693952), [18479])
	CALL eosio_assert(((int_64)$13 == (int_64)*($2 + [8])), [18697])
	$13 = ((int_64)$10 + (int_64)*($2))
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [18740])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [18759])
	CALL eosio_assert([1], [18638])
	CALL eosio_assert(((int_64)((int_64)$10 << (int_64)1) == (int_64)$13), [17683])
	if ( ((int_32)($6 & [255]) != (int_32)[11]) ){ goto $label$30 }
	$12 = ((int_32)(*($3 + [324]) - *($3 + [320])) == (int_32)[2])
	
.LABEL $label$30
	CALL eosio_assert($12, [17699])
	$7 = CALL $22(($3 + [96]), $8)
	$5 = CALL $32($0, $7)
	$6 = *($7 + [152])
	if ( ($6 == 0) ){ goto $label$31 }
	*(($7 + [156])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$31
	$6 = *($7 + [140])
	if ( ($6 == 0) ){ goto $label$32 }
	*(($7 + [144])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$32
	$6 = *($7 + [128])
	if ( ($6 == 0) ){ goto $label$33 }
	*(($7 + [132])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$33
	$10 = *((($3 + [544]) + [24]))
	*((($3 + [48]) + [24])) = $10
	$13 = *((($3 + [544]) + [16]))
	*((($3 + [48]) + [16])) = $13
	*(($3 + [16])) = $13
	*(($3 + [24])) = $10
	$10 = *($3 + [552])
	*($3 + [56]) = $10
	$13 = *($3 + [544])
	*($3) = $13
	*($3 + [48]) = $13
	*($3 + [8]) = $10
	$7 = CALL $15($0, $3, $5)
	*($3 + [95]) = $7
	$6 = *($3 + [324])
	if ( ((int_32)$6 == (int_32)*(($3 + [328]))) ){ goto $label$35 }
	*($6) = $7
	$11 = (*($3 + [324]) + [1])
	*($3 + [324]) = $11
	goto $label$34 
	
.LABEL $label$35
	CALL $33(($3 + [320]), ($3 + [95]))
	$11 = *($3 + [324])
	
.LABEL $label$34
	$6 = [0]
	$7 = *($3 + [320])
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$36 }
	$6 = [0]
	$9 = [0]
	
.LOOP $label$38:
	$5 = ((uint_32)*($7) % (uint_32)[13])
	if ( ((uint_32)$5 > (uint_32)[12]) ){ goto $label$48 }
	goto $label$43 
	
.LABEL $label$49
	$6 = ($6 + [10])
	
.LABEL $label$48
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$47
	$6 = ($6 + [5])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$46
	$6 = ($6 + [3])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$45
	$6 = ($6 + [4])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$44
	$6 = ($6 + [8])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$43
	$9 = ($9 + [1])
	$6 = ($6 + [11])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$42
	$6 = ($6 + [2])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$41
	$6 = ($6 + [6])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$40
	$6 = ($6 + [7])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$6 = ($6 + [9])
	$7 = ($7 + [1])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$38 }
	
.LABEL $label$37
	if ( (($9 & [255]) == 0) ){ goto $label$36 }
	if ( (($6 & [255]) <= [22]) ){ goto $label$36 }
	$5 = ((int_32)((uint_32)(($6 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$7 = ([0] - $9)
	$6 = ($6 + ((int_32)( $7 ? $5 : ((uint_32)($7 & [255]) > (uint_32)($5 & [255])) ) * (int_32)[10]))
	
.LABEL $label$36
	*($3 + [303]) = $6
	$10 = *($0)
	*($3 + [44]) = $2
	*($3 + [36]) = ($3 + [303])
	*($3 + [32]) = ($3 + [320])
	*($3 + [40]) = ($3 + [336])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [18237])
	CALL $64($4, $8, $10, ($3 + [32]))
	CALL $25($0, $1)
	$7 = *($3 + [304])
	if ( ($7 == 0) ){ goto $label$50 }
	*($3 + [308]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$50
	$7 = *($3 + [320])
	if ( ($7 == 0) ){ goto $label$51 }
	*($3 + [324]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$51
	$global$0 = ($3 + [576])
	return (unreachable)
	
.LABEL $label$13
	CALL $157(($3 + [320]))
	
.LABEL $label$12
	CALL $157(($3 + [304]))
	$5
	$5
	(unreachable)
}

int_32 .FUNC $62 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $165($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)1398362884
	*($3 + [32]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert([1], [18041])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [18090])
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18903])
	CALL memcpy(($3 + [24]), $6, [8])
	$2 = ($7 & [-8])
	CALL eosio_assert(((int_32)$2 != (int_32)[8]), [18903])
	$1 = (($3 + [24]) + [8])
	CALL memcpy($1, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[16]), [18903])
	CALL memcpy((($3 + [24]) + [16]), ($6 + [16]), [8])
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $169($6)
	
.LABEL $label$8
	*(($2 = (($3 + [48]) + [8]))) = *(($1 + [8]))
	*($3 + [48]) = *($1)
	$8 = *($3 + [24])
	*((($3 + [64]) + [8])) = *($2)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$10 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $10
	*((($3 + [8]) + [8])) = $10
	$10 = *($3 + [64])
	*($3 + [8]) = $10
	*($3 + [80]) = $10
	CALL void $1((int_32 $8), (int_64 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [320])
	$global$0 = $2
	*(($3 = $2) + [284]) = $0
	*($3 + [272]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $165($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 = (($2 = CALL memset($3, [0], [192])) + [120]))) = (int_64)1398362884
	*($2 + [112]) = (int_64)0
	CALL eosio_assert([1], [18041])
	$6 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$3 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $3 ){ goto $label$8 }
	$3 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	CALL eosio_assert($3, [18090])
	*(($2 + [136])) = (int_64)0
	*(($2 + [144])) = (int_64)0
	*(($2 + [160])) = [0]
	*(($2 + [208])) = (int_64)0
	*(($2 + [216])) = (int_64)0
	*(($2 + [232])) = (int_64)0
	*(($2 + [240])) = (int_64)0
	*(($2 + [256])) = [0]
	*($2 + [128]) = (int_64)0
	*($2 + [152]) = (int_64)0
	*($2 + [192]) = (int_64)0
	*($2 + [200]) = (int_64)0
	*($2 + [224]) = (int_64)0
	*($2 + [248]) = (int_64)0
	*($2 + [292]) = $4
	*($2 + [288]) = $4
	*($2 + [296]) = ($4 + $5)
	*($2 + [304]) = ($2 + [288])
	*($2 + [312]) = $2
	CALL $107(($2 + [312]), ($2 + [304]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $169($4)
	
.LABEL $label$9
	*($2 + [292]) = ($2 + [272])
	*($2 + [288]) = ($2 + [284])
	CALL $108(($2 + [288]), $2)
	CALL $49($2)
	$global$0 = ($2 + [320])
	return [1]
}

int_32 .FUNC $103 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [152])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($3 + [156])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$4 = *($3 + [140])
	if ( ($4 == 0) ){ goto $label$7 }
	*(($3 + [144])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	$4 = *($3 + [128])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($3 + [132])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$8
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $102 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [152])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($3 + [156])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$4 = *($3 + [140])
	if ( ($4 == 0) ){ goto $label$7 }
	*(($3 + [144])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	$4 = *($3 + [128])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($3 + [132])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$8
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $146(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*(*($0)) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $146(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [18903])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $129(*($1), ($0 + [32]))
}

void .FUNC $89 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [8])
	$5 = *(($0 + [36]))
	$4 = *(($0 + [32]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7 + [8]) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($7 + [188])) == (int_32)$3), [18937])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [16])), (int_64)7035937633859534848, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $10($3, $6)
	CALL eosio_assert(((int_32)*($7 + [188]) == (int_32)$3), [18937])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [17993])
	CALL eosio_assert($6, [19011])
	CALL eosio_assert($6, [19045])
	$6 = CALL db_next_i64(*($7 + [192]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $10($3, $6)
	
.LABEL $label$5
	CALL $12($3, $7)
	$global$0 = ($2 + [16])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18903])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18903])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $129(*($1), *($0 + [12]))
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0) = *($1)
	$2 = *(($1 + [8]))
	*(($0 + [20])) = (int_64)0
	*(($0 + [8])) = $2
	*($0 + [16]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($0 + [16])) = $3
	*(($0 + [24])) = ($3 + ($4 << [4]))
	*(($4 = ($0 + [20]))) = $3
	$5 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $6)
	*($4) = (*($4) + $6)
	
.LABEL $label$3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$3 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL _Znwj($3)
	*(($0 + [28])) = $4
	*(($0 + [36])) = ($4 + $3)
	*(($3 = ($0 + [32]))) = $4
	$6 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $6, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $157(($0 + [16]))
	
.LABEL $label$1
	CALL $157(($0 + [28]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18899])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = int_32(($3 - $6) >> [4])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $124($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ($7 << [4]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($3 + [-16])
	$2 = *(($3 + [-12]))
	if ( ($2 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($0 + [8])
	
.LOOP $label$9:
	$2 = ($0 + [4])
	CALL eosio_assert(((uint_32)(*($6) - *($2)) > (uint_32)[1]), [18903])
	CALL memcpy($7, *($2), [2])
	*($2) = (*($2) + [2])
	CALL $125($0, ($7 + [4]))
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18899])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = ((int_32)($3 - $6) / (int_32)[40])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $126($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ((int_32)$7 * (int_32)[40]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = *(($3 + [-12]))
	if ( ($7 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = ($3 + [-40])
	$2 = *(($3 + [-24]))
	if ( ($2 == 0) ){ goto $label$9 }
	*(($3 + [-20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	
.LOOP $label$10:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($7)) > (uint_32)[7]), [18903])
	CALL memcpy($2, *($7), [8])
	$5 = (*($7) + [8])
	*($7) = $5
	CALL eosio_assert(((uint_32)(*($6) - $5) > (uint_32)[7]), [18903])
	CALL memcpy(($2 + [8]), *($7), [8])
	*($7) = (*($7) + [8])
	CALL $125(CALL $127($0, ($2 + [16])), ($2 + [28]))
	$2 = ($2 + [40])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [18903])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [18903])
	CALL memcpy(($1 + [4]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18903])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	$4 = [0]
	$5 = (int_64)0
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *(($0 + [8]))), [18899])
	$6 = ($0 + [4])
	$3 = *($6)
	$2 = *($3)
	$3 = ($3 + [1])
	*($6) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($2 & [128]) ){ goto $label$1 }
	*($1 + [12]) = $5
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)*($7) != (int_32)$3), [18903])
	$3 = ($0 + [4])
	CALL memcpy(($1 + [16]), *($3), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$6 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	CALL eosio_assert(($4 <= *($7)), [18899])
	$4 = *($3)
	$2 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $6)))
	$6 = ($6 + [7])
	if ( ($2 & [128]) ){ goto $label$2 }
	*($1 + [20]) = $5
	return $0
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert([1], [18041])
	$3 = [0]
	$4 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [18090])
	if ( ((int_64)*($1 + [8]) != (int_64)1397703940) ){ goto $label$7 }
	$4 = (int_64)0
	$8 = (int_64)59
	$3 = [18007]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$13 }
	$6 = *($3)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$6 = ($6 + [-91])
	goto $label$11 
	
.LABEL $label$13
	$5 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$9
	$3 = ($3 + [1])
	$8 = ((int_64)$8 + (int_64)4294967291)
	$9 = ((int_64)$5 | (int_64)$9)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$8 }
	CALL $4($2, $9, *($0), (int_64)1397703940)
	$4 = *($2)
	$5 = (int_64)2500
	goto $label$6 
	
.LABEL $label$7
	$4 = (int_64)0
	$5 = (int_64)59
	$3 = [18028]
	$9 = (int_64)0
	
.LOOP $label$14:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$15 }
	$6 = *($3)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$6 = ($6 + [-91])
	goto $label$16 
	
.LABEL $label$17
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$14 }
	CALL $4($2, $9, *($0), (int_64)1297438980)
	$4 = *($2)
	$5 = (int_64)1000000
	
.LABEL $label$6
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [18455])
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [18479])
	CALL eosio_assert([1], [18506])
	CALL eosio_assert([1], [18521])
	$8 = *($1)
	CALL eosio_assert((((int_64)$8 < (int_64)((int_64)$4 / (int_64)100)) & ((uint_64)$5 <= (uint_64)$8)), [18908])
	$global$0 = ($2 + [16])
}

void .FUNC $82 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [208])
	$global$0 = $2
	$3 = CALL transaction_size()
	$4 = ($2 - (($3 + [15]) & [-16]))
	$5 = $4
	$global$0 = $5
	$6 = CALL read_transaction($4, $3)
	CALL eosio_assert(((int_32)$3 == (int_32)$6), [8330])
	$7 = CALL current_time()
	$8 = (int_64)0
	*((($2 = $2) + [132])) = (int_64)0
	*(($2 + [148])) = (int_64)0
	*(($2 + [156])) = (int_64)0
	*($2 + [116]) = [0]
	*($2 + [120]) = [0]
	*($2 + [124 align=4]) = (int_64)0
	*($2 + [140 align=4]) = (int_64)0
	*($2 + [104]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	*($2 + [4]) = $4
	*($2) = $4
	*($2 + [8]) = ($4 + $6)
	CALL $84($2, ($2 + [104]))
	CALL $86(CALL $85(CALL $85($2, ($2 + [128])), ($2 + [140])), ($2 + [152]))
	$9 = CALL $87(($2 + [64]), *($2 + [140]))
	*($2 + [56]) = [0]
	*($2 + [48]) = (int_64)0
	$4 = (*(($9 + [32])) - *($9 + [28]))
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$1 }
	$3 = CALL _Znwj($4)
	*(($2 + [56])) = ($3 + $4)
	*($2 + [48]) = $3
	*($2 + [52]) = $3
	$6 = *(($9 + [28]))
	$4 = (*(($9 + [32])) - $6)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($3, $6, $4)
	*($2 + [52]) = (*($2 + [52]) + $4)
	
.LABEL $label$2
	$10 = *($9 + [8])
	$11 = (int_64)59
	$4 = [18019]
	$12 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$8 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$3 = ($3 + [-91])
	goto $label$6 
	
.LABEL $label$8
	$7 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$4
	$4 = ($4 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$12 = ((int_64)$7 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)4294967291)
	if ( ((int_64)$11 != (int_64)55834574842) ){ goto $label$3 }
	if ( ((int_64)$10 != (int_64)$12) ){ goto $label$10 }
	$13 = *($9)
	$8 = (int_64)0
	$11 = (int_64)59
	$4 = [18007]
	$12 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$16 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$3 = ($3 + [-91])
	goto $label$14 
	
.LABEL $label$16
	$7 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$12
	$4 = ($4 + [1])
	$11 = ((int_64)$11 + (int_64)4294967291)
	$12 = ((int_64)$7 | (int_64)$12)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$11 }
	$4 = [1]
	if ( ((int_64)$13 == (int_64)$12) ){ goto $label$9 }
	
.LABEL $label$10
	$8 = (int_64)0
	$11 = (int_64)59
	$4 = [18019]
	$12 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$22 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$3 = ($3 + [-91])
	goto $label$20 
	
.LABEL $label$22
	$7 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$18
	$4 = ($4 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$12 = ((int_64)$7 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)4294967291)
	if ( ((int_64)$11 != (int_64)55834574842) ){ goto $label$17 }
	$4 = [0]
	if ( ((int_64)$10 != (int_64)$12) ){ goto $label$9 }
	$10 = *($9)
	$8 = (int_64)0
	$7 = (int_64)59
	$4 = [18028]
	$12 = (int_64)0
	
.LOOP $label$23:
	$11 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$24 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$3 = ($3 + [-91])
	goto $label$25 
	
.LABEL $label$26
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$11 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $3) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$12 = ((int_64)$11 | (int_64)$12)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$23 }
	$4 = ((int_64)$10 == (int_64)$12)
	
.LABEL $label$9
	CALL eosio_assert($4, [18846])
	$14 = *($2 + [48])
	$15 = (*($2 + [52]) - $14)
	if ( ($15 <= [513]) ){ goto $label$28 }
	$5 = CALL $165($15)
	$14 = *($2 + [48])
	goto $label$27 
	
.LABEL $label$28
	$5 = ($5 - (($15 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$27
	*(($2 + [24])) = (int_64)1398362884
	*($2 + [16]) = (int_64)0
	CALL eosio_assert([1], [18041])
	$8 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$8 = $7
	$3 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$8 = $7
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$3 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $3 ){ goto $label$33 }
	$3 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$3 = [0]
	
.LABEL $label$29
	CALL eosio_assert($3, [18090])
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	*($2 + [172]) = $14
	*($2 + [168]) = $14
	*($2 + [176]) = ($14 + $15)
	*($2 + [184]) = ($2 + [168])
	$4 = ($2 + [8])
	*($2 + [196]) = $4
	*($2 + [200]) = ($2 + [16])
	$3 = ($2 + [32])
	*($2 + [204]) = $3
	*($2 + [192]) = $2
	CALL $88(($2 + [192]), ($2 + [184]))
	if ( ($15 <= [513]) ){ goto $label$34 }
	CALL $169($5)
	
.LABEL $label$34
	CALL eosio_assert((((int_64)*($4) == (int_64)*($0)) & ((int_64)*($2) == (int_64)$1)), [18875])
	if ( ((*($3) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*(($2 + [40])))
	
.LABEL $label$35
	$4 = *($2 + [48])
	if ( ($4 == 0) ){ goto $label$36 }
	*($2 + [52]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$36
	$4 = *($9 + [28])
	if ( ($4 == 0) ){ goto $label$37 }
	*(($9 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$37
	$4 = *($9 + [16])
	if ( ($4 == 0) ){ goto $label$38 }
	*(($9 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$38
	CALL $62(($2 + [104]))
	$global$0 = ($2 + [208])
	return (unreachable)
	
.LABEL $label$1
	CALL $157(($2 + [48]))
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($1)
	if ( ($5 & [1]) ){ goto $label$3 }
	$6 = ($1 + [1])
	$7 = [0]
	$8 = [0]
	$5 = uint_32($5 >> [1])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = *($1 + [8])
	$7 = [0]
	$8 = [0]
	$5 = *($1 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = [0]
	
.LOOP $label$4:
	$8 = ($8 + ((int_32)*($6) == (int_32)[124]))
	$6 = ($6 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$4 }
	$8 = ((int_32)$8 == (int_32)[1])
	
.LABEL $label$1
	CALL eosio_assert($8, [18822])
	*($4 + [24]) = $7
	*($4 + [16]) = (int_64)0
	*($4 + [15]) = [124]
	*($4) = $7
	$6 = [1]
	*($4 + [14]) = [1]
	$9 = CALL $2($1, ($4 + [16]), ($4 + [15]), $4, ($4 + [14]))
	$8 = *($4 + [16])
	CALL eosio_assert(((int_32)( *($4 + [20]) ? uint_32($8 >> [1]) : ($8 & [1]) ) != (int_32)$7), [18835])
	$8 = *($4 + [16])
	$5 = CALL $162([17966])
	if ( ((int_32)$5 != (int_32)( *($4 + [20]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$6 }
	if ( (CALL $156(($4 + [16]), [0], [-1], [17966], $5) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = *($4 + [16])
	$8 = CALL $162([17970])
	if ( ((int_32)$8 != (int_32)( *($4 + [20]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$8 }
	if ( (CALL $156(($4 + [16]), [0], [-1], [17970], $8) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$6 = [1]
	$8 = *($4 + [16])
	$5 = CALL $162([17977])
	if ( ((int_32)$5 != (int_32)( *($4 + [20]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$9 }
	if ( (CALL $156(($4 + [16]), [0], [-1], [17977], $5) == 0) ){ goto $label$5 }
	
.LABEL $label$9
	$8 = CALL $162([17987])
	$6 = *($4 + [16])
	$5 = ($6 & [1])
	$7 = uint_32($6 >> [1])
	$6 = [0]
	if ( ((int_32)$8 != (int_32)( *($4 + [20]) ? $7 : $5 )) ){ goto $label$5 }
	$6 = (CALL $156(($4 + [16]), [0], [-1], [17987], $8) == 0)
	goto $label$5 
	
.LABEL $label$7
	$6 = [1]
	
.LABEL $label$5
	CALL eosio_assert($6, [18835])
	CALL $148($2, ($4 + [16]))
	$6 = *($4 + [16])
	$5 = CALL $162([17966])
	if ( ((int_32)$5 != (int_32)( *($4 + [20]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$14 }
	$8 = [0]
	if ( (CALL $156(($4 + [16]), [0], [-1], [17966], $5) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	*($3) = (int_64)0
	goto $label$12 
	
.LABEL $label$13
	$7 = (*($4) & [1])
	$6 = CALL $147($4, $1, ($9 + [1]), [-1], $1)
	$2 = *($6 + [8])
	$6 = ( $2 ? ($6 + [1]) : $7 )
	
.LOOP $label$15:
	$5 = ($6 + $8)
	$1 = ($8 + [1])
	$8 = $1
	if ( *($5) ){ goto $label$15 }
	$10 = (CASTING uint_64)(uint_32 ($1 + [-1]))
	$11 = (int_64)0
	$12 = (int_64)59
	$13 = (int_64)0
	
.LOOP $label$16:
	$14 = (int_64)0
	if ( ((uint_64)$11 >= (uint_64)$10) ){ goto $label$17 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$8 = ($8 + [-91])
	goto $label$18 
	
.LABEL $label$19
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$21 }
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	goto $label$20 
	
.LABEL $label$21
	$14 = ((int_64)$14 & (int_64)15)
	
.LABEL $label$20
	$6 = ($6 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$16 }
	*($3) = $13
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( (*($4 + [16]) & [1]) ){ goto $label$10 }
	
.LABEL $label$11
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$10
	CALL _ZdlPv(*(($4 + [24])))
	$global$0 = ($4 + [32])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$2 = [1]
	$3 = *($1 + [8])
	if ( ((int_64)$3 == (int_64)1397703940) ){ goto $label$1 }
	$2 = ((int_64)$3 == (int_64)1297438980)
	
.LABEL $label$1
	CALL eosio_assert($2, [18777])
	$2 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = $4
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$7 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($2, [18805])
	return 
	
.LABEL $label$3
	CALL eosio_assert([0], [18805])
	return 
	
.LABEL $label$2
	CALL eosio_assert([0], [18805])
}

void .FUNC $149 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $149($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $145 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $147 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $165($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8588])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $165($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $140 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	*([0] + [8368 align=4]) = (int_64)0
	*([0] + [8376]) = [0]
	$0 = CALL $162([17272])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$21 }
	*([0] + [8368]) = ($0 << [1])
	$1 = [8369]
	if ( $0 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8368]) = ($2 | [1])
	*([0] + [8376]) = $1
	*([0] + [8372]) = $0
	
.LABEL $label$20
	CALL memcpy($1, [17272], $0)
	
.LABEL $label$19
	*(($1 + $0)) = [0]
	CALL $159([17], [0], [8192])
	*([0] + [8384]) = (int_64)0
	*([0] + [8392]) = [0]
	$0 = CALL $162([17273])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$24 }
	*([0] + [8384]) = ($0 << [1])
	$1 = [8385]
	if ( $0 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8384]) = ($2 | [1])
	*([0] + [8392]) = $1
	*([0] + [8388]) = $0
	
.LABEL $label$23
	CALL memcpy($1, [17273], $0)
	
.LABEL $label$22
	*(($1 + $0)) = [0]
	*([0] + [8396 align=4]) = (int_64)0
	*([0] + [8404]) = [0]
	$0 = CALL $162([17277])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$27 }
	*([0] + [8396]) = ($0 << [1])
	$1 = [8397]
	if ( $0 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8396]) = ($2 | [1])
	*([0] + [8404]) = $1
	*([0] + [8400]) = $0
	
.LABEL $label$26
	CALL memcpy($1, [17277], $0)
	
.LABEL $label$25
	*(($1 + $0)) = [0]
	*([0] + [8408]) = (int_64)0
	*([0] + [8416]) = [0]
	$0 = CALL $162([17281])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$30 }
	*([0] + [8408]) = ($0 << [1])
	$1 = [8409]
	if ( $0 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8408]) = ($2 | [1])
	*([0] + [8416]) = $1
	*([0] + [8412]) = $0
	
.LABEL $label$29
	CALL memcpy($1, [17281], $0)
	
.LABEL $label$28
	*(($1 + $0)) = [0]
	*([0] + [8420 align=4]) = (int_64)0
	*([0] + [8428]) = [0]
	$0 = CALL $162([17285])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$33 }
	*([0] + [8420]) = ($0 << [1])
	$1 = [8421]
	if ( $0 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8420]) = ($2 | [1])
	*([0] + [8428]) = $1
	*([0] + [8424]) = $0
	
.LABEL $label$32
	CALL memcpy($1, [17285], $0)
	
.LABEL $label$31
	*(($1 + $0)) = [0]
	CALL $159([18], [0], [8192])
	*([0] + [8432]) = (int_64)0
	*([0] + [8440]) = [0]
	$0 = CALL $162([17289])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$36 }
	*([0] + [8432]) = ($0 << [1])
	$1 = [8433]
	if ( $0 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8432]) = ($2 | [1])
	*([0] + [8440]) = $1
	*([0] + [8436]) = $0
	
.LABEL $label$35
	CALL memcpy($1, [17289], $0)
	
.LABEL $label$34
	*(($1 + $0)) = [0]
	*([0] + [8444 align=4]) = (int_64)0
	*([0] + [8452]) = [0]
	$0 = CALL $162([17291])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$39 }
	*([0] + [8444]) = ($0 << [1])
	$1 = [8445]
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8444]) = ($2 | [1])
	*([0] + [8452]) = $1
	*([0] + [8448]) = $0
	
.LABEL $label$38
	CALL memcpy($1, [17291], $0)
	
.LABEL $label$37
	*(($1 + $0)) = [0]
	*([0] + [8456]) = (int_64)0
	*([0] + [8464]) = [0]
	$0 = CALL $162([17293])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$42 }
	*([0] + [8456]) = ($0 << [1])
	$1 = [8457]
	if ( $0 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8456]) = ($2 | [1])
	*([0] + [8464]) = $1
	*([0] + [8460]) = $0
	
.LABEL $label$41
	CALL memcpy($1, [17293], $0)
	
.LABEL $label$40
	*(($1 + $0)) = [0]
	*([0] + [8468 align=4]) = (int_64)0
	*([0] + [8476]) = [0]
	$0 = CALL $162([17295])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$45 }
	*([0] + [8468]) = ($0 << [1])
	$1 = [8469]
	if ( $0 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8468]) = ($2 | [1])
	*([0] + [8476]) = $1
	*([0] + [8472]) = $0
	
.LABEL $label$44
	CALL memcpy($1, [17295], $0)
	
.LABEL $label$43
	*(($1 + $0)) = [0]
	*([0] + [8480]) = (int_64)0
	*([0] + [8488]) = [0]
	$0 = CALL $162([17297])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$48 }
	*([0] + [8480]) = ($0 << [1])
	$1 = [8481]
	if ( $0 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8480]) = ($2 | [1])
	*([0] + [8488]) = $1
	*([0] + [8484]) = $0
	
.LABEL $label$47
	CALL memcpy($1, [17297], $0)
	
.LABEL $label$46
	*(($1 + $0)) = [0]
	*([0] + [8492 align=4]) = (int_64)0
	*([0] + [8500]) = [0]
	$0 = CALL $162([17299])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$51 }
	*([0] + [8492]) = ($0 << [1])
	$1 = [8493]
	if ( $0 ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8492]) = ($2 | [1])
	*([0] + [8500]) = $1
	*([0] + [8496]) = $0
	
.LABEL $label$50
	CALL memcpy($1, [17299], $0)
	
.LABEL $label$49
	*(($1 + $0)) = [0]
	*([0] + [8504]) = (int_64)0
	*([0] + [8512]) = [0]
	$0 = CALL $162([17301])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$54 }
	*([0] + [8504]) = ($0 << [1])
	$1 = [8505]
	if ( $0 ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8504]) = ($2 | [1])
	*([0] + [8512]) = $1
	*([0] + [8508]) = $0
	
.LABEL $label$53
	CALL memcpy($1, [17301], $0)
	
.LABEL $label$52
	*(($1 + $0)) = [0]
	*([0] + [8516 align=4]) = (int_64)0
	*([0] + [8524]) = [0]
	$0 = CALL $162([17303])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$57 }
	*([0] + [8516]) = ($0 << [1])
	$1 = [8517]
	if ( $0 ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$57
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8516]) = ($2 | [1])
	*([0] + [8524]) = $1
	*([0] + [8520]) = $0
	
.LABEL $label$56
	CALL memcpy($1, [17303], $0)
	
.LABEL $label$55
	*(($1 + $0)) = [0]
	*([0] + [8528]) = (int_64)0
	*([0] + [8536]) = [0]
	$0 = CALL $162([17305])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$60 }
	*([0] + [8528]) = ($0 << [1])
	$1 = [8529]
	if ( $0 ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$60
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8528]) = ($2 | [1])
	*([0] + [8536]) = $1
	*([0] + [8532]) = $0
	
.LABEL $label$59
	CALL memcpy($1, [17305], $0)
	
.LABEL $label$58
	*(($1 + $0)) = [0]
	*([0] + [8540 align=4]) = (int_64)0
	*([0] + [8548]) = [0]
	$0 = CALL $162([17307])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$63 }
	*([0] + [8540]) = ($0 << [1])
	$1 = [8541]
	if ( $0 ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$63
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8540]) = ($2 | [1])
	*([0] + [8548]) = $1
	*([0] + [8544]) = $0
	
.LABEL $label$62
	CALL memcpy($1, [17307], $0)
	
.LABEL $label$61
	*(($1 + $0)) = [0]
	*([0] + [8552]) = (int_64)0
	*([0] + [8560]) = [0]
	$0 = CALL $162([17310])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$66 }
	*([0] + [8552]) = ($0 << [1])
	$1 = [8553]
	if ( $0 ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$66
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8552]) = ($2 | [1])
	*([0] + [8560]) = $1
	*([0] + [8556]) = $0
	
.LABEL $label$65
	CALL memcpy($1, [17310], $0)
	
.LABEL $label$64
	*(($1 + $0)) = [0]
	*([0] + [8564 align=4]) = (int_64)0
	*([0] + [8572]) = [0]
	$0 = CALL $162([17312])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$69 }
	*([0] + [8564]) = ($0 << [1])
	$1 = [8565]
	if ( $0 ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$69
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8564]) = ($2 | [1])
	*([0] + [8572]) = $1
	*([0] + [8568]) = $0
	
.LABEL $label$68
	CALL memcpy($1, [17312], $0)
	
.LABEL $label$67
	*(($1 + $0)) = [0]
	*([0] + [8576]) = (int_64)0
	*([0] + [8584]) = [0]
	$0 = CALL $162([17314])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$72 }
	*([0] + [8576]) = ($0 << [1])
	$1 = [8577]
	if ( $0 ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$72
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8576]) = ($2 | [1])
	*([0] + [8584]) = $1
	*([0] + [8580]) = $0
	
.LABEL $label$71
	CALL memcpy($1, [17314], $0)
	
.LABEL $label$70
	*(($1 + $0)) = [0]
	CALL $159([19], [0], [8192])
	return (unreachable)
	
.LABEL $label$18
	CALL $145([8368])
	
.LABEL $label$17
	CALL $145([8384])
	
.LABEL $label$16
	CALL $145([8396])
	
.LABEL $label$15
	CALL $145([8408])
	
.LABEL $label$14
	CALL $145([8420])
	
.LABEL $label$13
	CALL $145([8432])
	
.LABEL $label$12
	CALL $145([8444])
	
.LABEL $label$11
	CALL $145([8456])
	
.LABEL $label$10
	CALL $145([8468])
	
.LABEL $label$9
	CALL $145([8480])
	
.LABEL $label$8
	CALL $145([8492])
	
.LABEL $label$7
	CALL $145([8504])
	
.LABEL $label$6
	CALL $145([8516])
	
.LABEL $label$5
	CALL $145([8528])
	
.LABEL $label$4
	CALL $145([8540])
	
.LABEL $label$3
	CALL $145([8552])
	
.LABEL $label$2
	CALL $145([8564])
	
.LABEL $label$1
	CALL $145([8576])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $169($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $25($0, $2)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	$4 = ($0 + [8])
	$6 = *(($0 + [36]))
	$5 = *(($0 + [32]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$1 = ($6 + [-24])
	$7 = *($1)
	if ( ((int_64)*($7 + [8]) == (int_64)$2) ){ goto $label$4 }
	$6 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(($7 + [188])) == (int_32)$4), [18937])
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	$1 = CALL db_find_i64(*($4), *(($0 + [16])), (int_64)7035937633859534848, $2)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $10($4, $1)
	CALL eosio_assert(((int_32)*($7 + [188]) == (int_32)$4), [18937])
	
.LABEL $label$2
	$2 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18237])
	CALL $73($4, $7, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [128])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [188])) == (int_32)$0), [18272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [18318])
	$6 = *($1 + [8])
	$7 = CALL current_time()
	*($1 + [186]) = [1]
	*($1 + [104]) = ((int_64)((uint_64)$7 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1 + [8])), [18369])
	$8 = ($1 + [128])
	$9 = ($1 + [186])
	$10 = ($1 + [104])
	$11 = ($1 + [8])
	$13 = *($1 + [128])
	$12 = *(($1 + [132]))
	$14 = ($12 - $13)
	$7 = (CASTING uint_64)(uint_32 $14)
	$15 = [113]
	
.LOOP $label$1:
	$15 = ($15 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	$15 = ( $15 ? ($14 + $15) : ((int_32)$13 == (int_32)$12) )
	$13 = ($1 + [140])
	$14 = *($1 + [140])
	$12 = *(($1 + [144]))
	$16 = ($12 - $14)
	$7 = (CASTING uint_64)(uint_32 $16)
	
.LOOP $label$2:
	$15 = ($15 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	$15 = ( $15 ? ($16 + $15) : ((int_32)$14 == (int_32)$12) )
	$14 = ($1 + [152])
	$16 = *($1 + [152])
	$12 = *(($1 + [156]))
	$17 = ($12 - $16)
	$7 = (CASTING uint_64)(uint_32 $17)
	
.LOOP $label$3:
	$15 = ($15 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	$12 = (( $15 ? ($17 + $15) : ((int_32)$16 == (int_32)$12) ) + [19])
	if ( ($12 <= [513]) ){ goto $label$5 }
	$15 = CALL $165($12)
	goto $label$4 
	
.LABEL $label$5
	$15 = ($4 - (($12 + [15]) & [-16]))
	$global$0 = $15
	
.LABEL $label$4
	*($5 + [12]) = $15
	*($5 + [8]) = $15
	*($5 + [16]) = ($15 + $12)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $11
	*($5 + [56]) = $10
	*($5 + [64]) = $8
	*($5 + [68]) = $13
	*($5 + [72]) = $14
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [32])
	*($5 + [48]) = ($1 + [64])
	*($5 + [52]) = ($1 + [96])
	*($5 + [60]) = ($1 + [112])
	*($5 + [76]) = ($1 + [168])
	*($5 + [80]) = ($1 + [176])
	*($5 + [84]) = ($1 + [177])
	*($5 + [88]) = ($1 + [178])
	*($5 + [92]) = ($1 + [179])
	*($5 + [96]) = ($1 + [180])
	*($5 + [100]) = ($1 + [181])
	*($5 + [104]) = ($1 + [182])
	*($5 + [112]) = ($1 + [184])
	*($5 + [108]) = ($1 + [183])
	*($5 + [116]) = ($1 + [185])
	*($5 + [120]) = $9
	CALL $110(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [192]), $2, $15, $12)
	if ( ((uint_32)$12 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $169($15)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [128])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [128])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_32 $19
	int_32 $20
	$4 = ($global$0 - [128])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [188])) == (int_32)$0), [18272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [18318])
	*($1 + [177]) = *(*($3))
	$6 = ($1 + [8])
	$7 = *($1 + [8])
	$9 = *($3 + [4])
	$8 = ($1 + [128])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$1 }
	CALL $109($8, *($9), *($9 + [4]))
	
.LABEL $label$1
	$10 = ($1 + [177])
	*($1 + [104]) = CALL current_time()
	*($1 + [179]) = *(*($3 + [8]))
	*($1 + [180]) = [1]
	*($1 + [181]) = *(*($3 + [12]))
	*($1 + [182]) = [2]
	CALL eosio_assert(((int_64)$7 == (int_64)*($6)), [18369])
	$11 = ($1 + [182])
	$12 = ($1 + [181])
	$13 = ($1 + [180])
	$14 = ($1 + [179])
	$15 = ($1 + [104])
	$16 = *($1 + [128])
	$9 = *(($1 + [132]))
	$17 = ($9 - $16)
	$18 = (CASTING uint_64)(uint_32 $17)
	$3 = [113]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$18 = (uint_64)$18 >> (uint_64)(int_64)7
	if ( ((int_64)$18) != (int_64)0) ){ goto $label$2 }
	$3 = ( $3 ? ($17 + $3) : ((int_32)$16 == (int_32)$9) )
	$16 = ($1 + [140])
	$17 = *($1 + [140])
	$9 = *(($1 + [144]))
	$19 = ($9 - $17)
	$18 = (CASTING uint_64)(uint_32 $19)
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$18 = (uint_64)$18 >> (uint_64)(int_64)7
	if ( ((int_64)$18) != (int_64)0) ){ goto $label$3 }
	$3 = ( $3 ? ($19 + $3) : ((int_32)$17 == (int_32)$9) )
	$17 = ($1 + [152])
	$19 = *($1 + [152])
	$9 = *(($1 + [156]))
	$20 = ($9 - $19)
	$18 = (CASTING uint_64)(uint_32 $20)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$18 = (uint_64)$18 >> (uint_64)(int_64)7
	if ( ((int_64)$18) != (int_64)0) ){ goto $label$4 }
	$9 = (( $3 ? ($20 + $3) : ((int_32)$19 == (int_32)$9) ) + [19])
	if ( ($9 <= [513]) ){ goto $label$6 }
	$3 = CALL $165($9)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$5
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $9)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $6
	*($5 + [56]) = $15
	*($5 + [64]) = $8
	*($5 + [68]) = $16
	*($5 + [72]) = $17
	*($5 + [84]) = $10
	*($5 + [92]) = $14
	*($5 + [96]) = $13
	*($5 + [100]) = $12
	*($5 + [104]) = $11
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [32])
	*($5 + [48]) = ($1 + [64])
	*($5 + [52]) = ($1 + [96])
	*($5 + [60]) = ($1 + [112])
	*($5 + [76]) = ($1 + [168])
	*($5 + [80]) = ($1 + [176])
	*($5 + [88]) = ($1 + [178])
	*($5 + [112]) = ($1 + [184])
	*($5 + [108]) = ($1 + [183])
	*($5 + [116]) = ($1 + [185])
	*($5 + [120]) = ($1 + [186])
	CALL $110(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [192]), $2, $3, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $169($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [128])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [128])
}

void .FUNC $71 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
	CALL $25($0, $1)
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	$4 = ($global$0 - [128])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [188])) == (int_32)$0), [18272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [18318])
	$6 = *($1 + [8])
	$8 = *($3)
	$7 = ($1 + [152])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$1 }
	CALL $109($7, *($8), *($8 + [4]))
	
.LABEL $label$1
	$3 = *($3 + [4])
	*($1 + [178]) = *($3)
	if ( (*($3) <= [21]) ){ goto $label$2 }
	*($1 + [182]) = [2]
	
.LABEL $label$2
	$9 = ($1 + [8])
	$10 = ($1 + [178])
	CALL eosio_assert(((int_64)$6 == (int_64)*(($1 + [8]))), [18369])
	$11 = ($1 + [128])
	$12 = *($1 + [128])
	$8 = *(($1 + [132]))
	$13 = ($8 - $12)
	$14 = (CASTING uint_64)(uint_32 $13)
	$3 = [113]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$3 }
	$3 = ( $3 ? ($13 + $3) : ((int_32)$12 == (int_32)$8) )
	$12 = ($1 + [140])
	$13 = *($1 + [140])
	$8 = *(($1 + [144]))
	$15 = ($8 - $13)
	$14 = (CASTING uint_64)(uint_32 $15)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$4 }
	$3 = ( $3 ? ($15 + $3) : ((int_32)$13 == (int_32)$8) )
	$13 = *($1 + [152])
	$8 = *(($1 + [156]))
	$15 = ($8 - $13)
	$14 = (CASTING uint_64)(uint_32 $15)
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$5 }
	$8 = (( $3 ? ($15 + $3) : ((int_32)$13 == (int_32)$8) ) + [19])
	if ( ($8 <= [513]) ){ goto $label$7 }
	$3 = CALL $165($8)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$6
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $8)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $9
	*($5 + [64]) = $11
	*($5 + [68]) = $12
	*($5 + [72]) = $7
	*($5 + [88]) = $10
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [32])
	*($5 + [48]) = ($1 + [64])
	*($5 + [52]) = ($1 + [96])
	*($5 + [56]) = ($1 + [104])
	*($5 + [60]) = ($1 + [112])
	*($5 + [76]) = ($1 + [168])
	*($5 + [80]) = ($1 + [176])
	*($5 + [84]) = ($1 + [177])
	*($5 + [92]) = ($1 + [179])
	*($5 + [96]) = ($1 + [180])
	*($5 + [100]) = ($1 + [181])
	*($5 + [104]) = ($1 + [182])
	*($5 + [112]) = ($1 + [184])
	*($5 + [108]) = ($1 + [183])
	*($5 + [116]) = ($1 + [185])
	*($5 + [120]) = ($1 + [186])
	CALL $110(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [192]), $2, $3, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $169($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [128])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [128])
}

void .FUNC $77 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth($1)
	CALL $37($0, $1)
	$3 = ($0 + [8])
	$5 = *(($0 + [36]))
	$4 = *(($0 + [32]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7 + [8]) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($7 + [188])) == (int_32)$3), [18937])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [16])), (int_64)7035937633859534848, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $10($3, $6)
	CALL eosio_assert(((int_32)*($7 + [188]) == (int_32)$3), [18937])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)*($7 + [182]) == (int_32)[1]), [17900])
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$4 = [0]
	$8 = [0]
	$6 = (*(($7 + [144])) - *($7 + [140]))
	if ( ($6 == 0) ){ goto $label$6 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$8 = CALL _Znwj($6)
	*(($2 + [8])) = ($8 + $6)
	*($2) = $8
	*($2 + [4]) = $8
	$5 = *(($7 + [140]))
	$6 = (*(($7 + [144])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($8, $5, $6)
	$4 = ($8 + $6)
	*($2 + [4]) = $4
	goto $label$6 
	
.LABEL $label$7
	$4 = $8
	
.LABEL $label$6
	$9 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18237])
	CALL $78($3, $7, $9)
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$8 }
	$5 = [0]
	$3 = [0]
	$6 = $8
	
.LOOP $label$10:
	$7 = ((uint_32)*($6) % (uint_32)[13])
	if ( ((uint_32)$7 > (uint_32)[12]) ){ goto $label$20 }
	goto $label$15 
	
.LABEL $label$21
	$5 = ($5 + [10])
	
.LABEL $label$20
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$19
	$5 = ($5 + [5])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$18
	$5 = ($5 + [3])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$17
	$5 = ($5 + [4])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$16
	$5 = ($5 + [8])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$15
	$3 = ($3 + [1])
	$5 = ($5 + [11])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$14
	$5 = ($5 + [2])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$13
	$5 = ($5 + [6])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$5 = ($5 + [7])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$5 = ($5 + [9])
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( (($3 & [255]) == 0) ){ goto $label$22 }
	if ( (($5 & [255]) <= [22]) ){ goto $label$22 }
	$7 = ((int_32)((uint_32)(($5 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$6 = ([0] - $3)
	$5 = (((int_32)( $6 ? $7 : ((uint_32)($6 & [255]) > (uint_32)($7 & [255])) ) * (int_32)[10]) + $5)
	
.LABEL $label$22
	if ( ((int_32)($4 - $8) != (int_32)[2]) ){ goto $label$8 }
	if ( ((int_32)($5 & [255]) != (int_32)[21]) ){ goto $label$8 }
	CALL $31($0, $1)
	
.LABEL $label$8
	if ( ($8 == 0) ){ goto $label$23 }
	*($2 + [4]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$23
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$5
	CALL $157($2)
	$7
}

void .FUNC $74 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
	CALL $72($0, [0], $1)
}

void .FUNC $39 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL require_auth($1)
	CALL $37($0, $1)
	$2 = ($0 + [8])
	$4 = *(($0 + [36]))
	$3 = *(($0 + [32]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6 + [8]) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($6 + [188])) == (int_32)$2), [18937])
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL $10($2, CALL $fimport$5(*($2), *(($0 + [16])), (int_64)7035937633859534848, $1))
	CALL eosio_assert(((int_32)*($6 + [188]) == (int_32)$2), [18937])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)*($6 + [182]) != (int_32)[1]), [17338])
	CALL $25($0, $1)
}

void .FUNC $36 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$2 = ($global$0 - [352])
	$global$0 = $2
	CALL require_auth($1)
	CALL $37($0, $1)
	$3 = ($0 + [8])
	$5 = *(($0 + [36]))
	$4 = *(($0 + [32]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7 + [8]) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($7 + [188])) == (int_32)$3), [18937])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [16])), (int_64)7035937633859534848, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $10($3, $6)
	CALL eosio_assert(((int_32)*($7 + [188]) == (int_32)$3), [18937])
	
.LABEL $label$1
	$8 = ($0 + [128])
	$9 = *($7)
	$5 = *(($0 + [156]))
	$10 = *(($0 + [152]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$8:
	$6 = ($5 + [-24])
	$4 = *($6)
	if ( ((int_64)*($4) == (int_64)$9) ){ goto $label$7 }
	$5 = $6
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$8), [18937])
	goto $label$5 
	
.LABEL $label$6
	$4 = [0]
	$6 = CALL db_find_i64(*($8), *(($0 + [136])), (int_64)6454109460926300160, $9)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $11($8, $6)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$8), [18937])
	
.LABEL $label$5
	*((($2 + [320]) + [24])) = *(($4 + [40]))
	*(($2 + [336])) = *(($4 + [32]))
	*($2 + [320]) = *($4 + [16])
	*($2 + [328]) = *(($4 + [24]))
	CALL eosio_assert(((int_32)*($7 + [182]) != (int_32)[1]), [17338])
	*($2 + [312]) = [0]
	*($2 + [304]) = (int_64)0
	$6 = (*(($7 + [144])) - *($7 + [140]))
	if ( ($6 == 0) ){ goto $label$11 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$10 }
	$5 = CALL _Znwj($6)
	*(($2 + [312])) = ($5 + $6)
	*($2 + [304]) = $5
	*($2 + [308]) = $5
	$4 = *(($7 + [140]))
	$6 = (*(($7 + [144])) - $4)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($5, $4, $6)
	*($2 + [308]) = ($5 + $6)
	
.LABEL $label$11
	*($2 + [296]) = [0]
	*($2 + [288]) = (int_64)0
	$6 = (*(($7 + [132])) - *($7 + [128]))
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$9 }
	$5 = CALL _Znwj($6)
	*(($2 + [296])) = ($5 + $6)
	*($2 + [288]) = $5
	*($2 + [292]) = $5
	$4 = *(($7 + [128]))
	$6 = (*(($7 + [132])) - $4)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($5, $4, $6)
	*($2 + [292]) = ($5 + $6)
	
.LABEL $label$12
	$6 = CALL $22(($2 + [96]), $7)
	$4 = CALL $32($0, $6)
	$5 = *($6 + [152])
	if ( ($5 == 0) ){ goto $label$13 }
	*(($6 + [156])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$13
	$5 = *($6 + [140])
	if ( ($5 == 0) ){ goto $label$14 }
	*(($6 + [144])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$5 = *($6 + [128])
	if ( ($5 == 0) ){ goto $label$15 }
	*(($6 + [132])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$9 = *((($2 + [320]) + [24]))
	*((($2 + [48]) + [24])) = $9
	$11 = *((($2 + [320]) + [16]))
	*((($2 + [48]) + [16])) = $11
	*(($2 + [16])) = $11
	*(($2 + [24])) = $9
	$9 = *($2 + [328])
	*($2 + [56]) = $9
	$11 = *($2 + [320])
	*($2) = $11
	*($2 + [48]) = $11
	*($2 + [8]) = $9
	$6 = CALL $15($0, $2, $4)
	*($2 + [95]) = $6
	$5 = *($2 + [308])
	if ( ((int_32)$5 == (int_32)*(($2 + [312]))) ){ goto $label$17 }
	*($5) = $6
	$10 = (*($2 + [308]) + [1])
	*($2 + [308]) = $10
	goto $label$16 
	
.LABEL $label$17
	CALL $33(($2 + [304]), ($2 + [95]))
	$10 = *($2 + [308])
	
.LABEL $label$16
	$5 = [0]
	$6 = *($2 + [304])
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$18 }
	$5 = [0]
	$8 = [0]
	
.LOOP $label$20:
	$4 = ((uint_32)*($6) % (uint_32)[13])
	if ( ((uint_32)$4 > (uint_32)[12]) ){ goto $label$30 }
	goto $label$25 
	
.LABEL $label$31
	$5 = ($5 + [10])
	
.LABEL $label$30
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$29
	$5 = ($5 + [5])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$28
	$5 = ($5 + [3])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$27
	$5 = ($5 + [4])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$26
	$5 = ($5 + [8])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$5 = ($5 + [11])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$24
	$5 = ($5 + [2])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$23
	$5 = ($5 + [6])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$5 = ($5 + [7])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$5 = ($5 + [9])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	
.LABEL $label$19
	if ( (($8 & [255]) == 0) ){ goto $label$18 }
	if ( (($5 & [255]) <= [22]) ){ goto $label$18 }
	$4 = ((int_32)((uint_32)(($5 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$6 = ([0] - $8)
	$5 = ($5 + ((int_32)( $6 ? $4 : ((uint_32)($6 & [255]) > (uint_32)($4 & [255])) ) * (int_32)[10]))
	
.LABEL $label$18
	*($2 + [47]) = $5
	$9 = *($0)
	*($2 + [36]) = ($2 + [47])
	*($2 + [32]) = ($2 + [304])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18237])
	CALL $38($3, $7, $9, ($2 + [32]))
	if ( (*($2 + [47]) <= [21]) ){ goto $label$32 }
	CALL $25($0, $1)
	
.LABEL $label$32
	$6 = *($2 + [288])
	if ( ($6 == 0) ){ goto $label$33 }
	*($2 + [292]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$33
	$6 = *($2 + [304])
	if ( ($6 == 0) ){ goto $label$34 }
	*($2 + [308]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$34
	$global$0 = ($2 + [352])
	return (unreachable)
	
.LABEL $label$10
	CALL $157(($2 + [304]))
	
.LABEL $label$9
	CALL $157(($2 + [288]))
	$4
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($0 + [8])
	$4 = *(($0 + [36]))
	$3 = *(($0 + [32]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6 + [8]) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($6 + [188])) == (int_32)$2), [18937])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($2), *(($0 + [16])), (int_64)7035937633859534848, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $10($2, $5)
	CALL eosio_assert(((int_32)*($6 + [188]) == (int_32)$2), [18937])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [18428])
	CALL eosio_assert((int_64)(*($6 + [104]) == 0), [18437])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($1 + [188])) == (int_32)$0), [18272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [18318])
	*($1 + [182]) = [2]
	$5 = *($1 + [8])
	CALL eosio_assert([1], [18369])
	$6 = ($1 + [128])
	$7 = ($1 + [182])
	$8 = ($1 + [8])
	$10 = *($1 + [128])
	$9 = *(($1 + [132]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 $11)
	$13 = [113]
	
.LOOP $label$1:
	$13 = ($13 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	$13 = ( $13 ? ($11 + $13) : ((int_32)$10 == (int_32)$9) )
	$10 = ($1 + [140])
	$11 = *($1 + [140])
	$9 = *(($1 + [144]))
	$14 = ($9 - $11)
	$12 = (CASTING uint_64)(uint_32 $14)
	
.LOOP $label$2:
	$13 = ($13 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$2 }
	$13 = ( $13 ? ($14 + $13) : ((int_32)$11 == (int_32)$9) )
	$11 = ($1 + [152])
	$14 = *($1 + [152])
	$9 = *(($1 + [156]))
	$15 = ($9 - $14)
	$12 = (CASTING uint_64)(uint_32 $15)
	
.LOOP $label$3:
	$13 = ($13 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$3 }
	$9 = (( $13 ? ($15 + $13) : ((int_32)$14 == (int_32)$9) ) + [19])
	if ( ($9 <= [513]) ){ goto $label$5 }
	$13 = CALL $165($9)
	goto $label$4 
	
.LABEL $label$5
	$13 = ($3 - (($9 + [15]) & [-16]))
	$global$0 = $13
	
.LABEL $label$4
	*($4 + [12]) = $13
	*($4 + [8]) = $13
	*($4 + [16]) = ($13 + $9)
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = $8
	*($4 + [64]) = $6
	*($4 + [68]) = $10
	*($4 + [72]) = $11
	*($4 + [104]) = $7
	*($4 + [32]) = $1
	*($4 + [40]) = ($1 + [16])
	*($4 + [44]) = ($1 + [32])
	*($4 + [48]) = ($1 + [64])
	*($4 + [52]) = ($1 + [96])
	*($4 + [56]) = ($1 + [104])
	*($4 + [60]) = ($1 + [112])
	*($4 + [76]) = ($1 + [168])
	*($4 + [80]) = ($1 + [176])
	*($4 + [84]) = ($1 + [177])
	*($4 + [88]) = ($1 + [178])
	*($4 + [92]) = ($1 + [179])
	*($4 + [96]) = ($1 + [180])
	*($4 + [100]) = ($1 + [181])
	*($4 + [112]) = ($1 + [184])
	*($4 + [108]) = ($1 + [183])
	*($4 + [116]) = ($1 + [185])
	*($4 + [120]) = ($1 + [186])
	CALL $110(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [192]), $2, $13, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $169($13)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [128])
	return 
	
.LABEL $label$6
	$global$0 = ($4 + [128])
}

void .FUNC $79 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [240])
	$global$0 = $5
	$6 = *(($3 + [8]))
	*((($5 + [224]) + [8])) = $6
	$7 = *($3)
	*((($5 + [88]) + [8])) = $6
	*($5 + [224]) = $7
	*($5 + [88]) = $7
	CALL $80($0, ($5 + [88]))
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$1 }
	$8 = [0]
	$9 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $14(($0 + [48]), $9)
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [17925])
	CALL eosio_assert(((int_32)*($8 + [8]) ^ (int_32)[1]), [17940])
	$8 = *($4)
	if ( ($8 & [1]) ){ goto $label$4 }
	if ( uint_32($8 >> [1]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	if ( (*($4 + [4]) == 0) ){ goto $label$1 }
	
.LABEL $label$3
	*($5 + [208]) = [0]
	*($5 + [200]) = (int_64)0
	$4 = CALL $146(($5 + [184]), $4)
	CALL $81($0, $4, ($5 + [200]), ($5 + [216]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$5
	$4 = *($5 + [200])
	$8 = CALL $162([17966])
	if ( ((int_32)$8 != (int_32)( *($5 + [204]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$11 }
	if ( (CALL $156(($5 + [200]), [0], [-1], [17966], $8) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$4 = *($5 + [200])
	$8 = CALL $162([17970])
	if ( ((int_32)$8 != (int_32)( *($5 + [204]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$12 }
	if ( (CALL $156(($5 + [200]), [0], [-1], [17970], $8) == 0) ){ goto $label$8 }
	
.LABEL $label$12
	$4 = *($5 + [200])
	$8 = CALL $162([17977])
	if ( ((int_32)$8 != (int_32)( *($5 + [204]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$13 }
	if ( (CALL $156(($5 + [200]), [0], [-1], [17977], $8) == 0) ){ goto $label$7 }
	
.LABEL $label$13
	$4 = *($5 + [200])
	$8 = CALL $162([17987])
	if ( ((int_32)$8 != (int_32)( *($5 + [204]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$9 }
	if ( CALL $156(($5 + [200]), [0], [-1], [17987], $8) ){ goto $label$9 }
	$2 = *(($3 + [8]))
	*((($5 + [104]) + [8])) = $2
	$7 = *($3)
	*((($5 + [72]) + [8])) = $2
	*($5 + [104]) = $7
	*($5 + [72]) = $7
	CALL $67($0, $1, ($5 + [72]))
	if ( (*($5 + [200]) & [1]) ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$10
	CALL $82($0, $1)
	$4 = ($3 + [8])
	$2 = *($4)
	*((($5 + [168]) + [8])) = $2
	$7 = *($3)
	*((($5 + [24]) + [8])) = $2
	*($5 + [24]) = $7
	*($5 + [168]) = $7
	CALL $83($0, ($5 + [24]))
	$2 = *($4)
	*((($5 + [152]) + [8])) = $2
	$7 = *($3)
	*((($5 + [8]) + [8])) = $2
	*($5 + [152]) = $7
	*($5 + [8]) = $7
	CALL $9($0, $1, ($5 + [8]), *($5 + [216]))
	
.LABEL $label$9
	if ( ((*($5 + [200]) & [1]) == 0) ){ goto $label$1 }
	goto $label$6 
	
.LABEL $label$8
	$2 = *(($3 + [8]))
	*((($5 + [136]) + [8])) = $2
	$7 = *($3)
	*((($5 + [40]) + [8])) = $2
	*($5 + [136]) = $7
	*($5 + [40]) = $7
	CALL $55($0, $1, ($5 + [40]))
	if ( (*($5 + [200]) & [1]) ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$7
	$2 = *(($3 + [8]))
	*((($5 + [120]) + [8])) = $2
	$7 = *($3)
	*((($5 + [56]) + [8])) = $2
	*($5 + [120]) = $7
	*($5 + [56]) = $7
	CALL $63($0, $1, ($5 + [56]))
	if ( ((*($5 + [200]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($5 + [208])))
	
.LABEL $label$1
	$global$0 = ($5 + [240])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = [0]
	*($2 + [40]) = [0]
	*($2 + [32]) = (int_64)0
	$4 = (*(($1 + [144])) - *($1 + [140]))
	if ( ($4 == 0) ){ goto $label$8 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL _Znwj($4)
	*(($2 + [40])) = ($5 + $4)
	*($2 + [32]) = $5
	*($2 + [36]) = $5
	$6 = *(($1 + [140]))
	$4 = (*(($1 + [144])) - $6)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($5, $6, $4)
	$7 = ($5 + $4)
	*($2 + [36]) = $7
	$8 = $5
	goto $label$6 
	
.LABEL $label$8
	$5 = [0]
	$8 = [0]
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	$8 = $5
	$7 = $5
	
.LABEL $label$6
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$4 = (*(($1 + [132])) - *($1 + [128]))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$4 }
	$3 = CALL _Znwj($4)
	*(($2 + [24])) = ($3 + $4)
	*($2 + [16]) = $3
	*($2 + [20]) = $3
	$6 = *(($1 + [128]))
	$4 = (*(($1 + [132])) - $6)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($3, $6, $4)
	$9 = ($3 + $4)
	*($2 + [20]) = $9
	goto $label$9 
	
.LABEL $label$11
	$9 = [0]
	goto $label$9 
	
.LABEL $label$10
	$9 = $3
	
.LABEL $label$9
	$4 = [0]
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$10 = [0]
	$6 = (*(($1 + [156])) - *($1 + [152]))
	if ( ($6 == 0) ){ goto $label$13 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$4 = CALL _Znwj($6)
	*(($2 + [8])) = ($4 + $6)
	*($2) = $4
	*($2 + [4]) = $4
	$6 = *(($1 + [152]))
	$1 = (*(($1 + [156])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($4, $6, $1)
	$10 = ($4 + $1)
	*($2 + [4]) = $10
	
.LABEL $label$13
	$1 = ((($9 - $3) + $7) - $8)
	if ( ($4 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$12
	$10 = $4
	$1 = ((($9 - $3) + $7) - $8)
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	CALL $157(($2 + [32]))
	
.LABEL $label$4
	CALL $157(($2 + [16]))
	
.LABEL $label$3
	CALL $157($2)
	
.LABEL $label$2
	*($2 + [4]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$1 = ($1 + $10)
	if ( ($3 == 0) ){ goto $label$14 }
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$14
	$1 = ($1 - $4)
	if ( ($5 == 0) ){ goto $label$15 }
	*($2 + [36]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$global$0 = ($2 + [48])
	(unreachable)
	(unreachable)
	(unreachable)
	return ($1 & [255])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $157($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = *($2 + [8])
	if ( ((int_64)$6 != (int_64)1397703940) ){ goto $label$2 }
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [18007]
	$9 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$8 }
	$10 = *($8)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$10 = ($10 + [-91])
	goto $label$6 
	
.LABEL $label$8
	$11 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$4
	$8 = ($8 + [1])
	$7 = ((int_64)$7 + (int_64)4294967291)
	$9 = ((int_64)$11 | (int_64)$9)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$6 != (int_64)1297438980) ){ goto $label$1 }
	$6 = (int_64)0
	$11 = (int_64)59
	$8 = [18028]
	$9 = (int_64)0
	
.LOOP $label$9:
	$7 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$10 }
	$10 = *($8)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$10 = ($10 + [-91])
	goto $label$11 
	
.LABEL $label$12
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$10
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$11 = ((int_64)$11 + (int_64)4294967291)
	if ( ((int_64)$11 != (int_64)55834574842) ){ goto $label$9 }
	
.LABEL $label$1
	if ( ($4 == 0) ){ goto $label$13 }
	CALL $152($3, [18504])
	$8 = *([0] + [8368])
	$10 = ($8 & [1])
	CALL $154($3, ( *([0] + [8376]) ? [8369] : $10 ), ( *([0] + [8372]) ? uint_32($8 >> [1]) : $10 ))
	
.LABEL $label$13
	$12 = *($0)
	$6 = (int_64)6
	
.LOOP $label$14:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$14 }
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [18019]
	$13 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$20 }
	$10 = *($8)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$10 = ($10 + [-91])
	goto $label$18 
	
.LABEL $label$20
	$11 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$16
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$15 }
	*((($5 + [8]) + [24])) = *(($2 + [8]))
	*($5 + [16]) = $1
	*($5 + [8]) = $12
	*($5 + [24]) = *($2)
	$10 = CALL $146((($5 + [8]) + [32]), $3)
	*($5 + [64]) = $13
	*($5 + [56]) = $9
	*(($8 = CALL _Znwj([16]))) = $12
	*($8 + [8]) = (int_64)3617214756542218240
	*((($5 + [56]) + [36])) = [0]
	$2 = ($8 + [16])
	*((($5 + [56]) + [24])) = $2
	*(($5 + [76])) = $2
	*($5 + [72]) = $8
	*($5 + [84 align=4]) = (int_64)0
	$8 = *($10)
	$10 = ( *((($5 + [8]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($10 + [32])
	$6 = (CASTING uint_64)(uint_32 $10)
	$10 = ($5 + [84])
	
.LOOP $label$21:
	$8 = ($8 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$21 }
	if ( ($8 == 0) ){ goto $label$23 }
	CALL $26($10, $8)
	$10 = *(($5 + [88]))
	$8 = *(($5 + [84]))
	goto $label$22 
	
.LABEL $label$23
	$10 = [0]
	$8 = [0]
	
.LABEL $label$22
	*($5 + [100]) = $8
	*($5 + [96]) = $8
	*($5 + [104]) = $10
	*($5 + [112]) = ($5 + [96])
	*($5 + [120]) = ($5 + [8])
	CALL $50(($5 + [120]), ($5 + [112]))
	CALL $28(($5 + [96]), ($5 + [56]))
	$8 = *($5 + [96])
	CALL send_inline($8, (*($5 + [100]) - $8))
	$8 = *($5 + [96])
	if ( ($8 == 0) ){ goto $label$24 }
	*($5 + [100]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$24
	$8 = *($5 + [84])
	if ( ($8 == 0) ){ goto $label$25 }
	*(($5 + [88])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$25
	$8 = *($5 + [72])
	if ( ($8 == 0) ){ goto $label$26 }
	*(($5 + [76])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$26
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($5 + [48])))
	
.LABEL $label$27
	$global$0 = ($5 + [128])
}

void .FUNC $31 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$2 = ($global$0 - [480])
	$global$0 = $2
	$3 = ($0 + [8])
	$5 = *(($0 + [36]))
	$4 = *(($0 + [32]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7 + [8]) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($7 + [188])) == (int_32)$3), [18937])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [16])), (int_64)7035937633859534848, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $10($3, $6)
	CALL eosio_assert(((int_32)*($7 + [188]) == (int_32)$3), [18937])
	
.LABEL $label$1
	$8 = ($0 + [128])
	$1 = *($7)
	$5 = *(($0 + [156]))
	$9 = *(($0 + [152]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$8:
	$6 = ($5 + [-24])
	$4 = *($6)
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$7 }
	$5 = $6
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$8), [18937])
	goto $label$5 
	
.LABEL $label$6
	$4 = [0]
	$6 = CALL db_find_i64(*($8), *(($0 + [136])), (int_64)6454109460926300160, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $11($8, $6)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$8), [18937])
	
.LABEL $label$5
	*((($2 + [448]) + [24])) = *(($4 + [40]))
	*(($2 + [464])) = *(($4 + [32]))
	*($2 + [448]) = *($4 + [16])
	*($2 + [456]) = *(($4 + [24]))
	*($2 + [440]) = [0]
	*($2 + [432]) = (int_64)0
	$6 = (*(($7 + [144])) - *($7 + [140]))
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$11 }
	$5 = CALL _Znwj($6)
	*(($2 + [440])) = ($5 + $6)
	*($2 + [432]) = $5
	*($2 + [436]) = $5
	$4 = *(($7 + [140]))
	$6 = (*(($7 + [144])) - $4)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($5, $4, $6)
	*($2 + [436]) = ($5 + $6)
	
.LABEL $label$12
	*($2 + [424]) = [0]
	*($2 + [416]) = (int_64)0
	$6 = (*(($7 + [132])) - *($7 + [128]))
	if ( ($6 == 0) ){ goto $label$13 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$10 }
	$5 = CALL _Znwj($6)
	*(($2 + [424])) = ($5 + $6)
	*($2 + [416]) = $5
	*($2 + [420]) = $5
	$4 = *(($7 + [128]))
	$6 = (*(($7 + [132])) - $4)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$13 }
	CALL memcpy($5, $4, $6)
	*($2 + [420]) = ($5 + $6)
	
.LABEL $label$13
	*($2 + [408]) = [0]
	*($2 + [400]) = (int_64)0
	$6 = (*(($7 + [156])) - *($7 + [152]))
	if ( ($6 == 0) ){ goto $label$14 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$9 }
	$5 = CALL _Znwj($6)
	*(($2 + [408])) = ($5 + $6)
	*($2 + [400]) = $5
	*($2 + [404]) = $5
	$4 = *(($7 + [152]))
	$6 = (*(($7 + [156])) - $4)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$14 }
	CALL memcpy($5, $4, $6)
	*($2 + [404]) = ($5 + $6)
	
.LABEL $label$14
	$6 = CALL $22(($2 + [208]), $7)
	$10 = CALL $32($0, $6)
	$5 = *($6 + [152])
	if ( ($5 == 0) ){ goto $label$15 }
	*(($6 + [156])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$5 = *($6 + [140])
	if ( ($5 == 0) ){ goto $label$16 }
	*(($6 + [144])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$5 = *($6 + [128])
	if ( ($5 == 0) ){ goto $label$17 }
	*(($6 + [132])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$1 = *((($2 + [448]) + [24]))
	*((($2 + [176]) + [24])) = $1
	$11 = *((($2 + [448]) + [16]))
	*((($2 + [176]) + [16])) = $11
	*((($2 + [64]) + [16])) = $11
	*((($2 + [64]) + [24])) = $1
	$1 = *($2 + [456])
	*($2 + [184]) = $1
	$11 = *($2 + [448])
	*($2 + [64]) = $11
	*($2 + [176]) = $11
	*($2 + [72]) = $1
	$6 = CALL $15($0, ($2 + [64]), [1])
	*(*($2 + [416]) + [1]) = $6
	$6 = [0]
	$12 = [0]
	$4 = *($2 + [436])
	$5 = *($2 + [432])
	$13 = ((int_32)$5 == (int_32)$4)
	if ( $13 ){ goto $label$18 }
	$12 = [0]
	$14 = [0]
	$9 = $5
	
.LOOP $label$20:
	$8 = ((uint_32)*($9) % (uint_32)[13])
	if ( ((uint_32)$8 > (uint_32)[12]) ){ goto $label$30 }
	goto $label$25 
	
.LABEL $label$31
	$12 = ($12 + [10])
	
.LABEL $label$30
	$9 = ($9 + [1])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$29
	$12 = ($12 + [5])
	$9 = ($9 + [1])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$28
	$12 = ($12 + [3])
	$9 = ($9 + [1])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$27
	$12 = ($12 + [4])
	$9 = ($9 + [1])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$26
	$12 = ($12 + [8])
	$9 = ($9 + [1])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$25
	$14 = ($14 + [1])
	$12 = ($12 + [11])
	$9 = ($9 + [1])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$24
	$12 = ($12 + [2])
	$9 = ($9 + [1])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$23
	$12 = ($12 + [6])
	$9 = ($9 + [1])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$12 = ($12 + [7])
	$9 = ($9 + [1])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$12 = ($12 + [9])
	$9 = ($9 + [1])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$20 }
	
.LABEL $label$19
	if ( (($14 & [255]) == 0) ){ goto $label$18 }
	if ( (($12 & [255]) <= [22]) ){ goto $label$18 }
	$8 = ((int_32)((uint_32)(($12 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$9 = ([0] - $14)
	$12 = ($12 + ((int_32)( $9 ? $8 : ((uint_32)($9 & [255]) > (uint_32)($8 & [255])) ) * (int_32)[10]))
	
.LABEL $label$18
	$16 = *($2 + [420])
	$15 = *($2 + [416])
	$17 = ((int_32)$15 == (int_32)$16)
	if ( $17 ){ goto $label$32 }
	$6 = [0]
	$14 = [0]
	$9 = $15
	
.LOOP $label$34:
	$8 = ((uint_32)*($9) % (uint_32)[13])
	if ( ((uint_32)$8 > (uint_32)[12]) ){ goto $label$44 }
	goto $label$39 
	
.LABEL $label$45
	$6 = ($6 + [10])
	
.LABEL $label$44
	$9 = ($9 + [1])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$43
	$6 = ($6 + [5])
	$9 = ($9 + [1])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$42
	$6 = ($6 + [3])
	$9 = ($9 + [1])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$41
	$6 = ($6 + [4])
	$9 = ($9 + [1])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$40
	$6 = ($6 + [8])
	$9 = ($9 + [1])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$39
	$14 = ($14 + [1])
	$6 = ($6 + [11])
	$9 = ($9 + [1])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$38
	$6 = ($6 + [2])
	$9 = ($9 + [1])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$37
	$6 = ($6 + [6])
	$9 = ($9 + [1])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$6 = ($6 + [7])
	$9 = ($9 + [1])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$6 = ($6 + [9])
	$9 = ($9 + [1])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$34 }
	
.LABEL $label$33
	if ( (($14 & [255]) == 0) ){ goto $label$32 }
	if ( (($6 & [255]) <= [22]) ){ goto $label$32 }
	$8 = ((int_32)((uint_32)(($6 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$9 = ([0] - $14)
	$6 = ($6 + ((int_32)( $9 ? $8 : ((uint_32)($9 & [255]) > (uint_32)($8 & [255])) ) * (int_32)[10]))
	
.LABEL $label$32
	*($2 + [175]) = $6
	$18 = [0]
	$14 = [0]
	$8 = *($2 + [404])
	$19 = *($2 + [400])
	$20 = ((int_32)$19 == (int_32)$8)
	if ( $20 ){ goto $label$46 }
	$14 = [0]
	$21 = [0]
	$9 = $19
	
.LOOP $label$48:
	$22 = ((uint_32)*($9) % (uint_32)[13])
	if ( ((uint_32)$22 > (uint_32)[12]) ){ goto $label$58 }
	goto $label$53 
	
.LABEL $label$59
	$14 = ($14 + [10])
	
.LABEL $label$58
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$57
	$14 = ($14 + [5])
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$56
	$14 = ($14 + [3])
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$55
	$14 = ($14 + [4])
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$54
	$14 = ($14 + [8])
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$53
	$21 = ($21 + [1])
	$14 = ($14 + [11])
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$52
	$14 = ($14 + [2])
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$51
	$14 = ($14 + [6])
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$50
	$14 = ($14 + [7])
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	$14 = ($14 + [9])
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$48 }
	
.LABEL $label$47
	if ( (($21 & [255]) == 0) ){ goto $label$46 }
	if ( (($14 & [255]) <= [22]) ){ goto $label$46 }
	$22 = ((int_32)((uint_32)(($14 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$9 = ([0] - $21)
	$14 = ($14 + ((int_32)( $9 ? $22 : ((uint_32)($9 & [255]) > (uint_32)($22 & [255])) ) * (int_32)[10]))
	
.LABEL $label$46
	if ( $17 ){ goto $label$60 }
	$18 = [0]
	$21 = [0]
	$9 = $15
	
.LOOP $label$62:
	$22 = ((uint_32)*($9) % (uint_32)[13])
	if ( ((uint_32)$22 > (uint_32)[12]) ){ goto $label$72 }
	goto $label$67 
	
.LABEL $label$73
	$18 = ($18 + [10])
	
.LABEL $label$72
	$9 = ($9 + [1])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$71
	$18 = ($18 + [5])
	$9 = ($9 + [1])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$70
	$18 = ($18 + [3])
	$9 = ($9 + [1])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$69
	$18 = ($18 + [4])
	$9 = ($9 + [1])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$68
	$18 = ($18 + [8])
	$9 = ($9 + [1])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$67
	$21 = ($21 + [1])
	$18 = ($18 + [11])
	$9 = ($9 + [1])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$66
	$18 = ($18 + [2])
	$9 = ($9 + [1])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$65
	$18 = ($18 + [6])
	$9 = ($9 + [1])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$64
	$18 = ($18 + [7])
	$9 = ($9 + [1])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$63
	$18 = ($18 + [9])
	$9 = ($9 + [1])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$62 }
	
.LABEL $label$61
	if ( (($21 & [255]) == 0) ){ goto $label$60 }
	if ( (($18 & [255]) <= [22]) ){ goto $label$60 }
	$22 = ((int_32)((uint_32)(($18 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$9 = ([0] - $21)
	$18 = (((int_32)( $9 ? $22 : ((uint_32)($9 & [255]) > (uint_32)($22 & [255])) ) * (int_32)[10]) + $18)
	
.LABEL $label$60
	$17 = ($18 & [255])
	$15 = ($16 - $15)
	$16 = [0]
	$18 = [0]
	if ( $13 ){ goto $label$74 }
	$18 = [0]
	$21 = [0]
	$9 = $5
	
.LOOP $label$76:
	$22 = ((uint_32)*($9) % (uint_32)[13])
	if ( ((uint_32)$22 > (uint_32)[12]) ){ goto $label$86 }
	goto $label$81 
	
.LABEL $label$87
	$18 = ($18 + [10])
	
.LABEL $label$86
	$9 = ($9 + [1])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$85
	$18 = ($18 + [5])
	$9 = ($9 + [1])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$84
	$18 = ($18 + [3])
	$9 = ($9 + [1])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$83
	$18 = ($18 + [4])
	$9 = ($9 + [1])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$82
	$18 = ($18 + [8])
	$9 = ($9 + [1])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$81
	$21 = ($21 + [1])
	$18 = ($18 + [11])
	$9 = ($9 + [1])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$80
	$18 = ($18 + [2])
	$9 = ($9 + [1])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$79
	$18 = ($18 + [6])
	$9 = ($9 + [1])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$78
	$18 = ($18 + [7])
	$9 = ($9 + [1])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$77
	$18 = ($18 + [9])
	$9 = ($9 + [1])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$76 }
	
.LABEL $label$75
	if ( (($21 & [255]) == 0) ){ goto $label$74 }
	if ( (($18 & [255]) <= [22]) ){ goto $label$74 }
	$22 = ((int_32)((uint_32)(($18 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$9 = ([0] - $21)
	$18 = (((int_32)( $9 ? $22 : ((uint_32)($9 & [255]) > (uint_32)($22 & [255])) ) * (int_32)[10]) + $18)
	
.LABEL $label$74
	$17 = ((int_32)$17 == (int_32)[21])
	$15 = ((int_32)$15 == (int_32)[2])
	if ( $20 ){ goto $label$88 }
	$16 = [0]
	$21 = [0]
	$9 = $19
	
.LOOP $label$90:
	$22 = ((uint_32)*($9) % (uint_32)[13])
	if ( ((uint_32)$22 > (uint_32)[12]) ){ goto $label$100 }
	goto $label$95 
	
.LABEL $label$101
	$16 = ($16 + [10])
	
.LABEL $label$100
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$99
	$16 = ($16 + [5])
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$98
	$16 = ($16 + [3])
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$97
	$16 = ($16 + [4])
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$96
	$16 = ($16 + [8])
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$95
	$21 = ($21 + [1])
	$16 = ($16 + [11])
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$94
	$16 = ($16 + [2])
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$93
	$16 = ($16 + [6])
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$92
	$16 = ($16 + [7])
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$91
	$16 = ($16 + [9])
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$90 }
	
.LABEL $label$89
	if ( (($21 & [255]) == 0) ){ goto $label$88 }
	if ( (($16 & [255]) <= [22]) ){ goto $label$88 }
	$22 = ((int_32)((uint_32)(($16 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$9 = ([0] - $21)
	$16 = (((int_32)( $9 ? $22 : ((uint_32)($9 & [255]) > (uint_32)($22 & [255])) ) * (int_32)[10]) + $16)
	
.LABEL $label$88
	$23 = ($4 - $5)
	$15 = ($15 & $17)
	$17 = ($8 - $19)
	if ( $13 ){ goto $label$103 }
	$9 = [0]
	$21 = [0]
	
.LOOP $label$105:
	$22 = ((uint_32)*($5) % (uint_32)[13])
	if ( ((uint_32)$22 > (uint_32)[12]) ){ goto $label$115 }
	goto $label$110 
	
.LABEL $label$116
	$9 = ($9 + [10])
	
.LABEL $label$115
	$5 = ($5 + [1])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$114
	$9 = ($9 + [5])
	$5 = ($5 + [1])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$113
	$9 = ($9 + [3])
	$5 = ($5 + [1])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$112
	$9 = ($9 + [4])
	$5 = ($5 + [1])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$111
	$9 = ($9 + [8])
	$5 = ($5 + [1])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$110
	$21 = ($21 + [1])
	$9 = ($9 + [11])
	$5 = ($5 + [1])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$109
	$9 = ($9 + [2])
	$5 = ($5 + [1])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$108
	$9 = ($9 + [6])
	$5 = ($5 + [1])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$107
	$9 = ($9 + [7])
	$5 = ($5 + [1])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$106
	$9 = ($9 + [9])
	$5 = ($5 + [1])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$105 }
	
.LABEL $label$104
	if ( (($21 & [255]) == 0) ){ goto $label$117 }
	if ( (($9 & [255]) <= [22]) ){ goto $label$117 }
	$4 = ((int_32)((uint_32)(($9 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$5 = ([0] - $21)
	$9 = (((int_32)( $5 ? $4 : ((uint_32)($5 & [255]) > (uint_32)($4 & [255])) ) * (int_32)[10]) + $9)
	
.LABEL $label$117
	if ( $20 ){ goto $label$103 }
	if ( ((int_32)$23 != (int_32)[2]) ){ goto $label$103 }
	if ( ((int_32)($9 & [255]) != (int_32)[21]) ){ goto $label$103 }
	$5 = [0]
	$9 = [0]
	
.LOOP $label$119:
	$4 = ((uint_32)*($19) % (uint_32)[13])
	if ( ((uint_32)$4 > (uint_32)[12]) ){ goto $label$129 }
	goto $label$124 
	
.LABEL $label$130
	$5 = ($5 + [10])
	
.LABEL $label$129
	$19 = ($19 + [1])
	if ( ((int_32)$8 != (int_32)$19) ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$128
	$5 = ($5 + [5])
	$19 = ($19 + [1])
	if ( ((int_32)$8 != (int_32)$19) ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$127
	$5 = ($5 + [3])
	$19 = ($19 + [1])
	if ( ((int_32)$8 != (int_32)$19) ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$126
	$5 = ($5 + [4])
	$19 = ($19 + [1])
	if ( ((int_32)$8 != (int_32)$19) ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$125
	$5 = ($5 + [8])
	$19 = ($19 + [1])
	if ( ((int_32)$8 != (int_32)$19) ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$124
	$9 = ($9 + [1])
	$5 = ($5 + [11])
	$19 = ($19 + [1])
	if ( ((int_32)$8 != (int_32)$19) ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$123
	$5 = ($5 + [2])
	$19 = ($19 + [1])
	if ( ((int_32)$8 != (int_32)$19) ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$122
	$5 = ($5 + [6])
	$19 = ($19 + [1])
	if ( ((int_32)$8 != (int_32)$19) ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$121
	$5 = ($5 + [7])
	$19 = ($19 + [1])
	if ( ((int_32)$8 != (int_32)$19) ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$120
	$5 = ($5 + [9])
	$19 = ($19 + [1])
	if ( ((int_32)$8 != (int_32)$19) ){ goto $label$119 }
	
.LABEL $label$118
	if ( (($9 & [255]) == 0) ){ goto $label$131 }
	if ( (($5 & [255]) <= [22]) ){ goto $label$131 }
	$9 = ((int_32)((uint_32)(($5 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$4 = ([0] - $9)
	$5 = (((int_32)( $4 ? $9 : ((uint_32)($4 & [255]) > (uint_32)($9 & [255])) ) * (int_32)[10]) + $5)
	
.LABEL $label$131
	if ( ((int_32)$17 != (int_32)[2]) ){ goto $label$103 }
	if ( ((int_32)($5 & [255]) == (int_32)[21]) ){ goto $label$102 }
	
.LABEL $label$103
	$21 = ( $14 ? $12 : (($14 & [255]) <= ($12 & [255])) )
	if ( ((uint_32)($21 & [255]) >= (uint_32)[22]) ){ goto $label$132 }
	$5 = ($6 & [255])
	if ( ($5 <= [17]) ){ goto $label$133 }
	if ( ((uint_32)$5 >= (uint_32)($21 & [255])) ){ goto $label$102 }
	
.LABEL $label$133
	$22 = (($2 + [128]) + [24])
	$19 = (($2 + [416]) + [8])
	
.LOOP $label$134:
	$1 = *((($2 + [448]) + [24]))
	*($22) = $1
	$11 = *((($2 + [448]) + [16]))
	*((($2 + [128]) + [16])) = $11
	*(($2 + [16])) = $11
	*(($2 + [24])) = $1
	$1 = *($2 + [456])
	*($2 + [136]) = $1
	$11 = *($2 + [448])
	*($2) = $11
	*($2 + [128]) = $11
	*($2 + [8]) = $1
	$6 = CALL $15($0, $2, ($10 & [255]))
	*($2 + [104]) = $6
	$5 = *($2 + [420])
	if ( ((int_32)$5 == (int_32)*($19)) ){ goto $label$137 }
	*($5) = $6
	$9 = (*($2 + [420]) + [1])
	*($2 + [420]) = $9
	$6 = [0]
	$5 = *($2 + [416])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$136 }
	goto $label$135 
	
.LABEL $label$137
	CALL $33(($2 + [416]), ($2 + [104]))
	$6 = [0]
	$9 = *($2 + [420])
	$5 = *($2 + [416])
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$135 }
	
.LABEL $label$136
	$8 = [0]
	
.LOOP $label$139:
	$4 = ((uint_32)*($5) % (uint_32)[13])
	if ( ((uint_32)$4 > (uint_32)[12]) ){ goto $label$149 }
	goto $label$144 
	
.LABEL $label$150
	$6 = ($6 + [10])
	
.LABEL $label$149
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$139 }
	goto $label$138 
	
.LABEL $label$148
	$6 = ($6 + [5])
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$139 }
	goto $label$138 
	
.LABEL $label$147
	$6 = ($6 + [3])
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$139 }
	goto $label$138 
	
.LABEL $label$146
	$6 = ($6 + [4])
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$139 }
	goto $label$138 
	
.LABEL $label$145
	$6 = ($6 + [8])
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$139 }
	goto $label$138 
	
.LABEL $label$144
	$8 = ($8 + [1])
	$6 = ($6 + [11])
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$139 }
	goto $label$138 
	
.LABEL $label$143
	$6 = ($6 + [2])
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$139 }
	goto $label$138 
	
.LABEL $label$142
	$6 = ($6 + [6])
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$139 }
	goto $label$138 
	
.LABEL $label$141
	$6 = ($6 + [7])
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$139 }
	goto $label$138 
	
.LABEL $label$140
	$6 = ($6 + [9])
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$139 }
	
.LABEL $label$138
	if ( (($8 & [255]) == 0) ){ goto $label$135 }
	if ( (($6 & [255]) <= [22]) ){ goto $label$135 }
	$4 = ((int_32)((uint_32)(($6 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$5 = ([0] - $8)
	$6 = ($6 + ((int_32)( $5 ? $4 : ((uint_32)($5 & [255]) > (uint_32)($4 & [255])) ) * (int_32)[10]))
	
.LABEL $label$135
	$10 = ($10 + [1])
	*($2 + [175]) = $6
	$5 = ($6 & [255])
	if ( ($5 <= [17]) ){ goto $label$134 }
	if ( ($5 <= ($21 & [255])) ){ goto $label$134 }
	goto $label$102 
	
.LABEL $label$132
	if ( ((uint_32)($6 & [255]) > (uint_32)[16]) ){ goto $label$102 }
	$22 = (($2 + [416]) + [8])
	
.LOOP $label$151:
	$1 = *((($2 + [448]) + [24]))
	*((($2 + [128]) + [24])) = $1
	$11 = *((($2 + [448]) + [16]))
	*((($2 + [128]) + [16])) = $11
	*((($2 + [32]) + [16])) = $11
	*((($2 + [32]) + [24])) = $1
	$1 = *($2 + [456])
	*($2 + [136]) = $1
	$11 = *($2 + [448])
	*($2 + [32]) = $11
	*($2 + [128]) = $11
	*($2 + [40]) = $1
	$6 = CALL $15($0, ($2 + [32]), ($10 & [255]))
	*($2 + [104]) = $6
	$5 = *($2 + [420])
	if ( ((int_32)$5 == (int_32)*($22)) ){ goto $label$154 }
	*($5) = $6
	$9 = (*($2 + [420]) + [1])
	*($2 + [420]) = $9
	$6 = [0]
	$5 = *($2 + [416])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$153 }
	goto $label$152 
	
.LABEL $label$154
	CALL $33(($2 + [416]), ($2 + [104]))
	$6 = [0]
	$9 = *($2 + [420])
	$5 = *($2 + [416])
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$152 }
	
.LABEL $label$153
	$8 = [0]
	
.LOOP $label$156:
	$4 = ((uint_32)*($5) % (uint_32)[13])
	if ( ((uint_32)$4 > (uint_32)[12]) ){ goto $label$166 }
	goto $label$161 
	
.LABEL $label$167
	$6 = ($6 + [10])
	
.LABEL $label$166
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$156 }
	goto $label$155 
	
.LABEL $label$165
	$6 = ($6 + [5])
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$156 }
	goto $label$155 
	
.LABEL $label$164
	$6 = ($6 + [3])
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$156 }
	goto $label$155 
	
.LABEL $label$163
	$6 = ($6 + [4])
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$156 }
	goto $label$155 
	
.LABEL $label$162
	$6 = ($6 + [8])
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$156 }
	goto $label$155 
	
.LABEL $label$161
	$8 = ($8 + [1])
	$6 = ($6 + [11])
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$156 }
	goto $label$155 
	
.LABEL $label$160
	$6 = ($6 + [2])
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$156 }
	goto $label$155 
	
.LABEL $label$159
	$6 = ($6 + [6])
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$156 }
	goto $label$155 
	
.LABEL $label$158
	$6 = ($6 + [7])
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$156 }
	goto $label$155 
	
.LABEL $label$157
	$6 = ($6 + [9])
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$156 }
	
.LABEL $label$155
	if ( (($8 & [255]) == 0) ){ goto $label$152 }
	if ( (($6 & [255]) <= [22]) ){ goto $label$152 }
	$4 = ((int_32)((uint_32)(($6 + [-22]) & [255]) / (uint_32)[10]) ^ (int_32)[-1])
	$5 = ([0] - $8)
	$6 = ($6 + ((int_32)( $5 ? $4 : ((uint_32)($5 & [255]) > (uint_32)($4 & [255])) ) * (int_32)[10]))
	
.LABEL $label$152
	$10 = ($10 + [1])
	*($2 + [175]) = $6
	if ( (($6 & [255]) <= [17]) ){ goto $label$151 }
	
.LABEL $label$102
	if ( ($15 == 0) ){ goto $label$169 }
	*($2 + [127]) = ( [3] ? [2] : (((int_32)$17 == (int_32)[2]) & ((int_32)($16 & [255]) == (int_32)[21])) )
	$5 = ( [3] ? [2] : (((int_32)$23 == (int_32)[2]) & ((int_32)($18 & [255]) == (int_32)[21])) )
	goto $label$168 
	
.LABEL $label$169
	if ( ((uint_32)($6 & [255]) <= (uint_32)[21]) ){ goto $label$170 }
	*($2 + [127]) = ( [2] ? [1] : ((uint_32)($14 & [255]) > (uint_32)[21]) )
	$5 = ( [2] ? [1] : ((uint_32)($12 & [255]) > (uint_32)[21]) )
	goto $label$168 
	
.LABEL $label$170
	$5 = [2]
	$4 = [2]
	if ( ((uint_32)($14 & [255]) > (uint_32)[21]) ){ goto $label$171 }
	$4 = [1]
	$8 = ($6 & [255])
	$9 = ($14 & [255])
	if ( ((uint_32)$9 > (uint_32)$8) ){ goto $label$171 }
	$4 = ( [3] ? [2] : ((int_32)$9 == (int_32)$8) )
	
.LABEL $label$171
	*($2 + [127]) = $4
	$4 = ($12 & [255])
	if ( ((uint_32)$4 > (uint_32)[21]) ){ goto $label$168 }
	$5 = [1]
	if ( ((uint_32)$4 > (uint_32)($6 & [255])) ){ goto $label$168 }
	$5 = ( [3] ? [2] : ((int_32)($12 & [255]) == (int_32)($6 & [255])) )
	
.LABEL $label$168
	*($2 + [126]) = $5
	$1 = *($0)
	*($2 + [108]) = ($2 + [416])
	*($2 + [104]) = ($2 + [175])
	*($2 + [112]) = ($2 + [126])
	*($2 + [116]) = ($2 + [127])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18237])
	CALL $70($3, $7, $1, ($2 + [104]))
	CALL $35($0, *($7 + [8]))
	$6 = *($2 + [400])
	if ( ($6 == 0) ){ goto $label$172 }
	*($2 + [404]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$172
	$6 = *($2 + [416])
	if ( ($6 == 0) ){ goto $label$173 }
	*($2 + [420]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$173
	$6 = *($2 + [432])
	if ( ($6 == 0) ){ goto $label$174 }
	*($2 + [436]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$174
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$11
	CALL $157(($2 + [432]))
	
.LABEL $label$10
	CALL $157(($2 + [416]))
	
.LABEL $label$9
	CALL $157(($2 + [400]))
	$8
	$8
	$22
	$22
	$22
	$22
	$22
	$4
	$4
	$4
	(unreachable)
	(unreachable)
}

void .FUNC $164 (int_32 $0)
{
	*($0) = [0]
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $125($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $150($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $150($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $145($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18899])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $2) >> [4])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $128($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ($7 << [4]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$3 = *($7)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [18903])
	CALL memcpy($2, *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [18903])
	CALL memcpy(($2 + [8]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $161 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}