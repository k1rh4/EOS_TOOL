(data (i32.const 8192) "betxtopadmin\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8214) "error\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8306) "quantity != memo\00")
(data (i32.const 8323) "Exceeding the maximum bet amount\00")
(data (i32.const 8356) "Already bet\00stoll\00")
(data (i32.const 8374) "active\00")
(data (i32.const 8381) "bindagent\00")
(data (i32.const 8391) "betxtopsign1\00")
(data (i32.const 8404) "no bet\00")
(data (i32.const 8411) "game_id error\00")
(data (i32.const 8425) "result error\00")
(data (i32.const 8448) "\02\00\00\00\05\00\00\00\08\00\00\00\0c\00\00\00\19\00\00\00\1e\00\00\00#\00\00\002\00\00\00")
(data (i32.const 8480) "sendtoken\00")
(data (i32.const 8490) "Welcome to BetX.top\00")
(data (i32.const 8510) "notify\00")
(data (i32.const 8517) "profit\00")
(data (i32.const 8524) "EOS\00")
(data (i32.const 8528) "issue\00")
(data (i32.const 8534) "invalid memo\00")
(data (i32.const 8548) "Invalid seed\00")
(data (i32.const 8561) "Seed length must be equal to 16\00")
(data (i32.const 8593) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8642) "invalid symbol name\00")
(data (i32.const 8662) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 8721) "string is too long to be a valid name\00")
(data (i32.const 8759) "thirteenth character in name cannot be a letter that comes after j\00: no conversion\00")
(data (i32.const 8842) "character is not in allowed character set for names\00: out of range\00")
(data (i32.const 8909) "write\00")
(data (i32.const 8915) "multiplication overflow\00")
(data (i32.const 8939) "multiplication underflow\00")
(data (i32.const 8964) "attempt to add asset with different symbol\00")
(data (i32.const 9007) "addition underflow\00")
(data (i32.const 9026) "addition overflow\00")
(data (i32.const 9044) "attempt to subtract asset with different symbol\00")
(data (i32.const 9092) "subtraction underflow\00")
(data (i32.const 9114) "subtraction overflow\00")
(data (i32.const 9135) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9186) "error reading iterator\00")
(data (i32.const 9209) "read\00")
(data (i32.const 9214) "get\00")
(data (i32.const 9218) "cannot create objects in table of another contract\00")
(data (i32.const 9269) "cannot pass end iterator to modify\00")
(data (i32.const 9304) "object passed to modify is not in multi_index\00")
(data (i32.const 9350) "cannot modify objects in table of another contract\00")
(data (i32.const 9401) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9460) "cannot pass end iterator to erase\00")
(data (i32.const 9494) "cannot increment end iterator\00")
(data (i32.const 9524) "object passed to erase is not in multi_index\00")
(data (i32.const 9569) "cannot erase objects in table of another contract\00")
(data (i32.const 9619) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18096) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "require_auth" (func $fimport$1 (param i64)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$5 (param i32 i32)))
(import "env" "db_update_i64" (func $fimport$6 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$7 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$9 (result i64)))
(import "env" "db_next_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "__multi3" (func $fimport$11 (param i32 i64 i64 i64 i64)))
(import "env" "require_recipient" (func $fimport$12 (param i64)))
(import "env" "action_data_size" (func $fimport$13 (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$16))
(import "env" "db_remove_i64" (func $fimport$17 (param i32)))
(import "env" "memset" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$20 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$27 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$28 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$29 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$30 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$31 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$32 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$35 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$37 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$38 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$39 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $29))
(export "_ZdlPv" (func $55))
(export "_Znwj" (func $53))
(export "_Znaj" (func $54))
(export "_ZdaPv" (func $56))
(export "_ZnwjSt11align_val_t" (func $57))
(export "_ZnajSt11align_val_t" (func $58))
(export "_ZdlPvSt11align_val_t" (func $59))
(export "_ZdaPvSt11align_val_t" (func $60))
(table $0 4 4 anyfunc)
(elem (i32.const 1) $4 $28 $21)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18353))
(global $global$2 i32 (i32.const 18353))


int_32 .FUNC $94 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9684]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9688])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9684]) = [1]
	$2 = ($2 << [16])
	*([0] + [9688]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9688])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9688]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9684]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9684]) = [1]
	$3 = ($3 << [16])
	*([0] + [9688]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9688])
	
.LABEL $label$10
	*([0] + [9688]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $95 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18076])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17884]
	$3 = (((int_32)$1 * (int_32)[12]) + [17884])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $79())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $91($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $92($1)
	
.LABEL $label$2
	*(CALL $79()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $92(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $95($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $92 (int_32 $0)
{
	return CALL $93([9692], $0)
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $94($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8220])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8909])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8909])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8909])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8909])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8909])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8909])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8909])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	*($2) = *(($7 + [8]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8909])
	CALL memcpy(*($6), $2, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9214])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $13($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9209])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $77($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [9214])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $5)
	$3 = *($1)
	$6 = *($1 + [4])
	$4 = int_32(($6 - $3) >> [4])
	if ( ((uint_32)$4 >= (uint_32)$8) ){ goto $label$4 }
	CALL $42($1, ($8 - $4))
	$6 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 <= (uint_32)$8) ){ goto $label$5 }
	$6 = ($3 + ($8 << [4]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($0 + [4])
	$4 = *($8)
	
.LOOP $label$6:
	$7 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($7) - $4) > (uint_32)[7]), [9209])
	CALL memcpy($3, *($8), [8])
	$4 = (*($8) + [8])
	*($8) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($7) - $4) > (uint_32)[7]), [9209])
	CALL memcpy(($2 + [8]), *($8), [8])
	*(($3 + [8])) = *($2 + [8])
	$4 = (*($8) + [8])
	*($8) = $4
	$3 = ($3 + [16])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9209])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $41(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9209])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $33(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9209])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $33(*($1), *($0 + [20]))
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9209])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9209])
	CALL memcpy($4, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [9209])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($4 + [8]) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $48(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $49(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $49(*($1), *($0 + [20]))
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [8909])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8909])
	CALL memcpy(*($0 + [4]), $4, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = *($4 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [8909])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$1 = (*($2) + [8])
	*(($2 = *($1))) = $1
	$3 = *($3)
	$3 = *($0 + [4])
	$4 = *($3 + [4])
	$5 = ($4 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$1 = (($5 & [-16]) + $1)
	
.LABEL $label$2
	$1 = ($1 + [8])
	*($2) = $1
	$4 = *($3)
	$3 = *($0 + [12])
	$6 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$1 = ($1 + [8])
	*($2) = $1
	$3 = *($0)
	$0 = *($0 + [20])
	$6 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	$1 = ($0 + $1)
	*($2) = $1
	
.LABEL $label$6
	*($2) = ($1 + [20])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [4])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$6 = int_32($7 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [4]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $77($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [4])))) = *($1)
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $44 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [64])))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [40])))
	$4 = *($1 + [8])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	return $0
}

int_64 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [80])
	$global$0 = $1
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	$2 = *($0)
	*($1 + [8]) = $2
	*($1 + [16]) = $2
	*($1 + [32]) = (int_64)0
	$3 = CALL db_find_i64($2, $2, (int_64)7035914698734174208, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$3 = CALL $17(($1 + [8]), $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)($1 + [8])), [9135])
	$4 = *($0)
	$2 = *($3)
	CALL eosio_assert([1], [9269])
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)($1 + [8])), [9304])
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)CALL $fimport$3()), [9350])
	$2 = ((int_64)$2 + (int_64)1)
	*($3) = $2
	CALL eosio_assert([1], [9401])
	CALL eosio_assert([1], [8909])
	CALL memcpy(($1 + [64]), $3, [8])
	CALL db_update_i64(*($3 + [12]), $4, ($1 + [64]), [8])
	$3 = ($1 + [24])
	if ( ((int_64)(*($3) == 0) == 0) ){ goto $label$3 }
	*($3) = (int_64)1
	$5 = *($1 + [32])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$4 = *($0)
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$3()), [9218])
	*(($3 = CALL _Znwj([24])) + [8]) = ($1 + [8])
	*($3) = (int_64)1
	CALL eosio_assert([1], [8909])
	CALL memcpy(($1 + [64]), $3, [8])
	$5 = CALL db_store_i64(*((($1 + [8]) + [8])), (int_64)7035914698734174208, $4, (int_64)0, ($1 + [64]), [8])
	*($3 + [12]) = $5
	$0 = ($1 + [24])
	if ( ((int_64)*($0) != (int_64)0) ){ goto $label$5 }
	*($0) = (int_64)1
	
.LABEL $label$5
	*($1 + [56]) = $3
	*($1 + [64]) = (int_64)0
	*($1 + [52]) = $5
	$6 = ($1 + [36])
	$0 = *($6)
	if ( ((uint_32)$0 >= (uint_32)*(($1 + [40]))) ){ goto $label$8 }
	*($0 + [8]) = (int_64)0
	*($0 + [16]) = $5
	*($1 + [56]) = [0]
	*($0) = $3
	*($6) = ($0 + [24])
	$3 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( $3 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $18(($1 + [32]), ($1 + [56]), ($1 + [64]), ($1 + [52]))
	$3 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$2 = (int_64)1
	
.LABEL $label$3
	$5 = *($1 + [32])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($1 + [36])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	CALL _ZdlPv($0)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$11 }
	$3 = *(($1 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$3 = $5
	
.LABEL $label$9
	*($6) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($1 + [80])
	return $2
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9186])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $92($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([104]))) = (int_64)0
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [16]) = [0]
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = [0]
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64]) = [0]
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [48])
	*($3 + [52]) = ($5 + [56])
	*($3 + [56]) = ($5 + [68])
	*($3 + [60]) = ($5 + [72])
	CALL $40(($3 + [32]), ($3 + [24]))
	*($5 + [92]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $12(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $95($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [56]) & [1]) ){ goto $label$14 }
	if ( (*($1 + [32]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [64])))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($1 + [40])))
	$4 = *($1 + [8])
	if ( $4 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $6 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$6 = ($global$0 - [48])
	$global$0 = $6
	*($6 + [40]) = [0]
	*($6 + [32]) = (int_64)0
	$1 = CALL $62(($6 + [16]), $1)
	CALL $1($1, [0], ($6 + [32]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$1
	CALL eosio_assert(((int_32)(*($6 + [36]) - *($6 + [32])) == (int_32)[144]), [8534])
	$1 = *($6 + [32])
	if ( ((((int_32)(*($6 + [36]) - $1) / (int_32)[12]) + [-2]) <= [3]) ){ goto $label$2 }
	$7 = [2]
	$8 = ($6 + [8])
	$9 = ($3 + [4])
	
.LOOP $label$3:
	$10 = CALL $73(($1 + ((int_32)$7 * (int_32)[12])), [0], [10])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8534])
	*($8) = $2
	*($6) = $10
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8593])
	$10 = (uint_64)*($8) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$10 = $11
	$12 = [1]
	$13 = $1
	$1 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$10 = $11
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$12 = ((int_32)$1 < (int_32)[6])
	$13 = ($1 + [1])
	$1 = $13
	if ( $12 ){ goto $label$8 }
	$12 = [1]
	$1 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$12 = [0]
	
.LABEL $label$4
	CALL eosio_assert($12, [8642])
	$1 = *($9)
	if ( ((uint_32)$1 >= (uint_32)*(($3 + [8]))) ){ goto $label$10 }
	*($1) = *($6)
	*(($1 + [8])) = *($8)
	*($9) = (*($9) + [16])
	goto $label$9 
	
.LABEL $label$10
	CALL $16($3, $6)
	
.LABEL $label$9
	$1 = *($6 + [32])
	$7 = ($7 + [1])
	if ( ($7 <= (((int_32)(*($6 + [36]) - $1) / (int_32)[12]) + [-2])) ){ goto $label$3 }
	
.LABEL $label$2
	CALL $64($4, ($1 + [120]))
	CALL $64($5, (*($6 + [32]) + [132]))
	$1 = [1]
	$12 = *($4)
	$13 = CALL $89([8547])
	if ( ((int_32)$13 != (int_32)( *($4 + [4]) ? uint_32($12 >> [1]) : ($12 & [1]) )) ){ goto $label$11 }
	$1 = ((int_32)CALL $70($4, [0], [-1], [8547], $13) != (int_32)[0])
	
.LABEL $label$11
	CALL eosio_assert($1, [8548])
	$1 = *($4)
	CALL eosio_assert(((int_32)( *(($4 + [4])) ? uint_32($1 >> [1]) : ($1 & [1]) ) == (int_32)[16]), [8561])
	$13 = *($6 + [32])
	if ( ($13 == 0) ){ goto $label$12 }
	$12 = *($6 + [36])
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = ($12 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($12 + [-4])))
	
.LABEL $label$16
	$12 = $1
	if ( ((int_32)$13 != (int_32)$1) ){ goto $label$15 }
	$1 = *($6 + [32])
	goto $label$13 
	
.LABEL $label$14
	$1 = $13
	
.LABEL $label$13
	*($6 + [36]) = $13
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($6 + [48])
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = $3
	*($0) = (int_64)0
	CALL eosio_assert([1], [8593])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8642])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)*($2 + [4])) ){ goto $label$6 }
	$4 = (int_64)0
	$7 = ($2 + [4])
	
.LOOP $label$7:
	CALL eosio_assert(((int_64)*(($5 + [8])) == (int_64)$3), [8964])
	$4 = ((int_64)$4 + (int_64)*($5))
	*($0) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9007])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [9026])
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)*($7)) ){ goto $label$7 }
	
.LABEL $label$6
}

void .FUNC $4 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [304])
	$global$0 = $4
	*($4 + [272]) = $1
	*($4 + [256]) = [8192]
	*($4 + [260]) = CALL $89([8192])
	*($4 + [40]) = *($4 + [256])
	CALL require_auth(*(CALL $5(($4 + [264]), ($4 + [40]))))
	*($4 + [248]) = [0]
	*($4 + [240]) = (int_64)0
	*($4 + [232]) = [0]
	*($4 + [224]) = (int_64)0
	*($4 + [216]) = [0]
	*($4 + [208]) = (int_64)0
	$5 = *($2 + [8])
	$3 = CALL $62(($4 + [192]), $3)
	CALL $6($4, $3, $5, ($4 + [208]), ($4 + [240]), ($4 + [224]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($3 + [8]))
	$1 = *($4 + [272])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)(*($4 + [212]) - *($4 + [208])) == (int_32)[128]), [8214])
	CALL $7(($4 + [144]), $4, ($4 + [208]), $5)
	CALL eosio_assert(((int_64)*($4 + [152]) == (int_64)$5), [8662])
	CALL eosio_assert(((int_64)*($4 + [144]) == (int_64)*($2)), [8306])
	CALL eosio_assert(CALL $3($4, ($4 + [208])), [8323])
	*($4 + [184]) = CALL $8($0)
	*(($3 = ($4 + [176]))) = [0]
	*($4 + [160]) = (int_64)-1
	*($4 + [168]) = (int_64)0
	$5 = *($0)
	*($4 + [144]) = $5
	*($4 + [152]) = $5
	$2 = CALL db_find_i64($5, $5, (int_64)4229865212519383040, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $9(($4 + [144]), $2)
	CALL eosio_assert(((int_32)*($2 + [88]) == (int_32)($4 + [144])), [9135])
	CALL eosio_assert(((int_32)uint_32(*($2 + [68]) >> [31]) ^ (int_32)[1]), [8356])
	$5 = *($0)
	*($4 + [108]) = ($4 + [208])
	*($4 + [104]) = ($4 + [272])
	*($4 + [112]) = ($4 + [184])
	*($4 + [116]) = ($4 + [240])
	CALL eosio_assert([1], [9269])
	CALL $10(($4 + [144]), $2, $5, ($4 + [104]))
	goto $label$2 
	
.LABEL $label$3
	$1 = *($0)
	*($4 + [108]) = ($4 + [208])
	*($4 + [104]) = ($4 + [272])
	*($4 + [112]) = ($4 + [184])
	*($4 + [116]) = ($4 + [240])
	*($4 + [288]) = $1
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$3()), [9218])
	*($4 + [68]) = ($4 + [104])
	*($4 + [64]) = ($4 + [144])
	*($4 + [72]) = ($4 + [288])
	*(($2 = CALL _Znwj([104]))) = (int_64)0
	*($2 + [8 align=4]) = (int_64)0
	*($2 + [16]) = [0]
	*($2 + [32 align=4]) = (int_64)0
	*($2 + [40]) = [0]
	*($2 + [56 align=4]) = (int_64)0
	*($2 + [64]) = [0]
	*($2 + [72]) = (int_64)0
	*($2 + [80]) = (int_64)0
	*($2 + [88]) = ($4 + [144])
	CALL $11(($4 + [64]), $2)
	*($4 + [56]) = $2
	$5 = *($2)
	*($4 + [64]) = $5
	$6 = *($2 + [92])
	*($4 + [284]) = $6
	$7 = ($4 + [172])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($3)) ){ goto $label$5 }
	*($8 + [8]) = $5
	*($8 + [16]) = $6
	*($4 + [56]) = [0]
	*($8) = $2
	*($7) = ($8 + [24])
	$2 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( ($2 == 0) ){ goto $label$2 }
	goto $label$4 
	
.LABEL $label$5
	CALL $12(($4 + [168]), ($4 + [56]), ($4 + [64]), ($4 + [284]))
	$2 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$4
	if ( (*($2 + [56]) & [1]) ){ goto $label$10 }
	if ( (*($2 + [32]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($2 + [64])))
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($2 + [40])))
	$3 = *($2 + [8])
	if ( $3 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	*(($2 + [12])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$5 = *($0)
	*($4 + [64]) = [8374]
	*($4 + [68]) = CALL $89([8374])
	*($4 + [32]) = *($4 + [64])
	$1 = *(CALL $5(($4 + [104]), ($4 + [32])))
	*($4 + [88]) = [8192]
	*($4 + [92]) = CALL $89([8192])
	*($4 + [24]) = *($4 + [88])
	$2 = CALL $5(($4 + [96]), ($4 + [24]))
	*($4 + [64]) = [8381]
	*($4 + [68]) = CALL $89([8381])
	*($4 + [16]) = *($4 + [64])
	$9 = *(CALL $5(($4 + [104]), ($4 + [16])))
	$10 = *($0)
	$0 = *($4 + [224])
	$3 = ($0 & [1])
	*($4 + [48]) = ( *((($4 + [224]) + [8])) ? (($4 + [224]) | [1]) : $3 )
	*($4 + [52]) = ( *($4 + [228]) ? uint_32($0 >> [1]) : $3 )
	*($4 + [8]) = *($4 + [48])
	$0 = CALL $5(($4 + [56]), ($4 + [8]))
	*($4 + [64]) = $10
	*($4 + [112]) = $9
	*($4 + [72]) = *($0)
	*($4 + [80]) = *($4 + [272])
	*($4 + [104]) = *($2)
	*(($0 = CALL _Znwj([16]))) = $5
	*($0 + [8]) = $1
	*(($4 + [140])) = [0]
	$2 = ($0 + [16])
	*((($4 + [104]) + [24])) = $2
	*(($4 + [124])) = $2
	*($4 + [120]) = $0
	*($4 + [132 align=4]) = (int_64)0
	CALL $13(($4 + [132]), [24])
	$0 = *($4 + [132])
	$2 = (*(($4 + [136])) - $0)
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [8909])
	CALL memcpy($0, ($4 + [64]), [8])
	CALL eosio_assert(((int_32)($2 + [-8]) > (int_32)[7]), [8909])
	CALL memcpy(($0 + [8]), (($4 + [64]) + [8]), [8])
	CALL eosio_assert(((int_32)($2 + [-16]) > (int_32)[7]), [8909])
	CALL memcpy(($0 + [16]), (($4 + [64]) + [16]), [8])
	CALL $14(($4 + [288]), ($4 + [104]))
	$0 = *($4 + [288])
	CALL send_inline($0, (*($4 + [292]) - $0))
	$0 = *($4 + [288])
	if ( ($0 == 0) ){ goto $label$11 }
	*($4 + [292]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$11
	$0 = *($4 + [132])
	if ( ($0 == 0) ){ goto $label$12 }
	*(($4 + [136])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$12
	$0 = *($4 + [120])
	if ( ($0 == 0) ){ goto $label$13 }
	*(($4 + [124])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$13
	CALL $15(($4 + [168]))
	$0 = *($4 + [208])
	if ( ($0 == 0) ){ goto $label$14 }
	*($4 + [212]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$14
	if ( (*($4 + [224]) & [1]) ){ goto $label$17 }
	if ( (*($4 + [240]) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL _ZdlPv(*(($4 + [232])))
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($4 + [248])))
	$global$0 = ($4 + [304])
	return 
	
.LABEL $label$15
	$global$0 = ($4 + [304])
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8721])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8842])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8759])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8842])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $77($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = *(*($1) + [8])
	CALL eosio_assert([1], [8593])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8642])
	$3 = (uint_64)*(*($1) + [8]) >> (uint_64)(int_64)8
	if ( ((int_64)$3) == (int_64)5788738) ){ goto $label$9 }
	if ( ((int_64)$3 != (int_64)5459781) ){ goto $label$7 }
	CALL eosio_assert([1], [8593])
	$3 = (int_64)100000
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert([1], [8593])
	$3 = (int_64)10000000
	
.LABEL $label$8
	$4 = *($1)
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)$2), [8662])
	if ( ((int_64)*($4) > (int_64)$3) ){ goto $label$7 }
	$4 = *($1)
	CALL eosio_assert(((int_64)*(($4 + [24])) == (int_64)$2), [8662])
	if ( ((int_64)*($4 + [16]) > (int_64)$3) ){ goto $label$7 }
	$4 = *($1)
	CALL eosio_assert(((int_64)*(($4 + [40])) == (int_64)$2), [8662])
	if ( ((int_64)*($4 + [32]) > (int_64)$3) ){ goto $label$7 }
	$4 = *($1)
	CALL eosio_assert(((int_64)*(($4 + [56])) == (int_64)$2), [8662])
	if ( ((int_64)*($4 + [48]) > (int_64)$3) ){ goto $label$7 }
	$4 = *($1)
	CALL eosio_assert(((int_64)*(($4 + [72])) == (int_64)$2), [8662])
	if ( ((int_64)*($4 + [64]) > (int_64)$3) ){ goto $label$7 }
	$4 = *($1)
	CALL eosio_assert(((int_64)*(($4 + [88])) == (int_64)$2), [8662])
	if ( ((int_64)*($4 + [80]) > (int_64)$3) ){ goto $label$7 }
	$4 = *($1)
	CALL eosio_assert(((int_64)*(($4 + [104])) == (int_64)$2), [8662])
	if ( ((int_64)*($4 + [96]) <= (int_64)$3) ){ goto $label$6 }
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	$4 = *($1)
	CALL eosio_assert(((int_64)*(($4 + [120])) == (int_64)$2), [8662])
	return ((int_64)*($4 + [112]) <= (int_64)$3)
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$6 }
	$5 = uint_32($5 >> [1])
	$6 = ($0 + [1])
	$7 = ($6 + $5)
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = *($0 + [4])
	$6 = *($0 + [8])
	$7 = ($6 + $5)
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$7:
	if ( CALL $78(*($6)) ){ goto $label$4 }
	$6 = ($6 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$7 }
	$6 = $7
	$5 = [1]
	$8 = *($0)
	if ( (($8 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$8 }
	$5 = ($6 + [1])
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( (CALL $78(*($5)) == 0) ){ goto $label$10 }
	$5 = ($5 + [1])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($6) = *($5)
	$6 = ($6 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	$5 = [1]
	$8 = *($0)
	if ( ($8 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + $5)
	$5 = ($7 + uint_32($8 >> $5))
	goto $label$1 
	
.LABEL $label$2
	$7 = *($0 + [8])
	$5 = ($7 + *($0 + [4]))
	
.LABEL $label$1
	CALL $68($0, ($6 - $7), ($5 - $6))
	$6 = *($0)
	if ( ($6 & [1]) ){ goto $label$14 }
	$5 = ($0 + [1])
	$7 = uint_32($6 >> [1])
	if ( ($7 == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$5 = *($0 + [8])
	$7 = *($0 + [4])
	if ( $7 ){ goto $label$12 }
	
.LABEL $label$13
	$5 = ($3 + [-16])
	$global$0 = $5
	$6 = [0]
	*($5) = [0]
	$7 = [1]
	goto $label$11 
	
.LABEL $label$12
	$6 = [0]
	
.LOOP $label$15:
	$10 = *($5)
	$9 = $6
	$6 = ($9 + ((int_32)$10 == (int_32)[44]))
	$5 = ($5 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$15 }
	$7 = ($6 + [1])
	$5 = ($3 - ((($7 << [2]) + [15]) & [-16]))
	$global$0 = $5
	$8 = [0]
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	$3 = ($5 + [4])
	$9 = ($9 + ((int_32)$10 == (int_32)[44]))
	
.LOOP $label$16:
	$8 = (CALL $69($0, [44], $8) + [1])
	*($3) = $8
	$3 = ($3 + [4])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$16 }
	
.LABEL $label$11
	$11 = ($5 + ($6 << [2]))
	$12 = ($0 + [4])
	$10 = ($2 + [8])
	
.LOOP $label$17:
	if ( ($6 == 0) ){ goto $label$19 }
	$3 = *($5)
	$8 = ((*(($5 + [4])) + [-1]) - $3)
	goto $label$18 
	
.LABEL $label$19
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$21 }
	$8 = uint_32($3 >> [1])
	goto $label$20 
	
.LABEL $label$21
	$8 = *($12)
	
.LABEL $label$20
	$3 = *($11)
	$8 = ($8 - $3)
	
.LABEL $label$18
	$9 = CALL $63($4, $0, $3, $8, $0)
	$3 = ($2 + [4])
	$8 = *($3)
	if ( ((uint_32)$8 >= (uint_32)*($10)) ){ goto $label$23 }
	*($8) = *($4)
	$8 = ($4 + [8])
	*(($8 + [8])) = *($8)
	*($8) = [0]
	*($3) = (*($3) + [12])
	*($4) = (int_64)0
	$5 = ($5 + [4])
	$6 = ($6 + [-1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$17 }
	goto $label$22 
	
.LABEL $label$23
	CALL $2($2, $9)
	if ( ((*($4) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$24
	$5 = ($5 + [4])
	$6 = ($6 + [-1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$17 }
	
.LABEL $label$22
	$global$0 = ($4 + [16])
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $13($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8909])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8909])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $39(CALL $38($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [64])))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [40])))
	$4 = *($3 + [8])
	if ( $4 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($3 + [8])
	if ( ($4 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	*(($3 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [4])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$6 = int_32($7 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [4]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $77($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [4])))) = *($1)
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9186])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $92($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9209])
	CALL memcpy($4, $2, [8])
	*($4 + [12]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)0
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)0
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $18(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $95($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $10 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [9304])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9350])
	$6 = *($1)
	*($1) = *(*($3))
	$8 = *(*($3 + [4]))
	*((($7 = *($1 + [8])) + [8])) = *(($8 + [8]))
	*($7) = *($8)
	$8 = *(*($3 + [4]))
	*(($7 = *($1 + [8])) + [16]) = *($8 + [16])
	*(($7 + [24])) = *(($8 + [24]))
	$8 = *(*($3 + [4]))
	*(($7 = *($1 + [8])) + [32]) = *($8 + [32])
	*(($7 + [40])) = *(($8 + [40]))
	$8 = *(*($3 + [4]))
	*(($7 = *($1 + [8])) + [48]) = *($8 + [48])
	*(($7 + [56])) = *(($8 + [56]))
	$8 = *(*($3 + [4]))
	*(($7 = *($1 + [8])) + [64]) = *($8 + [64])
	*(($7 + [72])) = *(($8 + [72]))
	$8 = *(*($3 + [4]))
	*(($7 = *($1 + [8])) + [80]) = *($8 + [80])
	*(($7 + [88])) = *(($8 + [88]))
	$8 = *(*($3 + [4]))
	*(($7 = *($1 + [8])) + [96]) = *($8 + [96])
	*(($7 + [104])) = *(($8 + [104]))
	$8 = *(*($3 + [4]))
	*(($7 = *($1 + [8])) + [112]) = *($8 + [112])
	*(($7 + [120])) = *(($8 + [120]))
	*($1 + [48]) = CALL current_time()
	*($1 + [24]) = *(*($3 + [8]))
	$9 = ($1 + [32])
	CALL $64($9, *($3 + [12]))
	$10 = ($1 + [56])
	CALL $67($10, [8547])
	*($1 + [68]) = [-1]
	$11 = *(*(*($3 + [4])) + [8])
	CALL eosio_assert([1], [8593])
	$12 = ($1 + [68])
	$13 = ($1 + [24])
	$14 = ($1 + [48])
	$15 = (uint_64)$11 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$16 = (uint_64)$15 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$15 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$15 = $16
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$15 = $16
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$15 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8642])
	*(($1 + [80])) = $11
	*($1 + [72]) = (int_64)0
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9401])
	*($5 + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	$8 = ($1 + [8])
	*($5 + [36]) = $8
	*($5 + [32]) = $1
	*($5 + [40]) = $13
	*($5 + [44]) = $9
	*($5 + [48]) = $14
	*($5 + [52]) = $10
	*($5 + [56]) = $12
	$17 = ($1 + [72])
	*($5 + [60]) = $17
	CALL $46(($5 + [32]), ($5 + [8]))
	$7 = *($5 + [24])
	if ( ($7 <= [513]) ){ goto $label$7 }
	$3 = CALL $92($7)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$6
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $7)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $8
	*($5 + [40]) = $13
	*($5 + [44]) = $9
	*($5 + [48]) = $14
	*($5 + [52]) = $10
	*($5 + [56]) = $12
	*($5 + [60]) = $17
	*($5 + [32]) = $1
	CALL $47(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [92]), $2, $3, $7)
	if ( ($7 <= [513]) ){ goto $label$10 }
	CALL $95($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = ($1 + [8])
	$6 = *($0)
	$7 = *(*($4 + [4]))
	$8 = ($1 + [12])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($9) = *($7)
	*(($9 + [8])) = *(($7 + [8]))
	$7 = (*($8) + [16])
	*($8) = $7
	goto $label$1 
	
.LABEL $label$2
	CALL $45($5, $7)
	$7 = *($8)
	
.LABEL $label$1
	$9 = (*(*(($4 + [4]))) + [16])
	if ( ((int_32)$7 == (int_32)*(($1 + [16]))) ){ goto $label$4 }
	*($7) = *($9)
	*(($7 + [8])) = *(($9 + [8]))
	$7 = (*($8) + [16])
	*($8) = $7
	goto $label$3 
	
.LABEL $label$4
	CALL $45($5, $9)
	$7 = *($8)
	
.LABEL $label$3
	$9 = (*(*(($4 + [4]))) + [32])
	if ( ((int_32)$7 == (int_32)*(($1 + [16]))) ){ goto $label$6 }
	*($7) = *($9)
	*(($7 + [8])) = *(($9 + [8]))
	$7 = (*($8) + [16])
	*($8) = $7
	goto $label$5 
	
.LABEL $label$6
	CALL $45($5, $9)
	$7 = *($8)
	
.LABEL $label$5
	$9 = (*(*(($4 + [4]))) + [48])
	if ( ((int_32)$7 == (int_32)*(($1 + [16]))) ){ goto $label$8 }
	*($7) = *($9)
	*(($7 + [8])) = *(($9 + [8]))
	$7 = (*($8) + [16])
	*($8) = $7
	goto $label$7 
	
.LABEL $label$8
	CALL $45($5, $9)
	$7 = *($8)
	
.LABEL $label$7
	$9 = (*(*(($4 + [4]))) + [64])
	if ( ((int_32)$7 == (int_32)*(($1 + [16]))) ){ goto $label$10 }
	*($7) = *($9)
	*(($7 + [8])) = *(($9 + [8]))
	$7 = (*($8) + [16])
	*($8) = $7
	goto $label$9 
	
.LABEL $label$10
	CALL $45($5, $9)
	$7 = *($8)
	
.LABEL $label$9
	$9 = (*(*(($4 + [4]))) + [80])
	if ( ((int_32)$7 == (int_32)*(($1 + [16]))) ){ goto $label$12 }
	*($7) = *($9)
	*(($7 + [8])) = *(($9 + [8]))
	$7 = (*($8) + [16])
	*($8) = $7
	goto $label$11 
	
.LABEL $label$12
	CALL $45($5, $9)
	$7 = *($8)
	
.LABEL $label$11
	$9 = (*(*(($4 + [4]))) + [96])
	if ( ((int_32)$7 == (int_32)*(($1 + [16]))) ){ goto $label$14 }
	*($7) = *($9)
	*(($7 + [8])) = *(($9 + [8]))
	$7 = (*($8) + [16])
	*($8) = $7
	goto $label$13 
	
.LABEL $label$14
	CALL $45($5, $9)
	$7 = *($8)
	
.LABEL $label$13
	$9 = (*(*(($4 + [4]))) + [112])
	if ( ((int_32)$7 == (int_32)*(($1 + [16]))) ){ goto $label$16 }
	*($7) = *($9)
	*(($7 + [8])) = *(($9 + [8]))
	*($8) = (*($8) + [16])
	goto $label$15 
	
.LABEL $label$16
	CALL $45($5, $9)
	
.LABEL $label$15
	*($1 + [48]) = CALL current_time()
	*($1 + [24]) = *(*($4 + [8]))
	$9 = ($1 + [32])
	CALL $64($9, *($4 + [12]))
	$10 = ($1 + [56])
	CALL $67($10, [8547])
	*($1 + [68]) = [-1]
	$11 = *(*(*(($4 + [4]))) + [8])
	CALL eosio_assert([1], [8593])
	$12 = ($1 + [68])
	$13 = ($1 + [24])
	$14 = ($1 + [48])
	$15 = (uint_64)$11 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$16 = (uint_64)$15 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$15 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$15 = $16
	$4 = [1]
	$7 = $8
	$8 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$15 = $16
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$15 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$4 = ((int_32)$8 < (int_32)[6])
	$7 = ($8 + [1])
	$8 = $7
	if ( $4 ){ goto $label$21 }
	$4 = [1]
	$8 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$4 = [0]
	
.LABEL $label$17
	CALL eosio_assert($4, [8642])
	*(($1 + [80])) = $11
	*($1 + [72]) = (int_64)0
	*($3 + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	*($3 + [36]) = $5
	*($3 + [32]) = $1
	*($3 + [40]) = $13
	*($3 + [44]) = $9
	*($3 + [48]) = $14
	*($3 + [52]) = $10
	*($3 + [56]) = $12
	$7 = ($1 + [72])
	*($3 + [60]) = $7
	CALL $46(($3 + [32]), ($3 + [8]))
	$4 = *($3 + [24])
	if ( ($4 <= [513]) ){ goto $label$23 }
	$8 = CALL $92($4)
	goto $label$22 
	
.LABEL $label$23
	$8 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$22
	*($3 + [12]) = $8
	*($3 + [8]) = $8
	*($3 + [16]) = ($8 + $4)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $5
	*($3 + [32]) = $1
	*($3 + [40]) = $13
	*($3 + [44]) = $9
	*($3 + [48]) = $14
	*($3 + [52]) = $10
	*($3 + [56]) = $12
	*($3 + [60]) = $7
	CALL $47(($3 + [32]), ($3 + [24]))
	$15 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($6 + [8]), (int_64)4229865212519383040, *(*($0 + [8])), $15, $8, $4)
	if ( ($4 <= [513]) ){ goto $label$26 }
	CALL $95($8)
	if ( (uint_64)($15 <= *($6 + [16])) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	if ( ((uint_64)$15 >= (uint_64)*($6 + [16])) ){ goto $label$24 }
	
.LABEL $label$25
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$24
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $77($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $44(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $77($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $75 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $77($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [48])
	$global$0 = $1
	*(($1 + [32])) = [0]
	*($1 + [16]) = (int_64)-1
	$2 = *($0)
	*($1) = $2
	*($1 + [8]) = $2
	*($1 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($2, $2, (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $9($1, $0)
	
.LOOP $label$2:
	if ( ((int_32)*($0 + [68]) < (int_32)[0]) ){ goto $label$3 }
	if ( (uint_64)((int_64))(CALL current_time() - *($0 + [48])) <= (int_64)20001) ){ goto $label$3 }
	$3 = [0]
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [9460])
	CALL eosio_assert($4, [9494])
	$4 = CALL db_next_i64(*($0 + [92]), ($1 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$3 = CALL $9($1, $4)
	
.LABEL $label$4
	CALL $20($1, $0)
	$0 = $3
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([1], [9494])
	$3 = *($0 + [92])
	$0 = [0]
	$3 = CALL db_next_i64($3, ($1 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$0 = CALL $9($1, $3)
	
.LABEL $label$5
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	CALL $15(($1 + [24]))
	$global$0 = ($1 + [48])
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $95($0)
	
.LABEL $label$1
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), ($3 + [32]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *(($3 + [40]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), ($0 + [48]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $49(*($1), ($0 + [56]))
	CALL $49(*($1), ($0 + [68]))
	$global$0 = ($2 + [16])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9209])
	CALL memcpy(($3 + [32]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9209])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($3 + [40])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9209])
	CALL memcpy(($0 + [48]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	CALL $33(*($1), ($0 + [52]))
	CALL $33(*($1), ($0 + [64]))
	$global$0 = ($2 + [16])
}

void .FUNC $52 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$9 = ($global$0 - [80])
	$global$0 = $9
	$0 = *($0 + [4])
	$10 = *($0 + [4])
	$11 = (*($0) + int_32($10 >> [1]))
	$0 = *($0)
	if ( (($10 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($11) + $0))
	
.LABEL $label$1
	*($9 + [72]) = [0]
	*($9 + [64]) = (int_64)0
	$10 = (*($3 + [4]) - *($3))
	if ( ($10 == 0) ){ goto $label$6 }
	$12 = int_32($10 >> [4])
	if ( ((uint_32)$12 >= (uint_32)[268435456]) ){ goto $label$5 }
	$10 = CALL _Znwj($10)
	*(($9 + [72])) = ($10 + ($12 << [4]))
	*($9 + [64]) = $10
	*($9 + [68]) = $10
	$12 = *($3)
	$3 = (*(($3 + [4])) - $12)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($10, $12, $3)
	*($9 + [68]) = ($10 + $3)
	
.LABEL $label$6
	*(($10 = (($9 + [48]) + [8]))) = *(($5 + [8]))
	*($9 + [48]) = *($5)
	$3 = CALL $62(($9 + [32]), $7)
	$5 = CALL $62(($9 + [16]), $8)
	*(($9 + [8])) = *($10)
	*($9) = *($9 + [48])
	CALL void $11((int_32 $1), (int_64 $2), (int_64 ($9 + [64])), (int_32 $4), (int_32 $9), (int_32 $6), (int_32 $3), (int_32 $5), (int_32 $0))
	if ( (*($5) & [1]) ){ goto $label$8 }
	if ( (*($3) & [1]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$8
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$7
	CALL _ZdlPv(*($3 + [8]))
	$3 = *($9 + [64])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	CALL $77(($9 + [64]))
	
.LABEL $label$4
	$3 = *($9 + [64])
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($9 + [68]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$global$0 = ($9 + [80])
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $92($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9672])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $92($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $62(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $62(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $90(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9672])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $90(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = CALL $62($2, ($1 + [16]))
	$6 = *($1 + [28])
	$1 = *($0 + [4])
	$7 = *($1 + [4])
	$0 = (*($0) + int_32($7 >> [1]))
	$1 = *($1)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$7 = CALL $62(($2 + [16]), $5)
	CALL void $0((int_32 $4), (int_64 $3), (int_64 $7), (int_32 $6), (int_32 $1))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($5) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($5 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)-7119375207604682752) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-4992623624440512512) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)4229443000054317056) ){ goto $label$1 }
	*($3 + [44]) = [0]
	*($3 + [40]) = [1]
	*($3) = *($3 + [40])
	CALL $30($1, $1, $3)
	goto $label$1 
	
.LABEL $label$3
	*($3 + [28]) = [0]
	*($3 + [24]) = [2]
	*($3 + [16]) = *($3 + [24])
	CALL $31($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [36]) = [0]
	*($3 + [32]) = [3]
	*($3 + [8]) = *($3 + [32])
	CALL $32($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $80([0])
	$global$0 = ($3 + [48])
}

void .FUNC $28 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	CALL require_auth(*($0))
	CALL require_recipient($2)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $95($0)
	
.LABEL $label$1
}

void .FUNC $21 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_32 $16
	$5 = ($global$0 - [416])
	$global$0 = $5
	*($5 + [368]) = [8391]
	*($5 + [372]) = CALL $89([8391])
	*($5 + [112]) = *($5 + [368])
	CALL require_auth(*(CALL $5(($5 + [376]), ($5 + [112]))))
	*(($5 + [360])) = [0]
	*($5 + [344]) = (int_64)-1
	*($5 + [352]) = (int_64)0
	$6 = *($0)
	*($5 + [328]) = $6
	*($5 + [336]) = $6
	$7 = [0]
	$8 = CALL db_find_i64($6, $6, (int_64)4229865212519383040, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $9(($5 + [328]), $8)
	CALL eosio_assert(((int_32)*($7 + [88]) == (int_32)($5 + [328])), [9135])
	
.LABEL $label$1
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [8404])
	CALL eosio_assert(((int_64)*($7 + [24]) == (int_64)$2), [8411])
	CALL eosio_assert(((int_32)*($7 + [68]) == (int_32)[-1]), [8425])
	$9 = *($7 + [8])
	$10 = *($9 + [8])
	*($5 + [324]) = $4
	$11 = *((($4 << [2]) + [8448]))
	$9 = ($9 + ($4 << [4]))
	$6 = *($9)
	CALL __multi3(($5 + [96]), $6, (int_64)$6 >> (int_64)63), $11, (int_64)$11 >> (int_64)63))
	*((($5 + [304]) + [8])) = *(($9 + [8]))
	*($5 + [304]) = $6
	$6 = *((($5 + [96]) + [8]))
	$11 = *($5 + [96])
	CALL eosio_assert(( (uint_64)($11 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [8915])
	CALL eosio_assert(( ((uint_64)$11 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [8939])
	*($5 + [304]) = $11
	$6 = *($0)
	*($5 + [152]) = $3
	*($5 + [156]) = ($5 + [324])
	*($5 + [160]) = ($5 + [304])
	CALL eosio_assert($8, [9269])
	CALL $22(($5 + [328]), $7, $6, ($5 + [152]))
	if ( ((int_64)*($5 + [304]) < (int_64)1) ){ goto $label$7 }
	$6 = *($0)
	*($5 + [264]) = [8374]
	*($5 + [268]) = CALL $89([8374])
	*($5 + [88]) = *($5 + [264])
	$11 = *(CALL $5(($5 + [152]), ($5 + [88])))
	*($5 + [248]) = [8192]
	*($5 + [252]) = CALL $89([8192])
	*($5 + [80]) = *($5 + [248])
	$9 = CALL $5(($5 + [256]), ($5 + [80]))
	*($5 + [264]) = [8480]
	*($5 + [268]) = CALL $89([8480])
	*($5 + [72]) = *($5 + [264])
	$12 = *(CALL $5(($5 + [152]), ($5 + [72])))
	$13 = *($0)
	*((($5 + [232]) + [8])) = [0]
	*($5 + [232]) = (int_64)0
	$4 = CALL $89([8490])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$10 }
	*($5 + [232]) = ($4 << [1])
	$8 = (($5 + [232]) | [1])
	if ( $4 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$14 = (($4 + [16]) & [-16])
	$8 = CALL _Znwj($14)
	*($5 + [232]) = ($14 | [1])
	*($5 + [240]) = $8
	*($5 + [236]) = $4
	
.LABEL $label$9
	CALL memcpy($8, [8490], $4)
	
.LABEL $label$8
	*(($8 + $4)) = [0]
	*(($8 = (($5 + [264]) + [24]))) = [0]
	*((($5 + [152]) + [24])) = *((($5 + [304]) + [8]))
	$4 = (($5 + [232]) + [8])
	*(($5 + [192])) = *($4)
	*($4) = [0]
	*($5 + [160]) = $1
	*($5 + [152]) = $13
	*($5 + [272]) = $12
	*($5 + [280]) = (int_64)0
	*($5 + [168]) = *($5 + [304])
	*($5 + [184]) = *($5 + [232])
	*($5 + [232]) = (int_64)0
	*($5 + [264]) = *($9)
	*(($4 = CALL _Znwj([16]))) = $6
	*($4 + [8]) = $11
	*((($5 + [264]) + [36])) = [0]
	$9 = ($4 + [16])
	*($8) = $9
	*(($5 + [284])) = $9
	*($5 + [280]) = $4
	*($5 + [292 align=4]) = (int_64)0
	$4 = *($5 + [184])
	$8 = ( *((($5 + [152]) + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($8 + [32])
	$6 = (CASTING uint_64)(uint_32 $8)
	$8 = ($5 + [292])
	
.LOOP $label$11:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$11 }
	if ( ($4 == 0) ){ goto $label$13 }
	CALL $13($8, $4)
	$8 = *(($5 + [296]))
	$4 = *(($5 + [292]))
	goto $label$12 
	
.LABEL $label$13
	$8 = [0]
	$4 = [0]
	
.LABEL $label$12
	*($5 + [396]) = $4
	*($5 + [392]) = $4
	*($5 + [400]) = $8
	*($5 + [384]) = ($5 + [392])
	*($5 + [408]) = ($5 + [152])
	CALL $23(($5 + [408]), ($5 + [384]))
	CALL $14(($5 + [392]), ($5 + [264]))
	$4 = *($5 + [392])
	CALL send_inline($4, (*($5 + [396]) - $4))
	$4 = *($5 + [392])
	if ( ($4 == 0) ){ goto $label$14 }
	*($5 + [396]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$4 = *($5 + [292])
	if ( ($4 == 0) ){ goto $label$15 }
	*(($5 + [296])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$4 = *($5 + [280])
	if ( ($4 == 0) ){ goto $label$16 }
	*(($5 + [284])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	if ( ((*(($5 + [184])) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($5 + [192])))
	
.LABEL $label$17
	if ( ((*($5 + [232]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($5 + [240])))
	
.LABEL $label$7
	$6 = *($0)
	*($5 + [264]) = [8374]
	*($5 + [268]) = CALL $89([8374])
	*($5 + [64]) = *($5 + [264])
	$11 = *(CALL $5(($5 + [152]), ($5 + [64])))
	$12 = *($0)
	*($5 + [264]) = [8510]
	*($5 + [268]) = CALL $89([8510])
	*($5 + [56]) = *($5 + [264])
	$13 = *(CALL $5(($5 + [152]), ($5 + [56])))
	$15 = CALL current_time()
	$8 = [0]
	*((($5 + [152]) + [24])) = [0]
	*($5 + [160]) = $1
	*($5 + [152]) = $15
	*($5 + [168]) = (int_64)0
	$4 = (*(($7 + [12])) - *($7 + [8]))
	if ( ($4 == 0) ){ goto $label$18 }
	$14 = int_32($4 >> [4])
	if ( ((uint_32)$14 >= (uint_32)[268435456]) ){ goto $label$5 }
	$4 = CALL _Znwj($4)
	*(($5 + [168])) = $4
	*(($9 = ($5 + [172]))) = $4
	*(($5 + [176])) = ($4 + ($14 << [4]))
	$16 = *(($7 + [8]))
	$14 = (*(($7 + [12])) - $16)
	if ( ((int_32)$14 < (int_32)[1]) ){ goto $label$18 }
	CALL memcpy($4, $16, $14)
	*($9) = (*($9) + $14)
	
.LABEL $label$18
	*(($5 + [192])) = *(($5 + [312]))
	*($5 + [180]) = *($5 + [324])
	*($5 + [184]) = *($5 + [304])
	*($5 + [200]) = $2
	CALL $62(($5 + [208]), ($7 + [32]))
	CALL $62(($5 + [220]), $3)
	*(($3 = (($5 + [264]) + [24]))) = [0]
	*($5 + [272]) = $13
	*($5 + [264]) = $12
	*($5 + [280]) = (int_64)0
	*(($4 = CALL _Znwj([16]))) = $6
	*($4 + [8]) = $11
	*(($5 + [300])) = [0]
	$9 = ($4 + [16])
	*($3) = $9
	*(($5 + [284])) = $9
	*($5 + [280]) = $4
	*($5 + [292 align=4]) = (int_64)0
	*($5 + [408]) = [0]
	*($5 + [232]) = ($5 + [408])
	*($5 + [392]) = ($5 + [152])
	CALL $24(($5 + [392]), ($5 + [232]))
	$4 = *($5 + [408])
	if ( ($4 == 0) ){ goto $label$20 }
	$3 = ($5 + [292])
	CALL $13($3, $4)
	$8 = *(($5 + [296]))
	$4 = *($3)
	goto $label$19 
	
.LABEL $label$20
	$4 = [0]
	
.LABEL $label$19
	*($5 + [396]) = $4
	*($5 + [392]) = $4
	*($5 + [400]) = $8
	*($5 + [408]) = ($5 + [392])
	*($5 + [232]) = ($5 + [152])
	CALL $25(($5 + [232]), ($5 + [408]))
	CALL $14(($5 + [392]), ($5 + [264]))
	$4 = *($5 + [392])
	CALL send_inline($4, (*($5 + [396]) - $4))
	$4 = *($5 + [392])
	if ( ($4 == 0) ){ goto $label$21 }
	*($5 + [396]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$21
	$4 = *($5 + [292])
	if ( ($4 == 0) ){ goto $label$22 }
	*(($5 + [296])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$22
	$4 = *($5 + [280])
	if ( ($4 == 0) ){ goto $label$23 }
	*(($5 + [284])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$23
	if ( (*($5 + [220]) & [1]) ){ goto $label$25 }
	if ( (*($5 + [208]) & [1]) ){ goto $label$24 }
	goto $label$4 
	
.LABEL $label$25
	CALL _ZdlPv(*(($5 + [228])))
	if ( ((*($5 + [208]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($5 + [216])))
	$4 = *($5 + [168])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	CALL $61(($5 + [232]))
	
.LABEL $label$5
	CALL $77((($5 + [152]) + [16]))
	
.LABEL $label$4
	$4 = *($5 + [168])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*(($5 + [172])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$4 = ($7 + [8])
	$7 = *($4)
	$6 = *($7)
	$2 = *($7 + [8])
	CALL eosio_assert(((int_64)*(($7 + [24])) == (int_64)$2), [8964])
	$6 = ((int_64)$6 + (int_64)*($7 + [16]))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9007])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9026])
	$7 = *($4)
	CALL eosio_assert(((int_64)$2 == (int_64)*(($7 + [40]))), [8964])
	$6 = ((int_64)*($7 + [32]) + (int_64)$6)
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9007])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9026])
	$7 = *($4)
	CALL eosio_assert(((int_64)$2 == (int_64)*(($7 + [56]))), [8964])
	$6 = ((int_64)*($7 + [48]) + (int_64)$6)
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9007])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9026])
	$7 = *($4)
	CALL eosio_assert(((int_64)$2 == (int_64)*(($7 + [72]))), [8964])
	$6 = ((int_64)*($7 + [64]) + (int_64)$6)
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9007])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9026])
	$7 = *($4)
	CALL eosio_assert(((int_64)$2 == (int_64)*(($7 + [88]))), [8964])
	$6 = ((int_64)*($7 + [80]) + (int_64)$6)
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9007])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9026])
	$7 = *($4)
	CALL eosio_assert(((int_64)$2 == (int_64)*(($7 + [104]))), [8964])
	$6 = ((int_64)*($7 + [96]) + (int_64)$6)
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9007])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9026])
	$4 = *($4)
	CALL eosio_assert(((int_64)$2 == (int_64)*(($4 + [120]))), [8964])
	$11 = ((int_64)*($4 + [112]) + (int_64)$6)
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [9007])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [9026])
	CALL eosio_assert(((int_64)$2 == (int_64)*($5 + [312])), [9044])
	$6 = (int_64)
	CALL eosio_assert(((int_64)$6($11 - *($5 + [304]))) > (int_64)-4611686018427387904), [9092])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9114])
	$12 = *($0)
	*($5 + [264]) = [8374]
	*($5 + [268]) = CALL $89([8374])
	*($5 + [48]) = *($5 + [264])
	$13 = *(CALL $5(($5 + [152]), ($5 + [48])))
	*($5 + [136]) = [8192]
	*($5 + [140]) = CALL $89([8192])
	*($5 + [40]) = *($5 + [136])
	$4 = CALL $5(($5 + [144]), ($5 + [40]))
	*($5 + [264]) = [8517]
	*($5 + [268]) = CALL $89([8517])
	*($5 + [32]) = *($5 + [264])
	$15 = *(CALL $5(($5 + [152]), ($5 + [32])))
	*((($5 + [152]) + [24])) = $2
	*((($5 + [152]) + [40])) = $2
	*($5 + [160]) = $1
	*($5 + [168]) = $6
	*($5 + [184]) = $11
	*($5 + [272]) = $15
	*($5 + [152]) = *($0)
	*($5 + [264]) = *($4)
	*(($4 = CALL _Znwj([16]))) = $12
	*($4 + [8]) = $13
	*(($5 + [300])) = [0]
	$7 = ($4 + [16])
	*((($5 + [264]) + [24])) = $7
	*(($5 + [284])) = $7
	*($5 + [280]) = $4
	*($5 + [292 align=4]) = (int_64)0
	CALL $13(($5 + [292]), [48])
	$4 = *(($5 + [296]))
	$7 = *($5 + [292])
	*($5 + [396]) = $7
	*($5 + [392]) = $7
	*($5 + [400]) = $4
	*($5 + [408]) = ($5 + [392])
	*($5 + [232]) = ($5 + [152])
	CALL $26(($5 + [232]), ($5 + [408]))
	CALL $14(($5 + [392]), ($5 + [264]))
	$4 = *($5 + [392])
	CALL send_inline($4, (*($5 + [396]) - $4))
	$4 = *($5 + [392])
	if ( ($4 == 0) ){ goto $label$26 }
	*($5 + [396]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$26
	$4 = *($5 + [292])
	if ( ($4 == 0) ){ goto $label$27 }
	*(($5 + [296])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$27
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$4 = *($5 + [280])
	if ( ($4 == 0) ){ goto $label$28 }
	*(($5 + [284])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$28
	if ( (int_64)($6 == 0) ){ goto $label$32 }
	$7 = [0]
	
.LOOP $label$34:
	*((($5 + [264]) + ($4 = $7))) = $6
	$7 = ($4 + [1])
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$33 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$34 }
	
.LABEL $label$33
	*(($5 + [160])) = [0]
	*($5 + [152]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$31 }
	*($5 + [152]) = ($7 << [1])
	$3 = (($5 + [152]) | [1])
	goto $label$30 
	
.LABEL $label$32
	*(($5 + [160])) = [0]
	*($5 + [152]) = (int_64)0
	*($5 + [152]) = [0]
	$7 = (($5 + [152]) | [1])
	goto $label$29 
	
.LABEL $label$31
	$8 = (($7 + [16]) & [-16])
	$3 = CALL _Znwj($8)
	*($5 + [152]) = ($8 | [1])
	*($5 + [160]) = $3
	*($5 + [156]) = $7
	
.LABEL $label$30
	$8 = ($4 + [1])
	$4 = [0]
	
.LOOP $label$35:
	*(($3 + $4)) = *((($5 + [264]) + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$35 }
	$7 = ($3 + $7)
	
.LABEL $label$29
	$4 = [0]
	*($7) = [0]
	$7 = ($7 & [1])
	$7 = *($5 + [152])
	$3 = CALL $89([8524])
	if ( ((int_32)$3 != (int_32)( *($5 + [156]) ? uint_32($7 >> [1]) : $7 )) ){ goto $label$36 }
	$4 = (CALL $70(($5 + [152]), [0], [-1], [8524], $3) == 0)
	$7 = (*($5 + [152]) & [1])
	
.LABEL $label$36
	if ( ($7 == 0) ){ goto $label$37 }
	CALL _ZdlPv(*($5 + [160]))
	
.LABEL $label$37
	if ( ($4 == 0) ){ goto $label$38 }
	$6 = *($0)
	*($5 + [264]) = [8374]
	*($5 + [268]) = CALL $89([8374])
	*($5 + [24]) = *($5 + [264])
	$10 = *(CALL $5(($5 + [152]), ($5 + [24])))
	*($5 + [120]) = [8192]
	*($5 + [124]) = CALL $89([8192])
	*($5 + [16]) = *($5 + [120])
	$4 = CALL $5(($5 + [128]), ($5 + [16]))
	*($5 + [264]) = [8528]
	*($5 + [268]) = CALL $89([8528])
	*($5 + [8]) = *($5 + [264])
	$12 = *(CALL $5(($5 + [152]), ($5 + [8])))
	*((($5 + [264]) + [24])) = $2
	*($5 + [272]) = $1
	*($5 + [280]) = $11
	*($5 + [160]) = $12
	*($5 + [264]) = *($0)
	*($5 + [152]) = *($4)
	*(($4 = CALL _Znwj([16]))) = $6
	*($4 + [8]) = $10
	*(($5 + [188])) = [0]
	$7 = ($4 + [16])
	*((($5 + [152]) + [24])) = $7
	*(($5 + [172])) = $7
	*($5 + [168]) = $4
	*($5 + [180 align=4]) = (int_64)0
	CALL $13(($5 + [180]), [32])
	$4 = *((($5 + [152]) + [32]))
	$7 = *($5 + [180])
	*($5 + [396]) = $7
	*($5 + [392]) = $7
	*($5 + [400]) = $4
	*($5 + [408]) = ($5 + [392])
	*($5 + [232]) = ($5 + [264])
	CALL $27(($5 + [232]), ($5 + [408]))
	CALL $14(($5 + [392]), ($5 + [152]))
	$4 = *($5 + [392])
	CALL send_inline($4, (*($5 + [396]) - $4))
	$4 = *($5 + [392])
	if ( ($4 == 0) ){ goto $label$39 }
	*($5 + [396]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$39
	$4 = *($5 + [180])
	if ( ($4 == 0) ){ goto $label$40 }
	*(($5 + [184])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$40
	$4 = *($5 + [168])
	if ( ($4 == 0) ){ goto $label$38 }
	*(($5 + [172])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$38
	CALL $19($0)
	CALL $15(($5 + [352]))
	$global$0 = ($5 + [416])
	(unreachable)
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [9524])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9569])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9619])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [64])))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [40])))
	$8 = *($3 + [8])
	if ( $8 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$8 = *($3 + [8])
	if ( ($8 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	*(($3 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$15:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$16 }
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($5 + [64])))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($5 + [40])))
	$8 = *($5 + [8])
	if ( $8 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$8 = *($5 + [8])
	if ( ($8 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	*(($5 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$17
	CALL _ZdlPv($5)
	
.LABEL $label$16
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$15 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [92]))
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $49(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [9304])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9350])
	$5 = *($1)
	*($1 + [48]) = CALL current_time()
	$6 = ($1 + [56])
	CALL $64($6, *($3))
	*($1 + [68]) = *(*($3 + [4]))
	$3 = *($3 + [8])
	*(($1 + [80])) = *(($3 + [8]))
	*($1 + [72]) = *($3)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9401])
	*(($3 = $4) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	$7 = ($1 + [8])
	*($3 + [36]) = $7
	*($3 + [32]) = $1
	$8 = ($1 + [24])
	*($3 + [40]) = $8
	$9 = ($1 + [32])
	*($3 + [44]) = $9
	$10 = ($1 + [48])
	*($3 + [48]) = $10
	*($3 + [52]) = $6
	$11 = ($1 + [68])
	*($3 + [56]) = $11
	$12 = ($1 + [72])
	*($3 + [60]) = $12
	CALL $46(($3 + [32]), ($3 + [8]))
	$13 = *($3 + [24])
	if ( ($13 <= [513]) ){ goto $label$2 }
	$4 = CALL $92($13)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($13 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $13)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $7
	*($3 + [40]) = $8
	*($3 + [44]) = $9
	*($3 + [48]) = $10
	*($3 + [52]) = $6
	*($3 + [56]) = $11
	*($3 + [60]) = $12
	*($3 + [32]) = $1
	CALL $47(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [92]), $2, $4, $13)
	if ( ((uint_32)$13 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $95($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8909])
	CALL memcpy(*($0 + [4]), ($4 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $48(*($1), ($4 + [16]))
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8909])
	CALL memcpy(*($0 + [4]), ($4 + [28]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	*($2 + [8]) = $4
	CALL $50(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$1 = (*($2) + [16])
	*(($2 = *($1))) = $1
	$4 = *($0 + [16])
	$0 = *($0)
	$3 = *(($0 + [20]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	$1 = (($5 & [-16]) + $1)
	
.LABEL $label$2
	$1 = ($1 + [28])
	*($2) = $1
	$3 = *($0 + [56])
	$6 = (CASTING uint_64)(uint_32 ( *(($0 + [60])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *(($0 + [56]))
	$3 = ( *(($0 + [60])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$3 = *($0 + [68])
	$6 = (CASTING uint_64)(uint_32 ( *(($0 + [72])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *(($0 + [68]))
	$0 = ( *(($0 + [72])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	*($2) = ($0 + $1)
	
.LABEL $label$6
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), ($0 + [32]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *(($0 + [40]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [8909])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $87(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $65($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $89($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $65($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $65($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $61 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $89 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $88 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $87 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_64 .FUNC $86 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $83($3, (int_64)0)
	$4 = CALL $85($3, $2, [1], (int_64)-9223372036854775808)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

int_64 .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $84($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $79()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $84($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18097]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $83($0, (int_64)0)
	*(CALL $79()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $84($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $84($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $84($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $84($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18097])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18097]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18097]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $84($0)
	$5 = *(($6 + [18097]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $84($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18097]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8205]))
	$8 = (int_64)0
	$5 = *(($6 + [18097]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18097]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $84($0)
	$5 = *(($6 + [18097]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $84($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18097]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $83($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18097]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18097]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $84($0) + [18097]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $79()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $79()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $79()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $84 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $82($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $83 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $82 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $81($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $81 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $80 (int_32 $0)
{
}

void .FUNC $72 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $74($1, $0, [8826])
	CALL $76()
	(unreachable)
}

int_64 .FUNC $73 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $89([8368])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8368], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $79())
	*(CALL $79()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $86($4, ($3 + [12]), $2)
	$0 = CALL $79()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $71($3)
	
.LABEL $label$1
	CALL $72($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $88(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $71 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $74($1, $0, [8894])
	CALL $75()
	(unreachable)
}

void .FUNC $76 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $77 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $89($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $65($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8909])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8909])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9209])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9209])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $41(*($1), ($4 + [16]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9209])
	CALL memcpy(($4 + [28]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	*($2 + [8]) = $4
	CALL $51(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$global$0 = $2
	*($2 + [64]) = (int_64)0
	*($2 + [72]) = [0]
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($5 == 0) ){ goto $label$5 }
	$6 = int_32($5 >> [4])
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$4 }
	$5 = CALL _Znwj($5)
	*(($2 + [72])) = ($5 + ($6 << [4]))
	*($2 + [64]) = $5
	*($2 + [68]) = $5
	$7 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $7)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $7, $6)
	*($2 + [68]) = ($5 + $6)
	
.LABEL $label$5
	*(($6 = (($2 + [48]) + [8]))) = *(($1 + [40]))
	*($2 + [48]) = *($1 + [32])
	$7 = *($1 + [28])
	$8 = *($1 + [48])
	$5 = CALL $62(($2 + [32]), ($1 + [52]))
	$1 = CALL $62(($2 + [16]), ($1 + [64]))
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [48])
	CALL $52($0, $4, $3, ($2 + [64]), $7, $2, $8, $5, $1)
	if ( (*($1) & [1]) ){ goto $label$7 }
	if ( (*($5) & [1]) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [8]))
	$1 = *($2 + [64])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $77(($2 + [64]))
	
.LABEL $label$3
	$1 = *($2 + [64])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*($2 + [68]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($2 + [80])
	(unreachable)
}

int_32 .FUNC $78 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC $79 ()
{
	return [9676]
}

int_32 .FUNC $32 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $92($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [64]) = ($3 + $2)
	*($4 + [56]) = $3
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [9209])
	CALL memcpy(($4 + [72]), $3, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [9209])
	CALL memcpy((($4 + [72]) + [8]), ($3 + [8]), [8])
	*($4 + [60]) = ($3 + [16])
	CALL $33(($4 + [56]), (($4 + [72]) + [16]))
	CALL eosio_assert(((uint_32)(*($4 + [64]) - *($4 + [60])) > (uint_32)[3]), [9209])
	CALL memcpy(($4 + [100]), *($4 + [60]), [4])
	*($4 + [60]) = (*($4 + [60]) + [4])
	*(($5 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [112]) + [8]))) = *($5)
	*($4 + [112]) = *($4 + [8])
	$5 = *($6)
	*((($4 + [128]) + [8])) = $5
	*((($4 + [24]) + [24])) = $5
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [24])
	CALL $35(($4 + [128]), ($4 + [72]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$7 }
	$3 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $95($3)
	$3 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [144])
	return $3
	
.LABEL $label$5
	$global$0 = ($4 + [144])
	return $3
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $43($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $66($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $66($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $61($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $30 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $92($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = (($4 + [64]) + [16]))) = (int_64)0
	*(($4 + [96])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [56]) = ($2 + $5)
	*($4 + [48]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9209])
	CALL memcpy(($4 + [64]), $2, [8])
	$6 = ($5 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [9209])
	CALL memcpy((($4 + [64]) + [8]), ($2 + [8]), [8])
	*($4 + [16]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [9209])
	CALL memcpy(($4 + [16]), ($2 + [16]), [8])
	*($3) = *($4 + [16])
	*($4 + [52]) = ($2 + [24])
	CALL $33(($4 + [48]), (($4 + [64]) + [24]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4)
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [16])
	CALL $34(($4 + [128]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $95($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return $2
}

int_32 .FUNC $31 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $92($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = (int_64)0
	*(($4 + [128])) = (int_64)0
	*(($4 + [144])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [176]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $36(($4 + [24]), ($4 + [176]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [160]) + [8]))) = *($3)
	*($4 + [160]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [176]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [160])
	*($4 + [40]) = $0
	*($4 + [176]) = $0
	*($4 + [180]) = ($4 + [152])
	*($4 + [176]) = ($4 + [24])
	CALL $37(($4 + [176]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$10 }
	$2 = [1]
	if ( (*($4 + [136]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $95($2)
	$2 = [1]
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [144])))
	if ( ((*($4 + [124]) & $2) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($4 + [124]) & $2) ){ goto $label$6 }
	
.LABEL $label$7
	$2 = *(($4 + [88]))
	if ( ($2 == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [132])))
	$2 = *(($4 + [88]))
	if ( ($2 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [92])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($4 + [192])
	return [1]
}