(data (i32.const 4) " i\00\00")
(data (i32.const 16) "owner\00")
(data (i32.const 32) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 96) "cannot create objects in table of another contract\00")
(data (i32.const 160) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 224) "invalid symbol name\00")
(data (i32.const 256) "write\00")
(data (i32.const 272) "cannot pass end iterator to modify\00")
(data (i32.const 320) "object passed to modify is not in multi_index\00")
(data (i32.const 368) "cannot modify objects in table of another contract\00")
(data (i32.const 432) "updater cannot change primary key when modifying an object\00")
(data (i32.const 496) "next primary key in table is at autoincrement limit\00")
(data (i32.const 560) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 624) "cannot decrement iterator at beginning of table\00")
(data (i32.const 672) "error reading iterator\00")
(data (i32.const 704) "read\00")
(data (i32.const 720) "not exist token symbol\00")
(data (i32.const 752) "no balance object found\00")
(data (i32.const 784) "overdrawn balance\00")
(data (i32.const 816) "need more token\00")
(data (i32.const 832) "[statke = 0][refund =0]stake token more then balance\00")
(data (i32.const 896) "[stake = 0]stake token more then balance\00")
(data (i32.const 944) "[refund =0]stake token more then balance\00")
(data (i32.const 992) "stake token more then balance\00")
(data (i32.const 1024) "attempt to add asset with different symbol\00")
(data (i32.const 1072) "addition underflow\00")
(data (i32.const 1104) "addition overflow\00")
(data (i32.const 1136) "get\00")
(data (i32.const 1152) "cannot increment end iterator\00")
(data (i32.const 1184) "gu3diojrg4ge\00")
(data (i32.const 1200) "gyztmmrugage\00")
(data (i32.const 1216) "haytsobzgege\00")
(data (i32.const 1232) "haydamrxgige\00")
(data (i32.const 1248) "haydcmrwgyge\00")
(data (i32.const 1264) "kdjc25x4zlbe\00")
(data (i32.const 1280) "not exist stake token!\00")
(data (i32.const 1312) "nothing balance staking\00")
(data (i32.const 1344) "attempt to subtract asset with different symbol\00")
(data (i32.const 1392) "subtraction underflow\00")
(data (i32.const 1424) "subtraction overflow\00")
(data (i32.const 1456) "active\00")
(data (i32.const 1472) "delayrefund\00")
(data (i32.const 1488) "logerase\00")
(data (i32.const 1504) "resetpayout\00")
(data (i32.const 1520) "not exist refund !\00")
(data (i32.const 1552) "not exist account\00")
(data (i32.const 1584) "transfer\00")
(data (i32.const 1600) "svn divded\00")
(data (i32.const 1616) "eosio.token\00")
(data (i32.const 1632) "eos divded\00")
(data (i32.const 1648) "not exist log\00")
(data (i32.const 1664) "cannot pass end iterator to erase\00")
(data (i32.const 1712) "object passed to erase is not in multi_index\00")
(data (i32.const 1760) "cannot erase objects in table of another contract\00")
(data (i32.const 1824) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1888) "onerror\00")
(data (i32.const 1904) "eosio\00")
(data (i32.const 1920) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 1984) "eoseventoken\00")
(data (i32.const 2000) "eosevendice1\00")
(data (i32.const 2016) "eosevenlette\00")
(data (i32.const 10432) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$10 (param i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$13 (param i32 i32)))
(import "env" "memcpy" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$17 (param i64)))
(import "env" "require_auth2" (func $fimport$18 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$19 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$20 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN5eosio13stakecontract8settokenEyNS_5assetE" (func $5))
(export "_ZN5eosio13stakecontract7stakingEyNS_5assetE" (func $13))
(export "_ZN5eosio13stakecontract12resetdropvalEy" (func $30))
(export "_ZN5eosio13stakecontract8resetvalEv" (func $32))
(export "_ZN5eosio13stakecontract9unstakingEyNS_5assetE" (func $39))
(export "_ZN5eosio13stakecontract11setsnapshotENS_5assetES1_" (func $57))
(export "_ZN5eosio13stakecontract11delayrefundEyNS_5assetE" (func $66))
(export "_ZN5eosio13stakecontract5claimEy" (func $68))
(export "_ZN5eosio13stakecontract8logeraseEm" (func $71))
(export "_ZN5eosio13stakecontract11forcerefundEyNS_5assetE" (func $73))
(export "apply" (func $75))
(export "malloc" (func $84))
(export "free" (func $87))
(export "memcmp" (func $92))
(export "strlen" (func $93))
(table $0 11 11 anyfunc)
(elem (i32.const 0) $94 $5 $73 $30 $39 $32 $57 $68 $66 $71 $13)



void .FUNC $94 ()
{
	(unreachable)
}

void .FUNC $90 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $91 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	$3 = *($1)
	CALL eosio_assert([1], [160])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [224])
	*(($1 + [32])) = (int_64)1397703940
	*($1 + [24]) = (int_64)0
	CALL eosio_assert([1], [160])
	$4 = (int_64)5133907
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [224])
	*(($1 + [48])) = (int_64)1314280196
	*($1 + [40]) = (int_64)0
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [432])
	$6 = $8
	$5 = ($6 + [-64])
	*([0] + [4]) = $5
	*($7 + [4]) = $5
	*($7) = $5
	*($7 + [8]) = ($6 + [-8])
	CALL $19($7, $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [256])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [256])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [256])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [256])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [256])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [256])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $88($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $91($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $89($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $88(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $88([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $43(($8 + [28]), [24])
	$2 = *($8 + [28])
	$1 = (*($2) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [256])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [256])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [256])
	CALL memcpy(($2 + [16]), ($4 + [16]), [8])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($4 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$1 = ([0] - $4)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $89($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $89($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $89($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	$8 = *($1 + [8])
	*(($9 = $10) + [16]) = (int_64)1398362884
	*($9 + [8]) = (int_64)0
	CALL eosio_assert([1], [160])
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	$8 = (int_64)5462355
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [224])
	$7 = *($3)
	*((($9 + [8]) + [12])) = *(($7 + [12]))
	*(($5 = (($9 + [8]) + [8]))) = *(($7 + [8]))
	*($9 + [8]) = *($7)
	*($9 + [12]) = *(($7 + [4]))
	$8 = CALL current_time()
	*(($1 + [40])) = *(*($3) + [8])
	*($9 + [24]) = ((uint_64)$8 / (uint_64)(int_64)1000000)
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3)))
	$6 = ($1 + [20])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)*(($1 + [24]))) ){ goto $label$7 }
	*($7) = *($9 + [8])
	*(($7 + [16])) = *((($9 + [8]) + [16]))
	*(($7 + [8])) = *($5)
	*($6) = (*($6) + [24])
	$7 = ($1 + [16])
	goto $label$6 
	
.LABEL $label$7
	$7 = ($1 + [16])
	CALL $54($7, ($9 + [8]))
	
.LABEL $label$6
	CALL eosio_assert(((int_64)$4 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)), [432])
	$3 = *($7)
	$6 = *(($1 + [20]))
	$5 = ($6 - $3)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[24]))
	$7 = [36]
	
.LOOP $label$8:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$10 }
	$7 = (((int_32)((uint_32)($5 + [-24]) / (uint_32)[24]) * (int_32)[20]) + $7)
	goto $label$9 
	
.LABEL $label$10
	$7 = ($7 + [-20])
	
.LABEL $label$9
	$6 = ($7 + [16])
	if ( ($6 <= [513]) ){ goto $label$12 }
	$7 = CALL malloc($6)
	goto $label$11 
	
.LABEL $label$12
	$7 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$11
	*($9 + [12]) = $7
	*($9 + [8]) = $7
	*($9 + [16]) = ($7 + $6)
	CALL $55(($9 + [8]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$13 }
	CALL free($7)
	
.LABEL $label$13
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$14 }
	*(($0 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [32])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$3 = *($0 + [4])
	*($1 + [8]) = *(*($3) + [8])
	*($1) = (int_64)0
	$2 = *($0)
	*(($8 = $9) + [16]) = (int_64)1398362884
	*($8 + [8]) = (int_64)0
	CALL eosio_assert([1], [160])
	$7 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [224])
	$6 = *($3)
	*(($5 = (($8 + [8]) + [8]))) = *(($6 + [8]))
	*($8 + [8]) = *($6)
	*($8 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*(($1 + [40])) = *(*($3) + [8])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3)))
	$3 = ($1 + [20])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)*(($1 + [24]))) ){ goto $label$7 }
	*($6) = *($8 + [8])
	*(($6 + [16])) = *((($8 + [8]) + [16]))
	*(($6 + [8])) = *($5)
	$5 = (*($3) + [24])
	*($3) = $5
	$6 = ($1 + [16])
	goto $label$6 
	
.LABEL $label$7
	$6 = ($1 + [16])
	CALL $54($6, ($8 + [8]))
	$5 = *($3)
	
.LABEL $label$6
	$3 = *($6)
	$4 = ($5 - $3)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$4 / (int_32)[24]))
	$6 = [36]
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$8 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$10 }
	$6 = (((int_32)((uint_32)($4 + [-24]) / (uint_32)[24]) * (int_32)[20]) + $6)
	goto $label$9 
	
.LABEL $label$10
	$6 = ($6 + [-20])
	
.LABEL $label$9
	$5 = ($6 + [16])
	if ( ($5 <= [513]) ){ goto $label$12 }
	$6 = CALL malloc($5)
	goto $label$11 
	
.LABEL $label$12
	$6 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$11
	*($8 + [12]) = $6
	*($8 + [8]) = $6
	*($8 + [16]) = ($6 + $5)
	CALL $55(($8 + [8]), $1)
	$7 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-5001342326447013888, *(*($0 + [8])), $7), $6, $5)
	if ( ($5 <= [513]) ){ goto $label$13 }
	CALL free($6)
	
.LABEL $label$13
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$14 }
	*(($2 + [16])) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$14
	*([0] + [4]) = ($8 + [32])
}

int_32 .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $89($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $89($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $89($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $89($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $89($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $89($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $89($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $89($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$6 = *($4 + [16])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($4), *($4 + [8]), (int_64)-8279445702455590912, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $10($4, $5)
	*($7 + [12]) = [0]
	*($7 + [8]) = $4
	$6 = (CASTING uint_64)(uint_32 (*(*(CALL $11(($7 + [8])) + [4])) + [1]))
	
.LABEL $label$2
	*(($4 + [16])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [496])
	*($1) = *(($4 + [16]))
	*($1 + [8]) = *(*($3 + [4]))
	$8 = $8
	$4 = ($8 + [-16])
	*([0] + [4]) = $4
	CALL eosio_assert([1], [256])
	CALL memcpy($4, $1, [4])
	CALL eosio_assert([1], [256])
	CALL memcpy(($8 + [-12]), ($1 + [8]), [8])
	$0 = *($1)
	$6 = (CASTING uint_64)(uint_32 $0)
	*($1 + [20]) = CALL db_store_i64(*($2 + [8]), (int_64)-8279445702455590912, *(*($0 + [8])), $6, $4, [12])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = (CASTING uint_64)(uint_32 ($0 + [1]))
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $48($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $43($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $49($4, $1)
	CALL $51(CALL $50(CALL $50($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $88(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $88([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $43(($8 + [28]), [4])
	$2 = *($8 + [28])
	CALL eosio_assert(((int_32)(*($2) - $2) > (int_32)[3]), [256])
	CALL memcpy($2, $4, [4])
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $89($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $89($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $89($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	$4 = *($0 + [4])
	$3 = *($4 + [4])
	$4 = *($4)
	$6 = *($4 + [16])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($4), *($4 + [8]), (int_64)-8279445702455590912, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $10($4, $5)
	*($7 + [12]) = [0]
	*($7 + [8]) = $4
	$6 = (CASTING uint_64)(uint_32 (*(*(CALL $11(($7 + [8])) + [4])) + [1]))
	
.LABEL $label$2
	*(($4 + [16])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [496])
	*($1) = *(($4 + [16]))
	*($1 + [8]) = *($3)
	$8 = $8
	$4 = ($8 + [-16])
	*([0] + [4]) = $4
	CALL eosio_assert([1], [256])
	CALL memcpy($4, $1, [4])
	CALL eosio_assert([1], [256])
	CALL memcpy(($8 + [-12]), ($1 + [8]), [8])
	$0 = *($1)
	$6 = (CASTING uint_64)(uint_32 $0)
	*($1 + [20]) = CALL db_store_i64(*($2 + [8]), (int_64)-8279445702455590912, *(*($0 + [8])), $6, $4, [12])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = (CASTING uint_64)(uint_32 ($0 + [1]))
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $88(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $89($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $89($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [672])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $88([40])
	$6 = CALL $12($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [28])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $7(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $89($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $88(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $89($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $89($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN5eosio13stakecontract8settokenEyNS_5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [96])
	*([0] + [4]) = $13
	$3 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [16]
	$11 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$10 > (uint_64)(int_64)4) ){ goto $label$6 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($3, $11)
	$10 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$5 = *(($0 + [64]))
	$7 = *(($0 + [68]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$7 }
	$8 = ($7 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$8:
	if ( ((int_64)(uint_64)*(*($8) + [8]) >> (uint_64)(int_64)8) == (int_64)$10) ){ goto $label$7 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$6 = ($0 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$12 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [32])
	if ( $8 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$8 = CALL db_find_i64(*(($0 + [40])), *(($0 + [48])), (int_64)-4157495357179166720, $10)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$10 }
	$8 = CALL $6($6, $8)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [32])
	
.LABEL $label$11
	CALL eosio_assert([1], [272])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [320])
	CALL eosio_assert(((int_64)*(($0 + [40])) == (int_64)CALL $fimport$2()), [368])
	*($8 + [16]) = $1
	$10 = *($8 + [8])
	CALL eosio_assert([1], [432])
	CALL eosio_assert([1], [256])
	CALL memcpy(($13 + [16]), $8, [8])
	CALL eosio_assert([1], [256])
	CALL memcpy((($13 + [16]) | [8]), ($8 + [8]), [8])
	CALL eosio_assert([1], [256])
	CALL memcpy((($13 + [16]) + [16]), ($8 + [16]), [8])
	CALL db_update_i64(*($8 + [28]), (int_64)0, ($13 + [16]), [24])
	$8 = ($0 + [56])
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( (uint_64)($10) <= *($8)) ){ goto $label$9 }
	*($8) = ((int_64)$10 + (int_64)1)
	goto $label$9 
	
.LABEL $label$10
	$12 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [40])) == (int_64)CALL $fimport$2()), [96])
	*(($4 = CALL $88([40])) + [8]) = (int_64)1398362884
	*($4) = (int_64)0
	CALL eosio_assert([1], [160])
	$5 = ($4 + [8])
	$10 = (int_64)5462355
	$8 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	
.LOOP $label$17:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$17 }
	
.LABEL $label$16
	$7 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$7 = [0]
	
.LABEL $label$13
	CALL eosio_assert($7, [224])
	*($4 + [24]) = $6
	*($4 + [16]) = $1
	*(($4 + [12])) = *(($2 + [12]))
	*(($8 = ($4 + [8]))) = *(($2 + [8]))
	*(($4 + [4])) = *(($2 + [4]))
	*($4) = *($2)
	CALL eosio_assert([1], [256])
	CALL memcpy(($13 + [16]), $4, [8])
	CALL eosio_assert([1], [256])
	CALL memcpy((($13 + [16]) | [8]), $5, [8])
	CALL eosio_assert([1], [256])
	CALL memcpy((($13 + [16]) + [16]), ($4 + [16]), [8])
	$10 = (uint_64)*($8) >> (uint_64)(int_64)8
	$7 = CALL db_store_i64(*(($0 + [48])), (int_64)-4157495357179166720, $12, $10), ($13 + [16]), [24]
	*($4 + [28]) = $7)
	$6 = ($0 + [56])
	if ( (uint_64)($10 <= *($6)) ){ goto $label$18 }
	*($6) = ((int_64)$10 + (int_64)1)
	
.LABEL $label$18
	*($13 + [64]) = $4
	$10 = (uint_64)*($8) >> (uint_64)(int_64)8
	*($13 + [16]) = $10)
	*($13 + [88]) = $7
	$6 = ($0 + [68])
	$8 = *($6)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [72]))) ){ goto $label$20 }
	*($8 + [8]) = $10
	*($8 + [16]) = $7
	*($13 + [64]) = [0]
	*($8) = $4
	*($6) = ($8 + [24])
	goto $label$19 
	
.LABEL $label$20
	CALL $7(($0 + [64]), ($13 + [64]), ($13 + [16]), ($13 + [88]))
	
.LABEL $label$19
	$8 = *($13 + [64])
	*($13 + [64]) = [0]
	if ( ($8 == 0) ){ goto $label$9 }
	CALL $89($8)
	
.LABEL $label$9
	*(($7 = (($13 + [16]) + [32]))) = [0]
	*($13 + [32]) = (int_64)-1
	*($13 + [40]) = (int_64)0
	$10 = *($0)
	*($13 + [16]) = $10
	*($13 + [24]) = $10
	*($13 + [12]) = $0
	*($13 + [8]) = ($13 + [16])
	*($13 + [88]) = $10
	CALL eosio_assert(((int_64)$10 == (int_64)CALL $fimport$2()), [96])
	*($13 + [68]) = ($13 + [8])
	*($13 + [64]) = ($13 + [16])
	*($13 + [72]) = ($13 + [88])
	*(($8 = CALL $88([32])) + [16]) = ($13 + [16])
	CALL $8(($13 + [64]), $8)
	*($13 + [80]) = $8
	$0 = *($8)
	*($13 + [64]) = $0
	$6 = *($8 + [20])
	*($13 + [60]) = $6
	$2 = ($13 + [44])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($7)) ){ goto $label$22 }
	*($4 + [16]) = $6
	*($4 + [8]) = (CASTING uint_64)(uint_32 $0)
	*($13 + [80]) = [0]
	*($4) = $8
	*($2) = ($4 + [24])
	goto $label$21 
	
.LABEL $label$22
	CALL $9(($13 + [40]), ($13 + [80]), ($13 + [64]), ($13 + [60]))
	
.LABEL $label$21
	$8 = *($13 + [80])
	*($13 + [80]) = [0]
	if ( ($8 == 0) ){ goto $label$23 }
	CALL $89($8)
	
.LABEL $label$23
	$7 = *($13 + [40])
	if ( ($7 == 0) ){ goto $label$24 }
	$0 = ($13 + [44])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$26 }
	
.LOOP $label$27:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$28 }
	CALL $89($4)
	
.LABEL $label$28
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$27 }
	$8 = *(($13 + [40]))
	goto $label$25 
	
.LABEL $label$26
	$8 = $7
	
.LABEL $label$25
	*($0) = $7
	CALL $89($8)
	
.LABEL $label$24
	*([0] + [4]) = ($13 + [96])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$0), [32])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157495357179166720, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $6($0, $5)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$0), [32])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $15 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [32])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $27($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [32])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [672])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $88([64])
	$4 = CALL $22($6)
	*($6 + [48]) = $0
	CALL $23(($8 + [32]), $4)
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8
	*($8 + [16]) = $5)
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $24(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [16])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [20])) = $7
	CALL $89($7)
	
.LABEL $label$10
	CALL $89($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [672])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $88([72])
	$4 = CALL $18($6)
	*($6 + [56]) = $0
	CALL $21(($8 + [32]), $4)
	*($6 + [60]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [60])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $20(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $89($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [672])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $88([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[3]), [704])
	CALL memcpy($5, $6, [4])
	CALL eosio_assert(((uint_32)($4 + [-4]) > (uint_32)[7]), [704])
	CALL memcpy(($5 + [8]), ($6 + [4]), [8])
	*($5 + [20]) = $1
	*($7 + [8]) = $5
	$6 = *($5)
	*($7 + [4]) = $6
	$1 = *($5 + [20])
	*($7) = $1
	$3 = ($0 + [28])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [16]) = $1
	*($4 + [8]) = (CASTING uint_64)(uint_32 $6)
	*($7 + [8]) = [0]
	*($4) = $5
	*($3) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $9(($0 + [24]), ($7 + [8]), ($7 + [4]), $7)
	
.LABEL $label$7
	$4 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $89($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
	return $5
}

int_32 .FUNC $11 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [20]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [624])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-8279445702455590912)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [560])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [560])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $10(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $12 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [160])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [224])
	*($0 + [24]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [704])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [704])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [704])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

void .FUNC _ZN5eosio13stakecontract7stakingEyNS_5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [208])
	*([0] + [4]) = $10
	$3 = *($2 + [8])
	$9 = (uint_64)$3 >> (uint_64)(int_64)8
	$7 = CALL $14(($0 + [40]), $9), [720])
	*((($10 + [80]) + [32])) = [0]
	*($10 + [88]) = $1
	*($10 + [96]) = (int_64)-1
	*($10 + [104]) = (int_64)0
	*($10 + [80]) = *($7 + [16])
	$4 = *($2)
	$6 = CALL $15(($10 + [80]), $9, [752])
	CALL eosio_assert(((int_64)*($6) >= (int_64)$4), [784])
	CALL eosio_assert(((int_64)$4 > (int_64)0), [816])
	*((($10 + [40]) + [32])) = [0]
	*($10 + [48]) = $1
	*($10 + [56]) = (int_64)-1
	*($10 + [64]) = (int_64)0
	$8 = *($0)
	*($10 + [40]) = $8
	$7 = [0]
	$5 = CALL db_find_i64($8, $1, (int_64)-5001342326447013888, $9)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $16(($10 + [40]), $5)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)($10 + [40])), [32])
	
.LABEL $label$1
	*(($10 + [32])) = [0]
	*($10 + [16]) = (int_64)-1
	*($10 + [24]) = (int_64)0
	$9 = *($0)
	*($10) = $9
	*($10 + [8]) = $9
	$5 = CALL db_find_i64($9, $9, (int_64)-4157660971118100480, $1)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	$2 = CALL $17($10, $5)
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)$10), [32])
	$1 = ((int_64)*($2 + [8]) + (int_64)$4)
	$9 = *($6)
	if ( ($7 == 0) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$9 >= (int_64)((int_64)*($7 + [32]) + (int_64)$1)), [992])
	goto $label$7 
	
.LABEL $label$9
	$9 = *($6)
	if ( ($7 == 0) ){ goto $label$6 }
	CALL eosio_assert(((int_64)$9 >= (int_64)((int_64)*($7 + [32]) + (int_64)$4)), [896])
	goto $label$5 
	
.LABEL $label$8
	CALL eosio_assert(((int_64)$9 >= (int_64)$1), [944])
	
.LABEL $label$7
	CALL eosio_assert([1], [272])
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)$10), [320])
	CALL eosio_assert(((int_64)*($10) == (int_64)CALL $fimport$2()), [368])
	$1 = *($2)
	CALL eosio_assert(((int_64)$3 == (int_64)*(($2 + [16]))), [1024])
	$9 = ((int_64)*($2 + [8]) + (int_64)$4)
	*($2 + [8]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [1072])
	CALL eosio_assert(((int_64)*($2 + [8]) < (int_64)4611686018427387904), [1104])
	CALL eosio_assert(((int_64)$1 == (int_64)*($2)), [432])
	*($10 + [200]) = (($10 + [128]) + [56])
	*($10 + [196]) = ($10 + [128])
	*($10 + [192]) = ($10 + [128])
	CALL $19(($10 + [192]), $2)
	CALL db_update_i64(*($2 + [60]), (int_64)0, ($10 + [128]), [56])
	$2 = ($10 + [16])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$4 }
	*($2) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$7 = *($10 + [24])
	if ( $7 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	CALL eosio_assert(((int_64)$9 >= (int_64)$4), [832])
	
.LABEL $label$5
	$9 = *($0)
	CALL eosio_assert(((int_64)*($10) == (int_64)CALL $fimport$2()), [96])
	$0 = CALL $88([72])
	$7 = CALL $18($0)
	*($0 + [56]) = $10
	*($0) = $1
	*(($0 + [20])) = *(($2 + [12]))
	*(($0 + [16])) = *(($2 + [8]))
	*(($0 + [12])) = *(($2 + [4]))
	*($0 + [8]) = *($2)
	*($10 + [200]) = (($10 + [128]) + [56])
	*($10 + [196]) = ($10 + [128])
	*($10 + [192]) = ($10 + [128])
	CALL $19(($10 + [192]), $7)
	$1 = *($0)
	$7 = CALL db_store_i64(*(($10 + [8])), (int_64)-4157660971118100480, $9, $1, ($10 + [128]), [56])
	*($0 + [60]) = $7
	$2 = ($10 + [16])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$10 }
	*($2) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($10 + [192]) = $0
	$1 = *($0)
	*($10 + [128]) = $1
	*($10 + [124]) = $7
	$6 = ($10 + [28])
	$2 = *($6)
	if ( ((uint_32)$2 >= (uint_32)*(($10 + [32]))) ){ goto $label$12 }
	*($2 + [8]) = $1
	*($2 + [16]) = $7
	*($10 + [192]) = [0]
	*($2) = $0
	*($6) = ($2 + [24])
	goto $label$11 
	
.LABEL $label$12
	CALL $20(($10 + [24]), ($10 + [192]), ($10 + [128]), ($10 + [124]))
	
.LABEL $label$11
	$2 = *($10 + [192])
	*($10 + [192]) = [0]
	if ( ($2 == 0) ){ goto $label$4 }
	CALL $89($2)
	
.LABEL $label$4
	$7 = *($10 + [24])
	if ( ($7 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($10 + [28])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$16 }
	CALL $89($0)
	
.LABEL $label$16
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$15 }
	$2 = *(($10 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$2 = $7
	
.LABEL $label$13
	*($6) = $7
	CALL $89($2)
	
.LABEL $label$2
	$6 = *($10 + [64])
	if ( ($6 == 0) ){ goto $label$17 }
	$5 = ($10 + [68])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$19 }
	
.LOOP $label$20:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$21 }
	$7 = *($0 + [16])
	if ( ($7 == 0) ){ goto $label$22 }
	*(($0 + [20])) = $7
	CALL $89($7)
	
.LABEL $label$22
	CALL $89($0)
	
.LABEL $label$21
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$20 }
	$2 = *(($10 + [64]))
	goto $label$18 
	
.LABEL $label$19
	$2 = $6
	
.LABEL $label$18
	*($5) = $6
	CALL $89($2)
	
.LABEL $label$17
	$7 = *($10 + [104])
	if ( ($7 == 0) ){ goto $label$23 }
	$6 = ($10 + [108])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$25 }
	
.LOOP $label$26:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$27 }
	CALL $89($0)
	
.LABEL $label$27
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$26 }
	$2 = *(($10 + [104]))
	goto $label$24 
	
.LABEL $label$25
	$2 = $7
	
.LABEL $label$24
	*($6) = $7
	CALL $89($2)
	
.LABEL $label$23
	*([0] + [4]) = ($10 + [208])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [288])
	*([0] + [4]) = $12
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1888]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$7 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1904]
	$10 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$9 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$9
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$10 == (int_64)$1), [1920])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1888]
	$10 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$9 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$17
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	$4 = CALL $76(($12 + [168]), $0)
	if ( ((int_64)$2 > (int_64)-4157658851551739905) ){ goto $label$31 }
	if ( ((int_64)$2 <= (int_64)-4994301853635182593) ){ goto $label$30 }
	if ( ((int_64)$2 == (int_64)-4994301853635182592) ){ goto $label$28 }
	if ( ((int_64)$2 == (int_64)-4417035511908191744) ){ goto $label$27 }
	if ( ((int_64)$2 != (int_64)-4417017204164263936) ){ goto $label$22 }
	*($12 + [148]) = [0]
	*($12 + [144]) = [1]
	*($12 + [24 align=4]) = *($12 + [144])
	CALL $77($4, ($12 + [24]))
	goto $label$22 
	
.LABEL $label$31
	if ( ((int_64)$2 <= (int_64)4921564679018381311) ){ goto $label$29 }
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$26 }
	if ( ((int_64)$2 == (int_64)5377983351528673792) ){ goto $label$25 }
	if ( ((int_64)$2 != (int_64)6714450730206679552) ){ goto $label$22 }
	*($12 + [108]) = [0]
	*($12 + [104]) = [2]
	*($12 + [64 align=4]) = *($12 + [104])
	CALL $77($4, ($12 + [64]))
	goto $label$22 
	
.LABEL $label$30
	if ( ((int_64)$2 == (int_64)-8279679232544604160) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)-4994302153684234992) ){ goto $label$22 }
	*($12 + [100]) = [0]
	*($12 + [96]) = [3]
	*($12 + [72 align=4]) = *($12 + [96])
	CALL $79($4, ($12 + [72]))
	goto $label$22 
	
.LABEL $label$29
	if ( ((int_64)$2 == (int_64)-4157658851551739904) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)-3102536757353119744) ){ goto $label$22 }
	*($12 + [156]) = [0]
	*($12 + [152]) = [4]
	*($12 + [16 align=4]) = *($12 + [152])
	CALL $77($4, ($12 + [16]))
	goto $label$22 
	
.LABEL $label$28
	*($12 + [92]) = [0]
	*($12 + [88]) = [5]
	*($12 + [80 align=4]) = *($12 + [88])
	CALL $81($4, ($12 + [80]))
	goto $label$22 
	
.LABEL $label$27
	*($12 + [140]) = [0]
	*($12 + [136]) = [6]
	*($12 + [32 align=4]) = *($12 + [136])
	CALL $78($4, ($12 + [32]))
	goto $label$22 
	
.LABEL $label$26
	*($12 + [124]) = [0]
	*($12 + [120]) = [7]
	*($12 + [48 align=4]) = *($12 + [120])
	CALL $79($4, ($12 + [48]))
	goto $label$22 
	
.LABEL $label$25
	*($12 + [132]) = [0]
	*($12 + [128]) = [8]
	*($12 + [40 align=4]) = *($12 + [128])
	CALL $77($4, ($12 + [40]))
	goto $label$22 
	
.LABEL $label$24
	*($12 + [116]) = [0]
	*($12 + [112]) = [9]
	*($12 + [56 align=4]) = *($12 + [112])
	CALL $80($4, ($12 + [56]))
	goto $label$22 
	
.LABEL $label$23
	*($12 + [164]) = [0]
	*($12 + [160]) = [10]
	*($12 + [8 align=4]) = *($12 + [160])
	CALL $77($4, ($12 + [8]))
	
.LABEL $label$22
	$5 = *(($4 + [104]))
	if ( ($5 == 0) ){ goto $label$32 }
	$6 = ($4 + [108])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$34 }
	
.LOOP $label$35:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$36 }
	CALL $89($3)
	
.LABEL $label$36
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$35 }
	$7 = *(($4 + [104]))
	goto $label$33 
	
.LABEL $label$34
	$7 = $5
	
.LABEL $label$33
	*($6) = $5
	CALL $89($7)
	
.LABEL $label$32
	$5 = *(($4 + [64]))
	if ( ($5 == 0) ){ goto $label$14 }
	$6 = ($4 + [68])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$38 }
	
.LOOP $label$39:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$40 }
	CALL $89($3)
	
.LABEL $label$40
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$39 }
	$7 = *(($4 + [64]))
	goto $label$37 
	
.LABEL $label$38
	$7 = $5
	
.LABEL $label$37
	*($6) = $5
	CALL $89($7)
	
.LABEL $label$14
	*([0] + [4]) = ($12 + [288])
}

int_32 .FUNC $18 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1314280196
	CALL eosio_assert([1], [160])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [224])
	*(($2 = ($0 + [32]))) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [160])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [224])
	*(($2 = ($0 + [48]))) = (int_64)1314280196
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [160])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [224])
	return $0
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [256])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [256])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [256])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [256])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [256])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [256])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [256])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $58 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [160])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [224])
	*(($2 = ($0 + [32]))) = (int_64)1314280196
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [160])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [224])
	*(($2 = ($0 + [48]))) = (int_64)1314280196
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [160])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [224])
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$21 = (*([0] + [4]) - [80])
	$20 = $21
	*([0] + [4]) = $21
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$19 = ($4 + [96])
	$8 = *($19)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$7 = ($4 + [80])
	$11 = CALL db_lowerbound_i64(*($7), *(($4 + [88])), (int_64)-4265651882472505344, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$2 }
	CALL $62($7, $11)
	*($20 + [4]) = [0]
	*($20) = $7
	$8 = ((int_64)*(*(CALL $63($20) + [4])) + (int_64)1)
	
.LABEL $label$2
	*(($4 + [96])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [496])
	*($1) = *($19)
	$19 = *($3 + [4])
	*($1 + [8]) = *($19)
	*(($1 + [16])) = *(($19 + [8]))
	$19 = *($3 + [8])
	*($1 + [24]) = *($19)
	*(($1 + [32])) = *(($19 + [8]))
	$13 = *($3 + [12])
	$19 = CALL db_lowerbound_i64(*($13), *($13 + [8]), (int_64)-4157660971118100480, (int_64)0)
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$3 }
	$19 = CALL $17($13, $19)
	$14 = ($1 + [48])
	$7 = ($1 + [40])
	
.LOOP $label$4:
	*(($11 = *(($3 + [16])))) = ((int_64)*($11) + (int_64)*($19 + [8]))
	*($14) = *(($19 + [16]))
	*($7) = ((int_64)*($7) + (int_64)*($19 + [8]))
	CALL eosio_assert([1], [1152])
	$19 = CALL db_next_i64(*($19 + [60]), $20)
	if ( ((int_32)$19 <= (int_32)[-1]) ){ goto $label$3 }
	$19 = CALL $17($13, $19)
	goto $label$4 
	
.LABEL $label$3
	*($1 + [4]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$9 = ($3 + [12])
	$5 = *($9)
	$19 = CALL db_lowerbound_i64(*($5), *($5 + [8]), (int_64)-4157660971118100480, (int_64)0)
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$5 }
	$19 = CALL $17($5, $19)
	$6 = ($20 + [56])
	$10 = ($3 + [16])
	$12 = ($3 + [4])
	
.LOOP $label$6:
	$11 = *($10)
	$13 = *($12)
	$14 = *(($3 + [8]))
	$7 = *($9)
	$15 = *($4)
	CALL eosio_assert([1], [272])
	CALL eosio_assert(((int_32)$7 == (int_32)*($19 + [56])), [320])
	CALL eosio_assert(((int_64)*($7) == (int_64)CALL $fimport$2()), [368])
	$16 = *($14)
	$17 = *($13)
	*(($19 + [32])) = *($13 + [8])
	$8 = *($19)
	$18 = ((int_64)*($19 + [8]) * (int_64)1000000)
	*($19 + [24]) = ((int_64)*($19 + [24]) + (int_64)((int_64)$17 * (int_64)((uint_64)$18 / (uint_64)*($11))))
	*(($19 + [48])) = *($14 + [8])
	*($19 + [40]) = ((int_64)*($19 + [40]) + (int_64)((int_64)$16 * (int_64)((uint_64)$18 / (uint_64)*($11))))
	CALL eosio_assert([1], [432])
	*((($20 + [64]) + [8])) = $6
	*($20 + [68]) = $20
	*($20 + [64]) = $20
	CALL $19(($20 + [64]), $19)
	CALL db_update_i64(*($19 + [60]), $15, $20, [56])
	if ( (uint_64)($8 <= *($7 + [16])) ){ goto $label$7 }
	*(($7 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	CALL eosio_assert([1], [1152])
	$19 = CALL db_next_i64(*(($19 + [60])), $20)
	if ( ((int_32)$19 <= (int_32)[-1]) ){ goto $label$5 }
	$19 = CALL $17($5, $19)
	goto $label$6 
	
.LABEL $label$5
	$7 = $21
	$19 = ($7 + [-64])
	*([0] + [4]) = $19
	*($20 + [4]) = $19
	*($20) = $19
	*($20 + [8]) = ($7 + [-8])
	CALL $64($20, $1)
	$8 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)-4265651882472505344, *(*($0 + [8])), $8, $19, [56])
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$8
	*([0] + [4]) = ($20 + [80])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [256])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [256])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [256])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $52(CALL $53($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [256])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [256])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $52($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [256])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [256])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [256])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [256])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [256])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[24])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$2 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $88(((int_32)$6 * (int_32)[24]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$3 * (int_32)[24])))) = *($1)
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($5 - $4)
	$5 = ($3 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	$6 = ($7 + ((int_32)$6 * (int_32)[24]))
	$3 = ($3 + [24])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $4, $1)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $3
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $89($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	$3 = *($1)
	CALL eosio_assert([1], [160])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [224])
	*(($1 + [32])) = (int_64)1397703940
	*($1 + [24]) = (int_64)0
	CALL eosio_assert([1], [160])
	$4 = (int_64)5133907
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [224])
	*(($1 + [48])) = (int_64)1314280196
	*($1 + [40]) = (int_64)0
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [432])
	$6 = $8
	$5 = ($6 + [-64])
	*([0] + [4]) = $5
	*($7 + [4]) = $5
	*($7) = $5
	*($7 + [8]) = ($6 + [-8])
	CALL $19($7, $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [256])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [256])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [256])
	CALL memcpy(*($4), ($7 + [8]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[3]), [256])
	CALL memcpy(*($4), ($7 + [16]), [4])
	$6 = (*($4) + [4])
	*($4) = $6
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC _ZN5eosio13stakecontract11setsnapshotENS_5assetES1_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [128])
	*([0] + [4]) = $12
	$11 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($11, $9)
	*($12 + [80]) = (int_64)0
	*(($12 + [72])) = [0]
	*($12 + [56]) = (int_64)-1
	*($12 + [64]) = (int_64)0
	$8 = *($0)
	*($12 + [40]) = $8
	*($12 + [48]) = $8
	*($12 + [4]) = $1
	*($12) = $0
	*($12 + [8]) = $2
	*($12 + [12]) = ($12 + [40])
	*($12 + [16]) = ($12 + [80])
	*($12 + [104]) = $8
	CALL eosio_assert(((int_64)*($0 + [80]) == (int_64)CALL $fimport$2()), [96])
	$3 = ($0 + [80])
	*($12 + [112]) = $3
	*($12 + [116]) = $12
	*($12 + [120]) = ($12 + [104])
	$6 = CALL $88([72])
	CALL $58($6)
	*($6 + [56]) = $3
	CALL $59(($12 + [112]), $6)
	*($12 + [96]) = $6
	$8 = *($6)
	*($12 + [112]) = $8
	$1 = *($6 + [60])
	*($12 + [92]) = $1
	$2 = ($0 + [108])
	$3 = *($2)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [112]))) ){ goto $label$8 }
	*($3 + [8]) = $8
	*($3 + [16]) = $1
	*($12 + [96]) = [0]
	*($3) = $6
	*($2) = ($3 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $60(($0 + [104]), ($12 + [96]), ($12 + [112]), ($12 + [92]))
	
.LABEL $label$7
	$6 = *($12 + [96])
	*($12 + [96]) = [0]
	if ( ($6 == 0) ){ goto $label$9 }
	CALL $89($6)
	
.LABEL $label$9
	$4 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1456]
	$9 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$15 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$3 = ($3 + [165])
	goto $label$13 
	
.LABEL $label$15
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$11
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$10 }
	$5 = *($0 + [32])
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1504]
	$11 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$21 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$17
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$11 = ((int_64)$10 | (int_64)$11)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$16 }
	*(($3 = ($12 + [24]))) = [0]
	*($12 + [8]) = $11
	*($12) = $5
	*($12 + [16]) = (int_64)0
	*(($6 = CALL $88([16]))) = $4
	*($6 + [8]) = $9
	*(($12 + [32])) = [0]
	$1 = ($6 + [16])
	*($3) = $1
	*(($12 + [20])) = $1
	*($12 + [16]) = $6
	*($12 + [28]) = [0]
	*(($12 + [36])) = [0]
	CALL $61(($12 + [112]), $12)
	$6 = *($12 + [112])
	CALL send_inline($6, (*($12 + [116]) - $6))
	$6 = *($12 + [112])
	if ( ($6 == 0) ){ goto $label$22 }
	*($12 + [116]) = $6
	CALL $89($6)
	
.LABEL $label$22
	$6 = *(($12 + [28]))
	if ( ($6 == 0) ){ goto $label$23 }
	*(($12 + [32])) = $6
	CALL $89($6)
	
.LABEL $label$23
	$6 = *($12 + [16])
	if ( ($6 == 0) ){ goto $label$24 }
	*(($12 + [20])) = $6
	CALL $89($6)
	
.LABEL $label$24
	$4 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1456]
	$9 = (int_64)0
	
.LOOP $label$25:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$30 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$3 = ($3 + [165])
	goto $label$28 
	
.LABEL $label$30
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$26
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$25 }
	$5 = *($0 + [24])
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1504]
	$11 = (int_64)0
	
.LOOP $label$31:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$36 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$3 = ($3 + [165])
	goto $label$34 
	
.LABEL $label$36
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$33
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$32
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$11 = ((int_64)$10 | (int_64)$11)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$31 }
	*($12 + [8]) = $11
	*($12) = $5
	*(($6 = CALL $88([16]))) = $4
	*($6 + [8]) = $9
	*(($12 + [32])) = [0]
	$3 = ($6 + [16])
	*(($12 + [24])) = $3
	*(($12 + [20])) = $3
	*($12 + [16]) = $6
	*($12 + [28]) = [0]
	*(($12 + [36])) = [0]
	CALL $61(($12 + [112]), $12)
	$6 = *($12 + [112])
	CALL send_inline($6, (*($12 + [116]) - $6))
	$6 = *($12 + [112])
	if ( ($6 == 0) ){ goto $label$37 }
	*($12 + [116]) = $6
	CALL $89($6)
	
.LABEL $label$37
	$6 = *(($12 + [28]))
	if ( ($6 == 0) ){ goto $label$38 }
	*(($12 + [32])) = $6
	CALL $89($6)
	
.LABEL $label$38
	$6 = *($12 + [16])
	if ( ($6 == 0) ){ goto $label$39 }
	*(($12 + [20])) = $6
	CALL $89($6)
	
.LABEL $label$39
	$0 = *($12 + [64])
	if ( ($0 == 0) ){ goto $label$40 }
	$1 = ($12 + [68])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$42 }
	
.LOOP $label$43:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$44 }
	CALL $89($3)
	
.LABEL $label$44
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$43 }
	$6 = *(($12 + [64]))
	goto $label$41 
	
.LABEL $label$42
	$6 = $0
	
.LABEL $label$41
	*($1) = $0
	CALL $89($6)
	
.LABEL $label$40
	*([0] + [4]) = ($12 + [128])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	$3 = *($1)
	CALL eosio_assert([1], [160])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [224])
	*(($1 + [32])) = (int_64)1397703940
	*($1 + [24]) = (int_64)0
	CALL eosio_assert([1], [160])
	$4 = (int_64)5133907
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [224])
	*(($1 + [48])) = (int_64)1314280196
	*($1 + [40]) = (int_64)0
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [432])
	$6 = $8
	$5 = ($6 + [-64])
	*([0] + [4]) = $5
	*($7 + [4]) = $5
	*($7) = $5
	*($7 + [8]) = ($6 + [-8])
	CALL $19($7, $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $88(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $89($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $89($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [160])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [224])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [704])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [704])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [256])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [256])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $56($0, ($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [256])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [256])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [704])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [704])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [704])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [704])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [704])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [704])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [704])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $88(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $89($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $89($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [704])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [704])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $25($0, ($1 + [16]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [704])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [704])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $22 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [160])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [224])
	*(($0 + [24])) = [0]
	*($0 + [16 align=4]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*(($2 = ($0 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [160])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [224])
	return $0
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1136])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = ((int_32)($2 - $7) / (int_32)[24])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $26($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ((int_32)$4 * (int_32)[24]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [704])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [704])
	CALL memcpy(($7 + [8]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[3]), [704])
	CALL memcpy(($7 + [16]), *($4), [4])
	$3 = (*($4) + [4])
	*($4) = $3
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $88(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $6
	CALL $89($6)
	
.LABEL $label$11
	CALL $89($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $89($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [672])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $88([32])
	$6 = CALL $28($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $29(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $89($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)((int_32)($7 - $6) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$8 = *($0)
	$2 = ((int_32)($6 - $8) / (int_32)[24])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$3 }
	$6 = [178956970]
	$7 = ((int_32)($7 - $8) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$7 = CALL $88(((int_32)$6 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [8]) = (int_64)1398362884
	CALL eosio_assert([1], [160])
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [224])
	$6 = (*($8) + [24])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $91($0)
	
.LABEL $label$2
	$3 = ($7 + ((int_32)$6 * (int_32)[24]))
	$2 = ($7 + ((int_32)$2 * (int_32)[24]))
	$7 = $2
	
.LOOP $label$13:
	*($7) = (int_64)0
	*($7 + [16]) = (int_64)0
	*($7 + [8]) = (int_64)1398362884
	CALL eosio_assert([1], [160])
	$5 = (uint_64)*($7 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$8 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$8 = [0]
	
.LABEL $label$14
	CALL eosio_assert($8, [224])
	$7 = ($7 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$13 }
	$6 = *($0)
	$4 = ($0 + [4])
	$8 = (*($4) - $6)
	$1 = ($2 + ((int_32)((int_32)$8 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$19 }
	CALL memcpy($1, $6, $8)
	$6 = *($0)
	
.LABEL $label$19
	*($0) = $1
	*($4) = $7
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $89($6)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [256])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [256])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [256])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [256])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $70(*($1), ($0 + [32]))
}

void .FUNC _ZN5eosio13stakecontract5claimEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [192])
	*([0] + [4]) = $22
	*((($22 + [56]) + [32])) = [0]
	*($22 + [72]) = (int_64)-1
	*($22 + [80]) = (int_64)0
	$16 = *($0)
	*($22 + [56]) = $16
	*($22 + [64]) = $16
	$10 = [0]
	$21 = CALL db_find_i64($16, $16, (int_64)-4157660971118100480, $1)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $17(($22 + [56]), $21)
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)($22 + [56])), [32])
	
.LABEL $label$1
	$2 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($2, [1552])
	$16 = *($10 + [24])
	$7 = ((int_64)$16 / (int_64)1000000)
	$6 = ((int_64)$16 % (int_64)1000000)
	$18 = *($10 + [40])
	$20 = ((int_64)$18 / (int_64)1000000)
	$4 = ((int_64)$18 % (int_64)1000000)
	$5 = *(($10 + [32]))
	if ( ((int_64)$18 < (int_64)1000001) ){ goto $label$3 }
	$3 = *(($10 + [48]))
	$8 = *($0)
	$16 = (int_64)0
	$15 = (int_64)59
	$21 = [1456]
	$17 = (int_64)0
	
.LOOP $label$4:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$9 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$11 = ($11 + [165])
	goto $label$7 
	
.LABEL $label$9
	$18 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$5
	$21 = ($21 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$4 }
	$9 = *($0 + [16])
	$16 = (int_64)0
	$15 = (int_64)59
	$21 = [1584]
	$19 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$16 > (uint_64)(int_64)7) ){ goto $label$15 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$11 = ($11 + [165])
	goto $label$13 
	
.LABEL $label$15
	$18 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$11
	$21 = ($21 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$19 = ((int_64)$18 | (int_64)$19)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$10 }
	*(($22 + [8])) = [0]
	*($22) = (int_64)0
	$21 = CALL strlen([1600])
	if ( ((uint_32)$21 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$21 >= (uint_32)[11]) ){ goto $label$18 }
	*($22) = ($21 << [1])
	$11 = ($22 | [1])
	if ( $21 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$12 = (($21 + [16]) & [-16])
	$11 = CALL $88($12)
	*($22) = ($12 | [1])
	*($22 + [8]) = $11
	*($22 + [4]) = $21
	
.LABEL $label$17
	CALL memcpy($11, [1600], $21)
	
.LABEL $label$16
	*(($11 + $21)) = [0]
	*((($22 + [96]) + [24])) = $3
	*(($11 = (($22 + [96]) + [36]))) = *($22 + [4])
	*($22 + [104]) = $1
	$21 = ($22 + [8])
	*(($22 + [136])) = *($21)
	*($22 + [96]) = *($0)
	*($22 + [112]) = $20
	*($22 + [128]) = *($22)
	*($22) = [0]
	*($22 + [4]) = [0]
	*($21) = [0]
	*($22 + [16]) = $9
	*($22 + [24]) = $19
	*($22 + [32]) = [0]
	*(($12 = ($22 + [36]))) = [0]
	*(($13 = (($22 + [16]) + [24]))) = [0]
	*(($21 = CALL $88([16]))) = $8
	*($21 + [8]) = $17
	*((($22 + [16]) + [32])) = [0]
	$14 = ($21 + [16])
	*($13) = $14
	*($12) = $14
	*($22 + [32]) = $21
	*($22 + [44]) = [0]
	*((($22 + [16]) + [36])) = [0]
	$21 = *($22 + [128])
	$11 = ( *($11) ? uint_32($21 >> [1]) : ($21 & [1]) )
	$21 = ($11 + [32])
	$16 = (CASTING uint_64)(uint_32 $11)
	$11 = ($22 + [44])
	
.LOOP $label$19:
	$21 = ($21 + [1])
	$16 = (uint_64)$16 >> (uint_64)(int_64)7
	if ( ((int_64)$16) != (int_64)0) ){ goto $label$19 }
	if ( ($21 == 0) ){ goto $label$21 }
	CALL $43($11, $21)
	$11 = *(($22 + [48]))
	$21 = *(($22 + [44]))
	goto $label$20 
	
.LABEL $label$21
	$11 = [0]
	$21 = [0]
	
.LABEL $label$20
	*($22 + [180]) = $21
	*($22 + [176]) = $21
	*($22 + [184]) = $11
	*($22 + [160]) = ($22 + [176])
	*($22 + [168]) = ($22 + [96])
	CALL $69(($22 + [168]), ($22 + [160]))
	CALL $61(($22 + [176]), ($22 + [16]))
	$21 = *($22 + [176])
	CALL send_inline($21, (*($22 + [180]) - $21))
	$21 = *($22 + [176])
	if ( ($21 == 0) ){ goto $label$22 }
	*($22 + [180]) = $21
	CALL $89($21)
	
.LABEL $label$22
	$21 = *($22 + [44])
	if ( ($21 == 0) ){ goto $label$23 }
	*(($22 + [48])) = $21
	CALL $89($21)
	
.LABEL $label$23
	$21 = *($22 + [32])
	if ( ($21 == 0) ){ goto $label$24 }
	*(($22 + [36])) = $21
	CALL $89($21)
	
.LABEL $label$24
	if ( ((*(($22 + [128])) & [1]) == 0) ){ goto $label$25 }
	CALL $89(*(($22 + [136])))
	
.LABEL $label$25
	if ( ((*($22) & [1]) == 0) ){ goto $label$26 }
	CALL $89(*(($22 + [8])))
	
.LABEL $label$26
	$18 = *($0)
	CALL eosio_assert($2, [272])
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)($22 + [56])), [320])
	CALL eosio_assert(((int_64)*($22 + [56]) == (int_64)CALL $fimport$2()), [368])
	*($10 + [40]) = $4
	$16 = *($10)
	CALL eosio_assert([1], [432])
	*($22 + [24]) = (($22 + [96]) + [56])
	*($22 + [20]) = ($22 + [96])
	*($22 + [16]) = ($22 + [96])
	CALL $19(($22 + [16]), $10)
	CALL db_update_i64(*($10 + [60]), $18, ($22 + [96]), [56])
	$21 = ($22 + [72])
	if ( (uint_64)($16 <= *($21)) ){ goto $label$27 }
	*($21) = ( (int_64)-2 ? ((int_64)$16 + (int_64)1) : ((uint_64)$16 > (uint_64)(int_64)-3) )
	
.LABEL $label$27
	$16 = *(($10 + [24]))
	
.LABEL $label$3
	if ( ((int_64)$16 < (int_64)1000001) ){ goto $label$28 }
	$4 = *($0)
	$16 = (int_64)0
	$15 = (int_64)59
	$21 = [1456]
	$17 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$34 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$11 = ($11 + [165])
	goto $label$32 
	
.LABEL $label$34
	$18 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$30
	$21 = ($21 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$29 }
	$16 = (int_64)0
	$15 = (int_64)59
	$21 = [1616]
	$19 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$16 > (uint_64)(int_64)10) ){ goto $label$40 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$11 = ($11 + [165])
	goto $label$38 
	
.LABEL $label$40
	$18 = (int_64)0
	if ( ((int_64)$16 == (int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$36
	$21 = ($21 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$19 = ((int_64)$18 | (int_64)$19)
	$16 = ((int_64)$16 + (int_64)1)
	if ( ((int_64)$16 != (int_64)13) ){ goto $label$35 }
	$16 = (int_64)0
	$15 = (int_64)59
	$21 = [1584]
	$20 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$16 > (uint_64)(int_64)7) ){ goto $label$46 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$11 = ($11 + [165])
	goto $label$44 
	
.LABEL $label$46
	$18 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$42
	$21 = ($21 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$20 = ((int_64)$18 | (int_64)$20)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$41 }
	*(($22 + [8])) = [0]
	*($22) = (int_64)0
	$21 = CALL strlen([1632])
	if ( ((uint_32)$21 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$21 >= (uint_32)[11]) ){ goto $label$49 }
	*($22) = ($21 << [1])
	$11 = ($22 | [1])
	if ( $21 ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	$12 = (($21 + [16]) & [-16])
	$11 = CALL $88($12)
	*($22) = ($12 | [1])
	*($22 + [8]) = $11
	*($22 + [4]) = $21
	
.LABEL $label$48
	CALL memcpy($11, [1632], $21)
	
.LABEL $label$47
	*(($11 + $21)) = [0]
	*((($22 + [96]) + [24])) = $5
	*(($11 = (($22 + [96]) + [36]))) = *($22 + [4])
	*($22 + [104]) = $1
	$21 = ($22 + [8])
	*(($22 + [136])) = *($21)
	*($22 + [96]) = *($0)
	*($22 + [112]) = $7
	*($22 + [128]) = *($22)
	*($22) = [0]
	*($22 + [4]) = [0]
	*($21) = [0]
	*($22 + [16]) = $19
	*($22 + [24]) = $20
	*(($21 = CALL $88([16]))) = $4
	*($21 + [8]) = $17
	*((($22 + [16]) + [32])) = [0]
	$12 = ($21 + [16])
	*((($22 + [16]) + [24])) = $12
	*(($22 + [36])) = $12
	*($22 + [32]) = $21
	*($22 + [44]) = [0]
	*((($22 + [16]) + [36])) = [0]
	$21 = *($22 + [128])
	$11 = ( *($11) ? uint_32($21 >> [1]) : ($21 & [1]) )
	$21 = ($11 + [32])
	$16 = (CASTING uint_64)(uint_32 $11)
	$11 = ($22 + [44])
	
.LOOP $label$50:
	$21 = ($21 + [1])
	$16 = (uint_64)$16 >> (uint_64)(int_64)7
	if ( ((int_64)$16) != (int_64)0) ){ goto $label$50 }
	if ( ($21 == 0) ){ goto $label$52 }
	CALL $43($11, $21)
	$11 = *(($22 + [48]))
	$21 = *(($22 + [44]))
	goto $label$51 
	
.LABEL $label$52
	$11 = [0]
	$21 = [0]
	
.LABEL $label$51
	*($22 + [180]) = $21
	*($22 + [176]) = $21
	*($22 + [184]) = $11
	*($22 + [160]) = ($22 + [176])
	*($22 + [168]) = ($22 + [96])
	CALL $69(($22 + [168]), ($22 + [160]))
	CALL $61(($22 + [176]), ($22 + [16]))
	$21 = *($22 + [176])
	CALL send_inline($21, (*($22 + [180]) - $21))
	$21 = *($22 + [176])
	if ( ($21 == 0) ){ goto $label$53 }
	*($22 + [180]) = $21
	CALL $89($21)
	
.LABEL $label$53
	$21 = *($22 + [44])
	if ( ($21 == 0) ){ goto $label$54 }
	*(($22 + [48])) = $21
	CALL $89($21)
	
.LABEL $label$54
	$21 = *($22 + [32])
	if ( ($21 == 0) ){ goto $label$55 }
	*(($22 + [36])) = $21
	CALL $89($21)
	
.LABEL $label$55
	if ( ((*(($22 + [128])) & [1]) == 0) ){ goto $label$56 }
	CALL $89(*(($22 + [136])))
	
.LABEL $label$56
	if ( ((*($22) & [1]) == 0) ){ goto $label$57 }
	CALL $89(*(($22 + [8])))
	
.LABEL $label$57
	$18 = *($0)
	CALL eosio_assert($2, [272])
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)($22 + [56])), [320])
	CALL eosio_assert(((int_64)*($22 + [56]) == (int_64)CALL $fimport$2()), [368])
	*($10 + [24]) = $6
	$16 = *($10)
	CALL eosio_assert([1], [432])
	*($22 + [24]) = (($22 + [96]) + [56])
	*($22 + [20]) = ($22 + [96])
	*($22 + [16]) = ($22 + [96])
	CALL $19(($22 + [16]), $10)
	CALL db_update_i64(*($10 + [60]), $18, ($22 + [96]), [56])
	$21 = ($22 + [72])
	if ( (uint_64)($16 <= *($21)) ){ goto $label$28 }
	*($21) = ( (int_64)-2 ? ((int_64)$16 + (int_64)1) : ((uint_64)$16 > (uint_64)(int_64)-3) )
	
.LABEL $label$28
	$10 = *($22 + [80])
	if ( ($10 == 0) ){ goto $label$58 }
	$0 = ($22 + [84])
	$21 = *($0)
	if ( ((int_32)$21 == (int_32)$10) ){ goto $label$60 }
	
.LOOP $label$61:
	$21 = ($21 + [-24])
	$11 = *($21)
	*($21) = [0]
	if ( ($11 == 0) ){ goto $label$62 }
	CALL $89($11)
	
.LABEL $label$62
	if ( ((int_32)$10 != (int_32)$21) ){ goto $label$61 }
	$21 = *(($22 + [80]))
	goto $label$59 
	
.LABEL $label$60
	$21 = $10
	
.LABEL $label$59
	*($0) = $10
	CALL $89($21)
	
.LABEL $label$58
	*([0] + [4]) = ($22 + [192])
	return (unreachable)
	
.LABEL $label$2
	CALL $90($22)
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [704])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [704])
	CALL memcpy(($1 + [4]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [704])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [704])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [704])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [704])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [704])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [704])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [256])
	CALL memcpy(*($0 + [4]), $1, [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [256])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [256])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [256])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [256])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [256])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [256])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [256])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [16])
	$16 = $17
	*([0] + [4]) = $17
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	$15 = *($1 + [8])
	$4 = (uint_64)$15 >> (uint_64)(int_64)8)
	$13 = *(*($3) + [4])
	if ( ((int_32)*(($13 + [20])) == (int_32)*($13 + [16])) ){ goto $label$1 }
	$12 = [0]
	$7 = ($1 + [40])
	$8 = ($1 + [32])
	$14 = [0]
	
.LOOP $label$2:
	if ( ((uint_32)(*(((*($13 + [16]) + $12) + [16])) + [30]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$3 }
	*($7) = *(((*(*(*($3) + [4]) + [16]) + $12) + [8]))
	*($8) = (int_64))(*($8) - *((*(*(*($3) + [4]) + [16]) + $12)))
	$5 = *(($1 + [16]))
	$9 = ($5 + $12)
	$10 = ($9 + [24])
	$11 = ($1 + [20])
	$13 = (*($11) - $10)
	$6 = ((int_32)$13 / (int_32)[24])
	if ( ($13 == 0) ){ goto $label$4 }
	CALL memmove($9, $10, $13)
	
.LABEL $label$4
	*($11) = (($5 + ((int_32)$6 * (int_32)[24])) + $12)
	
.LABEL $label$3
	$12 = ($12 + [24])
	$13 = *(*($3) + [4])
	$14 = ($14 + [1])
	if ( ($14 <= ((int_32)(*(($13 + [20])) - *($13 + [16])) / (int_32)[24])) ){ goto $label$2 }
	$15 = *(($1 + [8]))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)(uint_64)$15 >> (uint_64)(int_64)8)), [432])
	$3 = *($1 + [16])
	$13 = *(($1 + [20]))
	$14 = ($13 - $3)
	$15 = (CASTING uint_64)(uint_32 ((int_32)$14 / (int_32)[24]))
	$12 = [36]
	
.LOOP $label$5:
	$12 = ($12 + [1])
	$15 = (uint_64)$15 >> (uint_64)(int_64)7
	if ( ((int_64)$15) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)$13) ){ goto $label$7 }
	$12 = (((int_32)((uint_32)($14 + [-24]) / (uint_32)[24]) * (int_32)[20]) + $12)
	goto $label$6 
	
.LABEL $label$7
	$12 = ($12 + [-20])
	
.LABEL $label$6
	$13 = ($12 + [16])
	if ( ($13 <= [513]) ){ goto $label$9 }
	$12 = CALL malloc($13)
	goto $label$8 
	
.LABEL $label$9
	$12 = ($17 - (($13 + [15]) & [-16]))
	*([0] + [4]) = $12
	
.LABEL $label$8
	*($16 + [4]) = $12
	*($16) = $12
	*($16 + [8]) = ($12 + $13)
	CALL $55($16, $1)
	CALL db_update_i64(*($1 + [52]), $2, $12, $13)
	if ( ($13 <= [513]) ){ goto $label$10 }
	CALL free($12)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$11
	*([0] + [4]) = ($16 + [16])
}

void .FUNC _ZN5eosio13stakecontract11delayrefundEyNS_5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	$3 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1456]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$6 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($3, $9)
	$6 = [0]
	*(($11 + [56])) = [0]
	*($11 + [40]) = (int_64)-1
	*($11 + [48]) = (int_64)0
	$8 = *($0)
	*($11 + [24]) = $8
	*($11 + [32]) = $1
	$4 = CALL db_find_i64($8, $1, (int_64)-5001342326447013888, (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$4) <= (int_32)[-1]) ){ goto $label$8 }
	$6 = CALL $16(($11 + [24]), $4)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)($11 + [24])), [32])
	*($11 + [20]) = $6
	*($11 + [16]) = ($11 + [24])
	$4 = [1]
	goto $label$7 
	
.LABEL $label$8
	*($11 + [20]) = [0]
	*($11 + [16]) = ($11 + [24])
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [1520])
	$8 = *($0)
	*($11 + [8]) = ($11 + [16])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [272])
	CALL $67(($11 + [24]), $6, $8, ($11 + [8]))
	$2 = *($11 + [48])
	if ( ($2 == 0) ){ goto $label$9 }
	$5 = ($11 + [52])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	$0 = *($4 + [16])
	if ( ($0 == 0) ){ goto $label$14 }
	*(($4 + [20])) = $0
	CALL $89($0)
	
.LABEL $label$14
	CALL $89($4)
	
.LABEL $label$13
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$12 }
	$6 = *(($11 + [48]))
	goto $label$10 
	
.LABEL $label$11
	$6 = $2
	
.LABEL $label$10
	*($5) = $2
	CALL $89($6)
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [64])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $43($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [256])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [256])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $52(CALL $53($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $88(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $89($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $89($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [60]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [624])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-4265651882472505344)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [560])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [560])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $62(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [672])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $88([72])
	$4 = CALL $58($6)
	*($6 + [56]) = $0
	CALL $65(($8 + [32]), $4)
	*($6 + [60]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [60])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $60(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $89($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $89 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $88 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10524])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10416])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10224]
	$1 = (((int_32)$2 * (int_32)[12]) + [10224])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10518]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10520])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10518]) = [1]
	$7 = ($7 << [16])
	*([0] + [10520]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10520])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10520]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10518]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10518]) = [1]
	$3 = ($3 << [16])
	*([0] + [10520]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10520])
	
.LABEL $label$8
	*([0] + [10520]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $86($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10432])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $85([2032], $0)
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [704])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [704])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [704])
	CALL memcpy(($0 + [16]), *($2 + [4]), [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $1) > (uint_32)[7]), [704])
	CALL memcpy(($0 + [24]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [160])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [224])
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [160])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [224])
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $83(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [704])
	CALL memcpy(($5 + [8]), $3, [4])
	$6 = *($5 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 $6), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1712])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1760])
	$2 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$6 = *($1)
	$3 = ([0] - $2)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(*($8)) == (int_32)$6) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$2), [1824])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $89($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $89($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC _ZN5eosio13stakecontract11forcerefundEyNS_5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	$6 = [0]
	*(($7 + [56])) = [0]
	*($7 + [40]) = (int_64)-1
	*($7 + [48]) = (int_64)0
	$4 = *($0)
	*($7 + [24]) = $4
	*($7 + [32]) = $1
	$2 = CALL db_find_i64($4, $1, (int_64)-5001342326447013888, (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$2) <= (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL $16(($7 + [24]), $2)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)($7 + [24])), [32])
	*($7 + [20]) = $6
	*($7 + [16]) = ($7 + [24])
	$2 = [1]
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [0]
	*($7 + [16]) = ($7 + [24])
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [1520])
	$1 = *($0)
	*($7 + [12]) = $0
	*($7 + [8]) = ($7 + [16])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [272])
	CALL $74(($7 + [24]), $6, $1, ($7 + [8]))
	$3 = *($7 + [48])
	if ( ($3 == 0) ){ goto $label$3 }
	$5 = ($7 + [52])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	$2 = *($0 + [16])
	if ( ($2 == 0) ){ goto $label$8 }
	*(($0 + [20])) = $2
	CALL $89($2)
	
.LABEL $label$8
	CALL $89($0)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$6 }
	$6 = *(($7 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$6 = $3
	
.LABEL $label$4
	*($5) = $3
	CALL $89($6)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [64])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [256])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [256])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC _ZN5eosio13stakecontract8logeraseEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	*(($5 + [32])) = [0]
	*($5 + [16]) = (int_64)-1
	*($5 + [24]) = (int_64)0
	$3 = *($0)
	*($5) = $3
	*($5 + [8]) = $3
	$0 = [0]
	$1 = CALL db_find_i64($3, $3, (int_64)-8279445702455590912, (CASTING uint_64)(uint_32 $1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $10($5, $1)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$5), [32])
	
.LABEL $label$1
	$1 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($1, [1648])
	CALL eosio_assert($1, [1664])
	CALL eosio_assert($1, [1152])
	$1 = CALL db_next_i64(*($0 + [20]), ($5 + [40]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	CALL $10($5, $1)
	
.LABEL $label$2
	CALL $72($5, $0)
	$2 = *($5 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$4 = ($5 + [28])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $89($1)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($5 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($4) = $2
	CALL $89($0)
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $76 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	*($0 + [8]) = (int_64)86400
	*($0) = $1
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [1984]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	*(($0 + [16])) = $6
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [2000]
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$6 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$2 = ($2 + [165])
	goto $label$7 
	
.LABEL $label$8
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$6
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$5 }
	*(($0 + [24])) = $6
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [2016]
	$6 = (int_64)0
	
.LOOP $label$9:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$10 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$2 = ($2 + [165])
	goto $label$11 
	
.LABEL $label$12
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$10
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$9 }
	*($0 + [40]) = $1
	*(($0 + [32])) = $6
	*(($0 + [48])) = $1
	*(($0 + [56])) = (int_64)-1
	*(($0 + [64])) = (int_64)0
	*(($0 + [72])) = [0]
	*($0 + [80]) = $1
	*(($0 + [88])) = $1
	*(($0 + [96])) = (int_64)-1
	*(($0 + [104])) = [0]
	*(($0 + [108])) = [0]
	*(($0 + [112])) = [0]
	return $0
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [160])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [224])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [704])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [704])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [704])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [16])
	$17 = $18
	*([0] + [4]) = $18
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	$16 = *($1 + [8])
	$4 = (uint_64)$16 >> (uint_64)(int_64)8)
	$14 = *(*($3) + [4])
	if ( ((int_32)*(($14 + [20])) == (int_32)*($14 + [16])) ){ goto $label$1 }
	$13 = [0]
	$7 = (*($3 + [4]) + [8])
	$8 = ($1 + [40])
	$9 = ($1 + [32])
	$15 = [0]
	
.LOOP $label$2:
	if ( ((uint_64)((int_64)*(((*($14 + [16]) + $13) + [16])) + (int_64)*($7)) > (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$3 }
	*($8) = *(((*(*(*($3) + [4]) + [16]) + $13) + [8]))
	*($9) = (int_64))(*($9) - *((*(*(*($3) + [4]) + [16]) + $13)))
	$5 = *(($1 + [16]))
	$10 = ($5 + $13)
	$11 = ($10 + [24])
	$12 = ($1 + [20])
	$14 = (*($12) - $11)
	$6 = ((int_32)$14 / (int_32)[24])
	if ( ($14 == 0) ){ goto $label$4 }
	CALL memmove($10, $11, $14)
	
.LABEL $label$4
	*($12) = (($5 + ((int_32)$6 * (int_32)[24])) + $13)
	
.LABEL $label$3
	$13 = ($13 + [24])
	$14 = *(*($3) + [4])
	$15 = ($15 + [1])
	if ( ($15 <= ((int_32)(*(($14 + [20])) - *($14 + [16])) / (int_32)[24])) ){ goto $label$2 }
	$16 = *(($1 + [8]))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)(uint_64)$16 >> (uint_64)(int_64)8)), [432])
	$3 = *($1 + [16])
	$14 = *(($1 + [20]))
	$15 = ($14 - $3)
	$16 = (CASTING uint_64)(uint_32 ((int_32)$15 / (int_32)[24]))
	$13 = [36]
	
.LOOP $label$5:
	$13 = ($13 + [1])
	$16 = (uint_64)$16 >> (uint_64)(int_64)7
	if ( ((int_64)$16) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)$14) ){ goto $label$7 }
	$13 = (((int_32)((uint_32)($15 + [-24]) / (uint_32)[24]) * (int_32)[20]) + $13)
	goto $label$6 
	
.LABEL $label$7
	$13 = ($13 + [-20])
	
.LABEL $label$6
	$14 = ($13 + [16])
	if ( ($14 <= [513]) ){ goto $label$9 }
	$13 = CALL malloc($14)
	goto $label$8 
	
.LABEL $label$9
	$13 = ($18 - (($14 + [15]) & [-16]))
	*([0] + [4]) = $13
	
.LABEL $label$8
	*($17 + [4]) = $13
	*($17) = $13
	*($17 + [8]) = ($13 + $14)
	CALL $55($17, $1)
	CALL db_update_i64(*($1 + [52]), $2, $13, $14)
	if ( ($14 <= [513]) ){ goto $label$10 }
	CALL free($13)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$11
	*([0] + [4]) = ($17 + [16])
}

void .FUNC _ZN5eosio13stakecontract9unstakingEyNS_5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [272])
	*([0] + [4]) = $11
	*($11 + [248]) = $1
	*(($11 + [240])) = [0]
	*($11 + [224]) = (int_64)-1
	*($11 + [232]) = (int_64)0
	$9 = *($0)
	*($11 + [208]) = $9
	*($11 + [216]) = $9
	$7 = [0]
	$5 = CALL db_find_i64($9, $9, (int_64)-4157660971118100480, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $17(($11 + [208]), $5)
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)($11 + [208])), [32])
	
.LABEL $label$1
	$5 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($5, [1280])
	CALL eosio_assert(((int_64)*($7 + [8]) >= (int_64)*($2)), [1312])
	$1 = *($0)
	CALL eosio_assert($5, [272])
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)($11 + [208])), [320])
	CALL eosio_assert(((int_64)*($11 + [208]) == (int_64)CALL $fimport$2()), [368])
	$9 = *($7)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($7 + [16]))), [1344])
	$8 = (int_64)
	*($7 + [8]) = $8(*($7 + [8]) - *($2)))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1392])
	CALL eosio_assert(((int_64)*($7 + [8]) < (int_64)4611686018427387904), [1424])
	CALL eosio_assert(((int_64)$9 == (int_64)*($7)), [432])
	*($11 + [176]) = (($11 + [48]) + [56])
	*($11 + [172]) = ($11 + [48])
	*($11 + [168]) = ($11 + [48])
	CALL $19(($11 + [168]), $7)
	CALL db_update_i64(*($7 + [60]), $1, ($11 + [48]), [56])
	$7 = (($11 + [208]) + [16])
	if ( (uint_64)($9 <= *($7)) ){ goto $label$2 }
	*($7) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*($11 + [184]) = (int_64)-1
	*($11 + [192]) = [0]
	$9 = *($11 + [248])
	$1 = *($0)
	*($11 + [168]) = $1
	*($11 + [176]) = $9
	*(($5 = ($11 + [196]))) = [0]
	*(($3 = ($11 + [200]))) = [0]
	$7 = CALL db_find_i64($1, $9, (int_64)-5001342326447013888, (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	if ( ((int_32)$7) <= (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL $16(($11 + [168]), $7)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)($11 + [168])), [32])
	$9 = *($0)
	*($11 + [48]) = $2
	CALL eosio_assert([1], [272])
	CALL $41(($11 + [168]), $7, $9, ($11 + [48]))
	goto $label$3 
	
.LABEL $label$4
	$9 = *($0)
	*($11 + [120]) = $2
	*($11 + [128]) = $9
	CALL eosio_assert(((int_64)*($11 + [168]) == (int_64)CALL $fimport$2()), [96])
	*($11 + [52]) = ($11 + [120])
	*($11 + [48]) = ($11 + [168])
	*($11 + [56]) = ($11 + [128])
	$7 = CALL $88([64])
	CALL $22($7)
	*($7 + [48]) = ($11 + [168])
	CALL $40(($11 + [48]), $7)
	*($11) = $7
	$9 = (uint_64)*($7 + [8]) >> (uint_64)(int_64)8
	*($11 + [48]) = $9)
	$6 = *($7 + [52])
	*($11 + [32]) = $6
	$5 = *($5)
	if ( ((uint_32)$5 >= (uint_32)*($3)) ){ goto $label$6 }
	*($5 + [8]) = $9
	*($5 + [16]) = $6
	*($11) = [0]
	*($5) = $7
	*(($11 + [196])) = ($5 + [24])
	goto $label$5 
	
.LABEL $label$6
	CALL $24(($11 + [192]), $11, ($11 + [48]), ($11 + [32]))
	
.LABEL $label$5
	$7 = *($11)
	*($11) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	$5 = *($7 + [16])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($7 + [20])) = $5
	CALL $89($5)
	
.LABEL $label$7
	CALL $89($7)
	
.LABEL $label$3
	*((($11 + [128]) + [32])) = [0]
	*($11 + [144]) = (int_64)-1
	$9 = (int_64)0
	*($11 + [152]) = (int_64)0
	$1 = *($0)
	*($11 + [128]) = $1
	*($11 + [136]) = $1
	*($11 + [124]) = [0]
	*($11 + [120]) = ($11 + [128])
	CALL $11(($11 + [120]))
	$1 = CALL current_time()
	*(($11 + [76])) = [0]
	*((($11 + [48]) + [32])) = [0]
	*($11 + [60]) = [0]
	*($11 + [64]) = [0]
	*($11 + [68]) = [0]
	*($11 + [72]) = [0]
	*($11 + [48]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	*($11 + [84]) = [0]
	*(($11 + [88])) = [0]
	*(($11 + [92])) = [0]
	*($11 + [96]) = [0]
	*(($11 + [100])) = [0]
	*(($11 + [104])) = [0]
	$3 = ($11 + [84])
	$4 = *($0)
	$8 = (int_64)59
	$7 = [1456]
	$10 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$13 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$5 = ($5 + [165])
	goto $label$11 
	
.LABEL $label$13
	$1 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$9
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$1 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$8 }
	*($11 + [40]) = $10
	*($11 + [32]) = $4
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1472]
	$10 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$19 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$5 = ($5 + [165])
	goto $label$17 
	
.LABEL $label$19
	$1 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$15
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$1 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$14 }
	*($11 + [24]) = $10
	*(($11 + [20])) = *(($2 + [12]))
	*(($11 + [16])) = *(($2 + [8]))
	*(($11 + [12])) = *(($2 + [4]))
	*($11 + [8]) = *($2)
	*($11) = *($11 + [248])
	CALL $42($3, ($11 + [32]), $0, ($11 + [24]), $11)
	$4 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1456]
	$10 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$25 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$5 = ($5 + [165])
	goto $label$23 
	
.LABEL $label$25
	$1 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$21
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$1 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$20 }
	*($11 + [8]) = $10
	*($11) = $4
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1488]
	$10 = (int_64)0
	
.LOOP $label$26:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$31 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$5 = ($5 + [165])
	goto $label$29 
	
.LABEL $label$31
	$1 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$27
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$1 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$26 }
	*($11 + [32]) = $10
	*($11 + [24]) = *(*($11 + [124]))
	$5 = (($11 + [48]) + [40])
	$7 = *($5)
	if ( ((uint_32)$7 >= (uint_32)*(($11 + [92]))) ){ goto $label$33 }
	*($7 + [8]) = $10
	*($7) = $4
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL $88([16])
	*($7 + [16]) = $2
	$6 = ($2 + [16])
	*($3) = $6
	*(($2 + [8])) = *(($11 + [8]))
	*($2) = *($11)
	*(($7 + [20])) = $6
	*($7 + [28]) = [0]
	*(($2 = ($7 + [32]))) = [0]
	*(($7 + [36])) = [0]
	CALL $43(($7 + [28]), [4])
	$7 = *($7 + [28])
	CALL eosio_assert(((int_32)(*($2) - $7) > (int_32)[3]), [256])
	CALL memcpy($7, ($11 + [24]), [4])
	*($5) = (*($5) + [40])
	goto $label$32 
	
.LABEL $label$33
	CALL $44($3, $11, $0, ($11 + [32]), ($11 + [24]))
	
.LABEL $label$32
	*(($11 + [68])) = *($0 + [8])
	*($11) = *(*($11 + [124]))
	*($11 + [8]) = (int_64)0
	$9 = *($11 + [248])
	CALL $45(($11 + [32]), ($11 + [48]))
	$7 = *($11 + [32])
	CALL send_deferred($11, $9, $7, (*($11 + [36]) - $7), [0])
	$7 = *($11 + [32])
	if ( ($7 == 0) ){ goto $label$34 }
	*($11 + [36]) = $7
	CALL $89($7)
	
.LABEL $label$34
	$9 = *($0)
	*($11 + [28]) = ($11 + [248])
	*($11 + [24]) = ($11 + [128])
	*($11 + [32]) = $9
	CALL eosio_assert(((int_64)*($11 + [128]) == (int_64)CALL $fimport$2()), [96])
	*($11 + [4]) = ($11 + [24])
	*($11) = ($11 + [128])
	*($11 + [8]) = ($11 + [32])
	*(($7 = CALL $88([32])) + [16]) = ($11 + [128])
	CALL $46($11, $7)
	*($11 + [264]) = $7
	$0 = *($7)
	*($11) = $0
	$2 = *($7 + [20])
	*($11 + [260]) = $2
	$3 = ($11 + [156])
	$5 = *($3)
	if ( ((uint_32)$5 >= (uint_32)*((($11 + [128]) + [32]))) ){ goto $label$36 }
	*($5 + [16]) = $2
	*($5 + [8]) = (CASTING uint_64)(uint_32 $0)
	*($11 + [264]) = [0]
	*($5) = $7
	*($3) = ($5 + [24])
	goto $label$35 
	
.LABEL $label$36
	CALL $9(($11 + [152]), ($11 + [264]), $11, ($11 + [260]))
	
.LABEL $label$35
	$7 = *($11 + [264])
	*($11 + [264]) = [0]
	if ( ($7 == 0) ){ goto $label$37 }
	CALL $89($7)
	
.LABEL $label$37
	CALL $47(($11 + [48]))
	$0 = *($11 + [152])
	if ( ($0 == 0) ){ goto $label$38 }
	$2 = ($11 + [156])
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$40 }
	
.LOOP $label$41:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$42 }
	CALL $89($5)
	
.LABEL $label$42
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$41 }
	$7 = *(($11 + [152]))
	goto $label$39 
	
.LABEL $label$40
	$7 = $0
	
.LABEL $label$39
	*($2) = $0
	CALL $89($7)
	
.LABEL $label$38
	$2 = *($11 + [192])
	if ( ($2 == 0) ){ goto $label$43 }
	$3 = ($11 + [196])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$45 }
	
.LOOP $label$46:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$47 }
	$0 = *($5 + [16])
	if ( ($0 == 0) ){ goto $label$48 }
	*(($5 + [20])) = $0
	CALL $89($0)
	
.LABEL $label$48
	CALL $89($5)
	
.LABEL $label$47
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$46 }
	$7 = *(($11 + [192]))
	goto $label$44 
	
.LABEL $label$45
	$7 = $2
	
.LABEL $label$44
	*($3) = $2
	CALL $89($7)
	
.LABEL $label$43
	$0 = *($11 + [232])
	if ( ($0 == 0) ){ goto $label$49 }
	$2 = ($11 + [236])
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$51 }
	
.LOOP $label$52:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$53 }
	CALL $89($5)
	
.LABEL $label$53
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$52 }
	$7 = *(($11 + [232]))
	goto $label$50 
	
.LABEL $label$51
	$7 = $0
	
.LABEL $label$50
	*($2) = $0
	CALL $89($7)
	
.LABEL $label$49
	*([0] + [4]) = ($11 + [272])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	$3 = *($1)
	CALL eosio_assert([1], [160])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [224])
	*(($1 + [32])) = (int_64)1397703940
	*($1 + [24]) = (int_64)0
	CALL eosio_assert([1], [160])
	$4 = (int_64)5133907
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [224])
	*(($1 + [48])) = (int_64)1314280196
	*($1 + [40]) = (int_64)0
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [432])
	$6 = $8
	$5 = ($6 + [-64])
	*([0] + [4]) = $5
	*($7 + [4]) = $5
	*($7) = $5
	*($7 + [8]) = ($6 + [-8])
	CALL $19($7, $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	$3 = *($1)
	CALL eosio_assert([1], [160])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [224])
	*(($1 + [32])) = (int_64)1397703940
	*($1 + [24]) = (int_64)0
	CALL eosio_assert([1], [160])
	$4 = (int_64)5133907
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [224])
	*(($1 + [48])) = (int_64)1314280196
	*($1 + [40]) = (int_64)0
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [432])
	$6 = $8
	$5 = ($6 + [-64])
	*([0] + [4]) = $5
	*($7 + [4]) = $5
	*($7) = $5
	*($7 + [8]) = ($6 + [-8])
	CALL $19($7, $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = (*([0] + [4]) - [160])
	$5 = $3
	*([0] + [4]) = $3
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	CALL $82(($5 + [32]), $3, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	*(($1 = (($5 + [80]) + [8]))) = *((($5 + [32]) + [8]))
	*(($3 = (($5 + [64]) + [8]))) = *(($5 + [56]))
	*($5 + [80]) = *($5 + [32])
	*($5 + [64]) = *($5 + [48])
	*((($5 + [112]) + [8])) = *($3)
	*((($5 + [96]) + [8])) = *($1)
	*($5 + [112]) = *($5 + [64])
	*($5 + [96]) = *($5 + [80])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$4 = *((*($1) + $4))
	
.LABEL $label$6
	*(($3 = (($5 + [144]) + [8]))) = *((($5 + [96]) + [8]))
	*(($2 = (($5 + [128]) + [8]))) = *((($5 + [112]) + [8]))
	*($5 + [144]) = *($5 + [96])
	*($5 + [128]) = *($5 + [112])
	*((($5 + [16]) + [8])) = *($3)
	*($5 + [16]) = *($5 + [144])
	*(($5 + [8])) = *($2)
	*($5) = *($5 + [128])
	CALL void $1((int_32 ($5 + [16])), (int_32 $5), (int_32 $4))
	*([0] + [4]) = ($5 + [160])
	return [1]
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [704])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN5eosio13stakecontract8resetvalEv (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	CALL require_auth(*($0))
	*(($11 + [40])) = [0]
	*($11 + [24]) = (int_64)-1
	$8 = (int_64)0
	*($11 + [32]) = (int_64)0
	$1 = *($0)
	*($11 + [8]) = $1
	*($11 + [16]) = $1
	$7 = (int_64)59
	$6 = [1184]
	$10 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	$6 = [0]
	$2 = CALL db_find_i64($1, $1, (int_64)-4157660971118100480, $10)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $17(($11 + [8]), $2)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)($11 + [8])), [32])
	
.LABEL $label$5
	$8 = *($0)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [272])
	CALL $33(($11 + [8]), $6, $8)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1200]
	$10 = (int_64)0
	
.LOOP $label$6:
	$9 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$7 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$2 = ($2 + [165])
	goto $label$8 
	
.LABEL $label$9
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$7
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$6 }
	$3 = *(($11 + [32]))
	$5 = *(($11 + [36]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$10 }
	$6 = ($5 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$11:
	if ( ((int_64)*(*($6)) == (int_64)$10) ){ goto $label$10 }
	$5 = $6
	$2 = ($6 + [-24])
	$6 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$13 }
	$6 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)($11 + [8])), [32])
	goto $label$12 
	
.LABEL $label$13
	$6 = [0]
	$2 = CALL db_find_i64(*($11 + [8]), *(($11 + [16])), (int_64)-4157660971118100480, $10)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$12 }
	$6 = CALL $17(($11 + [8]), $2)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)($11 + [8])), [32])
	
.LABEL $label$12
	$8 = *($0)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [272])
	CALL $34(($11 + [8]), $6, $8)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1216]
	$10 = (int_64)0
	
.LOOP $label$14:
	$9 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$15 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$2 = ($2 + [165])
	goto $label$16 
	
.LABEL $label$17
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$15
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$14 }
	$3 = *(($11 + [32]))
	$5 = *(($11 + [36]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$18 }
	$6 = ($5 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$19:
	if ( ((int_64)*(*($6)) == (int_64)$10) ){ goto $label$18 }
	$5 = $6
	$2 = ($6 + [-24])
	$6 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$19 }
	
.LABEL $label$18
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$21 }
	$6 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)($11 + [8])), [32])
	goto $label$20 
	
.LABEL $label$21
	$6 = [0]
	$2 = CALL db_find_i64(*($11 + [8]), *(($11 + [16])), (int_64)-4157660971118100480, $10)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$20 }
	$6 = CALL $17(($11 + [8]), $2)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)($11 + [8])), [32])
	
.LABEL $label$20
	$8 = *($0)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [272])
	CALL $35(($11 + [8]), $6, $8)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1232]
	$10 = (int_64)0
	
.LOOP $label$22:
	$9 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$23 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$2 = ($2 + [165])
	goto $label$24 
	
.LABEL $label$25
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$23
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$22 }
	$3 = *(($11 + [32]))
	$5 = *(($11 + [36]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$26 }
	$6 = ($5 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$27:
	if ( ((int_64)*(*($6)) == (int_64)$10) ){ goto $label$26 }
	$5 = $6
	$2 = ($6 + [-24])
	$6 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$29 }
	$6 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)($11 + [8])), [32])
	goto $label$28 
	
.LABEL $label$29
	$6 = [0]
	$2 = CALL db_find_i64(*($11 + [8]), *(($11 + [16])), (int_64)-4157660971118100480, $10)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$28 }
	$6 = CALL $17(($11 + [8]), $2)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)($11 + [8])), [32])
	
.LABEL $label$28
	$8 = *($0)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [272])
	CALL $36(($11 + [8]), $6, $8)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1248]
	$10 = (int_64)0
	
.LOOP $label$30:
	$9 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$31 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$2 = ($2 + [165])
	goto $label$32 
	
.LABEL $label$33
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$31
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$30 }
	$3 = *(($11 + [32]))
	$5 = *(($11 + [36]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$34 }
	$6 = ($5 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$35:
	if ( ((int_64)*(*($6)) == (int_64)$10) ){ goto $label$34 }
	$5 = $6
	$2 = ($6 + [-24])
	$6 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$35 }
	
.LABEL $label$34
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$37 }
	$6 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)($11 + [8])), [32])
	goto $label$36 
	
.LABEL $label$37
	$6 = [0]
	$2 = CALL db_find_i64(*($11 + [8]), *(($11 + [16])), (int_64)-4157660971118100480, $10)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$36 }
	$6 = CALL $17(($11 + [8]), $2)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)($11 + [8])), [32])
	
.LABEL $label$36
	$8 = *($0)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [272])
	CALL $37(($11 + [8]), $6, $8)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1264]
	$10 = (int_64)0
	
.LOOP $label$38:
	$9 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$39 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$2 = ($2 + [165])
	goto $label$40 
	
.LABEL $label$41
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$39
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$38 }
	$3 = *(($11 + [32]))
	$5 = *(($11 + [36]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$42 }
	$6 = ($5 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$43:
	if ( ((int_64)*(*($6)) == (int_64)$10) ){ goto $label$42 }
	$5 = $6
	$2 = ($6 + [-24])
	$6 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$43 }
	
.LABEL $label$42
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$45 }
	$6 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)($11 + [8])), [32])
	goto $label$44 
	
.LABEL $label$45
	$6 = [0]
	$2 = CALL db_find_i64(*($11 + [8]), *(($11 + [16])), (int_64)-4157660971118100480, $10)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$44 }
	$6 = CALL $17(($11 + [8]), $2)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)($11 + [8])), [32])
	
.LABEL $label$44
	$8 = *($0)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [272])
	CALL $38(($11 + [8]), $6, $8)
	$5 = *($11 + [32])
	if ( ($5 == 0) ){ goto $label$46 }
	$4 = ($11 + [36])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$48 }
	
.LOOP $label$49:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$50 }
	CALL $89($2)
	
.LABEL $label$50
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$49 }
	$6 = *(($11 + [32]))
	goto $label$47 
	
.LABEL $label$48
	$6 = $5
	
.LABEL $label$47
	*($4) = $5
	CALL $89($6)
	
.LABEL $label$46
	*([0] + [4]) = ($11 + [48])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	$3 = *($1)
	CALL eosio_assert([1], [160])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [224])
	*(($1 + [32])) = (int_64)1397703940
	*($1 + [24]) = (int_64)0
	CALL eosio_assert([1], [160])
	$4 = (int_64)5133907
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [224])
	*(($1 + [48])) = (int_64)1314280196
	*($1 + [40]) = (int_64)0
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [432])
	$6 = $8
	$5 = ($6 + [-64])
	*([0] + [4]) = $5
	*($7 + [4]) = $5
	*($7) = $5
	*($7 + [8]) = ($6 + [-8])
	CALL $19($7, $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($7 + [16])
}

void .FUNC _ZN5eosio13stakecontract12resetdropvalEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	$3 = *($0)
	*($6) = $3
	*($6 + [8]) = $3
	*($6 + [24]) = (int_64)0
	$5 = CALL db_lowerbound_i64($3, $3, (int_64)-4157660971118100480, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $17($6, $5)
	
.LOOP $label$2:
	$3 = *($0)
	CALL eosio_assert([1], [272])
	CALL $31($6, $5, $3)
	CALL eosio_assert([1], [1152])
	$5 = CALL db_next_i64(*($5 + [60]), ($6 + [40]))
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL $17($6, $5)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($6 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$4 = ($6 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL $89($0)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	$5 = *(($6 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	*($4) = $2
	CALL $89($5)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [368])
	$3 = *($1)
	CALL eosio_assert([1], [160])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [224])
	*(($1 + [32])) = (int_64)1397703940
	*($1 + [24]) = (int_64)0
	CALL eosio_assert([1], [160])
	$4 = (int_64)5133907
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [224])
	*(($1 + [48])) = (int_64)1314280196
	*($1 + [40]) = (int_64)0
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [432])
	$6 = $8
	$5 = ($6 + [-64])
	*([0] + [4]) = $5
	*($7 + [4]) = $5
	*($7) = $5
	*($7 + [8]) = ($6 + [-8])
	CALL $19($7, $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($7 + [16])
}