(data (i32.const 4) "Pg\00\00")
(data (i32.const 16) "gd_delay_1\00")
(data (i32.const 32) "gd_delay_2\00")
(data (i32.const 48) "cannot increment end iterator\00")
(data (i32.const 80) "active\00")
(data (i32.const 96) "settle\00")
(data (i32.const 112) "write\00")
(data (i32.const 128) "error reading iterator\00")
(data (i32.const 160) "read\00")
(data (i32.const 176) "cannot pass end iterator to erase\00")
(data (i32.const 224) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 288) "reset \00")
(data (i32.const 304) "\n\00")
(data (i32.const 320) "object passed to erase is not in multi_index\00")
(data (i32.const 368) "cannot erase objects in table of another contract\00")
(data (i32.const 432) "attempt to remove object that was not in multi_index\00")
(data (i32.const 512) "get\00")
(data (i32.const 528) "\t\00")
(data (i32.const 544) "cannot pass end iterator to modify\00")
(data (i32.const 592) "object passed to modify is not in multi_index\00")
(data (i32.const 640) "cannot modify objects in table of another contract\00")
(data (i32.const 704) "eosio.token\00")
(data (i32.const 720) "transfer\00")
(data (i32.const 736) "from eos2goodluck\00")
(data (i32.const 768) "updater cannot change primary key when modifying an object\00")
(data (i32.const 832) "cannot create objects in table of another contract\00")
(data (i32.const 896) "\t create team success!!! \t\00")
(data (i32.const 928) "next primary key in table is at autoincrement limit\00")
(data (i32.const 992) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1056) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1104) "reset  delay settle\t\00")
(data (i32.const 1136) "d\00\00\00\00\00\00\00\19\00\00\00\00\00\00\00\e8\03\00\00\00\00\00\002\00\00\00\00\00\00\00\ff\ff\ff\ff\00\00\00\00K\00\00\00\00\00\00\00")
(data (i32.const 1184) "keybuy! \00")
(data (i32.const 1200) "\t airdrop_balance:\00")
(data (i32.const 1232) "\t team_balance:\00")
(data (i32.const 1248) "invite_dividend :\00")
(data (i32.const 1280) "invite! \00")
(data (i32.const 1296) "reset game!\t\00")
(data (i32.const 1312) "mode:\00")
(data (i32.const 1328) "clean counters\t\00")
(data (i32.const 1344) "set delay settle\t\00")
(data (i32.const 1376) "settle! \00")
(data (i32.const 1392) "\t win:\00")
(data (i32.const 1408) "transfer  \00")
(data (i32.const 1424) " -> \00")
(data (i32.const 1440) "\t on:\00")
(data (i32.const 1456) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1520) "invalid symbol name\00")
(data (i32.const 1552) "build counters\00")
(data (i32.const 9968) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "cancel_deferred" (func $fimport$2 (param i32) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_end_i64" (func $fimport$5 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$8 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$9 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$11 (param i32)))
(import "env" "db_idx64_store" (func $fimport$12 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$13 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$17 (param i32)))
(import "env" "db_store_i64" (func $fimport$18 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$19 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$20 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$21 (param i32)))
(import "env" "memcpy" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "printdf" (func $fimport$24 (param f64)))
(import "env" "printi" (func $fimport$25 (param i64)))
(import "env" "printn" (func $fimport$26 (param i64)))
(import "env" "prints" (func $fimport$27 (param i32)))
(import "env" "printui" (func $fimport$28 (param i64)))
(import "env" "read_action_data" (func $fimport$29 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$30 (param i64)))
(import "env" "require_auth2" (func $fimport$31 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$32 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$33 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN5eosio8goodluck5delayEv" (func $5))
(export "_ZN5eosio8goodluck5resetEy" (func $20))
(export "_ZN5eosio8goodluck5cleanEy" (func $33))
(export "_ZN5eosio8goodluck8withdrawEyNS_5assetE" (func $34))
(export "_ZN5eosio8goodluck10teamcreateEyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_y" (func $41))
(export "_ZN5eosio8goodluck8teamjoinEyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy" (func $53))
(export "_ZN5eosio8goodluck6keybuyEymy" (func $61))
(export "_ZN5eosio8goodluck6inviteEyyy" (func $72))
(export "_ZN5eosio8goodluck6settleEy" (func $74))
(export "_ZN5eosio8goodluck2onERKNS_8currency8transferEy" (func $81))
(export "_ZN5eosio8goodluck5applyEyy" (func $85))
(export "apply" (func $97))
(export "malloc" (func $105))
(export "free" (func $108))
(export "memcmp" (func $117))
(export "strlen" (func $118))
(table $0 8 8 anyfunc)
(elem (i32.const 0) $119 $34 $41 $72 $53 $61 $5 $74)



int_32 .FUNC $98 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	*($0) = $1
	*($0 + [8]) = $1
	*(($0 + [16])) = $1
	*(($0 + [24])) = (int_64)-1
	*(($0 + [32])) = (int_64)0
	*($4 + [16]) = $1
	*(($0 + [40])) = [0]
	*($0 + [48]) = $1
	*(($0 + [56])) = $1
	*(($0 + [64])) = (int_64)-1
	*(($0 + [72])) = [0]
	*(($0 + [76])) = [0]
	*(($0 + [80])) = [0]
	*(($0 + [84])) = [0]
	$2 = ($0 + [48])
	*($4 + [8]) = $2
	CALL $99(($4 + [24]), ($4 + [8]), $0)
	$3 = *($4 + [28])
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_64)*($0) == (int_64)*($3)) ){ goto $label$1 }
	
.LABEL $label$2
	CALL prints([1552])
	*($4 + [24]) = $0
	*($4 + [28]) = ($4 + [16])
	CALL $100($4, $2, $1, ($4 + [24]))
	$1 = *($4 + [16])
	*($4 + [24]) = $0
	*($4 + [28]) = ($4 + [16])
	CALL $101($4, $2, $1, ($4 + [24]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [32])
	return $0
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)4986958866982895616, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2) + [136]) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [144]) == (int_32)$4), [224])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $6($4, CALL $fimport$6(*($4), *($4 + [8]), (int_64)4986958866982895616, $5))
	CALL eosio_assert(((int_32)*($2 + [144]) == (int_32)$4), [224])
	
.LABEL $label$4
	*(($2 + [152])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$2 = *($1)
	CALL $116($5, ($1 + [8]))
	$3 = *($1 + [24])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $116(($5 + [16]), $5)
	CALL void $0((int_32 $2), (int_64 ($5 + [16])), (int_32 $3), (int_64 $1))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $110(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $110(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	$2 = *($1)
	CALL $116(($5 + [16]), ($1 + [8]))
	CALL $116($5, ($1 + [20]))
	$3 = *($1 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $116(($5 + [48]), ($5 + [16]))
	CALL $116(($5 + [32]), $5)
	CALL void $0((int_32 $2), (int_64 ($5 + [48])), (int_32 ($5 + [32])), (int_32 $3), (int_64 $1))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL $110(*($5 + [40]))
	
.LABEL $label$2
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL $110(*($5 + [56]))
	
.LABEL $label$3
	if ( ((*($5) & [1]) == 0) ){ goto $label$4 }
	CALL $110(*($5 + [8]))
	
.LABEL $label$4
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $110(*($5 + [24]))
	
.LABEL $label$5
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $31($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [96])
	*([0] + [4]) = $3
	CALL _ZN5eosio8goodluck5applyEyy(CALL $98(($3 + [8]), $0), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$7 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($9 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [16]) = [0]
	*($8 + [8]) = (int_64)0
	*($8 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [160])
	CALL memcpy(($8 + [8]), $6, [8])
	CALL eosio_assert(((int_32)($1 & [-4]) != (int_32)[8]), [160])
	$9 = (($8 + [8]) + [8])
	CALL memcpy($9, ($6 + [8]), [4])
	CALL eosio_assert(((uint_32)($1 + [-12]) > (uint_32)[7]), [160])
	$5 = ($8 + [24])
	CALL memcpy($5, ($6 + [12]), [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$6 = *($9)
	$3 = *($8 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$7 = *((*($1) + $7))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 $6), (int_32 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [32])
	return [1]
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [160])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [32])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $1)
	
.LABEL $label$1
	*($10 + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [160])
	CALL memcpy(($10 + [8]), $8, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [160])
	$7 = (($10 + [8]) + [8])
	CALL memcpy($7, ($8 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [160])
	$6 = (($10 + [8]) + [16])
	CALL memcpy($6, ($8 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($6)
	$4 = *($7)
	$3 = *($10 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$9 = *((*($1) + $9))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $5), (int_64 $9))
	*([0] + [4]) = ($10 + [32])
	return [1]
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $115 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	$0 = *($2)
	$2 = *($0 + [52])
	$4 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$3 = *($1)
	$0 = *($3)
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($3) = $0
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $0)
	
.LABEL $label$2
	*(($0 = *($1))) = (*($0) + [1])
	*(($0 = *($1))) = (*($0) + [8])
	*(($0 = *($1))) = (*($0) + [8])
	*(($0 = *($1))) = (*($0) + [8])
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	*(($4 = *($1))) = (*($4) + [8])
	$4 = *($2)
	$2 = *($0 + [4])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $4)
	
.LABEL $label$2
	$4 = *($2)
	$2 = *($0 + [8])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$0 = *($1)
	$4 = *($0)
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($0) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	*($0) = ($2 + $4)
	
.LABEL $label$4
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
}

int_32 .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [68]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1056])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-3851386921959817216)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [992])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [992])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $47(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [64])
	$14 = $15
	*([0] + [4]) = $15
	$2 = *($0)
	$3 = *($0 + [4])
	CALL prints([896])
	$10 = *($3)
	$11 = *($10 + [16])
	if ( ((int_64)$11 != (int_64)-1) ){ goto $label$1 }
	$11 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($10), *($10 + [8]), (int_64)-3851386921959817216, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $47($10, $5)
	*($14 + [36]) = [0]
	*($14 + [32]) = $10
	$11 = *(*(CALL $48(($14 + [32])) + [4]) + [56])
	$11 = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($10 + [16])) = $11
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($11 <= (int_64)-2), [928])
	*($1 + [56]) = *(($10 + [16]))
	*($1) = *(*($3 + [4]))
	$5 = ($1 + [8])
	CALL $112($5, *($3 + [8]))
	$6 = ($1 + [20])
	CALL $112($6, *($3 + [12]))
	*($1 + [48]) = *(*($3 + [16]))
	*($14 + [24]) = [0]
	*($14 + [8]) = ($14 + [24])
	*($14 + [36]) = $5
	*($14 + [32]) = $1
	*($14 + [40]) = $6
	$8 = ($1 + [32])
	*($14 + [44]) = $8
	$9 = ($1 + [40])
	*($14 + [48]) = $9
	$7 = ($1 + [48])
	*($14 + [52]) = $7
	$4 = ($1 + [56])
	*($14 + [56]) = $4
	CALL $49(($14 + [32]), ($14 + [8]))
	$10 = *($14 + [24])
	if ( ($10 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($10)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($15 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($14 + [12]) = $3
	*($14 + [8]) = $3
	*($14 + [16]) = ($3 + $10)
	*($14 + [24]) = ($14 + [8])
	*($14 + [36]) = $5
	*($14 + [32]) = $1
	*($14 + [40]) = $6
	*($14 + [44]) = $8
	*($14 + [48]) = $9
	*($14 + [52]) = $7
	*($14 + [56]) = $4
	CALL $50(($14 + [32]), ($14 + [24]))
	$11 = *(($1 + [56]))
	*($1 + [68]) = CALL db_store_i64(*($2 + [8]), (int_64)-3851386921959817216, *(*($0 + [8])), $11, $3, $10)
	if ( ($10 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($11 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$3 = ($1 + [56])
	$11 = *($3)
	$10 = ($2 + [8])
	$12 = *($10)
	$0 = *(($0 + [8]))
	$13 = *($0)
	*($14 + [32]) = *($1)
	*($1 + [72]) = CALL db_idx64_store($12, (int_64)-3851386921959817216, $13, $11, ($14 + [32]))
	$11 = *($3)
	$12 = *($0)
	$13 = *($10)
	*($14 + [32]) = *(($1 + [48]))
	*(($1 + [76])) = CALL db_idx64_store($13, (int_64)-3851386921959817215, $12, $11, ($14 + [32]))
	*([0] + [4]) = ($14 + [64])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-3851386921959817216, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2) + [56]) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)$4), [224])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $47($4, CALL $fimport$6(*($4), *($4 + [8]), (int_64)-3851386921959817216, $5))
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)$4), [224])
	
.LABEL $label$4
	*(($2 + [72])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC _ZN5eosio8goodluck10teamcreateEyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_y (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$20 = (*([0] + [4]) - [240])
	*([0] + [4]) = $20
	*($20 + [192]) = $1
	*($20 + [184]) = $4
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [80]
	$13 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$6 }
	$19 = *($10)
	if ( ((uint_32)(($19 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$19 = ($19 + [165])
	goto $label$4 
	
.LABEL $label$6
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$19 = ( ($19 + [208]) ? [0] : ((($19 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $19) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$2
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($1, $13)
	if ( ((int_64)$4 == (int_64)2) ){ goto $label$8 }
	*(($20 + [176])) = [0]
	*($20 + [152]) = $1
	*($20 + [160]) = (int_64)-1
	*($20 + [168]) = (int_64)0
	*($20 + [144]) = *($0)
	*($20 + [180]) = [0]
	*($20 + [136]) = ($20 + [144])
	CALL $21(($20 + [88]), ($20 + [136]), ($20 + [192]))
	$10 = *($20 + [92])
	if ( ($10 == 0) ){ goto $label$11 }
	if ( ((int_64)*($20 + [192]) != (int_64)*($10 + [8])) ){ goto $label$10 }
	*($20 + [128]) = *($20 + [88])
	goto $label$9 
	
.LABEL $label$11
	*($20 + [132]) = [0]
	*($20 + [128]) = ($20 + [136])
	goto $label$9 
	
.LABEL $label$10
	*($20 + [132]) = [0]
	*($20 + [128]) = ($20 + [136])
	
.LABEL $label$9
	*(($20 + [120])) = [0]
	*($20 + [104]) = (int_64)-1
	$12 = *($0)
	*($20 + [88]) = $12
	*($20 + [96]) = $12
	*($20 + [112]) = (int_64)0
	*($20 + [124]) = [0]
	$12 = *(($0 + [16]))
	*($20 + [80]) = ($20 + [88])
	$10 = CALL db_lowerbound_i64(*($0 + [8]), $12, (int_64)-4455936897818034176, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$13 }
	$7 = ($2 + [1])
	$5 = ($0 + [8])
	$15 = CALL $24($5, $10)
	$6 = (($20 + [32]) | [1])
	$9 = ($2 + [4])
	
.LOOP $label$14:
	CALL $42(($20 + [32]), ($20 + [80]), $15)
	$18 = [0]
	$10 = [0]
	$19 = *($20 + [36])
	if ( ($19 == 0) ){ goto $label$15 }
	$10 = ( $19 ? [0] : ((int_64)*($15) == (int_64)*($19)) )
	
.LABEL $label$15
	CALL $116(($20 + [32]), ($10 + [8]))
	$10 = ($10 & [1])
	$10 = *($2)
	$19 = ($17 & [1])
	$17 = *($20 + [32])
	$8 = uint_32($17 >> [1])
	$16 = ( *($20 + [36]) ? $8 : $19 )
	if ( ((int_32)$16 != (int_32)( *($9) ? uint_32($10 >> [1]) : $10 )) ){ goto $label$18 }
	$10 = ( *(($2 + [8])) ? $7 : $10 )
	if ( ($19 == 0) ){ goto $label$20 }
	if ( ($16 == 0) ){ goto $label$19 }
	$18 = (CALL memcmp(( *((($20 + [32]) + [8])) ? $6 : $19 ), $10, $16) == 0)
	if ( (*($20 + [32]) & [1]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$20
	if ( ($16 == 0) ){ goto $label$19 }
	$16 = ([0] - $8)
	$19 = $6
	
.LOOP $label$21:
	if ( ((int_32)*($19) != (int_32)*($10)) ){ goto $label$18 }
	$10 = ($10 + [1])
	$19 = ($19 + [1])
	$16 = ($16 + [1])
	if ( $16 ){ goto $label$21 }
	
.LABEL $label$19
	$18 = [1]
	
.LABEL $label$18
	if ( (($17 & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL $110(*((($20 + [32]) + [8])))
	
.LABEL $label$16
	if ( $18 ){ goto $label$12 }
	CALL eosio_assert([1], [48])
	$10 = CALL db_next_i64(*($15 + [12]), ($20 + [32]))
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$13 }
	$15 = CALL $24($5, $10)
	goto $label$14 
	
.LABEL $label$13
	$10 = *($20 + [132])
	if ( ($10 == 0) ){ goto $label$12 }
	$15 = (($20 + [32]) + [24])
	$18 = ($20 + [64])
	$9 = ($20 + [68])
	$5 = ($20 + [20])
	
.LOOP $label$22:
	*($20 + [76]) = [0]
	$19 = *($10 + [104])
	if ( ($19 & [1]) ){ goto $label$25 }
	if ( uint_32($19 >> [1]) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$25
	if ( *(($10 + [108])) ){ goto $label$23 }
	
.LABEL $label$24
	if ( ((int_64)*($10 + [136]) != (int_64)*($20 + [184])) ){ goto $label$23 }
	if ( *($10 + [116]) ){ goto $label$27 }
	if ( ((uint_64)*($10 + [24]) > (uint_64)(int_64)999999) ){ goto $label$26 }
	
.LABEL $label$27
	if ( (*($10 + [116]) == 0) ){ goto $label$23 }
	
.LABEL $label$26
	$12 = *($0)
	*((($20 + [32]) + [8])) = $12
	*((($20 + [32]) + [16])) = (int_64)-1
	*($15) = (int_64)0
	*($18) = [0]
	*($20 + [32]) = $12
	*($9) = [0]
	*(($8 = (($20 + [8]) + [8]))) = $2
	*($5) = $3
	*((($20 + [8]) + [16])) = ($20 + [184])
	*($20 + [12]) = ($20 + [192])
	*($20 + [8]) = ($20 + [32])
	*($20 + [232]) = $12
	CALL eosio_assert(((int_64)$12 == (int_64)CALL $fimport$3()), [832])
	*((($20 + [208]) + [8])) = ($20 + [232])
	*($20 + [212]) = ($20 + [8])
	*($20 + [208]) = ($20 + [32])
	*(($10 = CALL $109([80])) + [16]) = [0]
	*($10 + [8 align=4]) = (int_64)0
	*($10 + [20]) = [0]
	*(($10 + [28])) = [0]
	*(($10 + [24])) = [0]
	$17 = ($10 + [20])
	$19 = CALL strlen([496])
	if ( ((uint_32)$19 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$19 >= (uint_32)[11]) ){ goto $label$30 }
	*($17) = ($19 << [1])
	$16 = ($10 + [21])
	if ( $19 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$7 = (($19 + [16]) & [-16])
	$16 = CALL $109($7)
	*($17) = ($7 | [1])
	*($10 + [28]) = $16
	*($10 + [24]) = $19
	
.LABEL $label$29
	CALL memcpy($16, [496], $19)
	
.LABEL $label$28
	*(($16 + $19)) = [0]
	*($10 + [40]) = (int_64)0
	*($10 + [32]) = [1]
	*($10 + [48]) = (int_64)1
	*($10 + [64]) = ($20 + [32])
	CALL $43(($20 + [208]), $10)
	*($20 + [224]) = $10
	$12 = *($10 + [56])
	*($20 + [208]) = $12
	$16 = *($10 + [68])
	*($20 + [204]) = $16
	$17 = (($20 + [32]) + [28])
	$19 = *($17)
	if ( ((uint_32)$19 >= (uint_32)*($18)) ){ goto $label$32 }
	*($19 + [8]) = $12
	*($19 + [16]) = $16
	*($20 + [224]) = [0]
	*($19) = $10
	*($17) = ($19 + [24])
	goto $label$31 
	
.LABEL $label$32
	CALL $44($15, ($20 + [224]), ($20 + [208]), ($20 + [204]))
	
.LABEL $label$31
	$10 = *($20 + [224])
	*($20 + [224]) = [0]
	if ( ($10 == 0) ){ goto $label$33 }
	if ( ((*($10 + [20]) & [1]) == 0) ){ goto $label$34 }
	CALL $110(*(($10 + [28])))
	
.LABEL $label$34
	if ( ((*($10 + [8]) & [1]) == 0) ){ goto $label$35 }
	CALL $110(*(($10 + [16])))
	
.LABEL $label$35
	CALL $110($10)
	
.LABEL $label$33
	$12 = *($0)
	$10 = *($20 + [132])
	*($8) = $2
	*($20 + [12]) = ($20 + [76])
	*($20 + [8]) = ($20 + [128])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [544])
	CALL $45(*($20 + [136]), $10, $12, ($20 + [8]))
	$16 = *($15)
	if ( ($16 == 0) ){ goto $label$36 }
	$19 = *($17)
	if ( ((int_32)$19 == (int_32)$16) ){ goto $label$38 }
	
.LOOP $label$39:
	$19 = ($19 + [-24])
	$10 = *($19)
	*($19) = [0]
	if ( ($10 == 0) ){ goto $label$40 }
	if ( ((*($10 + [20]) & [1]) == 0) ){ goto $label$41 }
	CALL $110(*(($10 + [28])))
	
.LABEL $label$41
	if ( ((*($10 + [8]) & [1]) == 0) ){ goto $label$42 }
	CALL $110(*(($10 + [16])))
	
.LABEL $label$42
	CALL $110($10)
	
.LABEL $label$40
	if ( ((int_32)$16 != (int_32)$19) ){ goto $label$39 }
	$10 = *($15)
	goto $label$37 
	
.LABEL $label$38
	$10 = $16
	
.LABEL $label$37
	*($17) = $16
	CALL $110($10)
	
.LABEL $label$36
	$10 = *($20 + [132])
	
.LABEL $label$23
	$12 = *($0)
	*($20 + [32]) = ($20 + [76])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [544])
	CALL $46(*($20 + [136]), $10, $12, ($20 + [32]))
	CALL $22(($20 + [128]))
	$10 = *($20 + [132])
	if ( $10 ){ goto $label$22 }
	
.LABEL $label$12
	$16 = *($20 + [112])
	if ( ($16 == 0) ){ goto $label$43 }
	$15 = (($20 + [88]) + [28])
	$19 = *($15)
	if ( ((int_32)$19 == (int_32)$16) ){ goto $label$45 }
	
.LOOP $label$46:
	$19 = ($19 + [-24])
	$10 = *($19)
	*($19) = [0]
	if ( ($10 == 0) ){ goto $label$47 }
	if ( ((*($10 + [20]) & [1]) == 0) ){ goto $label$48 }
	CALL $110(*(($10 + [28])))
	
.LABEL $label$48
	if ( ((*($10 + [8]) & [1]) == 0) ){ goto $label$49 }
	CALL $110(*(($10 + [16])))
	
.LABEL $label$49
	CALL $110($10)
	
.LABEL $label$47
	if ( ((int_32)$16 != (int_32)$19) ){ goto $label$46 }
	$10 = *(($20 + [112]))
	goto $label$44 
	
.LABEL $label$45
	$10 = $16
	
.LABEL $label$44
	*($15) = $16
	CALL $110($10)
	
.LABEL $label$43
	$16 = *($20 + [168])
	if ( ($16 == 0) ){ goto $label$8 }
	$15 = ($20 + [172])
	$10 = *($15)
	if ( ((int_32)$10 == (int_32)$16) ){ goto $label$51 }
	
.LOOP $label$52:
	$10 = ($10 + [-24])
	$19 = *($10)
	*($10) = [0]
	if ( ($19 == 0) ){ goto $label$53 }
	if ( ((*($19 + [104]) & [1]) == 0) ){ goto $label$54 }
	CALL $110(*(($19 + [112])))
	
.LABEL $label$54
	CALL $110($19)
	
.LABEL $label$53
	if ( ((int_32)$16 != (int_32)$10) ){ goto $label$52 }
	$10 = *(($20 + [168]))
	goto $label$50 
	
.LABEL $label$51
	$10 = $16
	
.LABEL $label$50
	*($15) = $16
	CALL $110($10)
	
.LABEL $label$8
	*([0] + [4]) = ($20 + [240])
	return (unreachable)
	
.LABEL $label$7
	CALL $111($17)
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [112])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [112])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [128])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $109([80])
	$6 = CALL $51($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4 + [56])
	*($8 + [8]) = $5
	$1 = *($4 + [68])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $44(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL $110(*(($4 + [28])))
	
.LABEL $label$10
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $110(*(($4 + [16])))
	
.LABEL $label$11
	CALL $110($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$22 = (*([0] + [4]) - [112])
	*([0] + [4]) = $22
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [640])
	$4 = ($1 + [8])
	*(($23 = $22) + [16]) = *($4)
	$5 = ($1 + [136])
	*($23 + [24]) = *($5)
	$6 = *($1)
	*($1 + [24]) = (int_64))(*($1 + [24]) - *(*($3)))
	CALL eosio_assert([1], [768])
	*($23 + [32]) = [0]
	*($23) = ($23 + [32])
	*($23 + [44]) = $4
	*($23 + [40]) = $1
	$8 = ($1 + [16])
	*($23 + [48]) = $8
	$7 = ($1 + [24])
	*($23 + [52]) = $7
	$9 = ($1 + [32])
	*($23 + [56]) = $9
	$10 = ($1 + [40])
	*($23 + [60]) = $10
	$11 = ($1 + [48])
	*($23 + [64]) = $11
	$12 = ($1 + [56])
	*($23 + [68]) = $12
	$13 = ($1 + [64])
	*($23 + [72]) = $13
	$14 = ($1 + [72])
	*($23 + [76]) = $14
	$15 = ($1 + [80])
	*($23 + [80]) = $15
	$16 = ($1 + [88])
	*($23 + [84]) = $16
	$17 = ($1 + [96])
	*($23 + [88]) = $17
	$18 = ($1 + [104])
	*($23 + [92]) = $18
	$19 = ($1 + [116])
	*($23 + [96]) = $19
	$20 = ($1 + [120])
	*($23 + [100]) = $20
	$21 = ($1 + [128])
	*($23 + [104]) = $21
	*($23 + [108]) = $5
	CALL $38(($23 + [40]), $23)
	$3 = *($23 + [32])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$22 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$22 = ($22 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $22
	
.LABEL $label$1
	*($23 + [4]) = $22
	*($23) = $22
	*($23 + [8]) = ($22 + $3)
	*($23 + [32]) = $23
	*($23 + [44]) = $4
	*($23 + [48]) = $8
	*($23 + [52]) = $7
	*($23 + [56]) = $9
	*($23 + [60]) = $10
	*($23 + [64]) = $11
	*($23 + [40]) = $1
	*($23 + [68]) = $12
	*($23 + [72]) = $13
	*($23 + [76]) = $14
	*($23 + [80]) = $15
	*($23 + [84]) = $16
	*($23 + [88]) = $17
	*($23 + [92]) = $18
	*($23 + [96]) = $19
	*($23 + [100]) = $20
	*($23 + [104]) = $21
	*($23 + [108]) = $5
	CALL $39(($23 + [40]), ($23 + [32]))
	CALL db_update_i64(*($1 + [148]), $2, $22, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($22)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$22 = (($23 + [16]) + [8])
	*($23 + [40]) = *($4)
	if ( (CALL memcmp(($23 + [16]), ($23 + [40]), [8]) == 0) ){ goto $label$5 }
	$4 = ($1 + [152])
	$3 = *($4)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104000, ($23 + [32]), $6)
	*($4) = $3
	
.LABEL $label$6
	CALL db_idx64_update($3, $2, ($23 + [40]))
	
.LABEL $label$5
	*($23 + [40]) = *($5)
	if ( (CALL memcmp($22, ($23 + [40]), [8]) == 0) ){ goto $label$7 }
	$22 = ($1 + [156])
	$1 = *($22)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104001, ($23 + [32]), $6)
	*($22) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($23 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($23 + [112])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	$24 = (*([0] + [4]) - [112])
	*([0] + [4]) = $24
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [640])
	$4 = ($1 + [8])
	*(($23 = $24) + [16]) = *($4)
	$5 = ($1 + [136])
	*($23 + [24]) = *($5)
	$6 = *($1)
	if ( *(*(*($3) + [4]) + [116]) ){ goto $label$1 }
	*(*($3 + [4])) = [1000000]
	
.LABEL $label$1
	$7 = ($1 + [104])
	CALL $112($7, *($3 + [8]))
	*($1 + [116]) = [1]
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [768])
	*($23 + [32]) = [0]
	*($23) = ($23 + [32])
	*($23 + [44]) = $4
	*($23 + [40]) = $1
	$9 = ($1 + [16])
	*($23 + [48]) = $9
	$10 = ($1 + [24])
	*($23 + [52]) = $10
	$11 = ($1 + [32])
	*($23 + [56]) = $11
	$12 = ($1 + [40])
	*($23 + [60]) = $12
	$13 = ($1 + [48])
	*($23 + [64]) = $13
	$14 = ($1 + [56])
	*($23 + [68]) = $14
	$15 = ($1 + [64])
	*($23 + [72]) = $15
	$16 = ($1 + [72])
	*($23 + [76]) = $16
	$17 = ($1 + [80])
	*($23 + [80]) = $17
	$18 = ($1 + [88])
	*($23 + [84]) = $18
	$19 = ($1 + [96])
	*($23 + [88]) = $19
	*($23 + [92]) = $7
	$8 = ($1 + [116])
	*($23 + [96]) = $8
	$20 = ($1 + [120])
	*($23 + [100]) = $20
	$21 = ($1 + [128])
	*($23 + [104]) = $21
	*($23 + [108]) = $5
	CALL $38(($23 + [40]), $23)
	$22 = *($23 + [32])
	if ( ($22 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($22)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($24 - (($22 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	*($23 + [4]) = $3
	*($23) = $3
	*($23 + [8]) = ($3 + $22)
	*($23 + [32]) = $23
	*($23 + [44]) = $4
	*($23 + [48]) = $9
	*($23 + [52]) = $10
	*($23 + [56]) = $11
	*($23 + [60]) = $12
	*($23 + [64]) = $13
	*($23 + [40]) = $1
	*($23 + [68]) = $14
	*($23 + [72]) = $15
	*($23 + [76]) = $16
	*($23 + [80]) = $17
	*($23 + [84]) = $18
	*($23 + [88]) = $19
	*($23 + [92]) = $7
	*($23 + [96]) = $8
	*($23 + [100]) = $20
	*($23 + [104]) = $21
	*($23 + [108]) = $5
	CALL $39(($23 + [40]), ($23 + [32]))
	CALL db_update_i64(*($1 + [148]), $2, $3, $22)
	if ( ($22 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$3 = (($23 + [16]) + [8])
	*($23 + [40]) = *($4)
	if ( (CALL memcmp(($23 + [16]), ($23 + [40]), [8]) == 0) ){ goto $label$6 }
	$4 = ($1 + [152])
	$22 = *($4)
	if ( ((int_32)$22 > (int_32)[-1]) ){ goto $label$7 }
	$22 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104000, ($23 + [32]), $6)
	*($4) = $22
	
.LABEL $label$7
	CALL db_idx64_update($22, $2, ($23 + [40]))
	
.LABEL $label$6
	*($23 + [40]) = *($5)
	if ( (CALL memcmp($3, ($23 + [40]), [8]) == 0) ){ goto $label$8 }
	$3 = ($1 + [156])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$9 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104001, ($23 + [32]), $6)
	*($3) = $1
	
.LABEL $label$9
	CALL db_idx64_update($1, $2, ($23 + [40]))
	
.LABEL $label$8
	*([0] + [4]) = ($23 + [112])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $109(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL $110(*(($1 + [28])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL $110(*(($1 + [16])))
	
.LABEL $label$12
	CALL $110($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $110($6)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $109(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $109([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $12(($8 + [28]), [8])
	$2 = *($8 + [28])
	CALL eosio_assert(((int_32)(*($2) - $2) > (int_32)[7]), [112])
	CALL memcpy($2, $4, [8])
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $110($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $110($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $110($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $11($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $12($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $13($4, $1)
	CALL $15(CALL $14(CALL $14($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [128])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $109([160])) + [16]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$5 = CALL current_time()
	*($6 + [56]) = (int_64)0
	*($6 + [64]) = (int_64)0
	*($6 + [72]) = (int_64)0
	*($6 + [80]) = (int_64)0
	*($6 + [40]) = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($6 + [48]) = ((int_64)*($6 + [32]) + (int_64)180)
	*($6 + [88]) = (int_64)0
	*($6 + [96]) = (int_64)0
	*($6 + [104]) = (int_64)0
	*($6 + [112]) = (int_64)10000
	*($6 + [120]) = (int_64)1
	*($6 + [128]) = (int_64)1000000
	*($6 + [144]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [32])
	*($8 + [60]) = ($6 + [40])
	*($8 + [64]) = ($6 + [48])
	*($8 + [68]) = ($6 + [56])
	*($8 + [72]) = ($6 + [64])
	*($8 + [76]) = ($6 + [72])
	*($8 + [80]) = ($6 + [80])
	*($8 + [84]) = ($6 + [88])
	*($8 + [88]) = ($6 + [96])
	*($8 + [92]) = ($6 + [104])
	*($8 + [96]) = ($6 + [112])
	*($8 + [100]) = ($6 + [120])
	*($8 + [104]) = ($6 + [128])
	*($8 + [108]) = ($6 + [136])
	CALL $18(($8 + [40]), ($8 + [32]))
	*($6 + [152]) = [-1]
	*($6 + [148]) = $1
	*($6 + [156]) = [-1]
	*($8 + [32]) = $6
	$5 = *($6 + [136])
	*($8 + [40]) = $5
	$7 = *($6 + [148])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $19(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $110($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [112])
	return $6
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [128])
	*([0] + [4]) = $12
	*($12 + [104]) = $1
	$11 = CALL current_time()
	*(($12 + [68])) = [0]
	*(($12 + [72])) = [0]
	*($12 + [52]) = [0]
	*($12 + [56]) = [0]
	*($12 + [60]) = [0]
	*($12 + [64]) = [0]
	*($12 + [40]) = ((CASTING uint_32)(uint_64 ((uint_64)$11 / (uint_64)(int_64)1000000)) + [60])
	*($12 + [76]) = [0]
	*(($12 + [80])) = [0]
	*(($12 + [84])) = [0]
	*($12 + [88]) = [0]
	*(($12 + [92])) = [0]
	*(($12 + [96])) = [0]
	$5 = ($12 + [76])
	$11 = (int_64)0
	$6 = (int_64)59
	$10 = [80]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$6 }
	$9 = *($10)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$9 = ($9 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	*($12 + [24]) = $7
	*($12 + [16]) = $1
	$11 = (int_64)0
	$6 = (int_64)59
	$10 = [96]
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$12 }
	$9 = *($10)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$9 = ($9 + [165])
	goto $label$10 
	
.LABEL $label$12
	$8 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$7 }
	*($12 + [112]) = $7
	*($12 + [8]) = $2
	CALL $8($5, ($12 + [16]), ($12 + [104]), ($12 + [112]), ($12 + [8]))
	$10 = *($3)
	*(($12 + [60])) = $4
	if ( ($10 & [1]) ){ goto $label$14 }
	$10 = ($3 + [1])
	goto $label$13 
	
.LABEL $label$14
	$10 = *($3 + [8])
	
.LABEL $label$13
	$9 = [-1]
	
.LOOP $label$15:
	$3 = ($10 + $9)
	$5 = ($9 + [1])
	$9 = $5
	if ( *(($3 + [1])) ){ goto $label$15 }
	$1 = (CASTING uint_64)(uint_32 $5)
	$11 = (int_64)0
	$8 = (int_64)59
	$7 = (int_64)0
	
.LOOP $label$16:
	$6 = (int_64)0
	if ( ((uint_64)$11 >= (uint_64)$1) ){ goto $label$17 }
	$9 = *($10)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$9 = ($9 + [165])
	goto $label$18 
	
.LABEL $label$19
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$21 }
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	goto $label$20 
	
.LABEL $label$21
	$6 = ((int_64)$6 & (int_64)15)
	
.LABEL $label$20
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$7 = ((int_64)$6 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$16 }
	*($12 + [16]) = $7
	*($12 + [24]) = (int_64)0
	$11 = *($12 + [104])
	CALL $9(($12 + [112]), ($12 + [40]))
	$10 = *($12 + [112])
	CALL send_deferred(($12 + [16]), $11, $10, (*($12 + [116]) - $10), [0])
	$10 = *($12 + [112])
	if ( ($10 == 0) ){ goto $label$22 }
	*($12 + [116]) = $10
	CALL $110($10)
	
.LABEL $label$22
	CALL $10(($12 + [40]))
	*([0] + [4]) = ($12 + [128])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN5eosio8goodluck5delayEv (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	CALL require_auth(*($0))
	*(($10 + [88])) = [0]
	*($10 + [80]) = (int_64)0
	$5 = CALL strlen([16])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$9 }
	*($10 + [80]) = ($5 << [1])
	$3 = (($10 + [80]) | [1])
	$4 = $3
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$3 = (($5 + [16]) & [-16])
	$4 = CALL $109($3)
	*($10 + [80]) = ($3 | [1])
	*($10 + [88]) = $4
	*($10 + [84]) = $5
	$3 = (($10 + [80]) | [1])
	
.LABEL $label$8
	CALL memcpy($4, [16], $5)
	
.LABEL $label$7
	*(($4 + $5)) = [0]
	$5 = ( *($10 + [88]) ? $3 : (*($10 + [80]) & [1]) )
	$4 = [-1]
	
.LOOP $label$10:
	$3 = ($5 + $4)
	$1 = ($4 + [1])
	$4 = $1
	if ( *(($3 + [1])) ){ goto $label$10 }
	$2 = (CASTING uint_64)(uint_32 $1)
	$7 = (int_64)0
	$6 = (int_64)59
	$8 = (int_64)0
	
.LOOP $label$11:
	$9 = (int_64)0
	if ( ((uint_64)$7 >= (uint_64)$2) ){ goto $label$12 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$4 = ($4 + [165])
	goto $label$13 
	
.LABEL $label$14
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$16 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	goto $label$15 
	
.LABEL $label$16
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$15
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$11 }
	*($10 + [104]) = (int_64)0
	*($10 + [96]) = $8
	CALL cancel_deferred(($10 + [96]))
	if ( ((*($10 + [80]) & [1]) == 0) ){ goto $label$17 }
	CALL $110(*(($10 + [88])))
	
.LABEL $label$17
	*(($10 + [72])) = [0]
	*($10 + [64]) = (int_64)0
	$5 = CALL strlen([32])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$20 }
	*($10 + [64]) = ($5 << [1])
	$3 = (($10 + [64]) | [1])
	$4 = $3
	if ( $5 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$3 = (($5 + [16]) & [-16])
	$4 = CALL $109($3)
	*($10 + [64]) = ($3 | [1])
	*($10 + [72]) = $4
	*($10 + [68]) = $5
	$3 = (($10 + [64]) | [1])
	
.LABEL $label$19
	CALL memcpy($4, [32], $5)
	
.LABEL $label$18
	*(($4 + $5)) = [0]
	$5 = ( *($10 + [72]) ? $3 : (*($10 + [64]) & [1]) )
	$4 = [-1]
	
.LOOP $label$21:
	$3 = ($5 + $4)
	$1 = ($4 + [1])
	$4 = $1
	if ( *(($3 + [1])) ){ goto $label$21 }
	$2 = (CASTING uint_64)(uint_32 $1)
	$7 = (int_64)0
	$6 = (int_64)59
	$8 = (int_64)0
	
.LOOP $label$22:
	$9 = (int_64)0
	if ( ((uint_64)$7 >= (uint_64)$2) ){ goto $label$23 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$4 = ($4 + [165])
	goto $label$24 
	
.LABEL $label$25
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$27 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	goto $label$26 
	
.LABEL $label$27
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$26
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$22 }
	*($10 + [104]) = (int_64)0
	*($10 + [96]) = $8
	CALL cancel_deferred(($10 + [96]))
	if ( ((*($10 + [64]) & [1]) == 0) ){ goto $label$28 }
	CALL $110(*(($10 + [72])))
	
.LABEL $label$28
	$4 = ($0 + [48])
	$7 = *(CALL $6($4, CALL $fimport$14(*($0 + [48]), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)) + [48])
	$6 = CALL current_time()
	$9 = *($0)
	if ( ((uint_64)$7 <= (uint_64)((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$36 }
	*(($10 + [56])) = [0]
	*($10 + [48]) = (int_64)0
	$5 = CALL strlen([16])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$35 }
	*($10 + [48]) = ($5 << [1])
	$3 = (($10 + [48]) | [1])
	if ( $5 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	*(($10 + [40])) = [0]
	*($10 + [32]) = (int_64)0
	$5 = CALL strlen([16])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$32 }
	*($10 + [32]) = ($5 << [1])
	$3 = (($10 + [32]) | [1])
	if ( $5 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$35
	$1 = (($5 + [16]) & [-16])
	$3 = CALL $109($1)
	*($10 + [48]) = ($1 | [1])
	*($10 + [56]) = $3
	*($10 + [52]) = $5
	
.LABEL $label$34
	CALL memcpy($3, [16], $5)
	
.LABEL $label$33
	*(($3 + $5)) = [0]
	CALL $7($0, $9, (int_64)1, ($10 + [48]), (int_64))(*(CALL $6($4, CALL $fimport$14(*(($0 + [48])), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)) + [48]) - ((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295)))
	if ( ((*($10 + [48]) & [1]) == 0) ){ goto $label$29 }
	CALL $110(*($10 + [56]))
	goto $label$29 
	
.LABEL $label$32
	$1 = (($5 + [16]) & [-16])
	$3 = CALL $109($1)
	*($10 + [32]) = ($1 | [1])
	*($10 + [40]) = $3
	*($10 + [36]) = $5
	
.LABEL $label$31
	CALL memcpy($3, [16], $5)
	
.LABEL $label$30
	*(($3 + $5)) = [0]
	CALL $7($0, $9, (int_64)1, ($10 + [32]), (int_64)1)
	if ( ((*($10 + [32]) & [1]) == 0) ){ goto $label$29 }
	CALL $110(*($10 + [40]))
	
.LABEL $label$29
	$3 = [0]
	$5 = [0]
	$1 = CALL db_lowerbound_i64(*(($0 + [48])), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$37 }
	$5 = CALL $6($4, $1)
	
.LABEL $label$37
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [48])
	$5 = CALL db_next_i64(*($5 + [148]), ($10 + [96]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$38 }
	$3 = CALL $6($4, $5)
	
.LABEL $label$38
	$7 = *($3 + [48])
	$6 = CALL current_time()
	$9 = *($0)
	if ( ((uint_64)$7 <= (uint_64)((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$46 }
	*(($10 + [24])) = [0]
	*($10 + [16]) = (int_64)0
	$5 = CALL strlen([32])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$45 }
	*($10 + [16]) = ($5 << [1])
	$3 = (($10 + [16]) | [1])
	if ( $5 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	*(($10 + [8])) = [0]
	*($10) = (int_64)0
	$5 = CALL strlen([32])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$42 }
	*($10) = ($5 << [1])
	$4 = ($10 | [1])
	if ( $5 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$45
	$1 = (($5 + [16]) & [-16])
	$3 = CALL $109($1)
	*($10 + [16]) = ($1 | [1])
	*($10 + [24]) = $3
	*($10 + [20]) = $5
	
.LABEL $label$44
	CALL memcpy($3, [32], $5)
	
.LABEL $label$43
	$1 = [0]
	*(($3 + $5)) = [0]
	$5 = [0]
	$3 = CALL db_lowerbound_i64(*(($0 + [48])), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$47 }
	$5 = CALL $6($4, $3)
	
.LABEL $label$47
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [48])
	$5 = CALL db_next_i64(*($5 + [148]), ($10 + [96]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$48 }
	$1 = CALL $6($4, $5)
	
.LABEL $label$48
	CALL $7($0, $9, (int_64)2, ($10 + [16]), (int_64))(*($1 + [48]) - ((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295)))
	if ( ((*($10 + [16]) & [1]) == 0) ){ goto $label$39 }
	CALL $110(*($10 + [24]))
	goto $label$39 
	
.LABEL $label$42
	$3 = (($5 + [16]) & [-16])
	$4 = CALL $109($3)
	*($10) = ($3 | [1])
	*($10 + [8]) = $4
	*($10 + [4]) = $5
	
.LABEL $label$41
	CALL memcpy($4, [32], $5)
	
.LABEL $label$40
	*(($4 + $5)) = [0]
	CALL $7($0, $9, (int_64)2, $10, (int_64)1)
	if ( ((*($10) & [1]) == 0) ){ goto $label$39 }
	CALL $110(*($10 + [8]))
	
.LABEL $label$39
	*([0] + [4]) = ($10 + [112])
	return (unreachable)
	
.LABEL $label$6
	CALL $111(($10 + [80]))
	
.LABEL $label$5
	CALL $111(($10 + [64]))
	
.LABEL $label$4
	CALL $111(($10 + [48]))
	
.LABEL $label$3
	CALL $111(($10 + [32]))
	
.LABEL $label$2
	CALL $111(($10 + [16]))
	
.LABEL $label$1
	CALL $111($10)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [112])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [112])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [112])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $16(CALL $17($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [112])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [112])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $16($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [112])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [112])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [112])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [112])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [112])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $10 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $110($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $110($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $110($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $110($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $110($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $110($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $110($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $110($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $109($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $115($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $110($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [112])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [112])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [112])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [112])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [112])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [112])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	$25 = (*([0] + [4]) - [112])
	*([0] + [4]) = $25
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [640])
	$4 = ($1 + [8])
	*(($24 = $25) + [16]) = *($4)
	$5 = ($1 + [136])
	*($24 + [24]) = *($5)
	$6 = *($1)
	if ( ((int_64)*(*(*($3) + [4]) + [136]) != (int_64)*(*($3 + [4]))) ){ goto $label$2 }
	$20 = *(*($3 + [8]) + [4])
	CALL prints([1392])
	CALL printui(*($20 + [64]))
	*($1 + [128]) = ((int_64)*($1 + [128]) + (int_64)*(*(*($3 + [8]) + [4]) + [64]))
	*($1 + [88]) = ((int_64)*($1 + [88]) + (int_64)*(*(*($3 + [8]) + [4]) + [64]))
	$22 = ($1 + [88])
	$21 = ($1 + [128])
	$23 = *($1)
	goto $label$1 
	
.LABEL $label$2
	$21 = ($1 + [128])
	$22 = ($1 + [88])
	$23 = $6
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)$23), [768])
	*($24 + [32]) = [0]
	*($24) = ($24 + [32])
	*($24 + [44]) = $4
	*($24 + [40]) = $1
	$7 = ($1 + [16])
	*($24 + [48]) = $7
	$8 = ($1 + [24])
	*($24 + [52]) = $8
	$9 = ($1 + [32])
	*($24 + [56]) = $9
	$10 = ($1 + [40])
	*($24 + [60]) = $10
	$11 = ($1 + [48])
	*($24 + [64]) = $11
	$12 = ($1 + [56])
	*($24 + [68]) = $12
	$13 = ($1 + [64])
	*($24 + [72]) = $13
	$14 = ($1 + [72])
	*($24 + [76]) = $14
	$15 = ($1 + [80])
	*($24 + [80]) = $15
	*($24 + [84]) = $22
	$16 = ($1 + [96])
	*($24 + [88]) = $16
	$17 = ($1 + [104])
	*($24 + [92]) = $17
	$18 = ($1 + [116])
	*($24 + [96]) = $18
	$19 = ($1 + [120])
	*($24 + [100]) = $19
	*($24 + [104]) = $21
	*($24 + [108]) = $5
	CALL $38(($24 + [40]), $24)
	$20 = *($24 + [32])
	if ( ($20 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($20)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($25 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($24 + [4]) = $3
	*($24) = $3
	*($24 + [8]) = ($3 + $20)
	*($24 + [32]) = $24
	*($24 + [44]) = $4
	*($24 + [48]) = $7
	*($24 + [52]) = $8
	*($24 + [56]) = $9
	*($24 + [60]) = $10
	*($24 + [64]) = $11
	*($24 + [40]) = $1
	*($24 + [68]) = $12
	*($24 + [72]) = $13
	*($24 + [76]) = $14
	*($24 + [80]) = $15
	*($24 + [84]) = $22
	*($24 + [88]) = $16
	*($24 + [92]) = $17
	*($24 + [96]) = $18
	*($24 + [100]) = $19
	*($24 + [104]) = $21
	*($24 + [108]) = $5
	CALL $39(($24 + [40]), ($24 + [32]))
	CALL db_update_i64(*($1 + [148]), $2, $3, $20)
	if ( ($20 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$3 = (($24 + [16]) + [8])
	*($24 + [40]) = *($4)
	if ( (CALL memcmp(($24 + [16]), ($24 + [40]), [8]) == 0) ){ goto $label$7 }
	$4 = ($1 + [152])
	$20 = *($4)
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$8 }
	$20 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104000, ($24 + [32]), $6)
	*($4) = $20
	
.LABEL $label$8
	CALL db_idx64_update($20, $2, ($24 + [40]))
	
.LABEL $label$7
	*($24 + [40]) = *($5)
	if ( (CALL memcmp($3, ($24 + [40]), [8]) == 0) ){ goto $label$9 }
	$3 = ($1 + [156])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$10 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104001, ($24 + [32]), $6)
	*($3) = $1
	
.LABEL $label$10
	CALL db_idx64_update($1, $2, ($24 + [40]))
	
.LABEL $label$9
	*([0] + [4]) = ($24 + [112])
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [68])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $109(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $110($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $110($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$11 = (*([0] + [4]) - [80])
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [640])
	*($1 + [32]) = (*($1 + [32]) + [1])
	*(($12 = $11) + [24]) = *($1)
	$4 = ($1 + [48])
	*($12 + [32]) = *($4)
	$6 = *($1 + [56])
	*($4) = *(*($3))
	CALL eosio_assert([1], [768])
	*($12 + [40]) = [0]
	*($12 + [8]) = ($12 + [40])
	$8 = ($1 + [8])
	*($12 + [52]) = $8
	*($12 + [48]) = $1
	$9 = ($1 + [20])
	*($12 + [56]) = $9
	$7 = ($1 + [32])
	*($12 + [60]) = $7
	$10 = ($1 + [40])
	*($12 + [64]) = $10
	*($12 + [68]) = $4
	$5 = ($1 + [56])
	*($12 + [72]) = $5
	CALL $49(($12 + [48]), ($12 + [8]))
	$3 = *($12 + [40])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$11 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$11 = ($11 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $11
	
.LABEL $label$1
	*($12 + [12]) = $11
	*($12 + [8]) = $11
	*($12 + [16]) = ($11 + $3)
	*($12 + [40]) = ($12 + [8])
	*($12 + [52]) = $8
	*($12 + [56]) = $9
	*($12 + [60]) = $7
	*($12 + [64]) = $10
	*($12 + [68]) = $4
	*($12 + [72]) = $5
	*($12 + [48]) = $1
	CALL $50(($12 + [48]), ($12 + [40]))
	CALL db_update_i64(*($1 + [68]), $2, $11, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($11)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$11 = (($12 + [24]) + [8])
	*($12 + [48]) = *($1)
	if ( (CALL memcmp(($12 + [24]), ($12 + [48]), [8]) == 0) ){ goto $label$5 }
	$8 = ($1 + [72])
	$3 = *($8)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3851386921959817216, ($12 + [40]), $6)
	*($8) = $3
	
.LABEL $label$6
	CALL db_idx64_update($3, $2, ($12 + [48]))
	
.LABEL $label$5
	*($12 + [48]) = *($4)
	if ( (CALL memcmp($11, ($12 + [48]), [8]) == 0) ){ goto $label$7 }
	$11 = ($1 + [76])
	$1 = *($11)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3851386921959817215, ($12 + [40]), $6)
	*($11) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($12 + [48]))
	
.LABEL $label$7
	*([0] + [4]) = ($12 + [80])
}

int_32 .FUNC $59 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [48])
	$6 = *($0 + [4])
	$7 = *(($6 + [76]))
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-3851386921959817215, ($9 + [8]), *($6 + [56]))
	*((*(($0 + [4])) + [76])) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7) + [56]) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$2), [224])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $47($2, CALL $fimport$6(*($2), *($2 + [8]), (int_64)-3851386921959817216, $3))
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$2), [224])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [76])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $40(*($1), *($0 + [4]))
	CALL $40(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [112])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [20]) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	*(($0 + [24])) = [0]
	$3 = ($0 + [20])
	$4 = CALL strlen([496])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($3) = ($4 << [1])
	$6 = ($3 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($4 + [16]) & [-16])
	$6 = CALL $109($5)
	*(($0 + [20])) = ($5 | [1])
	*(($0 + [28])) = $6
	*(($0 + [24])) = $4
	
.LABEL $label$3
	CALL memcpy($6, [496], $4)
	
.LABEL $label$2
	*(($6 + $4)) = [0]
	*($0 + [40]) = (int_64)0
	*($0 + [32]) = [1]
	*($0 + [48]) = (int_64)1
	*($0 + [64]) = $1
	*($7 + [8]) = *($2 + [4])
	*($7 + [20]) = ($0 + [8])
	*($7 + [16]) = $0
	*($7 + [24]) = $3
	*($7 + [28]) = ($0 + [32])
	*($7 + [32]) = ($0 + [40])
	*($7 + [36]) = ($0 + [48])
	*($7 + [40]) = ($0 + [56])
	CALL $52(($7 + [16]), ($7 + [8]))
	$4 = *(*($2 + [8]))
	*($0 + [72]) = [-1]
	*($0 + [68]) = $4
	*(($0 + [76])) = [-1]
	*([0] + [4]) = ($7 + [48])
	return $0
	
.LABEL $label$1
	CALL $111($3)
	return (unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $31(*($1), *($0 + [4]))
	CALL $31(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [160])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC _ZN5eosio8goodluck8teamjoinEyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$21 = (*([0] + [4]) - [224])
	*([0] + [4]) = $21
	*($21 + [176]) = $1
	*($21 + [168]) = $3
	CALL require_auth($1)
	if ( ((int_64)$3 == (int_64)2) ){ goto $label$3 }
	*(($21 + [160])) = [0]
	*($21 + [144]) = (int_64)-1
	*($21 + [152]) = (int_64)0
	$3 = *($0)
	*($21 + [128]) = $3
	*($21 + [136]) = $3
	*($21 + [164]) = [0]
	*($21 + [120]) = ($21 + [128])
	CALL $54(($21 + [56]), ($21 + [120]), ($21 + [168]))
	$20 = *($21 + [60])
	if ( ($20 == 0) ){ goto $label$7 }
	if ( ((int_64)*($21 + [168]) != (int_64)*($20 + [48])) ){ goto $label$7 }
	$3 = *($21 + [56])
	*($21 + [112]) = $3
	$12 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ($12) == 0) ){ goto $label$5 }
	$6 = ($0 + [32])
	$5 = ($0 + [8])
	$4 = ($2 + [1])
	$7 = (($21 + [56]) + [24])
	$13 = ($2 + [4])
	$14 = (($21 + [56]) + [28])
	$15 = (($21 + [56]) + [36])
	$19 = ($0 + [40])
	goto $label$6 
	
.LABEL $label$7
	*($21 + [116]) = [0]
	*($21 + [112]) = ($21 + [120])
	$11 = *($21 + [152])
	if ( $11 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	
.LOOP $label$8:
	$20 = ($20 & [1])
	$20 = *($2)
	$8 = ($20 & [1])
	$20 = *($12 + [8])
	$11 = uint_32($20 >> [1])
	$9 = ( *(($12 + [12])) ? $11 : $8 )
	if ( ((int_32)$9 != (int_32)( *($13) ? uint_32($20 >> [1]) : $20 )) ){ goto $label$9 }
	$10 = ( *(($2 + [8])) ? $4 : $20 )
	if ( $8 ){ goto $label$11 }
	if ( ($9 == 0) ){ goto $label$10 }
	$20 = [0]
	
.LOOP $label$12:
	if ( ((int_32)*((($12 + $20) + [9])) != (int_32)*(($10 + $20))) ){ goto $label$9 }
	$20 = ($20 + [1])
	if ( ((int_32)$11 != (int_32)$20) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ($9 == 0) ){ goto $label$10 }
	if ( CALL memcmp(( *(($12 + [16])) ? (($12 + [8]) + [1]) : $8 ), $10, $9) ){ goto $label$9 }
	$12 = *($21 + [116])
	
.LABEL $label$10
	CALL $116(($21 + [96]), ($12 + [8]))
	*((($21 + [56]) + [16])) = (int_64)-1
	*($7) = [0]
	*((($21 + [56]) + [8])) = *($21 + [176])
	*($21 + [56]) = *($0)
	*($14) = [0]
	*(($10 = (($21 + [56]) + [32]))) = [0]
	*($15) = [0]
	*($21 + [48]) = ($21 + [56])
	CALL $21($21, ($21 + [48]), ($21 + [176]))
	$20 = *($21 + [4])
	if ( ($20 == 0) ){ goto $label$16 }
	if ( ((int_64)*($21 + [176]) != (int_64)*($20 + [8])) ){ goto $label$16 }
	if ( ($20 == 0) ){ goto $label$16 }
	$12 = *($20 + [104])
	if ( (($12 & [1]) == 0) ){ goto $label$18 }
	if ( *(($20 + [108])) ){ goto $label$15 }
	goto $label$17 
	
.LABEL $label$18
	if ( uint_32($12 >> [1]) ){ goto $label$15 }
	
.LABEL $label$17
	$3 = *($0)
	*($21) = ($21 + [96])
	CALL eosio_assert([1], [544])
	CALL $57(*($21 + [48]), $20, $3, $21)
	*(($21 + [16])) = (int_64)-1
	*(($10 = ($21 + [24]))) = (int_64)0
	*(($21 + [32])) = [0]
	$3 = *($0)
	*(($21 + [8])) = $3
	*($21) = $3
	*(($21 + [36])) = [0]
	*($21 + [216]) = $21
	CALL $54(($21 + [192]), ($21 + [216]), ($21 + [168]))
	$20 = *($21 + [196])
	if ( ($20 == 0) ){ goto $label$19 }
	if ( ((int_64)*($21 + [168]) != (int_64)*($20 + [48])) ){ goto $label$19 }
	if ( ($20 == 0) ){ goto $label$19 }
	$3 = *($0)
	*($21 + [192]) = ($21 + [168])
	CALL eosio_assert([1], [544])
	CALL $58(*($21 + [216]), $20, $3, ($21 + [192]))
	
.LABEL $label$19
	$11 = *($10)
	if ( ($11 == 0) ){ goto $label$15 }
	$8 = ($21 + [28])
	$12 = *($8)
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$21 }
	
.LOOP $label$22:
	$12 = ($12 + [-24])
	$20 = *($12)
	*($12) = [0]
	if ( ($20 == 0) ){ goto $label$23 }
	if ( ((*($20 + [20]) & [1]) == 0) ){ goto $label$24 }
	CALL $110(*(($20 + [28])))
	
.LABEL $label$24
	if ( ((*($20 + [8]) & [1]) == 0) ){ goto $label$25 }
	CALL $110(*(($20 + [16])))
	
.LABEL $label$25
	CALL $110($20)
	
.LABEL $label$23
	if ( ((int_32)$11 != (int_32)$12) ){ goto $label$22 }
	$20 = *($10)
	goto $label$20 
	
.LABEL $label$21
	$20 = $11
	
.LABEL $label$20
	*($8) = $11
	CALL $110($20)
	$11 = *($7)
	if ( $11 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$3 = *($0)
	*(($9 = ($21 + [8]))) = ($21 + [168])
	*(($16 = ($21 + [12]))) = ($21 + [96])
	*($21 + [4]) = ($21 + [176])
	*($21) = ($21 + [56])
	*($21 + [216]) = $3
	CALL eosio_assert(((int_64)*($21 + [56]) == (int_64)CALL $fimport$3()), [832])
	*(($17 = (($21 + [192]) + [8]))) = ($21 + [216])
	*($21 + [196]) = $21
	*($21 + [192]) = ($21 + [56])
	*(($20 = CALL $109([160])) + [24]) = (int_64)0
	*($20 + [16]) = (int_64)0
	*($20 + [32]) = (int_64)0
	*($20 + [40]) = (int_64)0
	*($20 + [48]) = (int_64)0
	*($20 + [56]) = (int_64)0
	*($20 + [64]) = (int_64)0
	*($20 + [72]) = (int_64)0
	*($20 + [80]) = (int_64)0
	*($20 + [88]) = (int_64)0
	*($20 + [96]) = (int_64)0
	*(($20 + [112])) = [0]
	*($20 + [104 align=4]) = (int_64)0
	$8 = ($20 + [104])
	$12 = CALL strlen([496])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$28 }
	*($8) = ($12 << [1])
	$11 = ($20 + [105])
	if ( $12 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$18 = (($12 + [16]) & [-16])
	$11 = CALL $109($18)
	*($8) = ($18 | [1])
	*($20 + [112]) = $11
	*($20 + [108]) = $12
	
.LABEL $label$27
	CALL memcpy($11, [496], $12)
	
.LABEL $label$26
	*(($11 + $12)) = [0]
	*($20 + [120]) = (int_64)0
	*($20 + [116]) = [0]
	*($20 + [128]) = (int_64)0
	*($20 + [136]) = (int_64)1
	*($20 + [144]) = ($21 + [56])
	CALL $55(($21 + [192]), $20)
	*($21 + [208]) = $20
	$3 = *($20)
	*($21 + [192]) = $3
	$11 = *($20 + [148])
	*($21 + [188]) = $11
	$12 = *($14)
	if ( ((uint_32)$12 >= (uint_32)*($10)) ){ goto $label$30 }
	*($12 + [8]) = $3
	*($12 + [16]) = $11
	*($21 + [208]) = [0]
	*($12) = $20
	*($14) = ($12 + [24])
	goto $label$29 
	
.LABEL $label$30
	CALL $29($7, ($21 + [208]), ($21 + [192]), ($21 + [188]))
	
.LABEL $label$29
	$20 = *($21 + [208])
	*($21 + [208]) = [0]
	if ( ($20 == 0) ){ goto $label$31 }
	if ( ((*($20 + [104]) & [1]) == 0) ){ goto $label$32 }
	CALL $110(*(($20 + [112])))
	
.LABEL $label$32
	CALL $110($20)
	
.LABEL $label$31
	$3 = *($0)
	*($9) = ($21 + [168])
	*($16) = ($21 + [96])
	*($21 + [4]) = ($21 + [176])
	*($21) = ($21 + [56])
	*($21 + [216]) = $3
	CALL eosio_assert(((int_64)*($21 + [56]) == (int_64)CALL $fimport$3()), [832])
	*($17) = ($21 + [216])
	*($21 + [196]) = $21
	*($21 + [192]) = ($21 + [56])
	*(($20 = CALL $109([160])) + [24]) = (int_64)0
	*($20 + [16]) = (int_64)0
	*($20 + [32]) = (int_64)0
	*($20 + [40]) = (int_64)0
	*($20 + [48]) = (int_64)0
	*($20 + [56]) = (int_64)0
	*($20 + [64]) = (int_64)0
	*($20 + [72]) = (int_64)0
	*($20 + [80]) = (int_64)0
	*($20 + [88]) = (int_64)0
	*($20 + [96]) = (int_64)0
	*(($20 + [112])) = [0]
	*($20 + [104 align=4]) = (int_64)0
	$8 = ($20 + [104])
	$12 = CALL strlen([496])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$35 }
	*($8) = ($12 << [1])
	$11 = ($20 + [105])
	if ( $12 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$9 = (($12 + [16]) & [-16])
	$11 = CALL $109($9)
	*($8) = ($9 | [1])
	*($20 + [112]) = $11
	*($20 + [108]) = $12
	
.LABEL $label$34
	CALL memcpy($11, [496], $12)
	
.LABEL $label$33
	*(($11 + $12)) = [0]
	*($20 + [120]) = (int_64)0
	*($20 + [116]) = [0]
	*($20 + [128]) = (int_64)0
	*($20 + [136]) = (int_64)1
	*($20 + [144]) = ($21 + [56])
	CALL $56(($21 + [192]), $20)
	*($21 + [208]) = $20
	$3 = *($20)
	*($21 + [192]) = $3
	$11 = *($20 + [148])
	*($21 + [188]) = $11
	$12 = *($14)
	if ( ((uint_32)$12 >= (uint_32)*($10)) ){ goto $label$37 }
	*($12 + [8]) = $3
	*($12 + [16]) = $11
	*($21 + [208]) = [0]
	*($12) = $20
	*($14) = ($12 + [24])
	goto $label$36 
	
.LABEL $label$37
	CALL $29($7, ($21 + [208]), ($21 + [192]), ($21 + [188]))
	
.LABEL $label$36
	$20 = *($21 + [208])
	*($21 + [208]) = [0]
	if ( ($20 == 0) ){ goto $label$38 }
	if ( ((*($20 + [104]) & [1]) == 0) ){ goto $label$39 }
	CALL $110(*(($20 + [112])))
	
.LABEL $label$39
	CALL $110($20)
	
.LABEL $label$38
	$1 = *($0)
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$3()), [832])
	*(($20 = CALL $109([24])) + [8]) = $5
	*($20) = *($21 + [176])
	CALL eosio_assert([1], [112])
	CALL memcpy($21, $20, [8])
	$3 = *($20)
	$11 = CALL db_store_i64(*(($0 + [16])), (int_64)-4455936897818034176, $1, $3, $21, [8])
	*($20 + [12]) = $11
	$12 = ($0 + [24])
	if ( (uint_64)($3 <= *($12)) ){ goto $label$40 }
	*($12) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$40
	*($21 + [192]) = $20
	$3 = *($20)
	*($21) = $3
	*($21 + [216]) = $11
	$10 = ($0 + [36])
	$12 = *($10)
	if ( ((uint_32)$12 >= (uint_32)*($19)) ){ goto $label$42 }
	*($12 + [8]) = $3
	*($12 + [16]) = $11
	*($21 + [192]) = [0]
	*($12) = $20
	*($10) = ($12 + [24])
	goto $label$41 
	
.LABEL $label$42
	CALL $26($6, ($21 + [192]), $21, ($21 + [216]))
	
.LABEL $label$41
	$20 = *($21 + [192])
	*($21 + [192]) = [0]
	if ( ($20 == 0) ){ goto $label$15 }
	CALL $110($20)
	
.LABEL $label$15
	$11 = *($7)
	if ( ($11 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$20 = *($14)
	if ( ((int_32)$20 == (int_32)$11) ){ goto $label$44 }
	
.LOOP $label$45:
	$20 = ($20 + [-24])
	$12 = *($20)
	*($20) = [0]
	if ( ($12 == 0) ){ goto $label$46 }
	if ( ((*($12 + [104]) & [1]) == 0) ){ goto $label$47 }
	CALL $110(*(($12 + [112])))
	
.LABEL $label$47
	CALL $110($12)
	
.LABEL $label$46
	if ( ((int_32)$11 != (int_32)$20) ){ goto $label$45 }
	$20 = *($7)
	goto $label$43 
	
.LABEL $label$44
	$20 = $11
	
.LABEL $label$43
	*($14) = $11
	CALL $110($20)
	
.LABEL $label$13
	if ( ((*($21 + [96]) & [1]) == 0) ){ goto $label$9 }
	CALL $110(*((($21 + [96]) + [8])))
	
.LABEL $label$9
	CALL $59(($21 + [112]))
	$12 = *($21 + [116])
	if ( $12 ){ goto $label$8 }
	
.LABEL $label$5
	$11 = *($21 + [152])
	if ( ($11 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$10 = (($21 + [128]) + [28])
	$12 = *($10)
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$49 }
	
.LOOP $label$50:
	$12 = ($12 + [-24])
	$20 = *($12)
	*($12) = [0]
	if ( ($20 == 0) ){ goto $label$51 }
	if ( ((*($20 + [20]) & [1]) == 0) ){ goto $label$52 }
	CALL $110(*(($20 + [28])))
	
.LABEL $label$52
	if ( ((*($20 + [8]) & [1]) == 0) ){ goto $label$53 }
	CALL $110(*(($20 + [16])))
	
.LABEL $label$53
	CALL $110($20)
	
.LABEL $label$51
	if ( ((int_32)$11 != (int_32)$12) ){ goto $label$50 }
	$20 = *(($21 + [152]))
	goto $label$48 
	
.LABEL $label$49
	$20 = $11
	
.LABEL $label$48
	*($10) = $11
	CALL $110($20)
	
.LABEL $label$3
	*([0] + [4]) = ($21 + [224])
	return (unreachable)
	
.LABEL $label$2
	CALL $111($8)
	
.LABEL $label$1
	CALL $111($8)
	(unreachable)
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-3851386921959817215, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2) + [56]) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)$4), [224])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $47($4, CALL $fimport$6(*($4), *($4 + [8]), (int_64)-3851386921959817216, $5))
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)$4), [224])
	
.LABEL $label$4
	*(($2 + [76])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC _ZN5eosio8goodluck8withdrawEyNS_5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	*($5 + [72]) = $1
	CALL require_auth($1)
	*(($5 + [64])) = [0]
	*($5 + [40]) = $1
	*($5 + [48]) = (int_64)-1
	*($5 + [56]) = (int_64)0
	*($5 + [32]) = *($0)
	*($5 + [68]) = [0]
	*($5 + [24]) = ($5 + [32])
	CALL $21($5, ($5 + [24]), ($5 + [72]))
	$4 = *($5 + [4])
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((int_64)*($5 + [72]) != (int_64)*($4 + [8])) ){ goto $label$2 }
	$1 = *($5)
	*($5 + [16]) = $1
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($4) == 0) ){ goto $label$1 }
	$3 = ($5 + [8])
	
.LOOP $label$3:
	if ( (uint_64)(*($4 + [128]) <= *($2)) ){ goto $label$1 }
	$1 = *($0)
	*($5 + [4]) = $0
	*($5) = $2
	*($3) = ($5 + [16])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [544])
	CALL $35(*($5 + [24]), $4, $1, $5)
	CALL $22(($5 + [16]))
	$4 = *($5 + [20])
	if ( $4 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($5 + [20]) = [0]
	*($5 + [16]) = ($5 + [24])
	
.LABEL $label$1
	$2 = *($5 + [56])
	if ( ($2 == 0) ){ goto $label$4 }
	$3 = ($5 + [60])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	if ( ((*($0 + [104]) & [1]) == 0) ){ goto $label$9 }
	CALL $110(*(($0 + [112])))
	
.LABEL $label$9
	CALL $110($0)
	
.LABEL $label$8
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$7 }
	$4 = *(($5 + [56]))
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($3) = $2
	CALL $110($4)
	
.LABEL $label$4
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	$26 = (*([0] + [4]) - [96])
	$25 = $26
	*([0] + [4]) = $26
	$2 = *($0)
	$18 = *($0 + [4])
	$24 = *($18)
	$19 = *($24 + [16])
	if ( ((int_64)$19 != (int_64)-1) ){ goto $label$1 }
	$19 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($24), *($24 + [8]), (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $27($24, $4)
	*($25 + [28]) = [0]
	*($25 + [24]) = $24
	$19 = *(*(CALL $60(($25 + [24])) + [4]))
	$19 = ( (int_64)-2 ? ((int_64)$19 + (int_64)1) : ((uint_64)$19 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($24 + [16])) = $19
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($19 <= (int_64)-2), [928])
	$19 = *(($24 + [16]))
	*($1 + [136]) = (int_64)2
	*($1) = $19
	*($1 + [8]) = *(*($18 + [4]))
	$4 = ($1 + [8])
	$3 = ($1 + [136])
	if ( ((int_64)*(*($18 + [8])) != (int_64)2) ){ goto $label$4 }
	$23 = ($1 + [104])
	CALL $112($23, *($18 + [12]))
	*($1 + [116]) = [1]
	$22 = ($1 + [116])
	goto $label$3 
	
.LABEL $label$4
	$22 = ($1 + [116])
	$23 = ($1 + [104])
	
.LABEL $label$3
	*($25 + [16]) = [0]
	*($25) = ($25 + [16])
	*($25 + [28]) = $4
	*($25 + [24]) = $1
	$5 = ($1 + [16])
	*($25 + [32]) = $5
	$6 = ($1 + [24])
	*($25 + [36]) = $6
	$7 = ($1 + [32])
	*($25 + [40]) = $7
	$8 = ($1 + [40])
	*($25 + [44]) = $8
	$9 = ($1 + [48])
	*($25 + [48]) = $9
	$10 = ($1 + [56])
	*($25 + [52]) = $10
	$11 = ($1 + [64])
	*($25 + [56]) = $11
	$12 = ($1 + [72])
	*($25 + [60]) = $12
	$13 = ($1 + [80])
	*($25 + [64]) = $13
	$14 = ($1 + [88])
	*($25 + [68]) = $14
	$15 = ($1 + [96])
	*($25 + [72]) = $15
	*($25 + [76]) = $23
	*($25 + [80]) = $22
	$16 = ($1 + [120])
	*($25 + [84]) = $16
	$17 = ($1 + [128])
	*($25 + [88]) = $17
	*($25 + [92]) = $3
	CALL $38(($25 + [24]), $25)
	$18 = *($25 + [16])
	if ( ($18 <= [513]) ){ goto $label$6 }
	$24 = CALL malloc($18)
	goto $label$5 
	
.LABEL $label$6
	$24 = ($26 - (($18 + [15]) & [-16]))
	*([0] + [4]) = $24
	
.LABEL $label$5
	*($25 + [4]) = $24
	*($25) = $24
	*($25 + [8]) = ($24 + $18)
	*($25 + [16]) = $25
	*($25 + [28]) = $4
	*($25 + [24]) = $1
	*($25 + [32]) = $5
	*($25 + [36]) = $6
	*($25 + [40]) = $7
	*($25 + [44]) = $8
	*($25 + [48]) = $9
	*($25 + [52]) = $10
	*($25 + [56]) = $11
	*($25 + [60]) = $12
	*($25 + [64]) = $13
	*($25 + [68]) = $14
	*($25 + [72]) = $15
	*($25 + [76]) = $23
	*($25 + [80]) = $22
	*($25 + [84]) = $16
	*($25 + [88]) = $17
	*($25 + [92]) = $3
	CALL $39(($25 + [24]), ($25 + [16]))
	$19 = *($1)
	*($1 + [148]) = CALL db_store_i64(*($2 + [8]), (int_64)3607749778735104000, *(*($0 + [8])), $19, $24, $18)
	if ( ($18 <= [513]) ){ goto $label$7 }
	CALL free($24)
	
.LABEL $label$7
	if ( (uint_64)($19 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$19 + (int_64)1) : ((uint_64)$19 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$24 = ($2 + [8])
	$19 = *($24)
	$0 = *(($0 + [8]))
	$20 = *($0)
	$21 = *($1)
	*($25 + [24]) = *(($1 + [8]))
	*($1 + [152]) = CALL db_idx64_store($19, (int_64)3607749778735104000, $20, $21, ($25 + [24]))
	$19 = *($0)
	$20 = *($24)
	$21 = *($1)
	*($25 + [24]) = *(($1 + [136]))
	*(($1 + [156])) = CALL db_idx64_store($20, (int_64)3607749778735104001, $19, $21, ($25 + [24]))
	*([0] + [4]) = ($25 + [96])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$22 = (*([0] + [4]) - [112])
	*([0] + [4]) = $22
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [640])
	$4 = ($1 + [8])
	*(($23 = $22) + [16]) = *($4)
	$5 = ($1 + [136])
	*($23 + [24]) = *($5)
	$6 = *($1)
	$7 = ($1 + [104])
	CALL $112($7, *($3))
	*($1 + [116]) = [1]
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [768])
	*($23 + [32]) = [0]
	*($23) = ($23 + [32])
	*($23 + [44]) = $4
	*($23 + [40]) = $1
	$9 = ($1 + [16])
	*($23 + [48]) = $9
	$10 = ($1 + [24])
	*($23 + [52]) = $10
	$11 = ($1 + [32])
	*($23 + [56]) = $11
	$12 = ($1 + [40])
	*($23 + [60]) = $12
	$13 = ($1 + [48])
	*($23 + [64]) = $13
	$14 = ($1 + [56])
	*($23 + [68]) = $14
	$15 = ($1 + [64])
	*($23 + [72]) = $15
	$16 = ($1 + [72])
	*($23 + [76]) = $16
	$17 = ($1 + [80])
	*($23 + [80]) = $17
	$18 = ($1 + [88])
	*($23 + [84]) = $18
	$19 = ($1 + [96])
	*($23 + [88]) = $19
	*($23 + [92]) = $7
	$8 = ($1 + [116])
	*($23 + [96]) = $8
	$20 = ($1 + [120])
	*($23 + [100]) = $20
	$21 = ($1 + [128])
	*($23 + [104]) = $21
	*($23 + [108]) = $5
	CALL $38(($23 + [40]), $23)
	$3 = *($23 + [32])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$22 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$22 = ($22 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $22
	
.LABEL $label$1
	*($23 + [4]) = $22
	*($23) = $22
	*($23 + [8]) = ($22 + $3)
	*($23 + [32]) = $23
	*($23 + [44]) = $4
	*($23 + [48]) = $9
	*($23 + [52]) = $10
	*($23 + [56]) = $11
	*($23 + [60]) = $12
	*($23 + [64]) = $13
	*($23 + [40]) = $1
	*($23 + [68]) = $14
	*($23 + [72]) = $15
	*($23 + [76]) = $16
	*($23 + [80]) = $17
	*($23 + [84]) = $18
	*($23 + [88]) = $19
	*($23 + [92]) = $7
	*($23 + [96]) = $8
	*($23 + [100]) = $20
	*($23 + [104]) = $21
	*($23 + [108]) = $5
	CALL $39(($23 + [40]), ($23 + [32]))
	CALL db_update_i64(*($1 + [148]), $2, $22, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($22)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$22 = (($23 + [16]) + [8])
	*($23 + [40]) = *($4)
	if ( (CALL memcmp(($23 + [16]), ($23 + [40]), [8]) == 0) ){ goto $label$5 }
	$4 = ($1 + [152])
	$3 = *($4)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104000, ($23 + [32]), $6)
	*($4) = $3
	
.LABEL $label$6
	CALL db_idx64_update($3, $2, ($23 + [40]))
	
.LABEL $label$5
	*($23 + [40]) = *($5)
	if ( (CALL memcmp($22, ($23 + [40]), [8]) == 0) ){ goto $label$7 }
	$22 = ($1 + [156])
	$1 = *($22)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104001, ($23 + [32]), $6)
	*($22) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($23 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($23 + [112])
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $109($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $109(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $110($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_64 $25
	int_64 $26
	int_64 $27
	int_64 $28
	int_64 $29
	int_64 $30
	int_32 $31
	int_32 $32
	$32 = (*([0] + [4]) - [176])
	*([0] + [4]) = $32
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [640])
	$4 = ($1 + [8])
	*(($31 = $32)) = *($4)
	$5 = ($1 + [136])
	*($31 + [8]) = *($5)
	$7 = *($1)
	$8 = *($3 + [4])
	*($1 + [128]) = (int_64))(*($1 + [128]) - *(*($3)))
	$26 = (int_64)0
	*($1 + [56]) = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [72]) = (int_64)0
	*($1 + [80]) = (int_64)0
	*($1 + [88]) = (int_64)0
	*($1 + [96]) = (int_64)0
	$15 = ($1 + [96])
	$14 = ($1 + [88])
	$13 = ($1 + [80])
	$12 = ($1 + [72])
	$11 = ($1 + [64])
	$10 = ($1 + [56])
	$9 = ($1 + [128])
	$6 = ($31 + [8])
	$16 = *($8)
	$25 = (int_64)59
	$24 = [80]
	$27 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$26 > (uint_64)(int_64)5) ){ goto $label$6 }
	$17 = *($24)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$17 = ($17 + [165])
	goto $label$4 
	
.LABEL $label$6
	$28 = (int_64)0
	if ( ((uint_64)$26 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$28 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$28 = ((int_64)((int_64)$28 & (int_64)31) << (int_64)((int_64)$25 & (int_64)4294967295))
	
.LABEL $label$2
	$24 = ($24 + [1])
	$26 = ((int_64)$26 + (int_64)1)
	$27 = ((int_64)$28 | (int_64)$27)
	$25 = ((int_64)$25 + (int_64)-5)
	if ( ((int_64)$25 != (int_64)-6) ){ goto $label$1 }
	$26 = (int_64)0
	$25 = (int_64)59
	$24 = [704]
	$29 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$26 > (uint_64)(int_64)10) ){ goto $label$12 }
	$17 = *($24)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$17 = ($17 + [165])
	goto $label$10 
	
.LABEL $label$12
	$28 = (int_64)0
	if ( ((int_64)$26 == (int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$28 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$28 = ((int_64)((int_64)$28 & (int_64)31) << (int_64)((int_64)$25 & (int_64)4294967295))
	
.LABEL $label$8
	$24 = ($24 + [1])
	$25 = ((int_64)$25 + (int_64)-5)
	$29 = ((int_64)$28 | (int_64)$29)
	$26 = ((int_64)$26 + (int_64)1)
	if ( ((int_64)$26 != (int_64)13) ){ goto $label$7 }
	$26 = (int_64)0
	$25 = (int_64)59
	$24 = [720]
	$30 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$26 > (uint_64)(int_64)7) ){ goto $label$18 }
	$17 = *($24)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$17 = ($17 + [165])
	goto $label$16 
	
.LABEL $label$18
	$28 = (int_64)0
	if ( ((uint_64)$26 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$28 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$28 = ((int_64)((int_64)$28 & (int_64)31) << (int_64)((int_64)$25 & (int_64)4294967295))
	
.LABEL $label$14
	$24 = ($24 + [1])
	$26 = ((int_64)$26 + (int_64)1)
	$30 = ((int_64)$28 | (int_64)$30)
	$25 = ((int_64)$25 + (int_64)-5)
	if ( ((int_64)$25 != (int_64)-6) ){ goto $label$13 }
	$17 = *($3)
	$18 = *(*($3 + [8]) + [4])
	*(($31 + [24])) = [0]
	*($31 + [16]) = (int_64)0
	$24 = CALL strlen([736])
	if ( ((uint_32)$24 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$24 >= (uint_32)[11]) ){ goto $label$22 }
	*($31 + [16]) = ($24 << [1])
	$3 = (($31 + [16]) | [1])
	if ( $24 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$19 = (($24 + [16]) & [-16])
	$3 = CALL $109($19)
	*($31 + [16]) = ($19 | [1])
	*($31 + [24]) = $3
	*($31 + [20]) = $24
	
.LABEL $label$21
	CALL memcpy($3, [736], $24)
	
.LABEL $label$20
	*(($3 + $24)) = [0]
	*($31 + [112]) = *(($18 + [8]))
	*($31 + [104]) = *($8)
	*((($31 + [104]) + [24])) = *(($17 + [8]))
	*((($31 + [104]) + [20])) = *(($17 + [4]))
	*((($31 + [104]) + [28])) = *(($17 + [12]))
	*($31 + [120]) = *($17)
	*(($17 = (($31 + [104]) + [36]))) = *($31 + [20 align=4])
	*($31 + [136]) = *($31 + [16])
	*($31 + [16]) = [0]
	*($31 + [20]) = [0]
	*((($31 + [16]) + [8])) = [0]
	*($31 + [32]) = $29
	*($31 + [40]) = $30
	*(($24 = CALL $109([16]))) = $16
	*($24 + [8]) = $27
	*((($31 + [32]) + [32])) = [0]
	$3 = ($24 + [16])
	*((($31 + [32]) + [24])) = $3
	*((($31 + [32]) + [20])) = $3
	*($31 + [48]) = $24
	*($31 + [60]) = [0]
	*((($31 + [32]) + [36])) = [0]
	$24 = *($31 + [136])
	$17 = ( *($17) ? uint_32($24 >> [1]) : ($24 & [1]) )
	$24 = ($17 + [32])
	$26 = (CASTING uint_64)(uint_32 $17)
	$17 = (($31 + [32]) + [28])
	
.LOOP $label$23:
	$24 = ($24 + [1])
	$26 = (uint_64)$26 >> (uint_64)(int_64)7
	if ( ((int_64)$26) != (int_64)0) ){ goto $label$23 }
	if ( ($24 == 0) ){ goto $label$25 }
	CALL $12($17, $24)
	$17 = *(($31 + [64]))
	$24 = *(($31 + [60]))
	goto $label$24 
	
.LABEL $label$25
	$17 = [0]
	$24 = [0]
	
.LABEL $label$24
	*($31 + [76]) = $24
	*($31 + [72]) = $24
	*($31 + [80]) = $17
	*($31 + [88]) = ($31 + [72])
	*($31 + [96]) = ($31 + [104])
	CALL $36(($31 + [96]), ($31 + [88]))
	CALL $37(($31 + [72]), ($31 + [32]))
	$24 = *($31 + [72])
	CALL send_inline($24, (*($31 + [76]) - $24))
	$24 = *($31 + [72])
	if ( ($24 == 0) ){ goto $label$26 }
	*($31 + [76]) = $24
	CALL $110($24)
	
.LABEL $label$26
	$24 = *($31 + [60])
	if ( ($24 == 0) ){ goto $label$27 }
	*(($31 + [64])) = $24
	CALL $110($24)
	
.LABEL $label$27
	$24 = *($31 + [48])
	if ( ($24 == 0) ){ goto $label$28 }
	*(($31 + [52])) = $24
	CALL $110($24)
	
.LABEL $label$28
	if ( ((*(($31 + [136])) & [1]) == 0) ){ goto $label$29 }
	CALL $110(*(($31 + [144])))
	
.LABEL $label$29
	if ( ((*($31 + [16]) & [1]) == 0) ){ goto $label$30 }
	CALL $110(*(($31 + [24])))
	
.LABEL $label$30
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [768])
	*($31 + [72]) = [0]
	*($31 + [32]) = ($31 + [72])
	*($31 + [108]) = $4
	*($31 + [104]) = $1
	$3 = ($1 + [16])
	*($31 + [112]) = $3
	$8 = ($1 + [24])
	*($31 + [116]) = $8
	$18 = ($1 + [32])
	*($31 + [120]) = $18
	$19 = ($1 + [40])
	*($31 + [124]) = $19
	$20 = ($1 + [48])
	*($31 + [128]) = $20
	*($31 + [132]) = $10
	*($31 + [136]) = $11
	*($31 + [140]) = $12
	*($31 + [144]) = $13
	*($31 + [148]) = $14
	*($31 + [152]) = $15
	$21 = ($1 + [104])
	*($31 + [156]) = $21
	$22 = ($1 + [116])
	*($31 + [160]) = $22
	$23 = ($1 + [120])
	*($31 + [164]) = $23
	*($31 + [168]) = $9
	*($31 + [172]) = $5
	CALL $38(($31 + [104]), ($31 + [32]))
	$17 = *($31 + [72])
	if ( ($17 <= [513]) ){ goto $label$32 }
	$24 = CALL malloc($17)
	goto $label$31 
	
.LABEL $label$32
	$24 = ($32 - (($17 + [15]) & [-16]))
	*([0] + [4]) = $24
	
.LABEL $label$31
	*($31 + [36]) = $24
	*($31 + [32]) = $24
	*($31 + [40]) = ($24 + $17)
	*($31 + [72]) = ($31 + [32])
	*($31 + [108]) = $4
	*($31 + [112]) = $3
	*($31 + [116]) = $8
	*($31 + [120]) = $18
	*($31 + [124]) = $19
	*($31 + [128]) = $20
	*($31 + [104]) = $1
	*($31 + [132]) = $10
	*($31 + [136]) = $11
	*($31 + [140]) = $12
	*($31 + [144]) = $13
	*($31 + [148]) = $14
	*($31 + [152]) = $15
	*($31 + [156]) = $21
	*($31 + [160]) = $22
	*($31 + [164]) = $23
	*($31 + [168]) = $9
	*($31 + [172]) = $5
	CALL $39(($31 + [104]), ($31 + [72]))
	CALL db_update_i64(*($1 + [148]), $2, $24, $17)
	if ( ($17 <= [513]) ){ goto $label$33 }
	CALL free($24)
	
.LABEL $label$33
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$34 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$34
	*($31 + [104]) = *($4)
	if ( (CALL memcmp($31, ($31 + [104]), [8]) == 0) ){ goto $label$35 }
	$17 = ($1 + [152])
	$24 = *($17)
	if ( ((int_32)$24 > (int_32)[-1]) ){ goto $label$36 }
	$24 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104000, ($31 + [72]), $7)
	*($17) = $24
	
.LABEL $label$36
	CALL db_idx64_update($24, $2, ($31 + [104]))
	
.LABEL $label$35
	*($31 + [104]) = *($5)
	if ( (CALL memcmp($6, ($31 + [104]), [8]) == 0) ){ goto $label$37 }
	$17 = ($1 + [156])
	$24 = *($17)
	if ( ((int_32)$24 > (int_32)[-1]) ){ goto $label$38 }
	$24 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104001, ($31 + [72]), $7)
	*($17) = $24
	
.LABEL $label$38
	CALL db_idx64_update($24, $2, ($31 + [104]))
	
.LABEL $label$37
	*([0] + [4]) = ($31 + [176])
	return (unreachable)
	
.LABEL $label$19
	CALL $111(($31 + [16]))
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $113($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $109($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $110($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $110 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $111 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $119 ()
{
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $109(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [104]) & [1]) == 0) ){ goto $label$11 }
	CALL $110(*(($1 + [112])))
	
.LABEL $label$11
	CALL $110($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $110($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [80])
	*([0] + [4]) = $18
	*($0 + [24]) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [56]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [72]) = (int_64)0
	*($0 + [80]) = (int_64)0
	*($0 + [88]) = (int_64)0
	*($0 + [96]) = (int_64)0
	*(($0 + [112])) = [0]
	*($0 + [104 align=4]) = (int_64)0
	$14 = ($0 + [104])
	$15 = CALL strlen([496])
	if ( ((uint_32)$15 >= (uint_32)[-16]) ){ goto $label$1 }
	$13 = ($0 + [96])
	$12 = ($0 + [88])
	$11 = ($0 + [80])
	$10 = ($0 + [72])
	$9 = ($0 + [64])
	$8 = ($0 + [56])
	$7 = ($0 + [48])
	$6 = ($0 + [40])
	$5 = ($0 + [32])
	$4 = ($0 + [24])
	$3 = ($0 + [16])
	if ( ((uint_32)$15 >= (uint_32)[11]) ){ goto $label$4 }
	*($14) = ($15 << [1])
	$17 = ($14 + [1])
	if ( $15 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$16 = (($15 + [16]) & [-16])
	$17 = CALL $109($16)
	*(($0 + [104])) = ($16 | [1])
	*(($0 + [112])) = $17
	*(($0 + [108])) = $15
	
.LABEL $label$3
	CALL memcpy($17, [496], $15)
	
.LABEL $label$2
	*(($17 + $15)) = [0]
	*($0 + [120]) = (int_64)0
	*($0 + [116]) = [0]
	*($0 + [128]) = (int_64)0
	*($0 + [136]) = (int_64)1
	*($0 + [144]) = $1
	*($18) = *($2 + [4])
	*($18 + [12]) = ($0 + [8])
	*($18 + [8]) = $0
	*($18 + [16]) = $3
	*($18 + [20]) = $4
	*($18 + [24]) = $5
	*($18 + [28]) = $6
	*($18 + [32]) = $7
	*($18 + [36]) = $8
	*($18 + [40]) = $9
	*($18 + [44]) = $10
	*($18 + [48]) = $11
	*($18 + [52]) = $12
	*($18 + [56]) = $13
	*($18 + [60]) = $14
	*($18 + [64]) = ($0 + [116])
	*($18 + [68]) = ($0 + [120])
	*($18 + [72]) = ($0 + [128])
	*($18 + [76]) = ($0 + [136])
	CALL $30(($18 + [8]), $18)
	$15 = *(*($2 + [8]))
	*($0 + [152]) = [-1]
	*($0 + [148]) = $15
	*(($0 + [156])) = [-1]
	*([0] + [4]) = ($18 + [80])
	return $0
	
.LABEL $label$1
	CALL $111($14)
	return (unreachable)
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	$26 = (*([0] + [4]) - [96])
	$25 = $26
	*([0] + [4]) = $26
	$2 = *($0)
	$18 = *($0 + [4])
	$24 = *($18)
	$19 = *($24 + [16])
	if ( ((int_64)$19 != (int_64)-1) ){ goto $label$1 }
	$19 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($24), *($24 + [8]), (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $27($24, $4)
	*($25 + [28]) = [0]
	*($25 + [24]) = $24
	$19 = *(*(CALL $60(($25 + [24])) + [4]))
	$19 = ( (int_64)-2 ? ((int_64)$19 + (int_64)1) : ((uint_64)$19 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($24 + [16])) = $19
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($19 <= (int_64)-2), [928])
	$19 = *(($24 + [16]))
	*($1 + [136]) = (int_64)1
	*($1) = $19
	*($1 + [8]) = *(*($18 + [4]))
	$4 = ($1 + [8])
	$3 = ($1 + [136])
	if ( ((int_64)*(*($18 + [8])) != (int_64)1) ){ goto $label$4 }
	$23 = ($1 + [104])
	CALL $112($23, *($18 + [12]))
	*($1 + [116]) = [1]
	$22 = ($1 + [116])
	goto $label$3 
	
.LABEL $label$4
	$22 = ($1 + [116])
	$23 = ($1 + [104])
	
.LABEL $label$3
	*($25 + [16]) = [0]
	*($25) = ($25 + [16])
	*($25 + [28]) = $4
	*($25 + [24]) = $1
	$5 = ($1 + [16])
	*($25 + [32]) = $5
	$6 = ($1 + [24])
	*($25 + [36]) = $6
	$7 = ($1 + [32])
	*($25 + [40]) = $7
	$8 = ($1 + [40])
	*($25 + [44]) = $8
	$9 = ($1 + [48])
	*($25 + [48]) = $9
	$10 = ($1 + [56])
	*($25 + [52]) = $10
	$11 = ($1 + [64])
	*($25 + [56]) = $11
	$12 = ($1 + [72])
	*($25 + [60]) = $12
	$13 = ($1 + [80])
	*($25 + [64]) = $13
	$14 = ($1 + [88])
	*($25 + [68]) = $14
	$15 = ($1 + [96])
	*($25 + [72]) = $15
	*($25 + [76]) = $23
	*($25 + [80]) = $22
	$16 = ($1 + [120])
	*($25 + [84]) = $16
	$17 = ($1 + [128])
	*($25 + [88]) = $17
	*($25 + [92]) = $3
	CALL $38(($25 + [24]), $25)
	$18 = *($25 + [16])
	if ( ($18 <= [513]) ){ goto $label$6 }
	$24 = CALL malloc($18)
	goto $label$5 
	
.LABEL $label$6
	$24 = ($26 - (($18 + [15]) & [-16]))
	*([0] + [4]) = $24
	
.LABEL $label$5
	*($25 + [4]) = $24
	*($25) = $24
	*($25 + [8]) = ($24 + $18)
	*($25 + [16]) = $25
	*($25 + [28]) = $4
	*($25 + [24]) = $1
	*($25 + [32]) = $5
	*($25 + [36]) = $6
	*($25 + [40]) = $7
	*($25 + [44]) = $8
	*($25 + [48]) = $9
	*($25 + [52]) = $10
	*($25 + [56]) = $11
	*($25 + [60]) = $12
	*($25 + [64]) = $13
	*($25 + [68]) = $14
	*($25 + [72]) = $15
	*($25 + [76]) = $23
	*($25 + [80]) = $22
	*($25 + [84]) = $16
	*($25 + [88]) = $17
	*($25 + [92]) = $3
	CALL $39(($25 + [24]), ($25 + [16]))
	$19 = *($1)
	*($1 + [148]) = CALL db_store_i64(*($2 + [8]), (int_64)3607749778735104000, *(*($0 + [8])), $19, $24, $18)
	if ( ($18 <= [513]) ){ goto $label$7 }
	CALL free($24)
	
.LABEL $label$7
	if ( (uint_64)($19 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$19 + (int_64)1) : ((uint_64)$19 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$24 = ($2 + [8])
	$19 = *($24)
	$0 = *(($0 + [8]))
	$20 = *($0)
	$21 = *($1)
	*($25 + [24]) = *(($1 + [8]))
	*($1 + [152]) = CALL db_idx64_store($19, (int_64)3607749778735104000, $20, $21, ($25 + [24]))
	$19 = *($0)
	$20 = *($24)
	$21 = *($1)
	*($25 + [24]) = *(($1 + [136]))
	*(($1 + [156])) = CALL db_idx64_store($20, (int_64)3607749778735104001, $19, $21, ($25 + [24]))
	*([0] + [4]) = ($25 + [96])
}

int_32 .FUNC $107 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10054]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10056])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10054]) = [1]
	$7 = ($7 << [16])
	*([0] + [10056]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10056])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10056]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10054]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10054]) = [1]
	$3 = ($3 << [16])
	*([0] + [10056]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10056])
	
.LABEL $label$8
	*([0] + [10056]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $107($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9968])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)3607749778735104000, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [144]) == (int_32)$4), [224])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $27($4, CALL $fimport$6(*($4), *($4 + [8]), (int_64)3607749778735104000, $5))
	CALL eosio_assert(((int_32)*($2 + [144]) == (int_32)$4), [224])
	
.LABEL $label$4
	*(($2 + [152])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC _ZN5eosio8goodluck5resetEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	*($7 + [64]) = $1
	CALL require_auth($1)
	*(($7 + [56])) = [0]
	*($7 + [32]) = $1
	*($7 + [40]) = (int_64)-1
	*($7 + [48]) = (int_64)0
	*($7 + [24]) = *($0)
	*($7 + [60]) = [0]
	*($7 + [16]) = ($7 + [24])
	CALL $21(($7 + [72]), ($7 + [16]), ($7 + [64]))
	$6 = *($7 + [76])
	if ( ($6 == 0) ){ goto $label$2 }
	if ( ((int_64)*($7 + [64]) != (int_64)*($6 + [8])) ){ goto $label$2 }
	$1 = *($7 + [72])
	*($7 + [8]) = $1
	$6 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($6) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_64)*($6 + [8]) != (int_64)*($7 + [64])) ){ goto $label$1 }
	$1 = *($7 + [8])
	*($7 + [72]) = $1
	$6 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [176])
	CALL $22(($7 + [72]))
	CALL $23(*($7 + [16]), $6)
	CALL $22(($7 + [8]))
	$6 = *($7 + [12])
	if ( $6 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($7 + [12]) = [0]
	*($7 + [8]) = ($7 + [16])
	
.LABEL $label$1
	$1 = *($7 + [64])
	$2 = *(($0 + [32]))
	$4 = *(($0 + [36]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$4 }
	$6 = ($4 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$5:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$4 }
	$4 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $3) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = ($0 + [8])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$8 }
	$5 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [8]) == (int_32)$6), [224])
	if ( $5 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$5 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4455936897818034176, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $24($6, $5)
	CALL eosio_assert(((int_32)*($5 + [8]) == (int_32)$6), [224])
	
.LABEL $label$7
	CALL eosio_assert([1], [176])
	CALL eosio_assert([1], [48])
	$4 = CALL db_next_i64(*($5 + [12]), ($7 + [72]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	CALL $24($6, $4)
	
.LABEL $label$9
	CALL $25($6, $5)
	
.LABEL $label$6
	$1 = *($7 + [64])
	CALL prints([288])
	CALL printn($1)
	CALL prints([304])
	$4 = *($7 + [48])
	if ( ($4 == 0) ){ goto $label$10 }
	$3 = ($7 + [52])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$12 }
	
.LOOP $label$13:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	if ( ((*($5 + [104]) & [1]) == 0) ){ goto $label$15 }
	CALL $110(*(($5 + [112])))
	
.LABEL $label$15
	CALL $110($5)
	
.LABEL $label$14
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$13 }
	$6 = *(($7 + [48]))
	goto $label$11 
	
.LABEL $label$12
	$6 = $4
	
.LABEL $label$11
	*($3) = $4
	CALL $110($6)
	
.LABEL $label$10
	*([0] + [4]) = ($7 + [80])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [368])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [432])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$7 }
	CALL $110(*(($4 + [112])))
	
.LABEL $label$7
	CALL $110($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$10 }
	CALL $110(*(($4 + [112])))
	
.LABEL $label$10
	CALL $110($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [148]))
	$7 = *(($1 + [152]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104000, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx64_remove($7)
	
.LABEL $label$11
	$7 = *(($1 + [156]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$14 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104001, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$13 }
	
.LABEL $label$14
	CALL db_idx64_remove($7)
	
.LABEL $label$13
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $22 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [48])
	$6 = *($0 + [4])
	$7 = *($6 + [152])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)3607749778735104000, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [152]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [144]) == (int_32)$2), [224])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $27($2, CALL $fimport$6(*($2), *($2 + [8]), (int_64)3607749778735104000, $3))
	CALL eosio_assert(((int_32)*($7 + [144]) == (int_32)$2), [224])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [152])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [368])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [432])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $110($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $110($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [128])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $109([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [160])
	CALL memcpy($6, $7, [8])
	*($6 + [12]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [12])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $26(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $110($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [128])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $109([160])
	$6 = CALL $28($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [148])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $29(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$10 }
	CALL $110(*(($4 + [112])))
	
.LABEL $label$10
	CALL $110($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $109(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $110($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $110($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $109 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10060])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [68])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	$24 = (*([0] + [4]) - [112])
	*([0] + [4]) = $24
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [640])
	$4 = ($1 + [8])
	*(($23 = $24) + [16]) = *($4)
	$5 = ($1 + [136])
	*($23 + [24]) = *($5)
	$6 = *($1)
	$22 = *($3)
	CALL prints([1200])
	CALL printdf(*($22))
	*($1 + [72]) = (Rounds 0)(((float_64)*(*($3)) + (float_64)(CASTING float_64)(uint_64 *($1 + [72]))))
	*($1 + [128]) = (Rounds 0)(((float_64)*(*($3)) + (float_64)(CASTING float_64)(uint_64 *($1 + [128]))))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [768])
	*($23 + [32]) = [0]
	*($23) = ($23 + [32])
	*($23 + [44]) = $4
	*($23 + [40]) = $1
	$9 = ($1 + [16])
	*($23 + [48]) = $9
	$10 = ($1 + [24])
	*($23 + [52]) = $10
	$11 = ($1 + [32])
	*($23 + [56]) = $11
	$12 = ($1 + [40])
	*($23 + [60]) = $12
	$13 = ($1 + [48])
	*($23 + [64]) = $13
	$14 = ($1 + [56])
	*($23 + [68]) = $14
	$15 = ($1 + [64])
	*($23 + [72]) = $15
	$7 = ($1 + [72])
	*($23 + [76]) = $7
	$16 = ($1 + [80])
	*($23 + [80]) = $16
	$17 = ($1 + [88])
	*($23 + [84]) = $17
	$18 = ($1 + [96])
	*($23 + [88]) = $18
	$19 = ($1 + [104])
	*($23 + [92]) = $19
	$20 = ($1 + [116])
	*($23 + [96]) = $20
	$21 = ($1 + [120])
	*($23 + [100]) = $21
	$8 = ($1 + [128])
	*($23 + [104]) = $8
	*($23 + [108]) = $5
	CALL $38(($23 + [40]), $23)
	$22 = *($23 + [32])
	if ( ($22 <= [513]) ){ goto $label$2 }
	$3 = CALL malloc($22)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($24 - (($22 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$1
	*($23 + [4]) = $3
	*($23) = $3
	*($23 + [8]) = ($3 + $22)
	*($23 + [32]) = $23
	*($23 + [44]) = $4
	*($23 + [48]) = $9
	*($23 + [52]) = $10
	*($23 + [56]) = $11
	*($23 + [60]) = $12
	*($23 + [64]) = $13
	*($23 + [40]) = $1
	*($23 + [68]) = $14
	*($23 + [72]) = $15
	*($23 + [76]) = $7
	*($23 + [80]) = $16
	*($23 + [84]) = $17
	*($23 + [88]) = $18
	*($23 + [92]) = $19
	*($23 + [96]) = $20
	*($23 + [100]) = $21
	*($23 + [104]) = $8
	*($23 + [108]) = $5
	CALL $39(($23 + [40]), ($23 + [32]))
	CALL db_update_i64(*($1 + [148]), $2, $3, $22)
	if ( ($22 <= [513]) ){ goto $label$3 }
	CALL free($3)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$3 = (($23 + [16]) + [8])
	*($23 + [40]) = *($4)
	if ( (CALL memcmp(($23 + [16]), ($23 + [40]), [8]) == 0) ){ goto $label$5 }
	$4 = ($1 + [152])
	$22 = *($4)
	if ( ((int_32)$22 > (int_32)[-1]) ){ goto $label$6 }
	$22 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104000, ($23 + [32]), $6)
	*($4) = $22
	
.LABEL $label$6
	CALL db_idx64_update($22, $2, ($23 + [40]))
	
.LABEL $label$5
	*($23 + [40]) = *($5)
	if ( (CALL memcmp($3, ($23 + [40]), [8]) == 0) ){ goto $label$7 }
	$3 = ($1 + [156])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104001, ($23 + [32]), $6)
	*($3) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($23 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($23 + [112])
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9952])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9760]
	$1 = (((int_32)$2 * (int_32)[12]) + [9760])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_64 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [112])
	*([0] + [4]) = $19
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [640])
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)*(*($3)))
	*(($18 = $19) + [16]) = *($1)
	$4 = ($1 + [120])
	*($18 + [24]) = *($4)
	$6 = *($1 + [136])
	*($1 + [64]) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *($1 + [64])) + (float_64)((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0.4)))
	*($1 + [72]) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *($1 + [72])) + (float_64)((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0.02)))
	*($1 + [80]) = ((int_64)*($1 + [80]) + (int_64)*(*($3 + [4])))
	*($1 + [96]) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *($1 + [96])) + (float_64)((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0)))
	$17 = ((int_64)*($1 + [104]) + (int_64)*(*($3 + [4])))
	*($1 + [104]) = $17
	*($1 + [112]) = ((int_64)((int_64)$17 * (int_64)100) + (int_64)10000)
	$16 = ($1 + [40])
	$14 = ($1 + [48])
	$13 = ($1 + [112])
	$12 = ($1 + [104])
	$11 = ($1 + [96])
	$10 = ($1 + [80])
	$9 = ($1 + [72])
	$8 = ($1 + [64])
	$7 = ($1 + [56])
	$5 = ($1 + [136])
	$17 = *($1 + [40])
	$15 = *($1 + [48])
	if ( ((uint_64)(int_64))($15 - $17) > (uint_64)(int_64)86400) ){ goto $label$1 }
	$15 = ((int_64)*(*(($3 + [4]))) + (int_64)$15)
	*($14) = $15
	if ( (uint_64)((int_64))($15 - $17) <= (int_64)86401) ){ goto $label$1 }
	*($14) = ((int_64)$17 + (int_64)86400)
	
.LABEL $label$1
	*($1 + [16]) = *(*($3 + [8]))
	CALL eosio_assert([1], [768])
	$19 = $19
	$3 = ($19 + [-144])
	*([0] + [4]) = $3
	*($18 + [4]) = $3
	*($18) = $3
	*($18 + [8]) = $19
	*($18 + [32]) = $18
	*($18 + [44]) = ($1 + [8])
	*($18 + [40]) = $1
	*($18 + [48]) = ($1 + [16])
	*($18 + [52]) = ($1 + [24])
	*($18 + [56]) = ($1 + [32])
	*($18 + [60]) = $16
	*($18 + [64]) = $14
	*($18 + [68]) = $7
	*($18 + [72]) = $8
	*($18 + [76]) = $9
	*($18 + [80]) = $10
	*($18 + [84]) = ($1 + [88])
	*($18 + [88]) = $11
	*($18 + [92]) = $12
	*($18 + [96]) = $13
	*($18 + [100]) = $4
	*($18 + [104]) = ($1 + [128])
	*($18 + [108]) = $5
	CALL $69(($18 + [40]), ($18 + [32]))
	CALL db_update_i64(*($1 + [148]), $2, $3, [144])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$3 = (($18 + [16]) + [8])
	*($18 + [40]) = *($1)
	if ( (CALL memcmp(($18 + [16]), ($18 + [40]), [8]) == 0) ){ goto $label$3 }
	$14 = ($1 + [152])
	$19 = *($14)
	if ( ((int_32)$19 > (int_32)[-1]) ){ goto $label$4 }
	$19 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4986958866982895616, ($18 + [32]), $6)
	*($14) = $19
	
.LABEL $label$4
	CALL db_idx64_update($19, $2, ($18 + [40]))
	
.LABEL $label$3
	*($18 + [40]) = *($4)
	if ( (CALL memcmp($3, ($18 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [156])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4986958866982895617, ($18 + [32]), $6)
	*($3) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($18 + [40]))
	
.LABEL $label$5
	*([0] + [4]) = ($18 + [112])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	$25 = (*([0] + [4]) - [128])
	*([0] + [4]) = $25
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [640])
	$4 = ($1 + [8])
	*(($24 = $25) + [8]) = *($4)
	$5 = ($1 + [136])
	*($24 + [16]) = *($5)
	$7 = *($3 + [16])
	$6 = *($1)
	*($1 + [24]) = (int_64))(*($1 + [24]) - *(*($3)))
	$8 = ($1 + [24])
	if ( ((int_64)*(*(*($3 + [4]) + [4]) + [136]) != (int_64)*(*($3 + [8]))) ){ goto $label$4 }
	*($1 + [80]) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *($1 + [80])) + (float_64)((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0)))
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)*(*($3 + [12])))
	*(($24 + [88])) = [0]
	*($24 + [72]) = (int_64)-1
	*($24 + [80]) = (int_64)0
	$19 = *($7)
	*($24 + [56]) = $19
	*($24 + [64]) = $19
	*($24 + [92]) = [0]
	*($24 + [48]) = ($24 + [56])
	$9 = *(($3 + [8]))
	CALL $54(($24 + [24]), ($24 + [48]), $9)
	$23 = *($24 + [28])
	if ( ($23 == 0) ){ goto $label$3 }
	if ( ((int_64)*($9) != (int_64)*($23 + [48])) ){ goto $label$3 }
	$19 = *($24 + [24])
	*($24 + [40]) = $19
	$9 = (CASTING uint_32)(uint_64 (uint_64)$19 >> (uint_64)(int_64)32)
	if ( ($9) == 0) ){ goto $label$2 }
	$12 = ($1 + [105])
	$14 = (($24 + [24]) | [1])
	$10 = ($1 + [104])
	$11 = ($1 + [108])
	$13 = ($1 + [112])
	$17 = ($1 + [120])
	$18 = ($3 + [12])
	
.LOOP $label$5:
	CALL $116(($24 + [24]), ($9 + [8]))
	$9 = ($9 & [1])
	$9 = *($10)
	$23 = ($21 & [1])
	$21 = *($24 + [24])
	$22 = uint_32($21 >> [1])
	$20 = ( *($24 + [28]) ? $22 : $23 )
	if ( ((int_32)$20 != (int_32)( *($11) ? uint_32($9 >> [1]) : $9 )) ){ goto $label$12 }
	$9 = ( *($13) ? $12 : $9 )
	if ( $23 ){ goto $label$11 }
	if ( ($20 == 0) ){ goto $label$10 }
	$20 = ([0] - $22)
	$23 = $14
	
.LOOP $label$13:
	if ( ((int_32)*($23) != (int_32)*($9)) ){ goto $label$9 }
	$22 = [1]
	$9 = ($9 + [1])
	$23 = ($23 + [1])
	$20 = ($20 + [1])
	if ( $20 ){ goto $label$13 }
	goto $label$8 
	
.LABEL $label$12
	$22 = [0]
	if ( ($21 & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$11
	if ( ($20 == 0) ){ goto $label$10 }
	$22 = (CALL memcmp(( *((($24 + [24]) + [8])) ? $14 : $23 ), $9, $20) == 0)
	if ( (*($24 + [24]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$10
	$22 = [1]
	if ( ($21 & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$22 = [0]
	
.LABEL $label$8
	if ( (($21 & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $110(*((($24 + [24]) + [8])))
	
.LABEL $label$6
	if ( ($22 == 0) ){ goto $label$2 }
	*($17) = ((int_64)*($17) + (int_64)*(*($18)))
	$19 = *($7)
	$9 = *($24 + [44])
	*($24 + [24]) = *($18)
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [544])
	CALL $71(*($24 + [48]), $9, $19, ($24 + [24]))
	CALL $59(($24 + [40]))
	$9 = *($24 + [44])
	if ( $9 ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$4
	$20 = ($1 + [80])
	$3 = ($1 + [48])
	$22 = ($1 + [40])
	$19 = $6
	goto $label$1 
	
.LABEL $label$3
	*($24 + [44]) = [0]
	*($24 + [40]) = ($24 + [48])
	
.LABEL $label$2
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)*(*($3)))
	$20 = *($24 + [80])
	if ( ($20 == 0) ){ goto $label$14 }
	$3 = (($24 + [56]) + [28])
	$23 = *($3)
	if ( ((int_32)$23 == (int_32)$20) ){ goto $label$16 }
	
.LOOP $label$17:
	$23 = ($23 + [-24])
	$9 = *($23)
	*($23) = [0]
	if ( ($9 == 0) ){ goto $label$18 }
	if ( ((*($9 + [20]) & [1]) == 0) ){ goto $label$19 }
	CALL $110(*(($9 + [28])))
	
.LABEL $label$19
	if ( ((*($9 + [8]) & [1]) == 0) ){ goto $label$20 }
	CALL $110(*(($9 + [16])))
	
.LABEL $label$20
	CALL $110($9)
	
.LABEL $label$18
	if ( ((int_32)$20 != (int_32)$23) ){ goto $label$17 }
	$9 = *(($24 + [80]))
	goto $label$15 
	
.LABEL $label$16
	$9 = $20
	
.LABEL $label$15
	*($3) = $20
	CALL $110($9)
	
.LABEL $label$14
	$22 = ($1 + [40])
	$20 = ($1 + [80])
	$3 = ($1 + [48])
	$19 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)$19), [768])
	*($24 + [40]) = [0]
	*($24 + [24]) = ($24 + [40])
	*($24 + [60]) = $4
	*($24 + [68]) = $8
	*($24 + [76]) = $22
	*($24 + [80]) = $3
	*($24 + [56]) = $1
	$21 = ($1 + [16])
	*($24 + [64]) = $21
	$17 = ($1 + [32])
	*($24 + [72]) = $17
	$18 = ($1 + [56])
	*($24 + [84]) = $18
	$7 = ($1 + [64])
	*($24 + [88]) = $7
	$10 = ($1 + [72])
	*($24 + [92]) = $10
	*($24 + [96]) = $20
	$11 = ($1 + [88])
	*($24 + [100]) = $11
	$12 = ($1 + [96])
	*($24 + [104]) = $12
	$13 = ($1 + [104])
	*($24 + [108]) = $13
	$14 = ($1 + [116])
	*($24 + [112]) = $14
	$15 = ($1 + [120])
	*($24 + [116]) = $15
	$16 = ($1 + [128])
	*($24 + [120]) = $16
	*($24 + [124]) = $5
	CALL $38(($24 + [56]), ($24 + [24]))
	$23 = *($24 + [40])
	if ( ($23 <= [513]) ){ goto $label$22 }
	$9 = CALL malloc($23)
	goto $label$21 
	
.LABEL $label$22
	$9 = ($25 - (($23 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$21
	*($24 + [28]) = $9
	*($24 + [24]) = $9
	*($24 + [32]) = ($9 + $23)
	*($24 + [40]) = ($24 + [24])
	*($24 + [60]) = $4
	*($24 + [64]) = $21
	*($24 + [68]) = $8
	*($24 + [72]) = $17
	*($24 + [76]) = $22
	*($24 + [80]) = $3
	*($24 + [56]) = $1
	*($24 + [84]) = $18
	*($24 + [88]) = $7
	*($24 + [92]) = $10
	*($24 + [96]) = $20
	*($24 + [100]) = $11
	*($24 + [104]) = $12
	*($24 + [108]) = $13
	*($24 + [112]) = $14
	*($24 + [116]) = $15
	*($24 + [120]) = $16
	*($24 + [124]) = $5
	CALL $39(($24 + [56]), ($24 + [40]))
	CALL db_update_i64(*($1 + [148]), $2, $9, $23)
	if ( ($23 <= [513]) ){ goto $label$23 }
	CALL free($9)
	
.LABEL $label$23
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$24 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$24
	$9 = (($24 + [8]) + [8])
	*($24 + [56]) = *($4)
	if ( (CALL memcmp(($24 + [8]), ($24 + [56]), [8]) == 0) ){ goto $label$25 }
	$20 = ($1 + [152])
	$23 = *($20)
	if ( ((int_32)$23 > (int_32)[-1]) ){ goto $label$26 }
	$23 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104000, ($24 + [40]), $6)
	*($20) = $23
	
.LABEL $label$26
	CALL db_idx64_update($23, $2, ($24 + [56]))
	
.LABEL $label$25
	*($24 + [56]) = *($5)
	if ( (CALL memcmp($9, ($24 + [56]), [8]) == 0) ){ goto $label$27 }
	$9 = ($1 + [156])
	$1 = *($9)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$28 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104001, ($24 + [40]), $6)
	*($9) = $1
	
.LABEL $label$28
	CALL db_idx64_update($1, $2, ($24 + [56]))
	
.LABEL $label$27
	*([0] + [4]) = ($24 + [128])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_32 $19
	int_64 $20
	float_64 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	$27 = (*([0] + [4]) - [112])
	*([0] + [4]) = $27
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [640])
	$4 = ($1 + [8])
	*(($26 = $27) + [16]) = *($4)
	$5 = ($1 + [136])
	*($26 + [24]) = *($5)
	$6 = *($1)
	$18 = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0.46))) * (float_64)((float_64)(CASTING float_64)(uint_64 *($1 + [40])) / (float_64)(CASTING float_64)(uint_64 *(*($3 + [4]))))))
	*($1 + [56]) = ((int_64)$18 + (int_64)*($1 + [56]))
	*($1 + [128]) = ((int_64)$18 + (int_64)*($1 + [128]))
	$10 = ($1 + [104])
	$9 = ($1 + [128])
	$8 = ($1 + [56])
	$7 = ($1 + [40])
	$15 = *($1 + [104])
	if ( (( *(($1 + [108])) ? uint_32($15 >> [1]) : ($15 & [1]) ) == 0) ){ goto $label$1 }
	$15 = *($3 + [8])
	if ( (*($15 + [4]) == 0) ){ goto $label$1 }
	$15 = ($15 + [4])
	$17 = ($10 + [1])
	$19 = ($3 + [16])
	$16 = ($3 + [20])
	
.LOOP $label$3:
	$15 = ($24 & [1])
	$24 = *($25 + [104])
	$25 = *(*($19) + [4])
	$23 = *(($25 + [108]))
	$11 = ($15 & [1])
	$15 = *($22 + [8])
	$12 = uint_32($15 >> [1])
	$22 = *($15)
	$13 = ( *(($22 + [12])) ? $12 : $11 )
	if ( ((int_32)$13 != (int_32)( $23 ? uint_32($24 >> [1]) : $15 )) ){ goto $label$4 }
	$15 = ( *(($25 + [112])) ? (($25 + [104]) + [1]) : $15 )
	$14 = (($22 + [8]) + [1])
	if ( $11 ){ goto $label$6 }
	if ( ($13 == 0) ){ goto $label$5 }
	$22 = ([0] - $12)
	
.LOOP $label$7:
	if ( ((int_32)*($14) != (int_32)*($15)) ){ goto $label$4 }
	$15 = ($15 + [1])
	$14 = ($14 + [1])
	$22 = ($22 + [1])
	if ( $22 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ($13 == 0) ){ goto $label$5 }
	if ( CALL memcmp(( *(($22 + [16])) ? $14 : $11 ), $15, $13) ){ goto $label$4 }
	$25 = *(*($19) + [4])
	$24 = *($25 + [104])
	$23 = *(($25 + [108]))
	
.LABEL $label$5
	$15 = ($24 & [1])
	$14 = ($15 & [1])
	$15 = *(($1 + [104]))
	$11 = uint_32($15 >> [1])
	$22 = ( *(($1 + [108])) ? $11 : $14 )
	if ( ((int_32)$22 != (int_32)( $23 ? uint_32(($24 & [254]) >> [1]) : $15 )) ){ goto $label$4 }
	$15 = ( *(($25 + [112])) ? ($25 + [105]) : $15 )
	if ( $14 ){ goto $label$9 }
	if ( ($22 == 0) ){ goto $label$8 }
	$22 = ([0] - $11)
	$14 = $17
	
.LOOP $label$10:
	if ( ((int_32)*($14) != (int_32)*($15)) ){ goto $label$4 }
	$15 = ($15 + [1])
	$14 = ($14 + [1])
	$22 = ($22 + [1])
	if ( $22 ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ($22 == 0) ){ goto $label$8 }
	if ( CALL memcmp(( *(($1 + [112])) ? $17 : $14 ), $15, $22) ){ goto $label$4 }
	
.LABEL $label$8
	$15 = *(*(($3 + [8])) + [4])
	if ( ((int_64)*($15 + [48]) == (int_64)*(*($16))) ){ goto $label$2 }
	
.LABEL $label$4
	$15 = ($3 + [8])
	CALL $59(*($15))
	$14 = *($15)
	$15 = ($14 + [4])
	if ( *($14 + [4]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$21 = *(*($3 + [24]))
	$18 = *($1 + [120])
	$20 = *($15 + [40])
	CALL prints([1232])
	$21 = ((float_64)$21 * (float_64)((float_64)(CASTING float_64)(uint_64 $18) / (float_64)(CASTING float_64)(uint_64 $20)))
	CALL printdf($21)
	*($1 + [64]) = (Rounds 0)(((float_64)$21 + (float_64)(CASTING float_64)(uint_64 *($1 + [64]))))
	*(($15 = ($1 + [128]))) = (Rounds 0)(((float_64)$21 + (float_64)(CASTING float_64)(uint_64 *($15))))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [768])
	*($26 + [32]) = [0]
	*($26) = ($26 + [32])
	*($26 + [44]) = $4
	*($26 + [40]) = $1
	$22 = ($1 + [16])
	*($26 + [48]) = $22
	$25 = ($1 + [24])
	*($26 + [52]) = $25
	$24 = ($1 + [32])
	*($26 + [56]) = $24
	*($26 + [60]) = $7
	$11 = ($1 + [48])
	*($26 + [64]) = $11
	*($26 + [68]) = $8
	$13 = ($1 + [64])
	*($26 + [72]) = $13
	$3 = ($1 + [72])
	*($26 + [76]) = $3
	$23 = ($1 + [80])
	*($26 + [80]) = $23
	$12 = ($1 + [88])
	*($26 + [84]) = $12
	$19 = ($1 + [96])
	*($26 + [88]) = $19
	*($26 + [92]) = $10
	$16 = ($1 + [116])
	*($26 + [96]) = $16
	$17 = ($1 + [120])
	*($26 + [100]) = $17
	*($26 + [104]) = $9
	*($26 + [108]) = $5
	CALL $38(($26 + [40]), $26)
	$14 = *($26 + [32])
	if ( ($14 <= [513]) ){ goto $label$12 }
	$15 = CALL malloc($14)
	goto $label$11 
	
.LABEL $label$12
	$15 = ($27 - (($14 + [15]) & [-16]))
	*([0] + [4]) = $15
	
.LABEL $label$11
	*($26 + [4]) = $15
	*($26) = $15
	*($26 + [8]) = ($15 + $14)
	*($26 + [32]) = $26
	*($26 + [44]) = $4
	*($26 + [48]) = $22
	*($26 + [52]) = $25
	*($26 + [56]) = $24
	*($26 + [60]) = $7
	*($26 + [64]) = $11
	*($26 + [40]) = $1
	*($26 + [68]) = $8
	*($26 + [72]) = $13
	*($26 + [76]) = $3
	*($26 + [80]) = $23
	*($26 + [84]) = $12
	*($26 + [88]) = $19
	*($26 + [92]) = $10
	*($26 + [96]) = $16
	*($26 + [100]) = $17
	*($26 + [104]) = $9
	*($26 + [108]) = $5
	CALL $39(($26 + [40]), ($26 + [32]))
	CALL db_update_i64(*($1 + [148]), $2, $15, $14)
	if ( ($14 <= [513]) ){ goto $label$13 }
	CALL free($15)
	
.LABEL $label$13
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$14 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	$15 = (($26 + [16]) + [8])
	*($26 + [40]) = *($4)
	if ( (CALL memcmp(($26 + [16]), ($26 + [40]), [8]) == 0) ){ goto $label$15 }
	$22 = ($1 + [152])
	$14 = *($22)
	if ( ((int_32)$14 > (int_32)[-1]) ){ goto $label$16 }
	$14 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104000, ($26 + [32]), $6)
	*($22) = $14
	
.LABEL $label$16
	CALL db_idx64_update($14, $2, ($26 + [40]))
	
.LABEL $label$15
	*($26 + [40]) = *($5)
	if ( (CALL memcmp($15, ($26 + [40]), [8]) == 0) ){ goto $label$17 }
	$14 = ($1 + [156])
	$15 = *($14)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$18 }
	$15 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104001, ($26 + [32]), $6)
	*($14) = $15
	
.LABEL $label$18
	CALL db_idx64_update($15, $2, ($26 + [40]))
	
.LABEL $label$17
	*([0] + [4]) = ($26 + [112])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	$24 = (*([0] + [4]) - [112])
	*([0] + [4]) = $24
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [640])
	$4 = ($1 + [8])
	*(($23 = $24) + [16]) = *($4)
	$5 = ($1 + [136])
	*($23 + [24]) = *($5)
	$6 = *($1)
	if ( ((int_64)*(*(*($3) + [4]) + [136]) != (int_64)*(*($3 + [4]))) ){ goto $label$2 }
	*($1 + [128]) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *($1 + [128])) + (float_64)((float_64)(CASTING float_64)(uint_64 *(*($3 + [8]))) * (float_64)(float_64)0.05)))
	*($1 + [96]) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *($1 + [96])) + (float_64)((float_64)(CASTING float_64)(uint_64 *(*($3 + [8]))) * (float_64)(float_64)0.05)))
	$22 = ($1 + [96])
	$21 = ($1 + [128])
	goto $label$1 
	
.LABEL $label$2
	$21 = ($1 + [128])
	$22 = ($1 + [96])
	
.LABEL $label$1
	CALL prints([1248])
	CALL printui(*(($1 + [96])))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [768])
	*($23 + [32]) = [0]
	*($23) = ($23 + [32])
	*($23 + [44]) = $4
	*($23 + [40]) = $1
	$7 = ($1 + [16])
	*($23 + [48]) = $7
	$8 = ($1 + [24])
	*($23 + [52]) = $8
	$9 = ($1 + [32])
	*($23 + [56]) = $9
	$10 = ($1 + [40])
	*($23 + [60]) = $10
	$11 = ($1 + [48])
	*($23 + [64]) = $11
	$12 = ($1 + [56])
	*($23 + [68]) = $12
	$13 = ($1 + [64])
	*($23 + [72]) = $13
	$14 = ($1 + [72])
	*($23 + [76]) = $14
	$15 = ($1 + [80])
	*($23 + [80]) = $15
	$16 = ($1 + [88])
	*($23 + [84]) = $16
	*($23 + [88]) = $22
	$17 = ($1 + [104])
	*($23 + [92]) = $17
	$18 = ($1 + [116])
	*($23 + [96]) = $18
	$19 = ($1 + [120])
	*($23 + [100]) = $19
	*($23 + [104]) = $21
	*($23 + [108]) = $5
	CALL $38(($23 + [40]), $23)
	$20 = *($23 + [32])
	if ( ($20 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($20)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($24 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($23 + [4]) = $3
	*($23) = $3
	*($23 + [8]) = ($3 + $20)
	*($23 + [32]) = $23
	*($23 + [44]) = $4
	*($23 + [48]) = $7
	*($23 + [52]) = $8
	*($23 + [56]) = $9
	*($23 + [60]) = $10
	*($23 + [64]) = $11
	*($23 + [40]) = $1
	*($23 + [68]) = $12
	*($23 + [72]) = $13
	*($23 + [76]) = $14
	*($23 + [80]) = $15
	*($23 + [84]) = $16
	*($23 + [88]) = $22
	*($23 + [92]) = $17
	*($23 + [96]) = $18
	*($23 + [100]) = $19
	*($23 + [104]) = $21
	*($23 + [108]) = $5
	CALL $39(($23 + [40]), ($23 + [32]))
	CALL db_update_i64(*($1 + [148]), $2, $3, $20)
	if ( ($20 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$3 = (($23 + [16]) + [8])
	*($23 + [40]) = *($4)
	if ( (CALL memcmp(($23 + [16]), ($23 + [40]), [8]) == 0) ){ goto $label$7 }
	$4 = ($1 + [152])
	$20 = *($4)
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$8 }
	$20 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104000, ($23 + [32]), $6)
	*($4) = $20
	
.LABEL $label$8
	CALL db_idx64_update($20, $2, ($23 + [40]))
	
.LABEL $label$7
	*($23 + [40]) = *($5)
	if ( (CALL memcmp($3, ($23 + [40]), [8]) == 0) ){ goto $label$9 }
	$3 = ($1 + [156])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$10 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104001, ($23 + [32]), $6)
	*($3) = $1
	
.LABEL $label$10
	CALL db_idx64_update($1, $2, ($23 + [40]))
	
.LABEL $label$9
	*([0] + [4]) = ($23 + [112])
}

void .FUNC _ZN5eosio8goodluck6keybuyEymy (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_64 $29
	int_64 $30
	int_32 $31
	int_32 $32
	$32 = (*([0] + [4]) - [576])
	*([0] + [4]) = $32
	*($32 + [312]) = $1
	*($32 + [308]) = $2
	*($32 + [296]) = $3
	*($32 + [504]) = $3
	$13 = ($0 + [48])
	*($32 + [256]) = $13
	CALL $62(($32 + [320]), ($32 + [256]), ($32 + [504]))
	$2 = *($32 + [324])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = ( $2 ? [0] : ((int_64)*($32 + [504]) == (int_64)*($2 + [120])) )
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	if ( ((uint_64)*($2 + [48]) <= (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$3 }
	*($32 + [504]) = *($32 + [296])
	*($32 + [256]) = $13
	CALL $62(($32 + [320]), ($32 + [256]), ($32 + [504]))
	$2 = *($32 + [324])
	if ( ($2 == 0) ){ goto $label$5 }
	$2 = ( $2 ? [0] : ((int_64)*($32 + [504]) == (int_64)*($2 + [120])) )
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	if ( ((uint_64)*($2 + [40]) > (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$3 }
	CALL require_auth(*($32 + [312]))
	*($32 + [272]) = (int_64)-1
	*($32 + [280]) = [0]
	$3 = *($32 + [312])
	*($32 + [256]) = *($0)
	*($32 + [264]) = $3
	*(($32 + [284])) = [0]
	*(($32 + [288])) = [0]
	*($32 + [292]) = [0]
	*($32 + [248]) = ($32 + [256])
	CALL $21(($32 + [320]), ($32 + [248]), ($32 + [312]))
	$2 = *($32 + [324])
	if ( ($2 == 0) ){ goto $label$8 }
	if ( ((int_64)*($32 + [312]) != (int_64)*($2 + [8])) ){ goto $label$7 }
	*($32 + [240]) = *($32 + [320])
	goto $label$6 
	
.LABEL $label$8
	*($32 + [244]) = [0]
	*($32 + [240]) = ($32 + [248])
	goto $label$6 
	
.LABEL $label$7
	*($32 + [244]) = [0]
	*($32 + [240]) = ($32 + [248])
	
.LABEL $label$6
	*($32 + [232]) = $13
	CALL $63(($32 + [320]), ($32 + [232]), ($32 + [296]))
	$2 = *($32 + [324])
	if ( ($2 == 0) ){ goto $label$11 }
	if ( ((int_64)*($32 + [296]) != (int_64)*($2 + [120])) ){ goto $label$11 }
	$3 = *($32 + [320])
	*($32 + [224]) = $3
	if ( (uint_64)($3 <= (int_64)4294967296) ){ goto $label$10 }
	$8 = ($0 + [8])
	$10 = (($32 + [320]) + [144])
	$9 = (($32 + [480]) + [8])
	$7 = (($32 + [152]) | [1])
	$6 = (($32 + [168]) | [1])
	$5 = (($32 + [184]) | [1])
	$4 = (($32 + [200]) | [1])
	$2 = *($32 + [228])
	$14 = (($32 + [320]) + [16])
	$16 = (($32 + [320]) + [12])
	$17 = (($32 + [104]) + [24])
	$18 = (($32 + [104]) + [32])
	$19 = (($32 + [104]) + [36])
	$28 = (($32 + [104]) + [28])
	$23 = ($32 + [524])
	$24 = ($32 + [548])
	$25 = ($32 + [556])
	$26 = ($32 + [564])
	$27 = ($32 + [572])
	
.LOOP $label$15:
	if ( ((int_64)*($2) != (int_64)*($0)) ){ goto $label$10 }
	$13 = *($32 + [308])
	$3 = (CASTING uint_64)(uint_32 $13)
	$3 = ((int_64)(uint_64)((int_64)((int_64)$3 * (int_64)(CASTING uint_64)(uint_32 ($13 + [-1]))) * (int_64)100) >> (uint_64)(int_64)1) + (int_64)((int_64)$3 * (int_64)*($2 + [112]))
	*($32 + [216]) = $3)
	$2 = *($32 + [244])
	if ( ($2 == 0) ){ goto $label$17 }
	if ( (uint_64)(*($2 + [24]) <= $3) ){ goto $label$9 }
	
.LOOP $label$18:
	$3 = *($0)
	*($14) = $0
	*(($15 = (($32 + [320]) + [8]))) = ($32 + [296])
	*($16) = ($32 + [308])
	*($32 + [324]) = ($32 + [240])
	*($32 + [320]) = ($32 + [216])
	CALL eosio_assert([1], [544])
	CALL $64(*($32 + [248]), $2, $3, ($32 + [320]))
	if ( ((int_64)*(*($32 + [244]) + [136]) != (int_64)*($32 + [296])) ){ goto $label$19 }
	$3 = *($0)
	$2 = *($32 + [228])
	*($15) = ($32 + [312])
	*($32 + [324]) = ($32 + [308])
	*($32 + [320]) = ($32 + [216])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [544])
	CALL $65(*($32 + [232]), $2, $3, ($32 + [320]))
	CALL prints([1104])
	if ( ((int_64)*($32 + [296]) != (int_64)1) ){ goto $label$32 }
	*(($21 = (($32 + [200]) + [8]))) = [0]
	*($32 + [200]) = (int_64)0
	$2 = CALL strlen([16])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$31 }
	*($32 + [200]) = ($2 << [1])
	$13 = $4
	if ( $2 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	*(($21 = (($32 + [168]) + [8]))) = [0]
	*($32 + [168]) = (int_64)0
	$2 = CALL strlen([32])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$28 }
	*($32 + [168]) = ($2 << [1])
	$13 = $6
	if ( $2 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$31
	$12 = (($2 + [16]) & [-16])
	$13 = CALL $109($12)
	*($21) = $13
	*($32 + [200]) = ($12 | [1])
	*($32 + [204]) = $2
	
.LABEL $label$30
	CALL memcpy($13, [16], $2)
	
.LABEL $label$29
	*(($13 + $2)) = [0]
	$2 = ( *($21) ? $4 : (*($32 + [200]) & [1]) )
	$13 = [-1]
	
.LOOP $label$33:
	$12 = ($2 + $13)
	$31 = ($13 + [1])
	$13 = $31
	if ( *(($12 + [1])) ){ goto $label$33 }
	$11 = (CASTING uint_64)(uint_32 $31)
	$3 = (int_64)0
	$1 = (int_64)59
	$29 = (int_64)0
	
.LOOP $label$34:
	$30 = (int_64)0
	if ( ((uint_64)$3 >= (uint_64)$11) ){ goto $label$35 }
	$13 = *($2)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$13 = ($13 + [165])
	goto $label$36 
	
.LABEL $label$37
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$30 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$35
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$39 }
	$30 = ((int_64)((int_64)$30 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	goto $label$38 
	
.LABEL $label$39
	$30 = ((int_64)$30 & (int_64)15)
	
.LABEL $label$38
	$2 = ($2 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$29 = ((int_64)$30 | (int_64)$29)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$34 }
	*($32 + [328]) = (int_64)0
	*($32 + [320]) = $29
	CALL cancel_deferred(($32 + [320]))
	if ( ((*($32 + [200]) & [1]) == 0) ){ goto $label$40 }
	CALL $110(*($21))
	
.LABEL $label$40
	*(($12 = (($32 + [184]) + [8]))) = [0]
	*($32 + [188]) = [0]
	$3 = *($32 + [296])
	*($32 + [184]) = [0]
	$1 = *($0)
	$2 = CALL strlen([16])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$25 }
	*($32 + [184]) = ($2 << [1])
	$13 = $5
	if ( $2 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$28
	$12 = (($2 + [16]) & [-16])
	$13 = CALL $109($12)
	*($21) = $13
	*($32 + [168]) = ($12 | [1])
	*($32 + [172]) = $2
	
.LABEL $label$27
	CALL memcpy($13, [32], $2)
	
.LABEL $label$26
	*(($13 + $2)) = [0]
	$2 = ( *($21) ? $6 : (*($32 + [168]) & [1]) )
	$13 = [-1]
	
.LOOP $label$41:
	$12 = ($2 + $13)
	$31 = ($13 + [1])
	$13 = $31
	if ( *(($12 + [1])) ){ goto $label$41 }
	$11 = (CASTING uint_64)(uint_32 $31)
	$3 = (int_64)0
	$1 = (int_64)59
	$29 = (int_64)0
	
.LOOP $label$42:
	$30 = (int_64)0
	if ( ((uint_64)$3 >= (uint_64)$11) ){ goto $label$43 }
	$13 = *($2)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$13 = ($13 + [165])
	goto $label$44 
	
.LABEL $label$45
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$30 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$47 }
	$30 = ((int_64)((int_64)$30 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	goto $label$46 
	
.LABEL $label$47
	$30 = ((int_64)$30 & (int_64)15)
	
.LABEL $label$46
	$2 = ($2 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$29 = ((int_64)$30 | (int_64)$29)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$42 }
	*($32 + [328]) = (int_64)0
	*($32 + [320]) = $29
	CALL cancel_deferred(($32 + [320]))
	if ( ((*($32 + [168]) & [1]) == 0) ){ goto $label$48 }
	CALL $110(*($21))
	
.LABEL $label$48
	*(($12 = (($32 + [152]) + [8]))) = [0]
	*($32 + [156]) = [0]
	$3 = *($32 + [296])
	*($32 + [152]) = [0]
	$1 = *($0)
	$2 = CALL strlen([32])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$22 }
	*($32 + [152]) = ($2 << [1])
	$13 = $7
	if ( $2 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$25
	$31 = (($2 + [16]) & [-16])
	$13 = CALL $109($31)
	*($12) = $13
	*($32 + [184]) = ($31 | [1])
	*($32 + [188]) = $2
	
.LABEL $label$24
	CALL memcpy($13, [16], $2)
	
.LABEL $label$23
	*(($13 + $2)) = [0]
	CALL $7($0, $1, $3, ($32 + [184]), (int_64))(*(*($32 + [228]) + [48]) - ((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295)))
	if ( ((*($32 + [184]) & [1]) == 0) ){ goto $label$19 }
	CALL $110(*($12))
	goto $label$19 
	
.LABEL $label$22
	$31 = (($2 + [16]) & [-16])
	$13 = CALL $109($31)
	*($12) = $13
	*($32 + [152]) = ($31 | [1])
	*($32 + [156]) = $2
	
.LABEL $label$21
	CALL memcpy($13, [32], $2)
	
.LABEL $label$20
	*(($13 + $2)) = [0]
	CALL $7($0, $1, $3, ($32 + [152]), (int_64))(*(*($32 + [228]) + [48]) - ((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295)))
	if ( ((*($32 + [152]) & [1]) == 0) ){ goto $label$19 }
	CALL $110(*($12))
	
.LABEL $label$19
	$3 = *(*($32 + [244]) + [16])
	*($32 + [144]) = $3
	*((($32 + [104]) + [8])) = $3
	*((($32 + [104]) + [16])) = (int_64)-1
	*($17) = (int_64)0
	*($18) = [0]
	*($32 + [104]) = *($0)
	*($19) = [0]
	*($32 + [96]) = ($32 + [104])
	CALL $21(($32 + [320]), ($32 + [96]), ($32 + [144]))
	$2 = *($32 + [324])
	if ( ($2 == 0) ){ goto $label$50 }
	if ( ((int_64)*($32 + [144]) != (int_64)*($2 + [8])) ){ goto $label$50 }
	$3 = *($32 + [320])
	*($32 + [88]) = $3
	$2 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ($2) == 0) ){ goto $label$49 }
	
.LOOP $label$51:
	$3 = *($0)
	*($15) = ($32 + [216])
	*($32 + [324]) = ($32 + [296])
	*($32 + [320]) = ($32 + [240])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [544])
	CALL $66(*($32 + [96]), $2, $3, ($32 + [320]))
	CALL $22(($32 + [88]))
	$2 = *($32 + [92])
	if ( $2 ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$50
	*($32 + [92]) = [0]
	*($32 + [88]) = ($32 + [96])
	
.LABEL $label$49
	*($32 + [80]) = *(*($32 + [228]) + [104])
	*($32 + [72]) = ((float_64)(CASTING float_64)(uint_64 *($32 + [216])) * (float_64)(float_64)0.05)
	*((($32 + [32]) + [16])) = (int_64)-1
	*(($20 = (($32 + [32]) + [24]))) = (int_64)0
	*((($32 + [32]) + [32])) = [0]
	$3 = *($0)
	*((($32 + [32]) + [8])) = $3
	*($32 + [32]) = $3
	*((($32 + [32]) + [36])) = [0]
	*($32 + [24]) = ($32 + [32])
	CALL $54(($32 + [320]), ($32 + [24]), ($32 + [296]))
	$2 = *($32 + [324])
	if ( ($2 == 0) ){ goto $label$54 }
	if ( ((int_64)*($32 + [296]) != (int_64)*($2 + [48])) ){ goto $label$53 }
	*($32 + [16]) = *($32 + [320])
	goto $label$52 
	
.LABEL $label$54
	*($32 + [20]) = [0]
	*($32 + [16]) = ($32 + [24])
	goto $label$52 
	
.LABEL $label$53
	*($32 + [20]) = [0]
	*($32 + [16]) = ($32 + [24])
	
.LABEL $label$52
	$2 = CALL db_lowerbound_i64(*($8), *(($0 + [16])), (int_64)-4455936897818034176, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$55 }
	$31 = CALL $24($8, $2)
	
.LOOP $label$56:
	if ( ((int_64)*(*($32 + [244]) + [136]) != (int_64)*($32 + [296])) ){ goto $label$57 }
	*($15) = *($31)
	*($14) = (int_64)-1
	*(($21 = (($32 + [320]) + [24]))) = [0]
	*($32 + [320]) = *($0)
	*(($22 = (($32 + [320]) + [28]))) = [0]
	*((($32 + [320]) + [32])) = [0]
	*((($32 + [320]) + [36])) = [0]
	*($32 + [464]) = ($32 + [320])
	CALL $21(($32 + [504]), ($32 + [464]), $31)
	$2 = *($32 + [508])
	if ( ($2 == 0) ){ goto $label$59 }
	if ( ((int_64)*($31) != (int_64)*($2 + [8])) ){ goto $label$59 }
	$3 = *($32 + [504])
	*($32 + [480]) = $3
	$2 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ($2) == 0) ){ goto $label$58 }
	
.LOOP $label$60:
	if ( ((int_64)*($2 + [136]) != (int_64)*($32 + [296])) ){ goto $label$58 }
	$3 = *($0)
	*((($32 + [504]) + [8])) = ($32 + [16])
	*((($32 + [504]) + [12])) = ($32 + [24])
	*((($32 + [504]) + [16])) = ($32 + [240])
	*($23) = ($32 + [296])
	*((($32 + [504]) + [24])) = ($32 + [72])
	*($32 + [508]) = ($32 + [80])
	*($32 + [504]) = ($32 + [216])
	CALL eosio_assert([1], [544])
	CALL $67(*($32 + [464]), $2, $3, ($32 + [504]))
	CALL $22(($32 + [480]))
	$2 = *($32 + [484])
	if ( $2 ){ goto $label$60 }
	goto $label$58 
	
.LABEL $label$59
	*($32 + [484]) = [0]
	*($32 + [480]) = ($32 + [464])
	
.LABEL $label$58
	$12 = *($21)
	if ( ($12 == 0) ){ goto $label$57 }
	$2 = *($22)
	if ( ((int_32)$2 != (int_32)$12) ){ goto $label$62 }
	$2 = $12
	goto $label$61 
	
.LABEL $label$62
	
.LOOP $label$63:
	$2 = ($2 + [-24])
	$13 = *($2)
	*($2) = [0]
	if ( ($13 == 0) ){ goto $label$64 }
	if ( ((*($13 + [104]) & [1]) == 0) ){ goto $label$65 }
	CALL $110(*(($13 + [112])))
	
.LABEL $label$65
	CALL $110($13)
	
.LABEL $label$64
	if ( ((int_32)$12 != (int_32)$2) ){ goto $label$63 }
	$2 = *($21)
	
.LABEL $label$61
	*($22) = $12
	CALL $110($2)
	
.LABEL $label$57
	CALL eosio_assert([1], [48])
	$2 = CALL db_next_i64(*($31 + [12]), ($32 + [320]))
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$55 }
	$31 = CALL $24($8, $2)
	goto $label$56 
	
.LABEL $label$55
	$2 = *($32 + [228])
	if ( ((uint_64)(CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) % (uint_32)[1001])) > (uint_64)*($2 + [80])) ){ goto $label$66 }
	$3 = *($2 + [72])
	$13 = [1136]
	$2 = *($32 + [244])
	$1 = *($2 + [48])
	if ( ((uint_64)$1 <= (uint_64)(int_64)1009999) ){ goto $label$67 }
	$13 = [1152]
	if ( ((uint_64)$1 <= (uint_64)(int_64)10009999) ){ goto $label$67 }
	$13 = [1168]
	if ( ((uint_64)$1 > (uint_64)(int_64)42949672959999) ){ goto $label$66 }
	
.LABEL $label$67
	*($32 + [8]) = ((float_64)(CASTING float_64)(uint_64 $3) * (float_64)((float_64)(CASTING float_64)(uint_64 *($13 + [8])) / (float_64)(float_64)100))
	$3 = *($0)
	*($32 + [320]) = ($32 + [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [544])
	CALL $68(*($32 + [248]), $2, $3, ($32 + [320]))
	$1 = *($0)
	$2 = *($32 + [228])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [544])
	$13 = *($32 + [232])
	CALL eosio_assert(((int_32)*($2 + [144]) == (int_32)$13), [592])
	CALL eosio_assert(((int_64)*($13) == (int_64)CALL $fimport$3()), [640])
	$12 = ($2 + [120])
	*($9) = *($12)
	*($32 + [480]) = *($2)
	$3 = *($2 + [136])
	*($2 + [72]) = (Rounds 0)((float_64))((CASTING float_64)(uint_64 *($2 + [72])) - *($32 + [8])))
	*($2 + [88]) = *($32 + [312])
	*($2 + [80]) = (int_64)0
	CALL eosio_assert([1], [768])
	*((($32 + [464]) + [8])) = $10
	*($32 + [468]) = ($32 + [320])
	*($32 + [464]) = ($32 + [320])
	*($32 + [496]) = ($32 + [464])
	*((($32 + [504]) + [8])) = ($2 + [16])
	*((($32 + [504]) + [12])) = ($2 + [24])
	*((($32 + [504]) + [16])) = ($2 + [32])
	*($23) = ($2 + [40])
	*((($32 + [504]) + [24])) = ($2 + [48])
	*($32 + [508]) = ($2 + [8])
	*($32 + [504]) = $2
	*((($32 + [504]) + [28])) = ($2 + [56])
	*((($32 + [504]) + [32])) = ($2 + [64])
	*((($32 + [504]) + [36])) = ($2 + [72])
	*((($32 + [504]) + [40])) = ($2 + [80])
	*($24) = ($2 + [88])
	*((($32 + [504]) + [48])) = ($2 + [96])
	*($25) = ($2 + [104])
	*((($32 + [504]) + [56])) = ($2 + [112])
	*($26) = $12
	*((($32 + [504]) + [64])) = ($2 + [128])
	*($27) = ($2 + [136])
	CALL $69(($32 + [504]), ($32 + [496]))
	CALL db_update_i64(*($2 + [148]), $1, ($32 + [320]), [144])
	if ( (uint_64)($3 <= *($13 + [16])) ){ goto $label$68 }
	*(($13 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$68
	*($32 + [504]) = *($2)
	if ( (CALL memcmp(($32 + [480]), ($32 + [504]), [8]) == 0) ){ goto $label$69 }
	$21 = ($2 + [152])
	$31 = *($21)
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$70 }
	$31 = CALL db_idx64_find_primary(*($13), *($13 + [8]), (int_64)4986958866982895616, ($32 + [496]), $3)
	*($21) = $31
	
.LABEL $label$70
	CALL db_idx64_update($31, $1, ($32 + [504]))
	
.LABEL $label$69
	*($32 + [504]) = *($12)
	if ( (CALL memcmp($9, ($32 + [504]), [8]) == 0) ){ goto $label$66 }
	$12 = ($2 + [156])
	$2 = *($12)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$71 }
	$2 = CALL db_idx64_find_primary(*($13), *($13 + [8]), (int_64)4986958866982895617, ($32 + [496]), $3)
	*($12) = $2
	
.LABEL $label$71
	CALL db_idx64_update($2, $1, ($32 + [504]))
	
.LABEL $label$66
	$12 = *($20)
	if ( ($12 == 0) ){ goto $label$72 }
	$31 = (($32 + [32]) + [28])
	$13 = *($31)
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$74 }
	
.LOOP $label$75:
	$13 = ($13 + [-24])
	$2 = *($13)
	*($13) = [0]
	if ( ($2 == 0) ){ goto $label$76 }
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$77 }
	CALL $110(*(($2 + [28])))
	
.LABEL $label$77
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$78 }
	CALL $110(*(($2 + [16])))
	
.LABEL $label$78
	CALL $110($2)
	
.LABEL $label$76
	if ( ((int_32)$12 != (int_32)$13) ){ goto $label$75 }
	$2 = *($20)
	goto $label$73 
	
.LABEL $label$74
	$2 = $12
	
.LABEL $label$73
	*($31) = $12
	CALL $110($2)
	
.LABEL $label$72
	$12 = *($17)
	if ( ($12 == 0) ){ goto $label$79 }
	$2 = *($28)
	if ( ((int_32)$2 == (int_32)$12) ){ goto $label$81 }
	
.LOOP $label$82:
	$2 = ($2 + [-24])
	$13 = *($2)
	*($2) = [0]
	if ( ($13 == 0) ){ goto $label$83 }
	if ( ((*($13 + [104]) & [1]) == 0) ){ goto $label$84 }
	CALL $110(*(($13 + [112])))
	
.LABEL $label$84
	CALL $110($13)
	
.LABEL $label$83
	if ( ((int_32)$12 != (int_32)$2) ){ goto $label$82 }
	$2 = *($17)
	goto $label$80 
	
.LABEL $label$81
	$2 = $12
	
.LABEL $label$80
	*($28) = $12
	CALL $110($2)
	
.LABEL $label$79
	CALL $22(($32 + [240]))
	$2 = *($32 + [244])
	if ( ($2 == 0) ){ goto $label$17 }
	if ( ((uint_64)*($2 + [24]) >= (uint_64)*($32 + [216])) ){ goto $label$18 }
	goto $label$9 
	
.LABEL $label$17
	CALL $70(($32 + [224]))
	$2 = *($32 + [228])
	if ( $2 ){ goto $label$15 }
	goto $label$10 
	
.LABEL $label$16
	CALL $111(($32 + [152]))
	
.LABEL $label$14
	CALL $111(($32 + [184]))
	
.LABEL $label$13
	CALL $111(($32 + [168]))
	
.LABEL $label$12
	CALL $111(($32 + [200]))
	
.LABEL $label$11
	*($32 + [228]) = [0]
	*($32 + [224]) = ($32 + [232])
	
.LABEL $label$10
	CALL prints([1184])
	
.LABEL $label$9
	$12 = *($32 + [280])
	if ( ($12 == 0) ){ goto $label$3 }
	$31 = ($32 + [284])
	$2 = *($31)
	if ( ((int_32)$2 == (int_32)$12) ){ goto $label$86 }
	
.LOOP $label$87:
	$2 = ($2 + [-24])
	$13 = *($2)
	*($2) = [0]
	if ( ($13 == 0) ){ goto $label$88 }
	if ( ((*($13 + [104]) & [1]) == 0) ){ goto $label$89 }
	CALL $110(*(($13 + [112])))
	
.LABEL $label$89
	CALL $110($13)
	
.LABEL $label$88
	if ( ((int_32)$12 != (int_32)$2) ){ goto $label$87 }
	$2 = *(($32 + [280]))
	goto $label$85 
	
.LABEL $label$86
	$2 = $12
	
.LABEL $label$85
	*($31) = $12
	CALL $110($2)
	
.LABEL $label$3
	*([0] + [4]) = ($32 + [576])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [148]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1056])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)3607749778735104000)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [992])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [992])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $27(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)4986958866982895617, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2) + [136]) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [144]) == (int_32)$4), [224])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $6($4, CALL $fimport$6(*($4), *($4 + [8]), (int_64)4986958866982895616, $5))
	CALL eosio_assert(((int_32)*($2 + [144]) == (int_32)$4), [224])
	
.LABEL $label$4
	*(($2 + [156])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)4986958866982895617, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2) + [136]) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [144]) == (int_32)$4), [224])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $6($4, CALL $fimport$6(*($4), *($4 + [8]), (int_64)4986958866982895616, $5))
	CALL eosio_assert(((int_32)*($2 + [144]) == (int_32)$4), [224])
	
.LABEL $label$4
	*(($2 + [156])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $101 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	*($8 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [832])
	*($8 + [20]) = $3
	*($8 + [16]) = $1
	*($8 + [24]) = ($8 + [40])
	*(($3 = CALL $109([160])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	$2 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3 + [32]) = $2
	$6 = CALL current_time()
	*($3 + [48]) = ((int_64)$2 + (int_64)180)
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [88]) = (int_64)0
	*($3 + [40]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3 + [96]) = (int_64)0
	*($3 + [104]) = (int_64)0
	*($3 + [112]) = (int_64)10000
	*($3 + [120]) = (int_64)1
	*($3 + [128]) = (int_64)1000000
	*($3 + [144]) = $1
	CALL $102(($8 + [16]), $3)
	*($8 + [32]) = $3
	$2 = *($3 + [136])
	*($8 + [16]) = $2
	$4 = *($3 + [148])
	*($8 + [12]) = $4
	$7 = ($1 + [28])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($8 + [32]) = [0]
	*($5) = $3
	*($7) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $19(($1 + [24]), ($8 + [32]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $110($3)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	*($8 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [832])
	*($8 + [20]) = $3
	*($8 + [16]) = $1
	*($8 + [24]) = ($8 + [40])
	*(($3 = CALL $109([160])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	$2 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3 + [32]) = $2
	$6 = CALL current_time()
	*($3 + [48]) = ((int_64)$2 + (int_64)180)
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [88]) = (int_64)0
	*($3 + [40]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3 + [96]) = (int_64)0
	*($3 + [104]) = (int_64)0
	*($3 + [112]) = (int_64)10000
	*($3 + [120]) = (int_64)1
	*($3 + [128]) = (int_64)1000000
	*($3 + [144]) = $1
	CALL $104(($8 + [16]), $3)
	*($8 + [32]) = $3
	$2 = *($3 + [136])
	*($8 + [16]) = $2
	$4 = *($3 + [148])
	*($8 + [12]) = $4
	$7 = ($1 + [28])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($8 + [32]) = [0]
	*($5) = $3
	*($7) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $19(($1 + [24]), ($8 + [32]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $110($3)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
}

int_32 .FUNC $103 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [148]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1056])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4986958866982895616)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [992])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [992])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $6(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$8 = (*([0] + [4]) - [96])
	$12 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	$3 = *($0 + [4])
	$9 = *($3)
	$7 = ($9 + [64])
	$6 = *($7)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$4 = ($9 + [48])
	$5 = CALL db_lowerbound_i64(*($4), *(($9 + [56])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $6($4, $5)
	*($12 + [28]) = [0]
	*($12 + [24]) = $4
	$6 = *(*(CALL $103(($12 + [24])) + [4]) + [136])
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($9 + [64])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [928])
	$6 = *($7)
	*($1 + [120]) = (int_64)2
	*($1 + [136]) = $6
	$6 = *(*($3 + [4]))
	*($1 + [16]) = (int_64)0
	*($1) = $6
	$9 = $8
	$8 = ($9 + [-144])
	*([0] + [4]) = $8
	*($12 + [4]) = $8
	*($12) = $8
	*($12 + [8]) = $9
	*($12 + [16]) = $12
	*($12 + [28]) = ($1 + [8])
	*($12 + [24]) = $1
	*($12 + [32]) = ($1 + [16])
	*($12 + [36]) = ($1 + [24])
	*($12 + [40]) = ($1 + [32])
	*($12 + [44]) = ($1 + [40])
	*($12 + [48]) = ($1 + [48])
	*($12 + [52]) = ($1 + [56])
	*($12 + [56]) = ($1 + [64])
	*($12 + [60]) = ($1 + [72])
	*($12 + [64]) = ($1 + [80])
	*($12 + [68]) = ($1 + [88])
	*($12 + [72]) = ($1 + [96])
	*($12 + [76]) = ($1 + [104])
	*($12 + [80]) = ($1 + [112])
	$3 = ($1 + [120])
	*($12 + [84]) = $3
	*($12 + [88]) = ($1 + [128])
	$9 = ($1 + [136])
	*($12 + [92]) = $9
	CALL $69(($12 + [24]), ($12 + [16]))
	$6 = *($1 + [136])
	*($1 + [148]) = CALL db_store_i64(*($2 + [8]), (int_64)4986958866982895616, *(*($0 + [8])), $6, $8, [144])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$6 = *($9)
	$2 = ($2 + [8])
	$10 = *($2)
	$0 = *(($0 + [8]))
	$11 = *($0)
	*($12 + [24]) = *($1)
	*($1 + [152]) = CALL db_idx64_store($10, (int_64)4986958866982895616, $11, $6, ($12 + [24]))
	$6 = *($9)
	$10 = *($0)
	$11 = *($2)
	*($12 + [24]) = *($3)
	*(($1 + [156])) = CALL db_idx64_store($11, (int_64)4986958866982895617, $10, $6, ($12 + [24]))
	*([0] + [4]) = ($12 + [96])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $106([1568], $0)
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$8 = (*([0] + [4]) - [96])
	$12 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	$3 = *($0 + [4])
	$9 = *($3)
	$7 = ($9 + [64])
	$6 = *($7)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$4 = ($9 + [48])
	$5 = CALL db_lowerbound_i64(*($4), *(($9 + [56])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $6($4, $5)
	*($12 + [28]) = [0]
	*($12 + [24]) = $4
	$6 = *(*(CALL $103(($12 + [24])) + [4]) + [136])
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($9 + [64])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [928])
	$6 = *($7)
	*($1 + [120]) = (int_64)1
	*($1 + [136]) = $6
	$6 = *(*($3 + [4]))
	*($1 + [16]) = (int_64)0
	*($1) = $6
	$9 = $8
	$8 = ($9 + [-144])
	*([0] + [4]) = $8
	*($12 + [4]) = $8
	*($12) = $8
	*($12 + [8]) = $9
	*($12 + [16]) = $12
	*($12 + [28]) = ($1 + [8])
	*($12 + [24]) = $1
	*($12 + [32]) = ($1 + [16])
	*($12 + [36]) = ($1 + [24])
	*($12 + [40]) = ($1 + [32])
	*($12 + [44]) = ($1 + [40])
	*($12 + [48]) = ($1 + [48])
	*($12 + [52]) = ($1 + [56])
	*($12 + [56]) = ($1 + [64])
	*($12 + [60]) = ($1 + [72])
	*($12 + [64]) = ($1 + [80])
	*($12 + [68]) = ($1 + [88])
	*($12 + [72]) = ($1 + [96])
	*($12 + [76]) = ($1 + [104])
	*($12 + [80]) = ($1 + [112])
	$3 = ($1 + [120])
	*($12 + [84]) = $3
	*($12 + [88]) = ($1 + [128])
	$9 = ($1 + [136])
	*($12 + [92]) = $9
	CALL $69(($12 + [24]), ($12 + [16]))
	$6 = *($1 + [136])
	*($1 + [148]) = CALL db_store_i64(*($2 + [8]), (int_64)4986958866982895616, *(*($0 + [8])), $6, $8, [144])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$6 = *($9)
	$2 = ($2 + [8])
	$10 = *($2)
	$0 = *(($0 + [8]))
	$11 = *($0)
	*($12 + [24]) = *($1)
	*($1 + [152]) = CALL db_idx64_store($10, (int_64)4986958866982895616, $11, $6, ($12 + [24]))
	$6 = *($9)
	$10 = *($0)
	$11 = *($2)
	*($12 + [24]) = *($3)
	*(($1 + [156])) = CALL db_idx64_store($11, (int_64)4986958866982895617, $10, $6, ($12 + [24]))
	*([0] + [4]) = ($12 + [96])
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [16])) = [0]
	*($2) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [160])
	CALL memcpy($2, $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $31(($2 + [48]), ($2 + [8]))
	CALL eosio_assert(((uint_32)(*($2 + [56]) - *($2 + [52])) > (uint_32)[7]), [160])
	CALL memcpy(($2 + [24]), *($2 + [52]), [8])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $94(($2 + [48]), $2)
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL $110(*(($2 + [16])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	*(($2 = $3) + [60]) = $0
	*($2 + [48]) = *($1)
	*($2 + [52]) = *($1 + [4])
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = (int_64)0
	*(($2 + [32])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [72]) = ($1 + $0)
	*($2 + [64]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [160])
	CALL memcpy(($2 + [8]), $1, [8])
	*($2 + [68]) = ($1 + [8])
	CALL $31(($2 + [64]), (($2 + [8]) + [8]))
	CALL $31(($2 + [64]), ($2 + [28]))
	CALL eosio_assert(((uint_32)(*($2 + [72]) - *($2 + [68])) > (uint_32)[7]), [160])
	CALL memcpy(($2 + [40]), *($2 + [68]), [8])
	if ( ($0 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*($2 + [68]) = ($2 + [48])
	*($2 + [64]) = ($2 + [60])
	CALL $95(($2 + [64]), ($2 + [8]))
	if ( ((*($2 + [28]) & [1]) == 0) ){ goto $label$6 }
	CALL $110(*(($2 + [36])))
	
.LABEL $label$6
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $110(*(($2 + [24])))
	
.LABEL $label$7
	*([0] + [4]) = ($2 + [80])
	return [1]
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1397703940
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [1456])
	$6 = (int_64)5459781
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [1520])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [160])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [160])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [160])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [1456])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [1520])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $96($6, $0)
	if ( ($1 <= [513]) ){ goto $label$8 }
	CALL free($2)
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
}

void .FUNC _ZN5eosio8goodluck5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [160])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [720]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $86(($9 + [112]))
	CALL _ZN5eosio8goodluck2onERKNS_8currency8transferEy($0, ($9 + [112]), $6)
	if ( ((*($9 + [144]) & [1]) == 0) ){ goto $label$7 }
	CALL $110(*(($9 + [152])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 <= (int_64)-3851378324190265345) ){ goto $label$14 }
	if ( ((int_64)$2 > (int_64)5377982950824476671) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-3851378324190265344) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$7 }
	*($9 + [108]) = [0]
	*($9 + [104]) = [1]
	*($9) = *($9 + [104])
	CALL $87($0, $9)
	goto $label$7 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)-9026201598807769088) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-4417018962198396928) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-3851382123293671424) ){ goto $label$7 }
	*($9 + [100]) = [0]
	*($9 + [96]) = [2]
	*($9 + [8 align=4]) = *($9 + [96])
	CALL $88($0, ($9 + [8]))
	goto $label$7 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)5377982950824476672) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)8428183958969122816) ){ goto $label$7 }
	*($9 + [68]) = [0]
	*($9 + [64]) = [3]
	*($9 + [40 align=4]) = *($9 + [64])
	CALL $92($0, ($9 + [40]))
	goto $label$7 
	
.LABEL $label$12
	*($9 + [92]) = [0]
	*($9 + [88]) = [4]
	*($9 + [16 align=4]) = *($9 + [88])
	CALL $89($0, ($9 + [16]))
	goto $label$7 
	
.LABEL $label$11
	*($9 + [84]) = [0]
	*($9 + [80]) = [5]
	*($9 + [24 align=4]) = *($9 + [80])
	CALL $90($0, ($9 + [24]))
	goto $label$7 
	
.LABEL $label$10
	*($9 + [60]) = [0]
	*($9 + [56]) = [6]
	*($9 + [48 align=4]) = *($9 + [56])
	CALL $93($0, ($9 + [48]))
	goto $label$7 
	
.LABEL $label$9
	*($9 + [76]) = [0]
	*($9 + [72]) = [7]
	*($9 + [32 align=4]) = *($9 + [72])
	CALL $91($0, ($9 + [32]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [160])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	$24 = (*([0] + [4]) - [112])
	*([0] + [4]) = $24
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [640])
	$4 = ($1 + [8])
	*(($23 = $24) + [16]) = *($4)
	$5 = ($1 + [136])
	*($23 + [24]) = *($5)
	$6 = *($1)
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3) + [16]))
	$3 = *($3)
	CALL prints([1440])
	CALL printi(*($3 + [16]))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [768])
	*($23 + [32]) = [0]
	*($23) = ($23 + [32])
	*($23 + [44]) = $4
	*($23 + [40]) = $1
	$8 = ($1 + [16])
	*($23 + [48]) = $8
	$7 = ($1 + [24])
	*($23 + [52]) = $7
	$9 = ($1 + [32])
	*($23 + [56]) = $9
	$10 = ($1 + [40])
	*($23 + [60]) = $10
	$11 = ($1 + [48])
	*($23 + [64]) = $11
	$12 = ($1 + [56])
	*($23 + [68]) = $12
	$13 = ($1 + [64])
	*($23 + [72]) = $13
	$14 = ($1 + [72])
	*($23 + [76]) = $14
	$15 = ($1 + [80])
	*($23 + [80]) = $15
	$16 = ($1 + [88])
	*($23 + [84]) = $16
	$17 = ($1 + [96])
	*($23 + [88]) = $17
	$18 = ($1 + [104])
	*($23 + [92]) = $18
	$19 = ($1 + [116])
	*($23 + [96]) = $19
	$20 = ($1 + [120])
	*($23 + [100]) = $20
	$21 = ($1 + [128])
	*($23 + [104]) = $21
	*($23 + [108]) = $5
	CALL $38(($23 + [40]), $23)
	$22 = *($23 + [32])
	if ( ($22 <= [513]) ){ goto $label$2 }
	$3 = CALL malloc($22)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($24 - (($22 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$1
	*($23 + [4]) = $3
	*($23) = $3
	*($23 + [8]) = ($3 + $22)
	*($23 + [32]) = $23
	*($23 + [44]) = $4
	*($23 + [48]) = $8
	*($23 + [52]) = $7
	*($23 + [56]) = $9
	*($23 + [60]) = $10
	*($23 + [64]) = $11
	*($23 + [40]) = $1
	*($23 + [68]) = $12
	*($23 + [72]) = $13
	*($23 + [76]) = $14
	*($23 + [80]) = $15
	*($23 + [84]) = $16
	*($23 + [88]) = $17
	*($23 + [92]) = $18
	*($23 + [96]) = $19
	*($23 + [100]) = $20
	*($23 + [104]) = $21
	*($23 + [108]) = $5
	CALL $39(($23 + [40]), ($23 + [32]))
	CALL db_update_i64(*($1 + [148]), $2, $3, $22)
	if ( ($22 <= [513]) ){ goto $label$3 }
	CALL free($3)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$3 = (($23 + [16]) + [8])
	*($23 + [40]) = *($4)
	if ( (CALL memcmp(($23 + [16]), ($23 + [40]), [8]) == 0) ){ goto $label$5 }
	$4 = ($1 + [152])
	$22 = *($4)
	if ( ((int_32)$22 > (int_32)[-1]) ){ goto $label$6 }
	$22 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104000, ($23 + [32]), $6)
	*($4) = $22
	
.LABEL $label$6
	CALL db_idx64_update($22, $2, ($23 + [40]))
	
.LABEL $label$5
	*($23 + [40]) = *($5)
	if ( (CALL memcmp($3, ($23 + [40]), [8]) == 0) ){ goto $label$7 }
	$3 = ($1 + [156])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104001, ($23 + [32]), $6)
	*($3) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($23 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($23 + [112])
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	$26 = (*([0] + [4]) - [96])
	$25 = $26
	*([0] + [4]) = $26
	$2 = *($0)
	$20 = *($0 + [4])
	$24 = *($20)
	$21 = *($24 + [16])
	if ( ((int_64)$21 != (int_64)-1) ){ goto $label$1 }
	$21 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($24), *($24 + [8]), (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $27($24, $4)
	*($25 + [28]) = [0]
	*($25 + [24]) = $24
	$21 = *(*(CALL $60(($25 + [24])) + [4]))
	$21 = ( (int_64)-2 ? ((int_64)$21 + (int_64)1) : ((uint_64)$21 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($24 + [16])) = $21
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($21 <= (int_64)-2), [928])
	$21 = *(($24 + [16]))
	*($1 + [136]) = (int_64)2
	*($1) = $21
	*($1 + [8]) = *(*($20 + [4]))
	*($1 + [24]) = *(*($20 + [4]) + [16])
	*($25 + [16]) = [0]
	*($25) = ($25 + [16])
	$4 = ($1 + [8])
	*($25 + [28]) = $4
	*($25 + [24]) = $1
	$6 = ($1 + [16])
	*($25 + [32]) = $6
	$5 = ($1 + [24])
	*($25 + [36]) = $5
	$7 = ($1 + [32])
	*($25 + [40]) = $7
	$8 = ($1 + [40])
	*($25 + [44]) = $8
	$9 = ($1 + [48])
	*($25 + [48]) = $9
	$10 = ($1 + [56])
	*($25 + [52]) = $10
	$11 = ($1 + [64])
	*($25 + [56]) = $11
	$12 = ($1 + [72])
	*($25 + [60]) = $12
	$13 = ($1 + [80])
	*($25 + [64]) = $13
	$14 = ($1 + [88])
	*($25 + [68]) = $14
	$15 = ($1 + [96])
	*($25 + [72]) = $15
	$16 = ($1 + [104])
	*($25 + [76]) = $16
	$17 = ($1 + [116])
	*($25 + [80]) = $17
	$18 = ($1 + [120])
	*($25 + [84]) = $18
	$19 = ($1 + [128])
	*($25 + [88]) = $19
	$3 = ($1 + [136])
	*($25 + [92]) = $3
	CALL $38(($25 + [24]), $25)
	$20 = *($25 + [16])
	if ( ($20 <= [513]) ){ goto $label$4 }
	$24 = CALL malloc($20)
	goto $label$3 
	
.LABEL $label$4
	$24 = ($26 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $24
	
.LABEL $label$3
	*($25 + [4]) = $24
	*($25) = $24
	*($25 + [8]) = ($24 + $20)
	*($25 + [16]) = $25
	*($25 + [28]) = $4
	*($25 + [24]) = $1
	*($25 + [32]) = $6
	*($25 + [36]) = $5
	*($25 + [40]) = $7
	*($25 + [44]) = $8
	*($25 + [48]) = $9
	*($25 + [52]) = $10
	*($25 + [56]) = $11
	*($25 + [60]) = $12
	*($25 + [64]) = $13
	*($25 + [68]) = $14
	*($25 + [72]) = $15
	*($25 + [76]) = $16
	*($25 + [80]) = $17
	*($25 + [84]) = $18
	*($25 + [88]) = $19
	*($25 + [92]) = $3
	CALL $39(($25 + [24]), ($25 + [16]))
	$21 = *($1)
	*($1 + [148]) = CALL db_store_i64(*($2 + [8]), (int_64)3607749778735104000, *(*($0 + [8])), $21, $24, $20)
	if ( ($20 <= [513]) ){ goto $label$5 }
	CALL free($24)
	
.LABEL $label$5
	if ( (uint_64)($21 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$21 + (int_64)1) : ((uint_64)$21 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$24 = ($2 + [8])
	$21 = *($24)
	$0 = *(($0 + [8]))
	$22 = *($0)
	$23 = *($1)
	*($25 + [24]) = *(($1 + [8]))
	*($1 + [152]) = CALL db_idx64_store($21, (int_64)3607749778735104000, $22, $23, ($25 + [24]))
	$21 = *($0)
	$22 = *($24)
	$23 = *($1)
	*($25 + [24]) = *(($1 + [136]))
	*(($1 + [156])) = CALL db_idx64_store($22, (int_64)3607749778735104001, $21, $23, ($25 + [24]))
	*([0] + [4]) = ($25 + [96])
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	$26 = (*([0] + [4]) - [96])
	$25 = $26
	*([0] + [4]) = $26
	$2 = *($0)
	$20 = *($0 + [4])
	$24 = *($20)
	$21 = *($24 + [16])
	if ( ((int_64)$21 != (int_64)-1) ){ goto $label$1 }
	$21 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($24), *($24 + [8]), (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $27($24, $4)
	*($25 + [28]) = [0]
	*($25 + [24]) = $24
	$21 = *(*(CALL $60(($25 + [24])) + [4]))
	$21 = ( (int_64)-2 ? ((int_64)$21 + (int_64)1) : ((uint_64)$21 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($24 + [16])) = $21
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($21 <= (int_64)-2), [928])
	$21 = *(($24 + [16]))
	*($1 + [136]) = (int_64)1
	*($1) = $21
	*($1 + [8]) = *(*($20 + [4]))
	*($1 + [24]) = *(*($20 + [4]) + [16])
	*($25 + [16]) = [0]
	*($25) = ($25 + [16])
	$4 = ($1 + [8])
	*($25 + [28]) = $4
	*($25 + [24]) = $1
	$6 = ($1 + [16])
	*($25 + [32]) = $6
	$5 = ($1 + [24])
	*($25 + [36]) = $5
	$7 = ($1 + [32])
	*($25 + [40]) = $7
	$8 = ($1 + [40])
	*($25 + [44]) = $8
	$9 = ($1 + [48])
	*($25 + [48]) = $9
	$10 = ($1 + [56])
	*($25 + [52]) = $10
	$11 = ($1 + [64])
	*($25 + [56]) = $11
	$12 = ($1 + [72])
	*($25 + [60]) = $12
	$13 = ($1 + [80])
	*($25 + [64]) = $13
	$14 = ($1 + [88])
	*($25 + [68]) = $14
	$15 = ($1 + [96])
	*($25 + [72]) = $15
	$16 = ($1 + [104])
	*($25 + [76]) = $16
	$17 = ($1 + [116])
	*($25 + [80]) = $17
	$18 = ($1 + [120])
	*($25 + [84]) = $18
	$19 = ($1 + [128])
	*($25 + [88]) = $19
	$3 = ($1 + [136])
	*($25 + [92]) = $3
	CALL $38(($25 + [24]), $25)
	$20 = *($25 + [16])
	if ( ($20 <= [513]) ){ goto $label$4 }
	$24 = CALL malloc($20)
	goto $label$3 
	
.LABEL $label$4
	$24 = ($26 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $24
	
.LABEL $label$3
	*($25 + [4]) = $24
	*($25) = $24
	*($25 + [8]) = ($24 + $20)
	*($25 + [16]) = $25
	*($25 + [28]) = $4
	*($25 + [24]) = $1
	*($25 + [32]) = $6
	*($25 + [36]) = $5
	*($25 + [40]) = $7
	*($25 + [44]) = $8
	*($25 + [48]) = $9
	*($25 + [52]) = $10
	*($25 + [56]) = $11
	*($25 + [60]) = $12
	*($25 + [64]) = $13
	*($25 + [68]) = $14
	*($25 + [72]) = $15
	*($25 + [76]) = $16
	*($25 + [80]) = $17
	*($25 + [84]) = $18
	*($25 + [88]) = $19
	*($25 + [92]) = $3
	CALL $39(($25 + [24]), ($25 + [16]))
	$21 = *($1)
	*($1 + [148]) = CALL db_store_i64(*($2 + [8]), (int_64)3607749778735104000, *(*($0 + [8])), $21, $24, $20)
	if ( ($20 <= [513]) ){ goto $label$5 }
	CALL free($24)
	
.LABEL $label$5
	if ( (uint_64)($21 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$21 + (int_64)1) : ((uint_64)$21 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$24 = ($2 + [8])
	$21 = *($24)
	$0 = *(($0 + [8]))
	$22 = *($0)
	$23 = *($1)
	*($25 + [24]) = *(($1 + [8]))
	*($1 + [152]) = CALL db_idx64_store($21, (int_64)3607749778735104000, $22, $23, ($25 + [24]))
	$21 = *($0)
	$22 = *($24)
	$23 = *($1)
	*($25 + [24]) = *(($1 + [136]))
	*(($1 + [156])) = CALL db_idx64_store($22, (int_64)3607749778735104001, $21, $23, ($25 + [24]))
	*([0] + [4]) = ($25 + [96])
}

void .FUNC _ZN5eosio8goodluck2onERKNS_8currency8transferEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	$3 = *($0)
	$5 = *($1)
	if ( ((int_64)$5 == (int_64)$3) ){ goto $label$3 }
	*(($9 + [64])) = [0]
	*($9 + [40]) = $5
	*($9 + [32]) = $3
	*($9 + [48]) = (int_64)-1
	*($9 + [56]) = (int_64)0
	*($9 + [68]) = [0]
	*($9 + [24]) = ($9 + [32])
	CALL $21(($9 + [80]), ($9 + [24]), $1)
	$8 = *($9 + [84])
	if ( ($8 == 0) ){ goto $label$6 }
	if ( ((int_64)*($1) != (int_64)*($8 + [8])) ){ goto $label$6 }
	$5 = *($9 + [80])
	*($9 + [16]) = $5
	$8 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	if ( ($8) == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$5 = *($0)
	*($9 + [80]) = $1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [544])
	CALL $84(*($9 + [24]), $8, $5, ($9 + [80]))
	CALL $22(($9 + [16]))
	$8 = *($9 + [20])
	if ( $8 ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	*($9 + [20]) = [0]
	*($9 + [16]) = ($9 + [24])
	
.LABEL $label$5
	$5 = *($0)
	*($9 + [12]) = $1
	*($9 + [8]) = ($9 + [32])
	*($9 + [104]) = $5
	CALL eosio_assert(((int_64)*($9 + [32]) == (int_64)CALL $fimport$3()), [832])
	*($9 + [84]) = ($9 + [8])
	*($9 + [80]) = ($9 + [32])
	*($9 + [88]) = ($9 + [104])
	*(($8 = CALL $109([160])) + [24]) = (int_64)0
	*($8 + [16]) = (int_64)0
	*($8 + [32]) = (int_64)0
	*($8 + [40]) = (int_64)0
	*($8 + [48]) = (int_64)0
	*($8 + [56]) = (int_64)0
	*($8 + [64]) = (int_64)0
	*($8 + [72]) = (int_64)0
	*($8 + [80]) = (int_64)0
	*($8 + [88]) = (int_64)0
	*($8 + [96]) = (int_64)0
	*(($8 + [112])) = [0]
	*($8 + [104 align=4]) = (int_64)0
	$4 = CALL strlen([496])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$10 }
	*(($8 + [104])) = ($4 << [1])
	$7 = ($8 + [105])
	if ( $4 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$6 = (($4 + [16]) & [-16])
	$7 = CALL $109($6)
	*(($8 + [104])) = ($6 | [1])
	*($8 + [112]) = $7
	*($8 + [108]) = $4
	
.LABEL $label$9
	CALL memcpy($7, [496], $4)
	
.LABEL $label$8
	*(($7 + $4)) = [0]
	*($8 + [120]) = (int_64)0
	*($8 + [116]) = [0]
	*($8 + [128]) = (int_64)0
	*($8 + [136]) = (int_64)1
	*($8 + [144]) = ($9 + [32])
	CALL $82(($9 + [80]), $8)
	*($9 + [96]) = $8
	$5 = *($8)
	*($9 + [80]) = $5
	$7 = *($8 + [148])
	*($9 + [76]) = $7
	$6 = ($9 + [60])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($9 + [64]))) ){ goto $label$12 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($9 + [96]) = [0]
	*($4) = $8
	*($6) = ($4 + [24])
	goto $label$11 
	
.LABEL $label$12
	CALL $29(($9 + [56]), ($9 + [96]), ($9 + [80]), ($9 + [76]))
	
.LABEL $label$11
	$8 = *($9 + [96])
	*($9 + [96]) = [0]
	if ( ($8 == 0) ){ goto $label$13 }
	if ( ((*($8 + [104]) & [1]) == 0) ){ goto $label$14 }
	CALL $110(*(($8 + [112])))
	
.LABEL $label$14
	CALL $110($8)
	
.LABEL $label$13
	$5 = *($0)
	*($9 + [12]) = $1
	*($9 + [8]) = ($9 + [32])
	*($9 + [104]) = $5
	CALL eosio_assert(((int_64)*($9 + [32]) == (int_64)CALL $fimport$3()), [832])
	*($9 + [84]) = ($9 + [8])
	*($9 + [80]) = ($9 + [32])
	*($9 + [88]) = ($9 + [104])
	*(($8 = CALL $109([160])) + [24]) = (int_64)0
	*($8 + [16]) = (int_64)0
	*($8 + [32]) = (int_64)0
	*($8 + [40]) = (int_64)0
	*($8 + [48]) = (int_64)0
	*($8 + [56]) = (int_64)0
	*($8 + [64]) = (int_64)0
	*($8 + [72]) = (int_64)0
	*($8 + [80]) = (int_64)0
	*($8 + [88]) = (int_64)0
	*($8 + [96]) = (int_64)0
	*(($8 + [112])) = [0]
	*($8 + [104 align=4]) = (int_64)0
	$4 = CALL strlen([496])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$17 }
	*(($8 + [104])) = ($4 << [1])
	$7 = ($8 + [105])
	if ( $4 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$6 = (($4 + [16]) & [-16])
	$7 = CALL $109($6)
	*(($8 + [104])) = ($6 | [1])
	*($8 + [112]) = $7
	*($8 + [108]) = $4
	
.LABEL $label$16
	CALL memcpy($7, [496], $4)
	
.LABEL $label$15
	*(($7 + $4)) = [0]
	*($8 + [120]) = (int_64)0
	*($8 + [116]) = [0]
	*($8 + [128]) = (int_64)0
	*($8 + [136]) = (int_64)1
	*($8 + [144]) = ($9 + [32])
	CALL $83(($9 + [80]), $8)
	*($9 + [96]) = $8
	$5 = *($8)
	*($9 + [80]) = $5
	$7 = *($8 + [148])
	*($9 + [76]) = $7
	$6 = ($9 + [60])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($9 + [64]))) ){ goto $label$19 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($9 + [96]) = [0]
	*($4) = $8
	*($6) = ($4 + [24])
	goto $label$18 
	
.LABEL $label$19
	CALL $29(($9 + [56]), ($9 + [96]), ($9 + [80]), ($9 + [76]))
	
.LABEL $label$18
	$8 = *($9 + [96])
	*($9 + [96]) = [0]
	if ( ($8 == 0) ){ goto $label$20 }
	if ( ((*($8 + [104]) & [1]) == 0) ){ goto $label$21 }
	CALL $110(*(($8 + [112])))
	
.LABEL $label$21
	CALL $110($8)
	
.LABEL $label$20
	$3 = *($0)
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)CALL $fimport$3()), [832])
	*(($8 = CALL $109([24])) + [8]) = ($0 + [8])
	*($8) = *($1)
	CALL eosio_assert([1], [112])
	CALL memcpy(($9 + [80]), $8, [8])
	$5 = *($8)
	$7 = CALL db_store_i64(*(($0 + [16])), (int_64)-4455936897818034176, $3, $5, ($9 + [80]), [8])
	*($8 + [12]) = $7
	$4 = ($0 + [24])
	if ( (uint_64)($5 <= *($4)) ){ goto $label$22 }
	*($4) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$22
	*($9 + [104]) = $8
	$5 = *($8)
	*($9 + [80]) = $5
	*($9 + [8]) = $7
	$6 = ($0 + [36])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [40]))) ){ goto $label$24 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($9 + [104]) = [0]
	*($4) = $8
	*($6) = ($4 + [24])
	goto $label$23 
	
.LABEL $label$24
	CALL $26(($0 + [32]), ($9 + [104]), ($9 + [80]), ($9 + [8]))
	
.LABEL $label$23
	$8 = *($9 + [104])
	*($9 + [104]) = [0]
	if ( ($8 == 0) ){ goto $label$4 }
	CALL $110($8)
	
.LABEL $label$4
	$5 = *($1 + [8])
	$3 = *($1)
	CALL prints([1408])
	CALL printn($3)
	CALL prints([1424])
	CALL printn($5)
	CALL prints([304])
	$1 = *($9 + [56])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($9 + [60])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$26 }
	
.LOOP $label$27:
	$8 = ($8 + [-24])
	$0 = *($8)
	*($8) = [0]
	if ( ($0 == 0) ){ goto $label$28 }
	if ( ((*($0 + [104]) & [1]) == 0) ){ goto $label$29 }
	CALL $110(*(($0 + [112])))
	
.LABEL $label$29
	CALL $110($0)
	
.LABEL $label$28
	if ( ((int_32)$1 != (int_32)$8) ){ goto $label$27 }
	$8 = *(($9 + [56]))
	goto $label$25 
	
.LABEL $label$26
	$8 = $1
	
.LABEL $label$25
	*($4) = $1
	CALL $110($8)
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [112])
	return (unreachable)
	
.LABEL $label$2
	CALL $111(($8 + [104]))
	
.LABEL $label$1
	CALL $111(($8 + [104]))
	(unreachable)
}

int_32 .FUNC $80 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [48])
	$6 = *($0 + [4])
	$7 = *($6 + [72])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-3851386921959817216, ($9 + [8]), *($6 + [56]))
	*(*(($0 + [4])) + [72]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7) + [56]) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$2), [224])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $47($2, CALL $fimport$6(*($2), *($2 + [8]), (int_64)-3851386921959817216, $3))
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$2), [224])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [72])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC _ZN5eosio8goodluck6inviteEyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	*($13 + [64]) = $1
	*($13 + [56]) = $2
	*($13 + [72]) = $3
	$7 = ($0 + [48])
	*($13) = $7
	CALL $62(($13 + [16]), $13, ($13 + [72]))
	$11 = *($13 + [20])
	if ( ($11 == 0) ){ goto $label$2 }
	$11 = ( $11 ? [0] : ((int_64)*($13 + [72]) == (int_64)*($11 + [120])) )
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	
.LABEL $label$1
	if ( ((uint_64)*($11 + [48]) <= (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$3 }
	*($13 + [72]) = $3
	*($13) = $7
	CALL $62(($13 + [16]), $13, ($13 + [72]))
	$11 = *($13 + [20])
	if ( ($11 == 0) ){ goto $label$5 }
	$11 = ( $11 ? [0] : ((int_64)*($13 + [72]) == (int_64)*($11 + [120])) )
	goto $label$4 
	
.LABEL $label$5
	$11 = [0]
	
.LABEL $label$4
	if ( ((uint_64)*($11 + [40]) > (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$3 }
	CALL require_auth($1)
	$11 = [0]
	*(($13 + [48])) = [0]
	*($13 + [24]) = $1
	*($13 + [32]) = (int_64)-1
	*($13 + [40]) = (int_64)0
	*($13 + [16]) = *($0)
	*($13 + [52]) = [0]
	*($13 + [8]) = ($13 + [16])
	CALL $21(($13 + [72]), ($13 + [8]), ($13 + [64]))
	$7 = *($13 + [76])
	if ( ($7 == 0) ){ goto $label$9 }
	if ( ((int_64)*($13 + [64]) != (int_64)*($7 + [8])) ){ goto $label$8 }
	$1 = *($13 + [72])
	*($13) = $1
	$11 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	$7 = ($11) == 0)
	goto $label$6 
	
.LABEL $label$9
	*($13 + [4]) = [0]
	*($13) = ($13 + [8])
	goto $label$7 
	
.LABEL $label$8
	$11 = [0]
	*($13 + [4]) = [0]
	*($13) = ($13 + [8])
	
.LABEL $label$7
	$7 = [1]
	
.LABEL $label$6
	CALL $21(($13 + [72]), ($13 + [8]), ($11 + [16]))
	if ( $7 ){ goto $label$10 }
	$4 = ($0 + [8])
	$8 = ($0 + [32])
	$9 = ($0 + [36])
	$10 = ($0 + [16])
	
.LOOP $label$11:
	if ( ((int_64)*($11 + [136]) != (int_64)$3) ){ goto $label$10 }
	$1 = *($13 + [56])
	$5 = *($8)
	$12 = *($9)
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$12 }
	$11 = ($12 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$13:
	if ( ((int_64)*(*($11)) == (int_64)$1) ){ goto $label$12 }
	$12 = $11
	$7 = ($11 + [-24])
	$11 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$15 }
	$11 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [8]) == (int_32)$4), [224])
	if ( $11 ){ goto $label$14 }
	goto $label$10 
	
.LABEL $label$15
	$11 = CALL db_find_i64(*($4), *($10), (int_64)-4455936897818034176, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*(CALL $24($4, $11) + [8]) == (int_32)$4), [224])
	
.LABEL $label$14
	$11 = *($13 + [4])
	$1 = *($0)
	*($13 + [72]) = ($13 + [56])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [544])
	CALL $73(*($13 + [8]), $11, $1, ($13 + [72]))
	CALL $22($13)
	$11 = *($13 + [4])
	if ( $11 ){ goto $label$11 }
	
.LABEL $label$10
	CALL prints([1280])
	$12 = *($13 + [40])
	if ( ($12 == 0) ){ goto $label$3 }
	$6 = ($13 + [44])
	$11 = *($6)
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$17 }
	
.LOOP $label$18:
	$11 = ($11 + [-24])
	$7 = *($11)
	*($11) = [0]
	if ( ($7 == 0) ){ goto $label$19 }
	if ( ((*($7 + [104]) & [1]) == 0) ){ goto $label$20 }
	CALL $110(*(($7 + [112])))
	
.LABEL $label$20
	CALL $110($7)
	
.LABEL $label$19
	if ( ((int_32)$12 != (int_32)$11) ){ goto $label$18 }
	$11 = *(($13 + [40]))
	goto $label$16 
	
.LABEL $label$17
	$11 = $12
	
.LABEL $label$16
	*($6) = $12
	CALL $110($11)
	
.LABEL $label$3
	*([0] + [4]) = ($13 + [80])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$23 = (*([0] + [4]) - [112])
	*([0] + [4]) = $23
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [640])
	*($1 + [16]) = *(*($3))
	$4 = ($1 + [8])
	*(($3 = $23) + [16]) = *($4)
	$5 = ($1 + [136])
	*($3 + [24]) = *($5)
	$6 = *($1)
	CALL eosio_assert([1], [768])
	*($3 + [32]) = [0]
	*($3) = ($3 + [32])
	*($3 + [44]) = $4
	*($3 + [40]) = $1
	$7 = ($1 + [16])
	*($3 + [48]) = $7
	$8 = ($1 + [24])
	*($3 + [52]) = $8
	$9 = ($1 + [32])
	*($3 + [56]) = $9
	$10 = ($1 + [40])
	*($3 + [60]) = $10
	$11 = ($1 + [48])
	*($3 + [64]) = $11
	$12 = ($1 + [56])
	*($3 + [68]) = $12
	$13 = ($1 + [64])
	*($3 + [72]) = $13
	$14 = ($1 + [72])
	*($3 + [76]) = $14
	$15 = ($1 + [80])
	*($3 + [80]) = $15
	$16 = ($1 + [88])
	*($3 + [84]) = $16
	$17 = ($1 + [96])
	*($3 + [88]) = $17
	$18 = ($1 + [104])
	*($3 + [92]) = $18
	$19 = ($1 + [116])
	*($3 + [96]) = $19
	$20 = ($1 + [120])
	*($3 + [100]) = $20
	$21 = ($1 + [128])
	*($3 + [104]) = $21
	*($3 + [108]) = $5
	CALL $38(($3 + [40]), $3)
	$22 = *($3 + [32])
	if ( ($22 <= [513]) ){ goto $label$2 }
	$23 = CALL malloc($22)
	goto $label$1 
	
.LABEL $label$2
	$23 = ($23 - (($22 + [15]) & [-16]))
	*([0] + [4]) = $23
	
.LABEL $label$1
	*($3 + [4]) = $23
	*($3) = $23
	*($3 + [8]) = ($23 + $22)
	*($3 + [32]) = $3
	*($3 + [44]) = $4
	*($3 + [48]) = $7
	*($3 + [52]) = $8
	*($3 + [56]) = $9
	*($3 + [60]) = $10
	*($3 + [64]) = $11
	*($3 + [40]) = $1
	*($3 + [68]) = $12
	*($3 + [72]) = $13
	*($3 + [76]) = $14
	*($3 + [80]) = $15
	*($3 + [84]) = $16
	*($3 + [88]) = $17
	*($3 + [92]) = $18
	*($3 + [96]) = $19
	*($3 + [100]) = $20
	*($3 + [104]) = $21
	*($3 + [108]) = $5
	CALL $39(($3 + [40]), ($3 + [32]))
	CALL db_update_i64(*($1 + [148]), $2, $23, $22)
	if ( ($22 <= [513]) ){ goto $label$3 }
	CALL free($23)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$23 = (($3 + [16]) + [8])
	*($3 + [40]) = *($4)
	if ( (CALL memcmp(($3 + [16]), ($3 + [40]), [8]) == 0) ){ goto $label$5 }
	$4 = ($1 + [152])
	$22 = *($4)
	if ( ((int_32)$22 > (int_32)[-1]) ){ goto $label$6 }
	$22 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104000, ($3 + [32]), $6)
	*($4) = $22
	
.LABEL $label$6
	CALL db_idx64_update($22, $2, ($3 + [40]))
	
.LABEL $label$5
	*($3 + [40]) = *($5)
	if ( (CALL memcmp($23, ($3 + [40]), [8]) == 0) ){ goto $label$7 }
	$23 = ($1 + [156])
	$1 = *($23)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104001, ($3 + [32]), $6)
	*($23) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($3 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($3 + [112])
}

int_32 .FUNC $70 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [48])
	$6 = *($0 + [4])
	$7 = *(($6 + [156]))
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)4986958866982895617, ($9 + [8]), *($6 + [136]))
	*((*(($0 + [4])) + [156])) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7) + [136]) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [144]) == (int_32)$2), [224])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $6($2, CALL $fimport$6(*($2), *($2 + [8]), (int_64)4986958866982895616, $3))
	CALL eosio_assert(((int_32)*($7 + [144]) == (int_32)$2), [224])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [156])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$11 = (*([0] + [4]) - [80])
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [640])
	*(($12 = $11) + [24]) = *($1)
	$4 = ($1 + [48])
	*($12 + [32]) = *($4)
	$6 = *($1 + [56])
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)*(*($3)))
	CALL eosio_assert([1], [768])
	*($12 + [40]) = [0]
	*($12 + [8]) = ($12 + [40])
	$8 = ($1 + [8])
	*($12 + [52]) = $8
	*($12 + [48]) = $1
	$9 = ($1 + [20])
	*($12 + [56]) = $9
	$10 = ($1 + [32])
	*($12 + [60]) = $10
	$7 = ($1 + [40])
	*($12 + [64]) = $7
	*($12 + [68]) = $4
	$5 = ($1 + [56])
	*($12 + [72]) = $5
	CALL $49(($12 + [48]), ($12 + [8]))
	$3 = *($12 + [40])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$11 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$11 = ($11 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $11
	
.LABEL $label$1
	*($12 + [12]) = $11
	*($12 + [8]) = $11
	*($12 + [16]) = ($11 + $3)
	*($12 + [40]) = ($12 + [8])
	*($12 + [52]) = $8
	*($12 + [56]) = $9
	*($12 + [60]) = $10
	*($12 + [64]) = $7
	*($12 + [68]) = $4
	*($12 + [72]) = $5
	*($12 + [48]) = $1
	CALL $50(($12 + [48]), ($12 + [40]))
	CALL db_update_i64(*($1 + [68]), $2, $11, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($11)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$11 = (($12 + [24]) + [8])
	*($12 + [48]) = *($1)
	if ( (CALL memcmp(($12 + [24]), ($12 + [48]), [8]) == 0) ){ goto $label$5 }
	$8 = ($1 + [72])
	$3 = *($8)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3851386921959817216, ($12 + [40]), $6)
	*($8) = $3
	
.LABEL $label$6
	CALL db_idx64_update($3, $2, ($12 + [48]))
	
.LABEL $label$5
	*($12 + [48]) = *($4)
	if ( (CALL memcmp($11, ($12 + [48]), [8]) == 0) ){ goto $label$7 }
	$11 = ($1 + [76])
	$1 = *($11)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3851386921959817215, ($12 + [40]), $6)
	*($11) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($12 + [48]))
	
.LABEL $label$7
	*([0] + [4]) = ($12 + [80])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)3607749778735104001, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [144]) == (int_32)$4), [224])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $27($4, CALL $fimport$6(*($4), *($4 + [8]), (int_64)3607749778735104000, $5))
	CALL eosio_assert(((int_32)*($2 + [144]) == (int_32)$4), [224])
	
.LABEL $label$4
	*(($2 + [156])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$22 = (*([0] + [4]) - [112])
	*([0] + [4]) = $22
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [640])
	*($1 + [40]) = (int_64)0
	$3 = ($1 + [8])
	*(($23 = $22) + [16]) = *($3)
	$4 = ($1 + [136])
	*($23 + [24]) = *($4)
	$5 = *($1)
	*($1 + [48]) = (int_64)0
	*($1 + [120]) = (int_64)0
	CALL eosio_assert([1], [768])
	*($23 + [32]) = [0]
	*($23) = ($23 + [32])
	*($23 + [44]) = $3
	*($23 + [40]) = $1
	$9 = ($1 + [16])
	*($23 + [48]) = $9
	$10 = ($1 + [24])
	*($23 + [52]) = $10
	$11 = ($1 + [32])
	*($23 + [56]) = $11
	$6 = ($1 + [40])
	*($23 + [60]) = $6
	$7 = ($1 + [48])
	*($23 + [64]) = $7
	$12 = ($1 + [56])
	*($23 + [68]) = $12
	$13 = ($1 + [64])
	*($23 + [72]) = $13
	$14 = ($1 + [72])
	*($23 + [76]) = $14
	$15 = ($1 + [80])
	*($23 + [80]) = $15
	$16 = ($1 + [88])
	*($23 + [84]) = $16
	$17 = ($1 + [96])
	*($23 + [88]) = $17
	$18 = ($1 + [104])
	*($23 + [92]) = $18
	$19 = ($1 + [116])
	*($23 + [96]) = $19
	$8 = ($1 + [120])
	*($23 + [100]) = $8
	$20 = ($1 + [128])
	*($23 + [104]) = $20
	*($23 + [108]) = $4
	CALL $38(($23 + [40]), $23)
	$21 = *($23 + [32])
	if ( ($21 <= [513]) ){ goto $label$2 }
	$22 = CALL malloc($21)
	goto $label$1 
	
.LABEL $label$2
	$22 = ($22 - (($21 + [15]) & [-16]))
	*([0] + [4]) = $22
	
.LABEL $label$1
	*($23 + [4]) = $22
	*($23) = $22
	*($23 + [8]) = ($22 + $21)
	*($23 + [32]) = $23
	*($23 + [44]) = $3
	*($23 + [48]) = $9
	*($23 + [52]) = $10
	*($23 + [56]) = $11
	*($23 + [60]) = $6
	*($23 + [64]) = $7
	*($23 + [40]) = $1
	*($23 + [68]) = $12
	*($23 + [72]) = $13
	*($23 + [76]) = $14
	*($23 + [80]) = $15
	*($23 + [84]) = $16
	*($23 + [88]) = $17
	*($23 + [92]) = $18
	*($23 + [96]) = $19
	*($23 + [100]) = $8
	*($23 + [104]) = $20
	*($23 + [108]) = $4
	CALL $39(($23 + [40]), ($23 + [32]))
	CALL db_update_i64(*($1 + [148]), $2, $22, $21)
	if ( ($21 <= [513]) ){ goto $label$3 }
	CALL free($22)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$22 = (($23 + [16]) + [8])
	*($23 + [40]) = *($3)
	if ( (CALL memcmp(($23 + [16]), ($23 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [152])
	$21 = *($3)
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$6 }
	$21 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104000, ($23 + [32]), $5)
	*($3) = $21
	
.LABEL $label$6
	CALL db_idx64_update($21, $2, ($23 + [40]))
	
.LABEL $label$5
	*($23 + [40]) = *($4)
	if ( (CALL memcmp($22, ($23 + [40]), [8]) == 0) ){ goto $label$7 }
	$22 = ($1 + [156])
	$1 = *($22)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749778735104001, ($23 + [32]), $5)
	*($22) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($23 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($23 + [112])
}

void .FUNC _ZN5eosio8goodluck6settleEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [384])
	*([0] + [4]) = $22
	*($22 + [120]) = $1
	CALL require_auth(*($0))
	*($22 + [312]) = $1
	$21 = ($0 + [48])
	*($22 + [64]) = $21
	CALL $62(($22 + [128]), ($22 + [64]), ($22 + [312]))
	$6 = *($22 + [132])
	if ( ($6 == 0) ){ goto $label$2 }
	$6 = ( $6 ? [0] : ((int_64)*($22 + [312]) == (int_64)*($6 + [120])) )
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	if ( ((uint_64)*($6 + [48]) > (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$5 }
	CALL prints([1296])
	CALL prints([1312])
	CALL printui(*($22 + [120]))
	CALL prints([528])
	*($22 + [112]) = $21
	CALL $63(($22 + [128]), ($22 + [112]), ($22 + [120]))
	$6 = *($22 + [132])
	if ( ($6 == 0) ){ goto $label$8 }
	if ( ((int_64)*($22 + [120]) != (int_64)*($6 + [120])) ){ goto $label$7 }
	$1 = *($22 + [128])
	*($22 + [104]) = $1
	$6 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32))
	$18 = (($22 + [104]) | [4])
	goto $label$6 
	
.LABEL $label$8
	$6 = [0]
	*($22 + [108]) = [0]
	*($22 + [104]) = ($22 + [112])
	$18 = (($22 + [104]) | [4])
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	*($22 + [108]) = [0]
	*($22 + [104]) = ($22 + [112])
	$18 = (($22 + [104]) | [4])
	
.LABEL $label$6
	*($22 + [80]) = (int_64)-1
	*($22 + [88]) = [0]
	*($22 + [64]) = *($0)
	*($22 + [72]) = *($6 + [16])
	*(($22 + [92])) = [0]
	*(($22 + [96])) = [0]
	*($22 + [100]) = [0]
	*($22 + [56]) = ($22 + [64])
	$6 = ($6 + [16])
	CALL $21(($22 + [128]), ($22 + [56]), $6)
	$21 = *($22 + [132])
	if ( ($21 == 0) ){ goto $label$12 }
	if ( ((int_64)*($6) != (int_64)*($21 + [8])) ){ goto $label$12 }
	$1 = *($22 + [128])
	*($22 + [48]) = $1
	$6 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($6) == 0) ){ goto $label$11 }
	$1 = *($0)
	*($22 + [132]) = ($22 + [120])
	*($22 + [128]) = ($22 + [48])
	*($22 + [136]) = ($22 + [104])
	CALL eosio_assert([1], [544])
	CALL $75(*($22 + [56]), $6, $1, ($22 + [128]))
	$6 = *($22 + [108])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	*($22 + [52]) = [0]
	*($22 + [48]) = ($22 + [56])
	
.LABEL $label$11
	$6 = *($22 + [108])
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$3 = (($22 + [16]) | [1])
	$2 = (($22 + [32]) | [1])
	$15 = (($22 + [128]) + [144])
	$20 = (($22 + [288]) + [8])
	$19 = ($22 + [324])
	$12 = ($22 + [332])
	$13 = ($22 + [340])
	$16 = ($22 + [348])
	$17 = ($22 + [356])
	$5 = ($22 + [364])
	$9 = ($22 + [372])
	$10 = ($22 + [380])
	
.LOOP $label$13:
	if ( ((int_64)*($6 + [120]) != (int_64)*($22 + [120])) ){ goto $label$14 }
	$4 = *($0)
	$8 = *($6 + [56])
	CALL eosio_assert([1], [544])
	$21 = *($22 + [112])
	CALL eosio_assert(((int_32)*($6 + [144]) == (int_32)$21), [592])
	CALL eosio_assert(((int_64)*($21) == (int_64)CALL $fimport$3()), [640])
	$7 = ($6 + [120])
	*($20) = *($7)
	*($22 + [288]) = *($6)
	$1 = *($6 + [136])
	CALL prints([1328])
	*($6 + [64]) = (int_64)0
	*($6 + [104]) = (int_64)0
	*($6 + [96]) = (int_64)0
	*($6 + [80]) = (int_64)0
	*($6 + [112]) = (int_64)10000
	*($6 + [88]) = (int_64)0
	*($6 + [24]) = $8
	*($6) = *($0)
	$8 = *($6 + [16])
	*($6 + [16]) = (int_64)0
	*($6 + [8]) = $8
	*($6 + [56]) = (int_64)0
	$8 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($6 + [32]) = $8
	*($6 + [40]) = ((int_64)$8 + (int_64)30)
	*($6 + [48]) = ((int_64)$8 + (int_64)210)
	CALL eosio_assert(((int_64)$1 == (int_64)*($6 + [136])), [768])
	*((($22 + [272]) + [8])) = $15
	*($22 + [276]) = ($22 + [128])
	*($22 + [272]) = ($22 + [128])
	*($22 + [304]) = ($22 + [272])
	*((($22 + [312]) + [8])) = ($6 + [16])
	*($19) = ($6 + [24])
	*((($22 + [312]) + [16])) = ($6 + [32])
	*($12) = ($6 + [40])
	*((($22 + [312]) + [24])) = ($6 + [48])
	*($22 + [316]) = ($6 + [8])
	*($22 + [312]) = $6
	*($13) = ($6 + [56])
	*((($22 + [312]) + [32])) = ($6 + [64])
	*($16) = ($6 + [72])
	*((($22 + [312]) + [40])) = ($6 + [80])
	*($17) = ($6 + [88])
	*((($22 + [312]) + [48])) = ($6 + [96])
	*($5) = ($6 + [104])
	*((($22 + [312]) + [56])) = ($6 + [112])
	*($9) = $7
	*((($22 + [312]) + [64])) = ($6 + [128])
	*($10) = ($6 + [136])
	CALL $69(($22 + [312]), ($22 + [304]))
	CALL db_update_i64(*($6 + [148]), $4, ($22 + [128]), [144])
	if ( (uint_64)($1 <= *($21 + [16])) ){ goto $label$15 }
	*(($21 + [16])) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*($22 + [312]) = *($6)
	if ( (CALL memcmp(($22 + [288]), ($22 + [312]), [8]) == 0) ){ goto $label$16 }
	$11 = ($6 + [152])
	$14 = *($11)
	if ( ((int_32)$14 > (int_32)[-1]) ){ goto $label$17 }
	$14 = CALL db_idx64_find_primary(*($21), *($21 + [8]), (int_64)4986958866982895616, ($22 + [304]), $1)
	*($11) = $14
	
.LABEL $label$17
	CALL db_idx64_update($14, $4, ($22 + [312]))
	
.LABEL $label$16
	*($22 + [312]) = *($7)
	if ( (CALL memcmp($20, ($22 + [312]), [8]) == 0) ){ goto $label$18 }
	$7 = ($6 + [156])
	$6 = *($7)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$19 }
	$6 = CALL db_idx64_find_primary(*($21), *($21 + [8]), (int_64)4986958866982895617, ($22 + [304]), $1)
	*($7) = $6
	
.LABEL $label$19
	CALL db_idx64_update($6, $4, ($22 + [312]))
	
.LABEL $label$18
	CALL prints([1344])
	$1 = *($0)
	$4 = *($22 + [120])
	if ( ((int_64)$4 != (int_64)1) ){ goto $label$26 }
	*(($7 = (($22 + [32]) + [8]))) = [0]
	*($22 + [32]) = (int_64)0
	$6 = CALL strlen([16])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$25 }
	*($22 + [32]) = ($6 << [1])
	$21 = $2
	if ( $6 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	*(($7 = (($22 + [16]) + [8]))) = [0]
	*($22 + [16]) = (int_64)0
	$6 = CALL strlen([32])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$22 }
	*($22 + [16]) = ($6 << [1])
	$21 = $3
	if ( $6 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$25
	$14 = (($6 + [16]) & [-16])
	$21 = CALL $109($14)
	*($7) = $21
	*($22 + [32]) = ($14 | [1])
	*($22 + [36]) = $6
	
.LABEL $label$24
	CALL memcpy($21, [16], $6)
	
.LABEL $label$23
	*(($21 + $6)) = [0]
	CALL $7($0, $1, (int_64)1, ($22 + [32]), (int_64))(*(*($18) + [48]) - ((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295)))
	if ( ((*($22 + [32]) & [1]) == 0) ){ goto $label$14 }
	CALL $110(*($7))
	goto $label$14 
	
.LABEL $label$22
	$14 = (($6 + [16]) & [-16])
	$21 = CALL $109($14)
	*($7) = $21
	*($22 + [16]) = ($14 | [1])
	*($22 + [20]) = $6
	
.LABEL $label$21
	CALL memcpy($21, [32], $6)
	
.LABEL $label$20
	*(($21 + $6)) = [0]
	CALL $7($0, $1, $4, ($22 + [16]), (int_64))(*(*($18) + [48]) - ((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295)))
	if ( ((*($22 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL $110(*($7))
	
.LABEL $label$14
	CALL $70(($22 + [104]))
	$6 = *($22 + [108])
	if ( $6 ){ goto $label$13 }
	
.LABEL $label$9
	$6 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-4455936897818034176, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$27 }
	$5 = ($0 + [8])
	$20 = CALL $24($5, $6)
	$12 = (($22 + [128]) + [8])
	$13 = (($22 + [128]) + [16])
	$14 = (($22 + [128]) + [24])
	$15 = (($22 + [128]) + [28])
	$16 = (($22 + [128]) + [32])
	$17 = (($22 + [128]) + [36])
	
.LOOP $label$28:
	*($12) = *($20)
	*($13) = (int_64)-1
	*($14) = [0]
	*($22 + [128]) = *($0)
	*($15) = [0]
	*($16) = [0]
	*($17) = [0]
	*($22 + [8]) = ($22 + [128])
	CALL $76(($22 + [312]), ($22 + [8]), ($22 + [120]))
	$6 = *($22 + [316])
	if ( ($6 == 0) ){ goto $label$30 }
	if ( ((int_64)*($22 + [120]) != (int_64)*($6 + [136])) ){ goto $label$30 }
	$1 = *($22 + [312])
	*($22 + [272]) = $1
	$6 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($6) == 0) ){ goto $label$29 }
	
.LOOP $label$31:
	$1 = *($0)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [544])
	CALL $77(*($22 + [8]), $6, $1)
	CALL $78(($22 + [272]))
	$6 = *($22 + [276])
	if ( $6 ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	*($22 + [276]) = [0]
	*($22 + [272]) = ($22 + [8])
	
.LABEL $label$29
	*((($22 + [312]) + [8])) = *($20)
	*((($22 + [312]) + [16])) = (int_64)-1
	*(($18 = (($22 + [312]) + [24]))) = [0]
	*($22 + [312]) = *($0)
	*(($19 = (($22 + [312]) + [28]))) = [0]
	*((($22 + [312]) + [32])) = [0]
	*((($22 + [312]) + [36])) = [0]
	*($22) = ($22 + [312])
	CALL $42(($22 + [288]), $22, $20)
	$6 = *($22 + [292])
	if ( ($6 == 0) ){ goto $label$33 }
	if ( ((int_64)*($20) != (int_64)*($6)) ){ goto $label$33 }
	$1 = *($22 + [288])
	*($22 + [304]) = $1
	$6 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($6) == 0) ){ goto $label$32 }
	
.LOOP $label$34:
	if ( ((int_64)*($6 + [48]) != (int_64)*($22 + [120])) ){ goto $label$32 }
	$1 = *($0)
	CALL eosio_assert([1], [544])
	CALL $79(*($22), $6, $1)
	CALL $80(($22 + [304]))
	$6 = *($22 + [308])
	if ( $6 ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	*($22 + [308]) = [0]
	*($22 + [304]) = $22
	
.LABEL $label$32
	$7 = *($18)
	if ( ($7 == 0) ){ goto $label$35 }
	$21 = *($19)
	if ( ((int_32)$21 == (int_32)$7) ){ goto $label$37 }
	
.LOOP $label$38:
	$21 = ($21 + [-24])
	$6 = *($21)
	*($21) = [0]
	if ( ($6 == 0) ){ goto $label$39 }
	if ( ((*($6 + [20]) & [1]) == 0) ){ goto $label$40 }
	CALL $110(*(($6 + [28])))
	
.LABEL $label$40
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$41 }
	CALL $110(*(($6 + [16])))
	
.LABEL $label$41
	CALL $110($6)
	
.LABEL $label$39
	if ( ((int_32)$7 != (int_32)$21) ){ goto $label$38 }
	$6 = *($18)
	goto $label$36 
	
.LABEL $label$37
	$6 = $7
	
.LABEL $label$36
	*($19) = $7
	CALL $110($6)
	
.LABEL $label$35
	$7 = *($14)
	if ( ($7 == 0) ){ goto $label$42 }
	$6 = *($15)
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$44 }
	$6 = $7
	goto $label$43 
	
.LABEL $label$44
	
.LOOP $label$45:
	$6 = ($6 + [-24])
	$21 = *($6)
	*($6) = [0]
	if ( ($21 == 0) ){ goto $label$46 }
	if ( ((*($21 + [104]) & [1]) == 0) ){ goto $label$47 }
	CALL $110(*(($21 + [112])))
	
.LABEL $label$47
	CALL $110($21)
	
.LABEL $label$46
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$45 }
	$6 = *($14)
	
.LABEL $label$43
	*($15) = $7
	CALL $110($6)
	
.LABEL $label$42
	CALL eosio_assert([1], [48])
	$6 = CALL db_next_i64(*($20 + [12]), ($22 + [128]))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$27 }
	$20 = CALL $24($5, $6)
	goto $label$28 
	
.LABEL $label$27
	$7 = *($22 + [88])
	if ( ($7 == 0) ){ goto $label$5 }
	$0 = ($22 + [92])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$49 }
	
.LOOP $label$50:
	$6 = ($6 + [-24])
	$21 = *($6)
	*($6) = [0]
	if ( ($21 == 0) ){ goto $label$51 }
	if ( ((*($21 + [104]) & [1]) == 0) ){ goto $label$52 }
	CALL $110(*(($21 + [112])))
	
.LABEL $label$52
	CALL $110($21)
	
.LABEL $label$51
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$50 }
	$6 = *(($22 + [88]))
	goto $label$48 
	
.LABEL $label$49
	$6 = $7
	
.LABEL $label$48
	*($0) = $7
	CALL $110($6)
	
.LABEL $label$5
	CALL prints([1376])
	*([0] + [4]) = ($22 + [384])
	return (unreachable)
	
.LABEL $label$4
	CALL $111(($22 + [16]))
	
.LABEL $label$3
	CALL $111(($22 + [32]))
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $40(*($1), *($0 + [52]))
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [112])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [68])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [112])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [112])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $40(*($1), ($0 + [32]))
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $12($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [112])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [112])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $16(CALL $17($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $78 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [48])
	$6 = *($0 + [4])
	$7 = *(($6 + [156]))
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)3607749778735104001, ($9 + [8]), *($6))
	*((*(($0 + [4])) + [156])) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [144]) == (int_32)$2), [224])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $27($2, CALL $fimport$6(*($2), *($2 + [8]), (int_64)3607749778735104000, $3))
	CALL eosio_assert(((int_32)*($7 + [144]) == (int_32)$2), [224])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [156])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$11 = (*([0] + [4]) - [80])
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [640])
	*($1 + [40]) = (int_64)0
	*(($12 = $11) + [24]) = *($1)
	$3 = ($1 + [48])
	*($12 + [32]) = *($3)
	$5 = *($1 + [56])
	CALL eosio_assert([1], [768])
	*($12 + [40]) = [0]
	*($12 + [8]) = ($12 + [40])
	$7 = ($1 + [8])
	*($12 + [52]) = $7
	*($12 + [48]) = $1
	$8 = ($1 + [20])
	*($12 + [56]) = $8
	$9 = ($1 + [32])
	*($12 + [60]) = $9
	$6 = ($1 + [40])
	*($12 + [64]) = $6
	*($12 + [68]) = $3
	$4 = ($1 + [56])
	*($12 + [72]) = $4
	CALL $49(($12 + [48]), ($12 + [8]))
	$10 = *($12 + [40])
	if ( ($10 <= [513]) ){ goto $label$2 }
	$11 = CALL malloc($10)
	goto $label$1 
	
.LABEL $label$2
	$11 = ($11 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $11
	
.LABEL $label$1
	*($12 + [12]) = $11
	*($12 + [8]) = $11
	*($12 + [16]) = ($11 + $10)
	*($12 + [40]) = ($12 + [8])
	*($12 + [52]) = $7
	*($12 + [56]) = $8
	*($12 + [60]) = $9
	*($12 + [64]) = $6
	*($12 + [68]) = $3
	*($12 + [72]) = $4
	*($12 + [48]) = $1
	CALL $50(($12 + [48]), ($12 + [40]))
	CALL db_update_i64(*($1 + [68]), $2, $11, $10)
	if ( ($10 <= [513]) ){ goto $label$3 }
	CALL free($11)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$11 = (($12 + [24]) + [8])
	*($12 + [48]) = *($1)
	if ( (CALL memcmp(($12 + [24]), ($12 + [48]), [8]) == 0) ){ goto $label$5 }
	$7 = ($1 + [72])
	$10 = *($7)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$6 }
	$10 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3851386921959817216, ($12 + [40]), $5)
	*($7) = $10
	
.LABEL $label$6
	CALL db_idx64_update($10, $2, ($12 + [48]))
	
.LABEL $label$5
	*($12 + [48]) = *($3)
	if ( (CALL memcmp($11, ($12 + [48]), [8]) == 0) ){ goto $label$7 }
	$11 = ($1 + [76])
	$1 = *($11)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3851386921959817215, ($12 + [40]), $5)
	*($11) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($12 + [48]))
	
.LABEL $label$7
	*([0] + [4]) = ($12 + [80])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [512])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $12($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [160])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC _ZN5eosio8goodluck5cleanEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = ($0 + [56])
	$2 = ($0 + [48])
	CALL printui((int_64))(*(CALL $6($2, CALL $fimport$14(*($0 + [48]), *($3), (int_64)4986958866982895616, (int_64)0)) + [48]) - ((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295)))
	CALL prints([528])
	$5 = [0]
	$4 = [0]
	$0 = CALL db_lowerbound_i64(*($0 + [48]), *($3), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $6($2, $0)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [48])
	$0 = CALL db_next_i64(*($4 + [148]), ($6 + [8]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $6($2, $0)
	
.LABEL $label$2
	CALL printui((int_64))(*($5 + [48]) - ((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295)))
	CALL prints([528])
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $31(*($1), *($0 + [52]))
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [160])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [68])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $32($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $114($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $109($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $114($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $110($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $111($7)
	return (unreachable)
}