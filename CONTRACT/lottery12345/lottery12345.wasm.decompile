(data (i32.const 16672) "EOSB\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 16686) "EOS\00")
(data (i32.const 16690) "daily\00")
(data (i32.const 16696) "weekly\00")
(data (i32.const 16704) "ontransfer\00")
(data (i32.const 16715) "eosio.token\00%d\00")
(data (i32.const 16730) "transfer\00")
(data (i32.const 16739) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 16788) "invalid symbol name\00")
(data (i32.const 16808) "string is too long to be a valid symbol_code\00")
(data (i32.const 16853) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 16906) "string is too long to be a valid name\00")
(data (i32.const 16944) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 17011) "character is not in allowed character set for names\00")
(data (i32.const 17063) "now(): \00")
(data (i32.const 17071) ", \00")
(data (i32.const 17074) "\e8\b7\9d\e7\a6\bb \e6\af\8f\e6\97\a521:00 \e5\bc\80\e5\a5\96\e8\bf\98\e6\9c\89: \00")
(data (i32.const 17108) "\e8\b7\9d\e7\a6\bb \e6\af\8f\e5\91\a822:00 \e5\bc\80\e5\a5\96\e8\bf\98\e6\9c\89: \00")
(data (i32.const 17142) "sizeof(char): \00")
(data (i32.const 17157) "sizeof(uint64_t): \00")
(data (i32.const 17176) "sizeof(asset): \00")
(data (i32.const 17192) "sizeof(name): \00: no conversion\00")
(data (i32.const 17223) "sizeof(uint32_t): \00: out of range\00")
(data (i32.const 17257) "\e5\b7\b2\e5\88\a0\e9\99\a4\ef\bc\9a\00")
(data (i32.const 17270) "error reading iterator\00")
(data (i32.const 17293) "read\00")
(data (i32.const 17298) "get\00")
(data (i32.const 17302) "cannot pass end iterator to erase\00")
(data (i32.const 17336) "cannot increment end iterator\00")
(data (i32.const 17366) "object passed to erase is not in multi_index\00")
(data (i32.const 17411) "cannot erase objects in table of another contract\00")
(data (i32.const 17461) "attempt to remove object that was not in multi_index\00")
(data (i32.const 17514) "Start\n\00")
(data (i32.const 17521) "Stop\n\00")
(data (i32.const 17527) "cannot create objects in table of another contract\00")
(data (i32.const 17578) "write\00")
(data (i32.const 17584) "cannot pass end iterator to modify\00")
(data (i32.const 17619) "object passed to modify is not in multi_index\00")
(data (i32.const 17665) "cannot modify objects in table of another contract\00")
(data (i32.const 17716) "updater cannot change primary key when modifying an object\00")
(data (i32.const 17775) "\e6\af\8f\e6\97\a5\e9\9d\99\e6\80\81\e8\bf\94\e6\9c\ac\00")
(data (i32.const 17794) "multiplication overflow\00")
(data (i32.const 17818) "multiplication underflow\00")
(data (i32.const 17843) "divide by zero\00")
(data (i32.const 17858) "signed division overflow\00")
(data (i32.const 17883) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 17934) "attempt to add asset with different symbol\00")
(data (i32.const 17977) "addition underflow\00")
(data (i32.const 17996) "addition overflow\00")
(data (i32.const 18014) "attempt to subtract asset with different symbol\00")
(data (i32.const 18062) "subtraction underflow\00")
(data (i32.const 18084) "subtraction overflow\00")
(data (i32.const 18105) "\e6\81\ad\e5\96\9c\e6\82\a8\e8\b5\a2\e5\be\97\e4\ba\86\e6\af\8f\e5\91\a8\e4\b8\ad\e5\a5\96\00")
(data (i32.const 18136) "\e6\81\ad\e5\96\9c\e6\82\a8\e8\b5\a2\e5\be\97\e4\ba\86\e6\af\8f\e5\91\a8\e5\b9\b8\e8\bf\90\e5\a5\96\00")
(data (i32.const 18170) "next primary key in table is at autoincrement limit\00")
(data (i32.const 18222) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 18276) "cannot decrement iterator at beginning of table\00")
(data (i32.const 18324) "\e6\af\8f\e5\91\a8\e5\bc\80\e5\a5\96\e7\9a\84\e4\b8\ad\e5\a5\96\e9\82\80\e8\af\b7\e4\ba\ba\e5\a5\96\e5\8a\b1\00")
(data (i32.const 18361) "\e6\81\ad\e5\96\9c\e6\82\a8\e8\b5\a2\e5\be\97\e4\ba\86\e6\af\8f\e6\97\a5\e4\b8\ad\e5\a5\96.\00")
(data (i32.const 18393) "\e6\af\8f\e6\97\a5\e5\bc\80\e5\a5\96\e7\9a\84\e4\b8\ad\e5\a5\96\e9\82\80\e8\af\b7\e4\ba\ba\e5\a5\96\e5\8a\b1\00")
(data (i32.const 18430) "lotterydaily\00")
(data (i32.const 18443) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 18502) "3\e5\88\86\e9\92\9f\00")
(data (i32.const 18510) "\e6\81\ad\e5\96\9c\e6\82\a8\e8\b5\a2\e5\be\97\e4\ba\863\e5\88\86\e9\92\9f\e4\b8\ad\e5\a5\96\00")
(data (i32.const 18542) "3\e5\88\86\e9\92\9f\e5\bc\80\e5\a5\96\e7\9a\84\e4\b8\ad\e5\a5\96\e9\82\80\e8\af\b7\e4\ba\ba\e5\a5\96\e5\8a\b1\00")
(data (i32.const 18580) "\e5\a5\96\e6\b1\a0\e6\bb\a1 100 EOS\00")
(data (i32.const 18598) "lotterymins\00")
(data (i32.const 18610) "lotteryweek\00")
(data (i32.const 18622) "\e6\81\ad\e5\96\9c\e6\82\a8\e6\88\90\e4\b8\ba\e5\85\a8\e7\90\83\e5\90\88\e4\bc\99\e4\ba\ba\00")
(data (i32.const 18653) "\e5\b7\b2\e6\88\90\e5\8a\9f\e9\82\80\e8\af\b7\e4\b8\80\e4\bd\8d\e6\9c\8b\e5\8f\8b\e6\b3\a8\e5\86\8c\00")
(data (i32.const 18687) "Game type and other command must be separated with space or minuses\00")
(data (i32.const 18755) "minutes\00")
(data (i32.const 18764) "PI\00\00")
(data (i32.const 18768) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 18801) "\e7\8e\a9\e5\ae\b6\e4\b8\8b\e6\b3\a8\e6\89\93\e8\b5\8f\00")
(data (i32.const 18820) "Contract must be initialized.\00")
(data (i32.const 18850) "Contract is frozen.\00")
(data (i32.const 18870) "Only accepts CORE_SYMBOL\00")
(data (i32.const 18895) "Invalid token transfer.\00")
(data (i32.const 18919) "The amount must be greater then one.\00")
(data (i32.const 18956) "stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 19056) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 19136) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "current_time" (func $fimport$0 (result i64)))
(import "env" "memcpy" (func $fimport$1 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$3 (result i32)))
(import "env" "read_action_data" (func $fimport$4 (param i32 i32) (result i32)))
(import "env" "prints" (func $fimport$5 (param i32)))
(import "env" "printui" (func $fimport$6 (param i64)))
(import "env" "require_auth" (func $fimport$7 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "printn" (func $fimport$10 (param i64)))
(import "env" "require_recipient" (func $fimport$11 (param i64)))
(import "env" "__multi3" (func $fimport$12 (param i32 i64 i64 i64 i64)))
(import "env" "send_inline" (func $fimport$13 (param i32 i32)))
(import "env" "read_transaction" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$15 (param i32 i32 i32)))
(import "env" "is_account" (func $fimport$16 (param i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "send_deferred" (func $fimport$18 (param i32 i64 i32 i32 i32)))
(import "env" "db_get_i64" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$20 (result i64)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "db_idx64_find_primary" (func $fimport$22 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$23 (param i32)))
(import "env" "db_store_i64" (func $fimport$24 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$25 (param i32 i64 i32 i32)))
(import "env" "db_previous_i64" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$27 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$28 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$29 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$30 (param i32 i64 i32)))
(import "env" "cancel_deferred" (func $fimport$31 (param i32) (result i32)))
(import "env" "abort" (func $fimport$32))
(import "env" "memset" (func $fimport$33 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$34 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$35 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$40 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$42 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$43 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$44 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$45 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$46 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$47 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$48 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$49 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$50 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$51 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$52 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$53 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$54 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $5))
(export "_ZdlPv" (func $153))
(export "_Znwj" (func $151))
(export "_Znaj" (func $152))
(export "_ZdaPv" (func $154))
(export "_ZnwjSt11align_val_t" (func $155))
(export "_ZnajSt11align_val_t" (func $156))
(export "_ZdlPvSt11align_val_t" (func $157))
(export "_ZdaPvSt11align_val_t" (func $158))
(table $0 15 15 anyfunc)
(elem (i32.const 1) $6 $8 $9 $11 $13 $14 $15 $17 $18 $20 $22 $24 $186 $188)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19393))
(global $global$2 i32 (i32.const 19393))


void .FUNC $174 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $176($1, $0, [17207])
	CALL $178()
	(unreachable)
}

void .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$1 = ($global$0 - [640])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = CALL read_transaction([0], [0])
	$3 = CALL $201($2)
	CALL read_transaction($3, $2)
	CALL sha256($3, $2, ($1 + [592]))
	*(($1 + [584])) = [0]
	*($1 + [576]) = (int_64)0
	$2 = CALL $198([16703])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$5 }
	*($1 + [576]) = ($2 << [1])
	$3 = (($1 + [576]) | [1])
	if ( $2 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [576]) = ($4 | [1])
	*($1 + [584]) = $3
	*($1 + [580]) = $2
	
.LABEL $label$4
	CALL memcpy($3, [16703], $2)
	
.LABEL $label$3
	*(($3 + $2)) = [0]
	CALL $2(($1 + [592]), ($1 + [576]))
	$2 = *($1 + [576])
	$2 = ( *($1 + [580]) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ((uint_32)$2 > (uint_32)[5]) ){ goto $label$7 }
	$2 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	goto $label$6 
	
.LABEL $label$7
	$3 = CALL $161(($1 + [304]), ($1 + [576]), ($2 + [-6]), [-1], ($1 + [576]))
	$2 = CALL $172($3, [0], [10])
	if ( ((*($1 + [304]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$6
	$5 = [0]
	*((($1 + [536]) + [32])) = [0]
	*($1 + [552]) = (int_64)-1
	*($1 + [560]) = (int_64)0
	*($1 + [572]) = [0]
	$6 = *($0 + [8])
	*($1 + [536]) = $6
	*($1 + [544]) = $6
	$7 = (int_64)0
	$3 = CALL db_lowerbound_i64($6, $6, (int_64)3774889943067754496, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	CALL $32(($1 + [536]), $3)
	*($1 + [308]) = [0]
	*($1 + [304]) = ($1 + [536])
	$6 = *(*(CALL $52(($1 + [304])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*(($3 = ($1 + [552]))) = $7
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [18170])
	$6 = *($3)
	*($1 + [528]) = $6
	*($1 + [520]) = ((uint_64)(CASTING int_64)(int_32 $2) % (uint_64)$6)
	*((($1 + [480]) + [32])) = [0]
	*($1 + [496]) = (int_64)-1
	$6 = *(($0 + [8]))
	*($1 + [480]) = $6
	*($1 + [488]) = $6
	*($1 + [504]) = (int_64)0
	$2 = CALL db_lowerbound_i64($6, $6, (int_64)4406680248264818688, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$9 }
	$5 = CALL $27(($1 + [480]), $2)
	
.LABEL $label$9
	*((($1 + [464]) + [8])) = *(($5 + [80]))
	*($1 + [464]) = *($5 + [72])
	*($1 + [456]) = (int_64)0
	*($1 + [448]) = (int_64)0
	if ( (CALL is_account((int_64)6138535371015881248) == 0) ){ goto $label$12 }
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)6138535371015881248) ){ goto $label$12 }
	*((($1 + [448]) + [8])) = *((($1 + [464]) + [8]))
	*($1 + [448]) = *($1 + [464])
	*($1 + [272]) = (int_64)3617214756542218240
	*($1 + [264]) = $6
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [448]) / (int_64)100)
	*($1 + [448]) = $6
	CALL eosio_assert([1], [17794])
	CALL eosio_assert([1], [17818])
	*($1 + [448]) = ((int_64)$6 << (int_64)1)
	*((($1 + [208]) + [8])) = [0]
	*($1 + [208]) = (int_64)0
	$2 = CALL $198([16696])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$15 }
	*($1 + [208]) = ($2 << [1])
	$3 = (($1 + [208]) | [1])
	if ( $2 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [208]) = ($4 | [1])
	*($1 + [216]) = $3
	*($1 + [212]) = $2
	
.LABEL $label$14
	CALL memcpy($3, [16696], $2)
	
.LABEL $label$13
	*(($3 + $2)) = [0]
	*(($1 + [328])) = *((($1 + [448]) + [8]))
	$2 = (($1 + [208]) + [8])
	*(($1 + [344])) = *($2)
	*($2) = [0]
	*($1 + [312]) = (int_64)6138535371015881248
	*($1 + [304]) = *($0)
	*($1 + [320]) = *($1 + [448])
	*($1 + [336]) = *($1 + [208])
	*($1 + [208]) = (int_64)0
	$2 = CALL $48(($1 + [160]), ($1 + [264]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($1 + [304]))
	CALL $49(($1 + [224]), $2)
	$3 = *($1 + [224])
	CALL send_inline($3, (*($1 + [228]) - $3))
	$3 = *($1 + [224])
	if ( ($3 == 0) ){ goto $label$16 }
	*($1 + [228]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$3 = *($2 + [28])
	if ( ($3 == 0) ){ goto $label$17 }
	*(($2 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$17
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$18 }
	*(($2 + [20])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$18
	if ( ((*(($1 + [336])) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($1 + [344])))
	
.LABEL $label$19
	if ( ((*($1 + [208]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [216])))
	
.LABEL $label$12
	$8 = ((int_32)$5 != (int_32)[0])
	$9 = (($1 + [304]) + [32])
	$10 = (($1 + [304]) + [16])
	$11 = (($1 + [624]) | [1])
	$12 = (($1 + [208]) | [1])
	$13 = (($1 + [208]) + [8])
	$14 = (($1 + [536]) + [28])
	$15 = ($1 + [560])
	$16 = ($1 + [344])
	$17 = ($1 + [180])
	$18 = ($1 + [316])
	$7 = (int_64)0
	
.LOOP $label$20:
	*($13) = [0]
	*($1 + [208]) = (int_64)0
	$6 = ((int_64)*($1 + [520]) + (int_64)$7)
	*($1 + [520]) = $6
	$3 = *($14)
	$19 = *($15)
	if ( ((int_32)$19 == (int_32)$3) ){ goto $label$24 }
	
.LOOP $label$26:
	$2 = ($3 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$25 }
	$3 = $2
	if ( ((int_32)$19 != (int_32)$2) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	if ( ((int_32)$19 == (int_32)$3) ){ goto $label$24 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)($1 + [536])), [17883])
	if ( $4 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$2 = CALL db_find_i64(*($1 + [536]), *((($1 + [536]) + [8])), (int_64)3774889943067754496, $6)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$22 }
	$4 = CALL $32(($1 + [536]), $2)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)($1 + [536])), [17883])
	
.LABEL $label$23
	CALL $162(($1 + [208]), ($4 + [16]))
	goto $label$21 
	
.LABEL $label$22
	$6 = (int_64)
	*($1 + [520]) = $6(*($1 + [520]) - $7))
	$3 = *($14)
	$19 = *($15)
	if ( ((int_32)$19 == (int_32)$3) ){ goto $label$28 }
	
.LOOP $label$30:
	$2 = ($3 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$29 }
	$3 = $2
	if ( ((int_32)$19 != (int_32)$2) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	if ( ((int_32)$19 == (int_32)$3) ){ goto $label$28 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)($1 + [536])), [17883])
	if ( $4 ){ goto $label$27 }
	goto $label$21 
	
.LABEL $label$28
	$2 = CALL db_find_i64(*($1 + [536]), *((($1 + [536]) + [8])), (int_64)3774889943067754496, $6)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$21 }
	$4 = CALL $32(($1 + [536]), $2)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)($1 + [536])), [17883])
	
.LABEL $label$27
	CALL $162(($1 + [208]), ($4 + [16]))
	
.LABEL $label$21
	$3 = (($1 + [464]) + [8])
	*(($2 = (($1 + [448]) + [8]))) = *($3)
	*($1 + [448]) = *($1 + [464])
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [448]) / (int_64)100)
	*($1 + [448]) = $6
	$6 = ((int_64)$6 * (int_64)55)
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [17794])
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [17818])
	*($1 + [448]) = $6
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = *($1 + [448])
	*($1 + [448]) = ((int_64)$6 / (int_64)3)
	if ( ((int_64)$6 < (int_64)3) ){ goto $label$35 }
	$4 = ($4 & [1])
	$4 = *($1 + [208])
	$19 = ( *($1 + [212]) ? uint_32($4 >> [1]) : $4 )
	if ( ($19 <= [13]) ){ goto $label$38 }
	*((($1 + [264]) + [8])) = (int_64)3617214756542218240
	$6 = *($0)
	*($1 + [264]) = $6
	*((($1 + [304]) + [8])) = (int_64)-7515584006193881072
	*($10) = *($1 + [448])
	*(($10 + [8])) = *($2)
	*($1 + [304]) = $6
	CALL $160($9, ($1 + [208]))
	CALL $49(($1 + [224]), CALL $48(($1 + [160]), ($1 + [264]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($1 + [304])))
	$2 = *($1 + [224])
	CALL send_inline($2, (*($1 + [228]) - $2))
	$2 = *($1 + [224])
	if ( ($2 == 0) ){ goto $label$39 }
	*($1 + [228]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$39
	$2 = *((($1 + [160]) + [28]))
	if ( ($2 == 0) ){ goto $label$40 }
	*((($1 + [160]) + [32])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$40
	$2 = *((($1 + [160]) + [16]))
	if ( ($2 == 0) ){ goto $label$41 }
	*($17) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$41
	if ( ((*($9) & [1]) == 0) ){ goto $label$42 }
	CALL _ZdlPv(*($16))
	
.LABEL $label$42
	*(($2 = (($1 + [432]) + [8]))) = *($3)
	*($1 + [432]) = *($1 + [464])
	$3 = CALL $160(($1 + [416]), ($1 + [208]))
	*((($1 + [40]) + [8])) = *($2)
	*($1 + [40]) = *($1 + [432])
	CALL $53($0, ($1 + [40]), $3)
	if ( ((*($1 + [416]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*((($1 + [416]) + [8])))
	$6 = ((int_64)$7 & (int_64)9223372036854775807)
	if ( ((int_64)$6 != (int_64)2) ){ goto $label$36 }
	goto $label$33 
	
.LABEL $label$38
	*($1 + [412]) = $19
	*($1 + [408]) = ( *($13) ? $12 : $4 )
	*($1 + [80]) = *($1 + [408])
	CALL $4(($1 + [304]), ($1 + [80]))
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)*($1 + [304])) ){ goto $label$37 }
	*((($1 + [264]) + [8])) = (int_64)3617214756542218240
	*($1 + [264]) = $6
	$4 = *($1 + [208])
	$19 = ($4 & [1])
	*($1 + [400]) = ( *($13) ? $12 : $19 )
	*($1 + [404]) = ( *($1 + [212]) ? uint_32($4 >> [1]) : $19 )
	*($1 + [72]) = *($1 + [400])
	CALL $4(($1 + [120]), ($1 + [72]))
	*(($19 = (($1 + [624]) + [8]))) = [0]
	*($1 + [624]) = (int_64)0
	$4 = CALL $198([18105])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$34 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$45 }
	*($1 + [624]) = ($4 << [1])
	$20 = $11
	if ( $4 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$21 = (($4 + [16]) & [-16])
	$20 = CALL _Znwj($21)
	*($19) = $20
	*($1 + [624]) = ($21 | [1])
	*($1 + [628]) = $4
	
.LABEL $label$44
	CALL memcpy($20, [18105], $4)
	
.LABEL $label$43
	*(($20 + $4)) = [0]
	*((($1 + [304]) + [8])) = *($1 + [120])
	*($10) = *($1 + [448])
	*(($10 + [8])) = *($2)
	*($9) = *($1 + [624])
	*(($9 + [8])) = *($19)
	*($19) = [0]
	*($1 + [304]) = *($0)
	*($1 + [624]) = (int_64)0
	CALL $49(($1 + [224]), CALL $48(($1 + [160]), ($1 + [264]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($1 + [304])))
	$2 = *($1 + [224])
	CALL send_inline($2, (*($1 + [228]) - $2))
	$2 = *($1 + [224])
	if ( ($2 == 0) ){ goto $label$46 }
	*($1 + [228]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$46
	$2 = *((($1 + [160]) + [28]))
	if ( ($2 == 0) ){ goto $label$47 }
	*((($1 + [160]) + [32])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$47
	$2 = *((($1 + [160]) + [16]))
	if ( ($2 == 0) ){ goto $label$48 }
	*($17) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$48
	if ( ((*($9) & [1]) == 0) ){ goto $label$49 }
	CALL _ZdlPv(*($16))
	
.LABEL $label$49
	if ( ((*($1 + [624]) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*($19))
	
.LABEL $label$50
	*(($2 = (($1 + [384]) + [8]))) = *($3)
	*($1 + [384]) = *($1 + [464])
	$3 = CALL $160(($1 + [368]), ($1 + [208]))
	*((($1 + [56]) + [8])) = *($2)
	*($1 + [56]) = *($1 + [384])
	CALL $53($0, ($1 + [56]), $3)
	if ( ((*($1 + [368]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*((($1 + [368]) + [8])))
	
.LABEL $label$37
	$6 = ((int_64)$7 & (int_64)9223372036854775807)
	if ( ((int_64)$6 == (int_64)2) ){ goto $label$33 }
	
.LABEL $label$36
	if ( ((int_64)$6 != (int_64)1) ){ goto $label$51 }
	$6 = *($0)
	*((($1 + [304]) + [8])) = ($1 + [592])
	*($18) = ($1 + [208])
	*($10) = ($1 + [448])
	*($1 + [308]) = ($1 + [528])
	*($1 + [304]) = ($1 + [520])
	CALL eosio_assert($8, [17584])
	CALL $54(($1 + [480]), $5, $6, ($1 + [304]))
	if ( (*($1 + [208]) & [1]) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$51
	if ( ((int_64)$6 != (int_64)0) ){ goto $label$35 }
	$6 = *($0)
	*((($1 + [304]) + [8])) = ($1 + [592])
	*($18) = ($1 + [208])
	*($10) = ($1 + [448])
	*($1 + [308]) = ($1 + [528])
	*($1 + [304]) = ($1 + [520])
	CALL eosio_assert($8, [17584])
	CALL $55(($1 + [480]), $5, $6, ($1 + [304]))
	
.LABEL $label$35
	if ( ((*($1 + [208]) & [1]) == 0) ){ goto $label$31 }
	goto $label$32 
	
.LABEL $label$34
	CALL $159(($1 + [624]))
	
.LABEL $label$33
	$6 = *($0)
	*((($1 + [304]) + [8])) = ($1 + [592])
	*($18) = ($1 + [208])
	*($10) = ($1 + [448])
	*($1 + [308]) = ($1 + [528])
	*($1 + [304]) = ($1 + [520])
	CALL eosio_assert($8, [17584])
	CALL $56(($1 + [480]), $5, $6, ($1 + [304]))
	if ( ((*($1 + [208]) & [1]) == 0) ){ goto $label$31 }
	
.LABEL $label$32
	CALL _ZdlPv(*($13))
	
.LABEL $label$31
	$7 = ((int_64)$7 + (int_64)1)
	if ( (uint_64)($7 <= (int_64)3) ){ goto $label$20 }
	$6 = *($0)
	*($1 + [312]) = $0
	*($1 + [308]) = ($1 + [464])
	*($1 + [304]) = ($1 + [448])
	CALL eosio_assert($8, [17584])
	CALL $57(($1 + [480]), $5, $6, ($1 + [304]))
	$6 = CALL current_time()
	*(($1 + [332])) = (int_64)0
	*(($1 + [348])) = (int_64)0
	*(($1 + [356])) = (int_64)0
	*($1 + [316]) = [0]
	*($1 + [320]) = [0]
	*($1 + [324 align=4]) = (int_64)0
	*($1 + [340 align=4]) = (int_64)0
	*($1 + [304]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	*($1 + [168]) = (int_64)3617214756542218240
	*($1 + [160]) = *($0)
	*($1 + [624]) = (int_64)-4373711020246433792
	*(($1 + [216])) = [0]
	*($1 + [208]) = (int_64)0
	$2 = CALL $198([16696])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$54 }
	*($1 + [208]) = ($2 << [1])
	$3 = (($1 + [208]) | [1])
	if ( $2 ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [208]) = ($4 | [1])
	*($1 + [216]) = $3
	*($1 + [212]) = $2
	
.LABEL $label$53
	CALL memcpy($3, [16696], $2)
	
.LABEL $label$52
	*(($3 + $2)) = [0]
	$2 = (($1 + [208]) + [8])
	*((($1 + [224]) + [8])) = *($2)
	*($2) = [0]
	*($1 + [224]) = *($1 + [208])
	*($1 + [208]) = (int_64)0
	$3 = *(($1 + [344]))
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [348]))) ){ goto $label$59 }
	$6 = *($0)
	*($3 + [8]) = *($1 + [624])
	*($3) = $6
	*($3 + [16 align=4]) = (int_64)0
	*(($4 = ($3 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($3 + [16]) = $2
	$19 = ($2 + [16])
	*($4) = $19
	*(($2 + [8])) = *((($1 + [160]) + [8]))
	*($2) = *($1 + [160])
	*(($3 + [20])) = $19
	*($3 + [28 align=4]) = (int_64)0
	*(($3 + [36])) = [0]
	$2 = *($1 + [224])
	$2 = ( *($1 + [228]) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$6 = (CASTING uint_64)(uint_32 $2)
	$4 = ($3 + [28])
	
.LOOP $label$60:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$60 }
	if ( ($2 == 0) ){ goto $label$58 }
	CALL $58($4, $2)
	$4 = *(($3 + [32]))
	$2 = *(($3 + [28]))
	goto $label$57 
	
.LABEL $label$59
	CALL $59(($1 + [340]), ($1 + [160]), $0, ($1 + [624]), ($1 + [224]))
	$2 = [1]
	if ( (*($1 + [224]) & [1]) ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$58
	$4 = [0]
	$2 = [0]
	
.LABEL $label$57
	*($1 + [268]) = $2
	*($1 + [264]) = $2
	*($1 + [272]) = $4
	CALL $60(($1 + [264]), ($1 + [224]))
	*(($2 = (($1 + [304]) + [40]))) = (*($2) + [40])
	$2 = [1]
	if ( ((*($1 + [224]) & [1]) == 0) ){ goto $label$55 }
	
.LABEL $label$56
	CALL _ZdlPv(*($1 + [232]))
	
.LABEL $label$55
	if ( ((*($1 + [208]) & $2) == 0) ){ goto $label$61 }
	CALL _ZdlPv(*(($1 + [216])))
	
.LABEL $label$61
	*(($1 + [324])) = [21600]
	$6 = CALL current_time()
	*($1 + [168]) = (int_64)0
	*($1 + [160]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = *($0)
	CALL $61(($1 + [264]), ($1 + [304]))
	$2 = *($1 + [264])
	CALL send_deferred(($1 + [160]), $6, $2, (*($1 + [268]) - $2), [1])
	$2 = *($1 + [264])
	if ( ($2 == 0) ){ goto $label$62 }
	*($1 + [268]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$62
	*((($1 + [264]) + [32])) = [0]
	*($1 + [280]) = (int_64)-1
	$6 = *(($0 + [8]))
	*($1 + [264]) = $6
	*($1 + [272]) = $6
	*($1 + [288]) = (int_64)0
	$2 = CALL db_lowerbound_i64($6, $6, (int_64)4229851254120710144, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$65 }
	$13 = (($1 + [160]) + [32])
	$15 = (($1 + [160]) + [16])
	$20 = (($1 + [120]) | [1])
	$2 = CALL $26(($1 + [264]), $2)
	$9 = ($1 + [252])
	$18 = ($1 + [200])
	$12 = (($1 + [224]) + [20])
	$3 = [-1]
	
.LOOP $label$66:
	*(($19 = (($1 + [448]) + [8]))) = *((($1 + [464]) + [8]))
	*($1 + [448]) = *($1 + [464])
	$3 = ($3 + [1])
	$4 = ($3 & [2147483647])
	if ( ((int_32)$4 == (int_32)[2]) ){ goto $label$70 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$71 }
	if ( $4 ){ goto $label$69 }
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [448]) / (int_64)100)
	*($1 + [448]) = $6
	CALL eosio_assert([1], [17794])
	CALL eosio_assert([1], [17818])
	$6 = ((int_64)$6 << (int_64)3)
	*($1 + [448]) = $6
	if ( ((int_64)$6 < (int_64)1) ){ goto $label$67 }
	goto $label$68 
	
.LABEL $label$71
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [448]) / (int_64)100)
	*($1 + [448]) = $6
	CALL eosio_assert([1], [17794])
	CALL eosio_assert([1], [17818])
	$6 = ((int_64)$6 << (int_64)2)
	*($1 + [448]) = $6
	if ( ((int_64)$6 >= (int_64)1) ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$70
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [448]) / (int_64)100)
	*($1 + [448]) = $6
	CALL eosio_assert([1], [17794])
	CALL eosio_assert([1], [17818])
	$6 = ((int_64)$6 << (int_64)1)
	*($1 + [448]) = $6
	if ( ((int_64)$6 >= (int_64)1) ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$69
	*($1 + [448]) = (int_64)0
	goto $label$67 
	
.LABEL $label$68
	$4 = ($2 + [12])
	$14 = *($4)
	$10 = ($14 & [1])
	if ( $10 ){ goto $label$74 }
	if ( ((uint_32)uint_32($14 >> [1]) >= (uint_32)[13]) ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$74
	if ( (*(($2 + [16])) <= [13]) ){ goto $label$72 }
	
.LABEL $label$73
	*((($1 + [208]) + [8])) = (int_64)3617214756542218240
	$6 = *($0)
	*($1 + [208]) = $6
	*((($1 + [160]) + [8])) = (int_64)-7515584006193881072
	*($15) = *($1 + [448])
	*(($15 + [8])) = *($19)
	*($1 + [160]) = $6
	CALL $160($13, $4)
	CALL $49(($1 + [624]), CALL $48(($1 + [224]), ($1 + [208]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($1 + [160])))
	$4 = *($1 + [624])
	CALL send_inline($4, (*($1 + [628]) - $4))
	$4 = *($1 + [624])
	if ( ($4 == 0) ){ goto $label$75 }
	*($1 + [628]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$75
	$4 = *($9)
	if ( ($4 == 0) ){ goto $label$76 }
	*((($1 + [224]) + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$76
	$4 = *((($1 + [224]) + [16]))
	if ( ($4 == 0) ){ goto $label$77 }
	*($12) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$77
	if ( ((*($13) & [1]) == 0) ){ goto $label$67 }
	CALL _ZdlPv(*($18))
	goto $label$67 
	
.LABEL $label$72
	if ( $10 ){ goto $label$79 }
	$14 = uint_32($14 >> [1])
	$10 = ($4 + [1])
	goto $label$78 
	
.LABEL $label$79
	$14 = *(($2 + [16]))
	$10 = *(($2 + [20]))
	
.LABEL $label$78
	*($1 + [156]) = $14
	*($1 + [152]) = $10
	*($1 + [32]) = *($1 + [152])
	CALL $4(($1 + [160]), ($1 + [32]))
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)*($1 + [160])) ){ goto $label$67 }
	*((($1 + [208]) + [8])) = (int_64)3617214756542218240
	*($1 + [208]) = $6
	$14 = *($4)
	if ( ($14 & [1]) ){ goto $label$81 }
	$14 = uint_32($14 >> [1])
	$4 = ($4 + [1])
	goto $label$80 
	
.LABEL $label$81
	$14 = *(($2 + [16]))
	$4 = *(($2 + [20]))
	
.LABEL $label$80
	*($1 + [140]) = $14
	*($1 + [136]) = $4
	*($1 + [24]) = *($1 + [136])
	CALL $4(($1 + [144]), ($1 + [24]))
	*(($14 = (($1 + [120]) + [8]))) = [0]
	*($1 + [120]) = (int_64)0
	$4 = CALL $198([18136])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$64 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$84 }
	*($1 + [120]) = ($4 << [1])
	$10 = $20
	if ( $4 ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$84
	$17 = (($4 + [16]) & [-16])
	$10 = CALL _Znwj($17)
	*($14) = $10
	*($1 + [120]) = ($17 | [1])
	*($1 + [124]) = $4
	
.LABEL $label$83
	CALL memcpy($10, [18136], $4)
	
.LABEL $label$82
	*(($10 + $4)) = [0]
	*((($1 + [160]) + [8])) = *($1 + [144])
	*($15) = *($1 + [448])
	*(($15 + [8])) = *($19)
	*($13) = *($1 + [120])
	*(($13 + [8])) = *($14)
	*($14) = [0]
	*($1 + [160]) = *($0)
	*($1 + [120]) = (int_64)0
	CALL $49(($1 + [624]), CALL $48(($1 + [224]), ($1 + [208]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($1 + [160])))
	$4 = *($1 + [624])
	CALL send_inline($4, (*($1 + [628]) - $4))
	$4 = *($1 + [624])
	if ( ($4 == 0) ){ goto $label$85 }
	*($1 + [628]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$85
	$4 = *($9)
	if ( ($4 == 0) ){ goto $label$86 }
	*((($1 + [224]) + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$86
	$4 = *((($1 + [224]) + [16]))
	if ( ($4 == 0) ){ goto $label$87 }
	*($12) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$87
	if ( ((*($13) & [1]) == 0) ){ goto $label$88 }
	CALL _ZdlPv(*($18))
	
.LABEL $label$88
	if ( ((*($1 + [120]) & [1]) == 0) ){ goto $label$67 }
	CALL _ZdlPv(*($14))
	
.LABEL $label$67
	CALL eosio_assert([1], [17336])
	$2 = CALL db_next_i64(*($2 + [44]), ($1 + [160]))
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$65 }
	$2 = CALL $26(($1 + [264]), $2)
	if ( ($3 <= [2]) ){ goto $label$66 }
	
.LABEL $label$65
	$6 = *($0)
	CALL eosio_assert($8, [17584])
	CALL $62(($1 + [480]), $5, $6, ($1 + [160]))
	$2 = CALL db_lowerbound_i64(*($1 + [264]), *((($1 + [264]) + [8])), (int_64)4229851254120710144, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$89 }
	$3 = CALL $26(($1 + [264]), $2)
	
.LOOP $label$90:
	CALL eosio_assert([1], [17302])
	CALL eosio_assert([1], [17336])
	$2 = [0]
	$4 = CALL db_next_i64(*($3 + [44]), ($1 + [160]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$91 }
	$2 = CALL $26(($1 + [264]), $4)
	
.LABEL $label$91
	CALL $38(($1 + [264]), $3)
	$3 = $2
	if ( $2 ){ goto $label$90 }
	
.LABEL $label$89
	*(($1 + [112])) = [0]
	*($1 + [104]) = (int_64)0
	$2 = CALL $198([16703])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$63 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$94 }
	*($1 + [104]) = ($2 << [1])
	$3 = (($1 + [104]) | [1])
	if ( $2 ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$94
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [104]) = ($4 | [1])
	*($1 + [112]) = $3
	*($1 + [108]) = $2
	
.LABEL $label$93
	CALL memcpy($3, [16703], $2)
	
.LABEL $label$92
	*(($3 + $2)) = [0]
	$2 = CALL $198([16686])
	if ( ($2 <= [8]) ){ goto $label$97 }
	CALL eosio_assert([0], [16808])
	goto $label$96 
	
.LABEL $label$97
	if ( ($2 == 0) ){ goto $label$95 }
	
.LABEL $label$96
	$6 = (int_64)0
	
.LOOP $label$98:
	$3 = *(($2 + [16685]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$99 }
	CALL eosio_assert([0], [16853])
	
.LABEL $label$99
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$98 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$95
	$6 = (int_64)4
	goto $label$1 
	
.LABEL $label$64
	CALL $159(($1 + [120]))
	
.LABEL $label$63
	CALL $159(($1 + [104]))
	
.LABEL $label$11
	CALL $159(($1 + [208]))
	
.LABEL $label$10
	CALL $159(($1 + [208]))
	
.LABEL $label$2
	CALL $159(($1 + [576]))
	
.LABEL $label$1
	*($1 + [88]) = (int_64)0
	*($1 + [96]) = $6
	CALL eosio_assert([1], [16739])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$102:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$101 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$103 }
	$6 = $7
	$3 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$102 }
	goto $label$100 
	
.LABEL $label$103
	$6 = $7
	
.LOOP $label$104:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$101 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$4 = ($2 + [1])
	$2 = $4
	if ( $3 ){ goto $label$104 }
	$3 = [1]
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$102 }
	goto $label$100 
	
.LABEL $label$101
	$3 = [0]
	
.LABEL $label$100
	CALL eosio_assert($3, [16788])
	*((($1 + [8]) + [8])) = *((($1 + [88]) + [8]))
	*($1 + [8]) = *($1 + [88])
	CALL $63($0, ($1 + [104]), ($1 + [8]), [1])
	if ( ((*($1 + [104]) & [1]) == 0) ){ goto $label$105 }
	CALL _ZdlPv(*($1 + [112]))
	
.LABEL $label$105
	$4 = *($1 + [288])
	if ( ($4 == 0) ){ goto $label$106 }
	$19 = ($1 + [292])
	$2 = *($19)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$108 }
	
.LOOP $label$109:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$110 }
	if ( ((*(($3 + [12])) & [1]) == 0) ){ goto $label$111 }
	CALL _ZdlPv(*(($3 + [20])))
	
.LABEL $label$111
	CALL _ZdlPv($3)
	
.LABEL $label$110
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$109 }
	$2 = *(($1 + [288]))
	goto $label$107 
	
.LABEL $label$108
	$2 = $4
	
.LABEL $label$107
	*($19) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$106
	CALL $64(($1 + [304]))
	CALL $41(($1 + [504]))
	$4 = *($1 + [560])
	if ( ($4 == 0) ){ goto $label$112 }
	$19 = ($1 + [564])
	$2 = *($19)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$114 }
	
.LOOP $label$115:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$116 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$117 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$117
	CALL _ZdlPv($3)
	
.LABEL $label$116
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$115 }
	$2 = *(($1 + [560]))
	goto $label$113 
	
.LABEL $label$114
	$2 = $4
	
.LABEL $label$113
	*($19) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$112
	if ( ((*($1 + [576]) & [1]) == 0) ){ goto $label$118 }
	CALL _ZdlPv(*($1 + [584]))
	
.LABEL $label$118
	$global$0 = ($1 + [640])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $176 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $198($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $163($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $177 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $170 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $196(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $171 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $197(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $172 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $198([18956])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [18956], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $183())
	*(CALL $183()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $195($4, ($3 + [12]), $2)
	$5 = CALL $183()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $173($3)
	
.LABEL $label$1
	CALL $174($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $7 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $201($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $204($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC $178 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [16906])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [17011])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [16944])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [17011])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [256])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$2 }
	*($3 + [240]) = [16704]
	*($3 + [244]) = CALL $198([16704])
	*($3 + [112]) = *($3 + [240])
	CALL $4(($3 + [248]), ($3 + [112]))
	if ( ((int_64)$2 > (int_64)-4157529991795441665) ){ goto $label$12 }
	if ( ((int_64)$2 > (int_64)-6560773448818900993) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-8272103851919432736) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-8272103851764158464) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-8272103851598635008) ){ goto $label$2 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [1]
	*($3 + [72]) = *($3 + [184])
	CALL $7($1, $1, ($3 + [72]))
	goto $label$2 
	
.LABEL $label$12
	if ( ((int_64)$2 > (int_64)4520798631350992895) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-4157529991795441664) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-4157500704769003728) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-3841130677495922688) ){ goto $label$2 }
	*($3 + [236]) = [0]
	*($3 + [232]) = [2]
	*($3 + [24]) = *($3 + [232])
	CALL $7($1, $1, ($3 + [24]))
	goto $label$2 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)-6560773448818900992) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)-4998313087841861632) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4373711020246433792) ){ goto $label$2 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [3]
	*($3 + [56]) = *($3 + [200])
	CALL $10($1, $1, ($3 + [56]))
	goto $label$2 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)4520798631350992896) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)5614120222447370240) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)8516769789752901632) ){ goto $label$2 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [4]
	*($3 + [48]) = *($3 + [208])
	CALL $12($1, $1, ($3 + [48]))
	goto $label$2 
	
.LABEL $label$9
	*($3 + [180]) = [0]
	*($3 + [176]) = [5]
	*($3 + [80]) = *($3 + [176])
	CALL $7($1, $1, ($3 + [80]))
	goto $label$2 
	
.LABEL $label$8
	*($3 + [172]) = [0]
	*($3 + [168]) = [6]
	*($3 + [88]) = *($3 + [168])
	CALL $7($1, $1, ($3 + [88]))
	goto $label$2 
	
.LABEL $label$7
	*($3 + [220]) = [0]
	*($3 + [216]) = [7]
	*($3 + [40]) = *($3 + [216])
	CALL $16($1, $1, ($3 + [40]))
	goto $label$2 
	
.LABEL $label$6
	*($3 + [196]) = [0]
	*($3 + [192]) = [8]
	*($3 + [64]) = *($3 + [192])
	CALL $7($1, $1, ($3 + [64]))
	goto $label$2 
	
.LABEL $label$5
	*($3 + [164]) = [0]
	*($3 + [160]) = [9]
	*($3 + [96]) = *($3 + [160])
	CALL $19($1, $1, ($3 + [96]))
	goto $label$2 
	
.LABEL $label$4
	*($3 + [156]) = [0]
	*($3 + [152]) = [10]
	*($3 + [104]) = *($3 + [152])
	CALL $21($1, $1, ($3 + [104]))
	goto $label$2 
	
.LABEL $label$3
	*($3 + [228]) = [0]
	*($3 + [224]) = [11]
	*($3 + [32]) = *($3 + [224])
	CALL $23($1, $1, ($3 + [32]))
	
.LABEL $label$2
	*($3 + [144]) = [16715]
	*($3 + [148]) = CALL $198([16715])
	*($3 + [16]) = *($3 + [144])
	CALL $4(($3 + [248]), ($3 + [16]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	*($3 + [128]) = [16730]
	*($3 + [132]) = CALL $198([16730])
	*($3 + [8]) = *($3 + [128])
	CALL $4(($3 + [136]), ($3 + [8]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [12]
	*($3) = *($3 + [120])
	CALL $21($0, (int_64)6138663591592764928, $3)
	
.LABEL $label$1
	CALL $184([0])
	$global$0 = ($3 + [256])
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = *($0 + [8])
	$5 = *($0 + [4])
	*(($4 = *($0))) = *($5)
	*(($4 + [8])) = *(($5 + [8]))
	$4 = *($0)
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($4) / (int_64)100)
	*($4) = $6
	$6 = ((int_64)$6 * (int_64)5)
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [17794])
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [17818])
	*($4) = $6
	$6 = *($3)
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $6
	$7 = *($0)
	*((($2 + [8]) + [8])) = [0]
	*($2 + [8]) = (int_64)0
	$4 = CALL $198([16696])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($2 + [8]) = ($4 << [1])
	$5 = (($2 + [8]) | [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($2 + [8]) = ($8 | [1])
	*($2 + [16]) = $5
	*($2 + [12]) = $4
	
.LABEL $label$3
	CALL memcpy($5, [16696], $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	*($2 + [32]) = (int_64)-4817609493215935456
	*($2 + [24]) = *($3)
	$6 = *(($7 + [8]))
	$9 = *($7)
	$4 = (($2 + [8]) + [8])
	*(($2 + [64])) = *($4)
	*($4) = [0]
	*(($2 + [48])) = $6
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	*($2 + [40]) = $9
	$4 = CALL $48(($2 + [88]), ($2 + [72]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($2 + [24]))
	CALL $49(($2 + [128]), $4)
	$5 = *($2 + [128])
	CALL send_inline($5, (*($2 + [132]) - $5))
	$5 = *($2 + [128])
	if ( ($5 == 0) ){ goto $label$5 }
	*($2 + [132]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$5 = *($4 + [28])
	if ( ($5 == 0) ){ goto $label$6 }
	*(($4 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$6
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($4 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$8
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$9
	$0 = *($0)
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*(($1 + [112]))), [17934])
	$6 = ((int_64)*($1 + [104]) + (int_64)*($0))
	*($1 + [104]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [17977])
	CALL eosio_assert(((int_64)*($1 + [104]) < (int_64)4611686018427387904), [17996])
	$global$0 = ($2 + [144])
	return (unreachable)
	
.LABEL $label$1
	CALL $159(($2 + [8]))
}

int_64 .FUNC $3 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$1 = ($global$0 - [80])
	$global$0 = $1
	$2 = CALL $160(($1 + [56]), $0)
	*(($1 + [48])) = [0]
	*($1 + [40]) = (int_64)0
	$3 = CALL $198([16703])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($1 + [40]) = ($3 << [1])
	$4 = (($1 + [40]) | [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$0 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($0)
	*($1 + [40]) = ($0 | [1])
	*($1 + [48]) = $4
	*($1 + [44]) = $3
	
.LABEL $label$3
	CALL memcpy($4, [16703], $3)
	
.LABEL $label$2
	$0 = [0]
	*(($4 + $3)) = [0]
	$3 = *($1 + [56])
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($4 == 0) ){ goto $label$5 }
	$4 = ($4 + [-1])
	$5 = ($2 + [1])
	$6 = ($2 + [8])
	
.LOOP $label$6:
	$3 = *((( *($6) ? $5 : ($3 & [1]) ) + $0))
	if ( (((($3 & [223]) + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	if ( (($3 + [-49]) <= [5]) ){ goto $label$8 }
	if ( ((int_32)$3 != (int_32)[46]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $167(($1 + [40]), int_32(($3 << [24]) >> [24]))
	
.LABEL $label$7
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$5 }
	$0 = ($0 + [1])
	$3 = *($1 + [56])
	goto $label$6 
	
.LABEL $label$5
	$5 = *($1 + [40])
	$4 = ($5 & [1])
	if ( $4 ){ goto $label$11 }
	$3 = ($0 + uint_32($5 >> [1]))
	$0 = (($1 + [40]) | [1])
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$3 = ($0 + *($1 + [44]))
	$0 = *($1 + [48])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$10
	
.LOOP $label$12:
	*($0) = CALL $182(*($0))
	$0 = ($0 + [1])
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$12 }
	$5 = *($1 + [40])
	$4 = ($5 & [1])
	
.LABEL $label$9
	$3 = uint_32($5 >> [1])
	$0 = *($1 + [44])
	$5 = ( $0 ? $3 : $4 )
	if ( ((uint_32)$5 <= (uint_32)[11]) ){ goto $label$13 }
	CALL $161(($1 + [24]), ($1 + [40]), ($5 + [-12]), [-1], ($1 + [40]))
	if ( (*($1 + [40]) & [1]) ){ goto $label$15 }
	*($1 + [40]) = [0]
	goto $label$14 
	
.LABEL $label$15
	*(*($1 + [48])) = [0]
	*($1 + [44]) = [0]
	
.LABEL $label$14
	CALL $164(($1 + [40]), [0])
	*((($1 + [40]) + [8])) = *((($1 + [24]) + [8]))
	*($1 + [40]) = *($1 + [24])
	$0 = *($1 + [40])
	$3 = uint_32($0 >> [1])
	$4 = ($0 & [1])
	$0 = *($1 + [44])
	
.LABEL $label$13
	*($1 + [20]) = ( $0 ? $3 : $4 )
	*($1 + [16]) = ( *($1 + [48]) ? (($1 + [40]) | [1]) : $4 )
	*($1 + [8]) = *($1 + [16])
	$0 = CALL $4(($1 + [72]), ($1 + [8]))
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$16
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$17
	$7 = *($0)
	$global$0 = ($1 + [80])
	return $7
	
.LABEL $label$1
	CALL $159(($1 + [40]))
	return (unreachable)
}

int_32 .FUNC $189 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $185([14], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $188 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $58($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [17578])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [17578])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $121(CALL $120($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $58($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $116(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC memory ()
{
	CALL $150()
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [17527])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $110($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $106(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [17716])
	CALL eosio_assert([1], [17578])
	CALL memcpy($4, $1, [8])
	*($4 + [15]) = *($1 + [8])
	CALL eosio_assert([1], [17578])
	CALL memcpy(($4 | [8]), ($4 + [15]), [1])
	CALL db_update_i64(*($1 + [20]), $2, $4, [9])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $41 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*(($3 + [560])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [568])))
	if ( ((*(($3 + [464])) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*(($3 + [464])) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [472])))
	if ( ((*(($3 + [368])) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*(($3 + [368])) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [376])))
	if ( ((*(($3 + [272])) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*(($3 + [272])) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [280])))
	if ( (*(($3 + [176])) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*(($3 + [176])) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [184])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [17366])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17411])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [17461])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [48]))
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	$6 = *($1)
	$7 = *($3)
	$9 = *($7)
	$8 = CALL $198([16690])
	if ( ((int_32)$8 != (int_32)( *($7 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$3 }
	if ( (CALL $171($7, [0], [-1], [16690], $8) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = *($3)
	$3 = *($7)
	$9 = CALL $198([16696])
	if ( ((int_32)$9 != (int_32)( *($7 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$1 }
	if ( CALL $171($7, [0], [-1], [16696], $9) ){ goto $label$1 }
	*($1 + [104]) = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	*($1 + [88]) = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [17716])
	*($5 + [56]) = [120]
	*($5) = ($5 + [56])
	*($5 + [20]) = ($1 + [224])
	$9 = ($1 + [128])
	*($5 + [16]) = $9
	*($5 + [24]) = ($1 + [320])
	*($5 + [28]) = ($1 + [416])
	*($5 + [32]) = ($1 + [512])
	CALL $112(($5 + [16]), $5)
	$3 = *($5 + [56])
	if ( ($3 <= [513]) ){ goto $label$5 }
	$7 = CALL $201($3)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = ($7 + $3)
	*($5 + [56]) = $5
	*($5 + [48]) = $9
	*($5 + [16]) = $1
	*($5 + [20]) = ($1 + [8])
	*($5 + [24]) = ($1 + [24])
	*($5 + [28]) = ($1 + [40])
	*($5 + [32]) = ($1 + [56])
	*($5 + [36]) = ($1 + [72])
	*($5 + [40]) = ($1 + [88])
	*($5 + [44]) = ($1 + [104])
	CALL $113(($5 + [16]), ($5 + [56]))
	CALL db_update_i64(*($1 + [612]), $2, $7, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $204($7)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [64])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $160(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $160(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $92($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $164($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $164($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $159($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [17527])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([624])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [88]) = (int_64)0
	*($3 + [96]) = (int_64)0
	*($3 + [104]) = (int_64)0
	*($3 + [112]) = (int_64)0
	*($3 + [176 align=4]) = (int_64)0
	*($3 + [184]) = [0]
	*($3 + [192]) = (int_64)0
	*($3 + [200]) = (int_64)0
	*($3 + [280]) = [0]
	*($3 + [272 align=4]) = (int_64)0
	*($3 + [288]) = (int_64)0
	*($3 + [296]) = (int_64)0
	*($3 + [368 align=4]) = (int_64)0
	*($3 + [376]) = [0]
	*($3 + [384]) = (int_64)0
	*($3 + [392]) = (int_64)0
	*($3 + [464 align=4]) = (int_64)0
	*($3 + [472]) = [0]
	*($3 + [480]) = (int_64)0
	*($3 + [488]) = (int_64)0
	*($3 + [560 align=4]) = (int_64)0
	*($3 + [568]) = [0]
	*($3 + [576]) = (int_64)0
	*($3 + [584]) = (int_64)0
	*($3 + [608]) = $1
	CALL $111(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [612])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $96(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*(($3 + [560])) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [568])))
	
.LABEL $label$4
	if ( ((*(($3 + [464])) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [472])))
	
.LABEL $label$5
	if ( ((*(($3 + [368])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [376])))
	
.LABEL $label$6
	if ( ((*(($3 + [272])) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [280])))
	
.LABEL $label$7
	if ( ((*(($3 + [176])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($3 + [184])))
	
.LABEL $label$8
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $166($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $166 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $165 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $166($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $163 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $163($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $161 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $169 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $168 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $163($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $175 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $165(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $189(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [16727], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $165(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $165(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $179($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [16])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $179($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4)
	$2 = ( *($4 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$10 = (CASTING uint_64)(uint_32 $2)
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$1 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $58($9, $2)
	$1 = *($1)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	CALL $60($5, $4)
	$12 = ($7 + [40])
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [16])
	(unreachable)
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [144])
	$global$0 = $5
	*($5 + [143]) = $3
	*(($5 + [128])) = [0]
	*($5 + [112]) = (int_64)-1
	*($5 + [120]) = (int_64)0
	$6 = *($0 + [8])
	*($5 + [96]) = $6
	*($5 + [104]) = $6
	if ( ($4 == 0) ){ goto $label$2 }
	$4 = CALL db_lowerbound_i64($6, $6, (int_64)5304430358492331680, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $30(($5 + [96]), $4)
	
.LOOP $label$3:
	CALL eosio_assert([1], [17302])
	CALL eosio_assert([1], [17336])
	$4 = [0]
	$7 = CALL db_next_i64(*($3 + [44]), ($5 + [16]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $30(($5 + [96]), $7)
	
.LABEL $label$4
	CALL $36(($5 + [96]), $3)
	$3 = $4
	if ( $4 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($5 + [88]) = (int_64)0
	$4 = *($1)
	$3 = ($4 & [1])
	if ( $3 ){ goto $label$8 }
	if ( ((uint_32)uint_32($4 >> [1]) >= (uint_32)[13]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1 + [4]) <= [13]) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL $160(($5 + [72]), $1)
	$6 = CALL $3($4)
	*($5 + [88]) = $6
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($4 + [8]))
	$6 = *($5 + [88])
	goto $label$5 
	
.LABEL $label$6
	if ( $3 ){ goto $label$10 }
	$4 = uint_32($4 >> [1])
	$3 = ($1 + [1])
	goto $label$9 
	
.LABEL $label$10
	$4 = *($1 + [4])
	$3 = *($1 + [8])
	
.LABEL $label$9
	*($5 + [68]) = $4
	*($5 + [64]) = $3
	*($5 + [8]) = *($5 + [64])
	$6 = *(CALL $4(($5 + [16]), ($5 + [8])))
	*($5 + [88]) = $6
	
.LABEL $label$5
	$3 = *(($5 + [124]))
	$8 = *(($5 + [120]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$14 }
	
.LOOP $label$16:
	$4 = ($3 + [-24])
	$7 = *($4)
	if ( ((int_64)*($7) == (int_64)$6) ){ goto $label$15 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($5 + [96])), [17883])
	goto $label$13 
	
.LABEL $label$14
	$4 = CALL db_find_i64(*($5 + [96]), *(($5 + [104])), (int_64)5304430358492331680, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$7 = CALL $30(($5 + [96]), $4)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($5 + [96])), [17883])
	
.LABEL $label$13
	$6 = *($0)
	*($5 + [20]) = $2
	*($5 + [16]) = ($5 + [143])
	CALL eosio_assert([1], [17584])
	CALL $117(($5 + [96]), $7, $6, ($5 + [16]))
	goto $label$11 
	
.LABEL $label$12
	$6 = *($0)
	*($5 + [20]) = $1
	*($5 + [24]) = $2
	*($5 + [16]) = ($5 + [88])
	CALL $118(($5 + [56]), ($5 + [96]), $6, ($5 + [16]))
	
.LABEL $label$11
	*(($5 + [48])) = [0]
	*($5 + [32]) = (int_64)-1
	$6 = *(($0 + [8]))
	*($5 + [16]) = $6
	*($5 + [24]) = $6
	*($5 + [40]) = (int_64)0
	$4 = [0]
	$3 = CALL db_lowerbound_i64($6, $6, (int_64)4406680248264818688, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$17 }
	$4 = CALL $27(($5 + [16]), $3)
	
.LABEL $label$17
	$6 = *($0)
	*($5 + [60]) = $2
	*($5 + [56]) = ($5 + [143])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [17584])
	CALL $119(($5 + [16]), $4, $6, ($5 + [56]))
	CALL $41(($5 + [40]))
	
.LABEL $label$1
	$7 = *($5 + [120])
	if ( ($7 == 0) ){ goto $label$18 }
	$8 = ($5 + [124])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$20 }
	
.LOOP $label$21:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$22 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$23
	CALL _ZdlPv($3)
	
.LABEL $label$22
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$21 }
	$4 = *(($5 + [120]))
	goto $label$19 
	
.LABEL $label$20
	$4 = $7
	
.LABEL $label$19
	*($8) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$18
	$global$0 = ($5 + [144])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	*($1 + [24]) = (int_64)0
	*($1 + [56]) = (int_64)0
	*($1 + [40]) = (int_64)0
	$5 = *($1)
	CALL eosio_assert([1], [17716])
	*(($6 = $4) + [56]) = [120]
	*($6) = ($6 + [56])
	*($6 + [20]) = ($1 + [224])
	$7 = ($1 + [128])
	*($6 + [16]) = $7
	*($6 + [24]) = ($1 + [320])
	*($6 + [28]) = ($1 + [416])
	*($6 + [32]) = ($1 + [512])
	CALL $112(($6 + [16]), $6)
	$8 = *($6 + [56])
	if ( ($8 <= [513]) ){ goto $label$2 }
	$4 = CALL $201($8)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = ($4 + $8)
	*($6 + [56]) = $6
	*($6 + [48]) = $7
	*($6 + [16]) = $1
	*($6 + [20]) = ($1 + [8])
	*($6 + [24]) = ($1 + [24])
	*($6 + [28]) = ($1 + [40])
	*($6 + [32]) = ($1 + [56])
	*($6 + [36]) = ($1 + [72])
	*($6 + [40]) = ($1 + [88])
	*($6 + [44]) = ($1 + [104])
	CALL $113(($6 + [16]), ($6 + [56]))
	CALL db_update_i64(*($1 + [612]), $2, $4, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($6 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($6 + [64])
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [52]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18276])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)3774889943067754496)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18222])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18222])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $32(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_32 $20
	$3 = ($global$0 - [208])
	$global$0 = $3
	*($3 + [184]) = [0]
	*($3 + [176]) = (int_64)0
	$2 = CALL $160(($3 + [160]), $2)
	CALL $67($0, $2, ($3 + [176]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	$4 = *($3 + [176])
	$2 = (*($3 + [180]) - $4)
	$5 = ((int_32)$2 / (int_32)[12])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$4 }
	$6 = (($3 + [56]) + [32])
	$7 = (($3 + [16]) | [1])
	$8 = ($1 + [8])
	$9 = (($3 + [56]) + [16])
	$10 = ($3 + [80])
	$11 = ($3 + [148])
	$12 = ($3 + [96])
	$13 = ($3 + [140])
	$14 = [0]
	$2 = [0]
	
.LOOP $label$5:
	$15 = *($8)
	$16 = (int_64)0
	$4 = ($2 & [2147483647])
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$6 }
	$16 = *($1)
	goto $label$8 
	
.LABEL $label$11
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	CALL eosio_assert([1], [17794])
	CALL eosio_assert([1], [17818])
	$16 = ((int_64)$16 / (int_64)200)
	goto $label$6 
	
.LABEL $label$10
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	CALL eosio_assert([1], [17794])
	CALL eosio_assert([1], [17818])
	$16 = ((int_64)((int_64)$16 / (int_64)200) << (int_64)1)
	goto $label$6 
	
.LABEL $label$9
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	CALL eosio_assert([1], [17794])
	CALL eosio_assert([1], [17818])
	$16 = ((int_64)((int_64)$16 / (int_64)200) << (int_64)1)
	goto $label$6 
	
.LABEL $label$8
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$16 = ((int_64)((int_64)$16 / (int_64)200) * (int_64)6)
	CALL eosio_assert(((int_64)$16 < (int_64)4611686018427387904), [17794])
	CALL eosio_assert(((int_64)$16 > (int_64)-4611686018427387904), [17818])
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	CALL eosio_assert([1], [17794])
	CALL eosio_assert([1], [17818])
	$16 = ((int_64)((int_64)$16 / (int_64)200) << (int_64)2)
	
.LABEL $label$6
	$4 = *($3 + [176])
	if ( ((uint_32)((int_32)(*($3 + [180]) - $4) / (int_32)[12]) <= (uint_32)$2) ){ goto $label$15 }
	$4 = ($4 + $14)
	$17 = *($4)
	$18 = ($17 & [1])
	if ( $18 ){ goto $label$17 }
	if ( ((uint_32)uint_32($17 >> [1]) >= (uint_32)[13]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	if ( (*(($4 + [4])) <= [13]) ){ goto $label$14 }
	
.LABEL $label$16
	*((($3 + [104]) + [8])) = (int_64)3617214756542218240
	$19 = *($0)
	*($3 + [104]) = $19
	*((($3 + [56]) + [8])) = (int_64)-7515584006193881072
	*($9) = $16
	*($10) = $15
	*($3 + [56]) = $19
	CALL $160($6, $4)
	CALL $49(($3 + [192]), CALL $48(($3 + [120]), ($3 + [104]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($3 + [56])))
	$4 = *($3 + [192])
	CALL send_inline($4, (*($3 + [196]) - $4))
	$4 = *($3 + [192])
	if ( ($4 == 0) ){ goto $label$18 }
	*($3 + [196]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$18
	$4 = *($11)
	if ( ($4 == 0) ){ goto $label$19 }
	*((($3 + [120]) + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$19
	$4 = *((($3 + [120]) + [16]))
	if ( ($4 == 0) ){ goto $label$20 }
	*($13) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((*($6) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($12))
	$14 = ($14 + [12])
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)$5) ){ goto $label$5 }
	goto $label$12 
	
.LABEL $label$15
	CALL $180(($3 + [176]))
	
.LABEL $label$14
	if ( $18 ){ goto $label$22 }
	$17 = uint_32($17 >> [1])
	$4 = ($4 + [1])
	goto $label$21 
	
.LABEL $label$22
	$17 = *(($4 + [4]))
	$4 = *(($4 + [8]))
	
.LABEL $label$21
	*($3 + [52]) = $17
	*($3 + [48]) = $4
	*($3 + [8]) = *($3 + [48])
	CALL $4(($3 + [56]), ($3 + [8]))
	$19 = *($0)
	if ( ((int_64)$19 == (int_64)*($3 + [56])) ){ goto $label$13 }
	*((($3 + [104]) + [8])) = (int_64)3617214756542218240
	*($3 + [104]) = $19
	$4 = *($3 + [176])
	if ( ((uint_32)((int_32)(*($3 + [180]) - $4) / (int_32)[12]) <= (uint_32)$2) ){ goto $label$3 }
	$4 = ($4 + $14)
	$17 = *($4)
	if ( ($17 & [1]) ){ goto $label$24 }
	$17 = uint_32($17 >> [1])
	$4 = ($4 + [1])
	goto $label$23 
	
.LABEL $label$24
	$17 = *(($4 + [4]))
	$4 = *(($4 + [8]))
	
.LABEL $label$23
	*($3 + [36]) = $17
	*($3 + [32]) = $4
	*($3) = *($3 + [32])
	CALL $4(($3 + [40]), $3)
	*(($17 = (($3 + [16]) + [8]))) = [0]
	*($3 + [16]) = (int_64)0
	$4 = CALL $198([18324])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$27 }
	*($3 + [16]) = ($4 << [1])
	$18 = $7
	if ( $4 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$20 = (($4 + [16]) & [-16])
	$18 = CALL _Znwj($20)
	*($17) = $18
	*($3 + [16]) = ($20 | [1])
	*($3 + [20]) = $4
	
.LABEL $label$26
	CALL memcpy($18, [18324], $4)
	
.LABEL $label$25
	*(($18 + $4)) = [0]
	*($9) = $16
	*($10) = $15
	*((($3 + [56]) + [8])) = *($3 + [40])
	*($6) = *($3 + [16])
	*(($6 + [8])) = *($17)
	*($17) = [0]
	*($3 + [56]) = *($0)
	*($3 + [16]) = (int_64)0
	CALL $49(($3 + [192]), CALL $48(($3 + [120]), ($3 + [104]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($3 + [56])))
	$4 = *($3 + [192])
	CALL send_inline($4, (*($3 + [196]) - $4))
	$4 = *($3 + [192])
	if ( ($4 == 0) ){ goto $label$28 }
	*($3 + [196]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$28
	$4 = *($11)
	if ( ($4 == 0) ){ goto $label$29 }
	*((($3 + [120]) + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$29
	$4 = *((($3 + [120]) + [16]))
	if ( ($4 == 0) ){ goto $label$30 }
	*($13) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( ((*($6) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*($12))
	
.LABEL $label$31
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($17))
	
.LABEL $label$13
	$14 = ($14 + [12])
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$12
	$4 = *($3 + [176])
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$32 }
	$14 = *($3 + [180])
	if ( ((int_32)$14 == (int_32)$4) ){ goto $label$34 }
	
.LOOP $label$35:
	$2 = ($14 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($14 + [-4])))
	
.LABEL $label$36
	$14 = $2
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$35 }
	$2 = *($3 + [176])
	goto $label$33 
	
.LABEL $label$34
	$2 = $4
	
.LABEL $label$33
	*($3 + [180]) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$32
	$global$0 = ($3 + [208])
	return (unreachable)
	
.LABEL $label$3
	CALL $180(($3 + [176]))
	
.LABEL $label$2
	CALL $159(($3 + [16]))
	$4
	(unreachable)
	(unreachable)
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	*(($5 = ($1 + [416]))) = *(*($3))
	*(($1 + [424])) = *(*($3 + [4]))
	$6 = *($3 + [8])
	*(($1 + [448])) = *(($6 + [16]))
	*(($1 + [440])) = *(($6 + [8]))
	*(($1 + [432])) = *($6)
	*(($1 + [456])) = *(($6 + [24]))
	$7 = *($1)
	CALL $162(($1 + [464]), *($3 + [12]))
	$3 = *($3 + [16])
	*(($1 + [480])) = *($3)
	$8 = *(($3 + [8]))
	*(($3 = ($1 + [496]))) = (*($3) + [1])
	*(($1 + [488])) = $8
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [17716])
	*(($3 = $4) + [56]) = [120]
	*($3) = ($3 + [56])
	*($3 + [20]) = ($1 + [224])
	$9 = ($1 + [128])
	*($3 + [16]) = $9
	*($3 + [24]) = ($1 + [320])
	*($3 + [28]) = $5
	*($3 + [32]) = ($1 + [512])
	CALL $112(($3 + [16]), $3)
	$5 = *($3 + [56])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL $201($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($4 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	*($3 + [56]) = $3
	*($3 + [48]) = $9
	*($3 + [16]) = $1
	*($3 + [20]) = ($1 + [8])
	*($3 + [24]) = ($1 + [24])
	*($3 + [28]) = ($1 + [40])
	*($3 + [32]) = ($1 + [56])
	*($3 + [36]) = ($1 + [72])
	*($3 + [40]) = ($1 + [88])
	*($3 + [44]) = ($1 + [104])
	CALL $113(($3 + [16]), ($3 + [56]))
	CALL db_update_i64(*($1 + [612]), $2, $6, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($6)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	*(($5 = ($1 + [320]))) = *(*($3))
	*(($1 + [328])) = *(*($3 + [4]))
	$6 = *($3 + [8])
	*(($1 + [352])) = *(($6 + [16]))
	*(($1 + [344])) = *(($6 + [8]))
	*(($1 + [336])) = *($6)
	*(($1 + [360])) = *(($6 + [24]))
	$7 = *($1)
	CALL $162(($1 + [368]), *($3 + [12]))
	$3 = *($3 + [16])
	*(($1 + [384])) = *($3)
	$8 = *(($3 + [8]))
	*(($3 = ($1 + [400]))) = (*($3) + [1])
	*(($1 + [392])) = $8
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [17716])
	*(($3 = $4) + [56]) = [120]
	*($3) = ($3 + [56])
	*($3 + [20]) = ($1 + [224])
	$9 = ($1 + [128])
	*($3 + [16]) = $9
	*($3 + [24]) = $5
	*($3 + [28]) = ($1 + [416])
	*($3 + [32]) = ($1 + [512])
	CALL $112(($3 + [16]), $3)
	$5 = *($3 + [56])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL $201($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($4 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	*($3 + [56]) = $3
	*($3 + [48]) = $9
	*($3 + [16]) = $1
	*($3 + [20]) = ($1 + [8])
	*($3 + [24]) = ($1 + [24])
	*($3 + [28]) = ($1 + [40])
	*($3 + [32]) = ($1 + [56])
	*($3 + [36]) = ($1 + [72])
	*($3 + [40]) = ($1 + [88])
	*($3 + [44]) = ($1 + [104])
	CALL $113(($3 + [16]), ($3 + [56]))
	CALL db_update_i64(*($1 + [612]), $2, $6, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($6)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	*(($5 = ($1 + [512]))) = *(*($3))
	*(($1 + [520])) = *(*($3 + [4]))
	$6 = *($3 + [8])
	*(($1 + [544])) = *(($6 + [16]))
	*(($1 + [536])) = *(($6 + [8]))
	*(($1 + [528])) = *($6)
	*(($1 + [552])) = *(($6 + [24]))
	$7 = *($1)
	CALL $162(($1 + [560]), *($3 + [12]))
	$3 = *($3 + [16])
	*(($1 + [576])) = *($3)
	$8 = *(($3 + [8]))
	*(($3 = ($1 + [592]))) = (*($3) + [1])
	*(($1 + [584])) = $8
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [17716])
	*(($3 = $4) + [56]) = [120]
	*($3) = ($3 + [56])
	*($3 + [20]) = ($1 + [224])
	$9 = ($1 + [128])
	*($3 + [16]) = $9
	*($3 + [24]) = ($1 + [320])
	*($3 + [28]) = ($1 + [416])
	*($3 + [32]) = $5
	CALL $112(($3 + [16]), $3)
	$5 = *($3 + [56])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL $201($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($4 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	*($3 + [56]) = $3
	*($3 + [48]) = $9
	*($3 + [16]) = $1
	*($3 + [20]) = ($1 + [8])
	*($3 + [24]) = ($1 + [24])
	*($3 + [28]) = ($1 + [40])
	*($3 + [32]) = ($1 + [56])
	*($3 + [36]) = ($1 + [72])
	*($3 + [40]) = ($1 + [88])
	*($3 + [44]) = ($1 + [104])
	CALL $113(($3 + [16]), ($3 + [56]))
	CALL db_update_i64(*($1 + [612]), $2, $6, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($6)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	$5 = *($1)
	CALL $127($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [17716])
	*(($3 = $4) + [56]) = [120]
	*($3) = ($3 + [56])
	*($3 + [20]) = ($1 + [224])
	$6 = ($1 + [128])
	*($3 + [16]) = $6
	*($3 + [24]) = ($1 + [320])
	*($3 + [28]) = ($1 + [416])
	*($3 + [32]) = ($1 + [512])
	CALL $112(($3 + [16]), $3)
	$7 = *($3 + [56])
	if ( ($7 <= [513]) ){ goto $label$2 }
	$4 = CALL $201($7)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $7)
	*($3 + [56]) = $3
	*($3 + [48]) = $6
	*($3 + [16]) = $1
	*($3 + [20]) = ($1 + [8])
	*($3 + [24]) = ($1 + [24])
	*($3 + [28]) = ($1 + [40])
	*($3 + [32]) = ($1 + [56])
	*($3 + [36]) = ($1 + [72])
	*($3 + [40]) = ($1 + [88])
	*($3 + [44]) = ($1 + [104])
	CALL $113(($3 + [16]), ($3 + [56]))
	CALL db_update_i64(*($1 + [612]), $2, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $173 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $176($1, $0, [17242])
	CALL $177()
	(unreachable)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $204($0)
	
.LABEL $label$1
}

void .FUNC $150 ()
{
	int_32 $0
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$0 = CALL $198([16672])
	if ( ($0 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [16808])
	goto $label$3 
	
.LABEL $label$4
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$1 = (int_64)0
	
.LOOP $label$5:
	$2 = *(($0 + [16671]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [16853])
	
.LABEL $label$6
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$5 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$1 = (int_64)4
	
.LABEL $label$1
	*([0] + [8200]) = $1
	*([0] + [8192]) = (int_64)50000
	CALL eosio_assert([1], [16739])
	$1 = (uint_64)*([0] + [8200]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $3
	$2 = [1]
	$4 = $0
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$1 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$2 = ((int_32)$0 < (int_32)[6])
	$4 = ($0 + [1])
	$0 = $4
	if ( $2 ){ goto $label$11 }
	$2 = [1]
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$2 = [0]
	
.LABEL $label$7
	CALL eosio_assert($2, [16788])
	$0 = CALL $198([16672])
	if ( ($0 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [16808])
	goto $label$14 
	
.LABEL $label$15
	if ( ($0 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$1 = (int_64)0
	
.LOOP $label$16:
	$2 = *(($0 + [16671]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [16853])
	
.LABEL $label$17
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$16 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$1 = (int_64)4
	
.LABEL $label$12
	*([0] + [8216]) = $1
	*([0] + [8208]) = (int_64)100000
	CALL eosio_assert([1], [16739])
	$1 = (uint_64)*([0] + [8216]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$1 = $3
	$2 = [1]
	$4 = $0
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$1 = $3
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$2 = ((int_32)$0 < (int_32)[6])
	$4 = ($0 + [1])
	$0 = $4
	if ( $2 ){ goto $label$22 }
	$2 = [1]
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$2 = [0]
	
.LABEL $label$18
	CALL eosio_assert($2, [16788])
	$0 = CALL $198([16686])
	if ( ($0 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [16808])
	goto $label$25 
	
.LABEL $label$26
	if ( ($0 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$1 = (int_64)0
	
.LOOP $label$27:
	$2 = *(($0 + [16685]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [16853])
	
.LABEL $label$28
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$27 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$23 
	
.LABEL $label$24
	$1 = (int_64)4
	
.LABEL $label$23
	*([0] + [8232]) = $1
	*([0] + [8224]) = (int_64)10000
	CALL eosio_assert([1], [16739])
	$1 = (uint_64)*([0] + [8232]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$1 = $3
	$2 = [1]
	$4 = $0
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$1 = $3
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$2 = ((int_32)$0 < (int_32)[6])
	$4 = ($0 + [1])
	$0 = $4
	if ( $2 ){ goto $label$33 }
	$2 = [1]
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$2 = [0]
	
.LABEL $label$29
	CALL eosio_assert($2, [16788])
	$0 = CALL $198([16686])
	if ( ($0 <= [8]) ){ goto $label$37 }
	CALL eosio_assert([0], [16808])
	goto $label$36 
	
.LABEL $label$37
	if ( ($0 == 0) ){ goto $label$35 }
	
.LABEL $label$36
	$1 = (int_64)0
	
.LOOP $label$38:
	$2 = *(($0 + [16685]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$39 }
	CALL eosio_assert([0], [16853])
	
.LABEL $label$39
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$38 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$34 
	
.LABEL $label$35
	$1 = (int_64)4
	
.LABEL $label$34
	*([0] + [8248]) = $1
	*([0] + [8240]) = (int_64)1000000
	CALL eosio_assert([1], [16739])
	$1 = (uint_64)*([0] + [8248]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$42:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$40 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$44 }
	$1 = $3
	$5 = [1]
	$2 = $0
	$0 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$42 }
	goto $label$43 
	
.LABEL $label$44
	$1 = $3
	
.LOOP $label$45:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$41 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$2 = ((int_32)$0 < (int_32)[6])
	$4 = ($0 + [1])
	$0 = $4
	if ( $2 ){ goto $label$45 }
	$5 = [1]
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$42 }
	
.LABEL $label$43
	CALL eosio_assert($5, [16788])
	return 
	
.LABEL $label$41
	CALL eosio_assert([0], [16788])
	return 
	
.LABEL $label$40
	CALL eosio_assert([0], [16788])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $201($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8256])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $201($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $204($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $199(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8256])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $199(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $159 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $179 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $183 ()
{
	return [8260]
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	$5 = *($1)
	$7 = *($3 + [4])
	*(($6 = *($3))) = *($7)
	*(($6 + [8])) = *(($7 + [8]))
	$6 = *($3)
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$8 = ((int_64)*($6) / (int_64)100)
	*($6) = $8
	$8 = ((int_64)$8 * (int_64)3)
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [17794])
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [17818])
	*($6) = $8
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [80]))), [17934])
	$8 = ((int_64)*($1 + [72]) + (int_64)*($3))
	*($1 + [72]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [17977])
	CALL eosio_assert(((int_64)*($1 + [72]) < (int_64)4611686018427387904), [17996])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [17716])
	*(($3 = $4) + [56]) = [120]
	*($3) = ($3 + [56])
	*($3 + [20]) = ($1 + [224])
	$9 = ($1 + [128])
	*($3 + [16]) = $9
	*($3 + [24]) = ($1 + [320])
	*($3 + [28]) = ($1 + [416])
	*($3 + [32]) = ($1 + [512])
	CALL $112(($3 + [16]), $3)
	$7 = *($3 + [56])
	if ( ($7 <= [513]) ){ goto $label$2 }
	$6 = CALL $201($7)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $7)
	*($3 + [56]) = $3
	*($3 + [48]) = $9
	*($3 + [16]) = $1
	*($3 + [20]) = ($1 + [8])
	*($3 + [24]) = ($1 + [24])
	*($3 + [28]) = ($1 + [40])
	*($3 + [32]) = ($1 + [56])
	*($3 + [36]) = ($1 + [72])
	*($3 + [40]) = ($1 + [88])
	*($3 + [44]) = ($1 + [104])
	CALL $113(($3 + [16]), ($3 + [56]))
	CALL db_update_i64(*($1 + [612]), $2, $6, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($6)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	$5 = *($1)
	CALL $136($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [17716])
	*(($3 = $4) + [56]) = [120]
	*($3) = ($3 + [56])
	*($3 + [20]) = ($1 + [224])
	$6 = ($1 + [128])
	*($3 + [16]) = $6
	*($3 + [24]) = ($1 + [320])
	*($3 + [28]) = ($1 + [416])
	*($3 + [32]) = ($1 + [512])
	CALL $112(($3 + [16]), $3)
	$7 = *($3 + [56])
	if ( ($7 <= [513]) ){ goto $label$2 }
	$4 = CALL $201($7)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $7)
	*($3 + [56]) = $3
	*($3 + [48]) = $6
	*($3 + [16]) = $1
	*($3 + [20]) = ($1 + [8])
	*($3 + [24]) = ($1 + [24])
	*($3 + [28]) = ($1 + [40])
	*($3 + [32]) = ($1 + [56])
	*($3 + [36]) = ($1 + [72])
	*($3 + [40]) = ($1 + [88])
	*($3 + [44]) = ($1 + [104])
	CALL $113(($3 + [16]), ($3 + [56]))
	CALL db_update_i64(*($1 + [612]), $2, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

int_32 .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [48]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18276])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)5304430020972773376)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18222])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18222])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $29(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [112])
	$global$0 = $3
	$4 = *($1)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$4 }
	if ( ((uint_32)uint_32($4 >> [1]) >= (uint_32)[13]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($1 + [4]) <= [13]) ){ goto $label$2 }
	
.LABEL $label$3
	$1 = CALL $160(($3 + [96]), $1)
	$6 = CALL $3($1)
	if ( ((*($1) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($1 + [8]))
	goto $label$1 
	
.LABEL $label$2
	if ( $5 ){ goto $label$6 }
	$4 = uint_32($4 >> [1])
	$1 = ($1 + [1])
	goto $label$5 
	
.LABEL $label$6
	$4 = *($1 + [4])
	$1 = *($1 + [8])
	
.LABEL $label$5
	*($3 + [92]) = $4
	*($3 + [88]) = $1
	*($3 + [8]) = *($3 + [88])
	$6 = *(CALL $4(($3 + [48]), ($3 + [8])))
	
.LABEL $label$1
	*(($3 + [80])) = [0]
	*($3 + [64]) = (int_64)-1
	*($3 + [72]) = (int_64)0
	$7 = *($0 + [8])
	*($3 + [48]) = $7
	*($3 + [56]) = $7
	$8 = (($3 + [48]) + [8])
	$9 = ($2 + [4])
	$10 = (($3 + [48]) + [24])
	$11 = (($3 + [48]) + [28])
	$5 = [0]
	$0 = [0]
	$12 = [0]
	if ( ((int_32)[0] != (int_32)[0]) ){ goto $label$8 }
	$13 = [2]
	goto $label$7 
	
.LABEL $label$8
	$13 = [0]
	
.LABEL $label$7
	
.LOOP $label$9:
	goto $label$67 
	
.LABEL $label$68
	$0 = *($11)
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$35 }
	$13 = [0]
	goto $label$9 
	
.LABEL $label$67
	$1 = ($0 + [-24])
	$4 = *($1)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$31 }
	$13 = [1]
	goto $label$9 
	
.LABEL $label$66
	$0 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$65
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$34 }
	$13 = [32]
	goto $label$9 
	
.LABEL $label$64
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($3 + [48])), [17883])
	if ( $4 ){ goto $label$32 }
	goto $label$33 
	
.LABEL $label$63
	$1 = CALL db_find_i64(*($3 + [48]), *($8), (int_64)-4998313087829278720, $6)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$28 }
	$13 = [3]
	goto $label$9 
	
.LABEL $label$62
	$4 = CALL $25(($3 + [48]), $1)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($3 + [48])), [17883])
	$13 = [4]
	goto $label$9 
	
.LABEL $label$61
	$1 = ($4 + [20])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)*(($2 + [8]))) ){ goto $label$27 }
	$13 = [5]
	goto $label$9 
	
.LABEL $label$60
	CALL $160($0, $1)
	*($9) = (*($9) + [12])
	$0 = *($1)
	$5 = ($0 & [1])
	if ( $5 ){ goto $label$25 }
	$13 = [29]
	goto $label$9 
	
.LABEL $label$59
	if ( ((uint_32)uint_32($0 >> [1]) >= (uint_32)[13]) ){ goto $label$23 }
	$13 = [7]
	goto $label$9 
	
.LABEL $label$58
	if ( $5 ){ goto $label$22 }
	$13 = [25]
	goto $label$9 
	
.LABEL $label$57
	$0 = uint_32($0 >> [1])
	$1 = ($1 + [1])
	goto $label$21 
	
.LABEL $label$56
	CALL $126($2, $1)
	$0 = *($1)
	$5 = ($0 & [1])
	if ( ($5 == 0) ){ goto $label$26 }
	$13 = [6]
	goto $label$9 
	
.LABEL $label$55
	if ( (*(($4 + [24])) <= [13]) ){ goto $label$24 }
	$13 = [26]
	goto $label$9 
	
.LABEL $label$54
	$6 = CALL $3(CALL $160(($3 + [32]), $1))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	$13 = [27]
	goto $label$9 
	
.LABEL $label$53
	CALL _ZdlPv(*((($3 + [32]) + [8])))
	$13 = [28]
	goto $label$9 
	
.LABEL $label$52
	$12 = ($12 + [1])
	if ( ((uint_32)$12 <= (uint_32)[6]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$51
	$0 = *(($4 + [24]))
	$1 = *(($4 + [28]))
	$13 = [9]
	goto $label$9 
	
.LABEL $label$50
	*($3 + [20]) = $0
	*($3 + [16]) = $1
	*($3) = *($3 + [16])
	CALL $4(($3 + [24]), $3)
	$6 = *($3 + [24])
	$12 = ($12 + [1])
	if ( ((uint_32)$12 <= (uint_32)[6]) ){ goto $label$18 }
	$13 = [10]
	goto $label$9 
	
.LABEL $label$49
	$4 = *($3 + [72])
	if ( ($4 == 0) ){ goto $label$17 }
	$13 = [11]
	goto $label$9 
	
.LABEL $label$48
	$5 = (($3 + [48]) + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$16 }
	$13 = [12]
	goto $label$9 
	
.LABEL $label$47
	$13 = [13]
	goto $label$9 
	
.LABEL $label$46
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$14 }
	$13 = [14]
	goto $label$9 
	
.LABEL $label$45
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$13 }
	$13 = [15]
	goto $label$9 
	
.LABEL $label$44
	CALL _ZdlPv(*(($1 + [28])))
	$13 = [16]
	goto $label$9 
	
.LABEL $label$43
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	$13 = [17]
	goto $label$9 
	
.LABEL $label$42
	CALL _ZdlPv(*(($1 + [16])))
	$13 = [18]
	goto $label$9 
	
.LABEL $label$41
	CALL _ZdlPv($1)
	$13 = [19]
	goto $label$9 
	
.LABEL $label$40
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$15 }
	$13 = [20]
	goto $label$9 
	
.LABEL $label$39
	$1 = *(($3 + [72]))
	goto $label$11 
	
.LABEL $label$38
	$1 = $4
	$13 = [21]
	goto $label$9 
	
.LABEL $label$37
	*($5) = $4
	CALL _ZdlPv($1)
	$13 = [22]
	goto $label$9 
	
.LABEL $label$36
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$35
	$13 = [2]
	goto $label$9 
	
.LABEL $label$34
	$13 = [2]
	goto $label$9 
	
.LABEL $label$33
	$13 = [10]
	goto $label$9 
	
.LABEL $label$32
	$13 = [4]
	goto $label$9 
	
.LABEL $label$31
	$13 = [31]
	goto $label$9 
	
.LABEL $label$30
	$13 = [2]
	goto $label$9 
	
.LABEL $label$29
	$13 = [0]
	goto $label$9 
	
.LABEL $label$28
	$13 = [10]
	goto $label$9 
	
.LABEL $label$27
	$13 = [30]
	goto $label$9 
	
.LABEL $label$26
	$13 = [29]
	goto $label$9 
	
.LABEL $label$25
	$13 = [6]
	goto $label$9 
	
.LABEL $label$24
	$13 = [7]
	goto $label$9 
	
.LABEL $label$23
	$13 = [26]
	goto $label$9 
	
.LABEL $label$22
	$13 = [8]
	goto $label$9 
	
.LABEL $label$21
	$13 = [9]
	goto $label$9 
	
.LABEL $label$20
	$13 = [24]
	goto $label$9 
	
.LABEL $label$19
	$13 = [10]
	goto $label$9 
	
.LABEL $label$18
	$13 = [24]
	goto $label$9 
	
.LABEL $label$17
	$13 = [22]
	goto $label$9 
	
.LABEL $label$16
	$13 = [23]
	goto $label$9 
	
.LABEL $label$15
	$13 = [13]
	goto $label$9 
	
.LABEL $label$14
	$13 = [19]
	goto $label$9 
	
.LABEL $label$13
	$13 = [16]
	goto $label$9 
	
.LABEL $label$12
	$13 = [18]
	goto $label$9 
	
.LABEL $label$11
	$13 = [21]
	goto $label$9 
	
.LABEL $label$10
	$13 = [28]
	goto $label$9 
	$13
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	*(($5 = ($1 + [224]))) = *(*($3))
	*(($1 + [232])) = *(*($3 + [4]))
	$6 = *($3 + [8])
	*(($1 + [256])) = *(($6 + [16]))
	*(($1 + [248])) = *(($6 + [8]))
	*(($1 + [240])) = *($6)
	*(($1 + [264])) = *(($6 + [24]))
	$7 = *($1)
	CALL $162(($1 + [272]), *($3 + [12]))
	$3 = *($3 + [16])
	*(($1 + [288])) = *($3)
	$8 = *(($3 + [8]))
	*(($3 = ($1 + [304]))) = (*($3) + [1])
	*(($1 + [296])) = $8
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [17716])
	*(($3 = $4) + [56]) = [120]
	*($3) = ($3 + [56])
	*($3 + [20]) = $5
	$9 = ($1 + [128])
	*($3 + [16]) = $9
	*($3 + [24]) = ($1 + [320])
	*($3 + [28]) = ($1 + [416])
	*($3 + [32]) = ($1 + [512])
	CALL $112(($3 + [16]), $3)
	$5 = *($3 + [56])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL $201($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($4 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	*($3 + [56]) = $3
	*($3 + [48]) = $9
	*($3 + [16]) = $1
	*($3 + [20]) = ($1 + [8])
	*($3 + [24]) = ($1 + [24])
	*($3 + [28]) = ($1 + [40])
	*($3 + [32]) = ($1 + [56])
	*($3 + [36]) = ($1 + [72])
	*($3 + [40]) = ($1 + [88])
	*($3 + [44]) = ($1 + [104])
	CALL $113(($3 + [16]), ($3 + [56]))
	CALL db_update_i64(*($1 + [612]), $2, $6, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($6)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $128($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $58($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $129($2, $1)
	CALL $131(CALL $130(CALL $130($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [17578])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [17578])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [112])
	$global$0 = $4
	*(($4 + [104])) = [0]
	*($4 + [88]) = (int_64)-1
	*($4 + [96]) = (int_64)0
	*($4 + [108]) = [0]
	$5 = *($0 + [8])
	*($4 + [72]) = $5
	*($4 + [80]) = $5
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = CALL db_lowerbound_i64($5, $5, (int_64)3774889943067754496, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $32(($4 + [72]), $1)
	
.LOOP $label$5:
	CALL eosio_assert([1], [17302])
	CALL eosio_assert([1], [17336])
	$1 = [0]
	$3 = CALL db_next_i64(*($0 + [52]), ($4 + [16]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$1 = CALL $32(($4 + [72]), $3)
	
.LABEL $label$6
	CALL $35(($4 + [72]), $0)
	$0 = $1
	if ( $1 ){ goto $label$5 }
	
.LABEL $label$4
	$3 = *($4 + [96])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($4 + [64]) = (int_64)0
	$3 = *($1)
	$6 = ($3 & [1])
	if ( $6 ){ goto $label$10 }
	if ( ((uint_32)uint_32($3 >> [1]) >= (uint_32)[13]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( (*($1 + [4]) <= [13]) ){ goto $label$8 }
	
.LABEL $label$9
	$3 = CALL $160(($4 + [48]), $1)
	*($4 + [64]) = CALL $3($3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($3 + [8]))
	goto $label$7 
	
.LABEL $label$8
	if ( $6 ){ goto $label$12 }
	$3 = uint_32($3 >> [1])
	$6 = ($1 + [1])
	goto $label$11 
	
.LABEL $label$12
	$3 = *($1 + [4])
	$6 = *($1 + [8])
	
.LABEL $label$11
	*($4 + [44]) = $3
	*($4 + [40]) = $6
	*($4) = *($4 + [40])
	*($4 + [64]) = *(CALL $4(($4 + [16]), $4))
	
.LABEL $label$7
	*($4 + [32]) = ($4 + [72])
	CALL $123(($4 + [16]), ($4 + [32]), ($4 + [64]))
	$3 = *($4 + [20])
	if ( ($3 == 0) ){ goto $label$13 }
	if ( ((int_64)*($4 + [64]) != (int_64)*($3 + [8])) ){ goto $label$13 }
	$5 = *($0)
	*($4 + [16]) = $2
	CALL eosio_assert([1], [17584])
	CALL $124(*($4 + [32]), $3, $5, ($4 + [16]))
	$3 = *($4 + [96])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$13
	$5 = *($0)
	*($4 + [24]) = $1
	*($4 + [28]) = $2
	*($4 + [20]) = ($4 + [64])
	*($4 + [16]) = ($4 + [72])
	CALL $125(($4 + [8]), ($4 + [72]), $5, ($4 + [16]))
	$3 = *($4 + [96])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = ($4 + [100])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$17 }
	if ( ((*($0 + [16]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($0 + [24])))
	
.LABEL $label$18
	CALL _ZdlPv($0)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$16 }
	$1 = *(($4 + [96]))
	goto $label$14 
	
.LABEL $label$15
	$1 = $3
	
.LABEL $label$14
	*($2) = $3
	CALL _ZdlPv($1)
	$global$0 = ($4 + [112])
	return 
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	*($1 + [72]) = (int_64)0
	$5 = *($1)
	CALL eosio_assert([1], [17716])
	*(($6 = $4) + [56]) = [120]
	*($6) = ($6 + [56])
	*($6 + [20]) = ($1 + [224])
	$7 = ($1 + [128])
	*($6 + [16]) = $7
	*($6 + [24]) = ($1 + [320])
	*($6 + [28]) = ($1 + [416])
	*($6 + [32]) = ($1 + [512])
	CALL $112(($6 + [16]), $6)
	$8 = *($6 + [56])
	if ( ($8 <= [513]) ){ goto $label$2 }
	$4 = CALL $201($8)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = ($4 + $8)
	*($6 + [56]) = $6
	*($6 + [48]) = $7
	*($6 + [16]) = $1
	*($6 + [20]) = ($1 + [8])
	*($6 + [24]) = ($1 + [24])
	*($6 + [28]) = ($1 + [40])
	*($6 + [32]) = ($1 + [56])
	*($6 + [36]) = ($1 + [72])
	*($6 + [40]) = ($1 + [88])
	*($6 + [44]) = ($1 + [104])
	CALL $113(($6 + [16]), ($6 + [56]))
	CALL db_update_i64(*($1 + [612]), $2, $4, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($6 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($6 + [64])
}

int_32 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	$3 = *($0)
	$2 = CALL $198([16690])
	if ( ((int_32)$2 != (int_32)( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$3 }
	if ( (CALL $171($0, [0], [-1], [16690], $2) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = *($0)
	$4 = CALL $198([16696])
	if ( ((int_32)$4 != (int_32)( *(($0 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$4 }
	if ( (CALL $171($0, [0], [-1], [16696], $4) == 0) ){ goto $label$1 }
	
.LABEL $label$4
	return ($3 - $1)
	
.LABEL $label$2
	$0 = (( $1 ? [1545570000] : ((int_32)$1 > (int_32)[1545570000]) ) + [-1545483601])
	return ((($0 - ((uint_32)$0 % (uint_32)[86400])) + [1545570000]) - $1)
	
.LABEL $label$1
	$0 = (( $1 ? [1545573600] : ((int_32)$1 > (int_32)[1545573600]) ) + [-1544968801])
	return ((($0 - ((uint_32)$0 % (uint_32)[604800])) + [1545573600]) - $1)
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	$3 = (*(*($3)) + (*(*($3 + [4])) << [5]))
	*($1 + [8]) = *($3)
	$6 = *($1)
	$7 = ($1 + [12])
	CALL $162($7, ($3 + [4]))
	*(($1 + [32])) = *(($3 + [24]))
	*(($8 = ($1 + [24]))) = *($3 + [16])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [17716])
	$3 = *($7)
	$9 = ( *(($1 + [16])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($9 + [28])
	$10 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $201($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [17578])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert(((int_32)($3 + [-8]) > (int_32)[3]), [17578])
	CALL memcpy(($4 + [8]), ($1 + [8]), [4])
	*($5 + [12]) = ($4 + [12])
	CALL $60(($5 + [8]), $7)
	CALL eosio_assert(((int_32)(*($5 + [16]) - *($5 + [12])) > (int_32)[7]), [17578])
	CALL memcpy(*($5 + [12]), $8, [8])
	$7 = (*($5 + [12]) + [8])
	*($5 + [12]) = $7
	*($5 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($5 + [16]) - $7) > (int_32)[7]), [17578])
	CALL memcpy(*($5 + [12]), ($5 + [24]), [8])
	*($5 + [12]) = (*($5 + [12]) + [8])
	CALL db_update_i64(*($1 + [44]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $204($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = *($0)
	$3 = int_32((*($0 + [4]) - $2) >> [5])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$3 }
	$5 = [134217727]
	$2 = (*($0 + [8]) - $2)
	if ( ((uint_32)int_32($2 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$5 = int_32($2 >> [4])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$6 = CALL _Znwj(($5 << [5]))
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $179($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($7 = ($6 + ($3 << [5])))) = *($1)
	CALL $160(($7 + [4]), ($1 + [4]))
	*(($7 + [24])) = *(($1 + [24]))
	*($7 + [16]) = *($1 + [16])
	$8 = ($6 + ($5 << [5]))
	$9 = ($7 + [32])
	$1 = *($0)
	$10 = ($0 + [4])
	$11 = *($10)
	if ( ((int_32)$11 == (int_32)$1) ){ goto $label$7 }
	$12 = (($3 + [-1]) - uint_32((($11 + [-32]) - $1) >> [5]))
	$13 = ($1 - $11)
	$3 = [0]
	
.LOOP $label$8:
	$5 = ($11 + $3)
	*((($1 = ($7 + $3)) + [-32])) = *(($5 + [-32]))
	$2 = ($5 + [-20])
	*(($1 + [-20])) = *($2)
	$4 = ($5 + [-28])
	*(($1 + [-28])) = *($4)
	*($4) = (int_64)0
	*($2) = [0]
	*(($1 + [-16])) = *(($5 + [-16]))
	*(($1 + [-8])) = *(($5 + [-8]))
	$3 = ($3 + [-32])
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$8 }
	$7 = ($6 + ($12 << [5]))
	$1 = *(($0 + [4]))
	$3 = *($0)
	goto $label$6 
	
.LABEL $label$7
	$3 = $1
	
.LABEL $label$6
	*($0) = $7
	*($10) = $9
	*(($0 + [8])) = $8
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($1 + [-32])
	if ( ((*(($1 + [-28])) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [-20])))
	
.LABEL $label$11
	$1 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	(unreachable)
	(unreachable)
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_32 $20
	int_64 $21
	int_64 $22
	$3 = ($global$0 - [304])
	$global$0 = $3
	*($3 + [280]) = [0]
	*($3 + [272]) = (int_64)0
	$2 = CALL $160(($3 + [256]), $2)
	CALL $67($0, $2, ($3 + [272]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	$2 = (*($3 + [276]) - *($3 + [272]))
	$4 = ((int_32)$2 / (int_32)[12])
	$5 = *($1 + [8])
	$6 = *($1)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	$7 = (($3 + [88]) + [32])
	$8 = (($3 + [144]) | [1])
	$9 = (($3 + [88]) + [16])
	$10 = ($3 + [112])
	$11 = ($3 + [244])
	$12 = ($3 + [128])
	$13 = ($3 + [236])
	$14 = [0]
	$2 = [0]
	
.LOOP $label$7:
	$15 = ($2 & [2147483647])
	if ( ((uint_32)$15 > (uint_32)[5]) ){ goto $label$8 }
	goto $label$11 
	
.LABEL $label$14
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	CALL eosio_assert([1], [17794])
	CALL eosio_assert([1], [17818])
	$16 = ((int_64)$6 / (int_64)200)
	if ( ((int_64)$16 >= (int_64)1) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$13
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	CALL eosio_assert([1], [17794])
	CALL eosio_assert([1], [17818])
	$16 = ((int_64)((int_64)$6 / (int_64)200) << (int_64)2)
	if ( ((int_64)$16 >= (int_64)1) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	CALL eosio_assert([1], [17794])
	CALL eosio_assert([1], [17818])
	$16 = ((int_64)((int_64)$6 / (int_64)200) << (int_64)1)
	if ( ((int_64)$16 >= (int_64)1) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	CALL eosio_assert([1], [17794])
	CALL eosio_assert([1], [17818])
	$16 = ((int_64)((int_64)$6 / (int_64)200) << (int_64)3)
	if ( ((int_64)$16 >= (int_64)1) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	CALL eosio_assert([1], [17794])
	CALL eosio_assert([1], [17818])
	$16 = ((int_64)((int_64)$6 / (int_64)200) << (int_64)2)
	if ( ((int_64)$16 < (int_64)1) ){ goto $label$8 }
	
.LABEL $label$9
	$15 = *($3 + [272])
	if ( ((uint_32)((int_32)(*($3 + [276]) - $15) / (int_32)[12]) <= (uint_32)$2) ){ goto $label$16 }
	$15 = ($15 + $14)
	$17 = *($15)
	$18 = ($17 & [1])
	if ( $18 ){ goto $label$18 }
	if ( ((uint_32)uint_32($17 >> [1]) >= (uint_32)[13]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	if ( (*(($15 + [4])) <= [13]) ){ goto $label$15 }
	
.LABEL $label$17
	*((($3 + [200]) + [8])) = (int_64)3617214756542218240
	$19 = *($0)
	*($3 + [200]) = $19
	*((($3 + [88]) + [8])) = (int_64)-7515584006193881072
	*($9) = $16
	*($10) = $5
	*($3 + [88]) = $19
	CALL $160($7, $15)
	CALL $49(($3 + [288]), CALL $48(($3 + [216]), ($3 + [200]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($3 + [88])))
	$15 = *($3 + [288])
	CALL send_inline($15, (*($3 + [292]) - $15))
	$15 = *($3 + [288])
	if ( ($15 == 0) ){ goto $label$19 }
	*($3 + [292]) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$19
	$15 = *($11)
	if ( ($15 == 0) ){ goto $label$20 }
	*((($3 + [216]) + [32])) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$20
	$15 = *((($3 + [216]) + [16]))
	if ( ($15 == 0) ){ goto $label$21 }
	*($13) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$21
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($12))
	$14 = ($14 + [12])
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$16
	CALL $180(($3 + [272]))
	
.LABEL $label$15
	if ( $18 ){ goto $label$23 }
	$17 = uint_32($17 >> [1])
	$15 = ($15 + [1])
	goto $label$22 
	
.LABEL $label$23
	$17 = *(($15 + [4]))
	$15 = *(($15 + [8]))
	
.LABEL $label$22
	*($3 + [196]) = $17
	*($3 + [192]) = $15
	*($3 + [80]) = *($3 + [192])
	CALL $4(($3 + [88]), ($3 + [80]))
	if ( ((int_64)*($0) == (int_64)*($3 + [88])) ){ goto $label$8 }
	$15 = *($3 + [272])
	if ( ((uint_32)((int_32)(*($3 + [276]) - $15) / (int_32)[12]) <= (uint_32)$2) ){ goto $label$4 }
	$15 = ($15 + $14)
	$17 = *($15)
	if ( ($17 & [1]) ){ goto $label$25 }
	$17 = uint_32($17 >> [1])
	$15 = ($15 + [1])
	goto $label$24 
	
.LABEL $label$25
	$17 = *(($15 + [4]))
	$15 = *(($15 + [8]))
	
.LABEL $label$24
	*($3 + [180]) = $17
	*($3 + [176]) = $15
	*($3 + [72]) = *($3 + [176])
	CALL $4(($3 + [184]), ($3 + [72]))
	if ( (CALL is_account(*($3 + [184])) == 0) ){ goto $label$8 }
	*((($3 + [200]) + [8])) = (int_64)3617214756542218240
	*($3 + [200]) = *($0)
	$15 = *($3 + [272])
	if ( ((uint_32)((int_32)(*($3 + [276]) - $15) / (int_32)[12]) <= (uint_32)$2) ){ goto $label$3 }
	$15 = ($15 + $14)
	$17 = *($15)
	if ( ($17 & [1]) ){ goto $label$27 }
	$17 = uint_32($17 >> [1])
	$15 = ($15 + [1])
	goto $label$26 
	
.LABEL $label$27
	$17 = *(($15 + [4]))
	$15 = *(($15 + [8]))
	
.LABEL $label$26
	*($3 + [164]) = $17
	*($3 + [160]) = $15
	*($3 + [64]) = *($3 + [160])
	CALL $4(($3 + [168]), ($3 + [64]))
	*(($17 = (($3 + [144]) + [8]))) = [0]
	*($3 + [144]) = (int_64)0
	$15 = CALL $198([18801])
	if ( ((uint_32)$15 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$15 >= (uint_32)[11]) ){ goto $label$30 }
	*($3 + [144]) = ($15 << [1])
	$18 = $8
	if ( $15 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$20 = (($15 + [16]) & [-16])
	$18 = CALL _Znwj($20)
	*($17) = $18
	*($3 + [144]) = ($20 | [1])
	*($3 + [148]) = $15
	
.LABEL $label$29
	CALL memcpy($18, [18801], $15)
	
.LABEL $label$28
	*(($18 + $15)) = [0]
	*((($3 + [88]) + [8])) = *($3 + [168])
	*($9) = $16
	*($10) = $5
	*($7) = *($3 + [144])
	*(($7 + [8])) = *($17)
	*($17) = [0]
	*($3 + [88]) = *($0)
	*($3 + [144]) = (int_64)0
	CALL $49(($3 + [288]), CALL $48(($3 + [216]), ($3 + [200]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($3 + [88])))
	$15 = *($3 + [288])
	CALL send_inline($15, (*($3 + [292]) - $15))
	$15 = *($3 + [288])
	if ( ($15 == 0) ){ goto $label$31 }
	*($3 + [292]) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$31
	$15 = *($11)
	if ( ($15 == 0) ){ goto $label$32 }
	*((($3 + [216]) + [32])) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$32
	$15 = *((($3 + [216]) + [16]))
	if ( ($15 == 0) ){ goto $label$33 }
	*($13) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$33
	if ( ((*($7) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*($12))
	
.LABEL $label$34
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*($17))
	
.LABEL $label$35
	$5 = *(($1 + [8]))
	$6 = *($1)
	
.LABEL $label$8
	$14 = ($14 + [12])
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$7 }
	
.LABEL $label$6
	$2 = (*($3 + [276]) - *($3 + [272]))
	
.LABEL $label$5
	$2 = ((int_32)$2 / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[5]) ){ goto $label$36 }
	goto $label$43 
	
.LABEL $label$43
	CALL __multi3(($3 + [32]), $6, (int_64)$6 >> (int_64)63), (int_64)10, (int_64)0)
	$16 = *(($3 + [40]))
	$6 = *($3 + [32])
	CALL eosio_assert(( (uint_64)($6 <= (int_64)4611686018427387904) ? ((int_64)$16 < (int_64)0) : (int_64)($16 == 0) ), [17794])
	CALL eosio_assert(( ((uint_64)$6 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$16 > (int_64)-1) : ((int_64)$16 == (int_64)-1) ), [17818])
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$19 = (int_64)1
	$16 = ((int_64)$6 / (int_64)100)
	if ( ((int_64)$16 >= (int_64)1) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$42
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [17794])
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [17818])
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$19 = (int_64)1
	$16 = ((int_64)$6 / (int_64)100)
	if ( ((int_64)$16 >= (int_64)1) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$41
	CALL eosio_assert(((int_64)$6 < (int_64)1152921504606846976), [17794])
	CALL eosio_assert(((int_64)$6 > (int_64)-1152921504606846976), [17818])
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$19 = (int_64)1
	$16 = ((int_64)((int_64)$6 << (int_64)2) / (int_64)100)
	if ( ((int_64)$16 >= (int_64)1) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$40
	CALL eosio_assert(((int_64)$6 < (int_64)2305843009213693952), [17794])
	CALL eosio_assert(((int_64)$6 > (int_64)-2305843009213693952), [17818])
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$19 = (int_64)1
	$16 = ((int_64)((int_64)$6 << (int_64)1) / (int_64)100)
	if ( ((int_64)$16 >= (int_64)1) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	CALL __multi3(($3 + [48]), $6, (int_64)$6 >> (int_64)63), (int_64)6, (int_64)0)
	$16 = *(($3 + [56]))
	$6 = *($3 + [48])
	CALL eosio_assert(( (uint_64)($6 <= (int_64)4611686018427387904) ? ((int_64)$16 < (int_64)0) : (int_64)($16 == 0) ), [17794])
	CALL eosio_assert(( ((uint_64)$6 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$16 > (int_64)-1) : ((int_64)$16 == (int_64)-1) ), [17818])
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$19 = (int_64)1
	$16 = ((int_64)$6 / (int_64)100)
	if ( ((int_64)$16 >= (int_64)1) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [17794])
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [17818])
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$19 = (int_64)1
	$16 = ((int_64)$6 / (int_64)200)
	if ( ((int_64)$16 < (int_64)1) ){ goto $label$36 }
	
.LABEL $label$37
	$6 = ((uint_64)$16 / (uint_64)(int_64)10)
	CALL __multi3(($3 + [16]), $6, (int_64)0, (int_64)5, (int_64)0)
	CALL __multi3($3, $6, (int_64)0, (int_64)3, (int_64)0)
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$21 = *($3 + [16])
	CALL eosio_assert(( (uint_64)($21 <= (int_64)4611686018427387904) ? [0] : (int_64)(*((($3 + [16]) + [8])) == 0) ), [17794])
	CALL eosio_assert([1], [17818])
	CALL eosio_assert([1], [17794])
	CALL eosio_assert([1], [17818])
	$22 = *($3)
	CALL eosio_assert(( (uint_64)($22 <= (int_64)4611686018427387904) ? [0] : (int_64)(*(($3 + [8])) == 0) ), [17794])
	CALL eosio_assert([1], [17818])
	$16 = *($0)
	*((($3 + [216]) + [24])) = $5
	*($3 + [224]) = $16
	*($3 + [216]) = $16
	*($3 + [232]) = $21
	*($3 + [88]) = (int_64)6138663577826885632
	*($3 + [96]) = (int_64)4520896354024685568
	*(($2 = CALL _Znwj([16]))) = $16
	*($2 + [8]) = (int_64)3617214756542218240
	*(($3 + [124])) = [0]
	$14 = ($2 + [16])
	*((($3 + [88]) + [24])) = $14
	*(($3 + [108])) = $14
	*($3 + [104]) = $2
	*($3 + [116 align=4]) = (int_64)0
	CALL $58(($3 + [116]), [32])
	$2 = *((($3 + [88]) + [32]))
	$14 = *($3 + [116])
	*($3 + [204]) = $14
	*($3 + [200]) = $14
	*($3 + [208]) = $2
	*($3 + [144]) = ($3 + [200])
	*($3 + [288]) = ($3 + [216])
	CALL $146(($3 + [288]), ($3 + [144]))
	CALL $49(($3 + [200]), ($3 + [88]))
	$2 = *($3 + [200])
	CALL send_inline($2, (*($3 + [204]) - $2))
	$2 = *($3 + [200])
	if ( ($2 == 0) ){ goto $label$44 }
	*($3 + [204]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$44
	$2 = *($3 + [116])
	if ( ($2 == 0) ){ goto $label$45 }
	*(($3 + [120])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$45
	$6 = ((int_64)$6 << (int_64)$19)
	$2 = *($3 + [104])
	if ( ($2 == 0) ){ goto $label$46 }
	*(($3 + [108])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$46
	$16 = *($0)
	*((($3 + [88]) + [24])) = $5
	*(($3 + [128])) = $5
	*($3 + [96]) = $16
	*($3 + [88]) = $16
	*($3 + [104]) = $6
	*($3 + [120]) = $22
	*($3 + [136]) = [0]
	*($3 + [216]) = (int_64)6138663577826885632
	*($3 + [224]) = (int_64)5378043540636893184
	*(($2 = CALL _Znwj([16]))) = $16
	*($2 + [8]) = (int_64)3617214756542218240
	*(($3 + [252])) = [0]
	$14 = ($2 + [16])
	*((($3 + [216]) + [24])) = $14
	*(($3 + [236])) = $14
	*($3 + [232]) = $2
	*($3 + [244 align=4]) = (int_64)0
	CALL $58(($3 + [244]), [49])
	$2 = *(($3 + [248]))
	$14 = *($3 + [244])
	*($3 + [204]) = $14
	*($3 + [200]) = $14
	*($3 + [208]) = $2
	*($3 + [144]) = ($3 + [200])
	*($3 + [288]) = ($3 + [88])
	CALL $147(($3 + [288]), ($3 + [144]))
	CALL $49(($3 + [200]), ($3 + [216]))
	$2 = *($3 + [200])
	CALL send_inline($2, (*($3 + [204]) - $2))
	$2 = *($3 + [200])
	if ( ($2 == 0) ){ goto $label$47 }
	*($3 + [204]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$47
	$2 = *($3 + [244])
	if ( ($2 == 0) ){ goto $label$48 }
	*(($3 + [248])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$48
	$2 = *($3 + [232])
	if ( ($2 == 0) ){ goto $label$36 }
	*(($3 + [236])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$36
	$15 = *($3 + [272])
	if ( ($15 == 0) ){ goto $label$49 }
	$14 = *($3 + [276])
	if ( ((int_32)$14 == (int_32)$15) ){ goto $label$51 }
	
.LOOP $label$52:
	$2 = ($14 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$53 }
	CALL _ZdlPv(*(($14 + [-4])))
	
.LABEL $label$53
	$14 = $2
	if ( ((int_32)$15 != (int_32)$2) ){ goto $label$52 }
	$2 = *($3 + [272])
	goto $label$50 
	
.LABEL $label$51
	$2 = $15
	
.LABEL $label$50
	*($3 + [276]) = $15
	CALL _ZdlPv($2)
	
.LABEL $label$49
	$global$0 = ($3 + [304])
	return (unreachable)
	
.LABEL $label$4
	CALL $180(($3 + [272]))
	
.LABEL $label$3
	CALL $180(($3 + [272]))
	
.LABEL $label$2
	CALL $159(($3 + [144]))
	$15
	(unreachable)
	$2
	(unreachable)
	(unreachable)
}

void .FUNC $86 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	$3 = *($3)
	$6 = ((int_64)*($3) / (int_64)100)
	$5 = $4
	CALL __multi3($5, $6, (int_64)$6 >> (int_64)63), (int_64)90, (int_64)0)
	$6 = *($1)
	$7 = *($3 + [8])
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$9 = *(($5 + [8]))
	$8 = *($5)
	CALL eosio_assert(( (uint_64)($8 <= (int_64)4611686018427387904) ? ((int_64)$9 < (int_64)0) : (int_64)($9 == 0) ), [17794])
	CALL eosio_assert(( ((uint_64)$8 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$9 > (int_64)-1) : ((int_64)$9 == (int_64)-1) ), [17818])
	CALL eosio_assert(((int_64)$7 == (int_64)*(($1 + [16]))), [17934])
	$9 = ((int_64)$8 + (int_64)*($1 + [8]))
	*($1 + [8]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [17977])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [17996])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [17716])
	*($5 + [72]) = [120]
	*($5 + [16]) = ($5 + [72])
	*($5 + [36]) = ($1 + [224])
	$10 = ($1 + [128])
	*($5 + [32]) = $10
	*($5 + [40]) = ($1 + [320])
	*($5 + [44]) = ($1 + [416])
	*($5 + [48]) = ($1 + [512])
	CALL $112(($5 + [32]), ($5 + [16]))
	$3 = *($5 + [72])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $201($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($5 + [20]) = $4
	*($5 + [16]) = $4
	*($5 + [24]) = ($4 + $3)
	*($5 + [72]) = ($5 + [16])
	*($5 + [64]) = $10
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [24])
	*($5 + [44]) = ($1 + [40])
	*($5 + [48]) = ($1 + [56])
	*($5 + [52]) = ($1 + [72])
	*($5 + [56]) = ($1 + [88])
	*($5 + [60]) = ($1 + [104])
	CALL $113(($5 + [32]), ($5 + [72]))
	CALL db_update_i64(*($1 + [612]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($5 + [80])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	$3 = *($3)
	$6 = ((int_64)*($3) / (int_64)100)
	$5 = $4
	CALL __multi3($5, $6, (int_64)$6 >> (int_64)63), (int_64)90, (int_64)0)
	$6 = *($1)
	$7 = *($3 + [8])
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$9 = *(($5 + [8]))
	$8 = *($5)
	CALL eosio_assert(( (uint_64)($8 <= (int_64)4611686018427387904) ? ((int_64)$9 < (int_64)0) : (int_64)($9 == 0) ), [17794])
	CALL eosio_assert(( ((uint_64)$8 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$9 > (int_64)-1) : ((int_64)$9 == (int_64)-1) ), [17818])
	CALL eosio_assert(((int_64)$7 == (int_64)*(($1 + [32]))), [17934])
	$9 = ((int_64)$8 + (int_64)*($1 + [24]))
	*($1 + [24]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [17977])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [17996])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [17716])
	*($5 + [72]) = [120]
	*($5 + [16]) = ($5 + [72])
	*($5 + [36]) = ($1 + [224])
	$10 = ($1 + [128])
	*($5 + [32]) = $10
	*($5 + [40]) = ($1 + [320])
	*($5 + [44]) = ($1 + [416])
	*($5 + [48]) = ($1 + [512])
	CALL $112(($5 + [32]), ($5 + [16]))
	$3 = *($5 + [72])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $201($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($5 + [20]) = $4
	*($5 + [16]) = $4
	*($5 + [24]) = ($4 + $3)
	*($5 + [72]) = ($5 + [16])
	*($5 + [64]) = $10
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [24])
	*($5 + [44]) = ($1 + [40])
	*($5 + [48]) = ($1 + [56])
	*($5 + [52]) = ($1 + [72])
	*($5 + [56]) = ($1 + [88])
	*($5 + [60]) = ($1 + [104])
	CALL $113(($5 + [32]), ($5 + [72]))
	CALL db_update_i64(*($1 + [612]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($5 + [80])
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $160(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $160(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [17293])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $45(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [17527])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32]) = $1
	CALL $145(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $91(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$4
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [24])
	$2 = (CASTING uint_64)(uint_32 $1)
	$6 = ($4 + [24])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $58($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [8]) = $7
	*($5 + [16]) = $1
	$1 = ($1 - $7)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [17578])
	CALL memcpy($7, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [17578])
	CALL memcpy(($7 + [8]), ($4 + [8]), [8])
	*($5 + [24]) = *(($4 + [16]))
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [17578])
	CALL memcpy(($7 + [16]), ($5 + [24]), [8])
	*($5 + [12]) = ($7 + [24])
	CALL $60(($5 + [8]), $6)
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = CALL $160(($2 + [16]), $1)
	$1 = CALL $160($2, ($1 + [12]))
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*($0) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	$6 = CALL $160(($2 + [32]), $1)
	$4 = CALL $160(($2 + [48]), $3)
	CALL void $5((int_32 $4), (int_32 $6), (int_32 $0))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($4 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($3) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($3) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

int_32 .FUNC $182 (int_32 $0)
{
	return ( ($0 | [32]) ? $0 : (($0 + [-65]) <= [26]) )
}

int_32 .FUNC $149 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [44]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18276])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4229851254120710144)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18222])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18222])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $26(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)4229851254120710144, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $26($6, $8)
	*($3 + [12]) = [0]
	*($3 + [8]) = $6
	$7 = *(*(CALL $149(($3 + [8])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [18170])
	*($1) = *(($6 + [16]))
	$6 = (*(*($5 + [4])) + (*(*($5 + [8])) << [5]))
	*($1 + [8]) = *($6)
	$8 = ($1 + [12])
	CALL $162($8, ($6 + [4]))
	*(($1 + [32])) = *(($6 + [24]))
	*(($9 = ($1 + [24]))) = *($6 + [16])
	$6 = *($8)
	$5 = ( *(($1 + [16])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [28])
	$7 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ($6 <= [513]) ){ goto $label$5 }
	$5 = CALL $201($6)
	goto $label$4 
	
.LABEL $label$5
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$4
	*($3 + [8]) = $5
	*($3 + [16]) = ($5 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [17578])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert(((int_32)($6 + [-8]) > (int_32)[3]), [17578])
	CALL memcpy(($5 + [8]), ($1 + [8]), [4])
	*($3 + [12]) = ($5 + [12])
	CALL $60(($3 + [8]), $8)
	CALL eosio_assert(((int_32)(*($3 + [16]) - *($3 + [12])) > (int_32)[7]), [17578])
	CALL memcpy(*($3 + [12]), $9, [8])
	$8 = (*($3 + [12]) + [8])
	*($3 + [12]) = $8
	*($3 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($3 + [16]) - $8) > (int_32)[7]), [17578])
	CALL memcpy(*($3 + [12]), ($3 + [24]), [8])
	*($3 + [12]) = (*($3 + [12]) + [8])
	$7 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)4229851254120710144, *(*($0 + [8])), $7, $5, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $204($5)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [32])
}

void .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [8])
	CALL $162($6, *($4 + [4]))
	$7 = ($1 + [20])
	CALL $162($7, *($4 + [8]))
	$4 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($8 + [8])
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$8 = *(($1 + [20]))
	$8 = ( *(($1 + [24])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$4 = ($8 + $4)
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $201($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [17578])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $60($3, $6)
	CALL $60($3, $7)
	$9 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($5 + [8]), (int_64)-4998313087829278720, *(*($0 + [8])), $9, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$9 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $204($2)
	if ( (uint_64)($9 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $60(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [17578])
	CALL memcpy(*($4 + [4]), $0, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($0 + [32]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [40]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [8]) = *($0 + [48])
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [17578])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = *($0 + [8])
	$5 = *($0 + [4])
	*(($4 = *($0))) = *($5)
	*(($4 + [8])) = *(($5 + [8]))
	$4 = *($0)
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($4) / (int_64)100)
	*($4) = $6
	$6 = ((int_64)$6 * (int_64)10)
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [17794])
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [17818])
	*($4) = $6
	$6 = *($3)
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $6
	$7 = *($0)
	*((($2 + [8]) + [8])) = [0]
	*($2 + [8]) = (int_64)0
	$4 = CALL $198([16690])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($2 + [8]) = ($4 << [1])
	$5 = (($2 + [8]) | [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($2 + [8]) = ($8 | [1])
	*($2 + [16]) = $5
	*($2 + [12]) = $4
	
.LABEL $label$3
	CALL memcpy($5, [16690], $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	*($2 + [32]) = (int_64)-4817609493215935456
	*($2 + [24]) = *($3)
	$6 = *(($7 + [8]))
	$9 = *($7)
	$4 = (($2 + [8]) + [8])
	*(($2 + [64])) = *($4)
	*($4) = [0]
	*(($2 + [48])) = $6
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	*($2 + [40]) = $9
	$4 = CALL $48(($2 + [88]), ($2 + [72]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($2 + [24]))
	CALL $49(($2 + [128]), $4)
	$5 = *($2 + [128])
	CALL send_inline($5, (*($2 + [132]) - $5))
	$5 = *($2 + [128])
	if ( ($5 == 0) ){ goto $label$5 }
	*($2 + [132]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$5 = *($4 + [28])
	if ( ($5 == 0) ){ goto $label$6 }
	*(($4 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$6
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($4 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$8
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$9
	$0 = *($0)
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*(($1 + [96]))), [17934])
	$6 = ((int_64)*($1 + [88]) + (int_64)*($0))
	*($1 + [88]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [17977])
	CALL eosio_assert(((int_64)*($1 + [88]) < (int_64)4611686018427387904), [17996])
	$global$0 = ($2 + [144])
	return (unreachable)
	
.LABEL $label$1
	CALL $159(($2 + [8]))
}

void .FUNC $140 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [17527])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [44]) = $1
	CALL $142(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [48])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $101(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)-7807081578584080384, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $28($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $72(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [18170])
	*($1) = *(($3 + [16]))
	CALL $162(($1 + [8]), *($0 + [4]))
	*(($1 + [32])) = *([0] + [8232])
	*($1 + [24]) = *([0] + [8224])
	*($1 + [40]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$global$0 = ($2 + [16])
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	CALL $143(*($0 + [4]), $1)
	$5 = *($1 + [8])
	$6 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [28])
	$7 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [8])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $201($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [24])
	*($3 + [44]) = ($1 + [40])
	CALL $144(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($4 + [8]), (int_64)-7807081578584080384, *(*($0 + [8])), $7, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $204($2)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

int_32 .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [48]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18276])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-7807081578584080384)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18222])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18222])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $28(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	*($1 + [128]) = *(*($3))
	*(($1 + [136])) = *(*($3 + [4]))
	$5 = *($3 + [8])
	*(($1 + [160])) = *(($5 + [16]))
	*(($1 + [152])) = *(($5 + [8]))
	*(($1 + [144])) = *($5)
	*(($1 + [168])) = *(($5 + [24]))
	$6 = *($1)
	CALL $162(($1 + [176]), *($3 + [12]))
	$3 = *($3 + [16])
	*(($1 + [192])) = *($3)
	$7 = *(($3 + [8]))
	*(($3 = ($1 + [208]))) = (*($3) + [1])
	*(($1 + [200])) = $7
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [17716])
	*(($3 = $4) + [56]) = [120]
	*($3) = ($3 + [56])
	*($3 + [20]) = ($1 + [224])
	$8 = ($1 + [128])
	*($3 + [16]) = $8
	*($3 + [24]) = ($1 + [320])
	*($3 + [28]) = ($1 + [416])
	*($3 + [32]) = ($1 + [512])
	CALL $112(($3 + [16]), $3)
	$9 = *($3 + [56])
	if ( ($9 <= [513]) ){ goto $label$2 }
	$5 = CALL $201($9)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$1
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $9)
	*($3 + [56]) = $3
	*($3 + [48]) = $8
	*($3 + [16]) = $1
	*($3 + [20]) = ($1 + [8])
	*($3 + [24]) = ($1 + [24])
	*($3 + [28]) = ($1 + [40])
	*($3 + [32]) = ($1 + [56])
	*($3 + [36]) = ($1 + [72])
	*($3 + [40]) = ($1 + [88])
	*($3 + [44]) = ($1 + [104])
	CALL $113(($3 + [16]), ($3 + [56]))
	CALL db_update_i64(*($1 + [612]), $2, $5, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($5)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	$5 = *($1)
	$7 = *($3 + [4])
	*(($6 = *($3))) = *($7)
	*(($6 + [8])) = *(($7 + [8]))
	$6 = *($3)
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$8 = ((int_64)*($6) / (int_64)100)
	*($6) = $8
	$8 = ((int_64)$8 * (int_64)30)
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [17794])
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [17818])
	*($6) = $8
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [48]))), [17934])
	$8 = ((int_64)*($1 + [40]) + (int_64)*($3))
	*($1 + [40]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [17977])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [17996])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [17716])
	*(($3 = $4) + [56]) = [120]
	*($3) = ($3 + [56])
	*($3 + [20]) = ($1 + [224])
	$9 = ($1 + [128])
	*($3 + [16]) = $9
	*($3 + [24]) = ($1 + [320])
	*($3 + [28]) = ($1 + [416])
	*($3 + [32]) = ($1 + [512])
	CALL $112(($3 + [16]), $3)
	$7 = *($3 + [56])
	if ( ($7 <= [513]) ){ goto $label$2 }
	$6 = CALL $201($7)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $7)
	*($3 + [56]) = $3
	*($3 + [48]) = $9
	*($3 + [16]) = $1
	*($3 + [20]) = ($1 + [8])
	*($3 + [24]) = ($1 + [24])
	*($3 + [28]) = ($1 + [40])
	*($3 + [32]) = ($1 + [56])
	*($3 + [36]) = ($1 + [72])
	*($3 + [40]) = ($1 + [88])
	*($3 + [44]) = ($1 + [104])
	CALL $113(($3 + [16]), ($3 + [56]))
	CALL db_update_i64(*($1 + [612]), $2, $6, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($6)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [208])
	$global$0 = $4
	*(($4 + [184])) = [0]
	*($4 + [168]) = (int_64)-1
	*($4 + [176]) = (int_64)0
	$5 = *($0 + [8])
	*($4 + [152]) = $5
	*($4 + [160]) = $5
	if ( ($3 == 0) ){ goto $label$3 }
	$0 = CALL db_lowerbound_i64($5, $5, (int_64)5304430020972773376, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$1 = CALL $29(($4 + [152]), $0)
	
.LOOP $label$4:
	CALL eosio_assert([1], [17302])
	CALL eosio_assert([1], [17336])
	$0 = [0]
	$3 = CALL db_next_i64(*($1 + [48]), ($4 + [88]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$0 = CALL $29(($4 + [152]), $3)
	
.LABEL $label$5
	CALL $40(($4 + [152]), $1)
	$1 = $0
	if ( $0 ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$5 = *($2)
	$6 = *($2 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)*([0] + [8232])), [18443])
	if ( ((int_64)$5 < (int_64)*([0] + [8224])) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = *($0)
	*($4 + [92]) = $1
	*($4 + [88]) = ($4 + [152])
	CALL $134(($4 + [64]), ($4 + [152]), $7, ($4 + [88]))
	CALL eosio_assert(((int_64)*([0] + [8232]) == (int_64)$6), [18014])
	$5 = (int_64)
	CALL eosio_assert(((int_64)$5($5 - *([0] + [8224]))) > (int_64)-4611686018427387904), [18062])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [18084])
	CALL eosio_assert(((int_64)$6 == (int_64)*([0] + [8232])), [18443])
	if ( ((int_64)$5 >= (int_64)*([0] + [8224])) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = CALL current_time()
	*(($4 + [116])) = (int_64)0
	*(($4 + [132])) = (int_64)0
	*(($4 + [140])) = (int_64)0
	*($4 + [100]) = [0]
	*($4 + [104]) = [0]
	*($4 + [108 align=4]) = (int_64)0
	*($4 + [124 align=4]) = (int_64)0
	*($4 + [88]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($4 + [72]) = (int_64)3617214756542218240
	*($4 + [64]) = *($0)
	*($4 + [192]) = (int_64)-8272103851919432736
	CALL $135(($4 + [124]), ($4 + [64]), $0, ($4 + [192]), ($4 + [32]))
	*(($4 + [56])) = [0]
	*($4 + [48]) = (int_64)0
	$1 = CALL $198([16690])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$10 }
	*($4 + [48]) = ($1 << [1])
	$3 = (($4 + [48]) | [1])
	if ( $1 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$2 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($2)
	*($4 + [48]) = ($2 | [1])
	*($4 + [56]) = $3
	*($4 + [52]) = $1
	
.LABEL $label$9
	CALL memcpy($3, [16690], $1)
	
.LABEL $label$8
	*(($3 + $1)) = [0]
	*(($4 + [108])) = CALL $1(($4 + [48]))
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($4 + [56]))
	
.LABEL $label$11
	*($4 + [40]) = [18430]
	*($4 + [44]) = CALL $198([18430])
	*($4 + [16]) = *($4 + [40])
	CALL $4(($4 + [192]), ($4 + [16]))
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)-8272103851919432736
	CALL cancel_deferred(($4 + [64]))
	*($4 + [24]) = [18430]
	*($4 + [28]) = CALL $198([18430])
	*($4 + [8]) = *($4 + [24])
	CALL $4(($4 + [32]), ($4 + [8]))
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)-8272103851919432736
	$5 = *($0)
	CALL $61(($4 + [192]), ($4 + [88]))
	$0 = *($4 + [192])
	CALL send_deferred(($4 + [64]), $5, $0, (*($4 + [196]) - $0), [1])
	$0 = *($4 + [192])
	if ( ($0 == 0) ){ goto $label$12 }
	*($4 + [196]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$12
	CALL $64(($4 + [88]))
	
.LABEL $label$2
	$3 = *($4 + [176])
	if ( ($3 == 0) ){ goto $label$13 }
	$2 = ($4 + [180])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$17 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$18
	CALL _ZdlPv($1)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$16 }
	$0 = *(($4 + [176]))
	goto $label$14 
	
.LABEL $label$15
	$0 = $3
	
.LABEL $label$14
	*($2) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$13
	$global$0 = ($4 + [208])
	return (unreachable)
	
.LABEL $label$1
	CALL $159(($4 + [48]))
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	$5 = *($1)
	$7 = *($3 + [4])
	*(($6 = *($3))) = *($7)
	*(($6 + [8])) = *(($7 + [8]))
	$6 = *($3)
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$8 = ((int_64)*($6) / (int_64)100)
	*($6) = $8
	CALL eosio_assert([1], [17794])
	CALL eosio_assert([1], [17818])
	*($6) = ((int_64)$8 << (int_64)1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [80]))), [17934])
	$8 = ((int_64)*($1 + [72]) + (int_64)*($3))
	*($1 + [72]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [17977])
	CALL eosio_assert(((int_64)*($1 + [72]) < (int_64)4611686018427387904), [17996])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [17716])
	*(($3 = $4) + [56]) = [120]
	*($3) = ($3 + [56])
	*($3 + [20]) = ($1 + [224])
	$9 = ($1 + [128])
	*($3 + [16]) = $9
	*($3 + [24]) = ($1 + [320])
	*($3 + [28]) = ($1 + [416])
	*($3 + [32]) = ($1 + [512])
	CALL $112(($3 + [16]), $3)
	$7 = *($3 + [56])
	if ( ($7 <= [513]) ){ goto $label$2 }
	$6 = CALL $201($7)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $7)
	*($3 + [56]) = $3
	*($3 + [48]) = $9
	*($3 + [16]) = $1
	*($3 + [20]) = ($1 + [8])
	*($3 + [24]) = ($1 + [24])
	*($3 + [28]) = ($1 + [40])
	*($3 + [32]) = ($1 + [56])
	*($3 + [36]) = ($1 + [72])
	*($3 + [40]) = ($1 + [88])
	*($3 + [44]) = ($1 + [104])
	CALL $113(($3 + [16]), ($3 + [56]))
	CALL db_update_i64(*($1 + [612]), $2, $6, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($6)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	$5 = *($1)
	$7 = *($3 + [4])
	*(($6 = *($3))) = *($7)
	*(($6 + [8])) = *(($7 + [8]))
	$6 = *($3)
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$8 = ((int_64)*($6) / (int_64)100)
	*($6) = $8
	$8 = ((int_64)$8 * (int_64)10)
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [17794])
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [17818])
	*($6) = $8
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [48]))), [17934])
	$8 = ((int_64)*($1 + [40]) + (int_64)*($3))
	*($1 + [40]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [17977])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [17996])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [17716])
	*(($3 = $4) + [56]) = [120]
	*($3) = ($3 + [56])
	*($3 + [20]) = ($1 + [224])
	$9 = ($1 + [128])
	*($3 + [16]) = $9
	*($3 + [24]) = ($1 + [320])
	*($3 + [28]) = ($1 + [416])
	*($3 + [32]) = ($1 + [512])
	CALL $112(($3 + [16]), $3)
	$7 = *($3 + [56])
	if ( ($7 <= [513]) ){ goto $label$2 }
	$6 = CALL $201($7)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $7)
	*($3 + [56]) = $3
	*($3 + [48]) = $9
	*($3 + [16]) = $1
	*($3 + [20]) = ($1 + [8])
	*($3 + [24]) = ($1 + [24])
	*($3 + [28]) = ($1 + [40])
	*($3 + [32]) = ($1 + [56])
	*($3 + [36]) = ($1 + [72])
	*($3 + [40]) = ($1 + [88])
	*($3 + [44]) = ($1 + [104])
	CALL $113(($3 + [16]), ($3 + [56]))
	CALL db_update_i64(*($1 + [612]), $2, $6, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($6)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	$5 = *($1)
	CALL $141($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [17716])
	*(($3 = $4) + [56]) = [120]
	*($3) = ($3 + [56])
	*($3 + [20]) = ($1 + [224])
	$6 = ($1 + [128])
	*($3 + [16]) = $6
	*($3 + [24]) = ($1 + [320])
	*($3 + [28]) = ($1 + [416])
	*($3 + [32]) = ($1 + [512])
	CALL $112(($3 + [16]), $3)
	$7 = *($3 + [56])
	if ( ($7 <= [513]) ){ goto $label$2 }
	$4 = CALL $201($7)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $7)
	*($3 + [56]) = $3
	*($3 + [48]) = $6
	*($3 + [16]) = $1
	*($3 + [20]) = ($1 + [8])
	*($3 + [24]) = ($1 + [24])
	*($3 + [28]) = ($1 + [40])
	*($3 + [32]) = ($1 + [56])
	*($3 + [36]) = ($1 + [72])
	*($3 + [40]) = ($1 + [88])
	*($3 + [44]) = ($1 + [104])
	CALL $113(($3 + [16]), ($3 + [56]))
	CALL db_update_i64(*($1 + [612]), $2, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	$5 = *($1)
	$7 = *($3 + [4])
	*(($6 = *($3))) = *($7)
	*(($6 + [8])) = *(($7 + [8]))
	$6 = *($3)
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$8 = ((int_64)*($6) / (int_64)100)
	*($6) = $8
	$8 = ((int_64)$8 * (int_64)5)
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [17794])
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [17818])
	*($6) = $8
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [32]))), [17934])
	$8 = ((int_64)*($1 + [24]) + (int_64)*($3))
	*($1 + [24]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [17977])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [17996])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [17716])
	*(($3 = $4) + [56]) = [120]
	*($3) = ($3 + [56])
	*($3 + [20]) = ($1 + [224])
	$9 = ($1 + [128])
	*($3 + [16]) = $9
	*($3 + [24]) = ($1 + [320])
	*($3 + [28]) = ($1 + [416])
	*($3 + [32]) = ($1 + [512])
	CALL $112(($3 + [16]), $3)
	$7 = *($3 + [56])
	if ( ($7 <= [513]) ){ goto $label$2 }
	$6 = CALL $201($7)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $7)
	*($3 + [56]) = $3
	*($3 + [48]) = $9
	*($3 + [16]) = $1
	*($3 + [20]) = ($1 + [8])
	*($3 + [24]) = ($1 + [24])
	*($3 + [28]) = ($1 + [40])
	*($3 + [32]) = ($1 + [56])
	*($3 + [36]) = ($1 + [72])
	*($3 + [40]) = ($1 + [88])
	*($3 + [44]) = ($1 + [104])
	CALL $113(($3 + [16]), ($3 + [56]))
	CALL db_update_i64(*($1 + [612]), $2, $6, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($6)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	*($1 + [8]) = (int_64)0
	$5 = *($1)
	CALL eosio_assert([1], [17716])
	*(($6 = $4) + [56]) = [120]
	*($6) = ($6 + [56])
	*($6 + [20]) = ($1 + [224])
	$7 = ($1 + [128])
	*($6 + [16]) = $7
	*($6 + [24]) = ($1 + [320])
	*($6 + [28]) = ($1 + [416])
	*($6 + [32]) = ($1 + [512])
	CALL $112(($6 + [16]), $6)
	$8 = *($6 + [56])
	if ( ($8 <= [513]) ){ goto $label$2 }
	$4 = CALL $201($8)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = ($4 + $8)
	*($6 + [56]) = $6
	*($6 + [48]) = $7
	*($6 + [16]) = $1
	*($6 + [20]) = ($1 + [8])
	*($6 + [24]) = ($1 + [24])
	*($6 + [28]) = ($1 + [40])
	*($6 + [32]) = ($1 + [56])
	*($6 + [36]) = ($1 + [72])
	*($6 + [40]) = ($1 + [88])
	*($6 + [44]) = ($1 + [104])
	CALL $113(($6 + [16]), ($6 + [56]))
	CALL db_update_i64(*($1 + [612]), $2, $4, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($6 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($6 + [64])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [272])
	$global$0 = $4
	*(($4 + [248])) = [0]
	*($4 + [232]) = (int_64)-1
	*($4 + [240]) = (int_64)0
	$5 = *($0 + [8])
	*($4 + [216]) = $5
	*($4 + [224]) = $5
	if ( ($3 == 0) ){ goto $label$3 }
	$0 = CALL db_lowerbound_i64($5, $5, (int_64)-7807081578584080384, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$1 = CALL $28(($4 + [216]), $0)
	
.LOOP $label$4:
	CALL eosio_assert([1], [17302])
	CALL eosio_assert([1], [17336])
	$0 = [0]
	$3 = CALL db_next_i64(*($1 + [48]), ($4 + [112]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$0 = CALL $28(($4 + [216]), $3)
	
.LABEL $label$5
	CALL $37(($4 + [216]), $1)
	$1 = $0
	if ( $0 ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$5 = *($2)
	$6 = *($2 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)*([0] + [8232])), [18443])
	if ( ((int_64)$5 < (int_64)*([0] + [8224])) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = *($0)
	*($4 + [116]) = $1
	*($4 + [112]) = ($4 + [216])
	CALL $140(($4 + [176]), ($4 + [216]), $7, ($4 + [112]))
	CALL eosio_assert(((int_64)*([0] + [8232]) == (int_64)$6), [18014])
	$5 = (int_64)
	CALL eosio_assert(((int_64)$5($5 - *([0] + [8224]))) > (int_64)-4611686018427387904), [18062])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [18084])
	CALL eosio_assert(((int_64)$6 == (int_64)*([0] + [8232])), [18443])
	if ( ((int_64)$5 >= (int_64)*([0] + [8224])) ){ goto $label$7 }
	
.LABEL $label$6
	$1 = [0]
	$3 = [0]
	$2 = CALL db_lowerbound_i64(*($4 + [216]), *((($4 + [216]) + [8])), (int_64)-7807081578584080384, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$8 }
	$3 = CALL $28(($4 + [216]), $2)
	
.LABEL $label$8
	*(($4 + [208])) = [0]
	*($4 + [192]) = (int_64)-1
	$5 = *(($0 + [8]))
	*($4 + [176]) = $5
	*($4 + [184]) = $5
	*($4 + [200]) = (int_64)0
	$2 = CALL db_lowerbound_i64($5, $5, (int_64)4406680248264818688, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$9 }
	$1 = CALL $27(($4 + [176]), $2)
	
.LABEL $label$9
	CALL eosio_assert(((int_64)*(($1 + [16])) == (int_64)*([0] + [8248])), [18443])
	if ( ((int_64)*($1 + [8]) < (int_64)*([0] + [8240])) ){ goto $label$10 }
	$1 = *($3 + [40])
	if ( (((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) - $1) <= [180]) ){ goto $label$12 }
	$5 = *($0)
	*($4 + [112]) = $5
	*($4 + [256]) = [0]
	*($4 + [120]) = (int_64)-4157529991795441664
	*(($1 = CALL _Znwj([16]))) = $5
	*($1 + [8]) = (int_64)3617214756542218240
	*(($4 + [148])) = [0]
	$3 = ($1 + [16])
	*(($4 + [136])) = $3
	*(($4 + [132])) = $3
	*($4 + [128]) = $1
	*($4 + [140 align=4]) = (int_64)0
	CALL $58(($4 + [140]), [4])
	$1 = *($4 + [140])
	CALL eosio_assert(((int_32)(*(($4 + [144])) - $1) > (int_32)[3]), [17578])
	CALL memcpy($1, ($4 + [256]), [4])
	CALL $49(($4 + [96]), ($4 + [112]))
	$1 = *($4 + [96])
	CALL send_inline($1, (*($4 + [100]) - $1))
	$1 = *($4 + [96])
	if ( ($1 == 0) ){ goto $label$13 }
	*($4 + [100]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$1 = *($4 + [140])
	if ( ($1 == 0) ){ goto $label$14 }
	*(($4 + [144])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$1 = *($4 + [128])
	if ( ($1 == 0) ){ goto $label$15 }
	*(($4 + [132])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$1 = [3]
	goto $label$11 
	
.LABEL $label$12
	$1 = (($1 + [180]) - (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)))
	
.LABEL $label$11
	CALL prints([18580])
	$5 = CALL current_time()
	*(($4 + [140])) = (int_64)0
	*(($4 + [156])) = (int_64)0
	*(($4 + [164])) = (int_64)0
	*($4 + [124]) = [0]
	*($4 + [128]) = [0]
	*($4 + [132 align=4]) = (int_64)0
	*($4 + [148 align=4]) = (int_64)0
	*($4 + [112]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($4 + [104]) = (int_64)3617214756542218240
	*($4 + [96]) = *($0)
	*($4 + [256]) = (int_64)-8272103851764158464
	CALL $135(($4 + [148]), ($4 + [96]), $0, ($4 + [256]), ($4 + [80]))
	*($4 + [132]) = $1
	*($4 + [88]) = [18598]
	*($4 + [92]) = CALL $198([18598])
	*($4 + [32]) = *($4 + [88])
	CALL $4(($4 + [256]), ($4 + [32]))
	*($4 + [104]) = (int_64)0
	*($4 + [96]) = (int_64)-8272103851764158464
	CALL cancel_deferred(($4 + [96]))
	*($4 + [72]) = [18598]
	*($4 + [76]) = CALL $198([18598])
	*($4 + [24]) = *($4 + [72])
	CALL $4(($4 + [80]), ($4 + [24]))
	*($4 + [104]) = (int_64)0
	*($4 + [96]) = (int_64)-8272103851764158464
	$5 = *($0)
	CALL $61(($4 + [256]), ($4 + [112]))
	$1 = *($4 + [256])
	CALL send_deferred(($4 + [96]), $5, $1, (*($4 + [260]) - $1), [1])
	$1 = *($4 + [256])
	if ( ($1 == 0) ){ goto $label$16 }
	*($4 + [260]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$16
	CALL $64(($4 + [112]))
	
.LABEL $label$10
	$5 = CALL current_time()
	*(($4 + [140])) = (int_64)0
	*(($4 + [156])) = (int_64)0
	*(($4 + [164])) = (int_64)0
	*($4 + [124]) = [0]
	*($4 + [128]) = [0]
	*($4 + [132 align=4]) = (int_64)0
	*($4 + [148 align=4]) = (int_64)0
	*($4 + [112]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($4 + [104]) = (int_64)3617214756542218240
	*($4 + [96]) = *($0)
	*($4 + [256]) = (int_64)-8272103851598635008
	CALL $135(($4 + [148]), ($4 + [96]), $0, ($4 + [256]), ($4 + [80]))
	*(($4 + [64])) = [0]
	*($4 + [56]) = (int_64)0
	$1 = CALL $198([16696])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$19 }
	*($4 + [56]) = ($1 << [1])
	$3 = (($4 + [56]) | [1])
	if ( $1 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$2 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($2)
	*($4 + [56]) = ($2 | [1])
	*($4 + [64]) = $3
	*($4 + [60]) = $1
	
.LABEL $label$18
	CALL memcpy($3, [16696], $1)
	
.LABEL $label$17
	*(($3 + $1)) = [0]
	*(($4 + [132])) = CALL $1(($4 + [56]))
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($4 + [64]))
	
.LABEL $label$20
	*($4 + [48]) = [18610]
	*($4 + [52]) = CALL $198([18610])
	*($4 + [16]) = *($4 + [48])
	CALL $4(($4 + [256]), ($4 + [16]))
	*($4 + [104]) = (int_64)0
	*($4 + [96]) = (int_64)-8272103851598635008
	CALL cancel_deferred(($4 + [96]))
	*($4 + [40]) = [18610]
	*($4 + [44]) = CALL $198([18610])
	*($4 + [8]) = *($4 + [40])
	CALL $4(($4 + [80]), ($4 + [8]))
	*($4 + [104]) = (int_64)0
	*($4 + [96]) = (int_64)-8272103851598635008
	$5 = *($0)
	CALL $61(($4 + [256]), ($4 + [112]))
	$0 = *($4 + [256])
	CALL send_deferred(($4 + [96]), $5, $0, (*($4 + [260]) - $0), [1])
	$0 = *($4 + [256])
	if ( ($0 == 0) ){ goto $label$21 }
	*($4 + [260]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$21
	CALL $64(($4 + [112]))
	CALL $41(($4 + [200]))
	
.LABEL $label$2
	$3 = *($4 + [240])
	if ( ($3 == 0) ){ goto $label$22 }
	$2 = ($4 + [244])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$24 }
	
.LOOP $label$25:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$26 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$27
	CALL _ZdlPv($1)
	
.LABEL $label$26
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$25 }
	$0 = *(($4 + [240]))
	goto $label$23 
	
.LABEL $label$24
	$0 = $3
	
.LABEL $label$23
	*($2) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$22
	$global$0 = ($4 + [272])
	return (unreachable)
	
.LABEL $label$1
	CALL $159(($4 + [56]))
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [17293])
	CALL memcpy($3, *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	CALL $45(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17293])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [17293])
	CALL memcpy($0, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $99 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*(($1 + [560])) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [568])))
	if ( ((*(($1 + [464])) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*(($1 + [464])) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [472])))
	if ( ((*(($1 + [368])) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*(($1 + [368])) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($1 + [376])))
	if ( ((*(($1 + [272])) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*(($1 + [272])) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [280])))
	if ( (*(($1 + [176])) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*(($1 + [176])) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [184])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$13 }
	CALL _ZdlPv($1)
	
.LABEL $label$13
	return $0
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $179($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*(($1 + [12])) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [20])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17293])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17293])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17293])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17293])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17293])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17293])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17293])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [32])
	*($2) = *($1)
	*($2 + [12]) = ($0 + [96])
	*($2 + [8]) = $0
	*($2 + [16]) = ($0 + [192])
	*($2 + [20]) = ($0 + [288])
	*($2 + [24]) = ($0 + [384])
	CALL $97(($2 + [8]), $2)
	$global$0 = ($2 + [32])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $179($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $99(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	*($2) = *($1)
	*($2 + [12]) = ($3 + [8])
	*($2 + [8]) = $3
	*($2 + [16]) = ($3 + [16])
	*($2 + [20]) = ($3 + [48])
	*($2 + [24]) = ($3 + [64])
	*($2 + [28]) = ($3 + [80])
	CALL $98(($2 + [8]), $2)
	$3 = *($0 + [4])
	*($2) = *($1)
	*($2 + [12]) = ($3 + [8])
	*($2 + [8]) = $3
	*($2 + [16]) = ($3 + [16])
	*($2 + [20]) = ($3 + [48])
	*($2 + [24]) = ($3 + [64])
	*($2 + [28]) = ($3 + [80])
	CALL $98(($2 + [8]), $2)
	$3 = *($0 + [8])
	*($2) = *($1)
	*($2 + [12]) = ($3 + [8])
	*($2 + [8]) = $3
	*($2 + [16]) = ($3 + [16])
	*($2 + [20]) = ($3 + [48])
	*($2 + [24]) = ($3 + [64])
	*($2 + [28]) = ($3 + [80])
	CALL $98(($2 + [8]), $2)
	$3 = *($0 + [12])
	*($2) = *($1)
	*($2 + [12]) = ($3 + [8])
	*($2 + [8]) = $3
	*($2 + [16]) = ($3 + [16])
	*($2 + [20]) = ($3 + [48])
	*($2 + [24]) = ($3 + [64])
	*($2 + [28]) = ($3 + [80])
	CALL $98(($2 + [8]), $2)
	$3 = *($0 + [16])
	*($2) = *($1)
	*($2 + [12]) = ($3 + [8])
	*($2 + [8]) = $3
	*($2 + [16]) = ($3 + [16])
	*($2 + [20]) = ($3 + [48])
	*($2 + [24]) = ($3 + [64])
	*($2 + [28]) = ($3 + [80])
	CALL $98(($2 + [8]), $2)
	$global$0 = ($2 + [32])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [17527])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [20]) = [0]
	*($3 + [12 align=4]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = $1
	CALL $148(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $94(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*(($3 + [12])) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [20])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $179($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [17298])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $58($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [17293])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [17293])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	CALL $45(*($1), *($0 + [4]))
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($0, *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [17293])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)5304430020972773376, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $29($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $65(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [18170])
	*($1) = *(($3 + [16]))
	CALL $162(($1 + [8]), *($0 + [4]))
	*(($1 + [32])) = *([0] + [8232])
	*($1 + [24]) = *([0] + [8224])
	*($1 + [40]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$global$0 = ($2 + [16])
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $60(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [17578])
	CALL memcpy(*($4 + [4]), $0, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17578])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [17578])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [17578])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $121(CALL $120($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17578])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [17578])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $121($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)3774889943067754496, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $32($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $52(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [18170])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	$8 = ($1 + [16])
	CALL $162($8, *($5 + [8]))
	$5 = *($5 + [12])
	*($1 + [32]) = *($5)
	*(($1 + [40])) = *(($5 + [8]))
	$5 = *($1 + [16])
	$6 = ( *(($1 + [20])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [32])
	$7 = (CASTING uint_64)(uint_32 $6)
	$9 = ($1 + [32])
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ($5 <= [513]) ){ goto $label$5 }
	$6 = CALL $201($5)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$4
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($6 + $5)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = $8
	*($3 + [44]) = $9
	CALL $133(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($4 + [8]), (int_64)3774889943067754496, *(*($0 + [8])), $7, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $204($6)
	
.LABEL $label$6
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$7 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$7 = *(($4 + [8]))
	$10 = *(*(($0 + [8])))
	$11 = *($1)
	*($3 + [32]) = *(($1 + [8]))
	*($1 + [56]) = CALL db_idx64_store($7, (int_64)3774889943067754496, $10, $11, ($3 + [32]))
	$global$0 = ($3 + [48])
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $60(*($1), *($0 + [8]))
	$4 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($0 + [4]), $4, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = *($4 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [17578])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $134 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [17527])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [44]) = $1
	CALL $137(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [48])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $103(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $135 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $179($0)
	
.LABEL $label$1
	*(($7 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$6 = ($2 + [16])
	*($3) = $6
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $6
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($7 + [40])
	$2 = *($0)
	$11 = *(($0 + [4]))
	if ( ((int_32)$11 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $11)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($11 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$6 = ($8 + [-24])
	*($5) = *($6)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($6) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = *($0 + [8])
	$5 = *($0 + [4])
	*(($4 = *($0))) = *($5)
	*(($4 + [8])) = *(($5 + [8]))
	$4 = *($0)
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($4) / (int_64)100)
	*($4) = $6
	$6 = ((int_64)$6 * (int_64)5)
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [17794])
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [17818])
	*($4) = $6
	$6 = *($3)
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $6
	$7 = *($0)
	*((($2 + [8]) + [8])) = [0]
	*($2 + [8]) = (int_64)0
	$4 = CALL $198([16690])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($2 + [8]) = ($4 << [1])
	$5 = (($2 + [8]) | [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($2 + [8]) = ($8 | [1])
	*($2 + [16]) = $5
	*($2 + [12]) = $4
	
.LABEL $label$3
	CALL memcpy($5, [16690], $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	*($2 + [32]) = (int_64)-4817609493215935456
	*($2 + [24]) = *($3)
	$6 = *(($7 + [8]))
	$9 = *($7)
	$4 = (($2 + [8]) + [8])
	*(($2 + [64])) = *($4)
	*($4) = [0]
	*(($2 + [48])) = $6
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	*($2 + [40]) = $9
	$4 = CALL $48(($2 + [88]), ($2 + [72]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($2 + [24]))
	CALL $49(($2 + [128]), $4)
	$5 = *($2 + [128])
	CALL send_inline($5, (*($2 + [132]) - $5))
	$5 = *($2 + [128])
	if ( ($5 == 0) ){ goto $label$5 }
	*($2 + [132]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$5 = *($4 + [28])
	if ( ($5 == 0) ){ goto $label$6 }
	*(($4 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$6
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($4 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$8
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$9
	$0 = *($0)
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*(($1 + [96]))), [17934])
	$6 = ((int_64)*($1 + [88]) + (int_64)*($0))
	*($1 + [88]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [17977])
	CALL eosio_assert(((int_64)*($1 + [88]) < (int_64)4611686018427387904), [17996])
	$global$0 = ($2 + [144])
	return (unreachable)
	
.LABEL $label$1
	CALL $159(($2 + [8]))
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	CALL $138(*($0 + [4]), $1)
	$5 = *($1 + [8])
	$6 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [28])
	$7 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [8])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $201($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [24])
	*($3 + [44]) = ($1 + [40])
	CALL $139(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($4 + [8]), (int_64)5304430020972773376, *(*($0 + [8])), $7, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $204($2)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

int_32 .FUNC $202 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $203($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [18961])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $203 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8268]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8272])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8268]) = [1]
	$2 = ($2 << [16])
	*([0] + [8272]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8272])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8272]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8268]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8268]) = [1]
	$3 = ($3 << [16])
	*([0] + [8272]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8272])
	
.LABEL $label$10
	*([0] + [8272]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $200 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $201($1)
	
.LABEL $label$2
	*(CALL $183()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $201(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $204($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $201 (int_32 $0)
{
	return CALL $202([8276], $0)
}

void .FUNC $204 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16660])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16468]
	$3 = (((int_32)$1 * (int_32)[12]) + [16468])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $181 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [17578])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [17578])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [17578])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [17578])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [17578])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [17578])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = CALL current_time()
	CALL prints([17063])
	CALL printui(((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295))
	CALL prints([17071])
	*(($1 + [24])) = [0]
	*($1 + [16]) = (int_64)0
	$3 = CALL $198([16690])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($1 + [16]) = ($3 << [1])
	$4 = (($1 + [16]) | [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($1 + [16]) = ($5 | [1])
	*($1 + [24]) = $4
	*($1 + [20]) = $3
	
.LABEL $label$4
	CALL memcpy($4, [16690], $3)
	
.LABEL $label$3
	*(($4 + $3)) = [0]
	$3 = CALL $1(($1 + [16]))
	CALL prints([17074])
	CALL printui((CASTING uint_64)(uint_32 $3))
	CALL prints([17071])
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($1 + [24]))
	
.LABEL $label$6
	*(($1 + [8])) = [0]
	*($1) = (int_64)0
	$3 = CALL $198([16696])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$9 }
	*($1) = ($3 << [1])
	$4 = ($1 | [1])
	if ( $3 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($1) = ($5 | [1])
	*($1 + [8]) = $4
	*($1 + [4]) = $3
	
.LABEL $label$8
	CALL memcpy($4, [16696], $3)
	
.LABEL $label$7
	*(($4 + $3)) = [0]
	$3 = CALL $1($1)
	CALL prints([17108])
	CALL printui((CASTING uint_64)(uint_32 $3))
	CALL prints([17071])
	if ( ((*($1) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$10
	CALL prints([17142])
	CALL printui((int_64)1)
	CALL prints([17071])
	CALL prints([17157])
	CALL printui((int_64)8)
	CALL prints([17071])
	CALL prints([17176])
	CALL printui((int_64)16)
	CALL prints([17071])
	CALL prints([17192])
	CALL printui((int_64)8)
	CALL prints([17071])
	CALL prints([17223])
	CALL printui((int_64)4)
	CALL prints([17071])
	$global$0 = ($1 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $159(($1 + [16]))
	
.LABEL $label$1
	CALL $159($1)
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL require_recipient((int_64)-4817609493215935456)
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	$3 = *($0 + [8])
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	*($2 + [32]) = (int_64)0
	$4 = [0]
	$5 = CALL db_lowerbound_i64($3, $3, (int_64)4406680248264818688, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $27(($2 + [8]), $5)
	
.LABEL $label$1
	$3 = *($0)
	*($2) = $1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [17584])
	CALL $47(($2 + [8]), $4, $3, $2)
	CALL $41(($2 + [32]))
	$global$0 = ($2 + [48])
}

void .FUNC $123 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)3774889943067754496, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [17883])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $32($7, CALL $fimport$17(*($7), *($7 + [8]), (int_64)3774889943067754496, $6))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [17883])
	
.LABEL $label$2
	*(($4 + [56])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [8])
	CALL $162($6, *($4 + [4]))
	$4 = *($4 + [8])
	*($1 + [24]) = *($4)
	*(($1 + [32])) = *(($4 + [8]))
	$4 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [24])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $201($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [17578])
	CALL memcpy($2, $1, [8])
	*($3 + [12]) = ($2 + [8])
	CALL $60(($3 + [8]), $6)
	CALL eosio_assert(((int_32)(*($3 + [16]) - *($3 + [12])) > (int_32)[7]), [17578])
	CALL memcpy(*($3 + [12]), $7, [8])
	$6 = (*($3 + [12]) + [8])
	*($3 + [12]) = $6
	*($3 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($3 + [16]) - $6) > (int_32)[7]), [17578])
	CALL memcpy(*($3 + [12]), ($3 + [24]), [8])
	*($3 + [12]) = (*($3 + [12]) + [8])
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($5 + [8]), (int_64)5304430358492331680, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $204($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [32])
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17578])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [17578])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17578])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17578])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17578])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ($2 | [1])
	$4 = [0]
	$5 = ($2 + [8])
	
.LOOP $label$1:
	$6 = ($0 + $4)
	$7 = *($6)
	if ( ((uint_32)$7 > (uint_32)[159]) ){ goto $label$2 }
	CALL $175($2, uint_32($7 >> [4]))
	$7 = *($2)
	$8 = ($7 & [1])
	CALL $168($1, ( *($5) ? $3 : $8 ), ( *($2 + [4]) ? uint_32($7 >> [1]) : $8 ))
	if ( ((*($2) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$3
	$7 = *($6)
	
.LABEL $label$2
	if ( ((uint_32)($7 & [14]) > (uint_32)[9]) ){ goto $label$4 }
	CALL $175($2, ($7 & [15]))
	$7 = *($2)
	$6 = ($7 & [1])
	CALL $168($1, ( *($5) ? $3 : $6 ), ( *($2 + [4]) ? uint_32($7 >> [1]) : $6 ))
	if ( ((*($2) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$4
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$1 }
	$global$0 = ($2 + [16])
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $179($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $160(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $125 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [17527])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24]) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = $1
	CALL $132(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [52])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $108(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	*(($5 = $4) + [16]) = *($1 + [8])
	$6 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [40]))), [17934])
	$7 = ((int_64)*($1 + [32]) + (int_64)*($3))
	*($1 + [32]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [17977])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [17996])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [17716])
	$3 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [32])
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [16])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $201($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [24]) = $5
	*($5 + [40]) = $8
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [44]) = ($1 + [32])
	CALL $133(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [52]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $204($4)
	
.LABEL $label$4
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [32]) = *(($1 + [8]))
	if ( (CALL $197(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [56])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3774889943067754496, ($5 + [24]), $6)
	*($1) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [32]))
	
.LABEL $label$6
	$global$0 = ($5 + [48])
}

void .FUNC $14 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$1 = ($global$0 - [528])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = CALL read_transaction([0], [0])
	$3 = CALL $201($2)
	CALL read_transaction($3, $2)
	CALL sha256($3, $2, ($1 + [480]))
	*(($1 + [472])) = [0]
	*($1 + [464]) = (int_64)0
	$2 = CALL $198([16703])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$5 }
	*($1 + [464]) = ($2 << [1])
	$3 = (($1 + [464]) | [1])
	if ( $2 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [464]) = ($4 | [1])
	*($1 + [472]) = $3
	*($1 + [468]) = $2
	
.LABEL $label$4
	CALL memcpy($3, [16703], $2)
	
.LABEL $label$3
	*(($3 + $2)) = [0]
	CALL $2(($1 + [480]), ($1 + [464]))
	$2 = *($1 + [464])
	$2 = ( *($1 + [468]) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ((uint_32)$2 > (uint_32)[5]) ){ goto $label$7 }
	$2 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	goto $label$6 
	
.LABEL $label$7
	$3 = CALL $161(($1 + [184]), ($1 + [464]), ($2 + [-6]), [-1], ($1 + [464]))
	$2 = CALL $172($3, [0], [10])
	if ( ((*($1 + [184]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$6
	*(($1 + [456])) = [0]
	*($1 + [440]) = (int_64)-1
	$5 = (int_64)0
	*($1 + [448]) = (int_64)0
	$6 = *($0 + [8])
	*($1 + [424]) = $6
	*($1 + [432]) = $6
	$3 = CALL db_lowerbound_i64($6, $6, (int_64)-7807081578584080384, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	CALL $28(($1 + [424]), $3)
	*($1 + [188]) = [0]
	*($1 + [184]) = ($1 + [424])
	$6 = *(*(CALL $72(($1 + [184])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*(($3 = ($1 + [440]))) = $5
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [18170])
	$6 = *($3)
	*($1 + [416]) = $6
	$6 = ((uint_64)(CASTING int_64)(int_32 $2) % (uint_64)$6)
	*($1 + [408]) = $6
	$3 = *(($1 + [452]))
	$7 = *(($1 + [448]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$10 }
	
.LOOP $label$12:
	$2 = ($3 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$11 }
	$3 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($4 + [44]) == (int_32)($1 + [424])), [17883])
	goto $label$9 
	
.LABEL $label$10
	$4 = [0]
	$2 = CALL db_find_i64(*($1 + [424]), *(($1 + [432])), (int_64)-7807081578584080384, $6)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$9 }
	$4 = CALL $28(($1 + [424]), $2)
	CALL eosio_assert(((int_32)*($4 + [44]) == (int_32)($1 + [424])), [17883])
	
.LABEL $label$9
	$8 = CALL $160(($1 + [392]), ($4 + [8]))
	$2 = CALL $160(($1 + [376]), $8)
	$5 = *(($4 + [32]))
	*((($1 + [360]) + [8])) = $5
	$6 = *($4 + [24])
	*((($1 + [56]) + [8])) = $5
	*($1 + [56]) = $6
	*($1 + [360]) = $6
	$9 = [0]
	CALL $50($0, $2, ($1 + [56]), [0], [0])
	if ( ((*($2) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$13
	*((($1 + [320]) + [32])) = [0]
	*($1 + [336]) = (int_64)-1
	$6 = *(($0 + [8]))
	*($1 + [320]) = $6
	*($1 + [328]) = $6
	*($1 + [344]) = (int_64)0
	$2 = CALL db_lowerbound_i64($6, $6, (int_64)4406680248264818688, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$14 }
	$9 = CALL $27(($1 + [320]), $2)
	
.LABEL $label$14
	*(($2 = (($1 + [304]) + [8]))) = *(($9 + [16]))
	*($1 + [304]) = *($9 + [8])
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [304]) / (int_64)90)
	CALL __multi3(($1 + [40]), $6, (int_64)$6 >> (int_64)63), (int_64)100, (int_64)0)
	*($1 + [304]) = $6
	$6 = *((($1 + [40]) + [8]))
	$5 = *($1 + [40])
	CALL eosio_assert(( (uint_64)($5 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [17794])
	CALL eosio_assert(( ((uint_64)$5 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [17818])
	*($1 + [304]) = $5
	*($1 + [296]) = (int_64)0
	*($1 + [288]) = (int_64)0
	if ( (CALL is_account((int_64)6138535371015881248) == 0) ){ goto $label$17 }
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)6138535371015881248) ){ goto $label$17 }
	*((($1 + [288]) + [8])) = *((($1 + [304]) + [8]))
	*($1 + [288]) = *($1 + [304])
	*($1 + [240]) = (int_64)3617214756542218240
	*($1 + [232]) = $6
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [288]) / (int_64)100)
	*($1 + [288]) = $6
	CALL eosio_assert([1], [17794])
	CALL eosio_assert([1], [17818])
	*($1 + [288]) = ((int_64)$6 << (int_64)1)
	*((($1 + [168]) + [8])) = [0]
	*($1 + [168]) = (int_64)0
	$3 = CALL $198([18502])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$20 }
	*($1 + [168]) = ($3 << [1])
	$4 = (($1 + [168]) | [1])
	if ( $3 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$7 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($7)
	*($1 + [168]) = ($7 | [1])
	*($1 + [176]) = $4
	*($1 + [172]) = $3
	
.LABEL $label$19
	CALL memcpy($4, [18502], $3)
	
.LABEL $label$18
	*(($4 + $3)) = [0]
	*(($1 + [208])) = *((($1 + [288]) + [8]))
	$3 = (($1 + [168]) + [8])
	*(($1 + [224])) = *($3)
	*($3) = [0]
	*($1 + [192]) = (int_64)6138535371015881248
	*($1 + [184]) = *($0)
	*($1 + [200]) = *($1 + [288])
	*($1 + [216]) = *($1 + [168])
	*($1 + [168]) = (int_64)0
	$3 = CALL $48(($1 + [248]), ($1 + [232]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($1 + [184]))
	CALL $49(($1 + [512]), $3)
	$4 = *($1 + [512])
	CALL send_inline($4, (*($1 + [516]) - $4))
	$4 = *($1 + [512])
	if ( ($4 == 0) ){ goto $label$21 }
	*($1 + [516]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$21
	$4 = *($3 + [28])
	if ( ($4 == 0) ){ goto $label$22 }
	*(($3 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$22
	$4 = *($3 + [16])
	if ( ($4 == 0) ){ goto $label$23 }
	*(($3 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$23
	if ( ((*(($1 + [216])) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($1 + [224])))
	
.LABEL $label$24
	if ( ((*($1 + [168]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($1 + [176])))
	
.LABEL $label$17
	*((($1 + [288]) + [8])) = *($2)
	*($1 + [288]) = *($1 + [304])
	$2 = ($2 & [1])
	$2 = *($1 + [392])
	$3 = ( *($8 + [4]) ? uint_32($2 >> [1]) : $2 )
	if ( ($3 <= [13]) ){ goto $label$26 }
	*($1 + [240]) = (int_64)3617214756542218240
	*($1 + [232]) = *($0)
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [288]) / (int_64)100)
	*($1 + [288]) = $6
	$6 = ((int_64)$6 * (int_64)51)
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [17794])
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [17818])
	*(($1 + [208])) = *(($1 + [296]))
	*($1 + [192]) = (int_64)-7515584006193881072
	*($1 + [200]) = $6
	*($1 + [288]) = $6
	*($1 + [184]) = *($0)
	CALL $160(($1 + [216]), $8)
	$2 = CALL $48(($1 + [248]), ($1 + [232]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($1 + [184]))
	CALL $49(($1 + [512]), $2)
	$3 = *($1 + [512])
	CALL send_inline($3, (*($1 + [516]) - $3))
	$3 = *($1 + [512])
	if ( ($3 == 0) ){ goto $label$27 }
	*($1 + [516]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$27
	$3 = *($2 + [28])
	if ( ($3 == 0) ){ goto $label$28 }
	*(($2 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$28
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$29 }
	*(($2 + [20])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$29
	if ( ((*($1 + [216]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($1 + [224])))
	goto $label$25 
	
.LABEL $label$26
	*($1 + [240]) = (int_64)3617214756542218240
	*($1 + [232]) = *($0)
	*($1 + [164]) = $3
	*($1 + [160]) = ( *($8 + [8]) ? ($8 + [1]) : $2 )
	*($1 + [32]) = *($1 + [160])
	$4 = CALL $4(($1 + [104]), ($1 + [32]))
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [288]) / (int_64)100)
	*($1 + [288]) = $6
	$6 = ((int_64)$6 * (int_64)51)
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [17794])
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [17818])
	*($1 + [288]) = $6
	*(($1 + [176])) = [0]
	*($1 + [168]) = (int_64)0
	$2 = CALL $198([18510])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$32 }
	*($1 + [168]) = ($2 << [1])
	$3 = (($1 + [168]) | [1])
	if ( $2 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$7 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($7)
	*($1 + [168]) = ($7 | [1])
	*($1 + [176]) = $3
	*($1 + [172]) = $2
	
.LABEL $label$31
	CALL memcpy($3, [18510], $2)
	
.LABEL $label$30
	*(($3 + $2)) = [0]
	*(($1 + [208])) = *((($1 + [288]) + [8]))
	$2 = (($1 + [168]) + [8])
	*(($1 + [224])) = *($2)
	*($2) = [0]
	*($1 + [184]) = *($0)
	*($1 + [192]) = *($4)
	*($1 + [200]) = *($1 + [288])
	*($1 + [216]) = *($1 + [168])
	*($1 + [168]) = (int_64)0
	$2 = CALL $48(($1 + [248]), ($1 + [232]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($1 + [184]))
	CALL $49(($1 + [512]), $2)
	$3 = *($1 + [512])
	CALL send_inline($3, (*($1 + [516]) - $3))
	$3 = *($1 + [512])
	if ( ($3 == 0) ){ goto $label$33 }
	*($1 + [516]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$33
	$3 = *($2 + [28])
	if ( ($3 == 0) ){ goto $label$34 }
	*(($2 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$34
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$35 }
	*(($2 + [20])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$35
	if ( ((*(($1 + [216])) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($1 + [224])))
	
.LABEL $label$36
	if ( ((*($1 + [168]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($1 + [176])))
	
.LABEL $label$25
	$6 = *($0)
	*($1 + [188]) = ($1 + [416])
	*($1 + [184]) = ($1 + [408])
	*($1 + [192]) = ($1 + [480])
	*($1 + [200]) = ($1 + [288])
	*($1 + [196]) = $8
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [17584])
	CALL $73(($1 + [320]), $9, $6, ($1 + [184]))
	*($1 + [176]) = [0]
	*($1 + [168]) = (int_64)0
	$2 = CALL $160(($1 + [144]), $8)
	CALL $67($0, $2, ($1 + [168]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$37
	$2 = (*($1 + [172]) - *($1 + [168]))
	$11 = ((int_32)$2 / (int_32)[12])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$41 }
	$12 = (($1 + [184]) + [32])
	$13 = (($1 + [184]) + [16])
	$14 = (($1 + [104]) | [1])
	$15 = ($1 + [276])
	$16 = ($1 + [224])
	$17 = ($1 + [268])
	$3 = [0]
	$2 = [0]
	
.LOOP $label$42:
	*(($7 = (($1 + [288]) + [8]))) = *((($1 + [304]) + [8]))
	*($1 + [288]) = *($1 + [304])
	$4 = ($2 & [2147483647])
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$46 }
	goto $label$54 
	
.LABEL $label$54
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [288]) / (int_64)100)
	*($1 + [288]) = $6
	$6 = ((int_64)$6 * (int_64)5)
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [17794])
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [17818])
	*($1 + [288]) = $6
	if ( ((int_64)$6 >= (int_64)1) ){ goto $label$47 }
	goto $label$43 
	
.LABEL $label$53
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [288]) / (int_64)100)
	goto $label$48 
	
.LABEL $label$52
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [288]) / (int_64)100)
	goto $label$48 
	
.LABEL $label$51
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [288]) / (int_64)100)
	goto $label$48 
	
.LABEL $label$50
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [288]) / (int_64)100)
	goto $label$48 
	
.LABEL $label$49
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [288]) / (int_64)100)
	
.LABEL $label$48
	*($1 + [288]) = $6
	CALL eosio_assert([1], [17794])
	CALL eosio_assert([1], [17818])
	*($1 + [288]) = $6
	if ( ((int_64)$6 < (int_64)1) ){ goto $label$43 }
	
.LABEL $label$47
	$4 = *($1 + [168])
	if ( ((uint_32)((int_32)(*($1 + [172]) - $4) / (int_32)[12]) <= (uint_32)$2) ){ goto $label$45 }
	$4 = ($4 + $3)
	$18 = *($4)
	$19 = ($18 & [1])
	if ( $19 ){ goto $label$56 }
	if ( ((uint_32)uint_32($18 >> [1]) >= (uint_32)[13]) ){ goto $label$55 }
	goto $label$44 
	
.LABEL $label$56
	if ( (*(($4 + [4])) <= [13]) ){ goto $label$44 }
	
.LABEL $label$55
	*((($1 + [232]) + [8])) = (int_64)3617214756542218240
	$6 = *($0)
	*($1 + [232]) = $6
	*((($1 + [184]) + [8])) = (int_64)-7515584006193881072
	*($13) = *($1 + [288])
	*(($13 + [8])) = *($7)
	*($1 + [184]) = $6
	CALL $160($12, $4)
	CALL $49(($1 + [512]), CALL $48(($1 + [248]), ($1 + [232]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($1 + [184])))
	$4 = *($1 + [512])
	CALL send_inline($4, (*($1 + [516]) - $4))
	$4 = *($1 + [512])
	if ( ($4 == 0) ){ goto $label$57 }
	*($1 + [516]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$57
	$4 = *($15)
	if ( ($4 == 0) ){ goto $label$58 }
	*((($1 + [248]) + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$58
	$4 = *((($1 + [248]) + [16]))
	if ( ($4 == 0) ){ goto $label$59 }
	*($17) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$59
	if ( ((*($12) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*($16))
	$3 = ($3 + [12])
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)$11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$46
	*($1 + [288]) = (int_64)0
	$3 = ($3 + [12])
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)$11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$45
	CALL $180(($1 + [168]))
	
.LABEL $label$44
	if ( $19 ){ goto $label$61 }
	$18 = uint_32($18 >> [1])
	$4 = ($4 + [1])
	goto $label$60 
	
.LABEL $label$61
	$18 = *(($4 + [4]))
	$4 = *(($4 + [8]))
	
.LABEL $label$60
	*($1 + [140]) = $18
	*($1 + [136]) = $4
	*($1 + [24]) = *($1 + [136])
	CALL $4(($1 + [184]), ($1 + [24]))
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)*($1 + [184])) ){ goto $label$43 }
	*((($1 + [232]) + [8])) = (int_64)3617214756542218240
	*($1 + [232]) = $6
	$4 = *($1 + [168])
	if ( ((uint_32)((int_32)(*($1 + [172]) - $4) / (int_32)[12]) <= (uint_32)$2) ){ goto $label$40 }
	$4 = ($4 + $3)
	$18 = *($4)
	if ( ($18 & [1]) ){ goto $label$63 }
	$18 = uint_32($18 >> [1])
	$4 = ($4 + [1])
	goto $label$62 
	
.LABEL $label$63
	$18 = *(($4 + [4]))
	$4 = *(($4 + [8]))
	
.LABEL $label$62
	*($1 + [124]) = $18
	*($1 + [120]) = $4
	*($1 + [16]) = *($1 + [120])
	CALL $4(($1 + [128]), ($1 + [16]))
	*(($18 = (($1 + [104]) + [8]))) = [0]
	*($1 + [104]) = (int_64)0
	$4 = CALL $198([18542])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$39 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$66 }
	*($1 + [104]) = ($4 << [1])
	$19 = $14
	if ( $4 ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$66
	$20 = (($4 + [16]) & [-16])
	$19 = CALL _Znwj($20)
	*($18) = $19
	*($1 + [104]) = ($20 | [1])
	*($1 + [108]) = $4
	
.LABEL $label$65
	CALL memcpy($19, [18542], $4)
	
.LABEL $label$64
	*(($19 + $4)) = [0]
	*((($1 + [184]) + [8])) = *($1 + [128])
	*($13) = *($1 + [288])
	*(($13 + [8])) = *($7)
	*($12) = *($1 + [104])
	*(($12 + [8])) = *($18)
	*($18) = [0]
	*($1 + [184]) = *($0)
	*($1 + [104]) = (int_64)0
	CALL $49(($1 + [512]), CALL $48(($1 + [248]), ($1 + [232]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($1 + [184])))
	$4 = *($1 + [512])
	CALL send_inline($4, (*($1 + [516]) - $4))
	$4 = *($1 + [512])
	if ( ($4 == 0) ){ goto $label$67 }
	*($1 + [516]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$67
	$4 = *($15)
	if ( ($4 == 0) ){ goto $label$68 }
	*((($1 + [248]) + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$68
	$4 = *((($1 + [248]) + [16]))
	if ( ($4 == 0) ){ goto $label$69 }
	*($17) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$69
	if ( ((*($12) & [1]) == 0) ){ goto $label$70 }
	CALL _ZdlPv(*($16))
	
.LABEL $label$70
	if ( ((*($1 + [104]) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*($18))
	
.LABEL $label$43
	$3 = ($3 + [12])
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)$11) ){ goto $label$42 }
	
.LABEL $label$41
	$6 = *($0)
	*($1 + [192]) = $0
	*($1 + [188]) = ($1 + [304])
	*($1 + [184]) = ($1 + [288])
	CALL eosio_assert($10, [17584])
	CALL $74(($1 + [320]), $9, $6, ($1 + [184]))
	$6 = *($0)
	*($1 + [188]) = ($1 + [304])
	*($1 + [184]) = ($1 + [288])
	CALL eosio_assert($10, [17584])
	CALL $75(($1 + [320]), $9, $6, ($1 + [184]))
	$6 = *($0)
	*($1 + [188]) = ($1 + [304])
	*($1 + [184]) = ($1 + [288])
	CALL eosio_assert($10, [17584])
	CALL $76(($1 + [320]), $9, $6, ($1 + [184]))
	$6 = *($0)
	*($1 + [188]) = ($1 + [304])
	*($1 + [184]) = ($1 + [288])
	CALL eosio_assert($10, [17584])
	CALL $77(($1 + [320]), $9, $6, ($1 + [184]))
	$6 = *($0)
	CALL eosio_assert($10, [17584])
	CALL $78(($1 + [320]), $9, $6, ($1 + [184]))
	*(($1 + [96])) = [0]
	*($1 + [88]) = (int_64)0
	$2 = CALL $198([16703])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$38 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$73 }
	*($1 + [88]) = ($2 << [1])
	$3 = (($1 + [88]) | [1])
	if ( $2 ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$73
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [88]) = ($4 | [1])
	*($1 + [96]) = $3
	*($1 + [92]) = $2
	
.LABEL $label$72
	CALL memcpy($3, [16703], $2)
	
.LABEL $label$71
	*(($3 + $2)) = [0]
	$2 = CALL $198([16686])
	if ( ($2 <= [8]) ){ goto $label$76 }
	CALL eosio_assert([0], [16808])
	goto $label$75 
	
.LABEL $label$76
	if ( ($2 == 0) ){ goto $label$74 }
	
.LABEL $label$75
	$6 = (int_64)0
	
.LOOP $label$77:
	$3 = *(($2 + [16685]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$78 }
	CALL eosio_assert([0], [16853])
	
.LABEL $label$78
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$77 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$74
	$6 = (int_64)4
	goto $label$1 
	
.LABEL $label$40
	CALL $180(($1 + [168]))
	
.LABEL $label$39
	CALL $159(($1 + [104]))
	
.LABEL $label$38
	CALL $159(($1 + [88]))
	
.LABEL $label$16
	CALL $159(($1 + [168]))
	
.LABEL $label$15
	CALL $159(($1 + [168]))
	
.LABEL $label$2
	CALL $159(($1 + [464]))
	
.LABEL $label$1
	*($1 + [72]) = (int_64)0
	*($1 + [80]) = $6
	CALL eosio_assert([1], [16739])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$81:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$80 }
	$5 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$82 }
	$6 = $5
	$3 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$81 }
	goto $label$79 
	
.LABEL $label$82
	$6 = $5
	
.LOOP $label$83:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$80 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$4 = ($2 + [1])
	$2 = $4
	if ( $3 ){ goto $label$83 }
	$3 = [1]
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$81 }
	goto $label$79 
	
.LABEL $label$80
	$3 = [0]
	
.LABEL $label$79
	CALL eosio_assert($3, [16788])
	*(($1 + [8])) = *((($1 + [72]) + [8]))
	*($1) = *($1 + [72])
	CALL $79($0, ($1 + [88]), $1, [1])
	if ( ((*($1 + [88]) & [1]) == 0) ){ goto $label$84 }
	CALL _ZdlPv(*($1 + [96]))
	
.LABEL $label$84
	$6 = *($0)
	*($1 + [184]) = $6
	*($1 + [232]) = [1]
	*($1 + [192]) = (int_64)-4157529991795441664
	*(($2 = CALL _Znwj([16]))) = $6
	*($2 + [8]) = (int_64)3617214756542218240
	*(($1 + [220])) = [0]
	$3 = ($2 + [16])
	*(($1 + [208])) = $3
	*(($1 + [204])) = $3
	*($1 + [200]) = $2
	*($1 + [212 align=4]) = (int_64)0
	CALL $58(($1 + [212]), [4])
	$2 = *($1 + [212])
	CALL eosio_assert(((int_32)(*(($1 + [216])) - $2) > (int_32)[3]), [17578])
	CALL memcpy($2, ($1 + [232]), [4])
	CALL $49(($1 + [248]), ($1 + [184]))
	$2 = *($1 + [248])
	CALL send_inline($2, (*($1 + [252]) - $2))
	$2 = *($1 + [248])
	if ( ($2 == 0) ){ goto $label$85 }
	*($1 + [252]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$85
	$2 = *($1 + [212])
	if ( ($2 == 0) ){ goto $label$86 }
	*(($1 + [216])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$86
	$2 = *($1 + [200])
	if ( ($2 == 0) ){ goto $label$87 }
	*(($1 + [204])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$87
	$4 = *($1 + [168])
	if ( ($4 == 0) ){ goto $label$88 }
	$3 = *($1 + [172])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$90 }
	
.LOOP $label$91:
	$2 = ($3 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$92 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$92
	$3 = $2
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$91 }
	$2 = *($1 + [168])
	goto $label$89 
	
.LABEL $label$90
	$2 = $4
	
.LABEL $label$89
	*($1 + [172]) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$88
	CALL $41(($1 + [344]))
	if ( ((*($1 + [392]) & [1]) == 0) ){ goto $label$93 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$93
	$4 = *($1 + [448])
	if ( ($4 == 0) ){ goto $label$94 }
	$0 = ($1 + [452])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$96 }
	
.LOOP $label$97:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$98 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$99 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$99
	CALL _ZdlPv($3)
	
.LABEL $label$98
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$97 }
	$2 = *(($1 + [448]))
	goto $label$95 
	
.LABEL $label$96
	$2 = $4
	
.LABEL $label$95
	*($0) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$94
	if ( ((*($1 + [464]) & [1]) == 0) ){ goto $label$100 }
	CALL _ZdlPv(*($1 + [472]))
	
.LABEL $label$100
	$global$0 = ($1 + [528])
	$4
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [608])
	$global$0 = $2
	*($2 + [607]) = $1
	CALL require_auth(*($0))
	*(($2 + [592])) = [0]
	*($2 + [576]) = (int_64)-1
	$3 = *($0 + [8])
	*($2 + [560]) = $3
	*($2 + [568]) = $3
	*($2 + [584]) = (int_64)0
	$1 = CALL db_lowerbound_i64($3, $3, (int_64)-4157493845350678528, (int_64)0)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	$1 = CALL $31(($2 + [560]), $1)
	$3 = *($0)
	*($2 + [16]) = ($2 + [607])
	CALL eosio_assert([1], [17584])
	CALL $42(($2 + [560]), $1, $3, ($2 + [16]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *($0)
	*($2 + [520]) = ($2 + [607])
	CALL $43(($2 + [16]), ($2 + [560]), $3, ($2 + [520]))
	
.LABEL $label$1
	*(($2 + [552])) = [0]
	*($2 + [536]) = (int_64)-1
	$3 = *(($0 + [8]))
	*($2 + [520]) = $3
	*($2 + [528]) = $3
	*($2 + [544]) = (int_64)0
	$1 = CALL db_lowerbound_i64($3, $3, (int_64)4406680248264818688, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$6 }
	CALL $27(($2 + [520]), $1)
	if ( *($2 + [607]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = CALL $198([16686])
	if ( ($1 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [16808])
	goto $label$9 
	
.LABEL $label$10
	if ( ($1 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$3 = (int_64)0
	
.LOOP $label$11:
	$4 = *(($1 + [16685]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [16853])
	
.LABEL $label$12
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$11 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$7 
	
.LABEL $label$8
	$3 = (int_64)4
	
.LABEL $label$7
	*($2 + [504]) = (int_64)0
	*($2 + [512]) = $3
	CALL eosio_assert([1], [16739])
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$3 = $5
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$3 = $5
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$17 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$4 = [0]
	
.LABEL $label$13
	CALL eosio_assert($4, [16788])
	*(($2 + [72])) = [0]
	*(($2 + [160])) = (int_64)0
	*(($2 + [168])) = [0]
	*(($2 + [256])) = (int_64)0
	*(($2 + [264])) = [0]
	*(($1 = ($2 + [352]))) = (int_64)0
	*(($2 + [360])) = [0]
	*(($4 = ($2 + [448]))) = (int_64)0
	*(($7 = ($2 + [456]))) = [0]
	$6 = ($2 + [512])
	$3 = *($6)
	*(($2 + [88])) = $3
	*(($2 + [184])) = $3
	$3 = *($2 + [504])
	*(($2 + [176])) = $3
	*($2 + [64]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [80]) = $3
	$3 = *($6)
	*(($2 + [280])) = $3
	$5 = *($2 + [504])
	*(($2 + [272])) = $5
	*(($2 + [368])) = $5
	*(($2 + [376])) = $3
	*(($2 + [464])) = $5
	*(($2 + [472])) = $3
	$3 = *($0)
	*($2 + [12]) = ($2 + [16])
	*($2 + [8]) = ($2 + [504])
	CALL $44($2, ($2 + [520]), $3, ($2 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($7))
	
.LABEL $label$18
	if ( ((*($1) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($2 + [360])))
	
.LABEL $label$19
	if ( ((*(($2 + [256])) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($2 + [264])))
	
.LABEL $label$20
	if ( (*(($2 + [160])) & [1]) ){ goto $label$23 }
	if ( (*($2 + [64]) & [1]) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	CALL _ZdlPv(*(($2 + [168])))
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($2 + [72])))
	if ( *($2 + [607]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$21
	if ( (*($2 + [607]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL prints([17514])
	goto $label$3 
	
.LABEL $label$4
	CALL prints([17521])
	
.LABEL $label$3
	CALL $41(($2 + [544]))
	$6 = *($2 + [584])
	if ( ($6 == 0) ){ goto $label$24 }
	$0 = ($2 + [588])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$26 }
	
.LOOP $label$27:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$28 }
	CALL _ZdlPv($4)
	
.LABEL $label$28
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$27 }
	$1 = *(($2 + [584]))
	goto $label$25 
	
.LABEL $label$26
	$1 = $6
	
.LABEL $label$25
	*($0) = $6
	CALL _ZdlPv($1)
	
.LABEL $label$24
	$global$0 = ($2 + [608])
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $201($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [17293])
	CALL memcpy($4, $2, [1])
	$8 = *($4)
	*(($4 + [20])) = ($2 + [1])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $204($2)
	
.LABEL $label$5
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$1 = ($global$0 - [320])
	$global$0 = $1
	CALL require_auth(*($0))
	*((($1 + [264]) + [32])) = [0]
	*($1 + [280]) = (int_64)-1
	$2 = *($0 + [8])
	*($1 + [264]) = $2
	*($1 + [272]) = $2
	*($1 + [288]) = (int_64)0
	$3 = [0]
	$4 = CALL db_lowerbound_i64($2, $2, (int_64)4406680248264818688, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $27(($1 + [264]), $4)
	
.LABEL $label$1
	$5 = *(($3 + [48]))
	$6 = *($3 + [40])
	$7 = *($3 + [56])
	*((($1 + [224]) + [32])) = [0]
	*($1 + [240]) = (int_64)-1
	$2 = *(($0 + [8]))
	*($1 + [224]) = $2
	*($1 + [232]) = $2
	*($1 + [248]) = (int_64)0
	$4 = CALL db_lowerbound_i64($2, $2, (int_64)5304430358492331680, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$8 = ((int_64)$7 != (int_64)0)
	$9 = (($1 + [120]) + [32])
	$10 = (($1 + [80]) | [1])
	$4 = CALL $30(($1 + [224]), $4)
	$11 = (($1 + [120]) + [16])
	$12 = ($1 + [144])
	$13 = ($1 + [212])
	$14 = ($1 + [160])
	$15 = ($1 + [204])
	
.LOOP $label$6:
	$2 = *($4 + [24])
	CALL __multi3(($1 + [32]), $2, (int_64)$2 >> (int_64)63), $6, (int_64)$6 >> (int_64)63))
	$16 = *((($1 + [32]) + [8]))
	$2 = *($1 + [32])
	CALL eosio_assert(( (uint_64)($2 <= (int_64)4611686018427387904) ? ((int_64)$16 < (int_64)0) : (int_64)($16 == 0) ), [17794])
	CALL eosio_assert(( ((uint_64)$2 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$16 > (int_64)-1) : ((int_64)$16 == (int_64)-1) ), [17818])
	CALL eosio_assert($8, [17843])
	CALL eosio_assert((((int_64)$7 != (int_64)-1) | ((int_64)$2 != (int_64)-9223372036854775808)), [17858])
	$2 = ((int_64)$2 / (int_64)$7)
	$17 = *($4 + [8])
	$18 = ($17 & [1])
	if ( $18 ){ goto $label$10 }
	$19 = ($4 + [8])
	if ( ((uint_32)uint_32($17 >> [1]) >= (uint_32)[13]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$19 = ($4 + [8])
	if ( (*(($4 + [12])) <= [13]) ){ goto $label$8 }
	
.LABEL $label$9
	*((($1 + [168]) + [8])) = (int_64)3617214756542218240
	$16 = *($0)
	*($1 + [168]) = $16
	*((($1 + [120]) + [8])) = (int_64)-7515584006193881072
	*($11) = $2
	*($12) = $5
	*($1 + [120]) = $16
	CALL $160($9, $19)
	CALL $49(($1 + [304]), CALL $48(($1 + [184]), ($1 + [168]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($1 + [120])))
	$19 = *($1 + [304])
	CALL send_inline($19, (*($1 + [308]) - $19))
	$19 = *($1 + [304])
	if ( ($19 == 0) ){ goto $label$11 }
	*($1 + [308]) = $19
	CALL _ZdlPv($19)
	
.LABEL $label$11
	$19 = *($13)
	if ( ($19 == 0) ){ goto $label$12 }
	*((($1 + [184]) + [32])) = $19
	CALL _ZdlPv($19)
	
.LABEL $label$12
	$19 = *((($1 + [184]) + [16]))
	if ( ($19 == 0) ){ goto $label$13 }
	*($15) = $19
	CALL _ZdlPv($19)
	
.LABEL $label$13
	if ( ((*($9) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($14))
	goto $label$7 
	
.LABEL $label$8
	if ( $18 ){ goto $label$15 }
	$17 = uint_32($17 >> [1])
	$18 = ($19 + [1])
	goto $label$14 
	
.LABEL $label$15
	$17 = *(($4 + [12]))
	$18 = *(($4 + [16]))
	
.LABEL $label$14
	*($1 + [116]) = $17
	*($1 + [112]) = $18
	*($1 + [24]) = *($1 + [112])
	CALL $4(($1 + [120]), ($1 + [24]))
	$16 = *($0)
	if ( ((int_64)$16 == (int_64)*($1 + [120])) ){ goto $label$7 }
	*((($1 + [168]) + [8])) = (int_64)3617214756542218240
	*($1 + [168]) = $16
	$17 = *($19)
	if ( ($17 & [1]) ){ goto $label$17 }
	$17 = uint_32($17 >> [1])
	$19 = ($19 + [1])
	goto $label$16 
	
.LABEL $label$17
	$17 = *(($4 + [12]))
	$19 = *(($4 + [16]))
	
.LABEL $label$16
	*($1 + [100]) = $17
	*($1 + [96]) = $19
	*($1 + [16]) = *($1 + [96])
	CALL $4(($1 + [104]), ($1 + [16]))
	*(($17 = (($1 + [80]) + [8]))) = [0]
	*($1 + [80]) = (int_64)0
	$19 = CALL $198([17775])
	if ( ((uint_32)$19 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$19 >= (uint_32)[11]) ){ goto $label$20 }
	*($1 + [80]) = ($19 << [1])
	$18 = $10
	if ( $19 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$20 = (($19 + [16]) & [-16])
	$18 = CALL _Znwj($20)
	*($17) = $18
	*($1 + [80]) = ($20 | [1])
	*($1 + [84]) = $19
	
.LABEL $label$19
	CALL memcpy($18, [17775], $19)
	
.LABEL $label$18
	*(($18 + $19)) = [0]
	*((($1 + [120]) + [8])) = *($1 + [104])
	*($11) = $2
	*($12) = $5
	*($9) = *($1 + [80])
	*(($9 + [8])) = *($17)
	*($17) = [0]
	*($1 + [120]) = *($0)
	*($1 + [80]) = (int_64)0
	CALL $49(($1 + [304]), CALL $48(($1 + [184]), ($1 + [168]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($1 + [120])))
	$19 = *($1 + [304])
	CALL send_inline($19, (*($1 + [308]) - $19))
	$19 = *($1 + [304])
	if ( ($19 == 0) ){ goto $label$21 }
	*($1 + [308]) = $19
	CALL _ZdlPv($19)
	
.LABEL $label$21
	$19 = *($13)
	if ( ($19 == 0) ){ goto $label$22 }
	*((($1 + [184]) + [32])) = $19
	CALL _ZdlPv($19)
	
.LABEL $label$22
	$19 = *((($1 + [184]) + [16]))
	if ( ($19 == 0) ){ goto $label$23 }
	*($15) = $19
	CALL _ZdlPv($19)
	
.LABEL $label$23
	if ( ((*($9) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($14))
	
.LABEL $label$24
	if ( ((*($1 + [80]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($17))
	
.LABEL $label$7
	CALL eosio_assert([1], [17336])
	$4 = CALL db_next_i64(*($4 + [44]), ($1 + [120]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $30(($1 + [224]), $4)
	goto $label$6 
	
.LABEL $label$5
	*((($1 + [64]) + [8])) = [0]
	*($1 + [64]) = (int_64)0
	$4 = CALL $198([16703])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$27 }
	*($1 + [64]) = ($4 << [1])
	$19 = (($1 + [64]) | [1])
	if ( $4 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$9 = (($4 + [16]) & [-16])
	$19 = CALL _Znwj($9)
	*($1 + [64]) = ($9 | [1])
	*($1 + [72]) = $19
	*($1 + [68]) = $4
	
.LABEL $label$26
	CALL memcpy($19, [16703], $4)
	
.LABEL $label$25
	*(($19 + $4)) = [0]
	$4 = CALL $198([16686])
	if ( ($4 <= [8]) ){ goto $label$30 }
	CALL eosio_assert([0], [16808])
	goto $label$29 
	
.LABEL $label$30
	if ( ($4 == 0) ){ goto $label$28 }
	
.LABEL $label$29
	$2 = (int_64)0
	
.LOOP $label$31:
	$19 = *(($4 + [16685]))
	if ( ((($19 + [-65]) & [255]) <= [26]) ){ goto $label$32 }
	CALL eosio_assert([0], [16853])
	
.LABEL $label$32
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $19) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$31 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$2 
	
.LABEL $label$28
	$2 = (int_64)4
	goto $label$2 
	
.LABEL $label$4
	CALL $159(($1 + [80]))
	
.LABEL $label$3
	CALL $159(($1 + [64]))
	
.LABEL $label$2
	*($1 + [48]) = (int_64)0
	*($1 + [56]) = $2
	CALL eosio_assert([1], [16739])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$35:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$34 }
	$16 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$36 }
	$2 = $16
	$19 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$36
	$2 = $16
	
.LOOP $label$37:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$34 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$19 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $19 ){ goto $label$37 }
	$19 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	$19 = [0]
	
.LABEL $label$33
	CALL eosio_assert($19, [16788])
	*(($1 + [8])) = *((($1 + [48]) + [8]))
	*($1) = *($1 + [48])
	CALL $50($0, ($1 + [64]), $1, [1], [1])
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*($1 + [72]))
	
.LABEL $label$38
	$2 = *($0)
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [17584])
	CALL $51(($1 + [264]), $3, $2, ($1 + [120]))
	$9 = *($1 + [248])
	if ( ($9 == 0) ){ goto $label$39 }
	$17 = ($1 + [252])
	$4 = *($17)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$41 }
	
.LOOP $label$42:
	$4 = ($4 + [-24])
	$19 = *($4)
	*($4) = [0]
	if ( ($19 == 0) ){ goto $label$43 }
	if ( ((*($19 + [8]) & [1]) == 0) ){ goto $label$44 }
	CALL _ZdlPv(*(($19 + [16])))
	
.LABEL $label$44
	CALL _ZdlPv($19)
	
.LABEL $label$43
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$42 }
	$4 = *(($1 + [248]))
	goto $label$40 
	
.LABEL $label$41
	$4 = $9
	
.LABEL $label$40
	*($17) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$39
	CALL $41(($1 + [288]))
	$global$0 = ($1 + [320])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $201($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = [0]
	*($4 + [64]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	CALL $45(($4 + [48]), ($4 + [64]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4)
	$3 = *($8)
	*((($4 + [96]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [80])
	*($4 + [32]) = $0
	*($4 + [96]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$8 = CALL $160(($4 + [80]), ($4 + [64]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $160(($4 + [96]), $8)
	CALL void $3((int_32 $5), (int_32 $6))
	if ( (*($4 + [96]) & [1]) ){ goto $label$11 }
	if ( (*($4 + [80]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	
.LABEL $label$8
	$2 = [1]
	if ( (*($4 + [64]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $204($2)
	$2 = [1]
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [72])))
	$global$0 = ($4 + [112])
	return $2
	
.LABEL $label$5
	$global$0 = ($4 + [112])
	return $2
}

void .FUNC $11 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	CALL require_auth(*($0))
	CALL require_recipient((int_64)-4817609493215935456)
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $201($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = (($4 + [64]) + [16]))) = (int_64)0
	*(($4 + [96])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [56]) = ($2 + $5)
	*($4 + [48]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [17293])
	CALL memcpy(($4 + [64]), $2, [8])
	$6 = ($5 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [17293])
	CALL memcpy((($4 + [64]) + [8]), ($2 + [8]), [8])
	*($4 + [16]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [17293])
	CALL memcpy(($4 + [16]), ($2 + [16]), [8])
	*($3) = *($4 + [16])
	*($4 + [52]) = ($2 + [24])
	CALL $45(($4 + [48]), (($4 + [64]) + [24]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4)
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [16])
	CALL $46(($4 + [128]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $204($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return $2
}

void .FUNC $13 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$1 = ($global$0 - [560])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = CALL read_transaction([0], [0])
	$3 = CALL $201($2)
	CALL read_transaction($3, $2)
	CALL sha256($3, $2, ($1 + [512]))
	*(($1 + [504])) = [0]
	*($1 + [496]) = (int_64)0
	$2 = CALL $198([16703])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$5 }
	*($1 + [496]) = ($2 << [1])
	$3 = (($1 + [496]) | [1])
	if ( $2 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [496]) = ($4 | [1])
	*($1 + [504]) = $3
	*($1 + [500]) = $2
	
.LABEL $label$4
	CALL memcpy($3, [16703], $2)
	
.LABEL $label$3
	*(($3 + $2)) = [0]
	CALL $2(($1 + [512]), ($1 + [496]))
	$2 = *($1 + [496])
	$2 = ( *($1 + [500]) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ((uint_32)$2 > (uint_32)[5]) ){ goto $label$7 }
	$2 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	goto $label$6 
	
.LABEL $label$7
	$3 = CALL $161(($1 + [104]), ($1 + [496]), ($2 + [-6]), [-1], ($1 + [496]))
	$2 = CALL $172($3, [0], [10])
	if ( ((*($1 + [104]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$6
	*(($1 + [488])) = [0]
	*($1 + [472]) = (int_64)-1
	$5 = (int_64)0
	*($1 + [480]) = (int_64)0
	$6 = *($0 + [8])
	*($1 + [456]) = $6
	*($1 + [464]) = $6
	$3 = CALL db_lowerbound_i64($6, $6, (int_64)5304430020972773376, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	CALL $29(($1 + [456]), $3)
	*($1 + [108]) = [0]
	*($1 + [104]) = ($1 + [456])
	$6 = *(*(CALL $65(($1 + [104])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*(($3 = ($1 + [472]))) = $5
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [18170])
	$6 = *($3)
	*($1 + [448]) = $6
	$6 = ((uint_64)(CASTING int_64)(int_32 $2) % (uint_64)$6)
	*($1 + [440]) = $6
	$3 = *(($1 + [484]))
	$7 = *(($1 + [480]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$10 }
	
.LOOP $label$12:
	$2 = ($3 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$11 }
	$3 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($4 + [44]) == (int_32)($1 + [456])), [17883])
	goto $label$9 
	
.LABEL $label$10
	$4 = [0]
	$2 = CALL db_find_i64(*($1 + [456]), *(($1 + [464])), (int_64)5304430020972773376, $6)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$9 }
	$4 = CALL $29(($1 + [456]), $2)
	CALL eosio_assert(((int_32)*($4 + [44]) == (int_32)($1 + [456])), [17883])
	
.LABEL $label$9
	$8 = CALL $160(($1 + [424]), ($4 + [8]))
	$2 = CALL $160(($1 + [408]), $8)
	$5 = *(($4 + [32]))
	*((($1 + [392]) + [8])) = $5
	$6 = *($4 + [24])
	*((($1 + [56]) + [8])) = $5
	*($1 + [56]) = $6
	*($1 + [392]) = $6
	$9 = [0]
	CALL $50($0, $2, ($1 + [56]), [0], [0])
	if ( ((*($2) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$13
	*((($1 + [352]) + [32])) = [0]
	*($1 + [368]) = (int_64)-1
	$6 = *(($0 + [8]))
	*($1 + [352]) = $6
	*($1 + [360]) = $6
	*($1 + [376]) = (int_64)0
	$2 = CALL db_lowerbound_i64($6, $6, (int_64)4406680248264818688, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$14 }
	$9 = CALL $27(($1 + [352]), $2)
	
.LABEL $label$14
	*(($2 = (($1 + [336]) + [8]))) = *(($9 + [32]))
	*($1 + [336]) = *($9 + [24])
	*($1 + [328]) = (int_64)0
	*($1 + [320]) = (int_64)0
	if ( (CALL is_account((int_64)6138535371015881248) == 0) ){ goto $label$16 }
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)6138535371015881248) ){ goto $label$16 }
	*((($1 + [320]) + [8])) = *((($1 + [336]) + [8]))
	*($1 + [320]) = *($1 + [336])
	*($1 + [264]) = (int_64)3617214756542218240
	*($1 + [256]) = $6
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [320]) / (int_64)100)
	*($1 + [320]) = $6
	CALL eosio_assert([1], [17794])
	CALL eosio_assert([1], [17818])
	*($1 + [320]) = ((int_64)$6 << (int_64)1)
	*((($1 + [240]) + [8])) = [0]
	*($1 + [240]) = (int_64)0
	$3 = CALL $198([16690])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$19 }
	*($1 + [240]) = ($3 << [1])
	$4 = (($1 + [240]) | [1])
	if ( $3 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$7 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($7)
	*($1 + [240]) = ($7 | [1])
	*($1 + [248]) = $4
	*($1 + [244]) = $3
	
.LABEL $label$18
	CALL memcpy($4, [16690], $3)
	
.LABEL $label$17
	*(($4 + $3)) = [0]
	*(($1 + [128])) = *((($1 + [320]) + [8]))
	$3 = (($1 + [240]) + [8])
	*(($1 + [144])) = *($3)
	*($3) = [0]
	*($1 + [112]) = (int_64)6138535371015881248
	*($1 + [104]) = *($0)
	*($1 + [120]) = *($1 + [320])
	*($1 + [136]) = *($1 + [240])
	*($1 + [240]) = (int_64)0
	$3 = CALL $48(($1 + [272]), ($1 + [256]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($1 + [104]))
	CALL $49(($1 + [544]), $3)
	$4 = *($1 + [544])
	CALL send_inline($4, (*($1 + [548]) - $4))
	$4 = *($1 + [544])
	if ( ($4 == 0) ){ goto $label$20 }
	*($1 + [548]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$20
	$4 = *($3 + [28])
	if ( ($4 == 0) ){ goto $label$21 }
	*(($3 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$21
	$4 = *($3 + [16])
	if ( ($4 == 0) ){ goto $label$22 }
	*(($3 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$22
	if ( ((*(($1 + [136])) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($1 + [144])))
	
.LABEL $label$23
	if ( ((*($1 + [240]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($1 + [248])))
	
.LABEL $label$16
	*((($1 + [320]) + [8])) = *($2)
	*($1 + [320]) = *($1 + [336])
	$2 = ($2 & [1])
	$2 = *($1 + [424])
	$3 = ( *($8 + [4]) ? uint_32($2 >> [1]) : $2 )
	if ( ($3 <= [13]) ){ goto $label$26 }
	*($1 + [264]) = (int_64)3617214756542218240
	*($1 + [256]) = *($0)
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [320]) / (int_64)100)
	*($1 + [320]) = $6
	$6 = ((int_64)$6 * (int_64)40)
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [17794])
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [17818])
	*(($1 + [128])) = *(($1 + [328]))
	*($1 + [112]) = (int_64)-7515584006193881072
	*($1 + [120]) = $6
	*($1 + [320]) = $6
	*($1 + [104]) = *($0)
	CALL $160(($1 + [136]), $8)
	$2 = CALL $48(($1 + [272]), ($1 + [256]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($1 + [104]))
	CALL $49(($1 + [544]), $2)
	$3 = *($1 + [544])
	CALL send_inline($3, (*($1 + [548]) - $3))
	$3 = *($1 + [544])
	if ( ($3 == 0) ){ goto $label$27 }
	*($1 + [548]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$27
	$3 = *($2 + [28])
	if ( ($3 == 0) ){ goto $label$28 }
	*(($2 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$28
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$29 }
	*(($2 + [20])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$29
	if ( ((*($1 + [136]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($1 + [144])))
	goto $label$25 
	
.LABEL $label$26
	*($1 + [236]) = $3
	$3 = ($8 + [1])
	*($1 + [232]) = ( *($8 + [8]) ? $3 : $2 )
	*($1 + [48]) = *($1 + [232])
	$2 = CALL $4(($1 + [104]), ($1 + [48]))
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)*($2)) ){ goto $label$25 }
	*($1 + [264]) = (int_64)3617214756542218240
	*($1 + [256]) = $6
	$2 = *($1 + [424])
	$4 = ($2 & [1])
	*($1 + [224]) = ( *(($8 + [8])) ? $3 : $4 )
	*($1 + [228]) = ( *(($8 + [4])) ? uint_32($2 >> [1]) : $4 )
	*($1 + [40]) = *($1 + [224])
	$4 = CALL $4(($1 + [168]), ($1 + [40]))
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [320]) / (int_64)100)
	*($1 + [320]) = $6
	$6 = ((int_64)$6 * (int_64)40)
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [17794])
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [17818])
	*($1 + [320]) = $6
	*((($1 + [240]) + [8])) = [0]
	*($1 + [240]) = (int_64)0
	$2 = CALL $198([18361])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$32 }
	*($1 + [240]) = ($2 << [1])
	$3 = (($1 + [240]) | [1])
	if ( $2 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$7 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($7)
	*($1 + [240]) = ($7 | [1])
	*($1 + [248]) = $3
	*($1 + [244]) = $2
	
.LABEL $label$31
	CALL memcpy($3, [18361], $2)
	
.LABEL $label$30
	*(($3 + $2)) = [0]
	*(($1 + [128])) = *((($1 + [320]) + [8]))
	$2 = (($1 + [240]) + [8])
	*(($1 + [144])) = *($2)
	*($2) = [0]
	*($1 + [104]) = *($0)
	*($1 + [112]) = *($4)
	*($1 + [120]) = *($1 + [320])
	*($1 + [136]) = *($1 + [240])
	*($1 + [240]) = (int_64)0
	$2 = CALL $48(($1 + [272]), ($1 + [256]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($1 + [104]))
	CALL $49(($1 + [544]), $2)
	$3 = *($1 + [544])
	CALL send_inline($3, (*($1 + [548]) - $3))
	$3 = *($1 + [544])
	if ( ($3 == 0) ){ goto $label$33 }
	*($1 + [548]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$33
	$3 = *($2 + [28])
	if ( ($3 == 0) ){ goto $label$34 }
	*(($2 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$34
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$35 }
	*(($2 + [20])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$35
	if ( ((*(($1 + [136])) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($1 + [144])))
	
.LABEL $label$36
	if ( ((*($1 + [240]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($1 + [248])))
	
.LABEL $label$25
	$6 = *($0)
	*($1 + [108]) = ($1 + [448])
	*($1 + [104]) = ($1 + [440])
	*($1 + [112]) = ($1 + [512])
	*($1 + [120]) = ($1 + [320])
	*($1 + [116]) = $8
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [17584])
	CALL $66(($1 + [352]), $9, $6, ($1 + [104]))
	*($1 + [248]) = [0]
	*($1 + [240]) = (int_64)0
	$2 = CALL $160(($1 + [208]), $8)
	CALL $67($0, $2, ($1 + [240]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$37
	$2 = (*($1 + [244]) - *($1 + [240]))
	$11 = ((int_32)$2 / (int_32)[12])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$42 }
	$7 = (($1 + [104]) + [32])
	$12 = (($1 + [104]) + [16])
	$13 = (($1 + [168]) | [1])
	$14 = ($1 + [300])
	$15 = ($1 + [144])
	$16 = ($1 + [292])
	$3 = [0]
	$2 = [0]
	
.LOOP $label$43:
	*(($17 = (($1 + [320]) + [8]))) = *((($1 + [336]) + [8]))
	*($1 + [320]) = *($1 + [336])
	$6 = (int_64)0
	$4 = ($2 & [2147483647])
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$44 }
	goto $label$51 
	
.LABEL $label$51
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [320]) / (int_64)100)
	*($1 + [320]) = $6
	$6 = ((int_64)$6 * (int_64)5)
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [17794])
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [17818])
	goto $label$44 
	
.LABEL $label$50
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [320]) / (int_64)100)
	goto $label$45 
	
.LABEL $label$49
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [320]) / (int_64)100)
	goto $label$45 
	
.LABEL $label$48
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [320]) / (int_64)100)
	goto $label$45 
	
.LABEL $label$47
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [320]) / (int_64)100)
	goto $label$45 
	
.LABEL $label$46
	CALL eosio_assert([1], [17843])
	CALL eosio_assert([1], [17858])
	$6 = ((int_64)*($1 + [320]) / (int_64)100)
	
.LABEL $label$45
	*($1 + [320]) = $6
	CALL eosio_assert([1], [17794])
	CALL eosio_assert([1], [17818])
	
.LABEL $label$44
	*($1 + [320]) = $6
	$4 = *($1 + [240])
	if ( ((uint_32)((int_32)(*($1 + [244]) - $4) / (int_32)[12]) <= (uint_32)$2) ){ goto $label$54 }
	$4 = ($4 + $3)
	$18 = *($4)
	$19 = ($18 & [1])
	if ( $19 ){ goto $label$56 }
	if ( ((uint_32)uint_32($18 >> [1]) >= (uint_32)[13]) ){ goto $label$55 }
	goto $label$53 
	
.LABEL $label$56
	if ( (*(($4 + [4])) <= [13]) ){ goto $label$53 }
	
.LABEL $label$55
	*((($1 + [256]) + [8])) = (int_64)3617214756542218240
	$6 = *($0)
	*($1 + [256]) = $6
	*((($1 + [104]) + [8])) = (int_64)-7515584006193881072
	*($12) = *($1 + [320])
	*(($12 + [8])) = *($17)
	*($1 + [104]) = $6
	CALL $160($7, $4)
	CALL $49(($1 + [544]), CALL $48(($1 + [272]), ($1 + [256]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($1 + [104])))
	$4 = *($1 + [544])
	CALL send_inline($4, (*($1 + [548]) - $4))
	$4 = *($1 + [544])
	if ( ($4 == 0) ){ goto $label$57 }
	*($1 + [548]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$57
	$4 = *($14)
	if ( ($4 == 0) ){ goto $label$58 }
	*((($1 + [272]) + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$58
	$4 = *((($1 + [272]) + [16]))
	if ( ($4 == 0) ){ goto $label$59 }
	*($16) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$59
	if ( ((*($7) & [1]) == 0) ){ goto $label$52 }
	CALL _ZdlPv(*($15))
	$3 = ($3 + [12])
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)$11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$54
	CALL $180(($1 + [240]))
	
.LABEL $label$53
	if ( $19 ){ goto $label$61 }
	$18 = uint_32($18 >> [1])
	$4 = ($4 + [1])
	goto $label$60 
	
.LABEL $label$61
	$18 = *(($4 + [4]))
	$4 = *(($4 + [8]))
	
.LABEL $label$60
	*($1 + [204]) = $18
	*($1 + [200]) = $4
	*($1 + [32]) = *($1 + [200])
	CALL $4(($1 + [104]), ($1 + [32]))
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)*($1 + [104])) ){ goto $label$52 }
	*((($1 + [256]) + [8])) = (int_64)3617214756542218240
	*($1 + [256]) = $6
	$4 = *($1 + [240])
	if ( ((uint_32)((int_32)(*($1 + [244]) - $4) / (int_32)[12]) <= (uint_32)$2) ){ goto $label$41 }
	$4 = ($4 + $3)
	$18 = *($4)
	if ( ($18 & [1]) ){ goto $label$63 }
	$18 = uint_32($18 >> [1])
	$4 = ($4 + [1])
	goto $label$62 
	
.LABEL $label$63
	$18 = *(($4 + [4]))
	$4 = *(($4 + [8]))
	
.LABEL $label$62
	*($1 + [188]) = $18
	*($1 + [184]) = $4
	*($1 + [24]) = *($1 + [184])
	CALL $4(($1 + [192]), ($1 + [24]))
	*(($18 = (($1 + [168]) + [8]))) = [0]
	*($1 + [168]) = (int_64)0
	$4 = CALL $198([18393])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$40 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$66 }
	*($1 + [168]) = ($4 << [1])
	$19 = $13
	if ( $4 ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$66
	$20 = (($4 + [16]) & [-16])
	$19 = CALL _Znwj($20)
	*($18) = $19
	*($1 + [168]) = ($20 | [1])
	*($1 + [172]) = $4
	
.LABEL $label$65
	CALL memcpy($19, [18393], $4)
	
.LABEL $label$64
	*(($19 + $4)) = [0]
	*((($1 + [104]) + [8])) = *($1 + [192])
	*($12) = *($1 + [320])
	*(($12 + [8])) = *($17)
	*($7) = *($1 + [168])
	*(($7 + [8])) = *($18)
	*($18) = [0]
	*($1 + [104]) = *($0)
	*($1 + [168]) = (int_64)0
	CALL $49(($1 + [544]), CALL $48(($1 + [272]), ($1 + [256]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($1 + [104])))
	$4 = *($1 + [544])
	CALL send_inline($4, (*($1 + [548]) - $4))
	$4 = *($1 + [544])
	if ( ($4 == 0) ){ goto $label$67 }
	*($1 + [548]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$67
	$4 = *($14)
	if ( ($4 == 0) ){ goto $label$68 }
	*((($1 + [272]) + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$68
	$4 = *((($1 + [272]) + [16]))
	if ( ($4 == 0) ){ goto $label$69 }
	*($16) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$69
	if ( ((*($7) & [1]) == 0) ){ goto $label$70 }
	CALL _ZdlPv(*($15))
	
.LABEL $label$70
	if ( ((*($1 + [168]) & [1]) == 0) ){ goto $label$52 }
	CALL _ZdlPv(*($18))
	
.LABEL $label$52
	$3 = ($3 + [12])
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)$11) ){ goto $label$43 }
	
.LABEL $label$42
	$6 = *($0)
	*($1 + [112]) = $0
	*($1 + [108]) = ($1 + [336])
	*($1 + [104]) = ($1 + [320])
	CALL eosio_assert($10, [17584])
	CALL $68(($1 + [352]), $9, $6, ($1 + [104]))
	$6 = *($0)
	*($1 + [108]) = ($1 + [336])
	*($1 + [104]) = ($1 + [320])
	CALL eosio_assert($10, [17584])
	CALL $69(($1 + [352]), $9, $6, ($1 + [104]))
	$6 = *($0)
	*($1 + [108]) = ($1 + [336])
	*($1 + [104]) = ($1 + [320])
	CALL eosio_assert($10, [17584])
	CALL $70(($1 + [352]), $9, $6, ($1 + [104]))
	$6 = CALL current_time()
	*(($1 + [132])) = (int_64)0
	*(($1 + [148])) = (int_64)0
	*(($1 + [156])) = (int_64)0
	*($1 + [116]) = [0]
	*($1 + [120]) = [0]
	*($1 + [124 align=4]) = (int_64)0
	*($1 + [140 align=4]) = (int_64)0
	*($1 + [104]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	*($1 + [280]) = (int_64)3617214756542218240
	*($1 + [272]) = *($0)
	*($1 + [192]) = (int_64)-4373711020246433792
	*(($1 + [176])) = [0]
	*($1 + [168]) = (int_64)0
	$2 = CALL $198([16690])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$39 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$73 }
	*($1 + [168]) = ($2 << [1])
	$3 = (($1 + [168]) | [1])
	if ( $2 ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$73
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [168]) = ($4 | [1])
	*($1 + [176]) = $3
	*($1 + [172]) = $2
	
.LABEL $label$72
	CALL memcpy($3, [16690], $2)
	
.LABEL $label$71
	*(($3 + $2)) = [0]
	$2 = (($1 + [168]) + [8])
	*((($1 + [544]) + [8])) = *($2)
	*($2) = [0]
	*($1 + [544]) = *($1 + [168])
	*($1 + [168]) = (int_64)0
	$3 = *(($1 + [144]))
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [148]))) ){ goto $label$78 }
	$6 = *($0)
	*($3 + [8]) = *($1 + [192])
	*($3) = $6
	*($3 + [16 align=4]) = (int_64)0
	*(($4 = ($3 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($3 + [16]) = $2
	$7 = ($2 + [16])
	*($4) = $7
	*(($2 + [8])) = *((($1 + [272]) + [8]))
	*($2) = *($1 + [272])
	*(($3 + [20])) = $7
	*($3 + [28 align=4]) = (int_64)0
	*(($3 + [36])) = [0]
	$2 = *($1 + [544])
	$2 = ( *($1 + [548]) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$6 = (CASTING uint_64)(uint_32 $2)
	$4 = ($3 + [28])
	
.LOOP $label$79:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$79 }
	if ( ($2 == 0) ){ goto $label$77 }
	CALL $58($4, $2)
	$4 = *(($3 + [32]))
	$2 = *(($3 + [28]))
	goto $label$76 
	
.LABEL $label$78
	CALL $59(($1 + [140]), ($1 + [272]), $0, ($1 + [192]), ($1 + [544]))
	$2 = [1]
	if ( (*($1 + [544]) & [1]) ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$77
	$4 = [0]
	$2 = [0]
	
.LABEL $label$76
	*($1 + [260]) = $2
	*($1 + [256]) = $2
	*($1 + [264]) = $4
	CALL $60(($1 + [256]), ($1 + [544]))
	*(($2 = (($1 + [104]) + [40]))) = (*($2) + [40])
	$2 = [1]
	if ( ((*($1 + [544]) & [1]) == 0) ){ goto $label$74 }
	
.LABEL $label$75
	CALL _ZdlPv(*($1 + [552]))
	
.LABEL $label$74
	if ( ((*($1 + [168]) & $2) == 0) ){ goto $label$80 }
	CALL _ZdlPv(*(($1 + [176])))
	
.LABEL $label$80
	*((($1 + [104]) + [20])) = [25200]
	$6 = CALL current_time()
	*($1 + [280]) = (int_64)0
	*($1 + [272]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = *($0)
	CALL $61(($1 + [256]), ($1 + [104]))
	$2 = *($1 + [256])
	CALL send_deferred(($1 + [272]), $6, $2, (*($1 + [260]) - $2), [1])
	$2 = *($1 + [256])
	if ( ($2 == 0) ){ goto $label$81 }
	*($1 + [260]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$81
	*(($3 = ($1 + [296]))) = [0]
	*($1 + [280]) = (int_64)-4157500704769003728
	*($1 + [288]) = (int_64)0
	$6 = *($0)
	*($1 + [272]) = $6
	*(($2 = CALL _Znwj([16]))) = $6
	*($2 + [8]) = (int_64)3617214756542218240
	*(($1 + [308])) = [0]
	$4 = ($2 + [16])
	*($3) = $4
	*((($1 + [272]) + [20])) = $4
	*($1 + [288]) = $2
	*($1 + [300 align=4]) = (int_64)0
	CALL $49(($1 + [256]), ($1 + [272]))
	$2 = *($1 + [256])
	CALL send_inline($2, (*($1 + [260]) - $2))
	$2 = *($1 + [256])
	if ( ($2 == 0) ){ goto $label$82 }
	*($1 + [260]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$82
	$2 = *(($1 + [300]))
	if ( ($2 == 0) ){ goto $label$83 }
	*(($1 + [304])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$83
	$2 = *($1 + [288])
	if ( ($2 == 0) ){ goto $label$84 }
	*(($1 + [292])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$84
	*(($1 + [96])) = [0]
	*($1 + [88]) = (int_64)0
	$2 = CALL $198([16703])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$38 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$87 }
	*($1 + [88]) = ($2 << [1])
	$3 = (($1 + [88]) | [1])
	if ( $2 ){ goto $label$86 }
	goto $label$85 
	
.LABEL $label$87
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [88]) = ($4 | [1])
	*($1 + [96]) = $3
	*($1 + [92]) = $2
	
.LABEL $label$86
	CALL memcpy($3, [16703], $2)
	
.LABEL $label$85
	*(($3 + $2)) = [0]
	$2 = CALL $198([16686])
	if ( ($2 <= [8]) ){ goto $label$90 }
	CALL eosio_assert([0], [16808])
	goto $label$89 
	
.LABEL $label$90
	if ( ($2 == 0) ){ goto $label$88 }
	
.LABEL $label$89
	$6 = (int_64)0
	
.LOOP $label$91:
	$3 = *(($2 + [16685]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$92 }
	CALL eosio_assert([0], [16853])
	
.LABEL $label$92
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$91 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$88
	$6 = (int_64)4
	goto $label$1 
	
.LABEL $label$41
	CALL $180(($1 + [240]))
	
.LABEL $label$40
	CALL $159(($1 + [168]))
	
.LABEL $label$39
	CALL $159(($1 + [168]))
	
.LABEL $label$38
	CALL $159(($1 + [88]))
	
.LABEL $label$24
	CALL $159(($1 + [240]))
	
.LABEL $label$15
	CALL $159(($1 + [240]))
	
.LABEL $label$2
	CALL $159(($1 + [496]))
	
.LABEL $label$1
	*($1 + [72]) = (int_64)0
	*($1 + [80]) = $6
	CALL eosio_assert([1], [16739])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$95:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$94 }
	$5 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$96 }
	$6 = $5
	$3 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$95 }
	goto $label$93 
	
.LABEL $label$96
	$6 = $5
	
.LOOP $label$97:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$94 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$4 = ($2 + [1])
	$2 = $4
	if ( $3 ){ goto $label$97 }
	$3 = [1]
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$95 }
	goto $label$93 
	
.LABEL $label$94
	$3 = [0]
	
.LABEL $label$93
	CALL eosio_assert($3, [16788])
	*((($1 + [8]) + [8])) = *((($1 + [72]) + [8]))
	*($1 + [8]) = *($1 + [72])
	CALL $71($0, ($1 + [88]), ($1 + [8]), [1])
	if ( ((*($1 + [88]) & [1]) == 0) ){ goto $label$98 }
	CALL _ZdlPv(*($1 + [96]))
	
.LABEL $label$98
	CALL $64(($1 + [104]))
	$4 = *($1 + [240])
	if ( ($4 == 0) ){ goto $label$99 }
	$3 = *($1 + [244])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$101 }
	
.LOOP $label$102:
	$2 = ($3 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$103 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$103
	$3 = $2
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$102 }
	$2 = *($1 + [240])
	goto $label$100 
	
.LABEL $label$101
	$2 = $4
	
.LABEL $label$100
	*($1 + [244]) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$99
	CALL $41(($1 + [376]))
	if ( ((*($1 + [424]) & [1]) == 0) ){ goto $label$104 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$104
	$4 = *($1 + [480])
	if ( ($4 == 0) ){ goto $label$105 }
	$0 = ($1 + [484])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$107 }
	
.LOOP $label$108:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$109 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$110 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$110
	CALL _ZdlPv($3)
	
.LABEL $label$109
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$108 }
	$2 = *(($1 + [480]))
	goto $label$106 
	
.LABEL $label$107
	$2 = $4
	
.LABEL $label$106
	*($0) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$105
	if ( ((*($1 + [496]) & [1]) == 0) ){ goto $label$111 }
	CALL _ZdlPv(*($1 + [504]))
	
.LABEL $label$111
	$global$0 = ($1 + [560])
	$4
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $185 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [13] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $187($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $187($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $187($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $187($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19056]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $187($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $187($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $187($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL require_auth(*($0))
	*($3 + [200]) = (int_64)0
	$4 = *($1)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$4 }
	if ( ((uint_32)uint_32($4 >> [1]) >= (uint_32)[13]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($1 + [4]) <= [13]) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = CALL $160(($3 + [184]), $1)
	$6 = CALL $3($4)
	*($3 + [200]) = $6
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($4 + [8]))
	$6 = *($3 + [200])
	goto $label$1 
	
.LABEL $label$2
	if ( $5 ){ goto $label$6 }
	$4 = uint_32($4 >> [1])
	$5 = ($1 + [1])
	goto $label$5 
	
.LABEL $label$6
	$4 = *($1 + [4])
	$5 = *($1 + [8])
	
.LABEL $label$5
	*($3 + [180]) = $4
	*($3 + [176]) = $5
	*($3) = *($3 + [176])
	$6 = *(CALL $4(($3 + [136]), $3))
	*($3 + [200]) = $6
	
.LABEL $label$1
	*(($3 + [168])) = [0]
	*($3 + [152]) = (int_64)-1
	*($3 + [160]) = (int_64)0
	$7 = *($0 + [8])
	*($3 + [136]) = $7
	*($3 + [144]) = $7
	$4 = CALL db_find_i64($7, $7, (int_64)-4998313087829278720, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*(CALL $25(($3 + [136]), $4) + [32]) == (int_32)($3 + [136])), [17883])
	$2 = *($3 + [160])
	if ( $2 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$4 = *($1)
	if ( ($4 & [1]) ){ goto $label$19 }
	if ( ((uint_32)uint_32($4 >> [1]) >= (uint_32)[13]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	if ( (*($1 + [4]) <= [13]) ){ goto $label$17 }
	
.LABEL $label$18
	*($3 + [88]) = (int_64)3617214756542218240
	$7 = *($0)
	*($3 + [80]) = $7
	*(($3 + [56])) = *([0] + [8216])
	*($3 + [40]) = (int_64)-7515584006193881072
	*($3 + [48]) = *([0] + [8208])
	CALL $160(($3 + [64]), $1)
	$4 = CALL $81(($3 + [96]), ($3 + [80]), $7, (int_64)8516769789752901632, ($3 + [40]))
	CALL $49(($3 + [208]), $4)
	$5 = *($3 + [208])
	CALL send_inline($5, (*($3 + [212]) - $5))
	$5 = *($3 + [208])
	if ( ($5 == 0) ){ goto $label$20 }
	*($3 + [212]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$20
	$5 = *($4 + [28])
	if ( ($5 == 0) ){ goto $label$21 }
	*(($4 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$21
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$22 }
	*(($4 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$22
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($3 + [72])))
	$4 = [1]
	$5 = *($2)
	if ( (($5 & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	*($3 + [88]) = (int_64)3617214756542218240
	$7 = *($0)
	*($3 + [80]) = $7
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	$4 = CALL $198([18622])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$25 }
	*($3 + [24]) = ($4 << [1])
	$5 = (($3 + [24]) | [1])
	if ( $4 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$8 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($3 + [24]) = ($8 | [1])
	*($3 + [32]) = $5
	*($3 + [28]) = $4
	
.LABEL $label$24
	CALL memcpy($5, [18622], $4)
	
.LABEL $label$23
	*(($5 + $4)) = [0]
	*(($3 + [56])) = *([0] + [8216])
	$4 = ($3 + [32])
	*(($3 + [72])) = *($4)
	*($4) = [0]
	*($3 + [40]) = *($3 + [200])
	*($3 + [48]) = *([0] + [8208])
	*($3 + [64]) = *($3 + [24])
	*($3 + [24]) = (int_64)0
	$4 = CALL $81(($3 + [96]), ($3 + [80]), $7, (int_64)8516769789752901632, ($3 + [40]))
	CALL $49(($3 + [208]), $4)
	$5 = *($3 + [208])
	CALL send_inline($5, (*($3 + [212]) - $5))
	$5 = *($3 + [208])
	if ( ($5 == 0) ){ goto $label$26 }
	*($3 + [212]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$26
	$5 = *($4 + [28])
	if ( ($5 == 0) ){ goto $label$27 }
	*(($4 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$27
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$28 }
	*(($4 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$28
	if ( ((*(($3 + [64])) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$29
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$16
	$4 = [1]
	$5 = *($2)
	if ( ($5 & [1]) ){ goto $label$14 }
	
.LABEL $label$15
	if ( ((uint_32)uint_32($5 >> $4) >= (uint_32)[13]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	if ( (*($2 + [4]) <= [13]) ){ goto $label$11 }
	
.LABEL $label$13
	*($3 + [88]) = (int_64)3617214756542218240
	$7 = *($0)
	*($3 + [80]) = $7
	*(($3 + [56])) = *([0] + [8200])
	*($3 + [40]) = (int_64)-7515584006193881072
	*($3 + [48]) = *([0] + [8192])
	CALL $160(($3 + [64]), $2)
	$4 = CALL $81(($3 + [96]), ($3 + [80]), $7, (int_64)8516769789752901632, ($3 + [40]))
	CALL $49(($3 + [208]), $4)
	$5 = *($3 + [208])
	CALL send_inline($5, (*($3 + [212]) - $5))
	$5 = *($3 + [208])
	if ( ($5 == 0) ){ goto $label$30 }
	*($3 + [212]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$30
	$5 = *($4 + [28])
	if ( ($5 == 0) ){ goto $label$31 }
	*(($4 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$31
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$32 }
	*(($4 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$32
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [72])))
	goto $label$10 
	
.LABEL $label$12
	CALL $159(($3 + [24]))
	
.LABEL $label$11
	*($3 + [88]) = (int_64)3617214756542218240
	$7 = *($0)
	*($3 + [80]) = $7
	$8 = CALL $160(($3 + [8]), $2)
	$6 = CALL $3($8)
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	$4 = CALL $198([18653])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$35 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$38 }
	*($3 + [24]) = ($4 << [1])
	$5 = (($3 + [24]) | [1])
	if ( $4 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$9 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($3 + [24]) = ($9 | [1])
	*($3 + [32]) = $5
	*($3 + [28]) = $4
	
.LABEL $label$37
	CALL memcpy($5, [18653], $4)
	
.LABEL $label$36
	*(($5 + $4)) = [0]
	*(($3 + [56])) = *([0] + [8200])
	$4 = ($3 + [32])
	*(($3 + [72])) = *($4)
	*($4) = [0]
	*($3 + [40]) = $6
	*($3 + [48]) = *([0] + [8192])
	*($3 + [64]) = *($3 + [24])
	*($3 + [24]) = (int_64)0
	$4 = CALL $81(($3 + [96]), ($3 + [80]), $7, (int_64)8516769789752901632, ($3 + [40]))
	CALL $49(($3 + [208]), $4)
	$5 = *($3 + [208])
	CALL send_inline($5, (*($3 + [212]) - $5))
	$5 = *($3 + [208])
	if ( ($5 == 0) ){ goto $label$39 }
	*($3 + [212]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$39
	$5 = *($4 + [28])
	if ( ($5 == 0) ){ goto $label$40 }
	*(($4 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$40
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$41 }
	*(($4 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$41
	if ( (*(($3 + [64])) & [1]) ){ goto $label$43 }
	if ( (*($3 + [24]) & [1]) ){ goto $label$42 }
	goto $label$34 
	
.LABEL $label$43
	CALL _ZdlPv(*(($3 + [72])))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$34 }
	
.LABEL $label$42
	CALL _ZdlPv(*(($3 + [32])))
	if ( (*($8) & [1]) ){ goto $label$33 }
	goto $label$10 
	
.LABEL $label$35
	CALL $159(($3 + [24]))
	
.LABEL $label$34
	if ( ((*($8) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$33
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$10
	$7 = *($0)
	*($3 + [100]) = $1
	*($3 + [104]) = $2
	*($3 + [96]) = ($3 + [200])
	CALL $82(($3 + [40]), ($3 + [136]), $7, ($3 + [96]))
	$2 = *($3 + [160])
	if ( ($2 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$4 = (($3 + [136]) + [28])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$45 }
	
.LOOP $label$46:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$47 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$48
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$49 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$49
	CALL _ZdlPv($1)
	
.LABEL $label$47
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$46 }
	$1 = *(($3 + [160]))
	goto $label$44 
	
.LABEL $label$45
	$1 = $2
	
.LABEL $label$44
	*($4) = $2
	CALL _ZdlPv($1)
	$global$0 = ($3 + [224])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [224])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [128])
	$global$0 = $3
	*(($4 = $3) + [88]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $201($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*(($4 + [80])) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [52]) = $3
	*($4 + [48]) = $3
	*($4 + [56]) = ($3 + $2)
	CALL $45(($4 + [48]), ($4 + [64]))
	CALL $45(($4 + [48]), ($4 + [76]))
	*(($5 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [96]) + [8]))) = *($5)
	*($4 + [96]) = *($4)
	$5 = *($6)
	*((($4 + [112]) + [8])) = $5
	*(($4 + [40])) = $5
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [96])
	*($4 + [32]) = $0
	*($4 + [112]) = $0
	*($4 + [116]) = ($4 + [88])
	*($4 + [112]) = ($4 + [16])
	CALL $80(($4 + [112]), ($4 + [64]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$9 }
	$3 = [1]
	if ( (*($4 + [76]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $204($3)
	$3 = [1]
	if ( ((*($4 + [76]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [84])))
	if ( (*($4 + [64]) & $3) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((*($4 + [64]) & $3) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [72])))
	
.LABEL $label$5
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $184 (int_32 $0)
{
}

int_32 .FUNC $187 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $186 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

void .FUNC $180 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $60(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $117 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	$6 = ($1 + [24])
	$7 = *($3 + [4])
	$8 = ((int_64)*($7 + [8]) == (int_64)*(($1 + [32])))
	$9 = *($1)
	if ( (*(*($3)) == 0) ){ goto $label$2 }
	CALL eosio_assert($8, [17934])
	$10 = ((int_64)*($6) + (int_64)*($7))
	*($6) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [17977])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [17996])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert($8, [18014])
	$10 = (int_64)
	*($6) = $10(*($6) - *($7)))
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [18062])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [18084])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$9 == (int_64)*($1)), [17716])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [24])
	$10 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [8])
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	if ( ($3 <= [513]) ){ goto $label$5 }
	$4 = CALL $201($3)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [17578])
	CALL memcpy($4, $1, [8])
	*($5 + [12]) = ($4 + [8])
	CALL $60(($5 + [8]), $7)
	CALL eosio_assert(((int_32)(*($5 + [16]) - *($5 + [12])) > (int_32)[7]), [17578])
	CALL memcpy(*($5 + [12]), $6, [8])
	$6 = (*($5 + [12]) + [8])
	*($5 + [12]) = $6
	*($5 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($5 + [16]) - $6) > (int_32)[7]), [17578])
	CALL memcpy(*($5 + [12]), ($5 + [24]), [8])
	*($5 + [12]) = (*($5 + [12]) + [8])
	CALL db_update_i64(*($1 + [44]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$9 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $204($4)
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [32])
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	*($2) = *($1)
	*($2 + [12]) = ($3 + [8])
	*($2 + [8]) = $3
	*($2 + [16]) = ($3 + [16])
	*($2 + [20]) = ($3 + [48])
	*($2 + [24]) = ($3 + [64])
	*($2 + [28]) = ($3 + [80])
	CALL $115(($2 + [8]), $2)
	$3 = *($0 + [4])
	*($2) = *($1)
	*($2 + [12]) = ($3 + [8])
	*($2 + [8]) = $3
	*($2 + [16]) = ($3 + [16])
	*($2 + [20]) = ($3 + [48])
	*($2 + [24]) = ($3 + [64])
	*($2 + [28]) = ($3 + [80])
	CALL $115(($2 + [8]), $2)
	$3 = *($0 + [8])
	*($2) = *($1)
	*($2 + [12]) = ($3 + [8])
	*($2 + [8]) = $3
	*($2 + [16]) = ($3 + [16])
	*($2 + [20]) = ($3 + [48])
	*($2 + [24]) = ($3 + [64])
	*($2 + [28]) = ($3 + [80])
	CALL $115(($2 + [8]), $2)
	$3 = *($0 + [12])
	*($2) = *($1)
	*($2 + [12]) = ($3 + [8])
	*($2 + [8]) = $3
	*($2 + [16]) = ($3 + [16])
	*($2 + [20]) = ($3 + [48])
	*($2 + [24]) = ($3 + [64])
	*($2 + [28]) = ($3 + [80])
	CALL $115(($2 + [8]), $2)
	$3 = *($0 + [16])
	*($2) = *($1)
	*($2 + [12]) = ($3 + [8])
	*($2 + [8]) = $3
	*($2 + [16]) = ($3 + [16])
	*($2 + [20]) = ($3 + [48])
	*($2 + [24]) = ($3 + [64])
	*($2 + [28]) = ($3 + [80])
	CALL $115(($2 + [8]), $2)
	$global$0 = ($2 + [32])
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [17578])
	CALL memcpy(*($4 + [4]), $3, [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	CALL $60(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [17578])
	CALL memcpy(*($4 + [4]), $0, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [48])
	*(($2 = *($1))) = $1
	$4 = *($3 + [48])
	$3 = *($0)
	$5 = (CASTING uint_64)(uint_32 ( *(($3 + [52])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *(($3 + [48]))
	$3 = ( *(($3 + [52])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$1 = ($1 + [68])
	*($2) = $1
	$4 = *($3 + [48])
	$3 = *($0 + [4])
	$5 = (CASTING uint_64)(uint_32 ( *(($3 + [52])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *(($3 + [48]))
	$3 = ( *(($3 + [52])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$1 = ($1 + [68])
	*($2) = $1
	$4 = *($3 + [48])
	$3 = *($0 + [8])
	$5 = (CASTING uint_64)(uint_32 ( *(($3 + [52])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$3 = *(($3 + [48]))
	$3 = ( *(($3 + [52])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$6
	$1 = ($1 + [68])
	*($2) = $1
	$4 = *($3 + [48])
	$3 = *($0 + [12])
	$5 = (CASTING uint_64)(uint_32 ( *(($3 + [52])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($2) = $1
	$3 = *(($3 + [48]))
	$3 = ( *(($3 + [52])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$8 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$8
	$1 = ($1 + [68])
	*($2) = $1
	$3 = *($0 + [48])
	$0 = *($0 + [16])
	$5 = (CASTING uint_64)(uint_32 ( *(($0 + [52])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$9:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$9 }
	*($2) = $1
	$0 = *(($0 + [48]))
	$0 = ( *(($0 + [52])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$10 }
	$1 = ($0 + $1)
	*($2) = $1
	
.LABEL $label$10
	*($2) = ($1 + [20])
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17578])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [32])
	*($2) = *($1)
	*($2 + [12]) = ($0 + [96])
	*($2 + [8]) = $0
	*($2 + [16]) = ($0 + [192])
	*($2 + [20]) = ($0 + [288])
	*($2 + [24]) = ($0 + [384])
	CALL $114(($2 + [8]), $2)
	$global$0 = ($2 + [32])
}

int_32 .FUNC $110 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0) = (int_64)0
	*($0 + [8]) = *(*(*($2 + [4])))
	$1 = *($2)
	CALL eosio_assert([1], [17578])
	CALL memcpy($3, $0, [8])
	*($3 + [15]) = *($0 + [8])
	CALL eosio_assert([1], [17578])
	CALL memcpy(($3 | [8]), ($3 + [15]), [1])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-4157493845350678528, *(*($2 + [8])), $4, $3, [9])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($1) = (int_64)0
	$3 = *($0)
	$4 = *($0 + [4])
	$5 = *($4)
	*($1 + [8]) = *($5)
	*(($1 + [16])) = *(($5 + [8]))
	$5 = *($4)
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	$5 = *($4)
	*($1 + [40]) = *($5)
	*(($1 + [48])) = *(($5 + [8]))
	$5 = *($4)
	*($1 + [56]) = *($5)
	*(($1 + [64])) = *(($5 + [8]))
	$5 = *($4)
	*($1 + [72]) = *($5)
	*(($1 + [80])) = *(($5 + [8]))
	$5 = *($4)
	*($1 + [88]) = *($5)
	*(($1 + [96])) = *(($5 + [8]))
	$5 = *($4)
	*($1 + [104]) = *($5)
	*(($1 + [112])) = *(($5 + [8]))
	$4 = *($4 + [4])
	*($1 + [128]) = *($4)
	*(($1 + [136])) = *(($4 + [8]))
	*(($1 + [144])) = *(($4 + [16]))
	*(($1 + [152])) = *(($4 + [24]))
	*(($1 + [160])) = *(($4 + [32]))
	*(($1 + [168])) = *(($4 + [40]))
	CALL $162(($1 + [176]), ($4 + [48]))
	*(($1 + [208])) = *(($4 + [80]))
	*(($1 + [192])) = *($4 + [64])
	*(($1 + [200])) = *(($4 + [72]))
	*(($5 = ($1 + [224]))) = *($4 + [96])
	*(($1 + [232])) = *(($4 + [104]))
	*(($1 + [240])) = *(($4 + [112]))
	*(($1 + [248])) = *(($4 + [120]))
	*(($1 + [256])) = *(($4 + [128]))
	*(($1 + [264])) = *(($4 + [136]))
	CALL $162(($1 + [272]), ($4 + [144]))
	*(($1 + [304])) = *(($4 + [176]))
	*(($1 + [288])) = *(($4 + [160]))
	*(($1 + [296])) = *(($4 + [168]))
	*(($6 = ($1 + [320]))) = *($4 + [192])
	*(($1 + [328])) = *(($4 + [200]))
	*(($1 + [336])) = *(($4 + [208]))
	*(($1 + [344])) = *(($4 + [216]))
	*(($1 + [352])) = *(($4 + [224]))
	*(($1 + [360])) = *(($4 + [232]))
	CALL $162(($1 + [368]), ($4 + [240]))
	*(($1 + [400])) = *(($4 + [272]))
	*(($1 + [384])) = *(($4 + [256]))
	*(($1 + [392])) = *(($4 + [264]))
	*(($7 = ($1 + [416]))) = *($4 + [288])
	*(($1 + [424])) = *(($4 + [296]))
	*(($1 + [432])) = *(($4 + [304]))
	*(($1 + [440])) = *(($4 + [312]))
	*(($1 + [448])) = *(($4 + [320]))
	*(($1 + [456])) = *(($4 + [328]))
	CALL $162(($1 + [464]), ($4 + [336]))
	*(($1 + [496])) = *(($4 + [368]))
	*(($1 + [480])) = *(($4 + [352]))
	*(($1 + [488])) = *(($4 + [360]))
	*(($8 = ($1 + [512]))) = *($4 + [384])
	*(($1 + [520])) = *(($4 + [392]))
	*(($1 + [528])) = *(($4 + [400]))
	*(($1 + [536])) = *(($4 + [408]))
	*(($1 + [544])) = *(($4 + [416]))
	*(($1 + [552])) = *(($4 + [424]))
	CALL $162(($1 + [560]), ($4 + [432]))
	*(($1 + [592])) = *(($4 + [464]))
	*(($1 + [584])) = *(($4 + [456]))
	*(($1 + [576])) = *(($4 + [448]))
	*(($4 = $2) + [16]) = [120]
	*($4) = ($4 + [16])
	*($4 + [28]) = $5
	$9 = ($1 + [128])
	*($4 + [24]) = $9
	*($4 + [32]) = $6
	*($4 + [36]) = $7
	*($4 + [40]) = $8
	$6 = ($1 + [104])
	$7 = ($1 + [88])
	$8 = ($1 + [72])
	$10 = ($1 + [56])
	$11 = ($1 + [40])
	$12 = ($1 + [24])
	$13 = ($1 + [8])
	CALL $112(($4 + [24]), $4)
	$5 = *($4 + [16])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $201($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($2 + $5)
	*($4 + [16]) = $4
	*($4 + [28]) = $13
	*($4 + [24]) = $1
	*($4 + [32]) = $12
	*($4 + [36]) = $11
	*($4 + [40]) = $10
	*($4 + [44]) = $8
	*($4 + [48]) = $7
	*($4 + [52]) = $6
	*($4 + [56]) = $9
	CALL $113(($4 + [24]), ($4 + [16]))
	$14 = *($1)
	*($1 + [612]) = CALL db_store_i64(*($3 + [8]), (int_64)4406680248264818688, *(*($0 + [8])), $14, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$14 >= (uint_64)*($3 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($2)
	if ( (uint_64)($14 <= *($3 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [64])
}

void .FUNC $118 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [17527])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = $1
	CALL $122(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $105(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $119 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17619])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17665])
	$6 = ($1 + [56])
	$7 = *($3 + [4])
	$8 = ((int_64)*($7 + [8]) == (int_64)*(($1 + [64])))
	$9 = *($1)
	if ( (*(*($3)) == 0) ){ goto $label$2 }
	CALL eosio_assert($8, [17934])
	$10 = ((int_64)*($6) + (int_64)*($7))
	*($6) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [17977])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [17996])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert($8, [18014])
	$10 = (int_64)
	*($6) = $10(*($6) - *($7)))
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [18062])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [18084])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$9 == (int_64)*($1)), [17716])
	*($5 + [56]) = [120]
	*($5) = ($5 + [56])
	*($5 + [20]) = ($1 + [224])
	$8 = ($1 + [128])
	*($5 + [16]) = $8
	*($5 + [24]) = ($1 + [320])
	*($5 + [28]) = ($1 + [416])
	*($5 + [32]) = ($1 + [512])
	CALL $112(($5 + [16]), $5)
	$7 = *($5 + [56])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$3 = CALL $201($7)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	*($5 + [56]) = $5
	*($5 + [32]) = $6
	*($5 + [48]) = $8
	*($5 + [16]) = $1
	*($5 + [20]) = ($1 + [8])
	*($5 + [24]) = ($1 + [24])
	*($5 + [28]) = ($1 + [40])
	*($5 + [36]) = ($1 + [72])
	*($5 + [40]) = ($1 + [88])
	*($5 + [44]) = ($1 + [104])
	CALL $113(($5 + [16]), ($5 + [56]))
	CALL db_update_i64(*($1 + [612]), $2, $3, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$9 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $204($3)
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [64])
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17270])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $201($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [44]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [40])
	CALL $102(($3 + [32]), ($3 + [24]))
	*($5 + [48]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $103(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $204($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17270])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $201($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [44]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [40])
	CALL $100(($3 + [32]), ($3 + [24]))
	*($5 + [48]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $101(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $204($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $21 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $201($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $83(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $84(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $204($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$5 = ($global$0 - [448])
	$global$0 = $5
	CALL require_auth(*($0))
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$6 }
	$7 = ($4 + [1])
	$8 = uint_32($6 >> [1])
	if ( ($8 == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = *($4 + [8])
	$8 = *($4 + [4])
	if ( $8 ){ goto $label$4 }
	
.LABEL $label$5
	$9 = $7
	$8 = [1]
	if ( (($6 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = ($7 + $8)
	$9 = $7
	
.LOOP $label$8:
	if ( (CALL $181(*($9)) == 0) ){ goto $label$7 }
	$9 = ($9 + [1])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$8 }
	$9 = $6
	
.LABEL $label$7
	$8 = [1]
	if ( (*($4) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($4 + $8)
	goto $label$1 
	
.LABEL $label$2
	$8 = *($4 + [8])
	
.LABEL $label$1
	CALL $169($4, ($7 - $8), ($9 - $7))
	$9 = *($4)
	if ( ($9 & [1]) ){ goto $label$15 }
	$10 = ($4 + [1])
	$9 = ($10 + uint_32($9 >> [1]))
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$10 = *($4 + [8])
	$9 = ($10 + *($4 + [4]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (CALL $181(*(($9 + [-1]))) == 0) ){ goto $label$13 }
	$7 = ($10 + [1])
	
.LOOP $label$16:
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$12 }
	$8 = ($9 + [-2])
	$6 = ($9 + [-1])
	$9 = $6
	if ( CALL $181(*($8)) ){ goto $label$16 }
	$9 = $6
	
.LABEL $label$13
	$7 = [1]
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$9 = $10
	$7 = [1]
	$6 = *($4)
	if ( (($6 & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$8 = *($4 + [8])
	$7 = ($8 + *($4 + [4]))
	goto $label$9 
	
.LABEL $label$10
	$8 = ($4 + $7)
	$7 = ($8 + uint_32($6 >> $7))
	
.LABEL $label$9
	CALL $169($4, ($9 - $8), ($7 - $9))
	$9 = CALL $170($4, [32], [0])
	if ( ((int_32)$9 != (int_32)[-1]) ){ goto $label$17 }
	$9 = CALL $170($4, [45], [0])
	
.LABEL $label$17
	CALL eosio_assert(((int_32)$9 != (int_32)[-1]), [18687])
	$11 = CALL $161(($5 + [432]), $4, [0], $9, $4)
	CALL $161(($5 + [376]), $4, ($9 + [1]), [-1], $4)
	if ( (*($4) & [1]) ){ goto $label$19 }
	*($4) = [0]
	goto $label$18 
	
.LABEL $label$19
	*(*($4 + [8])) = [0]
	*($4 + [4]) = [0]
	
.LABEL $label$18
	CALL $164($4, [0])
	*(($4 + [8])) = *((($5 + [376]) + [8]))
	*($4) = *($5 + [376])
	*($5 + [424]) = [0]
	*($5 + [416]) = (int_64)0
	if ( ((int_64)$1 != (int_64)-7515584006193881072) ){ goto $label$21 }
	CALL $162(($5 + [416]), $4)
	goto $label$20 
	
.LABEL $label$21
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$27 }
	$4 = [0]
	$8 = *([0] + [18764])
	
.LOOP $label$29:
	*((($5 + [376]) + ($9 = $4))) = *(($8 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$9 == (int_32)[12]) )))))
	$4 = ($9 + [1])
	if ( ((uint_32)$9 > (uint_32)[11]) ){ goto $label$28 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$29 }
	
.LABEL $label$28
	*(($5 + [168])) = [0]
	*($5 + [160]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$26 }
	*($5 + [160]) = ($4 << [1])
	$8 = (($5 + [160]) | [1])
	goto $label$25 
	
.LABEL $label$27
	*(($5 + [168])) = [0]
	*($5 + [160]) = (int_64)0
	*($5 + [160]) = [0]
	goto $label$24 
	
.LABEL $label$26
	$7 = (($4 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*($5 + [160]) = ($7 | [1])
	*($5 + [168]) = $8
	*($5 + [164]) = $4
	
.LABEL $label$25
	$7 = ($9 + [1])
	$9 = [0]
	
.LOOP $label$30:
	*(($8 + $9)) = *((($5 + [376]) + $9))
	$9 = ($9 + [1])
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$30 }
	*(($8 + $4)) = [0]
	if ( (*($5 + [416]) & [1]) ){ goto $label$23 }
	
.LABEL $label$24
	*($5 + [416]) = [0]
	goto $label$22 
	
.LABEL $label$23
	*(*(($5 + [424]))) = [0]
	*($5 + [420]) = [0]
	
.LABEL $label$22
	CALL $164(($5 + [416]), [0])
	*((($5 + [416]) + [8])) = *((($5 + [160]) + [8]))
	*($5 + [416]) = *($5 + [160])
	
.LABEL $label$20
	$9 = [0]
	*(($5 + [408])) = [0]
	*($5 + [392]) = (int_64)-1
	$1 = *($0 + [8])
	*($5 + [376]) = $1
	*($5 + [384]) = $1
	*($5 + [400]) = (int_64)0
	$4 = CALL db_lowerbound_i64($1, $1, (int_64)4406680248264818688, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$31 }
	$9 = CALL $27(($5 + [376]), $4)
	
.LABEL $label$31
	$4 = *($5 + [432])
	$8 = CALL $198([18755])
	if ( ((int_32)$8 != (int_32)( *($11 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$34 }
	if ( (CALL $171($11, [0], [-1], [18755], $8) == 0) ){ goto $label$33 }
	
.LABEL $label$34
	$4 = *($5 + [432])
	$8 = CALL $198([16690])
	if ( ((int_32)$8 != (int_32)( *(($11 + [4])) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$32 }
	if ( CALL $171($11, [0], [-1], [16690], $8) ){ goto $label$32 }
	$1 = *($0)
	*($5 + [160]) = $3
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [17584])
	CALL $85(($5 + [376]), $9, $1, ($5 + [160]))
	$9 = CALL $160(($5 + [328]), ($5 + [416]))
	$12 = *(($3 + [8]))
	*((($5 + [312]) + [8])) = $12
	$1 = *($3)
	*((($5 + [64]) + [8])) = $12
	*($5 + [64]) = $1
	*($5 + [312]) = $1
	CALL $71($0, $9, ($5 + [64]), [0])
	if ( ((*($9) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*($9 + [8]))
	goto $label$32 
	
.LABEL $label$33
	$1 = *($0)
	*($5 + [160]) = $3
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [17584])
	CALL $86(($5 + [376]), $9, $1, ($5 + [160]))
	$9 = CALL $160(($5 + [360]), ($5 + [416]))
	$12 = *(($3 + [8]))
	*((($5 + [344]) + [8])) = $12
	$1 = *($3)
	*((($5 + [48]) + [8])) = $12
	*($5 + [48]) = $1
	*($5 + [344]) = $1
	CALL $79($0, $9, ($5 + [48]), [0])
	if ( ((*($9) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$32
	$9 = CALL $160(($5 + [296]), ($5 + [416]))
	$4 = ($3 + [8])
	$12 = *($4)
	*((($5 + [280]) + [8])) = $12
	$1 = *($3)
	*((($5 + [32]) + [8])) = $12
	*($5 + [280]) = $1
	*($5 + [32]) = $1
	CALL $50($0, $9, ($5 + [32]), [1], [0])
	if ( ((*($9) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$35
	$9 = CALL $160(($5 + [264]), ($5 + [416]))
	$12 = *($4)
	*((($5 + [248]) + [8])) = $12
	$1 = *($3)
	*((($5 + [16]) + [8])) = $12
	*($5 + [248]) = $1
	*($5 + [16]) = $1
	CALL $63($0, $9, ($5 + [16]), [0])
	if ( ((*($9) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$36
	*(($4 = (($5 + [232]) + [8]))) = *(($3 + [8]))
	*($5 + [232]) = *($3)
	$9 = CALL $160(($5 + [216]), ($5 + [416]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [232])
	CALL $87($0, $5, $9)
	if ( ((*($9) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$37
	*($5 + [208]) = [0]
	*($5 + [200]) = (int_64)0
	*((($5 + [160]) + [32])) = [0]
	*($5 + [176]) = (int_64)-1
	*($5 + [184]) = (int_64)0
	$1 = *(($0 + [8]))
	*($5 + [160]) = $1
	*($5 + [168]) = $1
	$9 = CALL db_lowerbound_i64($1, $1, (int_64)4229851254120710144, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$38 }
	$9 = CALL $26(($5 + [160]), $9)
	
.LOOP $label$39:
	$8 = ($9 + [8])
	$4 = *($5 + [204])
	if ( ((int_32)$4 == (int_32)*((($5 + [200]) + [8]))) ){ goto $label$41 }
	*($4) = *($8)
	CALL $160(($4 + [4]), ($9 + [12]))
	*(($4 + [24])) = *(($9 + [32]))
	*($4 + [16]) = *(($9 + [24]))
	*($5 + [204]) = (*($5 + [204]) + [32])
	goto $label$40 
	
.LABEL $label$41
	CALL $88(($5 + [200]), $8)
	
.LABEL $label$40
	CALL eosio_assert([1], [17336])
	$9 = CALL db_next_i64(*($9 + [44]), ($5 + [128]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$38 }
	$9 = CALL $26(($5 + [160]), $9)
	goto $label$39 
	
.LABEL $label$38
	*(($5 + [140])) = [0]
	*(($9 = (($5 + [128]) + [24]))) = (int_64)0
	*($5 + [132 align=4]) = (int_64)0
	*($5 + [144]) = (int_64)0
	*($5 + [128]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$4 = (($5 + [128]) | [4])
	CALL $162($4, ($5 + [416]))
	*($9) = *(($3 + [8]))
	*($5 + [144]) = *($3)
	$9 = *($5 + [204])
	if ( ((int_32)$9 == (int_32)*((($5 + [200]) + [8]))) ){ goto $label$44 }
	*($9) = *($5 + [128])
	CALL $160(($9 + [4]), $4)
	$4 = ($5 + [144])
	*(($9 + [24])) = *(($4 + [8]))
	*($9 + [16]) = *($4)
	$9 = (*($5 + [204]) + [32])
	*($5 + [204]) = $9
	$9 = ($9 - *($5 + [200]))
	if ( $9 ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$44
	CALL $88(($5 + [200]), ($5 + [128]))
	$9 = (*($5 + [204]) - *($5 + [200]))
	if ( ($9 == 0) ){ goto $label$42 }
	
.LABEL $label$43
	$13 = int_32($9 >> [5])
	$14 = ($13 + [-1])
	$3 = ($5 + [112])
	$15 = (($5 + [96]) | [4])
	$10 = [0]
	$16 = [48]
	$17 = ($5 + [108])
	
.LOOP $label$45:
	$18 = ($10 + [1])
	if ( ((uint_32)$18 >= (uint_32)$13) ){ goto $label$42 }
	$9 = $16
	$8 = $14
	
.LOOP $label$47:
	$7 = ($7 + $9)
	$12 = *($7)
	$6 = ($10 << [5])
	$7 = *($5 + [200])
	$4 = ($7 + $6)
	$1 = *($4 + [16])
	if ( ((int_64)$1 >= (int_64)$12) ){ goto $label$49 }
	*($5 + [96]) = *($4)
	$19 = CALL $160($15, ($4 + [4]))
	*(($20 = ($3 + [8]))) = *(($4 + [24]))
	*($3) = *($4 + [16])
	$7 = ($7 + $9)
	*(($4 = (($7 = *($5 + [200])) + $6))) = *(($7 + [-16]))
	CALL $162(($4 + [4]), ($7 + [-12]))
	*($4 + [16]) = *($7)
	*(($4 + [24])) = *(($7 + [8]))
	*((($4 = (*($5 + [200]) + $9)) + [-16])) = *($5 + [96])
	CALL $162(($4 + [-12]), $19)
	*(($4 + [8])) = *($20)
	*($4) = *($3)
	if ( ((*($5 + [100]) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*($17))
	$9 = ($9 + [32])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$49
	if ( ((int_64)$1 != (int_64)$12) ){ goto $label$48 }
	$19 = *($4)
	if ( ((uint_32)$19 >= (uint_32)*(($7 + [-16]))) ){ goto $label$48 }
	*($5 + [96]) = $19
	$19 = CALL $160($15, ($4 + [4]))
	*(($20 = ($3 + [8]))) = *(($4 + [24]))
	*($3) = *($4 + [16])
	$7 = ($7 + $9)
	*(($4 = (($7 = *($5 + [200])) + $6))) = *(($7 + [-16]))
	CALL $162(($4 + [4]), ($7 + [-12]))
	*($4 + [16]) = *($7)
	*(($4 + [24])) = *(($7 + [8]))
	*((($4 = (*($5 + [200]) + $9)) + [-16])) = *($5 + [96])
	CALL $162(($4 + [-12]), $19)
	*(($4 + [8])) = *($20)
	*($4) = *($3)
	if ( ((*($5 + [100]) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*($17))
	
.LABEL $label$48
	$9 = ($9 + [32])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$47 }
	
.LABEL $label$46
	$16 = ($16 + [32])
	$14 = ($14 + [-1])
	$10 = $18
	if ( ($18 <= $13) ){ goto $label$45 }
	
.LABEL $label$42
	$9 = [0]
	$4 = CALL db_lowerbound_i64(*($5 + [160]), *(($5 + [168])), (int_64)4229851254120710144, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$50 }
	$9 = CALL $26(($5 + [160]), $4)
	
.LABEL $label$50
	*($5 + [92]) = [0]
	if ( ((int_32)*($5 + [204]) == (int_32)*($5 + [200])) ){ goto $label$51 }
	$3 = ($5 + [104])
	
.LOOP $label$52:
	$1 = *($0)
	if ( ($9 == 0) ){ goto $label$54 }
	*($5 + [100]) = ($5 + [92])
	*($5 + [96]) = ($5 + [200])
	CALL eosio_assert([1], [17584])
	CALL $89(($5 + [160]), $9, $1, ($5 + [96]))
	CALL eosio_assert([1], [17336])
	$4 = *($9 + [44])
	$9 = [0]
	$4 = CALL db_next_i64($4, ($5 + [96]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$55 }
	$9 = CALL $26(($5 + [160]), $4)
	
.LABEL $label$55
	$4 = *($5 + [92])
	if ( ((int_32)$4 != (int_32)[9]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$54
	*($3) = ($5 + [92])
	*($5 + [100]) = ($5 + [200])
	*($5 + [96]) = ($5 + [160])
	CALL $90(($5 + [80]), ($5 + [160]), $1, ($5 + [96]))
	$9 = [0]
	$4 = *($5 + [92])
	if ( ((int_32)$4 == (int_32)[9]) ){ goto $label$51 }
	
.LABEL $label$53
	$8 = *($5 + [200])
	$7 = *($5 + [204])
	$4 = ($4 + [1])
	*($5 + [92]) = $4
	if ( ($4 <= int_32(($7 - $8) >> [5])) ){ goto $label$52 }
	
.LABEL $label$51
	if ( ((*($5 + [132]) & [1]) == 0) ){ goto $label$56 }
	CALL _ZdlPv(*(($5 + [140])))
	
.LABEL $label$56
	$8 = *($5 + [184])
	if ( ($8 == 0) ){ goto $label$57 }
	$7 = ($5 + [188])
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$59 }
	
.LOOP $label$60:
	$9 = ($9 + [-24])
	$4 = *($9)
	*($9) = [0]
	if ( ($4 == 0) ){ goto $label$61 }
	if ( ((*(($4 + [12])) & [1]) == 0) ){ goto $label$62 }
	CALL _ZdlPv(*(($4 + [20])))
	
.LABEL $label$62
	CALL _ZdlPv($4)
	
.LABEL $label$61
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$60 }
	$9 = *(($5 + [184]))
	goto $label$58 
	
.LABEL $label$59
	$9 = $8
	
.LABEL $label$58
	*($7) = $8
	CALL _ZdlPv($9)
	
.LABEL $label$57
	$8 = *($5 + [200])
	if ( ($8 == 0) ){ goto $label$63 }
	$9 = *($5 + [204])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$65 }
	
.LOOP $label$66:
	$4 = ($9 + [-32])
	if ( ((*(($9 + [-28])) & [1]) == 0) ){ goto $label$67 }
	CALL _ZdlPv(*(($9 + [-20])))
	
.LABEL $label$67
	$9 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$66 }
	$9 = *($5 + [200])
	goto $label$64 
	
.LABEL $label$65
	$9 = $8
	
.LABEL $label$64
	*($5 + [204]) = $8
	CALL _ZdlPv($9)
	
.LABEL $label$63
	CALL $41(($5 + [400]))
	if ( (*($5 + [416]) & [1]) ){ goto $label$70 }
	if ( (*($5 + [432]) & [1]) ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$70
	CALL _ZdlPv(*(($5 + [424])))
	if ( ((*($5 + [432]) & [1]) == 0) ){ goto $label$68 }
	
.LABEL $label$69
	CALL _ZdlPv(*($11 + [8]))
	$global$0 = ($5 + [448])
	return 
	
.LABEL $label$68
	$global$0 = ($5 + [448])
}

int_32 .FUNC $23 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $201($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17293])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $204($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $22 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [336])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	*((($2 + [288]) + [32])) = [0]
	*($2 + [304]) = (int_64)-1
	$4 = *($0 + [8])
	*($2 + [288]) = $4
	*($2 + [296]) = $4
	*($2 + [312]) = (int_64)0
	$5 = [0]
	$6 = CALL db_lowerbound_i64($4, $4, (int_64)-4998313087829278720, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $25(($2 + [288]), $6)
	
.LABEL $label$1
	*((($2 + [248]) + [32])) = [0]
	*($2 + [264]) = (int_64)-1
	$7 = ($0 + [8])
	$4 = *($7)
	*($2 + [248]) = $4
	*($2 + [256]) = $4
	*($2 + [272]) = (int_64)0
	$6 = CALL db_lowerbound_i64($4, $4, (int_64)4229851254120710144, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $26(($2 + [248]), $6)
	
.LABEL $label$2
	$6 = [0]
	*((($2 + [208]) + [32])) = [0]
	*($2 + [224]) = (int_64)-1
	$4 = *($7)
	*($2 + [208]) = $4
	*($2 + [216]) = $4
	*($2 + [232]) = (int_64)0
	$7 = [0]
	$8 = CALL db_lowerbound_i64($4, $4, (int_64)4406680248264818688, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $27(($2 + [208]), $8)
	
.LABEL $label$3
	*((($2 + [168]) + [32])) = [0]
	*($2 + [184]) = (int_64)-1
	$9 = ($0 + [8])
	$4 = *($9)
	*($2 + [168]) = $4
	*($2 + [176]) = $4
	*($2 + [192]) = (int_64)0
	$8 = CALL db_lowerbound_i64($4, $4, (int_64)-7807081578584080384, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $28(($2 + [168]), $8)
	
.LABEL $label$4
	$8 = [0]
	*((($2 + [128]) + [32])) = [0]
	*($2 + [144]) = (int_64)-1
	$4 = *($9)
	*($2 + [128]) = $4
	*($2 + [136]) = $4
	*($2 + [152]) = (int_64)0
	$9 = [0]
	$10 = CALL db_lowerbound_i64($4, $4, (int_64)5304430020972773376, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$5 }
	$9 = CALL $29(($2 + [128]), $10)
	
.LABEL $label$5
	*((($2 + [88]) + [32])) = [0]
	*($2 + [104]) = (int_64)-1
	$11 = ($0 + [8])
	$4 = *($11)
	*($2 + [88]) = $4
	*($2 + [96]) = $4
	*($2 + [112]) = (int_64)0
	$10 = CALL db_lowerbound_i64($4, $4, (int_64)5304430358492331680, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$6 }
	$8 = CALL $30(($2 + [88]), $10)
	
.LABEL $label$6
	$10 = [0]
	*((($2 + [48]) + [32])) = [0]
	*($2 + [64]) = (int_64)-1
	$4 = *($11)
	*($2 + [48]) = $4
	*($2 + [56]) = $4
	*($2 + [72]) = (int_64)0
	$11 = [0]
	$12 = CALL db_lowerbound_i64($4, $4, (int_64)-4157493845350678528, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$7 }
	$11 = CALL $31(($2 + [48]), $12)
	
.LABEL $label$7
	*((($2 + [8]) + [32])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [44]) = [0]
	$4 = *(($0 + [8]))
	*($2 + [8]) = $4
	*($2 + [16]) = $4
	*($2 + [32]) = (int_64)0
	$0 = CALL db_lowerbound_i64($4, $4, (int_64)3774889943067754496, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$8 }
	$10 = CALL $32(($2 + [8]), $0)
	
.LABEL $label$8
	if ( ((int_64)$1 > (int_64)4229851254120710143) ){ goto $label$16 }
	if ( ((int_64)$1 > (int_64)-4157493845350678529) ){ goto $label$15 }
	if ( ((int_64)$1 == (int_64)-7807081578584080384) ){ goto $label$13 }
	if ( ((int_64)$1 != (int_64)-4998313087829278720) ){ goto $label$9 }
	if ( ($5 == 0) ){ goto $label$9 }
	
.LOOP $label$17:
	CALL eosio_assert([1], [17302])
	CALL eosio_assert([1], [17336])
	$0 = [0]
	$3 = CALL db_next_i64(*($5 + [36]), ($2 + [328]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$18 }
	$0 = CALL $25(($2 + [288]), $3)
	
.LABEL $label$18
	CALL $33(($2 + [288]), $5)
	$5 = $0
	if ( $0 ){ goto $label$17 }
	goto $label$9 
	
.LABEL $label$16
	if ( ((int_64)$1 > (int_64)5304430020972773375) ){ goto $label$14 }
	if ( ((int_64)$1 == (int_64)4229851254120710144) ){ goto $label$12 }
	if ( ((int_64)$1 != (int_64)4406680248264818688) ){ goto $label$9 }
	if ( ($7 == 0) ){ goto $label$9 }
	
.LOOP $label$19:
	CALL eosio_assert([1], [17302])
	CALL eosio_assert([1], [17336])
	$0 = [0]
	$3 = CALL db_next_i64(*($7 + [612]), ($2 + [328]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$20 }
	$0 = CALL $27(($2 + [208]), $3)
	
.LABEL $label$20
	CALL $34(($2 + [208]), $7)
	$7 = $0
	if ( $0 ){ goto $label$19 }
	goto $label$9 
	
.LABEL $label$15
	if ( ((int_64)$1 == (int_64)-4157493845350678528) ){ goto $label$11 }
	if ( ((int_64)$1 != (int_64)3774889943067754496) ){ goto $label$9 }
	if ( ($10 == 0) ){ goto $label$9 }
	
.LOOP $label$21:
	CALL eosio_assert([1], [17302])
	CALL eosio_assert([1], [17336])
	$0 = [0]
	$3 = CALL db_next_i64(*($10 + [52]), ($2 + [328]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$22 }
	$0 = CALL $32(($2 + [8]), $3)
	
.LABEL $label$22
	CALL $35(($2 + [8]), $10)
	$10 = $0
	if ( $0 ){ goto $label$21 }
	goto $label$9 
	
.LABEL $label$14
	if ( ((int_64)$1 == (int_64)5304430020972773376) ){ goto $label$10 }
	if ( ((int_64)$1 != (int_64)5304430358492331680) ){ goto $label$9 }
	if ( ($8 == 0) ){ goto $label$9 }
	
.LOOP $label$23:
	CALL eosio_assert([1], [17302])
	CALL eosio_assert([1], [17336])
	$0 = [0]
	$3 = CALL db_next_i64(*($8 + [44]), ($2 + [328]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$24 }
	$0 = CALL $30(($2 + [88]), $3)
	
.LABEL $label$24
	CALL $36(($2 + [88]), $8)
	$8 = $0
	if ( $0 ){ goto $label$23 }
	goto $label$9 
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$9 }
	
.LOOP $label$25:
	CALL eosio_assert([1], [17302])
	CALL eosio_assert([1], [17336])
	$0 = [0]
	$3 = CALL db_next_i64(*($6 + [48]), ($2 + [328]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$26 }
	$0 = CALL $28(($2 + [168]), $3)
	
.LABEL $label$26
	CALL $37(($2 + [168]), $6)
	$6 = $0
	if ( $0 ){ goto $label$25 }
	goto $label$9 
	
.LABEL $label$12
	if ( ($3 == 0) ){ goto $label$9 }
	
.LOOP $label$27:
	CALL eosio_assert([1], [17302])
	CALL eosio_assert([1], [17336])
	$0 = [0]
	$5 = CALL db_next_i64(*($3 + [44]), ($2 + [328]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$28 }
	$0 = CALL $26(($2 + [248]), $5)
	
.LABEL $label$28
	CALL $38(($2 + [248]), $3)
	$3 = $0
	if ( $0 ){ goto $label$27 }
	goto $label$9 
	
.LABEL $label$11
	if ( ($11 == 0) ){ goto $label$9 }
	
.LOOP $label$29:
	CALL eosio_assert([1], [17302])
	CALL eosio_assert([1], [17336])
	$0 = [0]
	$3 = CALL db_next_i64(*($11 + [20]), ($2 + [328]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$30 }
	$0 = CALL $31(($2 + [48]), $3)
	
.LABEL $label$30
	CALL $39(($2 + [48]), $11)
	$11 = $0
	if ( $0 ){ goto $label$29 }
	goto $label$9 
	
.LABEL $label$10
	if ( ($9 == 0) ){ goto $label$9 }
	
.LOOP $label$31:
	CALL eosio_assert([1], [17302])
	CALL eosio_assert([1], [17336])
	$0 = [0]
	$3 = CALL db_next_i64(*($9 + [48]), ($2 + [328]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$32 }
	$0 = CALL $29(($2 + [128]), $3)
	
.LABEL $label$32
	CALL $40(($2 + [128]), $9)
	$9 = $0
	if ( $0 ){ goto $label$31 }
	
.LABEL $label$9
	CALL prints([17257])
	CALL printn($1)
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$33 }
	$6 = ($2 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$35 }
	
.LOOP $label$36:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$37 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$38
	CALL _ZdlPv($3)
	
.LABEL $label$37
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$36 }
	$0 = *(($2 + [32]))
	goto $label$34 
	
.LABEL $label$35
	$0 = $5
	
.LABEL $label$34
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$33
	$5 = *($2 + [72])
	if ( ($5 == 0) ){ goto $label$39 }
	$6 = ($2 + [76])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$41 }
	
.LOOP $label$42:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$43 }
	CALL _ZdlPv($3)
	
.LABEL $label$43
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$42 }
	$0 = *(($2 + [72]))
	goto $label$40 
	
.LABEL $label$41
	$0 = $5
	
.LABEL $label$40
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$39
	$5 = *($2 + [112])
	if ( ($5 == 0) ){ goto $label$44 }
	$6 = ($2 + [116])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$46 }
	
.LOOP $label$47:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$48 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$49 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$49
	CALL _ZdlPv($3)
	
.LABEL $label$48
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$47 }
	$0 = *(($2 + [112]))
	goto $label$45 
	
.LABEL $label$46
	$0 = $5
	
.LABEL $label$45
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$44
	$5 = *($2 + [152])
	if ( ($5 == 0) ){ goto $label$50 }
	$6 = ($2 + [156])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$52 }
	
.LOOP $label$53:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$54 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$55 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$55
	CALL _ZdlPv($3)
	
.LABEL $label$54
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$53 }
	$0 = *(($2 + [152]))
	goto $label$51 
	
.LABEL $label$52
	$0 = $5
	
.LABEL $label$51
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$50
	$5 = *($2 + [192])
	if ( ($5 == 0) ){ goto $label$56 }
	$6 = ($2 + [196])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$58 }
	
.LOOP $label$59:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$60 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$61 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$61
	CALL _ZdlPv($3)
	
.LABEL $label$60
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$59 }
	$0 = *(($2 + [192]))
	goto $label$57 
	
.LABEL $label$58
	$0 = $5
	
.LABEL $label$57
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$56
	CALL $41(($2 + [232]))
	$5 = *($2 + [272])
	if ( ($5 == 0) ){ goto $label$62 }
	$6 = ($2 + [276])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$64 }
	
.LOOP $label$65:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$66 }
	if ( ((*(($3 + [12])) & [1]) == 0) ){ goto $label$67 }
	CALL _ZdlPv(*(($3 + [20])))
	
.LABEL $label$67
	CALL _ZdlPv($3)
	
.LABEL $label$66
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$65 }
	$0 = *(($2 + [272]))
	goto $label$63 
	
.LABEL $label$64
	$0 = $5
	
.LABEL $label$63
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$62
	$5 = *($2 + [312])
	if ( ($5 == 0) ){ goto $label$68 }
	$6 = (($2 + [288]) + [28])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$70 }
	
.LOOP $label$71:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$72 }
	if ( ((*($0 + [20]) & [1]) == 0) ){ goto $label$73 }
	CALL _ZdlPv(*(($0 + [28])))
	
.LABEL $label$73
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$74 }
	CALL _ZdlPv(*(($0 + [16])))
	
.LABEL $label$74
	CALL _ZdlPv($0)
	
.LABEL $label$72
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$71 }
	$0 = *(($2 + [312]))
	goto $label$69 
	
.LABEL $label$70
	$0 = $5
	
.LABEL $label$69
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$68
	$global$0 = ($2 + [336])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17270])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $201($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([48])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17293])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $45(($3 + [32]), ($5 + [8]))
	CALL $45(($3 + [32]), ($5 + [20]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $91(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $204($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$10
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $24 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$5 = ($global$0 - [160])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)$1 == (int_64)6138663591134630912) ){ goto $label$1 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	*(($5 + [136])) = [0]
	*($5 + [112]) = $2
	*($5 + [104]) = $2
	*($5 + [120]) = (int_64)-1
	*($5 + [128]) = (int_64)0
	$7 = [0]
	$8 = CALL db_lowerbound_i64($2, $2, (int_64)-4157493845350678528, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $31(($5 + [104]), $8)
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18820])
	CALL eosio_assert(*($7 + [8]), [18850])
	$7 = CALL $198([16686])
	if ( ($7 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [16808])
	goto $label$5 
	
.LABEL $label$6
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$6 = (int_64)0
	
.LOOP $label$7:
	$8 = *(($7 + [16685]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [16853])
	
.LABEL $label$8
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$3 
	
.LABEL $label$4
	$6 = (int_64)4
	
.LABEL $label$3
	$9 = *($3 + [8])
	CALL eosio_assert(((int_64)$9 == (int_64)$6), [18870])
	$8 = [0]
	$10 = *($3)
	if ( ((uint_64)((int_64)$10 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$6 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$11 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$6 = $11
	$8 = [1]
	$12 = $7
	$7 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$6 = $11
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$12 = ($7 + [1])
	$7 = $12
	if ( $8 ){ goto $label$13 }
	$8 = [1]
	$7 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$8 = [0]
	
.LABEL $label$9
	CALL eosio_assert($8, [18895])
	CALL eosio_assert(((int_64)$9 == (int_64)*([0] + [8232])), [18443])
	CALL eosio_assert(((int_64)$10 >= (int_64)*([0] + [8224])), [18919])
	*($5 + [56]) = (int_64)3617214756542218240
	$6 = *($0)
	*($5 + [48]) = $6
	*(($5 + [24])) = *(($3 + [8]))
	*($5 + [8]) = $2
	*($5) = $1
	*($5 + [16]) = *($3)
	CALL $160(($5 + [32]), $4)
	$7 = CALL $48(($5 + [64]), ($5 + [48]), $6, (int_64)4520798631350992896, $5)
	CALL $49(($5 + [144]), $7)
	$8 = *($5 + [144])
	CALL send_inline($8, (*($5 + [148]) - $8))
	$8 = *($5 + [144])
	if ( ($8 == 0) ){ goto $label$14 }
	*($5 + [148]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$14
	$8 = *($7 + [28])
	if ( ($8 == 0) ){ goto $label$15 }
	*(($7 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$15
	$8 = *($7 + [16])
	if ( ($8 == 0) ){ goto $label$16 }
	*(($7 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$16
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$17
	$12 = *($5 + [128])
	if ( ($12 == 0) ){ goto $label$1 }
	$3 = ($5 + [132])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$19 }
	
.LOOP $label$20:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$21 }
	CALL _ZdlPv($8)
	
.LABEL $label$21
	if ( ((int_32)$12 != (int_32)$7) ){ goto $label$20 }
	$7 = *(($5 + [128]))
	goto $label$18 
	
.LABEL $label$19
	$7 = $12
	
.LABEL $label$18
	*($3) = $12
	CALL _ZdlPv($7)
	
.LABEL $label$1
	$global$0 = ($5 + [160])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17270])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $201($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([624])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [176 align=4]) = (int_64)0
	*($5 + [184]) = [0]
	*($5 + [192]) = (int_64)0
	*($5 + [200]) = (int_64)0
	*($5 + [280]) = [0]
	*($5 + [272 align=4]) = (int_64)0
	*($5 + [288]) = (int_64)0
	*($5 + [296]) = (int_64)0
	*($5 + [368 align=4]) = (int_64)0
	*($5 + [376]) = [0]
	*($5 + [384]) = (int_64)0
	*($5 + [392]) = (int_64)0
	*($5 + [464 align=4]) = (int_64)0
	*($5 + [472]) = [0]
	*($5 + [480]) = (int_64)0
	*($5 + [488]) = (int_64)0
	*($5 + [560 align=4]) = (int_64)0
	*($5 + [568]) = [0]
	*($5 + [576]) = (int_64)0
	*($5 + [584]) = (int_64)0
	*($5 + [608]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [72])
	*($3 + [64]) = ($5 + [88])
	*($3 + [68]) = ($5 + [104])
	*($3 + [72]) = ($5 + [128])
	CALL $95(($3 + [40]), ($3 + [32]))
	*($5 + [612]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $96(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $204($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*(($1 + [560])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [568])))
	
.LABEL $label$10
	if ( ((*(($1 + [464])) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [472])))
	
.LABEL $label$11
	if ( ((*(($1 + [368])) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [376])))
	
.LABEL $label$12
	if ( ((*(($1 + [272])) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($1 + [280])))
	
.LABEL $label$13
	if ( ((*(($1 + [176])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($1 + [184])))
	
.LABEL $label$14
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17270])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $201($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [20]) = [0]
	*($5 + [12 align=4]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17293])
	CALL memcpy($5, *($3 + [12]), [8])
	*($3 + [12]) = (*($3 + [12]) + [8])
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [12])
	*($3 + [32]) = ($5 + [8])
	*($3 + [40]) = ($5 + [24])
	CALL $93(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $94(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $204($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*(($1 + [12])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [20])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $101 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $179($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $45(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17293])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [17293])
	CALL memcpy($0, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $179($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $45(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17293])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [17293])
	CALL memcpy($0, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $179($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $45(*($1), *($0 + [4]))
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($0, *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [17293])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $45(*($1), *($0 + [8]))
	$4 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17293])
	CALL memcpy($4, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [17293])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($4 + [8]) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $179($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($1)
	*($1) = [0]
	$3 = *($0)
	*($0) = $2
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((*(($3 + [560])) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($3 + [568])))
	
.LABEL $label$2
	if ( ((*(($3 + [464])) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($3 + [472])))
	
.LABEL $label$3
	if ( ((*(($3 + [368])) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [376])))
	
.LABEL $label$4
	if ( ((*(($3 + [272])) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [280])))
	
.LABEL $label$5
	if ( ((*(($3 + [176])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [184])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$1
	*($0 + [8]) = *($1 + [8])
	*(($0 + [16])) = *(($1 + [16]))
	return $0
}

void .FUNC $108 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $179($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [17366])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17411])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [17461])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*(($3 + [12])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [20])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*(($5 + [12])) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [20])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [17366])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17411])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [17461])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [17366])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17411])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [17461])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [17366])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17411])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [17461])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [48]))
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [608]) == (int_32)$0), [17366])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17411])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [17461])
	$5 = ($3 + [-24])
	$7 = *($4)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$8 = ($5 + [24])
	CALL $109($5, $8)
	$3 = ($5 + [48])
	$5 = $8
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$8 }
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = $5
	
.LABEL $label$6
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	if ( ((*(($5 + [560])) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($5 + [568])))
	if ( ((*(($5 + [464])) & [1]) == 0) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((*(($5 + [464])) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($5 + [472])))
	if ( ((*(($5 + [368])) & [1]) == 0) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((*(($5 + [368])) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($5 + [376])))
	if ( ((*(($5 + [272])) & [1]) == 0) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((*(($5 + [272])) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($5 + [280])))
	if ( (*(($5 + [176])) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((*(($5 + [176])) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($5 + [184])))
	
.LABEL $label$11
	CALL _ZdlPv($5)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [612]))
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [17366])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17411])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [17461])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($6 + [24])))
	
.LABEL $label$13
	CALL _ZdlPv($6)
	
.LABEL $label$12
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [52]))
	$6 = *(($1 + [56]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3774889943067754496, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17270])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $201($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24]) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	CALL $107(($3 + [32]), ($3 + [24]))
	*($5 + [56]) = [-1]
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $108(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $204($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [17366])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [17411])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [17461])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$10
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [28])))
	
.LABEL $label$14
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17270])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $201($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	CALL $104(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $105(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $204($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17270])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $201($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17293])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [17293])
	CALL memcpy(($3 + [16]), ($2 + [8]), [1])
	*($5 + [8]) = ((int_32)*($3 + [16]) != (int_32)[0])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $106(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $204($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $198 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $199 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $183())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $200($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $196 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $197 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_64 .FUNC $194 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $193($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $183()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $193($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [19137]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $192($0, (int_64)0)
	*(CALL $183()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $193($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $193($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $193($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $193($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [19137])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [19137]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19137]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $193($0)
	$5 = *(($6 + [19137]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $193($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [19137]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [16677]))
	$8 = (int_64)0
	$5 = *(($6 + [19137]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19137]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $193($0)
	$5 = *(($6 + [19137]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $193($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [19137]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $192($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [19137]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [19137]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $193($0) + [19137]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $183()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $183()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $183()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $195 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $192($3, (int_64)0)
	$4 = CALL $194($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

void .FUNC $192 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $193 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $191($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_32 .FUNC $190 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $191 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $190($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}