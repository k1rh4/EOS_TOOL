(data (i32.const 4) "@l\00\00")
(data (i32.const 16) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 80) "cannot pass end iterator to modify\00")
(data (i32.const 128) "cannot create objects in table of another contract\00")
(data (i32.const 192) "write\00")
(data (i32.const 208) "object passed to modify is not in multi_index\00")
(data (i32.const 256) "cannot modify objects in table of another contract\00")
(data (i32.const 320) "updater cannot change primary key when modifying an object\00")
(data (i32.const 384) "error reading iterator\00")
(data (i32.const 416) "read\00")
(data (i32.const 432) "cannot pass end iterator to erase\00")
(data (i32.const 480) "cannot increment end iterator\00")
(data (i32.const 512) "object passed to erase is not in multi_index\00")
(data (i32.const 560) "cannot erase objects in table of another contract\00")
(data (i32.const 624) "attempt to remove object that was not in multi_index\00")
(data (i32.const 688) "duplicated pay table item\00")
(data (i32.const 720) "next primary key in table is at autoincrement limit\00")
(data (i32.const 784) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 848) "cannot decrement iterator at beginning of table\00")
(data (i32.const 896) "get\00")
(data (i32.const 912) "paytable not found\00")
(data (i32.const 944) "paytable not erased\00")
(data (i32.const 976) "invalid core symbol or precision\00")
(data (i32.const 1024) "invalid symbol name\00")
(data (i32.const 1056) "bet amount must be greater than zero\00")
(data (i32.const 1104) "bet amount too big\00")
(data (i32.const 1136) "singleton does not exist\00")
(data (i32.const 1168) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1220) "\d0\04\00\00")
(data (i32.const 1232) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 1280) "game not found\00")
(data (i32.const 1296) "trx_id mismatch\00")
(data (i32.const 1312) "player name mismatch\00")
(data (i32.const 1344) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1408) "bet_amount mismatch\00")
(data (i32.const 1440) "player_seed mismatch\00")
(data (i32.const 1472) "timestamp mismatch\00")
(data (i32.const 1504) "public_key mismatch\00")
(data (i32.const 1536) "multiplication overflow\00")
(data (i32.const 1568) "multiplication underflow\00")
(data (i32.const 1600) "World First EOS Slot by Neowiz Play Studio - https://slot.nblab.io\00")
(data (i32.const 1680) "\00\00\00\00\960\07w,a\0e\ee\baQ\t\99\19\c4m\07\8f\f4jp5\a5c\e9\a3\95d\9e2\88\db\0e\a4\b8\dcy\1e\e9\d5\e0\88\d9\d2\97+L\b6\t\bd|\b1~\07-\b8\e7\91\1d\bf\90d\10\b7\1d\f2 \b0jHq\b9\f3\deA\be\84}\d4\da\1a\eb\e4\ddmQ\b5\d4\f4\c7\85\d3\83V\98l\13\c0\a8kdz\f9b\fd\ec\c9e\8aO\\\01\14\d9l\06cc=\0f\fa\f5\0d\08\8d\c8 n;^\10iL\e4A`\d5rqg\a2\d1\e4\03<G\d4\04K\fd\85\0d\d2k\b5\n\a5\fa\a8\b55l\98\b2B\d6\c9\bb\db@\f9\bc\ac\e3l\d82u\\\dfE\cf\0d\d6\dcY=\d1\ab\ac0\d9&:\00\deQ\80Q\d7\c8\16a\d0\bf\b5\f4\b4!#\c4\b3V\99\95\ba\cf\0f\a5\bd\b8\9e\b8\02(\08\88\05_\b2\d9\0c\c6$\e9\0b\b1\87|o/\11LhX\ab\1da\c1=-f\b6\90A\dcv\06q\db\01\bc \d2\98*\10\d5\ef\89\85\b1q\1f\b5\b6\06\a5\e4\bf\9f3\d4\b8\e8\a2\c9\07x4\f9\00\0f\8e\a8\t\96\18\98\0e\e1\bb\0dj\7f-=m\08\97ld\91\01\\c\e6\f4Qkkbal\1c\d80e\85N\00b\f2\ed\95\06l{\a5\01\1b\c1\f4\08\82W\c4\0f\f5\c6\d9\b0eP\e9\b7\12\ea\b8\be\8b|\88\b9\fc\df\1d\ddbI-\da\15\f3|\d3\8ceL\d4\fbXa\b2M\ceQ\b5:t\00\bc\a3\e20\bb\d4A\a5\dfJ\d7\95\d8=m\c4\d1\a4\fb\f4\d6\d3j\e9iC\fc\d9n4F\88g\ad\d0\b8`\das-\04D\e5\1d\033_L\n\aa\c9|\0d\dd<q\05P\aaA\02\'\10\10\0b\be\86 \0c\c9%\b5hW\b3\85o \t\d4f\b9\9f\e4a\ce\0e\f9\de^\98\c9\d9)\"\98\d0\b0\b4\a8\d7\c7\17=\b3Y\81\0d\b4.;\\\bd\b7\adl\ba\c0 \83\b8\ed\b6\b3\bf\9a\0c\e2\b6\03\9a\d2\b1t9G\d5\ea\afw\d2\9d\15&\db\04\83\16\dcs\12\0bc\e3\84;d\94>jm\0d\a8Zjz\0b\cf\0e\e4\9d\ff\t\93\'\ae\00\n\b1\9e\07}D\93\0f\f0\d2\a3\08\87h\f2\01\1e\fe\c2\06i]Wb\f7\cbge\80q6l\19\e7\06knv\1b\d4\fe\e0+\d3\89Zz\da\10\ccJ\ddgo\df\b9\f9\f9\ef\be\8eC\be\b7\17\d5\8e\b0`\e8\a3\d6\d6~\93\d1\a1\c4\c2\d88R\f2\dfO\f1g\bb\d1gW\bc\a6\dd\06\b5?K6\b2H\da+\0d\d8L\1b\n\af\f6J\036`z\04A\c3\ef`\dfU\dfg\a8\ef\8en1y\beiF\8c\b3a\cb\1a\83f\bc\a0\d2o%6\e2hR\95w\0c\cc\03G\0b\bb\b9\16\02\"/&\05U\be;\ba\c5(\0b\bd\b2\92Z\b4+\04j\b3\\\a7\ff\d7\c21\cf\d0\b5\8b\9e\d9,\1d\ae\de[\b0\c2d\9b&\f2c\ec\9c\a3ju\n\93m\02\a9\06\t\9c?6\0e\eb\85g\07r\13W\00\05\82J\bf\95\14z\b8\e2\ae+\b1{8\1b\b6\0c\9b\8e\d2\92\0d\be\d5\e5\b7\ef\dc|!\df\db\0b\d4\d2\d3\86B\e2\d4\f1\f8\b3\ddhn\83\da\1f\cd\16\be\81[&\b9\f6\e1w\b0owG\b7\18\e6Z\08\88pj\0f\ff\ca;\06f\\\0b\01\11\ff\9ee\8fi\aeb\f8\d3\ffkaE\cfl\16x\e2\n\a0\ee\d2\0d\d7T\83\04N\c2\b3\039a&g\a7\f7\16`\d0MGiI\dbwn>Jj\d1\ae\dcZ\d6\d9f\0b\df@\f0;\d87S\ae\bc\a9\c5\9e\bb\de\7f\cf\b2G\e9\ff\b50\1c\f2\bd\bd\8a\c2\ba\ca0\93\b3S\a6\a3\b4$\056\d0\ba\93\06\d7\cd)W\deT\bfg\d9#.zf\b3\b8Ja\c4\02\1bh]\94+o*7\be\0b\b4\a1\8e\0c\c3\1b\df\05Z\8d\ef\02-")
(data (i32.const 2704) "slot game canceled\00")
(data (i32.const 2736) "onerror\00")
(data (i32.const 2752) "eosio\00")
(data (i32.const 2768) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 11232) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$1))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "assert_recover_key" (func $fimport$3 (param i32 i32 i32 i32 i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "current_time" (func $fimport$5 (result i64)))
(import "env" "db_end_i64" (func $fimport$6 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$12 (param i32)))
(import "env" "db_store_i64" (func $fimport$13 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$14 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$15 (param i32 i32)))
(import "env" "memcpy" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "read_transaction" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$21 (param i64)))
(import "env" "require_auth2" (func $fimport$22 (param i64 i64)))
(import "env" "send_inline" (func $fimport$23 (param i32 i32)))
(import "env" "sha256" (func $fimport$24 (param i32 i32 i32)))
(import "env" "transaction_size" (func $fimport$25 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN4slot9setconfigEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $5))
(export "_ZN4slot12removeconfigERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $11))
(export "_ZN4slot9setpubkeyERK10public_key" (func $13))
(export "_ZN4slot12removepubkeyERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $19))
(export "_ZN4slot11addpaytableERKNSt3__16vectorImNS0_9allocatorImEEEEm" (func $21))
(export "_ZN4slot11delpaytableENSt3__16vectorIyNS0_9allocatorIyEEEE" (func $30))
(export "_ZN4slot3betERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKyRKN5eosio5assetEy" (func $32))
(export "_ZN4slot8finalizeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyRK9signatureRK11checksum256RKyRKN5eosio5assetEyyRK10public_key" (func $49))
(export "_ZN4slot26get_game_result_multiplierERK9signature" (func $50))
(export "_ZN4slot10cancelgameEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $58))
(export "apply" (func $59))
(export "malloc" (func $77))
(export "free" (func $80))
(export "memcmp" (func $91))
(export "strlen" (func $92))
(table $0 10 10 anyfunc)
(elem (i32.const 0) $93 $49 $19 $32 $13 $58 $30 $11 $21 $5)



int_32 .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $84($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $93 ()
{
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$3 = *($0 + [4])
	$8 = *($3)
	$7 = ($8 + [144])
	$6 = *($7)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$4 = ($8 + [128])
	$5 = CALL db_lowerbound_i64(*($4), *(($8 + [136])), (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $40($4, $5)
	*($9 + [4]) = [0]
	*($9) = $4
	$6 = *(*(CALL $41($9) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($8 + [144])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [720])
	*($1) = *($7)
	*($1 + [8]) = *(*($3 + [4]))
	$8 = *($3 + [8])
	*($1 + [16]) = *($8)
	*(($1 + [24])) = *(($8 + [8]))
	*($1 + [32]) = *(*($3 + [12]))
	*($1 + [40]) = *(*($3 + [16]))
	$8 = *($3 + [20])
	*($1 + [48]) = *($8)
	*(($1 + [72])) = *(($8 + [24]))
	*(($1 + [64])) = *(($8 + [16]))
	*(($1 + [56])) = *(($8 + [8]))
	CALL memcpy(($1 + [80]), *($3 + [24]), [34])
	$8 = $10
	$3 = ($8 + [-128])
	*([0] + [4]) = $3
	*($9 + [4]) = $3
	*($9) = $3
	*($9 + [8]) = ($8 + [-14])
	CALL $42($9, $1)
	$6 = *($1)
	*($1 + [120]) = CALL db_store_i64(*($2 + [8]), (int_64)7035924439720001536, *(*($0 + [8])), $6, $3, [114])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [16])
}

void .FUNC _ZN4slot8finalizeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyRK9signatureRK11checksum256RKyRKN5eosio5assetEyyRK10public_key (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7, int_64 $8, int_32 $9)
{
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [560])
	*([0] + [4]) = $15
	*($15 + [536]) = $7
	*($15 + [528]) = $8
	CALL require_auth((int_64)-7101989278066649744)
	$12 = ($0 + [48])
	$13 = *(($0 + [76]))
	if ( ((int_32)$13 == (int_32)*(($0 + [72]))) ){ goto $label$2 }
	$13 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*(($13 + [36])) == (int_32)$12), [16])
	goto $label$1 
	
.LABEL $label$2
	$13 = [0]
	$14 = CALL db_find_i64(*($12), *(($0 + [56])), (int_64)7035936435300958208, (int_64)7035936435300958208)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$1 }
	$13 = CALL $15($12, $14)
	CALL eosio_assert(((int_32)*(($13 + [36])) == (int_32)$12), [16])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [1136])
	CALL memcpy(($15 + [48]), $13, [34])
	CALL memcpy(($15 + [488]), ($15 + [48]), [34])
	$10 = *(($0 + [152]))
	$14 = *(($0 + [156]))
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$3 }
	$13 = ($14 + [-24])
	$11 = ([0] - $10)
	
.LOOP $label$4:
	if ( ((int_64)*(*($13)) == (int_64)$2) ){ goto $label$3 }
	$14 = $13
	$12 = ($13 + [-24])
	$13 = $12
	if ( ((int_32)($12 + $11) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	$11 = ($0 + [128])
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$6 }
	$13 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*(($13 + [116])) == (int_32)$11), [16])
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	$12 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)7035924439720001536, $2)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$5 }
	$13 = CALL $40($11, $12)
	CALL eosio_assert(((int_32)*($13 + [116]) == (int_32)$11), [16])
	
.LABEL $label$5
	$10 = [0]
	$14 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($14, [1280])
	$12 = [0]
	if ( ((int_32)*($4) != (int_32)*($13 + [48])) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [1]) != (int_32)*(($13 + [49]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [2]) != (int_32)*(($13 + [50]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [3]) != (int_32)*(($13 + [51]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [4]) != (int_32)*(($13 + [52]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [5]) != (int_32)*(($13 + [53]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [6]) != (int_32)*(($13 + [54]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [7]) != (int_32)*(($13 + [55]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [8]) != (int_32)*(($13 + [56]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [9]) != (int_32)*(($13 + [57]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [10]) != (int_32)*(($13 + [58]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [11]) != (int_32)*(($13 + [59]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [12]) != (int_32)*(($13 + [60]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [13]) != (int_32)*(($13 + [61]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [14]) != (int_32)*(($13 + [62]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [15]) != (int_32)*(($13 + [63]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [16]) != (int_32)*(($13 + [64]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [17]) != (int_32)*(($13 + [65]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [18]) != (int_32)*(($13 + [66]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [19]) != (int_32)*(($13 + [67]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [20]) != (int_32)*(($13 + [68]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [21]) != (int_32)*(($13 + [69]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [22]) != (int_32)*(($13 + [70]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [23]) != (int_32)*(($13 + [71]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [24]) != (int_32)*(($13 + [72]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [25]) != (int_32)*(($13 + [73]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [26]) != (int_32)*(($13 + [74]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [27]) != (int_32)*(($13 + [75]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [28]) != (int_32)*(($13 + [76]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [29]) != (int_32)*(($13 + [77]))) ){ goto $label$7 }
	$12 = [0]
	if ( ((int_32)*($4 + [30]) != (int_32)*(($13 + [78]))) ){ goto $label$7 }
	$12 = ((int_32)*($4 + [31]) == (int_32)*(($13 + [79])))
	
.LABEL $label$7
	CALL eosio_assert($12, [1296])
	CALL eosio_assert(((int_64)*($5) == (int_64)*($13 + [8])), [1312])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($13 + [24]))), [1344])
	CALL eosio_assert(((int_64)*($6) == (int_64)*($13 + [16])), [1408])
	CALL eosio_assert(((int_64)*($13 + [32]) == (int_64)$7), [1440])
	CALL eosio_assert(((int_64)*($13 + [40]) == (int_64)$8), [1472])
	if ( ((int_32)*($9) != (int_32)*($15 + [488])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [1]) != (int_32)*($15 + [489])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [2]) != (int_32)*($15 + [490])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [3]) != (int_32)*($15 + [491])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [4]) != (int_32)*($15 + [492])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [5]) != (int_32)*($15 + [493])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [6]) != (int_32)*($15 + [494])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [7]) != (int_32)*($15 + [495])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [8]) != (int_32)*($15 + [496])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [9]) != (int_32)*($15 + [497])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [10]) != (int_32)*($15 + [498])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [11]) != (int_32)*($15 + [499])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [12]) != (int_32)*($15 + [500])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [13]) != (int_32)*($15 + [501])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [14]) != (int_32)*($15 + [502])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [15]) != (int_32)*($15 + [503])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [16]) != (int_32)*($15 + [504])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [17]) != (int_32)*($15 + [505])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [18]) != (int_32)*($15 + [506])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [19]) != (int_32)*($15 + [507])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [20]) != (int_32)*($15 + [508])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [21]) != (int_32)*($15 + [509])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [22]) != (int_32)*($15 + [510])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [23]) != (int_32)*($15 + [511])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [24]) != (int_32)*($15 + [512])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [25]) != (int_32)*($15 + [513])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [26]) != (int_32)*($15 + [514])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [27]) != (int_32)*($15 + [515])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [28]) != (int_32)*($15 + [516])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [29]) != (int_32)*($15 + [517])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [30]) != (int_32)*($15 + [518])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [31]) != (int_32)*($15 + [519])) ){ goto $label$8 }
	if ( ((int_32)*($9 + [32]) != (int_32)*($15 + [520])) ){ goto $label$8 }
	$10 = ((int_32)*($9 + [33]) == (int_32)*($15 + [521]))
	
.LABEL $label$8
	CALL eosio_assert($10, [1504])
	$10 = [0]
	CALL memset(($15 + [432]), [0], [56])
	CALL memcpy(($15 + [432]), $6, [8])
	CALL memcpy((($15 + [432]) | [8]), ($15 + [536]), [8])
	CALL memcpy((($15 + [432]) + [16]), ($15 + [528]), [8])
	CALL memcpy((($15 + [432]) + [24]), $4, [32])
	CALL sha256(($15 + [432]), [56], ($15 + [400]))
	CALL assert_recover_key(($15 + [400]), $3, [66], $9, [34])
	CALL _ZN4slot26get_game_result_multiplierERK9signature(($15 + [384]), $0, $3)
	$2 = *($6)
	CALL __multi3($15, $2, (int_64)$2 >> (int_64)63), *($15 + [396]), (int_64)0)
	$12 = ($6 + [8])
	$7 = *($12)
	$2 = *(($15 + [8]))
	$8 = *($15)
	CALL eosio_assert(( (uint_64)($8 <= (int_64)4611686018427387904) ? ((int_64)$2 < (int_64)0) : (int_64)($2 == 0) ), [1536])
	CALL eosio_assert(( ((uint_64)$8 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$2 > (int_64)-1) : ((int_64)$2 == (int_64)-1) ), [1568])
	CALL $34(($15 + [352]))
	$2 = *($0)
	CALL $89(($15 + [48]), $1)
	CALL memcpy((($15 + [48]) | [12]), $3, [66])
	*(($15 + [152])) = *(($4 + [24]))
	*(($15 + [144])) = *(($4 + [16]))
	*(($15 + [136])) = *(($4 + [8]))
	*($15 + [128]) = *($4)
	*(($15 + [184])) = *((($15 + [352]) + [24]))
	*(($15 + [176])) = *((($15 + [352]) + [16]))
	*(($15 + [168])) = *($15 + [360])
	*($15 + [160]) = *($15 + [352])
	*($15 + [192]) = *($5)
	*(($15 + [208])) = *($12)
	*($15 + [200]) = *($6)
	*($15 + [216]) = *($15 + [536])
	*($15 + [224]) = *($15 + [528])
	CALL memcpy(($15 + [232]), $9, [34])
	*(($15 + [276])) = [0]
	*($15 + [268 align=4]) = (int_64)0
	$12 = (*($15 + [388]) - *($15 + [384]))
	$4 = int_32($12 >> [2])
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$10 }
	$12 = CALL $84($12)
	*(($15 + [268])) = $12
	*(($6 = ($15 + [272]))) = $12
	*(($15 + [276])) = ($12 + ($4 << [2]))
	$9 = *($15 + [384])
	$4 = (*($15 + [388]) - $9)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($12, $9, $4)
	*($6) = (*($6) + $4)
	
.LABEL $label$11
	*(($15 + [296])) = $7
	*($15 + [288]) = $8
	*($15 + [312]) = (int_64)-7358209017970305920
	*($15 + [328]) = [0]
	*($15 + [280]) = *((($15 + [384]) + [12]))
	*($15 + [320]) = (int_64)-5003134536732475392
	*(($4 = ($15 + [332]))) = [0]
	*(($6 = ($15 + [336]))) = [0]
	*(($12 = CALL $84([16]))) = $2
	*($12 + [8]) = (int_64)3617214756542218240
	*((($15 + [312]) + [32])) = [0]
	$9 = ($12 + [16])
	*($6) = $9
	*($4) = $9
	*($15 + [328]) = $12
	*($15 + [340]) = [0]
	*(($15 + [348])) = [0]
	*($15 + [16]) = [0]
	*($15 + [544]) = ($15 + [16])
	*($15 + [32]) = ($15 + [48])
	CALL $51(($15 + [32]), ($15 + [544]))
	$12 = *($15 + [16])
	if ( ($12 == 0) ){ goto $label$13 }
	$4 = ($15 + [340])
	CALL $44($4, $12)
	$10 = *(($15 + [344]))
	$12 = *($4)
	goto $label$12 
	
.LABEL $label$13
	$12 = [0]
	
.LABEL $label$12
	*($15 + [36]) = $12
	*($15 + [32]) = $12
	*($15 + [40]) = $10
	*($15 + [16]) = ($15 + [32])
	*($15 + [544]) = ($15 + [48])
	CALL $52(($15 + [544]), ($15 + [16]))
	CALL $37(($15 + [32]), ($15 + [312]))
	$12 = *($15 + [32])
	CALL send_inline($12, (*($15 + [36]) - $12))
	$12 = *($15 + [32])
	if ( ($12 == 0) ){ goto $label$14 }
	*($15 + [36]) = $12
	CALL $85($12)
	
.LABEL $label$14
	$12 = *($15 + [340])
	if ( ($12 == 0) ){ goto $label$15 }
	*(($15 + [344])) = $12
	CALL $85($12)
	
.LABEL $label$15
	$12 = *($15 + [328])
	if ( ($12 == 0) ){ goto $label$16 }
	*(($15 + [332])) = $12
	CALL $85($12)
	
.LABEL $label$16
	$12 = *($15 + [268])
	if ( ($12 == 0) ){ goto $label$17 }
	*(($15 + [272])) = $12
	CALL $85($12)
	
.LABEL $label$17
	if ( ((*($15 + [48]) & [1]) == 0) ){ goto $label$18 }
	CALL $85(*($15 + [56]))
	
.LABEL $label$18
	if ( (*(($15 + [396])) == 0) ){ goto $label$19 }
	*($15 + [40]) = (int_64)3617214756542218240
	*($15 + [32]) = *($0)
	*(($15 + [24])) = [0]
	*($15 + [16]) = (int_64)0
	$12 = CALL strlen([1600])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$22 }
	*($15 + [16]) = ($12 << [1])
	$4 = (($15 + [16]) | [1])
	if ( $12 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$6 = (($12 + [16]) & [-16])
	$4 = CALL $84($6)
	*($15 + [16]) = ($6 | [1])
	*($15 + [24]) = $4
	*($15 + [20]) = $12
	
.LABEL $label$21
	CALL memcpy($4, [1600], $12)
	
.LABEL $label$20
	*(($4 + $12)) = [0]
	$2 = *(($13 + [8]))
	*(($15 + [72])) = $7
	*(($15 + [84])) = *($15 + [20 align=4])
	*($15 + [48]) = *($0)
	*($15 + [56]) = $2
	*($15 + [64]) = $8
	*($15 + [80]) = *($15 + [16])
	*($15 + [16]) = [0]
	*($15 + [20]) = [0]
	*((($15 + [16]) + [8])) = [0]
	$12 = CALL $36(($15 + [312]), ($15 + [32]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($15 + [48]))
	CALL $37(($15 + [544]), $12)
	$0 = *($15 + [544])
	CALL send_inline($0, (*($15 + [548]) - $0))
	$0 = *($15 + [544])
	if ( ($0 == 0) ){ goto $label$23 }
	*($15 + [548]) = $0
	CALL $85($0)
	
.LABEL $label$23
	$0 = *($12 + [28])
	if ( ($0 == 0) ){ goto $label$24 }
	*(($12 + [32])) = $0
	CALL $85($0)
	
.LABEL $label$24
	$0 = *($12 + [16])
	if ( ($0 == 0) ){ goto $label$25 }
	*(($12 + [20])) = $0
	CALL $85($0)
	
.LABEL $label$25
	if ( ((*(($15 + [80])) & [1]) == 0) ){ goto $label$26 }
	CALL $85(*(($15 + [88])))
	
.LABEL $label$26
	if ( ((*($15 + [16]) & [1]) == 0) ){ goto $label$19 }
	CALL $85(*(($15 + [24])))
	
.LABEL $label$19
	CALL eosio_assert($14, [432])
	CALL eosio_assert($14, [480])
	$12 = CALL db_next_i64(*($13 + [120]), ($15 + [48]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$27 }
	CALL $40($11, $12)
	
.LABEL $label$27
	CALL $53($11, $13)
	$13 = *($15 + [384])
	if ( ($13 == 0) ){ goto $label$28 }
	*($15 + [388]) = $13
	CALL $85($13)
	
.LABEL $label$28
	*([0] + [4]) = ($15 + [560])
	return (unreachable)
	
.LABEL $label$10
	CALL $88(($15 + [268]))
	
.LABEL $label$9
	CALL $86(($15 + [16]))
	(unreachable)
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [192])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [192])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [416])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [416])
	CALL memcpy(($1 + [48]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[33]), [416])
	CALL memcpy(($1 + [80]), *($0 + [4]), [34])
	*($0 + [4]) = (*($0 + [4]) + [34])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [192])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [192])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [192])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [192])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [192])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [192])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [192])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL memcpy(($3 + [6]), ($1 + [80]), [34])
	CALL memcpy(($3 + [40]), ($3 + [6]), [34])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[33]), [192])
	CALL memcpy(*($0 + [4]), ($3 + [40]), [34])
	*($0 + [4]) = (*($0 + [4]) + [34])
	*([0] + [4]) = ($3 + [80])
	return $0
}

int_32 .FUNC $41 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [120]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [848])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)7035924439720001536)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [784])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [784])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $40(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [384])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $84([128])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [1168])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [1024])
	*($4 + [116]) = $0
	CALL $43(($8 + [32]), $4)
	*($4 + [120]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [120])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $39($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $85($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [192])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [192])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [192])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [192])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $48(*($1), ($0 + [32]))
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [192])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [192])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [192])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [192])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [192])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $84($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $88($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $85($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $8 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [208])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [256])
	*($1) = *(*($3))
	CALL eosio_assert([1], [320])
	CALL eosio_assert([1], [192])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)4982871454518345729
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [128])
	*(($4 = CALL $84([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [192])
	CALL memcpy(($7 + [16]), $4, [8])
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)4982871454518345728, $2, (int_64)4982871454518345728, ($7 + [16]), [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4982871454518345729
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)4982871454518345728
	$5 = *($4 + [12])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4982871454518345728
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $10(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $85($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $6 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [16])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $7($0, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [16])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [80])
	CALL $8($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $9($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [384])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $84([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [416])
	CALL memcpy($5, $6, [8])
	*($5 + [12]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)4982871454518345728
	$6 = *($5 + [12])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)4982871454518345728
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $10(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$7
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $85($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN4slot9setconfigEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL require_auth((int_64)-7101989278066649744)
	*($3 + [8]) = $1
	CALL $6(($0 + [8]), ($3 + [8]), *($0))
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*(($3 + [36])) == (int_32)$0), [16])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7035936435300958208, (int_64)7035936435300958208)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $15($0, $3)
	CALL eosio_assert(((int_32)*(($3 + [36])) == (int_32)$0), [16])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [80])
	CALL $16($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $17($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [384])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $84([48])) + [36]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[33]), [416])
	CALL memcpy($5, $6, [34])
	*($5 + [40]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)7035936435300958208
	$6 = *($5 + [40])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)7035936435300958208
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $18(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$7
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $85($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [112])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*(($1 + [36])) == (int_32)$0), [208])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [256])
	CALL memcpy($1, *($3), [34])
	CALL eosio_assert([1], [320])
	CALL memcpy(($4 + [38]), $1, [34])
	CALL memcpy(($4 + [72]), ($4 + [38]), [34])
	CALL eosio_assert([1], [192])
	CALL memcpy($4, ($4 + [72]), [34])
	CALL db_update_i64(*(($1 + [40])), $2, $4, [34])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7035936435300958208) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7035936435300958209
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [112])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [128])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [128])
	*(($5 = CALL $84([48])) + [36]) = $1
	$3 = CALL memcpy($5, *($3), [34])
	CALL memcpy(($7 + [48]), $3, [34])
	CALL memcpy(($7 + [88]), ($7 + [48]), [34])
	CALL eosio_assert([1], [192])
	CALL memcpy($7, ($7 + [88]), [34])
	*($3 + [40]) = CALL db_store_i64(*($1 + [8]), (int_64)7035936435300958208, $2, (int_64)7035936435300958208, $7, [34])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7035936435300958208) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7035936435300958209
	
.LABEL $label$1
	*($7 + [48]) = $3
	*($7 + [88]) = (int_64)7035936435300958208
	$4 = *($3 + [40])
	*($7) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($5 + [8]) = (int_64)7035936435300958208
	*($5 + [16]) = $4
	*($7 + [48]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $18(($1 + [24]), ($7 + [48]), ($7 + [88]), $7)
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [48])
	*($7 + [48]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $85($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [128])
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $84(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $85($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $85($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN4slot12removeconfigERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	CALL require_auth((int_64)-7101989278066649744)
	$2 = ($0 + [8])
	$3 = *(($0 + [36]))
	if ( ((int_32)$3 == (int_32)*(($0 + [32]))) ){ goto $label$3 }
	$0 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [8]) == (int_32)$2), [16])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$0 = CALL db_find_i64(*($2), *(($0 + [16])), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $7($2, $0)
	CALL eosio_assert(((int_32)*($0 + [8]) == (int_32)$2), [16])
	
.LABEL $label$2
	CALL eosio_assert([1], [432])
	CALL eosio_assert([1], [480])
	$3 = CALL db_next_i64(*($0 + [12]), ($4 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	CALL $7($2, $3)
	
.LABEL $label$4
	CALL $12($2, $0)
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [512])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [560])
	$6 = ($0 + [28])
	$5 = *($6)
	CALL eosio_assert(((int_32)$5 != (int_32)*($0 + [24])), [624])
	$4 = ($5 + [-24])
	$6 = *($6)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	$2 = ([0] - $6)
	
.LOOP $label$4:
	$6 = ($4 + [24])
	$3 = *($6)
	*($6) = [0]
	$5 = *($4)
	*($4) = $3
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $85($5)
	
.LABEL $label$5
	*(($4 + [16])) = *(($4 + [40]))
	*(($4 + [8])) = *(($4 + [32]))
	$4 = $6
	if ( ((int_32)($6 + $2) != (int_32)[-24]) ){ goto $label$4 }
	$5 = *(($0 + [28]))
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = $4
	
.LABEL $label$2
	
.LOOP $label$6:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $85($4)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$1
	*(($0 + [28])) = $6
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC _ZN4slot9setpubkeyERK10public_key (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = (*([0] + [4]) - [48])
	*([0] + [4]) = $2
	CALL require_auth((int_64)-7101989278066649744)
	CALL memcpy(($2 + [8]), $1, [34])
	CALL $14(($0 + [48]), ($2 + [8]), *($0))
	*([0] + [4]) = ($2 + [48])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [896])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [3])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $76($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [3]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]), [416])
	CALL memcpy($4, *($5), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $84(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $85($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $85($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN4slot12removepubkeyERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	CALL require_auth((int_64)-7101989278066649744)
	$2 = ($0 + [48])
	$3 = *(($0 + [76]))
	if ( ((int_32)$3 == (int_32)*(($0 + [72]))) ){ goto $label$3 }
	$0 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*(($0 + [36])) == (int_32)$2), [16])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$0 = CALL db_find_i64(*($2), *(($0 + [56])), (int_64)7035936435300958208, (int_64)7035936435300958208)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $15($2, $0)
	CALL eosio_assert(((int_32)*(($0 + [36])) == (int_32)$2), [16])
	
.LABEL $label$2
	CALL eosio_assert([1], [432])
	CALL eosio_assert([1], [480])
	$3 = CALL db_next_i64(*($0 + [40]), ($4 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	CALL $15($2, $3)
	
.LABEL $label$4
	CALL $20($2, $0)
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC _ZN4slot10cancelgameEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [144])
	*([0] + [4]) = $10
	CALL require_auth((int_64)-7101989278066649744)
	$9 = *(($0 + [152]))
	$8 = *(($0 + [156]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$3 = ([0] - $9)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [128])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*(($7 + [116])) == (int_32)$3), [16])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$4 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $40($3, $4)
	CALL eosio_assert(((int_32)*($7 + [116]) == (int_32)$3), [16])
	
.LABEL $label$3
	$5 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($5, [1280])
	*($10 + [80]) = (int_64)3617214756542218240
	*($10 + [72]) = *($0)
	*(($10 + [16])) = [0]
	*($10 + [8]) = (int_64)0
	$4 = CALL strlen([2704])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$5 }
	$8 = ($7 + [16])
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$8 }
	*($10 + [8]) = ($4 << [1])
	$9 = (($10 + [8]) | [1])
	if ( $4 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$6 = (($4 + [16]) & [-16])
	$9 = CALL $84($6)
	*($10 + [8]) = ($6 | [1])
	*($10 + [16]) = $9
	*($10 + [12]) = $4
	
.LABEL $label$7
	CALL memcpy($9, [2704], $4)
	
.LABEL $label$6
	*(($9 + $4)) = [0]
	$1 = *(($7 + [8]))
	*(($10 + [48])) = *(($8 + [8]))
	*(($10 + [44])) = *(($8 + [4]))
	*(($10 + [52])) = *(($8 + [12]))
	*($10 + [24]) = *($0)
	*($10 + [32]) = $1
	*($10 + [40]) = *($8)
	*(($10 + [60])) = *($10 + [12 align=4])
	*($10 + [56]) = *($10 + [8])
	*($10 + [8]) = [0]
	*($10 + [12]) = [0]
	*((($10 + [8]) + [8])) = [0]
	$4 = CALL $36(($10 + [88]), ($10 + [72]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($10 + [24]))
	CALL $37(($10 + [128]), $4)
	$8 = *($10 + [128])
	CALL send_inline($8, (*($10 + [132]) - $8))
	$8 = *($10 + [128])
	if ( ($8 == 0) ){ goto $label$9 }
	*($10 + [132]) = $8
	CALL $85($8)
	
.LABEL $label$9
	$8 = *($4 + [28])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($4 + [32])) = $8
	CALL $85($8)
	
.LABEL $label$10
	$8 = *($4 + [16])
	if ( ($8 == 0) ){ goto $label$11 }
	*(($4 + [20])) = $8
	CALL $85($8)
	
.LABEL $label$11
	if ( ((*(($10 + [56])) & [1]) == 0) ){ goto $label$12 }
	CALL $85(*(($10 + [64])))
	
.LABEL $label$12
	if ( ((*($10 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL $85(*(($10 + [16])))
	
.LABEL $label$13
	CALL eosio_assert($5, [432])
	CALL eosio_assert($5, [480])
	$4 = CALL db_next_i64(*($7 + [120]), ($10 + [24]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$14 }
	CALL $40($3, $4)
	
.LABEL $label$14
	CALL $53($3, $7)
	*([0] + [4]) = ($10 + [144])
	return (unreachable)
	
.LABEL $label$5
	CALL $86(($10 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [320])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2736]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2752]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [2768])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2736]
	$7 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*(($9 + [168])) = $0
	*(($9 + [176])) = (int_64)-1
	*(($9 + [184])) = (int_64)0
	*(($9 + [192])) = [0]
	*($9 + [160]) = $0
	*($9 + [152]) = $0
	*($9 + [200]) = $0
	*(($9 + [208])) = $0
	*(($9 + [216])) = (int_64)-1
	*(($9 + [224])) = [0]
	*(($9 + [228])) = [0]
	*(($9 + [232])) = [0]
	*($9 + [240]) = $0
	*(($9 + [248])) = $0
	*(($9 + [256])) = (int_64)-1
	*(($9 + [264])) = [0]
	*(($9 + [268])) = [0]
	*(($9 + [272])) = [0]
	*($9 + [280]) = $0
	*(($9 + [288])) = $0
	*(($9 + [296])) = (int_64)-1
	*(($9 + [304])) = [0]
	*(($9 + [308])) = [0]
	*(($9 + [312])) = [0]
	if ( ((int_64)$2 <= (int_64)3626333913350951935) ){ goto $label$30 }
	if ( ((int_64)$2 <= (int_64)4730614992256270335) ){ goto $label$29 }
	if ( ((int_64)$2 == (int_64)4730614992256270336) ){ goto $label$27 }
	if ( ((int_64)$2 == (int_64)5378234168398074880) ){ goto $label$26 }
	if ( ((int_64)$2 != (int_64)6604081059879452672) ){ goto $label$22 }
	*($9 + [92]) = [0]
	*($9 + [88]) = [1]
	*($9 + [64 align=4]) = *($9 + [88])
	CALL $66(($9 + [152]), ($9 + [64]))
	goto $label$22 
	
.LABEL $label$30
	if ( ((int_64)$2 > (int_64)-4417316219328135169) ){ goto $label$28 }
	if ( ((int_64)$2 == (int_64)-4997502822907192128) ){ goto $label$25 }
	if ( ((int_64)$2 != (int_64)-4997502815833418272) ){ goto $label$22 }
	*($9 + [124]) = [0]
	*($9 + [120]) = [2]
	*($9 + [32 align=4]) = *($9 + [120])
	CALL $61(($9 + [152]), ($9 + [32]))
	goto $label$22 
	
.LABEL $label$29
	if ( ((int_64)$2 == (int_64)3626333913350951936) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)4229443000054317056) ){ goto $label$22 }
	*($9 + [100]) = [0]
	*($9 + [96]) = [3]
	*($9 + [56 align=4]) = *($9 + [96])
	CALL $65(($9 + [152]), ($9 + [56]))
	goto $label$22 
	
.LABEL $label$28
	if ( ((int_64)$2 == (int_64)-4417316219328135168) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)-4417084425906421760) ){ goto $label$22 }
	*($9 + [132]) = [0]
	*($9 + [128]) = [4]
	*($9 + [24 align=4]) = *($9 + [128])
	CALL $62(($9 + [152]), ($9 + [24]))
	goto $label$22 
	
.LABEL $label$27
	*($9 + [84]) = [0]
	*($9 + [80]) = [5]
	*($9 + [72 align=4]) = *($9 + [80])
	CALL $60(($9 + [152]), ($9 + [72]))
	goto $label$22 
	
.LABEL $label$26
	*($9 + [108]) = [0]
	*($9 + [104]) = [6]
	*($9 + [48 align=4]) = *($9 + [104])
	CALL $64(($9 + [152]), ($9 + [48]))
	goto $label$22 
	
.LABEL $label$25
	*($9 + [140]) = [0]
	*($9 + [136]) = [7]
	*($9 + [16 align=4]) = *($9 + [136])
	CALL $61(($9 + [152]), ($9 + [16]))
	goto $label$22 
	
.LABEL $label$24
	*($9 + [116]) = [0]
	*($9 + [112]) = [8]
	*($9 + [40 align=4]) = *($9 + [112])
	CALL $63(($9 + [152]), ($9 + [40]))
	goto $label$22 
	
.LABEL $label$23
	*($9 + [148]) = [0]
	*($9 + [144]) = [9]
	*($9 + [8 align=4]) = *($9 + [144])
	CALL $60(($9 + [152]), ($9 + [8]))
	
.LABEL $label$22
	CALL $67(($9 + [152]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [320])
}

void .FUNC _ZN4slot26get_game_result_multiplierERK9signature (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	$7 = [0]
	*(($3 = CALL $84([12])) + [8]) = [0]
	*($3) = (int_64)0
	*(($4 = CALL $84([12])) + [8]) = [0]
	*($4) = (int_64)0
	CALL sha256($2, [66], $8)
	CALL memcpy(($8 + [32]), $8, [32])
	$6 = ($4 + [12])
	$2 = [-1]
	
.LOOP $label$1:
	$2 = ((int_32)*(((((int_32)*(($8 + $7)) ^ (int_32)($2 & [255])) << [2]) + [1680])) ^ (int_32)uint_32($2 >> [8]))
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)[32]) ){ goto $label$1 }
	$7 = [-1]
	$2 = ((uint_32)((int_32)$2 ^ (int_32)[-1]) % (uint_32)[12])
	*($3) = $2
	*($4) = ( [1] ? $2 : ($2 & [1]) )
	CALL sha256(($8 + [32]), [32], $8)
	CALL memcpy(($8 + [32]), $8, [32])
	$2 = [0]
	
.LOOP $label$2:
	$7 = ((int_32)*(((((int_32)*(($8 + $2)) ^ (int_32)($7 & [255])) << [2]) + [1680])) ^ (int_32)uint_32($7 >> [8]))
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	$2 = [-1]
	$7 = ((uint_32)((int_32)$7 ^ (int_32)[-1]) % (uint_32)[12])
	*(($3 + [4])) = $7
	*(($4 + [4])) = ( [1] ? $7 : ($7 & [1]) )
	CALL sha256(($8 + [32]), [32], $8)
	CALL memcpy(($8 + [32]), $8, [32])
	$7 = [0]
	
.LOOP $label$3:
	$2 = ((int_32)*(((((int_32)*(($8 + $7)) ^ (int_32)($2 & [255])) << [2]) + [1680])) ^ (int_32)uint_32($2 >> [8]))
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)[32]) ){ goto $label$3 }
	$2 = ((uint_32)((int_32)$2 ^ (int_32)[-1]) % (uint_32)[12])
	*($3 + [8]) = $2
	*($4 + [8]) = ( [1] ? $2 : ($2 & [1]) )
	CALL $81($4, $6, $8)
	$2 = CALL $84([12])
	*($0) = $2
	$7 = ($2 + [12])
	*($0 + [8]) = $7
	CALL memcpy($2, $3, [12])
	*($0 + [12]) = [0]
	*($0 + [4]) = $7
	$2 = CALL db_lowerbound_i64(*($1 + [88]), *(($1 + [96])), (int_64)-6215650152938471424, (int_64)0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$8 }
	$5 = ($1 + [88])
	$6 = CALL $22($5, $2)
	
.LOOP $label$10:
	$2 = *($6 + [8])
	$1 = *(($6 + [12]))
	if ( ((int_32)($1 - $2) != (int_32)[12]) ){ goto $label$11 }
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$9 }
	$7 = $4
	
.LOOP $label$12:
	if ( ((int_32)*($2) != (int_32)*($7)) ){ goto $label$11 }
	$7 = ($7 + [4])
	$2 = ($2 + [4])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$12 }
	goto $label$9 
	
.LABEL $label$11
	CALL eosio_assert([1], [480])
	$2 = CALL db_next_i64(*($6 + [28]), $8)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $22($5, $2)
	goto $label$10 
	
.LABEL $label$9
	$2 = *($6 + [20])
	goto $label$6 
	
.LABEL $label$8
	*(($0 + [12])) = [0]
	goto $label$5 
	
.LABEL $label$7
	$2 = [0]
	
.LABEL $label$6
	*(($0 + [12])) = $2
	if ( ($4 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $85($4)
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$13 }
	CALL $85($3)
	
.LABEL $label$13
	*([0] + [4]) = ($8 + [64])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [272])
	*([0] + [4]) = $7
	$6 = *($2)
	$2 = *($0)
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	$3 = *($1)
	$6 = *($3)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($3) = $6
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $6)
	
.LABEL $label$2
	$6 = *($0)
	*($7) = *($1)
	*($7 + [12]) = ($6 + [13])
	*($7 + [8]) = ($6 + [12])
	*($7 + [16]) = ($6 + [14])
	*($7 + [20]) = ($6 + [15])
	*($7 + [24]) = ($6 + [16])
	*($7 + [28]) = ($6 + [17])
	*($7 + [32]) = ($6 + [18])
	*($7 + [36]) = ($6 + [19])
	*($7 + [40]) = ($6 + [20])
	*($7 + [44]) = ($6 + [21])
	*($7 + [48]) = ($6 + [22])
	*($7 + [52]) = ($6 + [23])
	*($7 + [56]) = ($6 + [24])
	*($7 + [60]) = ($6 + [25])
	*($7 + [64]) = ($6 + [26])
	*($7 + [68]) = ($6 + [27])
	*($7 + [72]) = ($6 + [28])
	*($7 + [76]) = ($6 + [29])
	*($7 + [80]) = ($6 + [30])
	*($7 + [84]) = ($6 + [31])
	*($7 + [88]) = ($6 + [32])
	*($7 + [92]) = ($6 + [33])
	*($7 + [96]) = ($6 + [34])
	*($7 + [100]) = ($6 + [35])
	*($7 + [104]) = ($6 + [36])
	*($7 + [108]) = ($6 + [37])
	*($7 + [112]) = ($6 + [38])
	*($7 + [116]) = ($6 + [39])
	*($7 + [120]) = ($6 + [40])
	*($7 + [124]) = ($6 + [41])
	*($7 + [128]) = ($6 + [42])
	*($7 + [132]) = ($6 + [43])
	*($7 + [136]) = ($6 + [44])
	*($7 + [140]) = ($6 + [45])
	*($7 + [144]) = ($6 + [46])
	*($7 + [148]) = ($6 + [47])
	*($7 + [152]) = ($6 + [48])
	*($7 + [156]) = ($6 + [49])
	*($7 + [160]) = ($6 + [50])
	*($7 + [164]) = ($6 + [51])
	*($7 + [168]) = ($6 + [52])
	*($7 + [172]) = ($6 + [53])
	*($7 + [176]) = ($6 + [54])
	*($7 + [180]) = ($6 + [55])
	*($7 + [184]) = ($6 + [56])
	*($7 + [188]) = ($6 + [57])
	*($7 + [192]) = ($6 + [58])
	*($7 + [196]) = ($6 + [59])
	*($7 + [200]) = ($6 + [60])
	*($7 + [204]) = ($6 + [61])
	*($7 + [208]) = ($6 + [62])
	*($7 + [212]) = ($6 + [63])
	*($7 + [216]) = ($6 + [64])
	*($7 + [220]) = ($6 + [65])
	*($7 + [224]) = ($6 + [66])
	*($7 + [228]) = ($6 + [67])
	*($7 + [232]) = ($6 + [68])
	*($7 + [236]) = ($6 + [69])
	*($7 + [240]) = ($6 + [70])
	*($7 + [244]) = ($6 + [71])
	*($7 + [248]) = ($6 + [72])
	*($7 + [252]) = ($6 + [73])
	*($7 + [256]) = ($6 + [74])
	*($7 + [260]) = ($6 + [75])
	*($7 + [264]) = ($6 + [76])
	*($7 + [268]) = ($6 + [77])
	CALL $57(($7 + [8]), $7)
	*(($2 = *($1))) = (*($2) + [32])
	*(($2 = *($1))) = (*($2) + [32])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [16])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [34])
	$0 = *($6 + [220])
	$2 = *(($6 + [224]))
	$4 = ($2 - $0)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [2]))
	$3 = *($1)
	$6 = *($3)
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$6 = (($4 & [-4]) + $6)
	
.LABEL $label$4
	*($3) = $6
	*(($6 = *($1))) = (*($6) + [4])
	*(($6 = *($1))) = (*($6) + [16])
	*([0] + [4]) = ($7 + [272])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [272])
	*([0] + [4]) = $3
	CALL $48(*($1), *($0))
	$0 = *($0)
	*($3) = *($1)
	*($3 + [12]) = ($0 + [13])
	*($3 + [8]) = ($0 + [12])
	*($3 + [16]) = ($0 + [14])
	*($3 + [20]) = ($0 + [15])
	*($3 + [24]) = ($0 + [16])
	*($3 + [28]) = ($0 + [17])
	*($3 + [32]) = ($0 + [18])
	*($3 + [36]) = ($0 + [19])
	*($3 + [40]) = ($0 + [20])
	*($3 + [44]) = ($0 + [21])
	*($3 + [48]) = ($0 + [22])
	*($3 + [52]) = ($0 + [23])
	*($3 + [56]) = ($0 + [24])
	*($3 + [60]) = ($0 + [25])
	*($3 + [64]) = ($0 + [26])
	*($3 + [68]) = ($0 + [27])
	*($3 + [72]) = ($0 + [28])
	*($3 + [76]) = ($0 + [29])
	*($3 + [80]) = ($0 + [30])
	*($3 + [84]) = ($0 + [31])
	*($3 + [88]) = ($0 + [32])
	*($3 + [92]) = ($0 + [33])
	*($3 + [96]) = ($0 + [34])
	*($3 + [100]) = ($0 + [35])
	*($3 + [104]) = ($0 + [36])
	*($3 + [108]) = ($0 + [37])
	*($3 + [112]) = ($0 + [38])
	*($3 + [116]) = ($0 + [39])
	*($3 + [120]) = ($0 + [40])
	*($3 + [124]) = ($0 + [41])
	*($3 + [128]) = ($0 + [42])
	*($3 + [132]) = ($0 + [43])
	*($3 + [136]) = ($0 + [44])
	*($3 + [140]) = ($0 + [45])
	*($3 + [144]) = ($0 + [46])
	*($3 + [148]) = ($0 + [47])
	*($3 + [152]) = ($0 + [48])
	*($3 + [156]) = ($0 + [49])
	*($3 + [160]) = ($0 + [50])
	*($3 + [164]) = ($0 + [51])
	*($3 + [168]) = ($0 + [52])
	*($3 + [172]) = ($0 + [53])
	*($3 + [176]) = ($0 + [54])
	*($3 + [180]) = ($0 + [55])
	*($3 + [184]) = ($0 + [56])
	*($3 + [188]) = ($0 + [57])
	*($3 + [192]) = ($0 + [58])
	*($3 + [196]) = ($0 + [59])
	*($3 + [200]) = ($0 + [60])
	*($3 + [204]) = ($0 + [61])
	*($3 + [208]) = ($0 + [62])
	*($3 + [212]) = ($0 + [63])
	*($3 + [216]) = ($0 + [64])
	*($3 + [220]) = ($0 + [65])
	*($3 + [224]) = ($0 + [66])
	*($3 + [228]) = ($0 + [67])
	*($3 + [232]) = ($0 + [68])
	*($3 + [236]) = ($0 + [69])
	*($3 + [240]) = ($0 + [70])
	*($3 + [244]) = ($0 + [71])
	*($3 + [248]) = ($0 + [72])
	*($3 + [252]) = ($0 + [73])
	*($3 + [256]) = ($0 + [74])
	*($3 + [260]) = ($0 + [75])
	*($3 + [264]) = ($0 + [76])
	*($3 + [268]) = ($0 + [77])
	CALL $54(($3 + [8]), $3)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[31]), [192])
	CALL memcpy(*($2 + [4]), ($0 + [80]), [32])
	*($2 + [4]) = (*($2 + [4]) + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[31]), [192])
	CALL memcpy(*($2 + [4]), ($0 + [112]), [32])
	*($2 + [4]) = (*($2 + [4]) + [32])
	*($3 + [8]) = $0
	CALL $55(($3 + [8]), $1)
	*([0] + [4]) = ($3 + [272])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [512])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [560])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [624])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $85($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $85($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [120])))
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [100])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [104])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [108])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [112])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [116])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [120])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [124])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [128])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [132])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [136])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [140])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [144])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [148])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [152])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [156])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [160])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [164])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [168])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [172])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [176])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [180])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [184])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [188])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [192])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [196])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [200])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [204])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [208])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [212])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [216])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [220])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [224])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [228])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [232])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [236])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [240])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [244])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [248])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [252])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [256])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [192])
	CALL memcpy(*($0 + [4]), $2, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $34 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = *([0] + [4])
	$1 = ($2 - ((CALL transaction_size() + [15]) & [-16]))
	*([0] + [4]) = $1
	CALL read_transaction($1, CALL $fimport$25())
	CALL sha256($1, CALL $fimport$25(), $0)
	*([0] + [4]) = $2
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	$2 = *($1)
	CALL memcpy(($3 + [6]), (*($0) + [184]), [34])
	CALL memcpy(($3 + [40]), ($3 + [6]), [34])
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[33]), [192])
	CALL memcpy(*($2 + [4]), ($3 + [40]), [34])
	*($2 + [4]) = (*($2 + [4]) + [34])
	$0 = *($0)
	CALL $27(*($1), ($0 + [220]))
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [192])
	CALL memcpy(*($2 + [4]), ($0 + [232]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [192])
	CALL memcpy(*($2 + [4]), ($0 + [240]), [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((int_32)(*($2 + [8]) - $1) > (int_32)[7]), [192])
	CALL memcpy(*($2 + [4]), ($0 + [248]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	*([0] + [4]) = ($3 + [80])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($1 = *($1))) = (*($1) + [1])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $84([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [1220]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $90($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $87($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [2]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [2])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$6 = int_32($7 >> [1])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $84(($6 << [2]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = [0]
	$6 = ($6 + [4])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [2]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $88($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [2]))
	$2 = ($7 + ($4 << [2]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [4])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [2]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $85($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [896])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [2])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $29($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [2]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	$2 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($2) - $7) > (uint_32)[3]), [416])
	CALL memcpy($4, *($5), [4])
	$7 = (*($5) + [4])
	*($5) = $7
	$4 = ($4 + [4])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [192])
	CALL memcpy(*($3 + [4]), ($2 + [144]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [192])
	CALL memcpy(*($3 + [4]), ($0 + [152]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [192])
	CALL memcpy(*($3 + [4]), ($0 + [160]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [192])
	CALL memcpy(*($3 + [4]), ($0 + [168]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [192])
	CALL memcpy(*($3 + [4]), ($0 + [176]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($4 + [8]) = $0
	CALL $56(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC _ZN4slot11addpaytableERKNSt3__16vectorImNS0_9allocatorImEEEEm (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	*([0] + [4]) = $8
	*($8 + [40]) = $2
	CALL require_auth((int_64)-7101989278066649744)
	*($8 + [32]) = [0]
	*($8 + [24]) = (int_64)0
	$4 = [0]
	$2 = [0]
	$7 = (*($1 + [4]) - *($1))
	$6 = int_32($7 >> [2])
	if ( ($6 == 0) ){ goto $label$2 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$2 = CALL $84($7)
	*(($8 + [32])) = ($2 + ($6 << [2]))
	*($8 + [24]) = $2
	*($8 + [28]) = $2
	$4 = *($1)
	$1 = (*(($1 + [4])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($2, $4, $1)
	$4 = ($2 + $1)
	*($8 + [28]) = $4
	goto $label$2 
	
.LABEL $label$3
	$4 = $2
	
.LABEL $label$2
	CALL $81($2, $4, ($8 + [48]))
	$3 = ($0 + [88])
	$2 = CALL db_lowerbound_i64(*($0 + [88]), *(($0 + [96])), (int_64)-6215650152938471424, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $22($3, $2)
	
.LOOP $label$5:
	$7 = [1]
	$1 = *($8 + [24])
	$2 = *($6 + [8])
	$4 = *(($6 + [12]))
	if ( ((int_32)($4 - $2) != (int_32)(*($8 + [28]) - $1)) ){ goto $label$6 }
	$7 = [0]
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$8:
	if ( ((int_32)*($2) != (int_32)*($1)) ){ goto $label$7 }
	$1 = ($1 + [4])
	$2 = ($2 + [4])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [1]
	
.LABEL $label$6
	CALL eosio_assert($7, [688])
	CALL eosio_assert([1], [480])
	$2 = CALL db_next_i64(*($6 + [28]), ($8 + [48]))
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL $22($3, $2)
	goto $label$5 
	
.LABEL $label$4
	$5 = *($0)
	*($8 + [8]) = $0
	*($8 + [12]) = ($8 + [24])
	*($8 + [16]) = ($8 + [40])
	*($8 + [72]) = $5
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$4()), [128])
	*($8 + [48]) = $3
	*($8 + [52]) = ($8 + [8])
	*($8 + [56]) = ($8 + [72])
	*(($2 = CALL $84([40])) + [16]) = [0]
	*($2 + [8 align=4]) = (int_64)0
	*($2 + [24]) = $3
	CALL $23(($8 + [48]), $2)
	*($8 + [64]) = $2
	$5 = *($2)
	*($8 + [48]) = $5
	$4 = *($2 + [28])
	*($8 + [44]) = $4
	$6 = ($0 + [116])
	$1 = *($6)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [120]))) ){ goto $label$10 }
	*($1 + [8]) = $5
	*($1 + [16]) = $4
	*($8 + [64]) = [0]
	*($1) = $2
	*($6) = ($1 + [24])
	goto $label$9 
	
.LABEL $label$10
	CALL $24(($0 + [112]), ($8 + [64]), ($8 + [48]), ($8 + [44]))
	
.LABEL $label$9
	$2 = *($8 + [64])
	*($8 + [64]) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	$1 = *($2 + [8])
	if ( ($1 == 0) ){ goto $label$12 }
	*(($2 + [12])) = $1
	CALL $85($1)
	
.LABEL $label$12
	CALL $85($2)
	
.LABEL $label$11
	$2 = *($8 + [24])
	if ( ($2 == 0) ){ goto $label$13 }
	*($8 + [28]) = $2
	CALL $85($2)
	
.LABEL $label$13
	*([0] + [4]) = ($8 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $88(($8 + [24]))
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*(($1 + [36])) == (int_32)$0), [512])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [560])
	$6 = ($0 + [28])
	$5 = *($6)
	CALL eosio_assert(((int_32)$5 != (int_32)*($0 + [24])), [624])
	$4 = ($5 + [-24])
	$6 = *($6)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	$2 = ([0] - $6)
	
.LOOP $label$4:
	$6 = ($4 + [24])
	$3 = *($6)
	*($6) = [0]
	$5 = *($4)
	*($4) = $3
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $85($5)
	
.LABEL $label$5
	*(($4 + [16])) = *(($4 + [40]))
	*(($4 + [8])) = *(($4 + [32]))
	$4 = $6
	if ( ((int_32)($6 + $2) != (int_32)[-24]) ){ goto $label$4 }
	$5 = *(($0 + [28]))
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = $4
	
.LABEL $label$2
	
.LOOP $label$6:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $85($4)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$1
	*(($0 + [28])) = $6
	CALL db_remove_i64(*(($1 + [40])))
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	$2 = *($0)
	$9 = *($0 + [4])
	$7 = *($9)
	$5 = ($7 + [104])
	$8 = *($5)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$3 = ($7 + [88])
	$4 = CALL db_lowerbound_i64(*($3), *(($7 + [96])), (int_64)-6215650152938471424, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $22($3, $4)
	*($10 + [4]) = [0]
	*($10) = $3
	$8 = *(*(CALL $25($10) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($7 + [104])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [720])
	*($1) = *($5)
	$7 = [8]
	$5 = *($9 + [4])
	$3 = ($1 + [8])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$3 }
	CALL $26($3, *($5), *($5 + [4]))
	
.LABEL $label$3
	*($1 + [20]) = *(*($9 + [8]))
	$5 = *($3)
	$9 = *(($1 + [12]))
	$6 = ($9 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [2]))
	$4 = ($1 + [20])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$5 }
	$7 = (($6 & [-4]) + $7)
	
.LABEL $label$5
	$5 = ($7 + [4])
	if ( ($5 <= [513]) ){ goto $label$7 }
	$9 = CALL malloc($5)
	goto $label$6 
	
.LABEL $label$7
	$9 = ($11 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$6
	*($10) = $9
	*($10 + [8]) = ($9 + $5)
	CALL eosio_assert(((int_32)($7 + [4]) > (int_32)[7]), [192])
	CALL memcpy($9, $1, [8])
	*($10 + [4]) = ($9 + [8])
	$7 = CALL $27($10, $3)
	CALL eosio_assert(((int_32)(*($7 + [8]) - *($7 + [4])) > (int_32)[3]), [192])
	CALL memcpy(*($7 + [4]), $4, [4])
	*($7 + [4]) = (*($7 + [4]) + [4])
	$8 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-6215650152938471424, *(*($0 + [8])), $8, $9, $5)
	if ( ($5 <= [513]) ){ goto $label$8 }
	CALL free($9)
	
.LABEL $label$8
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$9 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [384])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $84([40])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [24]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [416])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	$4 = CALL $28(($8 + [32]), ($6 + [8]))
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [416])
	CALL memcpy(($6 + [20]), *($4 + [4]), [4])
	*($6 + [28]) = $1
	*($4 + [4]) = (*($4 + [4]) + [4])
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $24(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $85($7)
	
.LABEL $label$10
	CALL $85($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [28]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [848])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-6215650152938471424)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [784])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [784])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $22(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $84(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $85($6)
	
.LABEL $label$11
	CALL $85($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $85($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [2]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [192])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[3]), [192])
	$2 = ($0 + [4])
	CALL memcpy(*($2), $5, [4])
	$7 = (*($2) + [4])
	*($2) = $7
	$5 = ($5 + [4])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [2])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [2])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $85($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$5 = [1073741823]
	if ( ((uint_32)int_32($8 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [1])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[1073741824]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [2])
	$5 = CALL $84($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [2])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [2])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [2]))
	return (unreachable)
	
.LABEL $label$1
	CALL $88($0)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [352])
	*([0] + [4]) = $9
	CALL $89(($9 + [168]), $1)
	$2 = *($1 + [16])
	CALL memcpy(($9 + [102]), ($1 + [24]), [66])
	*(($5 = (($9 + [64]) + [24]))) = *(($1 + [120]))
	*(($6 = (($9 + [64]) + [16]))) = *(($1 + [112]))
	*($9 + [72]) = *(($1 + [104]))
	*($9 + [64]) = *($1 + [96])
	$7 = *($1 + [128])
	*(($8 = (($9 + [48]) + [8]))) = *(($1 + [144]))
	*($9 + [48]) = *($1 + [136])
	$4 = *($1 + [160])
	$3 = *($1 + [152])
	CALL memcpy(($9 + [14]), ($1 + [168]), [34])
	CALL memcpy(($9 + [304]), ($9 + [14]), [34])
	*((($9 + [256]) + [24])) = *($5)
	*((($9 + [256]) + [16])) = *($6)
	*((($9 + [288]) + [8])) = *($8)
	*($9 + [288]) = *($9 + [48])
	*($9 + [264]) = *($9 + [72])
	*($9 + [256]) = *($9 + [64])
	CALL memcpy(($9 + [184]), ($9 + [102]), [66])
	*($9 + [344]) = $7
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 ($9 + [168])), (int_32 $2), (int_64 ($9 + [184])), (int_32 ($9 + [256])), (int_32 ($9 + [344])), (int_32 ($9 + [288])), (int_32 $3), (int_64 $4), (int_64 ($9 + [304])), (int_32 $1))
	if ( ((*($9 + [168]) & [1]) == 0) ){ goto $label$2 }
	CALL $85(*($9 + [176]))
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [352])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [272])
	*([0] + [4]) = $3
	CALL $70(*($1), *($0))
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [416])
	CALL memcpy(($0 + [16]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	*($3) = *($1)
	*($3 + [12]) = ($0 + [25])
	*($3 + [8]) = ($0 + [24])
	*($3 + [16]) = ($0 + [26])
	*($3 + [20]) = ($0 + [27])
	*($3 + [24]) = ($0 + [28])
	*($3 + [28]) = ($0 + [29])
	*($3 + [32]) = ($0 + [30])
	*($3 + [36]) = ($0 + [31])
	*($3 + [40]) = ($0 + [32])
	*($3 + [44]) = ($0 + [33])
	*($3 + [48]) = ($0 + [34])
	*($3 + [52]) = ($0 + [35])
	*($3 + [56]) = ($0 + [36])
	*($3 + [60]) = ($0 + [37])
	*($3 + [64]) = ($0 + [38])
	*($3 + [68]) = ($0 + [39])
	*($3 + [72]) = ($0 + [40])
	*($3 + [76]) = ($0 + [41])
	*($3 + [80]) = ($0 + [42])
	*($3 + [84]) = ($0 + [43])
	*($3 + [88]) = ($0 + [44])
	*($3 + [92]) = ($0 + [45])
	*($3 + [96]) = ($0 + [46])
	*($3 + [100]) = ($0 + [47])
	*($3 + [104]) = ($0 + [48])
	*($3 + [108]) = ($0 + [49])
	*($3 + [112]) = ($0 + [50])
	*($3 + [116]) = ($0 + [51])
	*($3 + [120]) = ($0 + [52])
	*($3 + [124]) = ($0 + [53])
	*($3 + [128]) = ($0 + [54])
	*($3 + [132]) = ($0 + [55])
	*($3 + [136]) = ($0 + [56])
	*($3 + [140]) = ($0 + [57])
	*($3 + [144]) = ($0 + [58])
	*($3 + [148]) = ($0 + [59])
	*($3 + [152]) = ($0 + [60])
	*($3 + [156]) = ($0 + [61])
	*($3 + [160]) = ($0 + [62])
	*($3 + [164]) = ($0 + [63])
	*($3 + [168]) = ($0 + [64])
	*($3 + [172]) = ($0 + [65])
	*($3 + [176]) = ($0 + [66])
	*($3 + [180]) = ($0 + [67])
	*($3 + [184]) = ($0 + [68])
	*($3 + [188]) = ($0 + [69])
	*($3 + [192]) = ($0 + [70])
	*($3 + [196]) = ($0 + [71])
	*($3 + [200]) = ($0 + [72])
	*($3 + [204]) = ($0 + [73])
	*($3 + [208]) = ($0 + [74])
	*($3 + [212]) = ($0 + [75])
	*($3 + [216]) = ($0 + [76])
	*($3 + [220]) = ($0 + [77])
	*($3 + [224]) = ($0 + [78])
	*($3 + [228]) = ($0 + [79])
	*($3 + [232]) = ($0 + [80])
	*($3 + [236]) = ($0 + [81])
	*($3 + [240]) = ($0 + [82])
	*($3 + [244]) = ($0 + [83])
	*($3 + [248]) = ($0 + [84])
	*($3 + [252]) = ($0 + [85])
	*($3 + [256]) = ($0 + [86])
	*($3 + [260]) = ($0 + [87])
	*($3 + [264]) = ($0 + [88])
	*($3 + [268]) = ($0 + [89])
	CALL $71(($3 + [8]), $3)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[31]), [416])
	CALL memcpy(($0 + [96]), *($2 + [4]), [32])
	*($2 + [4]) = (*($2 + [4]) + [32])
	*($3 + [8]) = $0
	CALL $72(($3 + [8]), $1)
	*([0] + [4]) = ($3 + [272])
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [112])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	*($9 + [24]) = (int_64)0
	*($9 + [32]) = (int_64)0
	CALL eosio_assert([1], [1168])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [1024])
	*($9 + [48]) = (int_64)0
	*($9 + [92]) = $5
	*($9 + [88]) = $5
	*($9 + [96]) = ($5 + $3)
	*($9 + [72]) = ($9 + [88])
	*($9 + [56]) = ($9 + [8])
	CALL $74(($9 + [56]), ($9 + [72]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	CALL $89(($9 + [72]), ($9 + [8]))
	*(($9 + [68])) = *(($9 + [44]))
	*(($1 = (($9 + [56]) + [8]))) = *(($9 + [40]))
	*($9 + [60]) = *(($9 + [36]))
	*($9 + [56]) = *($9 + [32])
	$6 = *(($9 + [24]))
	$4 = *(($9 + [48]))
	*((($9 + [88]) + [8])) = *($1)
	*($9 + [88]) = *($9 + [56])
	*($9 + [104]) = $6
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	CALL void $1((int_32 ($9 + [72])), (int_32 ($9 + [104])), (int_32 ($9 + [88])), (int_32 $4), (int_64 $8))
	if ( ((*($9 + [72]) & [1]) == 0) ){ goto $label$10 }
	CALL $85(*($9 + [80]))
	
.LABEL $label$10
	if ( ((*($9 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $85(*(($9 + [16])))
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [112])
	return [1]
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $75(($5 + [32]), $5)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($5 + [16]) = (int_64)0
	$1 = [0]
	*($5 + [24]) = [0]
	$6 = (*($5 + [4]) - *($5))
	$3 = int_32($6 >> [3])
	if ( ($3 == 0) ){ goto $label$7 }
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$6 }
	$1 = CALL $84($6)
	*(($5 + [24])) = ($1 + ($3 << [3]))
	*($5 + [16]) = $1
	*($5 + [20]) = $1
	$6 = *($5)
	$3 = (*($5 + [4]) - $6)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($1, $6, $3)
	$1 = (*($5 + [20]) + $3)
	*($5 + [20]) = $1
	
.LABEL $label$7
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$8 }
	$4 = *((*($3) + $4))
	
.LABEL $label$8
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = [0]
	$1 = ($1 - *($5 + [16]))
	$2 = int_32($1 >> [3])
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$5 }
	$1 = CALL $84($1)
	*(($5 + [40])) = ($1 + ($2 << [3]))
	*($5 + [32]) = $1
	*($5 + [36]) = $1
	$6 = *($5 + [16])
	$2 = (*($5 + [20]) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	*($5 + [36]) = ($1 + $2)
	
.LABEL $label$9
	CALL void $3((int_32 ($5 + [32])), (int_32 $4))
	$1 = *($5 + [32])
	if ( ($1 == 0) ){ goto $label$10 }
	*($5 + [36]) = $1
	CALL $85($1)
	
.LABEL $label$10
	$1 = *($5 + [16])
	if ( ($1 == 0) ){ goto $label$11 }
	*($5 + [20]) = $1
	CALL $85($1)
	
.LABEL $label$11
	$1 = *($5)
	if ( ($1 == 0) ){ goto $label$12 }
	*($5 + [4]) = $1
	CALL $85($1)
	
.LABEL $label$12
	*([0] + [4]) = ($5 + [48])
	return [1]
	
.LABEL $label$6
	CALL $88(($5 + [16]))
	
.LABEL $label$5
	CALL $88(($5 + [32]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $67 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *(($0 + [152]))
	if ( ($3 == 0) ){ goto $label$1 }
	$1 = ($0 + [156])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $85($2)
	
.LABEL $label$5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	$5 = *(($0 + [152]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $3
	
.LABEL $label$2
	*($1) = $3
	CALL $85($5)
	
.LABEL $label$1
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [116])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$11 }
	*(($2 + [12])) = $3
	CALL $85($3)
	
.LABEL $label$11
	CALL $85($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$9 }
	$5 = *(($0 + [112]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $85($5)
	
.LABEL $label$6
	$3 = *(($0 + [72]))
	if ( ($3 == 0) ){ goto $label$12 }
	$1 = ($0 + [76])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$14 }
	
.LOOP $label$15:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$16 }
	CALL $85($2)
	
.LABEL $label$16
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$15 }
	$5 = *(($0 + [72]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $3
	
.LABEL $label$13
	*($1) = $3
	CALL $85($5)
	
.LABEL $label$12
	$3 = *(($0 + [32]))
	if ( ($3 == 0) ){ goto $label$17 }
	$1 = ($0 + [36])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$19 }
	
.LOOP $label$20:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$21 }
	CALL $85($2)
	
.LABEL $label$21
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$20 }
	$5 = *(($0 + [32]))
	goto $label$18 
	
.LABEL $label$19
	$5 = $3
	
.LABEL $label$18
	*($1) = $3
	CALL $85($5)
	
.LABEL $label$17
	return $0
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [256])
	*([0] + [4]) = $4
	*(($5 = $4) + [220]) = $0
	*($5 + [208]) = *($1)
	*($5 + [212]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL memset(($5 + [24]), [0], [66])
	*(($5 + [120])) = (int_64)0
	*(($5 + [112])) = (int_64)0
	*(($5 + [104])) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [128]) = (int_64)0
	*($5 + [136]) = (int_64)0
	*(($5 + [144])) = (int_64)1398362884
	CALL eosio_assert([1], [1168])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [1024])
	*($5 + [160]) = (int_64)0
	*($5 + [152]) = (int_64)0
	CALL memset(($5 + [168]), [0], [34])
	*($5 + [228]) = $0
	*($5 + [224]) = $0
	*($5 + [232]) = ($0 + $2)
	*($5 + [240]) = ($5 + [224])
	*($5 + [248]) = $5
	CALL $68(($5 + [248]), ($5 + [240]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [228]) = ($5 + [208])
	*($5 + [224]) = ($5 + [220])
	CALL $69(($5 + [224]), $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $85(*($5 + [8]))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [256])
	return [1]
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [20]) = $1
	*($5 + [16]) = $1
	*($5 + [24]) = ($1 + $3)
	CALL $70(($5 + [16]), $5)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	CALL $89(($5 + [16]), $5)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 ($5 + [16])), (int_32 $4))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL $85(*($5 + [24]))
	
.LABEL $label$6
	if ( ((*($5) & [1]) == 0) ){ goto $label$7 }
	CALL $85(*(($5 + [8])))
	
.LABEL $label$7
	*([0] + [4]) = ($5 + [32])
	return [1]
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*(($6 + [24])) = [0]
	*($6 + [8]) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [40]) = ($1 + $3)
	*($6 + [32]) = $1
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [416])
	CALL memcpy(($6 + [8]), $1, [8])
	*($6 + [36]) = ($1 + [8])
	$7 = (($6 + [8]) + [8])
	CALL $70(($6 + [32]), $7)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$4 = *($6 + [8])
	CALL $89(($6 + [32]), $7)
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $4), (int_64 ($6 + [32])), (int_32 $5))
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $85(*($6 + [40]))
	
.LABEL $label$6
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $85(*(($6 + [24])))
	
.LABEL $label$7
	*([0] + [4]) = ($6 + [48])
	return [1]
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [20]) = $1
	*($5 + [16]) = $1
	*($5 + [24]) = ($1 + $3)
	CALL $28(($5 + [16]), $5)
	CALL eosio_assert(((uint_32)(*($5 + [24]) - *($5 + [20])) > (uint_32)[3]), [416])
	CALL memcpy(($5 + [12]), *($5 + [20]), [4])
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = [0]
	$1 = (*($5 + [4]) - *($5))
	$3 = int_32($1 >> [2])
	if ( ($3 == 0) ){ goto $label$7 }
	if ( ((uint_32)$3 >= (uint_32)[1073741824]) ){ goto $label$6 }
	$1 = CALL $84($1)
	*(($5 + [24])) = ($1 + ($3 << [2]))
	*($5 + [16]) = $1
	*($5 + [20]) = $1
	$6 = *($5)
	$3 = (*($5 + [4]) - $6)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($1, $6, $3)
	*($5 + [20]) = (*($5 + [20]) + $3)
	
.LABEL $label$7
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($5 + [12]))
	if ( (($2 & [1]) == 0) ){ goto $label$8 }
	$4 = *((*($1) + $4))
	
.LABEL $label$8
	CALL void $1((int_32 ($5 + [16])), (int_32 $3), (int_32 $4))
	$1 = *($5 + [16])
	if ( ($1 == 0) ){ goto $label$9 }
	*($5 + [20]) = $1
	CALL $85($1)
	
.LABEL $label$9
	$1 = *($5)
	if ( ($1 == 0) ){ goto $label$10 }
	*($5 + [4]) = $1
	CALL $85($1)
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [32])
	return [1]
	
.LABEL $label$6
	CALL $88(($5 + [16]))
	return (unreachable)
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$4 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $3)
	
.LABEL $label$1
	$1 = CALL memset($6, [0], [34])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[33]), [416])
	CALL memcpy($1, $4, [34])
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($4)
	
.LABEL $label$4
	CALL memcpy(($1 + [38]), $1, [34])
	CALL memcpy(($1 + [72]), ($1 + [38]), [34])
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($3) + $5))
	
.LABEL $label$5
	CALL void $3((int_32 ($1 + [72])), (int_32 $5))
	*([0] + [4]) = ($1 + [112])
	return [1]
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $84($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $88 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $84(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $85($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $86 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $85 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $84 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11324])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = int_32(($1 - $0) >> [2])
	if ( ((uint_32)$6 > (uint_32)[5]) ){ goto $label$17 }
	$8 = [1]
	goto $label$1 
	
.LABEL $label$18
	$5 = *($0)
	$6 = ($1 + [-4])
	$2 = *($6)
	if ( ((uint_32)$2 >= (uint_32)$5) ){ goto $label$1 }
	*($0) = $2
	*($6) = $5
	goto $label$1 
	
.LABEL $label$17
	$8 = *($0 + [8])
	$2 = *($0)
	$6 = *($0 + [4])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$13 }
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$10 }
	*($0) = $8
	*(($0 + [8])) = $2
	goto $label$9 
	
.LABEL $label$16
	$5 = ($1 + [-4])
	$6 = *($5)
	$4 = *($0)
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$4) ){ goto $label$12 }
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$2 }
	*($0) = $6
	*($5) = $4
	goto $label$1 
	
.LABEL $label$15
	CALL $82($0, ($0 + [4]), ($0 + [8]), ($0 + [12]), ($1 + [-4]), $2)
	goto $label$1 
	
.LABEL $label$14
	$4 = ($1 + [-4])
	$2 = *($0 + [8])
	$5 = *($0)
	$6 = *($0 + [4])
	if ( ((uint_32)$6 >= (uint_32)$5) ){ goto $label$11 }
	if ( ((uint_32)$2 >= (uint_32)$6) ){ goto $label$6 }
	*($0) = $2
	*(($0 + [8])) = $5
	goto $label$5 
	
.LABEL $label$13
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$8 }
	*(($0 + [8])) = $6
	*(($5 = ($0 + [4]))) = $8
	if ( ((uint_32)$8 >= (uint_32)$2) ){ goto $label$7 }
	*($0) = $8
	*($5) = $2
	goto $label$7 
	
.LABEL $label$12
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$1 }
	*(($4 = ($0 + [4]))) = $6
	*($5) = $2
	$2 = *($0)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$1 }
	*($0) = $6
	*($4) = $2
	goto $label$1 
	
.LABEL $label$11
	if ( ((uint_32)$2 >= (uint_32)$6) ){ goto $label$4 }
	*(($0 + [8])) = $6
	*(($3 = ($0 + [4]))) = $2
	if ( ((uint_32)$2 >= (uint_32)$5) ){ goto $label$3 }
	*($0) = $2
	*($3) = $5
	goto $label$3 
	
.LABEL $label$10
	*($0) = $6
	*(($6 = ($0 + [4]))) = $2
	if ( ((uint_32)$8 >= (uint_32)$2) ){ goto $label$8 }
	*(($0 + [8])) = $2
	*($6) = $8
	
.LABEL $label$9
	$6 = $2
	goto $label$7 
	
.LABEL $label$8
	$6 = $8
	
.LABEL $label$7
	$4 = ($0 + [12])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$20 }
	$7 = [0]
	$3 = [8]
	
.LOOP $label$21:
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$22 }
	$8 = $3
	
.LOOP $label$26:
	*((($2 = ($0 + $8)) + [4])) = $6
	if ( ($8 == 0) ){ goto $label$25 }
	$8 = ($8 + [-4])
	$6 = *(($2 + [-4]))
	if ( ($5 <= $6) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$8 = $0
	goto $label$23 
	
.LABEL $label$24
	$8 = (($0 + $8) + [4])
	
.LABEL $label$23
	*($8) = $5
	$7 = ($7 + [1])
	if ( ((int_32)$7 == (int_32)[8]) ){ goto $label$19 }
	
.LABEL $label$22
	$8 = ($4 + [4])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$20 }
	$3 = ($3 + [4])
	$6 = *($4)
	$4 = $8
	goto $label$21 
	
.LABEL $label$20
	$8 = ([0] | [1])
	goto $label$1 
	
.LABEL $label$19
	$8 = (((int_32)($4 + [4]) == (int_32)$1) | [0])
	goto $label$1 
	
.LABEL $label$6
	*($0) = $6
	*(($6 = ($0 + [4]))) = $5
	if ( ((uint_32)$2 >= (uint_32)$5) ){ goto $label$4 }
	*(($0 + [8])) = $5
	*($6) = $2
	
.LABEL $label$5
	$6 = $5
	goto $label$3 
	
.LABEL $label$4
	$6 = $2
	
.LABEL $label$3
	$2 = *($4)
	if ( ((uint_32)$2 >= (uint_32)$6) ){ goto $label$1 }
	*(($5 = ($0 + [8]))) = $2
	*($4) = $6
	$2 = ($0 + [4])
	$4 = *($2)
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)$4) ){ goto $label$1 }
	*($5) = $4
	*($2) = $6
	$2 = *($0)
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$1 }
	*($0) = $6
	*(($0 + [4])) = $2
	goto $label$1 
	
.LABEL $label$2
	*($0) = $2
	*(($6 = ($0 + [4]))) = $4
	$2 = *($5)
	if ( ((uint_32)$2 >= (uint_32)$4) ){ goto $label$1 }
	*($6) = $2
	*($5) = $4
	
.LABEL $label$1
	$6
	return ($8 & [1])
}

int_32 .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = *($2)
	$6 = *($0)
	$8 = *($1)
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$5 }
	if ( ((uint_32)$7 >= (uint_32)$8) ){ goto $label$4 }
	*($0) = $7
	*($2) = $6
	$9 = [1]
	goto $label$3 
	
.LABEL $label$5
	$9 = [0]
	if ( ((uint_32)$7 >= (uint_32)$8) ){ goto $label$2 }
	*($1) = $7
	*($2) = $8
	$9 = [1]
	$6 = *($0)
	$7 = *($1)
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$1 }
	*($0) = $7
	*($1) = $6
	$8 = *($2)
	$9 = [2]
	goto $label$1 
	
.LABEL $label$4
	*($0) = $8
	*($1) = $6
	$9 = [1]
	$8 = *($2)
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$1 }
	*($1) = $8
	*($2) = $6
	$9 = [2]
	
.LABEL $label$3
	$8 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = $7
	
.LABEL $label$1
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)$8) ){ goto $label$6 }
	*($2) = $7
	*($3) = $8
	$7 = *($1)
	$8 = *($2)
	if ( ((uint_32)$8 >= (uint_32)$7) ){ goto $label$8 }
	*($1) = $8
	*($2) = $7
	$7 = *($0)
	$8 = *($1)
	if ( ((uint_32)$8 >= (uint_32)$7) ){ goto $label$7 }
	*($0) = $8
	*($1) = $7
	$9 = ($9 + [3])
	goto $label$6 
	
.LABEL $label$8
	$9 = ($9 + [1])
	goto $label$6 
	
.LABEL $label$7
	$9 = ($9 + [2])
	
.LABEL $label$6
	$7 = *($3)
	$8 = *($4)
	if ( ((uint_32)$8 >= (uint_32)$7) ){ goto $label$12 }
	*($3) = $8
	*($4) = $7
	$7 = *($2)
	$8 = *($3)
	if ( ((uint_32)$8 >= (uint_32)$7) ){ goto $label$11 }
	*($2) = $8
	*($3) = $7
	$3 = *($1)
	$8 = *($2)
	if ( ((uint_32)$8 >= (uint_32)$3) ){ goto $label$10 }
	*($1) = $8
	*($2) = $3
	$8 = *($0)
	$2 = *($1)
	if ( ((uint_32)$2 >= (uint_32)$8) ){ goto $label$9 }
	*($0) = $2
	*($1) = $8
	$9 = ($9 + [4])
	
.LABEL $label$12
	return $9
	
.LABEL $label$11
	return ($9 + [1])
	
.LABEL $label$10
	return ($9 + [2])
	
.LABEL $label$9
	return ($9 + [3])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	
.LOOP $label$1:
	$4 = ($1 + [-8])
	$3 = ($1 + [-4])
	
.LOOP $label$2:
	$5 = $0
	
.LOOP $label$4:
	$0 = ($1 - $5)
	$11 = int_32($0 >> [2])
	if ( ((uint_32)$11 <= (uint_32)[5]) ){ goto $label$12 }
	if ( ((int_32)$0 <= (int_32)[123]) ){ goto $label$11 }
	$12 = ($5 + (((int_32)$11 / (int_32)[2]) << [2]))
	if ( ((int_32)$0 < (int_32)[3997]) ){ goto $label$13 }
	$0 = (((int_32)$11 / (int_32)[4]) << [2])
	$10 = CALL $82($5, ($5 + $0), $12, ($12 + $0), $3, $2)
	goto $label$7 
	
.LABEL $label$13
	$0 = *($3)
	$6 = *($5)
	$11 = *($12)
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$16 }
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$15 }
	*($5) = $0
	*($3) = $6
	$10 = [1]
	goto $label$7 
	
.LABEL $label$16
	$10 = [0]
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$7 }
	*($12) = $0
	*($3) = $11
	$10 = [1]
	$11 = *($5)
	$0 = *($12)
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$7 }
	*($5) = $0
	*($12) = $11
	goto $label$14 
	
.LABEL $label$15
	*($5) = $11
	*($12) = $6
	$10 = [1]
	$0 = *($3)
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$7 }
	*($12) = $0
	*($3) = $6
	
.LABEL $label$14
	$10 = [2]
	goto $label$7 
	
.LABEL $label$12
	goto $label$6 
	
.LABEL $label$17
	$11 = *($5)
	$0 = *($3)
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$6 }
	*($5) = $0
	*($3) = $11
	return 
	
.LABEL $label$11
	$0 = *($5 + [8])
	$6 = *($5)
	$11 = *($5 + [4])
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$22 }
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$21 }
	*($5) = $0
	*(($5 + [8])) = $6
	goto $label$20 
	
.LABEL $label$22
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$19 }
	*(($5 + [8])) = $11
	*(($7 = ($5 + [4]))) = $0
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$18 }
	*($5) = $0
	*($7) = $6
	goto $label$18 
	
.LABEL $label$21
	*($5) = $11
	*(($11 = ($5 + [4]))) = $6
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$19 }
	*(($5 + [8])) = $6
	*($11) = $0
	
.LABEL $label$20
	$11 = $6
	goto $label$18 
	
.LABEL $label$19
	$11 = $0
	
.LABEL $label$18
	$8 = ($5 + [12])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$6 }
	$12 = [8]
	
.LOOP $label$23:
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)$11) ){ goto $label$24 }
	$0 = $12
	
.LOOP $label$28:
	*((($6 = ($5 + $0)) + [4])) = $11
	if ( ($0 == 0) ){ goto $label$27 }
	$0 = ($0 + [-4])
	$11 = *(($6 + [-4]))
	if ( ($7 <= $11) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$0 = $5
	goto $label$25 
	
.LABEL $label$26
	$0 = (($5 + $0) + [4])
	
.LABEL $label$25
	*($0) = $7
	
.LABEL $label$24
	$0 = ($8 + [4])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$6 }
	$12 = ($12 + [4])
	$11 = *($8)
	$8 = $0
	goto $label$23 
	
.LABEL $label$10
	$11 = *($5 + [8])
	$6 = *($5)
	$0 = *($5 + [4])
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$33 }
	if ( ((uint_32)$11 >= (uint_32)$0) ){ goto $label$32 }
	*($5) = $11
	*(($5 + [8])) = $6
	goto $label$31 
	
.LABEL $label$33
	if ( ((uint_32)$11 >= (uint_32)$0) ){ goto $label$30 }
	*(($5 + [8])) = $0
	*(($7 = ($5 + [4]))) = $11
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$29 }
	*($5) = $11
	*($7) = $6
	goto $label$29 
	
.LABEL $label$32
	*($5) = $0
	*(($0 = ($5 + [4]))) = $6
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$30 }
	*(($5 + [8])) = $6
	*($0) = $11
	
.LABEL $label$31
	$0 = $6
	goto $label$29 
	
.LABEL $label$30
	$0 = $11
	
.LABEL $label$29
	$11 = *($3)
	if ( ((uint_32)$11 >= (uint_32)$0) ){ goto $label$6 }
	*(($6 = ($5 + [8]))) = $11
	*($3) = $0
	$11 = ($5 + [4])
	$7 = *($11)
	$0 = *($6)
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$6 }
	*($6) = $7
	*($11) = $0
	$11 = *($5)
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$6 }
	*($5) = $0
	*(($5 + [4])) = $11
	return 
	
.LABEL $label$9
	CALL $82($5, ($5 + [4]), ($5 + [8]), ($5 + [12]), $3, $2)
	return 
	
.LABEL $label$8
	$0 = *($3)
	$6 = *($5)
	$11 = *($5 + [4])
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$35 }
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$34 }
	*($5) = $0
	*($3) = $6
	return 
	
.LABEL $label$35
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$6 }
	*(($6 = ($5 + [4]))) = $0
	*($3) = $11
	$11 = *($5)
	$0 = *($6)
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$6 }
	*($5) = $0
	*($6) = $11
	return 
	
.LABEL $label$34
	*($5) = $11
	*(($0 = ($5 + [4]))) = $6
	$11 = *($3)
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$6 }
	*($0) = $11
	*($3) = $6
	return 
	
.LABEL $label$7
	$6 = *($12)
	$8 = *($5)
	if ( ($8 <= $6) ){ goto $label$37 }
	$0 = $4
	
.LOOP $label$40:
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$39 }
	$11 = *($0)
	$7 = ($0 + [-4])
	$0 = $7
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	$12 = ($5 + [4])
	$6 = *($3)
	if ( ($8 <= $6) ){ goto $label$41 }
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$6 }
	$12 = ($5 + [8])
	
.LOOP $label$43:
	$0 = ($12 + [-4])
	$11 = *($0)
	if ( ($8 <= $11) ){ goto $label$42 }
	$12 = ($12 + [4])
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$43 }
	goto $label$6 
	
.LABEL $label$42
	*($0) = $6
	*($3) = $11
	
.LABEL $label$41
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$6 }
	$11 = $3
	
.LOOP $label$44:
	$0 = ($12 + [-4])
	$6 = *($5)
	
.LOOP $label$45:
	$0 = ($0 + [4])
	$7 = *($0)
	if ( ((uint_32)$6 >= (uint_32)$7) ){ goto $label$45 }
	$12 = ($0 + [4])
	
.LOOP $label$46:
	$11 = ($11 + [-4])
	$8 = *($11)
	if ( ($6 <= $8) ){ goto $label$46 }
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$5 }
	*($0) = $8
	*($11) = $7
	goto $label$44 
	
.LABEL $label$38
	*($5) = $11
	*(($11 = ($7 + [4]))) = $8
	$10 = ($10 + [1])
	goto $label$36 
	
.LABEL $label$37
	$11 = $3
	
.LABEL $label$36
	$9 = ($5 + [4])
	if ( ((uint_32)$9 >= (uint_32)$11) ){ goto $label$47 }
	
.LOOP $label$48:
	$0 = ($9 + [-4])
	$6 = *($12)
	
.LOOP $label$49:
	$0 = ($0 + [4])
	$7 = *($0)
	if ( ($7 <= $6) ){ goto $label$49 }
	$9 = ($0 + [4])
	
.LOOP $label$50:
	$11 = ($11 + [-4])
	$8 = *($11)
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$50 }
	if ( ((uint_32)$0 > (uint_32)$11) ){ goto $label$51 }
	*($0) = $8
	*($11) = $7
	$12 = ( $11 ? $12 : ((int_32)$12 == (int_32)$0) )
	$10 = ($10 + [1])
	goto $label$48 
	
.LABEL $label$51
	$9 = $0
	
.LABEL $label$47
	if ( ((int_32)$9 == (int_32)$12) ){ goto $label$52 }
	$11 = *($9)
	$0 = *($12)
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$52 }
	*($9) = $0
	*($12) = $11
	$10 = ($10 + [1])
	
.LABEL $label$52
	if ( $10 ){ goto $label$54 }
	$11 = CALL $83($5, $9, $2)
	$0 = ($9 + [4])
	if ( CALL $83($0, $1, $2) ){ goto $label$53 }
	if ( $11 ){ goto $label$2 }
	
.LABEL $label$54
	if ( ((int_32)($9 - $5) >= (int_32)($1 - $9)) ){ goto $label$3 }
	CALL $81($5, $9, $2)
	$0 = ($9 + [4])
	goto $label$2 
	
.LABEL $label$53
	$1 = $9
	$0 = $5
	if ( ($11 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	return 
	
.LABEL $label$5
	$5 = $0
	goto $label$4 
	
.LABEL $label$3
	CALL $81(($9 + [4]), $1, $2)
	$1 = $9
	$0 = $5
	goto $label$1 
	$11
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [11216])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [11024]
	$1 = (((int_32)$2 * (int_32)[12]) + [11024])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [416])
	CALL memcpy(($2 + [128]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [416])
	CALL memcpy(($0 + [136]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($0 + [144]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [416])
	CALL memcpy(($0 + [152]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [416])
	CALL memcpy(($0 + [160]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[33]), [416])
	CALL memcpy(($0 + [168]), *($3 + [4]), [34])
	*($3 + [4]) = (*($3 + [4]) + [34])
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [896])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $44($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [416])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $73($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $87($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $84($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $87($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $85($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $86($7)
	return (unreachable)
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [100])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [104])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [108])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [112])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [116])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [120])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [124])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [128])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [132])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [136])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [140])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [144])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [148])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [152])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [156])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [160])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [164])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [168])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [172])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [176])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [180])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [184])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [188])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [192])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [196])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [200])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [204])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [208])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [212])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [216])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [220])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [224])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [228])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [232])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [236])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [240])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [244])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [248])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [252])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [256])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [416])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [416])
	CALL memcpy($2, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [3])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($7 >> [2])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $84(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $88($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [3]))
	$2 = ($7 + ($4 << [3]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [3]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $85($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $78([2832], $0)
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	CALL $70(*($1), *($0))
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [416])
	CALL memcpy(($2 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [416])
	CALL memcpy(($2 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [416])
	CALL memcpy(($2 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [416])
	CALL memcpy(($2 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $84(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $85($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $85($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $84([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $44($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $47(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $44($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [192])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [192])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $46(CALL $45($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $79($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [11232])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $79 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11318]) == 0) ){ goto $label$2 }
	$7 = *([0] + [11320])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [11318]) = [1]
	$7 = ($7 << [16])
	*([0] + [11320]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11320])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [11320]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [11318]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [11318]) = [1]
	$3 = ($3 << [16])
	*([0] + [11320]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11320])
	
.LABEL $label$8
	*([0] + [11320]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC _ZN4slot3betERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKyRKN5eosio5assetEy (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [240])
	*([0] + [4]) = $8
	*($8 + [216]) = $4
	CALL require_auth((int_64)-7358209017970331696)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)1397703940), [976])
	$4 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [1024])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [1056])
	$4 = CALL $33(($0 + [8]))
	CALL eosio_assert(((uint_64)*($3) <= (uint_64)$4), [1104])
	$7 = ($0 + [48])
	$6 = *(($0 + [76]))
	if ( ((int_32)$6 == (int_32)*(($0 + [72]))) ){ goto $label$7 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*(($6 + [36])) == (int_32)$7), [16])
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	$5 = CALL db_find_i64(*($7), *(($0 + [56])), (int_64)7035936435300958208, (int_64)7035936435300958208)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$6 = CALL $15($7, $5)
	CALL eosio_assert(((int_32)*(($6 + [36])) == (int_32)$7), [16])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1136])
	CALL memcpy(($8 + [32]), $6, [34])
	CALL memcpy(($8 + [176]), ($8 + [32]), [34])
	CALL $34(($8 + [144]))
	*($8 + [140]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($8 + [88]) = (int_64)3617214756542218240
	*($8 + [80]) = (int_64)-7358209017970331696
	*($8 + [8]) = *($2)
	CALL $35(($8 + [16]), ($8 + [8]))
	*(($8 + [60])) = *(($3 + [12]))
	*(($8 + [56])) = *(($3 + [8]))
	*(($8 + [52])) = *(($3 + [4]))
	*($8 + [32]) = (int_64)-7358209017970331696
	*($8 + [40]) = *($0)
	*($8 + [48]) = *($3)
	$6 = (($8 + [16]) + [8])
	*(($8 + [72])) = *($6)
	*($8 + [64]) = *($8 + [16])
	*($8 + [16]) = [0]
	*($8 + [20]) = [0]
	*($6) = [0]
	$6 = CALL $36(($8 + [96]), ($8 + [80]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($8 + [32]))
	CALL $37(($8 + [224]), $6)
	$7 = *($8 + [224])
	CALL send_inline($7, (*($8 + [228]) - $7))
	$7 = *($8 + [224])
	if ( ($7 == 0) ){ goto $label$8 }
	*($8 + [228]) = $7
	CALL $85($7)
	
.LABEL $label$8
	$7 = *($6 + [28])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($6 + [32])) = $7
	CALL $85($7)
	
.LABEL $label$9
	$7 = *($6 + [16])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($6 + [20])) = $7
	CALL $85($7)
	
.LABEL $label$10
	if ( ((*(($8 + [64])) & [1]) == 0) ){ goto $label$11 }
	CALL $85(*(($8 + [72])))
	
.LABEL $label$11
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL $85(*(($8 + [24])))
	
.LABEL $label$12
	$4 = *($0)
	*($8 + [36]) = $2
	*($8 + [32]) = $0
	*($8 + [40]) = $3
	*($8 + [44]) = ($8 + [216])
	*($8 + [48]) = ($8 + [140])
	*($8 + [52]) = ($8 + [144])
	*($8 + [56]) = ($8 + [176])
	*($8 + [80]) = $4
	CALL eosio_assert(((int_64)*($0 + [128]) == (int_64)CALL $fimport$4()), [128])
	$2 = ($0 + [128])
	*($8 + [96]) = $2
	*($8 + [100]) = ($8 + [32])
	*($8 + [104]) = ($8 + [80])
	*(($3 = CALL $84([128])) + [24]) = (int_64)1398362884
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [1168])
	$4 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$17 }
	
.LABEL $label$16
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$7 = [0]
	
.LABEL $label$13
	CALL eosio_assert($7, [1024])
	*($3 + [116]) = $2
	CALL $38(($8 + [96]), $3)
	*($8 + [224]) = $3
	$4 = *($3)
	*($8 + [96]) = $4
	$7 = *($3 + [120])
	*($8 + [16]) = $7
	$2 = ($0 + [156])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [160]))) ){ goto $label$19 }
	*($6 + [8]) = $4
	*($6 + [16]) = $7
	*($8 + [224]) = [0]
	*($6) = $3
	*($2) = ($6 + [24])
	goto $label$18 
	
.LABEL $label$19
	CALL $39(($0 + [152]), ($8 + [224]), ($8 + [96]), ($8 + [16]))
	
.LABEL $label$18
	$6 = *($8 + [224])
	*($8 + [224]) = [0]
	if ( ($6 == 0) ){ goto $label$20 }
	CALL $85($6)
	
.LABEL $label$20
	*([0] + [4]) = ($8 + [240])
}

int_64 .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = *(($0 + [28]))
	if ( ((int_32)$2 == (int_32)*($0 + [24])) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [8]) == (int_32)$0), [16])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	$1 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $7($0, $1)
	CALL eosio_assert(((int_32)*($2 + [8]) == (int_32)$0), [16])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [1136])
	return *($2)
}

void .FUNC _ZN4slot11delpaytableENSt3__16vectorIyNS0_9allocatorIyEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	CALL require_auth((int_64)-7101989278066649744)
	$2 = *($1 + [4])
	$10 = *($1)
	if ( ((int_32)$10 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [88])
	$7 = ($0 + [112])
	$8 = ($0 + [116])
	$9 = ($0 + [96])
	
.LOOP $label$2:
	$4 = *($10)
	$5 = *($7)
	$11 = *($8)
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$3 }
	$0 = ($11 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$4:
	if ( ((int_64)*(*($0)) == (int_64)$4) ){ goto $label$3 }
	$11 = $0
	$1 = ($0 + [-24])
	$0 = $1
	if ( ((int_32)($1 + $6) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$6 }
	$0 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)$3), [16])
	goto $label$5 
	
.LABEL $label$6
	$0 = [0]
	$1 = CALL db_find_i64(*($3), *($9), (int_64)-6215650152938471424, $4)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$5 }
	$0 = CALL $22($3, $1)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)$3), [16])
	
.LABEL $label$5
	$1 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($1, [912])
	CALL eosio_assert($1, [432])
	CALL eosio_assert($1, [480])
	$11 = CALL db_next_i64(*($0 + [28]), ($12 + [8]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$7 }
	CALL $22($3, $11)
	
.LABEL $label$7
	CALL $31($3, $0)
	CALL eosio_assert($1, [944])
	$10 = ($10 + [8])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [512])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [560])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [624])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [12])) = $6
	CALL $85($6)
	
.LABEL $label$7
	CALL $85($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $6
	CALL $85($6)
	
.LABEL $label$10
	CALL $85($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}