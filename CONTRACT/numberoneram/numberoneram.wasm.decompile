(data (i32.const 4) "\80i\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "transfer\00")
(data (i32.const 128) "eosio.token\00")
(data (i32.const 144) "hello: 123\00")
(data (i32.const 160) "read\00")
(data (i32.const 176) "invalid start time\00")
(data (i32.const 208) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 272) "singleton does not exist\00")
(data (i32.const 304) "not the time to create new round\00")
(data (i32.const 352) "cannot pass end iterator to modify\00")
(data (i32.const 400) "cannot create objects in table of another contract\00")
(data (i32.const 464) "write\00")
(data (i32.const 480) "object passed to modify is not in multi_index\00")
(data (i32.const 528) "cannot modify objects in table of another contract\00")
(data (i32.const 592) "updater cannot change primary key when modifying an object\00")
(data (i32.const 656) "error reading iterator\00")
(data (i32.const 688) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 752) "invalid symbol name\00")
(data (i32.const 784) "get\00")
(data (i32.const 800) "Invalid token transfer\00")
(data (i32.const 832) "Quantity must be positive\00")
(data (i32.const 864) "\e6\9c\80\e5\b0\91\e8\b4\ad\e4\b9\b00.1EOS\00")
(data (i32.const 896) "account name can only be 12 chars long\00")
(data (i32.const 944) "this round is ended\00")
(data (i32.const 976) "this round is not started, \00")
(data (i32.const 1008) "amount of key should be bigger than 100 and one ten thousandths of keys in this round\00")
(data (i32.const 1104) "amount of key overflow\00")
(data (i32.const 1136) "mask overflow\00")
(data (i32.const 1152) "amount of lottery should be less than eos of this round\00")
(data (i32.const 1216) "active\00")
(data (i32.const 1232) "eosgameworld lottery\00")
(data (i32.const 1264) "final result of total profit shouldn\'t be bigger than base profit\00")
(data (i32.const 1344) "something wrong with final result of total pot\00")
(data (i32.const 1392) "pot oeverflow\00")
(data (i32.const 1408) "refer player not exist\00")
(data (i32.const 1440) "affilicate fee overflow\00")
(data (i32.const 1472) "refer second player not exist\00")
(data (i32.const 1504) "affilicate second fee overflow\00")
(data (i32.const 1552) "eosgameworld only accepts EOS\00")
(data (i32.const 1584) "number not exist\00")
(data (i32.const 1616) "round not exist\00")
(data (i32.const 1632) "invalid auth\00")
(data (i32.const 1648) "winner not exist\00")
(data (i32.const 1680) "player not exists\00")
(data (i32.const 1712) "cannot pass end iterator to erase\00")
(data (i32.const 1760) "cannot increment end iterator\00")
(data (i32.const 1792) "amount of withdraw should be less than eos of this round\00")
(data (i32.const 1856) "integer overflow adding withdraw balance\00")
(data (i32.const 1904) " vault:\00")
(data (i32.const 1920) "eosgameworld withdraw\00")
(data (i32.const 1952) "object passed to erase is not in multi_index\00")
(data (i32.const 2000) "cannot erase objects in table of another contract\00")
(data (i32.const 2064) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10528) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$7 (param i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$10 (param i32 i32)))
(import "env" "has_auth" (func $fimport$11 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$14 (param i32)))
(import "env" "printui" (func $fimport$15 (param i64)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$17 (param i64)))
(import "env" "require_auth2" (func $fimport$18 (param i64 i64)))
(import "env" "send_inline" (func $fimport$19 (param i32 i32)))
(import "env" "sha256" (func $fimport$20 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$21 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$22 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN12eosgameworld8withdrawEyN5eosio5assetE" (func $6))
(export "_ZN12eosgameworld8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $8))
(export "_ZN12eosgameworld6createEN5eosio14time_point_secE" (func $10))
(export "_ZN12eosgameworld4testEv" (func $12))
(export "malloc" (func $50))
(export "free" (func $53))
(export "isspace" (func $63))
(export "sqrt" (func $64))
(export "llabs" (func $65))
(export "memchr" (func $66))
(export "memcmp" (func $67))
(export "strlen" (func $68))
(table $0 5 5 anyfunc)
(elem (i32.const 0) $69 $8 $6 $12 $10)



void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [480])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [528])
	*($1) = *(*($3))
	CALL eosio_assert([1], [592])
	CALL eosio_assert([1], [464])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-7015353281538949120) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-7015353281538949119
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $54($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [400])
	*(($4 = CALL $54([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [464])
	CALL memcpy(($7 + [16]), $4, [8])
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-7015353281538949120, $2, (int_64)-7015353281538949120, ($7 + [16]), [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-7015353281538949120) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-7015353281538949119
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)-7015353281538949120
	$5 = *($4 + [12])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-7015353281538949120
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $20(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $55($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_64 .FUNC llabs (int_64 $0)
{
	int_64 $1
	$1 = (int_64)$0 >> (int_64)63
	return ((int_64)((int_64)$0 + (int_64)$1)) ^ (int_64)$1)
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [400])
	*(($5 = CALL $54([72])) + [56]) = $1
	$3 = CALL memcpy($5, *($3), [56])
	*($7 + [64]) = ($7 + [56])
	*($7 + [60]) = $7
	*($7 + [56]) = $7
	*($7 + [72]) = ($7 + [56])
	*($7 + [84]) = ($3 + [8])
	*($7 + [80]) = $3
	*($7 + [88]) = ($3 + [16])
	*($7 + [92]) = ($3 + [24])
	*($7 + [96]) = ($3 + [32])
	*($7 + [100]) = ($3 + [40])
	*($7 + [104]) = ($3 + [48])
	CALL $40(($7 + [80]), ($7 + [72]))
	*($3 + [60]) = CALL db_store_i64(*($1 + [8]), (int_64)-6030912142679474176, $2, (int_64)-6030912142679474176, $7, [56])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-6030912142679474176) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-6030912142679474175
	
.LABEL $label$1
	*($7 + [80]) = $3
	*($7) = (int_64)-6030912142679474176
	$4 = *($3 + [60])
	*($7 + [56]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($5 + [8]) = (int_64)-6030912142679474176
	*($5 + [16]) = $4
	*($7 + [80]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $41(($1 + [24]), ($7 + [80]), $7, ($7 + [56]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [80])
	*($7 + [80]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $55($3)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [112])
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [784])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $30($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [160])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $29($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $57($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $54($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $57($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $55($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $56($7)
	return (unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [480])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [528])
	CALL memcpy($1, *($3), [68])
	CALL eosio_assert([1], [592])
	*($4 + [88]) = ($4 + [65])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [8])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [12])
	*($4 + [116]) = ($1 + [16])
	*($4 + [120]) = ($1 + [24])
	*($4 + [124]) = ($1 + [32])
	*($4 + [128]) = ($1 + [40])
	*($4 + [132]) = ($1 + [48])
	*($4 + [136]) = ($1 + [56])
	*($4 + [140]) = ($1 + [64])
	CALL $23(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*($1 + [76]), $2, $4, [65])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-4812882902415048704) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-4812882902415048703
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $54(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $60($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $55($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $55($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	*($4 + [15]) = *(*($0 + [4]))
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($3 + [4]), ($4 + [15]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [464])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [464])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [144])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [400])
	*(($4 = CALL $54([88])) + [64]) = [0]
	*($4 + [12]) = [0]
	*($4 + [72]) = $1
	CALL memcpy($4, *($3), [68])
	*($7 + [88]) = ($7 + [65])
	*($7 + [84]) = $7
	*($7 + [80]) = $7
	*($7 + [96]) = ($7 + [80])
	*($7 + [108]) = ($4 + [8])
	*($7 + [104]) = $4
	*($7 + [112]) = ($4 + [12])
	*($7 + [116]) = ($4 + [16])
	*($7 + [120]) = ($4 + [24])
	*($7 + [124]) = ($4 + [32])
	*($7 + [128]) = ($4 + [40])
	*($7 + [132]) = ($4 + [48])
	*($7 + [136]) = ($4 + [56])
	*($7 + [140]) = ($4 + [64])
	CALL $23(($7 + [104]), ($7 + [96]))
	*($4 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)-4812882902415048704, $2, (int_64)-4812882902415048704, $7, [65])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-4812882902415048704) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-4812882902415048703
	
.LABEL $label$1
	*($7 + [104]) = $4
	*($7) = (int_64)-4812882902415048704
	$5 = *($4 + [76])
	*($7 + [80]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-4812882902415048704
	*($3 + [16]) = $5
	*($7 + [104]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $24(($1 + [24]), ($7 + [104]), $7, ($7 + [80]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($7 + [104])
	*($7 + [104]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $55($4)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [144])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [160])
	CALL memcpy(($4 + [15]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($4 + [15]) != (int_32)[0])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [160])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [160])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $54(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $60($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $55($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $55($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $61(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $61(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $55(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $55(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $28(*($1), ($0 + [32]))
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [2000])
	$6 = ($0 + [28])
	$5 = *($6)
	CALL eosio_assert(((int_32)$5 != (int_32)*($0 + [24])), [2064])
	$4 = ($5 + [-24])
	$6 = *($6)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	$2 = ([0] - $6)
	
.LOOP $label$4:
	$6 = ($4 + [24])
	$3 = *($6)
	*($6) = [0]
	$5 = *($4)
	*($4) = $3
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $55($5)
	
.LABEL $label$5
	*(($4 + [16])) = *(($4 + [40]))
	*(($4 + [8])) = *(($4 + [32]))
	$4 = $6
	if ( ((int_32)($6 + $2) != (int_32)[-24]) ){ goto $label$4 }
	$5 = *(($0 + [28]))
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = $4
	
.LABEL $label$2
	
.LOOP $label$6:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $55($4)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$1
	*(($0 + [28])) = $6
	CALL db_remove_i64(*($1 + [60]))
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $69 ()
{
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [464])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [464])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [464])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [464])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [464])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $54(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $60($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $55($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $55($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [400])
	*(($5 = CALL $54([72])) + [56]) = $1
	$3 = CALL memcpy($5, *($3), [56])
	*($7 + [64]) = ($7 + [56])
	*($7 + [60]) = $7
	*($7 + [56]) = $7
	*($7 + [72]) = ($7 + [56])
	*($7 + [84]) = ($3 + [8])
	*($7 + [80]) = $3
	*($7 + [88]) = ($3 + [16])
	*($7 + [92]) = ($3 + [24])
	*($7 + [96]) = ($3 + [32])
	*($7 + [100]) = ($3 + [40])
	*($7 + [104]) = ($3 + [48])
	CALL $40(($7 + [80]), ($7 + [72]))
	*($3 + [60]) = CALL db_store_i64(*($1 + [8]), (int_64)-6030912142679474176, $2, (int_64)-6030912142679474176, $7, [56])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-6030912142679474176) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-6030912142679474175
	
.LABEL $label$1
	*($7 + [80]) = $3
	*($7) = (int_64)-6030912142679474176
	$4 = *($3 + [60])
	*($7 + [56]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($5 + [8]) = (int_64)-6030912142679474176
	*($5 + [16]) = $4
	*($7 + [80]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $41(($1 + [24]), ($7 + [80]), $7, ($7 + [56]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [80])
	*($7 + [80]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $55($3)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [112])
}

int_64 .FUNC $46 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = *(($0 + [28]))
	if ( ((int_32)$2 == (int_32)*($0 + [24])) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [8]) == (int_32)$0), [208])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	$1 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-7015353281538949120, (int_64)-7015353281538949120)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $17($0, $1)
	CALL eosio_assert(((int_32)*($2 + [8]) == (int_32)$0), [208])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [272])
	return *($2)
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [464])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [464])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [464])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $45(*($1), ($0 + [32]))
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $52($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10528])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $60 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZN12eosgameworld8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	$20 = (*([0] + [4]) - [496])
	*([0] + [4]) = $20
	$18 = *($0)
	if ( ((int_64)$18 == (int_64)$1) ){ goto $label$4 }
	if ( ((int_64)$18 != (int_64)$2) ){ goto $label$4 }
	$2 = *($3 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)1397703940), [1552])
	$14 = [0]
	$13 = *($3)
	if ( ((uint_64)((int_64)$13 + (int_64)4611686018427387903) >= (uint_64)(int_64)9223372036854775807) ){ goto $label$5 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$15 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$14 = [1]
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$14 = [0]
	
.LABEL $label$5
	CALL eosio_assert($14, [800])
	CALL eosio_assert(((int_64)$13 > (int_64)0), [832])
	if ( ((int_64)$13 != (int_64)1) ){ goto $label$10 }
	$2 = *(($3 + [8]))
	*((($20 + [400]) + [8])) = $2
	$18 = *($3)
	*(($20 + [8])) = $2
	*($20 + [400]) = $18
	*($20 + [4]) = *($20 + [404])
	*($20) = *($20 + [400])
	CALL _ZN12eosgameworld8withdrawEyN5eosio5assetE($0, $1, $20)
	goto $label$4 
	
.LABEL $label$10
	CALL eosio_assert(((int_64)$13 > (int_64)999), [864])
	$5 = *($4)
	if ( ($5 & [1]) ){ goto $label$12 }
	$15 = uint_32($5 >> [1])
	$6 = ($4 + [1])
	goto $label$11 
	
.LABEL $label$12
	$15 = *($4 + [4])
	$6 = *($4 + [8])
	
.LABEL $label$11
	$14 = ($6 + $15)
	if ( ((int_32)$6 == (int_32)$14) ){ goto $label$14 }
	$15 = $6
	
.LOOP $label$16:
	if ( (CALL isspace(*($15)) == 0) ){ goto $label$15 }
	$15 = ($15 + [1])
	if ( ((int_32)$14 != (int_32)$15) ){ goto $label$16 }
	$15 = $14
	
.LABEL $label$15
	$5 = *($4)
	goto $label$13 
	
.LABEL $label$14
	$15 = $6
	
.LABEL $label$13
	if ( ($5 & [1]) ){ goto $label$18 }
	$14 = ($4 + [1])
	goto $label$17 
	
.LABEL $label$18
	$14 = *($4 + [8])
	
.LABEL $label$17
	CALL $58($4, ($6 - $14), ($15 - $6))
	$15 = *($4)
	if ( ($15 & [1]) ){ goto $label$21 }
	$14 = ($4 + [1])
	$6 = ($14 + uint_32($15 >> [1]))
	if ( ((int_32)$6 != (int_32)$14) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$14 = *($4 + [8])
	$6 = ($14 + *($4 + [4]))
	if ( ((int_32)$6 == (int_32)$14) ){ goto $label$19 }
	
.LABEL $label$20
	$5 = ([0] - $14)
	$15 = ($6 + [-1])
	
.LOOP $label$23:
	if ( (CALL isspace(*($15)) == 0) ){ goto $label$22 }
	$6 = $15
	$14 = ($15 + [-1])
	$15 = $14
	if ( ((int_32)($14 + $5) != (int_32)[-1]) ){ goto $label$23 }
	
.LABEL $label$22
	$15 = *($4)
	
.LABEL $label$19
	if ( ($15 & [1]) ){ goto $label$25 }
	$14 = ($4 + [1])
	$15 = ($14 + uint_32(($15 & [254]) >> [1]))
	goto $label$24 
	
.LABEL $label$25
	$14 = *($4 + [8])
	$15 = ($14 + *($4 + [4]))
	
.LABEL $label$24
	CALL $58($4, ($6 - $14), ($15 - $6))
	$15 = CALL $59($4, [32], [0])
	$14 = *($4)
	if ( ($14 & [1]) ){ goto $label$27 }
	$14 = uint_32($14 >> [1])
	goto $label$26 
	
.LABEL $label$27
	$14 = *($4 + [4])
	
.LABEL $label$26
	$2 = (int_64)0
	if ( ((int_32)$15 != (int_32)[-1]) ){ goto $label$28 }
	if ( ($14 == 0) ){ goto $label$28 }
	$14 = [-1]
	CALL $62(($20 + [328]), $4, [0], [-1], $4)
	$15 = *($20 + [328])
	CALL eosio_assert((( *($20 + [332]) ? uint_32($15 >> [1]) : ($15 & [1]) ) <= [13]), [896])
	$15 = ( *($20 + [336]) ? (($20 + [328]) | [1]) : (*($20 + [328]) & [1]) )
	
.LOOP $label$29:
	$4 = ($15 + $14)
	$6 = ($14 + [1])
	$14 = $6
	if ( *(($4 + [1])) ){ goto $label$29 }
	$19 = (CASTING uint_64)(uint_32 $6)
	$2 = (int_64)0
	$18 = (int_64)59
	$17 = (int_64)0
	
.LOOP $label$30:
	$16 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$19) ){ goto $label$31 }
	$14 = *($15)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$14 = ($14 + [165])
	goto $label$32 
	
.LABEL $label$33
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$35 }
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	goto $label$34 
	
.LABEL $label$35
	$16 = ((int_64)$16 & (int_64)15)
	
.LABEL $label$34
	$15 = ($15 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$16 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$30 }
	$6 = [0]
	*(($20 + [448])) = [0]
	*($20 + [432]) = (int_64)-1
	*($20 + [440]) = (int_64)0
	$2 = *($0)
	*($20 + [416]) = $2
	*($20 + [424]) = $17
	$15 = CALL db_find_i64($2, $17, (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$36 }
	$6 = CALL $31(($20 + [416]), $15)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)($20 + [416])), [208])
	
.LABEL $label$36
	$4 = *($20 + [440])
	if ( ($4 == 0) ){ goto $label$37 }
	$5 = ($20 + [444])
	$15 = *($5)
	if ( ((int_32)$15 == (int_32)$4) ){ goto $label$39 }
	
.LOOP $label$40:
	$15 = ($15 + [-24])
	$14 = *($15)
	*($15) = [0]
	if ( ($14 == 0) ){ goto $label$41 }
	CALL $55($14)
	
.LABEL $label$41
	if ( ((int_32)$4 != (int_32)$15) ){ goto $label$40 }
	$15 = *(($20 + [440]))
	goto $label$38 
	
.LABEL $label$39
	$15 = $4
	
.LABEL $label$38
	*($5) = $4
	CALL $55($15)
	
.LABEL $label$37
	if ( ((*($20 + [328]) & [1]) == 0) ){ goto $label$42 }
	CALL $55(*(($20 + [336])))
	
.LABEL $label$42
	$2 = ( $17 ? (int_64)0 : $6 )
	
.LABEL $label$28
	CALL $32(($20 + [328]), $0)
	$15 = [0]
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) >= (uint_32)*($20 + [340])) ){ goto $label$43 }
	$15 = ((int_32)*($20 + [336]) ^ (int_32)[1])
	
.LABEL $label$43
	CALL eosio_assert($15, [944])
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000)) > (uint_32)*($20 + [392])), [976])
	*($20 + [280]) = (int_64)0
	*($20 + [272]) = $2
	*($20 + [288]) = (int_64)0
	*($20 + [296]) = (int_64)0
	*($20 + [304]) = (int_64)0
	*($20 + [312]) = (int_64)0
	*($20 + [320]) = (int_64)0
	*(($20 + [264])) = [0]
	*($20 + [240]) = $1
	*($20 + [248]) = (int_64)-1
	*($20 + [256]) = (int_64)0
	*($20 + [232]) = *($0)
	CALL $33(($20 + [176]), ($20 + [232]), $1, ($20 + [272]))
	CALL $32(($20 + [416]), $0)
	$2 = ((uint_64)*($20 + [344]) / (uint_64)(int_64)10000)
	$10 = (int_64)
	CALL eosio_assert(((uint_64)$10((Rounds 0)(((float_64)((float_64)CALL $64((CASTING float_64)(uint_64 ((int_64)((int_64)((int_64)*($20 + [440]) + (int_64)$13) * (int_64)1280000) + (int_64)230399520000))) + (float_64)(float_64)-479999) * (float_64)(float_64)100)) - (Rounds 0)(((float_64)((float_64)CALL $64((CASTING float_64)(uint_64 ((int_64)((int_64)*($20 + [440]) * (int_64)1280000) + (int_64)230399520000))) + (float_64)(float_64)-479999) * (float_64)(float_64)100)))) >= (uint_64)( $2 ? (int_64)10000 : ((uint_64)$2 > (uint_64)(int_64)10000) )), [1008])
	*($20 + [328]) = $1
	*($20 + [216]) = ((int_64)*($20 + [216]) + (int_64)$13)
	*($20 + [208]) = ((int_64)*($20 + [208]) + (int_64)$10)
	*($20 + [352]) = ((int_64)*($20 + [352]) + (int_64)$13)
	$2 = ((int_64)*($20 + [344]) + (int_64)$10)
	*($20 + [344]) = $2
	CALL eosio_assert(((uint_64)$2 >= (uint_64)$10), [1104])
	*($20 + [168]) = ((int_64)CALL $34($0) + (int_64)1)
	$9 = ((int_64)$13 / (int_64)20)
	$7 = ((int_64)$13 / (int_64)50)
	$8 = ((int_64)((int_64)$13 * (int_64)11) / (int_64)100)
	$15 = ($20 + [340])
	if ( ((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [30]) >= (uint_32)*($15)) ){ goto $label$44 }
	$2 = CALL current_time()
	$18 = *($20 + [168])
	$4 = (((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [43200]) - (CASTING uint_32)(uint_64 ((int_64)$18 * (int_64)30)))
	$14 = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [30])
	*($15) = ( $14 ? $4 : ($4 <= $14) )
	
.LABEL $label$44
	CALL $16(($0 + [48]), ($20 + [168]), *($0))
	$4 = ($20 + [344])
	$2 = *($3)
	$11 = ((int_64)((int_64)$2 * (int_64)55) / (int_64)100)
	$13 = ((uint_64)((int_64)$11 * (int_64)1000000) / (uint_64)*($4))
	$18 = ((int_64)*($20 + [368]) + (int_64)$13)
	*($20 + [368]) = $18
	CALL eosio_assert(((uint_64)$18 >= (uint_64)$13), [1136])
	$18 = ((int_64)*($20 + [384]) + (int_64)1)
	*($20 + [384]) = $18
	$16 = *((($20 + [176]) + [40]))
	*($20 + [16]) = ((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$21())
	CALL sha256(($20 + [16]), [4], ($20 + [416]))
	$16 = ((uint_64)((int_64)((uint_64)$16 / (uint_64)(int_64)1000) * (int_64)30) / (uint_64)(int_64)100)
	$18 = ((int_64)( $16 ? (int_64)30 : (uint_64)($16 <= (int_64)30) ) + (int_64)((uint_64)((int_64)$18 * (int_64)70) / (uint_64)(int_64)100))
	$18 = ( $18 ? (int_64)100 : (uint_64)($18 <= (int_64)100) )
	if ( ((uint_64)((int_64)((uint_64)CALL llabs(*($20 + [416])) % (uint_64)(int_64))((int_64)101 - $18)) + (int_64)$18) <= (uint_64)(int_64)98) ){ goto $label$45 }
	$12 = ((uint_64)((int_64)$2 * (int_64)5) / (uint_64)(int_64)100)
	$2 = *($15)
	*(($15 = ($20 + [360]))) = (int_64))($2 - $12)
	*($20 + [376]) = ((int_64)$12 + (int_64)*($20 + [376]))
	CALL eosio_assert((uint_64)($12 <= *((($20 + [328]) + [24]))), [1152])
	*(($20 + [384])) = (int_64)0
	*($20 + [376]) = (int_64)0
	*($20 + [200]) = ((int_64)*($20 + [200]) + (int_64)$12)
	CALL eosio_assert([1], [688])
	$2 = (int_64)5459781
	$15 = [0]
	
.LOOP $label$48:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$49 }
	
.LOOP $label$50:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$47 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$50 }
	
.LABEL $label$49
	$14 = [1]
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	$14 = [0]
	
.LABEL $label$46
	CALL eosio_assert($14, [752])
	$19 = *($0)
	$2 = (int_64)0
	$16 = (int_64)59
	$15 = [1216]
	$17 = (int_64)0
	
.LOOP $label$51:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$56 }
	$14 = *($15)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$55 }
	$14 = ($14 + [165])
	goto $label$54 
	
.LABEL $label$56
	$18 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$55
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$54
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$53
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$52
	$15 = ($15 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$51 }
	*($20 + [120]) = $17
	*($20 + [112]) = $19
	$2 = (int_64)0
	$16 = (int_64)59
	$15 = [128]
	$17 = (int_64)0
	
.LOOP $label$57:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$62 }
	$14 = *($15)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$61 }
	$14 = ($14 + [165])
	goto $label$60 
	
.LABEL $label$62
	$18 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$61
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$60
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$59
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$58
	$15 = ($15 + [1])
	$16 = ((int_64)$16 + (int_64)-5)
	$17 = ((int_64)$18 | (int_64)$17)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$57 }
	$2 = (int_64)0
	$16 = (int_64)59
	$15 = [112]
	$19 = (int_64)0
	
.LOOP $label$63:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$68 }
	$14 = *($15)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$67 }
	$14 = ($14 + [165])
	goto $label$66 
	
.LABEL $label$68
	$18 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$67
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$66
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$65
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$64
	$15 = ($15 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$19 = ((int_64)$18 | (int_64)$19)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$63 }
	*(($20 + [160])) = [0]
	*($20 + [152]) = (int_64)0
	$15 = CALL strlen([1232])
	if ( ((uint_32)$15 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$15 >= (uint_32)[11]) ){ goto $label$71 }
	*($20 + [152]) = ($15 << [1])
	$14 = (($20 + [152]) | [1])
	if ( $15 ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$71
	$6 = (($15 + [16]) & [-16])
	$14 = CALL $54($6)
	*($20 + [152]) = ($6 | [1])
	*($20 + [160]) = $14
	*($20 + [156]) = $15
	
.LABEL $label$70
	CALL memcpy($14, [1232], $15)
	
.LABEL $label$69
	*(($14 + $15)) = [0]
	*(($20 + [440])) = (int_64)1397703940
	*(($20 + [452])) = *($20 + [156])
	*($20 + [424]) = $1
	$15 = ($20 + [160])
	*(($20 + [456])) = *($15)
	*($20 + [416]) = *($0)
	*($20 + [432]) = $12
	*($20 + [448]) = *($20 + [152])
	*($20 + [152]) = [0]
	*($20 + [156]) = [0]
	*($15) = [0]
	$15 = CALL $35(($20 + [16]), ($20 + [112]), $17, $19, ($20 + [416]))
	CALL $36(($20 + [72]), $15)
	$14 = *($20 + [72])
	CALL send_inline($14, (*($20 + [76]) - $14))
	$14 = *($20 + [72])
	if ( ($14 == 0) ){ goto $label$72 }
	*($20 + [76]) = $14
	CALL $55($14)
	
.LABEL $label$72
	$14 = *($15 + [28])
	if ( ($14 == 0) ){ goto $label$73 }
	*(($15 + [32])) = $14
	CALL $55($14)
	
.LABEL $label$73
	$14 = *($15 + [16])
	if ( ($14 == 0) ){ goto $label$74 }
	*(($15 + [20])) = $14
	CALL $55($14)
	
.LABEL $label$74
	if ( ((*(($20 + [448])) & [1]) == 0) ){ goto $label$75 }
	CALL $55(*(($20 + [456])))
	
.LABEL $label$75
	if ( ((*($20 + [152]) & [1]) == 0) ){ goto $label$76 }
	CALL $55(*(($20 + [160])))
	
.LABEL $label$76
	$2 = *($3)
	
.LABEL $label$45
	*($20 + [224]) = ((int_64))(*($20 + [224]) - ((uint_64)((int_64)$13 * (int_64)$10) / (uint_64)(int_64)1000000)) + (int_64)((uint_64)((int_64)*((($20 + [328]) + [40])) * (int_64)$10) / (uint_64)(int_64)1000000))
	$18 = ((uint_64)((int_64)*($4) * (int_64)$13) / (uint_64)(int_64)1000000)
	CALL eosio_assert(((uint_64)$18 <= (uint_64)$11), [1264])
	$18 = (int_64)
	CALL eosio_assert(((uint_64)$18((int_64))($2 - ((int_64)$8 + (int_64)$7)) - $18)) >= (uint_64)((int_64)((int_64)$2 * (int_64)30) / (int_64)100)), [1344])
	$2 = ((int_64)*($15) + (int_64)$18)
	*(($15 = (($20 + [328]) + [32]))) = $2
	CALL eosio_assert(((uint_64)$2 >= (uint_64)$18), [1392])
	CALL $37(($20 + [232]), ($20 + [176]), $1)
	CALL $15(($0 + [8]), ($20 + [328]), *($0))
	$2 = *($20 + [176])
	if ( (int_64)($2 == 0) ){ goto $label$80 }
	*((($20 + [112]) + [32])) = [0]
	*($20 + [128]) = (int_64)-1
	*($20 + [136]) = (int_64)0
	$18 = *($0)
	*($20 + [112]) = $18
	*($20 + [120]) = $2
	$15 = [0]
	$14 = CALL db_find_i64($18, $2, (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$81 }
	$15 = CALL $31(($20 + [112]), $14)
	CALL eosio_assert(((int_32)*($15 + [56]) == (int_32)($20 + [112])), [208])
	
.LABEL $label$81
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [1408])
	$15 = *(($20 + [140]))
	if ( ((int_32)$15 == (int_32)*(($20 + [136]))) ){ goto $label$79 }
	$15 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [56]) == (int_32)($20 + [112])), [208])
	goto $label$78 
	
.LABEL $label$80
	$1 = ((int_64)((int_64)$9 + (int_64)$7) + (int_64)$8)
	goto $label$77 
	
.LABEL $label$79
	$15 = [0]
	$14 = CALL db_find_i64(*($20 + [112]), *(($20 + [120])), (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$78 }
	$15 = CALL $31(($20 + [112]), $14)
	CALL eosio_assert(((int_32)*($15 + [56]) == (int_32)($20 + [112])), [208])
	
.LABEL $label$78
	$14 = [0]
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [272])
	CALL memcpy(($20 + [416]), $15, [56])
	$2 = ((int_64)*($20 + [424]) + (int_64)$8)
	*($20 + [424]) = $2
	CALL eosio_assert(((uint_64)$2 >= (uint_64)$8), [1440])
	CALL $37(($20 + [112]), ($20 + [416]), *($20 + [176]))
	$2 = *($20 + [416])
	if ( (int_64)($2 == 0) ){ goto $label$85 }
	*(($20 + [104])) = [0]
	*($20 + [88]) = (int_64)-1
	*($20 + [96]) = (int_64)0
	$18 = *($0)
	*($20 + [72]) = $18
	*($20 + [80]) = $2
	$15 = CALL db_find_i64($18, $2, (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$86 }
	$14 = CALL $31(($20 + [72]), $15)
	CALL eosio_assert(((int_32)*($14 + [56]) == (int_32)($20 + [72])), [208])
	
.LABEL $label$86
	$15 = [0]
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [1472])
	$14 = *(($20 + [100]))
	if ( ((int_32)$14 == (int_32)*(($20 + [96]))) ){ goto $label$84 }
	$15 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [56]) == (int_32)($20 + [72])), [208])
	goto $label$83 
	
.LABEL $label$85
	$1 = ((int_64)$7 + (int_64)$9)
	$4 = *($20 + [136])
	if ( $4 ){ goto $label$82 }
	goto $label$77 
	
.LABEL $label$84
	$14 = CALL db_find_i64(*($20 + [72]), *(($20 + [80])), (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$83 }
	$15 = CALL $31(($20 + [72]), $14)
	CALL eosio_assert(((int_32)*($15 + [56]) == (int_32)($20 + [72])), [208])
	
.LABEL $label$83
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [272])
	CALL memcpy(($20 + [16]), $15, [56])
	$2 = ((int_64)*($20 + [24]) + (int_64)$9)
	*($20 + [24]) = $2
	CALL eosio_assert(((uint_64)$2 >= (uint_64)$9), [1504])
	CALL $37(($20 + [72]), ($20 + [16]), *($20 + [416]))
	$4 = *($20 + [96])
	if ( ($4 == 0) ){ goto $label$87 }
	$6 = ($20 + [100])
	$15 = *($6)
	if ( ((int_32)$15 == (int_32)$4) ){ goto $label$89 }
	
.LOOP $label$90:
	$15 = ($15 + [-24])
	$14 = *($15)
	*($15) = [0]
	if ( ($14 == 0) ){ goto $label$91 }
	CALL $55($14)
	
.LABEL $label$91
	if ( ((int_32)$4 != (int_32)$15) ){ goto $label$90 }
	$15 = *(($20 + [96]))
	goto $label$88 
	
.LABEL $label$89
	$15 = $4
	
.LABEL $label$88
	*($6) = $4
	CALL $55($15)
	
.LABEL $label$87
	$1 = $7
	$4 = *($20 + [136])
	if ( ($4 == 0) ){ goto $label$77 }
	
.LABEL $label$82
	$6 = ($20 + [140])
	$15 = *($6)
	if ( ((int_32)$15 == (int_32)$4) ){ goto $label$93 }
	
.LOOP $label$94:
	$15 = ($15 + [-24])
	$14 = *($15)
	*($15) = [0]
	if ( ($14 == 0) ){ goto $label$95 }
	CALL $55($14)
	
.LABEL $label$95
	if ( ((int_32)$4 != (int_32)$15) ){ goto $label$94 }
	$15 = *(($20 + [136]))
	goto $label$92 
	
.LABEL $label$93
	$15 = $4
	
.LABEL $label$92
	*($6) = $4
	CALL $55($15)
	
.LABEL $label$77
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [688])
	$2 = (int_64)5459781
	$15 = [0]
	
.LOOP $label$98:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$97 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$99 }
	
.LOOP $label$100:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$97 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$100 }
	
.LABEL $label$99
	$14 = [1]
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$98 }
	goto $label$96 
	
.LABEL $label$97
	$14 = [0]
	
.LABEL $label$96
	CALL eosio_assert($14, [752])
	$19 = *($0)
	$2 = (int_64)0
	$16 = (int_64)59
	$15 = [1216]
	$17 = (int_64)0
	
.LOOP $label$101:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$106 }
	$14 = *($15)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$105 }
	$14 = ($14 + [165])
	goto $label$104 
	
.LABEL $label$106
	$18 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$105
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$104
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$103
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$102
	$15 = ($15 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$101 }
	*($20 + [120]) = $17
	*($20 + [112]) = $19
	$2 = (int_64)0
	$16 = (int_64)59
	$15 = [128]
	$17 = (int_64)0
	
.LOOP $label$107:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$112 }
	$14 = *($15)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$111 }
	$14 = ($14 + [165])
	goto $label$110 
	
.LABEL $label$112
	$18 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$109 }
	goto $label$108 
	
.LABEL $label$111
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$110
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$109
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$108
	$15 = ($15 + [1])
	$16 = ((int_64)$16 + (int_64)-5)
	$17 = ((int_64)$18 | (int_64)$17)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$107 }
	$2 = (int_64)0
	$16 = (int_64)59
	$15 = [112]
	$19 = (int_64)0
	
.LOOP $label$113:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$118 }
	$14 = *($15)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$117 }
	$14 = ($14 + [165])
	goto $label$116 
	
.LABEL $label$118
	$18 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$115 }
	goto $label$114 
	
.LABEL $label$117
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$116
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$115
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$114
	$15 = ($15 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$19 = ((int_64)$18 | (int_64)$19)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$113 }
	*(($20 + [160])) = [0]
	*($20 + [152]) = (int_64)0
	$15 = CALL strlen([1536])
	if ( ((uint_32)$15 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$15 >= (uint_32)[11]) ){ goto $label$121 }
	*($20 + [152]) = ($15 << [1])
	$14 = (($20 + [152]) | [1])
	if ( $15 ){ goto $label$120 }
	goto $label$119 
	
.LABEL $label$121
	$4 = (($15 + [16]) & [-16])
	$14 = CALL $54($4)
	*($20 + [152]) = ($4 | [1])
	*($20 + [160]) = $14
	*($20 + [156]) = $15
	
.LABEL $label$120
	CALL memcpy($14, [1536], $15)
	
.LABEL $label$119
	*(($14 + $15)) = [0]
	*(($20 + [440])) = (int_64)1397703940
	*(($20 + [452])) = *($20 + [156])
	*($20 + [424]) = (int_64)6138621011902808592
	$15 = ($20 + [160])
	*(($20 + [456])) = *($15)
	*($20 + [416]) = *($0)
	*($20 + [432]) = $1
	*($20 + [448]) = *($20 + [152])
	*($20 + [152]) = [0]
	*($20 + [156]) = [0]
	*($15) = [0]
	$15 = CALL $35(($20 + [16]), ($20 + [112]), $17, $19, ($20 + [416]))
	CALL $36(($20 + [72]), $15)
	$14 = *($20 + [72])
	CALL send_inline($14, (*($20 + [76]) - $14))
	$14 = *($20 + [72])
	if ( ($14 == 0) ){ goto $label$122 }
	*($20 + [76]) = $14
	CALL $55($14)
	
.LABEL $label$122
	$14 = *($15 + [28])
	if ( ($14 == 0) ){ goto $label$123 }
	*(($15 + [32])) = $14
	CALL $55($14)
	
.LABEL $label$123
	$14 = *($15 + [16])
	if ( ($14 == 0) ){ goto $label$124 }
	*(($15 + [20])) = $14
	CALL $55($14)
	
.LABEL $label$124
	if ( ((*(($20 + [448])) & [1]) == 0) ){ goto $label$125 }
	CALL $55(*(($20 + [456])))
	
.LABEL $label$125
	if ( ((*($20 + [152]) & [1]) == 0) ){ goto $label$126 }
	CALL $55(*(($20 + [160])))
	
.LABEL $label$126
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [688])
	$2 = (int_64)5459781
	$15 = [0]
	
.LOOP $label$129:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$128 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$130 }
	
.LOOP $label$131:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$128 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$131 }
	
.LABEL $label$130
	$14 = [1]
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$129 }
	goto $label$127 
	
.LABEL $label$128
	$14 = [0]
	
.LABEL $label$127
	CALL eosio_assert($14, [752])
	$19 = *($0)
	$2 = (int_64)0
	$16 = (int_64)59
	$15 = [1216]
	$17 = (int_64)0
	
.LOOP $label$132:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$137 }
	$14 = *($15)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$136 }
	$14 = ($14 + [165])
	goto $label$135 
	
.LABEL $label$137
	$18 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$134 }
	goto $label$133 
	
.LABEL $label$136
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$135
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$134
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$133
	$15 = ($15 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$132 }
	*($20 + [120]) = $17
	*($20 + [112]) = $19
	$2 = (int_64)0
	$16 = (int_64)59
	$15 = [128]
	$17 = (int_64)0
	
.LOOP $label$138:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$143 }
	$14 = *($15)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$142 }
	$14 = ($14 + [165])
	goto $label$141 
	
.LABEL $label$143
	$18 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$140 }
	goto $label$139 
	
.LABEL $label$142
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$141
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$140
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$139
	$15 = ($15 + [1])
	$16 = ((int_64)$16 + (int_64)-5)
	$17 = ((int_64)$18 | (int_64)$17)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$138 }
	$2 = (int_64)0
	$16 = (int_64)59
	$15 = [112]
	$19 = (int_64)0
	
.LOOP $label$144:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$149 }
	$14 = *($15)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$148 }
	$14 = ($14 + [165])
	goto $label$147 
	
.LABEL $label$149
	$18 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$146 }
	goto $label$145 
	
.LABEL $label$148
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$147
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$146
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$145
	$15 = ($15 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$19 = ((int_64)$18 | (int_64)$19)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$144 }
	*(($20 + [160])) = [0]
	*($20 + [152]) = (int_64)0
	$15 = CALL strlen([1536])
	if ( ((uint_32)$15 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$15 >= (uint_32)[11]) ){ goto $label$152 }
	*($20 + [152]) = ($15 << [1])
	$14 = (($20 + [152]) | [1])
	if ( $15 ){ goto $label$151 }
	goto $label$150 
	
.LABEL $label$152
	$4 = (($15 + [16]) & [-16])
	$14 = CALL $54($4)
	*($20 + [152]) = ($4 | [1])
	*($20 + [160]) = $14
	*($20 + [156]) = $15
	
.LABEL $label$151
	CALL memcpy($14, [1536], $15)
	
.LABEL $label$150
	*(($14 + $15)) = [0]
	*(($20 + [440])) = (int_64)1397703940
	*(($20 + [452])) = *($20 + [156])
	*($20 + [424]) = (int_64)6138621011902808592
	$15 = ($20 + [160])
	*(($20 + [456])) = *($15)
	*($20 + [416]) = *($0)
	*($20 + [432]) = $7
	*($20 + [448]) = *($20 + [152])
	*($20 + [152]) = [0]
	*($20 + [156]) = [0]
	*($15) = [0]
	$15 = CALL $35(($20 + [16]), ($20 + [112]), $17, $19, ($20 + [416]))
	CALL $36(($20 + [72]), $15)
	$14 = *($20 + [72])
	CALL send_inline($14, (*($20 + [76]) - $14))
	$14 = *($20 + [72])
	if ( ($14 == 0) ){ goto $label$153 }
	*($20 + [76]) = $14
	CALL $55($14)
	
.LABEL $label$153
	$14 = *($15 + [28])
	if ( ($14 == 0) ){ goto $label$154 }
	*(($15 + [32])) = $14
	CALL $55($14)
	
.LABEL $label$154
	$14 = *($15 + [16])
	if ( ($14 == 0) ){ goto $label$155 }
	*(($15 + [20])) = $14
	CALL $55($14)
	
.LABEL $label$155
	if ( ((*(($20 + [448])) & [1]) == 0) ){ goto $label$156 }
	CALL $55(*(($20 + [456])))
	
.LABEL $label$156
	if ( ((*($20 + [152]) & [1]) == 0) ){ goto $label$157 }
	CALL $55(*(($20 + [160])))
	
.LABEL $label$157
	$4 = *($20 + [256])
	if ( ($4 == 0) ){ goto $label$4 }
	$0 = ($20 + [260])
	$15 = *($0)
	if ( ((int_32)$15 == (int_32)$4) ){ goto $label$159 }
	
.LOOP $label$160:
	$15 = ($15 + [-24])
	$14 = *($15)
	*($15) = [0]
	if ( ($14 == 0) ){ goto $label$161 }
	CALL $55($14)
	
.LABEL $label$161
	if ( ((int_32)$4 != (int_32)$15) ){ goto $label$160 }
	$15 = *(($20 + [256]))
	goto $label$158 
	
.LABEL $label$159
	$15 = $4
	
.LABEL $label$158
	*($0) = $4
	CALL $55($15)
	
.LABEL $label$4
	*([0] + [4]) = ($20 + [496])
	return (unreachable)
	
.LABEL $label$3
	CALL $56(($20 + [152]))
	
.LABEL $label$2
	CALL $56(($20 + [152]))
	
.LABEL $label$1
	CALL $56(($20 + [152]))
	(unreachable)
	(unreachable)
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [688])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [752])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $26(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $27(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $55(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN12eosgameworld8withdrawEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [304])
	*([0] + [4]) = $13
	$7 = [1]
	if ( CALL has_auth($1) ){ goto $label$1 }
	$7 = CALL has_auth(*($0))
	
.LABEL $label$1
	CALL eosio_assert($7, [1632])
	CALL $32(($13 + [216]), $0)
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) <= (uint_32)*($13 + [228])) ){ goto $label$2 }
	if ( *($13 + [224]) ){ goto $label$2 }
	*((($13 + [216]) + [8])) = [1]
	$8 = *($13 + [248])
	CALL $15(($0 + [8]), ($13 + [216]), *($0))
	*($13 + [32]) = (int_64)-1
	*($13 + [40]) = [0]
	$9 = *($13 + [216])
	$11 = *($0)
	*($13 + [16]) = $11
	*($13 + [24]) = $9
	*(($5 = ($13 + [44]))) = [0]
	*(($13 + [48])) = [0]
	$7 = [0]
	$3 = CALL db_find_i64($11, $9, (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $31(($13 + [16]), $3)
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)($13 + [16])), [208])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1648])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)*(($13 + [40]))) ){ goto $label$6 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)($13 + [16])), [208])
	if ( $7 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = CALL db_find_i64(*($13 + [16]), *(($13 + [24])), (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(CALL $31(($13 + [16]), $7) + [56]) == (int_32)($13 + [16])), [208])
	
.LABEL $label$5
	$7 = *(($13 + [44]))
	if ( ((int_32)$7 == (int_32)*(($13 + [40]))) ){ goto $label$8 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)($13 + [16])), [208])
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	$5 = CALL db_find_i64(*($13 + [16]), *(($13 + [24])), (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $31(($13 + [16]), $5)
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)($13 + [16])), [208])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [272])
	CALL memcpy(($13 + [160]), $7, [56])
	*($13 + [176]) = ((int_64)*($13 + [176]) + (int_64)$8)
	CALL $37(($13 + [16]), ($13 + [160]), *($13 + [216]))
	
.LABEL $label$4
	$3 = *($13 + [40])
	if ( ($3 == 0) ){ goto $label$2 }
	$6 = ($13 + [44])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$10 }
	
.LOOP $label$11:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $55($5)
	
.LABEL $label$12
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$11 }
	$7 = *(($13 + [40]))
	goto $label$9 
	
.LABEL $label$10
	$7 = $3
	
.LABEL $label$9
	*($6) = $3
	CALL $55($7)
	
.LABEL $label$2
	*(($13 + [152])) = [0]
	*($13 + [136]) = (int_64)-1
	*($13 + [144]) = (int_64)0
	$9 = *($0)
	*($13 + [120]) = $9
	*($13 + [128]) = $1
	$7 = [0]
	$5 = CALL db_find_i64($9, $1, (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$13 }
	$7 = CALL $31(($13 + [120]), $5)
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)($13 + [120])), [208])
	
.LABEL $label$13
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1680])
	$7 = *(($13 + [148]))
	if ( ((int_32)$7 == (int_32)*(($13 + [144]))) ){ goto $label$15 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)($13 + [120])), [208])
	goto $label$14 
	
.LABEL $label$15
	$7 = [0]
	$5 = CALL db_find_i64(*($13 + [120]), *(($13 + [128])), (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$14 }
	$7 = CALL $31(($13 + [120]), $5)
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)($13 + [120])), [208])
	
.LABEL $label$14
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [272])
	CALL memcpy(($13 + [160]), $7, [56])
	$11 = ((uint_64)((int_64)*($13 + [192]) * (int_64)*($13 + [256])) / (uint_64)(int_64)1000000)
	$9 = (int_64)
	if ( (int_64)($9($11 - *($13 + [208]))) == 0) ){ goto $label$16 }
	*(($13 + [208])) = $11
	
.LABEL $label$16
	$9 = ((int_64)((int_64)*($13 + [168]) + (int_64)$9) + (int_64)*($13 + [176]))
	if ( (*($13 + [224]) == 0) ){ goto $label$20 }
	$7 = *(($13 + [148]))
	if ( ((int_32)$7 == (int_32)*(($13 + [144]))) ){ goto $label$19 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)($13 + [120])), [208])
	if ( $7 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	*(($13 + [176])) = (int_64)0
	*(($13 + [168])) = (int_64)0
	CALL $37(($13 + [120]), ($13 + [160]), $1)
	goto $label$17 
	
.LABEL $label$19
	$7 = CALL db_find_i64(*($13 + [120]), *(($13 + [128])), (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$17 }
	$7 = CALL $31(($13 + [120]), $7)
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)($13 + [120])), [208])
	
.LABEL $label$18
	CALL eosio_assert([1], [1712])
	CALL eosio_assert([1], [1760])
	$5 = CALL db_next_i64(*($7 + [60]), ($13 + [16]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$21 }
	CALL $31(($13 + [120]), $5)
	
.LABEL $label$21
	CALL $49(($13 + [120]), $7)
	
.LABEL $label$17
	CALL eosio_assert((uint_64)($9 <= *($13 + [240])), [1792])
	$11 = *($2)
	$4 = ((int_64)$11 + (int_64)$9)
	CALL eosio_assert(((uint_64)$4 > (uint_64)$11), [1856])
	if ( (int_64)($4 == 0) ){ goto $label$23 }
	CALL prints([1904])
	CALL printui($4)
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [688])
	$9 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	
.LOOP $label$28:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$25 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$28 }
	
.LABEL $label$27
	$5 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$5 = [0]
	
.LABEL $label$24
	CALL eosio_assert($5, [752])
	$12 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1216]
	$10 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$34 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$5 = ($5 + [165])
	goto $label$32 
	
.LABEL $label$34
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$30
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$29 }
	*($13 + [72]) = $10
	*($13 + [64]) = $12
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [128]
	$10 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$40 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$5 = ($5 + [165])
	goto $label$38 
	
.LABEL $label$40
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$36
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$35 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [112]
	$12 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$46 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$5 = ($5 + [165])
	goto $label$44 
	
.LABEL $label$46
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$42
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$12 = ((int_64)$11 | (int_64)$12)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$41 }
	*(($13 + [8])) = [0]
	*($13) = (int_64)0
	$7 = CALL strlen([1920])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$22 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$49 }
	*($13) = ($7 << [1])
	$5 = ($13 | [1])
	if ( $7 ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	$3 = (($7 + [16]) & [-16])
	$5 = CALL $54($3)
	*($13) = ($3 | [1])
	*($13 + [8]) = $5
	*($13 + [4]) = $7
	
.LABEL $label$48
	CALL memcpy($5, [1920], $7)
	
.LABEL $label$47
	*(($5 + $7)) = [0]
	*(($13 + [40])) = (int_64)1397703940
	*(($13 + [52])) = *($13 + [4])
	*($13 + [24]) = $1
	$7 = ($13 + [8])
	*(($13 + [56])) = *($7)
	*($13 + [16]) = *($0)
	*($13 + [32]) = $4
	*($13 + [48]) = *($13)
	*($13) = [0]
	*($13 + [4]) = [0]
	*($7) = [0]
	$7 = CALL $35(($13 + [80]), ($13 + [64]), $10, $12, ($13 + [16]))
	CALL $36(($13 + [288]), $7)
	$5 = *($13 + [288])
	CALL send_inline($5, (*($13 + [292]) - $5))
	$5 = *($13 + [288])
	if ( ($5 == 0) ){ goto $label$50 }
	*($13 + [292]) = $5
	CALL $55($5)
	
.LABEL $label$50
	$5 = *($7 + [28])
	if ( ($5 == 0) ){ goto $label$51 }
	*(($7 + [32])) = $5
	CALL $55($5)
	
.LABEL $label$51
	$5 = *($7 + [16])
	if ( ($5 == 0) ){ goto $label$52 }
	*(($7 + [20])) = $5
	CALL $55($5)
	
.LABEL $label$52
	if ( ((*(($13 + [48])) & [1]) == 0) ){ goto $label$53 }
	CALL $55(*(($13 + [56])))
	
.LABEL $label$53
	if ( ((*($13) & [1]) == 0) ){ goto $label$23 }
	CALL $55(*(($13 + [8])))
	
.LABEL $label$23
	$0 = *($13 + [144])
	if ( ($0 == 0) ){ goto $label$54 }
	$3 = ($13 + [148])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$56 }
	
.LOOP $label$57:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$58 }
	CALL $55($5)
	
.LABEL $label$58
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$57 }
	$7 = *(($13 + [144]))
	goto $label$55 
	
.LABEL $label$56
	$7 = $0
	
.LABEL $label$55
	*($3) = $0
	CALL $55($7)
	
.LABEL $label$54
	*([0] + [4]) = ($13 + [304])
	return (unreachable)
	
.LABEL $label$22
	CALL $56($13)
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [688])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [752])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [160])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [160])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [160])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [160])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$7 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [32]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$9 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [112]
	$9 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$22 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$3 = ($3 + [165])
	goto $label$20 
	
.LABEL $label$22
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$18
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$17 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$16
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$9 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$28 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$24
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$9 == (int_64)$2) ){ goto $label$15 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [128]
	$9 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$34 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$30
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$29 }
	if ( ((int_64)$9 != (int_64)$1) ){ goto $label$14 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [112]
	$9 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$40 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$40
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$36
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*(($11 + [88])) = $0
	*(($11 + [96])) = (int_64)-1
	*(($11 + [104])) = (int_64)0
	*(($11 + [112])) = [0]
	*($11 + [80]) = $0
	*($11 + [72]) = $0
	*($11 + [120]) = $0
	*(($11 + [128])) = $0
	*(($11 + [136])) = (int_64)-1
	*(($11 + [144])) = [0]
	*(($11 + [148])) = [0]
	*(($11 + [152])) = [0]
	if ( ((int_64)$2 > (int_64)-2039333636196532225) ){ goto $label$44 }
	if ( ((int_64)$2 == (int_64)-3841130677495922688) ){ goto $label$43 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$41 }
	*($11 + [60]) = [0]
	*($11 + [56]) = [1]
	*($11 + [16 align=4]) = *($11 + [56])
	CALL $9(($11 + [72]), ($11 + [16]))
	goto $label$41 
	
.LABEL $label$44
	if ( ((int_64)$2 == (int_64)5031766152489992192) ){ goto $label$42 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$41 }
	*($11 + [68]) = [0]
	*($11 + [64]) = [2]
	*($11 + [8 align=4]) = *($11 + [64])
	CALL $7(($11 + [72]), ($11 + [8]))
	goto $label$41 
	
.LABEL $label$43
	*($11 + [44]) = [0]
	*($11 + [40]) = [3]
	*($11 + [32 align=4]) = *($11 + [40])
	CALL $13(($11 + [72]), ($11 + [32]))
	goto $label$41 
	
.LABEL $label$42
	*($11 + [52]) = [0]
	*($11 + [48]) = [4]
	*($11 + [24 align=4]) = *($11 + [48])
	CALL $11(($11 + [72]), ($11 + [24]))
	
.LABEL $label$41
	$4 = *(($11 + [144]))
	if ( ($4 == 0) ){ goto $label$45 }
	$5 = ($11 + [148])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$47 }
	
.LOOP $label$48:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$49 }
	CALL $55($3)
	
.LABEL $label$49
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$48 }
	$6 = *(($11 + [144]))
	goto $label$46 
	
.LABEL $label$47
	$6 = $4
	
.LABEL $label$46
	*($5) = $4
	CALL $55($6)
	
.LABEL $label$45
	$4 = *(($11 + [104]))
	if ( ($4 == 0) ){ goto $label$14 }
	$5 = ($11 + [108])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$51 }
	
.LOOP $label$52:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$53 }
	CALL $55($3)
	
.LABEL $label$53
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$52 }
	$6 = *(($11 + [104]))
	goto $label$50 
	
.LABEL $label$51
	$6 = $4
	
.LABEL $label$50
	*($5) = $4
	CALL $55($6)
	
.LABEL $label$14
	*([0] + [4]) = ($11 + [160])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [656])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [20]) = $4
	*($7 + [16]) = $4
	*($7 + [24]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($5 = CALL $54([88])) + [64]) = [0]
	*($5 + [12]) = [0]
	*($5 + [72]) = $0
	*($7 + [32]) = ($7 + [16])
	*($7 + [44]) = ($5 + [8])
	*($7 + [40]) = $5
	*($7 + [48]) = ($5 + [12])
	*($7 + [52]) = ($5 + [16])
	*($7 + [56]) = ($5 + [24])
	*($7 + [60]) = ($5 + [32])
	*($7 + [64]) = ($5 + [40])
	*($7 + [68]) = ($5 + [48])
	*($7 + [72]) = ($5 + [56])
	*($7 + [76]) = ($5 + [64])
	CALL $25(($7 + [40]), ($7 + [32]))
	*($5 + [76]) = $1
	*($7 + [32]) = $5
	*($7 + [40]) = (int_64)-4812882902415048704
	$6 = *($5 + [76])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)-4812882902415048704
	*($4 + [16]) = $6
	*($7 + [32]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $24(($0 + [24]), ($7 + [32]), ($7 + [40]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $55($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [80])
	return $5
}

void .FUNC $15 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [72]) == (int_32)$0), [208])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4812882902415048704, (int_64)-4812882902415048704)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $14($0, $3)
	CALL eosio_assert(((int_32)*($3 + [72]) == (int_32)$0), [208])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [352])
	CALL $21($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $22($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [208])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-7015353281538949120, (int_64)-7015353281538949120)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $17($0, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [208])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [352])
	CALL $18($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $19($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [656])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $54([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [160])
	CALL memcpy($5, $6, [8])
	*($5 + [12]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)-7015353281538949120
	$6 = *($5 + [12])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)-7015353281538949120
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $20(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$7
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $55($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

void .FUNC _ZN12eosgameworld6createEN5eosio14time_point_secE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	CALL eosio_assert(((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000)) <= $1), [176])
	$2 = ($0 + [8])
	$5 = *(($0 + [36]))
	if ( ((int_32)$5 == (int_32)*(($0 + [32]))) ){ goto $label$6 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$2), [208])
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = CALL db_find_i64(*($2), *(($0 + [16])), (int_64)-4812882902415048704, (int_64)-4812882902415048704)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(CALL $14($2, $5) + [72]) == (int_32)$2), [208])
	
.LABEL $label$5
	$5 = *(($0 + [36]))
	if ( ((int_32)$5 == (int_32)*(($0 + [32]))) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$2), [208])
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert([1], [304])
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$3 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4812882902415048704, (int_64)-4812882902415048704)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $14($2, $3)
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$2), [208])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [272])
	CALL eosio_assert((*($5 + [12]) <= (CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000))), [304])
	
.LABEL $label$1
	*($6 + [16]) = [0]
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = (int_64)0
	$4 = *($0)
	*($6 + [8]) = $4
	*($6 + [20]) = ($1 + [43200])
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = (int_64)0
	*($6 + [64]) = (int_64)0
	*($6 + [72]) = $1
	CALL $15($2, ($6 + [8]), $4)
	*($6) = (int_64)0
	CALL $16(($0 + [48]), $6, *($0))
	*([0] + [4]) = ($6 + [80])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [160])
	CALL memcpy(($5 + [8]), $3, [4])
	$6 = *($5 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 $6), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC _ZN12eosgameworld4testEv (int_32 $0)
{
	CALL prints([144])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $30($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [464])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [464])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $43(CALL $42($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [56]) == (int_32)$0), [208])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $31($0, $3)
	CALL eosio_assert(((int_32)*($3 + [56]) == (int_32)$0), [208])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [352])
	CALL $38($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $39($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_64 .FUNC $34 (int_32 $0)
{
	int_32 $1
	int_32 $2
	CALL $46($1)
	$1 = ($0 + [48])
	$2 = *(($0 + [76]))
	if ( ((int_32)$2 == (int_32)*(($0 + [72]))) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [8]) == (int_32)$1), [208])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	$0 = CALL db_find_i64(*($1), *(($0 + [56])), (int_64)-7015353281538949120, (int_64)-7015353281538949120)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $17($1, $0)
	CALL eosio_assert(((int_32)*($2 + [8]) == (int_32)$1), [208])
	
.LABEL $label$1
	return CALL eosio_assert(((int_32)$2 != (int_32)[0]), [1584])
}

int_32 .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $54([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $30($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $44(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($1 + [8])
	$4 = *(($1 + [36]))
	if ( ((int_32)$4 == (int_32)*(($1 + [32]))) ){ goto $label$2 }
	$3 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [72]) == (int_32)$2), [208])
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	$4 = CALL db_find_i64(*($2), *(($1 + [16])), (int_64)-4812882902415048704, (int_64)-4812882902415048704)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $14($2, $4)
	CALL eosio_assert(((int_32)*($3 + [72]) == (int_32)$2), [208])
	
.LABEL $label$1
	$4 = [0]
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [1616])
	$3 = *(($1 + [36]))
	if ( ((int_32)$3 == (int_32)*(($1 + [32]))) ){ goto $label$4 }
	$4 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$2), [208])
	goto $label$3 
	
.LABEL $label$4
	$1 = CALL db_find_i64(*(($1 + [8])), *(($1 + [16])), (int_64)-4812882902415048704, (int_64)-4812882902415048704)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $14($2, $1)
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$2), [208])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [272])
	CALL memcpy($0, $4, [72])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = *(($1 + [28]))
	if ( ((int_32)$4 == (int_32)*($1 + [24])) ){ goto $label$4 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$1), [208])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $31($1, $4)
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$1), [208])
	
.LABEL $label$3
	CALL memcpy($0, $4, [56])
	goto $label$1 
	
.LABEL $label$2
	*($5 + [8]) = $3
	CALL $47($5, $1, $2, ($5 + [8]))
	CALL memcpy($0, *($5 + [4]), [56])
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $54($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $60($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $55($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [656])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [12]) = $4
	*($7 + [8]) = $4
	*($7 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($5 = CALL $54([72])) + [56]) = $0
	*($7 + [24]) = ($7 + [8])
	*($7 + [36]) = ($5 + [8])
	*($7 + [32]) = $5
	*($7 + [40]) = ($5 + [16])
	*($7 + [44]) = ($5 + [24])
	*($7 + [48]) = ($5 + [32])
	*($7 + [52]) = ($5 + [40])
	*($7 + [56]) = ($5 + [48])
	CALL $48(($7 + [32]), ($7 + [24]))
	*($5 + [60]) = $1
	*($7 + [24]) = $5
	*($7 + [32]) = (int_64)-6030912142679474176
	$6 = *($5 + [60])
	*($7 + [4]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)-6030912142679474176
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $41(($0 + [24]), ($7 + [24]), ($7 + [32]), ($7 + [4]))
	
.LABEL $label$8
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $55($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [64])
	return $5
}

int_32 .FUNC $58 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $54($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC isspace (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $51([2120], $0)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [112])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [480])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [528])
	CALL memcpy($1, *($3), [56])
	CALL eosio_assert([1], [592])
	*($4 + [64]) = ($4 + [56])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	*($4 + [72]) = ($4 + [56])
	*($4 + [84]) = ($1 + [8])
	*($4 + [80]) = $1
	*($4 + [88]) = ($1 + [16])
	*($4 + [92]) = ($1 + [24])
	*($4 + [96]) = ($1 + [32])
	*($4 + [100]) = ($1 + [40])
	*($4 + [104]) = ($1 + [48])
	CALL $40(($4 + [80]), ($4 + [72]))
	CALL db_update_i64(*($1 + [60]), $2, $4, [56])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-6030912142679474176) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-6030912142679474175
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [112])
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10614]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10616])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10614]) = [1]
	$7 = ($7 << [16])
	*([0] + [10616]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10616])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10616]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10614]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10614]) = [1]
	$3 = ($3 << [16])
	*([0] + [10616]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10616])
	
.LABEL $label$8
	*([0] + [10616]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10504])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10312]
	$1 = (((int_32)$2 * (int_32)[12]) + [10312])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10620])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $55 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $56 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $54(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $55($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}