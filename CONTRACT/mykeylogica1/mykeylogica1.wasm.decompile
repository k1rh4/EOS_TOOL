(data (i32.const 8192) "transfer\00")
(data (i32.const 8201) "unable to find key\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8306) "mykeymanager\00")
(data (i32.const 8319) "main account doesn\'t have enough asset available to transfer out!\00")
(data (i32.const 8385) "active\00")
(data (i32.const 8392) "forward\00")
(data (i32.const 8400) "sendexternal called.\n\00")
(data (i32.const 8422) "sendinternal called.\n\00")
(data (i32.const 8444) "sub_account does not exists!\00")
(data (i32.const 8473) "target contract not whitelisted\00")
(data (i32.const 8505) "subtomain\00")
(data (i32.const 8515) "mdfsubkey\00")
(data (i32.const 8525) "cannot modify sub admin key in sub internal action\00")
(data (i32.const 8576) "invalid sub internal action name\00")
(data (i32.const 8609) "sendsubsig called.\n\00%llu\00")
(data (i32.const 8634) "propose\00")
(data (i32.const 8642) "chgadmkey\00")
(data (i32.const 8652) "addbackup\00")
(data (i32.const 8662) "invalid dual-sig action name\00")
(data (i32.const 8691) "assist\00")
(data (i32.const 8698) "senddualsigs called.\n\00")
(data (i32.const 8720) "canceltx\00")
(data (i32.const 8729) "sendcancel called.\n\00")
(data (i32.const 8749) "the same admin key exists\00")
(data (i32.const 8775) "chgadmkey called.\n\00")
(data (i32.const 8794) "operation key position >= 1\00")
(data (i32.const 8822) "addoprkey\00")
(data (i32.const 8832) "chgoprkey\00")
(data (i32.const 8842) "empty new-key array not allowed\00")
(data (i32.const 8874) "chgalloprkey\00")
(data (i32.const 8887) "delbackup\00")
(data (i32.const 8897) "passaction\00")
(data (i32.const 8908) "mdfkeydata\00")
(data (i32.const 8919) "unfreeze\00")
(data (i32.const 8928) "deferred tx canceled.\n\00")
(data (i32.const 8951) "deferred id not exist\00")
(data (i32.const 8973) "deferred tx too early to trigger\00")
(data (i32.const 9006) "deferred tx did not trigger.\n\00")
(data (i32.const 9036) "defunfreeze\00")
(data (i32.const 9048) "clearprop\00")
(data (i32.const 9058) "backup does not exist in emergency contact list\00")
(data (i32.const 9106) "setproposal\00")
(data (i32.const 9118) "setapproval\00")
(data (i32.const 9130) "use 0 as index for batch action\00")
(data (i32.const 9162) "empty new-key array expected\00")
(data (i32.const 9191) "single new-key expected\00")
(data (i32.const 9215) "admin key index == 0\00")
(data (i32.const 9236) "operation key index >= 1\00")
(data (i32.const 9261) "invalid proposed action\00")
(data (i32.const 9285) "proposal id not found\00")
(data (i32.const 9307) "keys vector not match\00")
(data (i32.const 9329) "client not match\00")
(data (i32.const 9346) "proposer not match\00")
(data (i32.const 9365) "proposed action not match\00")
(data (i32.const 9391) "index not match\00")
(data (i32.const 9407) "only proposal solely started by backup can be cancelled\00")
(data (i32.const 9463) "executeprop called.\n\00")
(data (i32.const 9484) "initsubacct called!\00")
(data (i32.const 9504) "addsubkey\00")
(data (i32.const 9514) "rmsubacct called!\00")
(data (i32.const 9532) "rmsubacct\00")
(data (i32.const 9542) "maintosub called!\00")
(data (i32.const 9560) "invalid quantity\00")
(data (i32.const 9577) "overdrawn balance 1\00")
(data (i32.const 9597) "main account doesn\'t have enough asset to send to subaccount!\00")
(data (i32.const 9659) "tosubacct\00")
(data (i32.const 9669) "subtomain called!\00")
(data (i32.const 9687) "tomainacct\00")
(data (i32.const 9698) "mdfsubkey called!\00")
(data (i32.const 9716) "addsubdapp called!\00")
(data (i32.const 9735) "addsubdapp\00")
(data (i32.const 9746) "rmsubdapp called!\00")
(data (i32.const 9764) "rmsubdapp\00")
(data (i32.const 9774) ",\00")
(data (i32.const 9776) ".\n\00")
(data (i32.const 9779) "deferred_id: \00")
(data (i32.const 9793) "addkeydata\00")
(data (i32.const 9804) "same deferred id already exists\00")
(data (i32.const 9836) "cleardef\00")
(data (i32.const 9845) "deferred tx sent.\n\00")
(data (i32.const 9864) "setdefdata\00")
(data (i32.const 9875) "the number of backups has a maximum limit\00")
(data (i32.const 9917) "setbkpdata\00")
(data (i32.const 9928) "removebkp\00")
(data (i32.const 9938) "may be out of bound of new-key array\00")
(data (i32.const 9975) "invalid action!\00")
(data (i32.const 9991) "empty data array not allowed\00")
(data (i32.const 10020) "removedef\00")
(data (i32.const 10030) "removeprop\00")
(data (i32.const 10041) "read_transaction failed\00")
(data (i32.const 10065) "invalid internal action name\00")
(data (i32.const 10094) "invalid self action\00")
(data (i32.const 10114) "verifysig called.\n\00")
(data (i32.const 10133) "key does not exist\00")
(data (i32.const 10152) "operation key is frozen\00")
(data (i32.const 10176) "nametostring:\00")
(data (i32.const 10190) ":\00")
(data (i32.const 10192) "stringstream:\00")
(data (i32.const 10206) "hexstr:\00")
(data (i32.const 10214) "totaltext:\00")
(data (i32.const 10225) "verify ok\n\00")
(data (i32.const 10236) "signing key is frozen\00")
(data (i32.const 10258) "assert_recover_key2 called.\n\00")
(data (i32.const 10287) "0123456789abcdef\00")
(data (i32.const 10304) "must have 60% approval at least\00")
(data (i32.const 10336) "string is too long to be a valid name\00")
(data (i32.const 10374) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 10441) "character is not in allowed character set for names\00")
(data (i32.const 10493) "type mismatch\00")
(data (i32.const 10507) "attempt to add asset with different symbol\00")
(data (i32.const 10550) "addition underflow\00")
(data (i32.const 10569) "addition overflow\00")
(data (i32.const 10587) "write\00")
(data (i32.const 10593) "@\00")
(data (i32.const 10595) "-%lld.%s %s\00")
(data (i32.const 10607) "%lld.%s %s\00")
(data (i32.const 10618) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 10680) "\bc)\00\00")
(data (i32.const 10684) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 10717) "read\00")
(data (i32.const 10722) "get\00")
(data (i32.const 10726) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 10777) "error reading iterator\00")
(data (i32.const 19216) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "action_data_size" (func $fimport$0 (result i32)))
(import "env" "read_action_data" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$4 (param i32 i32)))
(import "env" "prints" (func $fimport$5 (param i32)))
(import "env" "memcpy" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "cancel_deferred" (func $fimport$7 (param i32) (result i32)))
(import "env" "current_time" (func $fimport$8 (result i64)))
(import "env" "memset" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$10 (param i32 i32)))
(import "env" "printn" (func $fimport$11 (param i64)))
(import "env" "sha256" (func $fimport$12 (param i32 i32 i32)))
(import "env" "printhex" (func $fimport$13 (param i32 i32)))
(import "env" "assert_recover_key" (func $fimport$14 (param i32 i32 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$15 (param i32 i32)))
(import "env" "printui" (func $fimport$16 (param i64)))
(import "env" "printui128" (func $fimport$17 (param i32)))
(import "env" "send_deferred" (func $fimport$18 (param i32 i64 i32 i32 i32)))
(import "env" "transaction_size" (func $fimport$19 (result i32)))
(import "env" "read_transaction" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$23))
(import "env" "db_idx64_lowerbound" (func $fimport$24 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$25 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$34 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$35 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$36 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$37 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$40 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$42 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$43 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$44 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $177))
(export "_Znwj" (func $175))
(export "_Znaj" (func $176))
(export "_ZdaPv" (func $178))
(export "_ZnwjSt11align_val_t" (func $179))
(export "_ZnajSt11align_val_t" (func $180))
(export "_ZdlPvSt11align_val_t" (func $181))
(export "_ZdaPvSt11align_val_t" (func $182))
(table $0 34 34 anyfunc)
(elem (i32.const 1) $2 $4 $6 $8 $10 $11 $13 $15 $17 $19 $20 $22 $23 $25 $27 $29 $31 $33 $34 $36 $37 $39 $41 $42 $44 $46 $47 $48 $49 $51 $53 $197 $199)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19296))
(global $global$2 i32 (i32.const 19296))


void .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (*($0) + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0)
	$5 = ($6 + [48])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[31]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $5, [32])
	*(($4 = ($4 + [4]))) = (*($4) + [32])
	$7 = (CASTING uint_64)(uint_32 ((int_32)(*(($6 + [84])) - *($6 + [80])) / (int_32)[12]))
	$4 = *($1)
	$1 = *($4 + [4])
	$3 = ($4 + [8])
	
.LOOP $label$3:
	$0 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$5 = ((int_64)$7) != (int_64)0
	*($2 + [15]) = (($5) << [7]) | ($0 & [127]))
	if ( ((int_32)(*($3) - $1) > (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert([0], [10587])
	$1 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($1, ($2 + [15]), [1])
	$1 = (*($1) + [1])
	*(($1 = ($4 + [4]))) = $1
	if ( $5 ){ goto $label$3 }
	$0 = *(($6 + [84]))
	$1 = *(($6 + [80]))
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL $147($4, $1)
	$1 = ($1 + [12])
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$6 }
	
.LABEL $label$5
	$global$0 = ($2 + [16])
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	CALL require_auth(*($0))
	CALL $70($0, $1, $2, $3)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $207($0)
	
.LABEL $label$1
}

int_32 .FUNC $170 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$9 = *($1)
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	$3 = *($9)
	
.LOOP $label$5:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [14]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [10587])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [14]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$5 }
	$7 = ($9 + [4])
	if ( ((int_32)(*($5) - $4) > (int_32)[32]) ){ goto $label$7 }
	CALL eosio_assert([0], [10587])
	$4 = *($6)
	
.LABEL $label$7
	CALL memcpy($4, $7, [33])
	$4 = (*($6) + [33])
	*($6) = $4
	$9 = ($9 + [40])
	if ( ((int_32)$9 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $171 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [10777])
	
.LABEL $label$5
	$4 = CALL $204($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL _Znwj([80])) + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	*($3 + [44]) = ($5 + [44])
	CALL $172(($3 + [32]), ($3 + [24]))
	*($5 + [64]) = [-1]
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $173(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $207($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$4 = *($1 + [44])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($1 + [48])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$12 }
	*(($1 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $172 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[15]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [16])
	*(($3 = ($3 + [4]))) = (*($3) + [16])
	CALL $160(*($1), *($0 + [8]))
	CALL $77(*($1), *($0 + [12]))
}

int_32 .FUNC $7 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [112]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $69(($4 + [24]), ($4 + [112]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($8 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4 + [8])
	$3 = *($8)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [96])
	*($4 + [40]) = $0
	*($4 + [112]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	$1 = *($4 + [80])
	$9 = *($4 + [72])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $207($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $4 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [464])
	$global$0 = $3
	*(($3 + [456])) = [0]
	*($3 + [424]) = (int_64)0
	*($3 + [432]) = (int_64)0
	*($3 + [440]) = (int_64)0
	*($3 + [448]) = (int_64)0
	$4 = *($2 + [4])
	$5 = *($2)
	*($3 + [268]) = $5
	*($3 + [264]) = $5
	*($3 + [272]) = $4
	CALL $79(($3 + [264]), ($3 + [424]))
	$6 = *($3 + [432])
	$7 = *($3 + [440])
	$8 = *($3 + [424])
	CALL memcpy(($3 + [352]), $1, [66])
	*($3 + [344]) = [0]
	*($3 + [336]) = (int_64)0
	$1 = (*($2 + [4]) - *($2))
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$8 }
	$4 = CALL _Znwj($1)
	*(($3 + [344])) = ($4 + $1)
	*($3 + [336]) = $4
	*($3 + [340]) = $4
	$5 = *($2)
	$1 = (*(($2 + [4])) - $5)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($4, $5, $1)
	*($3 + [340]) = (*($3 + [340]) + $1)
	
.LABEL $label$9
	CALL memcpy(($3 + [54]), ($3 + [352]), [66])
	CALL $80($0, $8, $7, $6, ($3 + [54]), ($3 + [336]), [0])
	$1 = *($3 + [336])
	if ( ($1 == 0) ){ goto $label$10 }
	*($3 + [340]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	*($3 + [328]) = [8192]
	*($3 + [332]) = CALL $201([8192])
	*($3 + [40]) = *($3 + [328])
	if ( ((int_64)$6 != (int_64)*(CALL $55(($3 + [264]), ($3 + [40])))) ){ goto $label$1 }
	*($3 + [320]) = [0]
	*($3 + [312]) = (int_64)0
	$4 = (*(($3 + [452])) - *($3 + [448]))
	if ( ($4 == 0) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL _Znwj($4)
	*(($3 + [320])) = ($1 + $4)
	*($3 + [312]) = $1
	*($3 + [316]) = $1
	$5 = *(($3 + [448]))
	$4 = (*(($3 + [452])) - $5)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($1, $5, $4)
	$1 = (*($3 + [316]) + $4)
	*($3 + [316]) = $1
	$4 = *($3 + [312])
	goto $label$11 
	
.LABEL $label$13
	$1 = [0]
	$4 = [0]
	goto $label$11 
	
.LABEL $label$12
	$4 = $1
	
.LABEL $label$11
	*(($5 = ($3 + [288]))) = (int_64)0
	*(($3 + [304])) = [0]
	*($3 + [272]) = (int_64)0
	*($3 + [264]) = (int_64)0
	*($3 + [280]) = (int_64)0
	*($3 + [296]) = (int_64)0
	*($3 + [228]) = $4
	*($3 + [224]) = $4
	*($3 + [232]) = $1
	CALL $81(($3 + [224]), ($3 + [264]))
	$6 = *($5)
	$9 = *($3 + [280])
	*((($3 + [224]) + [32])) = [0]
	*($3 + [224]) = $8
	*($3 + [240]) = (int_64)-1
	*($3 + [248]) = (int_64)0
	*($3 + [232]) = $7
	$5 = CALL $82(($3 + [224]), (uint_64)$6 >> (uint_64)(int_64)8), [8201])
	*($3 + [168]) = [8306]
	*($3 + [172]) = CALL $201([8306])
	*($3 + [32]) = *($3 + [168])
	$1 = CALL $55(($3 + [176]), ($3 + [32]))
	*($3 + [152]) = [8306]
	*($3 + [156]) = CALL $201([8306])
	*($3 + [24]) = *($3 + [152])
	CALL $55(($3 + [160]), ($3 + [24]))
	*((($3 + [184]) + [32])) = [0]
	*($3 + [200]) = (int_64)-1
	*($3 + [208]) = (int_64)0
	$10 = *($1)
	*($3 + [184]) = $10
	*($3 + [192]) = (int_64)-7520818650392881808
	$1 = CALL db_find_i64($10, (int_64)-7520818650392881808, (int_64)-4139251842133089280, $7)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $83(($3 + [184]), $1)
	if ( ((int_32)*($4 + [20]) == (int_32)($3 + [184])) ){ goto $label$14 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$14
	$4 = *(($4 + [12]))
	$1 = *($4 + [8])
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$15 }
	
.LOOP $label$16:
	if ( ((int_64)*(($1 + [8])) != (int_64)$6) ){ goto $label$17 }
	if ( ((int_64)*(($1 + [16])) == (int_64)$8) ){ goto $label$15 }
	
.LABEL $label$17
	$1 = ($1 + [24])
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$16 }
	goto $label$2 
	
.LABEL $label$15
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$2 }
	$7 = *($5 + [8])
	$10 = *($5)
	if ( ((int_64)*($1 + [16]) != (int_64)$8) ){ goto $label$19 }
	$11 = *($1)
	$12 = *($1 + [8])
	if ( ((int_64)$6 != (int_64)$12) ){ goto $label$18 }
	goto $label$6 
	
.LABEL $label$19
	CALL eosio_assert([0], [10493])
	$11 = *($1)
	$12 = *($1 + [8])
	if ( ((int_64)$6 == (int_64)$12) ){ goto $label$6 }
	
.LABEL $label$18
	CALL eosio_assert([0], [10507])
	$6 = ((int_64)$11 + (int_64)$9)
	if ( ((int_64)$6 > (int_64)-4611686018427387904) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	CALL $192(($3 + [336]))
	
.LABEL $label$7
	CALL $192(($3 + [312]))
	
.LABEL $label$6
	$6 = ((int_64)$11 + (int_64)$9)
	if ( ((int_64)$6 <= (int_64)-4611686018427387904) ){ goto $label$4 }
	
.LABEL $label$5
	if ( ((int_64)$6 < (int_64)4611686018427387904) ){ goto $label$3 }
	CALL eosio_assert([0], [10569])
	goto $label$3 
	
.LABEL $label$4
	CALL eosio_assert([0], [10550])
	
.LABEL $label$3
	if ( ((int_64)$8 == (int_64)*(($1 + [16]))) ){ goto $label$20 }
	CALL eosio_assert([0], [10493])
	
.LABEL $label$20
	if ( ((int_64)$7 == (int_64)$12) ){ goto $label$21 }
	CALL eosio_assert([0], [10618])
	
.LABEL $label$21
	CALL eosio_assert(((int_64)$10 >= (int_64)$6), [8319])
	
.LABEL $label$2
	$13 = *($3 + [208])
	if ( ($13 == 0) ){ goto $label$22 }
	$14 = ($3 + [212])
	$1 = *($14)
	if ( ((int_32)$1 == (int_32)$13) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$26 }
	$5 = *($4 + [8])
	if ( ($5 == 0) ){ goto $label$27 }
	*(($4 + [12])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$27
	CALL _ZdlPv($4)
	
.LABEL $label$26
	if ( ((int_32)$13 != (int_32)$1) ){ goto $label$25 }
	$1 = *(($3 + [208]))
	goto $label$23 
	
.LABEL $label$24
	$1 = $13
	
.LABEL $label$23
	*($14) = $13
	CALL _ZdlPv($1)
	
.LABEL $label$22
	$5 = *($3 + [248])
	if ( ($5 == 0) ){ goto $label$28 }
	$13 = ($3 + [252])
	$1 = *($13)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$30 }
	
.LOOP $label$31:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$32 }
	CALL _ZdlPv($4)
	
.LABEL $label$32
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$31 }
	$1 = *(($3 + [248]))
	goto $label$29 
	
.LABEL $label$30
	$1 = $5
	
.LABEL $label$29
	*($13) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$28
	if ( ((*($3 + [296]) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*(($3 + [304])))
	
.LABEL $label$33
	$1 = *($3 + [312])
	if ( ($1 == 0) ){ goto $label$1 }
	*($3 + [316]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	*(($3 + [300])) = [0]
	*($3 + [292 align=4]) = (int_64)0
	$8 = *($0)
	*($3 + [136]) = [8385]
	*($3 + [140]) = CALL $201([8385])
	*($3 + [16]) = *($3 + [136])
	$1 = CALL $55(($3 + [144]), ($3 + [16]))
	*($3 + [224]) = $8
	*($3 + [232]) = *($1)
	*((($1 = CALL _Znwj([16])) + [8])) = *($3 + [232])
	*($1) = *($3 + [224])
	$4 = ($1 + [16])
	*(($3 + [284])) = $4
	*(($3 + [288])) = $4
	*($3 + [280]) = $1
	*($3 + [128]) = [8306]
	*($3 + [132]) = CALL $201([8306])
	*($3 + [8]) = *($3 + [128])
	*($3 + [264]) = *(CALL $55(($3 + [224]), ($3 + [8])))
	*($3 + [120]) = [8392]
	*($3 + [124]) = CALL $201([8392])
	*($3) = *($3 + [120])
	*($3 + [272]) = *(CALL $55(($3 + [224]), $3))
	$1 = ($3 + [292])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$34 }
	CALL $73($1, *($2), *(($2 + [4])))
	
.LABEL $label$34
	CALL $66(($3 + [264]))
	CALL prints([8400])
	$1 = *($1)
	if ( ($1 == 0) ){ goto $label$35 }
	*(($3 + [296])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$35
	$1 = *(($3 + [280]))
	if ( ($1 == 0) ){ goto $label$36 }
	*(($3 + [284])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$36
	$1 = *(($3 + [448]))
	if ( ($1 == 0) ){ goto $label$37 }
	*(($3 + [452])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$37
	$global$0 = ($3 + [464])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $5 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [416])
	$global$0 = $3
	*(($4 = $3) + [112]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	CALL memset(($4 + [32]), [0], [66])
	*($4 + [108]) = [0]
	*($4 + [100 align=4]) = (int_64)0
	*($4 + [20]) = $2
	*($4 + [16]) = $2
	*($4 + [24]) = ($2 + $5)
	*($4 + [400]) = ($4 + [16])
	*($4 + [124]) = (($4 + [32]) | [1])
	*($4 + [128]) = (($4 + [32]) | [2])
	*($4 + [132]) = (($4 + [32]) | [3])
	*($4 + [136]) = (($4 + [32]) | [4])
	*($4 + [140]) = (($4 + [32]) | [5])
	*($4 + [144]) = (($4 + [32]) | [6])
	*($4 + [148]) = (($4 + [32]) | [7])
	*($4 + [152]) = (($4 + [32]) + [8])
	*($4 + [156]) = ($4 + [41])
	*($4 + [160]) = ($4 + [42])
	*($4 + [164]) = ($4 + [43])
	*($4 + [168]) = ($4 + [44])
	*($4 + [172]) = ($4 + [45])
	*($4 + [176]) = ($4 + [46])
	*($4 + [180]) = ($4 + [47])
	*($4 + [184]) = ($4 + [48])
	*($4 + [188]) = ($4 + [49])
	*($4 + [192]) = ($4 + [50])
	*($4 + [120]) = ($4 + [32])
	*($4 + [200]) = ($4 + [52])
	*($4 + [196]) = ($4 + [51])
	*($4 + [204]) = ($4 + [53])
	*($4 + [208]) = ($4 + [54])
	*($4 + [212]) = ($4 + [55])
	*($4 + [216]) = (($4 + [32]) + [24])
	*($4 + [220]) = ($4 + [57])
	*($4 + [224]) = ($4 + [58])
	*($4 + [228]) = ($4 + [59])
	*($4 + [232]) = ($4 + [60])
	*($4 + [236]) = ($4 + [61])
	*($4 + [240]) = ($4 + [62])
	*($4 + [244]) = ($4 + [63])
	*($4 + [248]) = ($4 + [64])
	*($4 + [252]) = ($4 + [65])
	*($4 + [256]) = ($4 + [66])
	*($4 + [260]) = ($4 + [67])
	*($4 + [264]) = ($4 + [68])
	*($4 + [268]) = ($4 + [69])
	*($4 + [276]) = ($4 + [71])
	*($4 + [272]) = ($4 + [70])
	*($4 + [280]) = ($4 + [72])
	*($4 + [284]) = ($4 + [73])
	*($4 + [288]) = ($4 + [74])
	*($4 + [292]) = ($4 + [75])
	*($4 + [296]) = ($4 + [76])
	*($4 + [300]) = ($4 + [77])
	*($4 + [304]) = ($4 + [78])
	*($4 + [308]) = ($4 + [79])
	*($4 + [312]) = ($4 + [80])
	*($4 + [316]) = ($4 + [81])
	*($4 + [320]) = ($4 + [82])
	*($4 + [324]) = ($4 + [83])
	*($4 + [328]) = ($4 + [84])
	*($4 + [332]) = ($4 + [85])
	*($4 + [336]) = ($4 + [86])
	*($4 + [340]) = ($4 + [87])
	*($4 + [344]) = ($4 + [88])
	*($4 + [352]) = ($4 + [90])
	*($4 + [348]) = ($4 + [89])
	*($4 + [356]) = ($4 + [91])
	*($4 + [360]) = ($4 + [92])
	*($4 + [364]) = ($4 + [93])
	*($4 + [368]) = ($4 + [94])
	*($4 + [372]) = ($4 + [95])
	*($4 + [376]) = ($4 + [96])
	*($4 + [380]) = ($4 + [97])
	CALL $76(($4 + [120]), ($4 + [400]))
	$3 = ($4 + [100])
	CALL $77(($4 + [16]), $3)
	*(($6 = ($4 + [8]))) = *($4 + [24])
	*($4) = *($4 + [16])
	*(($7 = (($4 + [384]) + [8]))) = *($6)
	*($4 + [384]) = *($4)
	$6 = *($7)
	*((($4 + [400]) + [8])) = $6
	*((($4 + [120]) + [24])) = $6
	*($4 + [120]) = $0
	*($4 + [128]) = $1
	$0 = *($4 + [384])
	*($4 + [136]) = $0
	*($4 + [400]) = $0
	*($4 + [404]) = ($4 + [112])
	*($4 + [400]) = ($4 + [120])
	CALL $78(($4 + [400]), ($4 + [32]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $207($2)
	
.LABEL $label$4
	$2 = *($3)
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [104])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [416])
	return [1]
}

int_32 .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $147(CALL $146($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

int_32 .FUNC $3 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [112]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $120(($4 + [24]), ($4 + [112]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($8 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4 + [8])
	$3 = *($8)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [96])
	*($4 + [40]) = $0
	*($4 + [112]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	$1 = *($4 + [80])
	$9 = *($4 + [72])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $207($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $189 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $187($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $188 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $201($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $184($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $49 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [272])
	$global$0 = $3
	CALL require_auth(*($0))
	*($3 + [216]) = [8306]
	*($3 + [220]) = CALL $201([8306])
	*($3 + [72]) = *($3 + [216])
	$4 = CALL $55(($3 + [224]), ($3 + [72]))
	*((($3 + [232]) + [32])) = [0]
	*($3 + [240]) = $1
	*($3 + [248]) = (int_64)-1
	$5 = *($4)
	*($3 + [232]) = $5
	*($3 + [256]) = (int_64)0
	$4 = CALL db_find_i64($5, $1, (int_64)-9026177492230078464, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $56(($3 + [232]), $4)
	if ( ((int_32)*($4 + [64]) == (int_32)($3 + [232])) ){ goto $label$2 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$2
	*((($3 + [160]) + [48])) = *(($4 + [56]))
	*((($3 + [160]) + [40])) = *(($4 + [48]))
	*((($3 + [160]) + [32])) = *(($4 + [40]))
	*((($3 + [160]) + [24])) = *(($4 + [32]))
	*((($3 + [160]) + [16])) = *(($4 + [24]))
	*(($3 + [168])) = *(($4 + [16]))
	*($3 + [160]) = *($4 + [8])
	CALL eosio_assert(CALL $57(($3 + [160]), $2), [8749])
	
.LABEL $label$1
	*(($4 = (($3 + [160]) + [8]))) = *(($2 + [12]))
	*(($6 = (($3 + [160]) + [16]))) = *(($2 + [20]))
	*(($7 = (($3 + [160]) + [24]))) = *(($2 + [28]))
	*(($8 = (($3 + [160]) + [32]))) = *(($2 + [36]))
	*($3 + [160]) = *($2 + [4 align=4])
	$2 = *($2)
	*($3 + [136]) = [8642]
	*($3 + [140]) = CALL $201([8642])
	*($3 + [64]) = *($3 + [136])
	$9 = CALL $55(($3 + [144]), ($3 + [64]))
	*((($3 + [80]) + [12])) = *($4)
	*((($3 + [80]) + [20])) = *($6)
	*((($3 + [80]) + [28])) = *($7)
	*((($3 + [80]) + [36])) = *($8)
	*(($3 + [127])) = *(($3 + [159]))
	*(($3 + [125])) = *(($3 + [157]))
	*($3 + [80]) = $2
	*($3 + [120]) = [0]
	*($3 + [84 align=4]) = *($3 + [160])
	*($3 + [121 align=1]) = *($3 + [153 align=1])
	*($3 + [128]) = (int_64)0
	$5 = *($9)
	*(($3 + [56])) = (int_64)0
	*(($3 + [48])) = *($3 + [120])
	*((($3 + [8]) + [32])) = *((($3 + [80]) + [32]))
	*((($3 + [8]) + [24])) = *((($3 + [80]) + [24]))
	*((($3 + [8]) + [16])) = *((($3 + [80]) + [16]))
	*((($3 + [8]) + [8])) = *((($3 + [80]) + [8]))
	*($3 + [8]) = *($3 + [80])
	CALL $58($0, $1, $5, (int_64)0, ($3 + [8]), [1814400])
	CALL prints([8775])
	$0 = *($3 + [256])
	if ( ($0 == 0) ){ goto $label$3 }
	$2 = *((($3 + [232]) + [28]))
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($3 + [256]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $0
	
.LABEL $label$4
	*(($3 + [260])) = $0
	CALL _ZdlPv($2)
	
.LABEL $label$3
	$global$0 = ($3 + [272])
}

void .FUNC $48 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [224])
	$global$0 = $4
	CALL require_auth(*($0))
	CALL prints([9746])
	*($4 + [144]) = $2
	*($4 + [136]) = $1
	*($4 + [152]) = $3
	*($4 + [176]) = (int_64)0
	*($4 + [184]) = [0]
	CALL $63(($4 + [176]), [24])
	$5 = *($4 + [180])
	$6 = *($4 + [176])
	*($4 + [60]) = $6
	*($4 + [56]) = $6
	*($4 + [64]) = $5
	*($4 + [48]) = ($4 + [56])
	*($4 + [192]) = ($4 + [136])
	CALL $121(($4 + [192]), ($4 + [48]))
	$3 = *($0)
	*($4 + [120]) = [8385]
	*($4 + [124]) = CALL $201([8385])
	*($4 + [32]) = *($4 + [120])
	$2 = *(CALL $55(($4 + [128]), ($4 + [32])))
	*($4 + [104]) = [8306]
	*($4 + [108]) = CALL $201([8306])
	*($4 + [24]) = *($4 + [104])
	$6 = CALL $55(($4 + [112]), ($4 + [24]))
	*($4 + [88]) = [8897]
	*($4 + [92]) = CALL $201([8897])
	*($4 + [16]) = *($4 + [88])
	$7 = CALL $55(($4 + [96]), ($4 + [16]))
	*($4 + [40]) = [9764]
	*($4 + [44]) = CALL $201([9764])
	*($4 + [8]) = *($4 + [40])
	$0 = CALL $55(($4 + [48]), ($4 + [8]))
	*((($4 + [56]) + [24])) = [0]
	*($4 + [56]) = $1
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = *($0)
	$0 = (*($4 + [180]) - *($4 + [176]))
	if ( ($0 == 0) ){ goto $label$2 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL _Znwj($0)
	*(($4 + [72])) = $5
	*(($8 = ($4 + [76]))) = $5
	*(($4 + [80])) = ($5 + $0)
	$9 = *($4 + [176])
	$0 = (*($4 + [180]) - $9)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $9, $0)
	*($8) = (*($8) + $0)
	
.LABEL $label$2
	*($4 + [136]) = *($6)
	*($4 + [144]) = *($7)
	*(($0 = CALL _Znwj([16]))) = $3
	*($0 + [8]) = $2
	*(($4 + [172])) = [0]
	$5 = ($0 + [16])
	*((($4 + [136]) + [24])) = $5
	*((($4 + [136]) + [20])) = $5
	*($4 + [152]) = $0
	*($4 + [164 align=4]) = (int_64)0
	$6 = *($4 + [72])
	$5 = *((($4 + [56]) + [20]))
	$0 = (($5 + [16]) - $6)
	$1 = (CASTING uint_64)(uint_32 ($5 - $6))
	$5 = ($4 + [164])
	
.LOOP $label$3:
	$0 = ($0 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$3 }
	if ( ($0 == 0) ){ goto $label$5 }
	CALL $63($5, $0)
	$5 = *(($4 + [168]))
	$0 = *(($4 + [164]))
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	$0 = [0]
	
.LABEL $label$4
	*($4 + [196]) = $0
	*($4 + [192]) = $0
	*($4 + [200]) = $5
	*($4 + [208]) = ($4 + [192])
	*($4 + [216]) = ($4 + [56])
	CALL $65(($4 + [216]), ($4 + [208]))
	CALL $66(($4 + [136]))
	$0 = *($4 + [164])
	if ( ($0 == 0) ){ goto $label$6 }
	*(($4 + [168])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$0 = *($4 + [152])
	if ( ($0 == 0) ){ goto $label$7 }
	*(($4 + [156])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$7
	$0 = *($4 + [72])
	if ( ($0 == 0) ){ goto $label$8 }
	*(($4 + [76])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$0 = *($4 + [176])
	if ( ($0 == 0) ){ goto $label$9 }
	*($4 + [180]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$9
	$global$0 = ($4 + [224])
	return (unreachable)
	
.LABEL $label$1
	CALL $192((($4 + [56]) + [16]))
}

void .FUNC memory ()
{
}

int_32 .FUNC $43 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [96]) + [24]))) = (int_64)0
	*(($9 = ($4 + [128]))) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [84]) = $2
	*($4 + [80]) = $2
	*($4 + [88]) = ($2 + $7)
	*($4 + [184]) = ($4 + [80])
	*($4 + [48]) = ($4 + [96])
	CALL $116(($4 + [48]), ($4 + [184]))
	*(($10 = (($4 + [32]) + [8]))) = *($4 + [88])
	*($4 + [32]) = *($4 + [80])
	*(($3 = (($4 + [160]) + [8]))) = *($10)
	*($4 + [160]) = *($4 + [32])
	$10 = *($3)
	*((($4 + [184]) + [8])) = $10
	*((($4 + [48]) + [24])) = $10
	*($4 + [48]) = $0
	*($4 + [56]) = $1
	$0 = *($4 + [160])
	*($4 + [64]) = $0
	*($4 + [184]) = $0
	*(($10 = (($4 + [136]) + [8]))) = *($8)
	*(($8 = (($4 + [136]) + [16]))) = *($9)
	*($4 + [136]) = *($4 + [112])
	$0 = *($4 + [104])
	$1 = *($4 + [96])
	*((($4 + [160]) + [16])) = *($8)
	*($3) = *($10)
	*($4 + [160]) = *($4 + [136])
	$3 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$11 = *((($4 + [160]) + [16]))
	*((($4 + [184]) + [16])) = $11
	$12 = *((($4 + [160]) + [8]))
	*((($4 + [184]) + [8])) = $12
	*((($4 + [8]) + [8])) = $12
	*((($4 + [8]) + [16])) = $11
	$11 = *($4 + [160])
	*($4 + [8]) = $11
	*($4 + [184]) = $11
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $207($2)
	
.LABEL $label$6
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $42 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [368])
	$global$0 = $4
	CALL require_auth(*($0))
	CALL prints([9542])
	$5 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$6 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$5 = [1]
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [9560])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($3) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9577])
	CALL $117(($4 + [296]), $3)
	$7 = *($4 + [296])
	$5 = ($7 & [1])
	CALL prints_l(( *($4 + [304]) ? (($4 + [296]) | [1]) : $5 ), ( *($4 + [300]) ? uint_32($7 >> [1]) : $5 ))
	if ( ((*($4 + [296]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [304])))
	
.LABEL $label$6
	CALL prints([10593])
	$7 = ($3 + [16])
	CALL printn(*($7))
	CALL printn(*($7))
	*((($4 + [296]) + [32])) = [0]
	*($4 + [312]) = (int_64)-1
	*($4 + [320]) = (int_64)0
	*($4 + [296]) = *($7)
	$10 = ($3 + [8])
	$6 = *($10)
	*($4 + [304]) = $1
	$9 = CALL $82(($4 + [296]), (uint_64)$6 >> (uint_64)(int_64)8), [8201])
	*($4 + [240]) = [8306]
	*($4 + [244]) = CALL $201([8306])
	*($4 + [48]) = *($4 + [240])
	$5 = CALL $55(($4 + [248]), ($4 + [48]))
	*($4 + [232]) = [8306]
	*($4 + [236]) = CALL $201([8306])
	*($4 + [40]) = *($4 + [232])
	CALL $55(($4 + [152]), ($4 + [40]))
	*((($4 + [256]) + [32])) = [0]
	*($4 + [272]) = (int_64)-1
	*($4 + [280]) = (int_64)0
	$6 = *($5)
	*($4 + [256]) = $6
	*($4 + [264]) = (int_64)-7520818650392881808
	$5 = CALL db_find_i64($6, (int_64)-7520818650392881808, (int_64)-4139251842133089280, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$5 = CALL $83(($4 + [256]), $5)
	if ( ((int_32)*($5 + [20]) == (int_32)($4 + [256])) ){ goto $label$9 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$9
	$10 = ($3 + [16])
	*((($4 + [208]) + [16])) = *($10)
	$11 = ($3 + [8])
	*((($4 + [208]) + [8])) = *($11)
	*($4 + [208]) = *($3)
	$5 = *(($5 + [12]))
	$7 = *($5 + [8])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$10 }
	$8 = *($10)
	$6 = *($11)
	
.LOOP $label$11:
	if ( ((int_64)*(($7 + [8])) != (int_64)$6) ){ goto $label$12 }
	if ( ((int_64)*(($7 + [16])) == (int_64)$8) ){ goto $label$10 }
	
.LABEL $label$12
	$7 = ($7 + [24])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$11 }
	goto $label$7 
	
.LABEL $label$10
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$7 }
	if ( ((int_64)*($4 + [224]) == (int_64)*($7 + [16])) ){ goto $label$13 }
	CALL eosio_assert([0], [10493])
	
.LABEL $label$13
	if ( ((int_64)*($7 + [8]) == (int_64)*($4 + [216])) ){ goto $label$14 }
	CALL eosio_assert([0], [10507])
	
.LABEL $label$14
	$6 = ((int_64)*($4 + [208]) + (int_64)*($7))
	*($4 + [208]) = $6
	if ( ((int_64)$6 > (int_64)-4611686018427387904) ){ goto $label$15 }
	CALL eosio_assert([0], [10550])
	$6 = *($4 + [208])
	
.LABEL $label$15
	if ( ((int_64)$6 < (int_64)4611686018427387904) ){ goto $label$16 }
	CALL eosio_assert([0], [10569])
	
.LABEL $label$16
	CALL $117(($4 + [152]), ($4 + [208]))
	$7 = *($4 + [152])
	$5 = ($7 & [1])
	CALL prints_l(( *($4 + [160]) ? (($4 + [152]) | [1]) : $5 ), ( *($4 + [156]) ? uint_32($7 >> [1]) : $5 ))
	if ( ((*($4 + [152]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($4 + [160])))
	
.LABEL $label$17
	CALL prints([10593])
	CALL printn(*(($4 + [224])))
	goto $label$7 
	
.LABEL $label$8
	*((($4 + [208]) + [16])) = *($7)
	*((($4 + [208]) + [8])) = *($10)
	*($4 + [208]) = *($3)
	
.LABEL $label$7
	CALL $117(($4 + [152]), ($4 + [208]))
	$7 = *($4 + [152])
	$5 = ($7 & [1])
	CALL prints_l(( *($4 + [160]) ? (($4 + [152]) | [1]) : $5 ), ( *($4 + [156]) ? uint_32($7 >> [1]) : $5 ))
	if ( ((*($4 + [152]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($4 + [160])))
	
.LABEL $label$18
	CALL prints([10593])
	CALL printn(*($4 + [224]))
	if ( ((int_64)*($9 + [8]) == (int_64)*($4 + [216])) ){ goto $label$19 }
	CALL eosio_assert([0], [10618])
	
.LABEL $label$19
	CALL eosio_assert(((int_64)*($9) >= (int_64)*($4 + [208])), [9597])
	*(($9 = (($4 + [152]) + [24]))) = *(($3 + [8]))
	*(($4 + [184])) = *(($3 + [16]))
	*($4 + [160]) = $2
	*($4 + [152]) = $1
	*($4 + [192]) = (int_64)0
	*($4 + [200]) = [0]
	*($4 + [168]) = *($3)
	CALL $63(($4 + [192]), [40])
	$7 = *($4 + [196])
	$5 = *($4 + [192])
	*($4 + [76]) = $5
	*($4 + [72]) = $5
	*($4 + [80]) = $7
	*($4 + [64]) = ($4 + [72])
	*($4 + [336]) = ($4 + [152])
	CALL $118(($4 + [336]), ($4 + [64]))
	$6 = *($0)
	*($4 + [136]) = [8385]
	*($4 + [140]) = CALL $201([8385])
	*($4 + [32]) = *($4 + [136])
	$8 = *(CALL $55(($4 + [144]), ($4 + [32])))
	*($4 + [120]) = [8306]
	*($4 + [124]) = CALL $201([8306])
	*($4 + [24]) = *($4 + [120])
	$3 = CALL $55(($4 + [128]), ($4 + [24]))
	*($4 + [104]) = [8897]
	*($4 + [108]) = CALL $201([8897])
	*($4 + [16]) = *($4 + [104])
	$0 = CALL $55(($4 + [112]), ($4 + [16]))
	*($4 + [56]) = [9659]
	*($4 + [60]) = CALL $201([9659])
	*($4 + [8]) = *($4 + [56])
	$7 = CALL $55(($4 + [64]), ($4 + [8]))
	*((($4 + [72]) + [24])) = [0]
	*($4 + [72]) = $1
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = *($7)
	$7 = (*($4 + [196]) - *($4 + [192]))
	if ( ($7 == 0) ){ goto $label$21 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$20 }
	$5 = CALL _Znwj($7)
	*(($4 + [88])) = $5
	*(($10 = ($4 + [92]))) = $5
	*(($4 + [96])) = ($5 + $7)
	$11 = *($4 + [192])
	$7 = (*($4 + [196]) - $11)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$21 }
	CALL memcpy($5, $11, $7)
	*($10) = (*($10) + $7)
	
.LABEL $label$21
	*($4 + [152]) = *($3)
	*($4 + [160]) = *($0)
	*(($7 = CALL _Znwj([16]))) = $6
	*($7 + [8]) = $8
	*(($4 + [188])) = [0]
	$5 = ($7 + [16])
	*($9) = $5
	*((($4 + [152]) + [20])) = $5
	*($4 + [168]) = $7
	*($4 + [180 align=4]) = (int_64)0
	$9 = *($4 + [88])
	$5 = *((($4 + [72]) + [20]))
	$7 = (($5 + [16]) - $9)
	$6 = (CASTING uint_64)(uint_32 ($5 - $9))
	$5 = ($4 + [180])
	
.LOOP $label$22:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$22 }
	if ( ($7 == 0) ){ goto $label$24 }
	CALL $63($5, $7)
	$5 = *(($4 + [184]))
	$7 = *(($4 + [180]))
	goto $label$23 
	
.LABEL $label$24
	$5 = [0]
	$7 = [0]
	
.LABEL $label$23
	*($4 + [340]) = $7
	*($4 + [336]) = $7
	*($4 + [344]) = $5
	*($4 + [352]) = ($4 + [336])
	*($4 + [360]) = ($4 + [72])
	CALL $65(($4 + [360]), ($4 + [352]))
	CALL $66(($4 + [152]))
	$7 = *($4 + [180])
	if ( ($7 == 0) ){ goto $label$25 }
	*(($4 + [184])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$25
	$7 = *($4 + [168])
	if ( ($7 == 0) ){ goto $label$26 }
	*(($4 + [172])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$26
	$7 = *($4 + [88])
	if ( ($7 == 0) ){ goto $label$27 }
	*(($4 + [92])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$27
	$7 = *($4 + [192])
	if ( ($7 == 0) ){ goto $label$28 }
	*($4 + [196]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$28
	$3 = *($4 + [280])
	if ( ($3 == 0) ){ goto $label$29 }
	$0 = ($4 + [284])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$31 }
	
.LOOP $label$32:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$33 }
	$9 = *($5 + [8])
	if ( ($9 == 0) ){ goto $label$34 }
	*(($5 + [12])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$34
	CALL _ZdlPv($5)
	
.LABEL $label$33
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$32 }
	$7 = *(($4 + [280]))
	goto $label$30 
	
.LABEL $label$31
	$7 = $3
	
.LABEL $label$30
	*($0) = $3
	CALL _ZdlPv($7)
	
.LABEL $label$29
	$9 = *($4 + [320])
	if ( ($9 == 0) ){ goto $label$35 }
	$3 = ($4 + [324])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$37 }
	
.LOOP $label$38:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$39 }
	CALL _ZdlPv($5)
	
.LABEL $label$39
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$38 }
	$7 = *(($4 + [320]))
	goto $label$36 
	
.LABEL $label$37
	$7 = $9
	
.LABEL $label$36
	*($3) = $9
	CALL _ZdlPv($7)
	
.LABEL $label$35
	$global$0 = ($4 + [368])
	return (unreachable)
	
.LABEL $label$20
	CALL $192((($4 + [72]) + [16]))
}

void .FUNC $41 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	$4 = ($global$0 - [480])
	$global$0 = $4
	*($4 + [432]) = [8306]
	*($4 + [436]) = CALL $201([8306])
	*($4 + [80]) = *($4 + [432])
	CALL require_auth(*(CALL $55(($4 + [440]), ($4 + [80]))))
	*($4 + [424]) = $1
	$5 = ((int_64)((int_64)$3 & (int_64)4294967295) | (int_64)((int_64)$2 & (int_64)-4294967296))
	*($4 + [416]) = $5
	*($4 + [360]) = [8306]
	*($4 + [364]) = CALL $201([8306])
	*($4 + [72]) = *($4 + [360])
	$6 = CALL $55(($4 + [368]), ($4 + [72]))
	*(($4 + [408])) = [0]
	*($4 + [384]) = $1
	*($4 + [392]) = (int_64)-1
	*($4 + [400]) = (int_64)0
	$7 = *($6)
	*($4 + [376]) = $7
	$8 = [0]
	$6 = CALL db_find_i64($7, $1, (int_64)5374645266240503808, $5)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $71(($4 + [376]), $6)
	if ( ((int_32)*($8 + [92]) == (int_32)($4 + [376])) ){ goto $label$1 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8951])
	$5 = CALL current_time()
	CALL eosio_assert((uint_64)(*($8 + [24]) <= ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)), [8973])
	CALL prints([9006])
	CALL cancel_deferred(($4 + [416]))
	CALL prints([8928])
	$5 = CALL current_time()
	*((($4 + [296]) + [28])) = (int_64)0
	*(($4 + [340])) = (int_64)0
	*(($4 + [348])) = (int_64)0
	*($4 + [308]) = [0]
	*($4 + [312]) = [0]
	*($4 + [316 align=4]) = (int_64)0
	*($4 + [332 align=4]) = (int_64)0
	*($4 + [296]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	$6 = *($9)
	$9 = CALL $72(($4 + [280]), ($8 + [80]))
	if ( ((int_32)*($9 + [4]) == (int_32)$6) ){ goto $label$4 }
	$10 = (($4 + [144]) + [16])
	$11 = (($4 + [224]) + [28])
	$12 = (($4 + [264]) + [8])
	$13 = (($4 + [224]) + [24])
	$14 = (($4 + [224]) + [32])
	$15 = (($4 + [224]) + [20])
	$16 = [0]
	
.LOOP $label$5:
	*($12) = [0]
	*($4 + [264]) = (int_64)0
	$6 = ($6 + ((int_32)$16 * (int_32)[12]))
	$17 = (*($6 + [4]) - *($6))
	if ( ($17 == 0) ){ goto $label$6 }
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$3 }
	$18 = CALL _Znwj($17)
	*($12) = ($18 + $17)
	*($4 + [264]) = $18
	*($4 + [268]) = $18
	$17 = *($6)
	$6 = (*(($6 + [4])) - $17)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($18, $17, $6)
	*($4 + [268]) = (*($4 + [268]) + $6)
	
.LABEL $label$6
	*(($19 = (($4 + [224]) + [8]))) = (int_64)0
	*(($17 = (($4 + [224]) + [16]))) = (int_64)0
	*($13) = (int_64)0
	*($14) = (int_64)0
	*($4 + [224]) = (int_64)0
	$5 = *($0)
	*($4 + [208]) = [8385]
	*($4 + [212]) = CALL $201([8385])
	*($4 + [64]) = *($4 + [208])
	CALL $55(($4 + [216]), ($4 + [64]))
	*(($20 = (($4 + [144]) + [8]))) = *($4 + [216])
	*($4 + [144]) = $5
	*((($6 = CALL _Znwj([16])) + [8])) = *($20)
	*($6) = *($4 + [144])
	$18 = ($6 + [16])
	$21 = *($17)
	if ( ($21 == 0) ){ goto $label$7 }
	*($15) = $21
	CALL _ZdlPv($21)
	*($13) = [0]
	*($17) = (int_64)0
	
.LABEL $label$7
	*($15) = $18
	*($17) = $6
	*($13) = $18
	*($4 + [200]) = [8919]
	*($4 + [204]) = CALL $201([8919])
	*($4 + [56]) = *($4 + [200])
	CALL $55(($4 + [144]), ($4 + [56]))
	if ( ((int_64)*($4 + [144]) != (int_64)$2) ){ goto $label$9 }
	*($4 + [224]) = *($0)
	*($4 + [192]) = [9036]
	*($4 + [196]) = CALL $201([9036])
	*($4 + [32]) = *($4 + [192])
	CALL $55(($4 + [144]), ($4 + [32]))
	*($19) = *($4 + [144])
	CALL $73($11, *($4 + [264]), *($4 + [268]))
	goto $label$8 
	
.LABEL $label$9
	*($10) = (int_64)0
	$18 = [0]
	*(($21 = (($4 + [144]) + [24]))) = [0]
	*($20) = *(($8 + [32]))
	*($4 + [144]) = $1
	$20 = [0]
	$6 = (*($4 + [268]) - *($4 + [264]))
	if ( ($6 == 0) ){ goto $label$10 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$2 }
	$18 = CALL _Znwj($6)
	*($10) = $18
	*(($22 = (($4 + [144]) + [20]))) = $18
	*($21) = ($18 + $6)
	$20 = *($4 + [264])
	$6 = (*($4 + [268]) - $20)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($18, $20, $6)
	$20 = (*($22) + $6)
	*($22) = $20
	$18 = *($10)
	goto $label$10 
	
.LABEL $label$11
	$20 = $18
	
.LABEL $label$10
	*((($4 + [176]) + [8])) = [0]
	*($4 + [176]) = (int_64)0
	$6 = (($20 + [16]) - $18)
	$5 = (CASTING uint_64)(uint_32 ($20 - $18))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$12 }
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $63(($4 + [176]), $6)
	$18 = *($4 + [180])
	$6 = *($4 + [176])
	goto $label$13 
	
.LABEL $label$14
	$18 = [0]
	$6 = [0]
	
.LABEL $label$13
	*((($4 + [464]) + [8])) = $18
	*($4 + [468]) = $6
	*($4 + [464]) = $6
	*($4 + [448]) = ($4 + [464])
	*($4 + [456]) = ($4 + [144])
	CALL $65(($4 + [456]), ($4 + [448]))
	$6 = *($10)
	if ( ($6 == 0) ){ goto $label$15 }
	*((($4 + [144]) + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$15
	*($4 + [136]) = [8306]
	*($4 + [140]) = CALL $201([8306])
	*($4 + [48]) = *($4 + [136])
	CALL $55(($4 + [144]), ($4 + [48]))
	*($4 + [224]) = *($4 + [144])
	*($4 + [128]) = [8897]
	*($4 + [132]) = CALL $201([8897])
	*($4 + [40]) = *($4 + [128])
	CALL $55(($4 + [144]), ($4 + [40]))
	*($19) = *($4 + [144])
	CALL $73($11, *($4 + [176]), *($4 + [180]))
	$6 = *($4 + [176])
	if ( ($6 == 0) ){ goto $label$8 }
	*($4 + [180]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$8
	CALL $66(($4 + [224]))
	$6 = *($11)
	if ( ($6 == 0) ){ goto $label$16 }
	*($14) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$16
	$6 = *($17)
	if ( ($6 == 0) ){ goto $label$17 }
	*($15) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$17
	$6 = *($4 + [264])
	if ( ($6 == 0) ){ goto $label$18 }
	*($4 + [268]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$18
	$6 = *($9)
	$16 = ($16 + [1])
	if ( ($16 <= ((int_32)(*(($9 + [4])) - $6) / (int_32)[12])) ){ goto $label$5 }
	
.LABEL $label$4
	CALL $70($0, $1, $2, $3)
	*($4 + [120]) = [8642]
	*($4 + [124]) = CALL $201([8642])
	*($4 + [24]) = *($4 + [120])
	if ( ((int_64)*(CALL $55(($4 + [224]), ($4 + [24]))) != (int_64)$2) ){ goto $label$19 }
	$5 = *($0)
	*($4 + [104]) = [8385]
	*($4 + [108]) = CALL $201([8385])
	*($4 + [16]) = *($4 + [104])
	$7 = *(CALL $55(($4 + [112]), ($4 + [16])))
	$23 = *($0)
	*($4 + [88]) = [9048]
	*($4 + [92]) = CALL $201([9048])
	*($4 + [8]) = *($4 + [88])
	$6 = CALL $55(($4 + [96]), ($4 + [8]))
	*($4 + [152]) = $2
	*($4 + [144]) = $1
	*($4 + [160]) = $3
	*($4 + [224]) = $23
	*($4 + [232]) = *($6)
	*(($6 = CALL _Znwj([16]))) = $5
	*($6 + [8]) = $7
	*(($4 + [260])) = [0]
	$17 = ($6 + [16])
	*((($4 + [224]) + [24])) = $17
	*(($4 + [244])) = $17
	*($4 + [240]) = $6
	*($4 + [252 align=4]) = (int_64)0
	CALL $63(($4 + [252]), [24])
	$16 = ($4 + [256])
	$6 = *($16)
	$17 = *($4 + [252])
	*($4 + [468]) = $17
	*($4 + [464]) = $17
	*($4 + [472]) = $6
	*($4 + [176]) = ($4 + [464])
	*($4 + [264]) = ($4 + [144])
	CALL $74(($4 + [264]), ($4 + [176]))
	CALL $66(($4 + [224]))
	$6 = *($4 + [252])
	if ( ($6 == 0) ){ goto $label$20 }
	*($16) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$20
	$6 = *($4 + [240])
	if ( ($6 == 0) ){ goto $label$19 }
	*(($4 + [244])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	$18 = *($9)
	if ( ($18 == 0) ){ goto $label$21 }
	$13 = ($9 + [4])
	$17 = *($13)
	if ( ((int_32)$17 == (int_32)$18) ){ goto $label$23 }
	
.LOOP $label$24:
	$6 = ($17 + [-12])
	$16 = *($6)
	if ( ($16 == 0) ){ goto $label$25 }
	*(($17 + [-8])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$25
	$17 = $6
	if ( ((int_32)$18 != (int_32)$6) ){ goto $label$24 }
	$6 = *($9)
	goto $label$22 
	
.LABEL $label$23
	$6 = $18
	
.LABEL $label$22
	*($13) = $18
	CALL _ZdlPv($6)
	
.LABEL $label$21
	CALL $75(($4 + [296]))
	$15 = *($4 + [400])
	if ( ($15 == 0) ){ goto $label$26 }
	$21 = ($4 + [404])
	$13 = *($21)
	if ( ((int_32)$13 == (int_32)$15) ){ goto $label$28 }
	
.LOOP $label$29:
	$13 = ($13 + [-24])
	$20 = *($13)
	*($13) = [0]
	if ( ($20 == 0) ){ goto $label$30 }
	$18 = *($20 + [80])
	if ( ($18 == 0) ){ goto $label$31 }
	$9 = ($20 + [84])
	$17 = *($9)
	if ( ((int_32)$17 == (int_32)$18) ){ goto $label$33 }
	
.LOOP $label$34:
	$6 = ($17 + [-12])
	$16 = *($6)
	if ( ($16 == 0) ){ goto $label$35 }
	*(($17 + [-8])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$35
	$17 = $6
	if ( ((int_32)$18 != (int_32)$6) ){ goto $label$34 }
	$6 = *(($20 + [80]))
	goto $label$32 
	
.LABEL $label$33
	$6 = $18
	
.LABEL $label$32
	*($9) = $18
	CALL _ZdlPv($6)
	
.LABEL $label$31
	CALL _ZdlPv($20)
	
.LABEL $label$30
	if ( ((int_32)$13 != (int_32)$15) ){ goto $label$29 }
	$6 = *(($4 + [400]))
	goto $label$27 
	
.LABEL $label$28
	$6 = $15
	
.LABEL $label$27
	*($21) = $15
	CALL _ZdlPv($6)
	
.LABEL $label$26
	$global$0 = ($4 + [480])
	return (unreachable)
	
.LABEL $label$3
	CALL $192(($4 + [264]))
	
.LABEL $label$2
	CALL $192($10)
	(unreachable)
}

int_32 .FUNC $40 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$5
	$3 = ($2 + $7)
	$8 = (($4 + [32]) + [8])
	CALL memcpy(($4 + [32]), $2, [8])
	$9 = ($2 + [8])
	if ( ((int_32)($7 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$6
	CALL memcpy($8, $9, [8])
	*(($4 + [24])) = $3
	*($4 + [16]) = $2
	*(($4 + [20])) = ($2 + [16])
	*($4 + [8]) = $1
	*($4) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *((($4 + [32]) + [8]))
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $207($2)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $47 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL require_auth(*($0))
	$2 = ((int_64)((int_64)$3 & (int_64)4294967295) | (int_64)((int_64)$2 & (int_64)-4294967296))
	CALL $84($0, $1, $2, $1)
	*($4 + [8]) = [8306]
	*($4 + [12]) = CALL $201([8306])
	*($4) = *($4 + [8])
	$5 = CALL $55(($4 + [16]), $4)
	*(($4 + [56])) = [0]
	*($4 + [32]) = $1
	*($4 + [40]) = (int_64)-1
	$3 = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [60]) = [0]
	*($4 + [24]) = *($5)
	$6 = ($4 + [32])
	$7 = ($4 + [48])
	$8 = ($4 + [52])
	$9 = [0]
	$10 = [0]
	if ( ((int_32)[0] != (int_32)[0]) ){ goto $label$2 }
	$11 = [2]
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$37 
	
.LABEL $label$38
	$10 = *($8)
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$18 }
	$11 = [0]
	goto $label$3 
	
.LABEL $label$37
	$5 = ($10 + [-24])
	$12 = *($5)
	if ( ((int_64)*($12) == (int_64)$3) ){ goto $label$16 }
	$11 = [1]
	goto $label$3 
	
.LABEL $label$36
	$10 = $5
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$35
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$17 }
	$11 = [19]
	goto $label$3 
	
.LABEL $label$34
	if ( ((int_32)*($12 + [16]) != (int_32)($4 + [24])) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$33
	$5 = CALL db_find_i64(*($4 + [24]), *($6), (int_64)4148111391159058432, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$13 }
	$11 = [3]
	goto $label$3 
	
.LABEL $label$32
	$12 = CALL $85(($4 + [24]), $5)
	if ( ((int_32)*($12 + [16]) == (int_32)($4 + [24])) ){ goto $label$12 }
	$11 = [4]
	goto $label$3 
	
.LABEL $label$31
	CALL eosio_assert([0], [10726])
	$11 = [5]
	goto $label$3 
	
.LABEL $label$30
	CALL $84($0, $1, $2, *($12 + [8]))
	$11 = [6]
	goto $label$3 
	
.LABEL $label$29
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)6) ){ goto $label$9 }
	$11 = [8]
	goto $label$3 
	
.LABEL $label$28
	$12 = *($4 + [48])
	if ( ($12 == 0) ){ goto $label$8 }
	$11 = [9]
	goto $label$3 
	
.LABEL $label$27
	$9 = ($4 + [52])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$7 }
	$11 = [10]
	goto $label$3 
	
.LABEL $label$26
	$11 = [11]
	goto $label$3 
	
.LABEL $label$25
	$5 = ($5 + [-24])
	$10 = *($5)
	*($5) = [0]
	if ( ($10 == 0) ){ goto $label$5 }
	$11 = [12]
	goto $label$3 
	
.LABEL $label$24
	CALL _ZdlPv($10)
	$11 = [13]
	goto $label$3 
	
.LABEL $label$23
	if ( ((int_32)$12 != (int_32)$5) ){ goto $label$6 }
	$11 = [14]
	goto $label$3 
	
.LABEL $label$22
	$5 = *(($4 + [48]))
	goto $label$4 
	
.LABEL $label$21
	$5 = $12
	$11 = [15]
	goto $label$3 
	
.LABEL $label$20
	*($9) = $12
	CALL _ZdlPv($5)
	$11 = [16]
	goto $label$3 
	
.LABEL $label$19
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$18
	$11 = [2]
	goto $label$3 
	
.LABEL $label$17
	$11 = [2]
	goto $label$3 
	
.LABEL $label$16
	$11 = [18]
	goto $label$3 
	
.LABEL $label$15
	$11 = [2]
	goto $label$3 
	
.LABEL $label$14
	$11 = [0]
	goto $label$3 
	
.LABEL $label$13
	$11 = [6]
	goto $label$3 
	
.LABEL $label$12
	$11 = [5]
	goto $label$3 
	
.LABEL $label$11
	$11 = [5]
	goto $label$3 
	
.LABEL $label$10
	$11 = [4]
	goto $label$3 
	
.LABEL $label$9
	$11 = [7]
	goto $label$3 
	
.LABEL $label$8
	$11 = [16]
	goto $label$3 
	
.LABEL $label$7
	$11 = [17]
	goto $label$3 
	
.LABEL $label$6
	$11 = [11]
	goto $label$3 
	
.LABEL $label$5
	$11 = [13]
	goto $label$3 
	
.LABEL $label$4
	$11 = [15]
	goto $label$3 
	$11
}

void .FUNC $46 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [256])
	$global$0 = $4
	*($4 + [240]) = (int_64)0
	*($4 + [248]) = [0]
	$5 = *($0)
	$6 = (*($3 + [4]) - *($3))
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL _Znwj($6)
	*(($4 + [248])) = ($7 + $6)
	*($4 + [240]) = $7
	*($4 + [244]) = $7
	$8 = *($3)
	$6 = (*(($3 + [4])) - $8)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $8, $6)
	*($4 + [244]) = ($7 + $6)
	
.LABEL $label$3
	$9 = CALL $87($4, $1, ($4 + [240]))
	CALL memcpy(($4 + [168]), $2, [66])
	*($4 + [160]) = [0]
	*($4 + [152]) = (int_64)0
	$6 = (*(($3 + [4])) - *($3))
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$1 }
	$7 = CALL _Znwj($6)
	*(($4 + [160])) = ($7 + $6)
	*($4 + [152]) = $7
	*($4 + [156]) = $7
	$2 = *($3)
	$6 = (*(($3 + [4])) - $2)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($7, $2, $6)
	*($4 + [156]) = (*($4 + [156]) + $6)
	
.LABEL $label$4
	CALL memcpy(($4 + [14]), ($4 + [168]), [66])
	CALL $80($0, $5, $9, $1, ($4 + [14]), ($4 + [152]), [0])
	$6 = *($4 + [152])
	if ( ($6 == 0) ){ goto $label$5 }
	*($4 + [156]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$5
	$6 = *($4 + [240])
	if ( ($6 == 0) ){ goto $label$6 }
	*($4 + [244]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	*(($4 + [148])) = [0]
	*($4 + [140 align=4]) = (int_64)0
	$5 = *($0)
	*($4 + [80]) = [8385]
	*($4 + [84]) = CALL $201([8385])
	*($4) = *($4 + [80])
	$6 = CALL $55(($4 + [88]), $4)
	*($4 + [96]) = $5
	*($4 + [104]) = *($6)
	*((($6 = CALL _Znwj([16])) + [8])) = *($4 + [104])
	*($6) = *($4 + [96])
	$7 = ($6 + [16])
	*(($4 + [132])) = $7
	*(($4 + [136])) = $7
	*($4 + [128]) = $6
	$5 = *($0)
	*($4 + [120]) = $1
	*($4 + [112]) = $5
	$0 = ($4 + [140])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$7 }
	CALL $73($0, *($3), *(($3 + [4])))
	
.LABEL $label$7
	CALL $66(($4 + [112]))
	CALL prints([8422])
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$8 }
	*(($4 + [144])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$3 = *(($4 + [128]))
	if ( ($3 == 0) ){ goto $label$9 }
	*(($4 + [132])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$9
	$global$0 = ($4 + [256])
	return (unreachable)
	
.LABEL $label$2
	CALL $192(($4 + [240]))
	
.LABEL $label$1
	CALL $192(($4 + [152]))
	(unreachable)
}

int_32 .FUNC $45 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [112])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [144]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $100(($4 + [16]), ($4 + [144]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4)
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [16])
	CALL $101(($4 + [144]), ($4 + [64]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $207($2)
	
.LABEL $label$4
	$2 = *(($4 + [104]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [108])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $44 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$7 = ($global$0 - [512])
	$global$0 = $7
	*($7 + [472]) = $2
	CALL require_auth(*($0))
	*($7 + [464]) = [8642]
	*($7 + [468]) = CALL $201([8642])
	*($7 + [72]) = *($7 + [464])
	if ( ((int_64)*(CALL $55(($7 + [240]), ($7 + [72]))) != (int_64)$4) ){ goto $label$2 }
	CALL eosio_assert([1], [9261])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [456]) = [8832]
	*($7 + [460]) = CALL $201([8832])
	*($7 + [64]) = *($7 + [456])
	if ( ((int_64)*(CALL $55(($7 + [176]), ($7 + [64]))) != (int_64)$4) ){ goto $label$3 }
	CALL eosio_assert([1], [9261])
	goto $label$1 
	
.LABEL $label$3
	*($7 + [448]) = [8874]
	*($7 + [452]) = CALL $201([8874])
	*($7 + [56]) = *($7 + [448])
	if ( ((int_64)*(CALL $55(($7 + [400]), ($7 + [56]))) != (int_64)$4) ){ goto $label$4 }
	CALL eosio_assert([1], [9261])
	goto $label$1 
	
.LABEL $label$4
	*($7 + [440]) = [8919]
	*($7 + [444]) = CALL $201([8919])
	*($7 + [48]) = *($7 + [440])
	CALL eosio_assert(((int_64)*(CALL $55(($7 + [312]), ($7 + [48]))) == (int_64)$4), [9261])
	
.LABEL $label$1
	*($7 + [384]) = [8306]
	*($7 + [388]) = CALL $201([8306])
	*($7 + [40]) = *($7 + [384])
	$8 = CALL $55(($7 + [392]), ($7 + [40]))
	$9 = [0]
	*(($7 + [432])) = [0]
	*($7 + [408]) = $1
	*($7 + [416]) = (int_64)-1
	*($7 + [424]) = (int_64)0
	*($7 + [436]) = [0]
	*($7 + [400]) = *($8)
	*($7 + [376]) = ($7 + [400])
	CALL $102(($7 + [240]), ($7 + [376]), ($7 + [472]))
	$8 = *($7 + [244])
	if ( ($8 == 0) ){ goto $label$5 }
	if ( ((int_64)*($7 + [472]) != (int_64)*($8 + [8])) ){ goto $label$5 }
	$9 = (uint_64)(*($8) <= (int_64)6)
	
.LABEL $label$5
	CALL eosio_assert($9, [9058])
	*($7 + [360]) = $3
	*($7 + [352]) = ((int_64)((int_64)$5 & (int_64)4294967295) | (int_64)((int_64)$4 & (int_64)-4294967296))
	*($7 + [296]) = [8306]
	*($7 + [300]) = CALL $201([8306])
	*($7 + [32]) = *($7 + [296])
	$9 = CALL $55(($7 + [304]), ($7 + [32]))
	$10 = [0]
	*(($7 + [344])) = [0]
	*($7 + [320]) = $1
	*($7 + [328]) = (int_64)-1
	*($7 + [336]) = (int_64)0
	*($7 + [348]) = [0]
	*($7 + [312]) = *($9)
	*($7 + [288]) = ($7 + [312])
	CALL $103(($7 + [240]), ($7 + [288]), ($7 + [352]))
	$9 = [0]
	$8 = *($7 + [244])
	if ( ($8 == 0) ){ goto $label$6 }
	$9 = ( $8 ? [0] : (int_64)(((int_64)((int_64)*($7 + [352]) ^ (int_64)*($8 + [16])) | (int_64)((int_64)*($7 + [360]) ^ (int_64)*(($8 + [24])))) == 0) )
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9285])
	*(($7 + [280])) = [0]
	*($7 + [240]) = (int_64)0
	*($7 + [248]) = (int_64)0
	*($7 + [256]) = (int_64)0
	*($7 + [272]) = (int_64)0
	$8 = *(($9 + [48]))
	$9 = *($9 + [44])
	*($7 + [180]) = $9
	*($7 + [176]) = $9
	*($7 + [184]) = $8
	CALL $104(($7 + [176]), ($7 + [240]))
	$6 = *($6)
	$9 = *($7 + [272])
	$8 = *(($7 + [276]))
	if ( ((int_32)($8 - $9) != (int_32)(*($6 + [4]) - $6)) ){ goto $label$7 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( (CALL $105($9, $6) == 0) ){ goto $label$7 }
	$6 = ($6 + [40])
	$9 = ($9 + [40])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	$10 = [1]
	
.LABEL $label$7
	CALL eosio_assert($10, [9307])
	CALL eosio_assert(((int_64)*($7 + [240]) == (int_64)$1), [9329])
	CALL eosio_assert(((int_64)*(($7 + [248])) == (int_64)$3), [9346])
	CALL eosio_assert(((int_64)*((($7 + [240]) + [16])) == (int_64)$4), [9365])
	CALL eosio_assert(((int_64)*($7 + [264]) == (int_64)$5), [9391])
	*(($6 = (($7 + [176]) + [24]))) = *($7 + [360])
	*($7 + [176]) = $1
	*($7 + [224]) = (int_64)0
	*($7 + [232]) = [0]
	*($7 + [192]) = *($7 + [352])
	*($7 + [208]) = *($7 + [472])
	CALL $63(($7 + [224]), [32])
	$9 = *($7 + [228])
	$8 = *($7 + [224])
	*($7 + [100]) = $8
	*($7 + [96]) = $8
	*($7 + [104]) = $9
	*($7 + [88]) = ($7 + [96])
	*($7 + [480]) = ($7 + [176])
	CALL $106(($7 + [480]), ($7 + [88]))
	$4 = *($0)
	*($7 + [160]) = [8385]
	*($7 + [164]) = CALL $201([8385])
	*($7 + [24]) = *($7 + [160])
	$3 = *(CALL $55(($7 + [168]), ($7 + [24])))
	*($7 + [144]) = [8306]
	*($7 + [148]) = CALL $201([8306])
	*($7 + [16]) = *($7 + [144])
	$0 = CALL $55(($7 + [152]), ($7 + [16]))
	*($7 + [128]) = [8897]
	*($7 + [132]) = CALL $201([8897])
	*($7 + [8]) = *($7 + [128])
	$10 = CALL $55(($7 + [136]), ($7 + [8]))
	*($7 + [80]) = [9118]
	*($7 + [84]) = CALL $201([9118])
	*($7) = *($7 + [80])
	$9 = CALL $55(($7 + [88]), $7)
	*((($7 + [96]) + [24])) = [0]
	*($7 + [96]) = $1
	*($7 + [112]) = (int_64)0
	*($7 + [104]) = *($9)
	$9 = (*($7 + [228]) - *($7 + [224]))
	if ( ($9 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$10 }
	$8 = CALL _Znwj($9)
	*(($7 + [112])) = $8
	*(($11 = ($7 + [116]))) = $8
	*(($7 + [120])) = ($8 + $9)
	$12 = *($7 + [224])
	$9 = (*($7 + [228]) - $12)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($8, $12, $9)
	*($11) = (*($11) + $9)
	
.LABEL $label$11
	*($6) = [0]
	*($7 + [192]) = (int_64)0
	*($7 + [176]) = *($0)
	*($7 + [184]) = *($10)
	*(($9 = CALL _Znwj([16]))) = $4
	*($9 + [8]) = $3
	*(($7 + [212])) = [0]
	$8 = ($9 + [16])
	*($6) = $8
	*((($7 + [176]) + [20])) = $8
	*($7 + [192]) = $9
	*($7 + [204 align=4]) = (int_64)0
	$8 = *($7 + [112])
	$6 = *((($7 + [96]) + [20]))
	$9 = (($6 + [16]) - $8)
	$1 = (CASTING uint_64)(uint_32 ($6 - $8))
	$6 = ($7 + [204])
	
.LOOP $label$12:
	$9 = ($9 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$12 }
	if ( ($9 == 0) ){ goto $label$14 }
	CALL $63($6, $9)
	$6 = *(($7 + [208]))
	$9 = *(($7 + [204]))
	goto $label$13 
	
.LABEL $label$14
	$6 = [0]
	$9 = [0]
	
.LABEL $label$13
	*($7 + [484]) = $9
	*($7 + [480]) = $9
	*($7 + [488]) = $6
	*($7 + [496]) = ($7 + [480])
	*($7 + [504]) = ($7 + [96])
	CALL $65(($7 + [504]), ($7 + [496]))
	CALL $66(($7 + [176]))
	$9 = *($7 + [204])
	if ( ($9 == 0) ){ goto $label$15 }
	*(($7 + [208])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$15
	$9 = *($7 + [192])
	if ( ($9 == 0) ){ goto $label$16 }
	*(($7 + [196])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$16
	$9 = *($7 + [112])
	if ( ($9 == 0) ){ goto $label$17 }
	*(($7 + [116])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$17
	$9 = *($7 + [224])
	if ( ($9 == 0) ){ goto $label$18 }
	*($7 + [228]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$18
	$9 = *(($7 + [272]))
	if ( ($9 == 0) ){ goto $label$19 }
	*(($7 + [276])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$19
	$0 = *($7 + [336])
	if ( ($0 == 0) ){ goto $label$20 }
	$10 = ($7 + [340])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$22 }
	
.LOOP $label$23:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$24 }
	$8 = *($9 + [44])
	if ( ($8 == 0) ){ goto $label$25 }
	*(($9 + [48])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$25
	$8 = *($9 + [32])
	if ( ($8 == 0) ){ goto $label$26 }
	*(($9 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$26
	CALL _ZdlPv($9)
	
.LABEL $label$24
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$23 }
	$9 = *(($7 + [336]))
	goto $label$21 
	
.LABEL $label$22
	$9 = $0
	
.LABEL $label$21
	*($10) = $0
	CALL _ZdlPv($9)
	
.LABEL $label$20
	$8 = *($7 + [424])
	if ( ($8 == 0) ){ goto $label$27 }
	$0 = ($7 + [428])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$29 }
	
.LOOP $label$30:
	$9 = ($9 + [-24])
	$6 = *($9)
	*($9) = [0]
	if ( ($6 == 0) ){ goto $label$31 }
	CALL _ZdlPv($6)
	
.LABEL $label$31
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$30 }
	$9 = *(($7 + [424]))
	goto $label$28 
	
.LABEL $label$29
	$9 = $8
	
.LABEL $label$28
	*($0) = $8
	CALL _ZdlPv($9)
	
.LABEL $label$27
	$global$0 = ($7 + [512])
	return (unreachable)
	
.LABEL $label$10
	CALL $192((($7 + [96]) + [16]))
}

void .FUNC $167 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($5 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$6 = ($4 + ((int_32)$7 * (int_32)[24]))
	$8 = ($1 + [24])
	$3 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$1 = (($4 + $5) + [-24])
	
.LOOP $label$7:
	$4 = ($7 + [-24])
	$2 = *($4)
	*($4) = [0]
	*($1) = $2
	*(($1 + [16])) = *(($7 + [-8]))
	*(($1 + [8])) = *(($7 + [-16]))
	$1 = ($1 + [-24])
	$7 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$3 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $3
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	$2 = *($0 + [80])
	if ( ($2 == 0) ){ goto $label$11 }
	$6 = ($0 + [84])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($7 + [-12])
	$4 = *($1)
	if ( ($4 == 0) ){ goto $label$15 }
	*(($7 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$7 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$14 }
	$1 = *(($0 + [80]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $2
	
.LABEL $label$12
	*($6) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$11
	CALL _ZdlPv($0)
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$16 }
	CALL _ZdlPv($5)
	
.LABEL $label$16
	(unreachable)
}

void .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [20])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[31]) ){ goto $label$6 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$6
	CALL memcpy($2, $4, [32])
	*(($3 = ($3 + [4]))) = (*($3) + [32])
	CALL $168(*($1), *($0 + [24]))
}

void .FUNC $165 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($1)
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$6 = ($1 + [4])
	$7 = ($0 + [8])
	if ( ((int_32)(*($7) - $3) > (int_32)[32]) ){ goto $label$3 }
	CALL eosio_assert([0], [10587])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $6, [33])
	$3 = (*($3) + [33])
	*(($3 = ($0 + [4]))) = $3
	$6 = ($1 + [40])
	if ( ((int_32)(*($7) - $3) > (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert([0], [10587])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $6, [1])
	$6 = (*($3) + [1])
	*(($3 = ($0 + [4]))) = $6
	$7 = ($1 + [48])
	if ( ((int_32)(*(($0 + [8])) - $6) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10587])
	$6 = *($3)
	
.LABEL $label$5
	CALL memcpy($6, $7, [8])
	*($3) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $163 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *($1 + [8])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10587])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [8])
	*(($3 = ($0 + [4]))) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $161 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $192($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10722])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$7 = *($1)
	$5 = *($1 + [4])
	$6 = int_32(($5 - $7) >> [3])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $161($1, ($2 - $6))
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$5 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $5
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($0 + [4])
	$2 = *($6)
	$4 = ($0 + [8])
	
.LOOP $label$7:
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [10717])
	$2 = *($6)
	
.LABEL $label$8
	CALL memcpy($7, $2, [8])
	$2 = (*($6) + [8])
	*($6) = $2
	$7 = ($7 + [8])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

void .FUNC $169 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[12])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$2 = ((int_32)($2 - $4) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	$5 = ($2 + ((int_32)$6 * (int_32)[12]))
	$3 = ($2 + ((int_32)$3 * (int_32)[12]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$7 = ($3 + ((int_32)$1 * (int_32)[12]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	*(($4 = ($3 + [-12]))) = (int_64)0
	*(($3 = ($3 + [-4]))) = [0]
	$6 = ($1 + [-12])
	*($4) = *($6)
	$1 = ($1 + [-4])
	*($3) = *($1)
	*($1) = [0]
	*($6) = (int_64)0
	$3 = $4
	$1 = $6
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	$3 = $4
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $3
	*(($0 + [4])) = $7
	*(($0 + [8])) = $5
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($2 + [-12])
	$3 = *($6)
	if ( ($3 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$13
	$2 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$14 }
	CALL _ZdlPv($1)
	
.LABEL $label$14
}

int_32 .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10722])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$5 = *($1)
	$7 = *($1 + [4])
	$6 = ((int_32)($7 - $5) / (int_32)[12])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $169($1, ($2 - $6))
	$7 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$5 = ($5 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($7 + [-12])
	$6 = *($2)
	if ( ($6 == 0) ){ goto $label$9 }
	*(($7 + [-8])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$9
	$7 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$7
	*(($1 + [4])) = $5
	$7 = $5
	
.LABEL $label$6
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$10:
	CALL $77($0, $2)
	$2 = ($2 + [12])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$10 }
	
.LABEL $label$3
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $204($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10800])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $204($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $58 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	$6 = ($global$0 - [944])
	$global$0 = $6
	*($6 + [904]) = $1
	$7 = ((int_64)((int_64)$3 & (int_64)4294967295) | (int_64)((int_64)$2 & (int_64)-4294967296))
	*($6 + [896]) = $7
	CALL printn($1)
	CALL prints([9774])
	CALL printn($2)
	CALL prints([9774])
	CALL printui($3)
	CALL prints([9776])
	CALL prints([9779])
	*($6 + [280]) = $1
	*($6 + [272]) = $7
	CALL printui128(($6 + [272]))
	CALL prints([9776])
	*($6 + [880]) = [8908]
	*($6 + [884]) = CALL $201([8908])
	*($6 + [168]) = *($6 + [880])
	$8 = CALL $55(($6 + [888]), ($6 + [168]))
	*($6 + [872]) = [8822]
	*($6 + [876]) = CALL $201([8822])
	*($6 + [160]) = *($6 + [872])
	if ( ((int_64)*(CALL $55(($6 + [272]), ($6 + [160]))) != (int_64)$2) ){ goto $label$1 }
	*($6 + [864]) = [9793]
	*($6 + [868]) = CALL $201([9793])
	*($6 + [152]) = *($6 + [864])
	*($8) = *(CALL $55(($6 + [272]), ($6 + [152])))
	
.LABEL $label$1
	*($6 + [808]) = [8306]
	*($6 + [812]) = CALL $201([8306])
	*($6 + [144]) = *($6 + [808])
	$9 = CALL $55(($6 + [816]), ($6 + [144]))
	*((($6 + [824]) + [32])) = [0]
	*($6 + [840]) = (int_64)-1
	*($6 + [848]) = (int_64)0
	$10 = *($9)
	*($6 + [824]) = $10
	*($6 + [832]) = $1
	$9 = [0]
	$11 = CALL db_find_i64($10, $1, (int_64)5374645266240503808, $7)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $71(($6 + [824]), $11)
	if ( ((int_32)*($9 + [92]) == (int_32)($6 + [824])) ){ goto $label$2 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$2
	*((($6 + [272]) + [24])) = *(($4 + [8]))
	*((($6 + [272]) + [32])) = *(($4 + [16]))
	*((($6 + [272]) + [40])) = *(($4 + [24]))
	*((($6 + [272]) + [48])) = *(($4 + [32]))
	*(($6 + [328])) = *(($4 + [40]))
	*(($6 + [336])) = *(($4 + [48]))
	*($6 + [288]) = *($4)
	*($6 + [280]) = $3
	*($6 + [272]) = $1
	*($6 + [792]) = (int_64)0
	*($6 + [800]) = [0]
	$4 = [58]
	$7 = *($6 + [288])
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	CALL $63(($6 + [792]), $4)
	$4 = *($6 + [796])
	$11 = *($6 + [792])
	*($6 + [644]) = $11
	*($6 + [640]) = $11
	*($6 + [648]) = $4
	*($6 + [512]) = ($6 + [640])
	*($6 + [600]) = ($6 + [272])
	CALL $64(($6 + [600]), ($6 + [512]))
	if ( ($5 == 0) ){ goto $label$17 }
	CALL eosio_assert(($9 == 0), [9804])
	$7 = CALL current_time()
	*((($6 + [640]) + [28])) = (int_64)0
	*(($6 + [684])) = (int_64)0
	*(($6 + [692])) = (int_64)0
	*($6 + [652]) = [0]
	*($6 + [656]) = [0]
	*($6 + [660 align=4]) = (int_64)0
	*($6 + [676 align=4]) = (int_64)0
	*($6 + [640]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	$7 = *($0)
	*($6 + [584]) = [8385]
	*($6 + [588]) = CALL $201([8385])
	*($6 + [136]) = *($6 + [584])
	$10 = *(CALL $55(($6 + [592]), ($6 + [136])))
	*($6 + [568]) = [8306]
	*($6 + [572]) = CALL $201([8306])
	*($6 + [128]) = *($6 + [568])
	$11 = CALL $55(($6 + [576]), ($6 + [128]))
	*($6 + [552]) = [8897]
	*($6 + [556]) = CALL $201([8897])
	*($6 + [120]) = *($6 + [552])
	$12 = CALL $55(($6 + [560]), ($6 + [120]))
	*((($6 + [272]) + [24])) = [0]
	*($6 + [272]) = $1
	*($6 + [288]) = (int_64)0
	*($6 + [280]) = *($8)
	$4 = (*($6 + [796]) - *($6 + [792]))
	if ( ($4 == 0) ){ goto $label$18 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$11 }
	$9 = CALL _Znwj($4)
	*(($6 + [288])) = $9
	*(($13 = ($6 + [292]))) = $9
	*(($6 + [296])) = ($9 + $4)
	$14 = *($6 + [792])
	$4 = (*($6 + [796]) - $14)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$18 }
	CALL memcpy($9, $14, $4)
	*($13) = (*($13) + $4)
	
.LABEL $label$18
	*(($9 = (($6 + [600]) + [24]))) = [0]
	*($6 + [616]) = (int_64)0
	*($6 + [600]) = *($11)
	*($6 + [608]) = *($12)
	*(($4 = CALL _Znwj([16]))) = $7
	*($4 + [8]) = $10
	*(($6 + [636])) = [0]
	$11 = ($4 + [16])
	*($9) = $11
	*((($6 + [600]) + [20])) = $11
	*($6 + [616]) = $4
	*($6 + [628 align=4]) = (int_64)0
	$11 = *($6 + [288])
	$9 = *((($6 + [272]) + [20]))
	$4 = (($9 + [16]) - $11)
	$7 = (CASTING uint_64)(uint_32 ($9 - $11))
	$9 = (($6 + [600]) + [28])
	
.LOOP $label$19:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$19 }
	if ( ($4 == 0) ){ goto $label$16 }
	CALL $63($9, $4)
	$9 = *(($6 + [632]))
	$4 = *(($6 + [628]))
	goto $label$15 
	
.LABEL $label$17
	$7 = *($0)
	*($6 + [776]) = [8385]
	*($6 + [780]) = CALL $201([8385])
	*($6 + [40]) = *($6 + [776])
	$10 = *(CALL $55(($6 + [784]), ($6 + [40])))
	*($6 + [760]) = [8306]
	*($6 + [764]) = CALL $201([8306])
	*($6 + [32]) = *($6 + [760])
	$11 = CALL $55(($6 + [768]), ($6 + [32]))
	*($6 + [744]) = [8897]
	*($6 + [748]) = CALL $201([8897])
	*($6 + [24]) = *($6 + [744])
	$12 = CALL $55(($6 + [752]), ($6 + [24]))
	*((($6 + [640]) + [24])) = [0]
	*($6 + [640]) = $1
	*($6 + [656]) = (int_64)0
	*($6 + [648]) = *($8)
	$4 = (*($6 + [796]) - *($6 + [792]))
	if ( ($4 == 0) ){ goto $label$20 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$10 }
	$5 = CALL _Znwj($4)
	*(($6 + [656])) = $5
	*(($8 = ($6 + [660]))) = $5
	*(($6 + [664])) = ($5 + $4)
	$13 = *($6 + [792])
	$4 = (*($6 + [796]) - $13)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$20 }
	CALL memcpy($5, $13, $4)
	*($8) = (*($8) + $4)
	
.LABEL $label$20
	*(($5 = (($6 + [272]) + [24]))) = [0]
	*($6 + [288]) = (int_64)0
	*($6 + [272]) = *($11)
	*($6 + [280]) = *($12)
	*(($4 = CALL _Znwj([16]))) = $7
	*($4 + [8]) = $10
	*(($6 + [308])) = [0]
	$8 = ($4 + [16])
	*($5) = $8
	*((($6 + [272]) + [20])) = $8
	*($6 + [288]) = $4
	*($6 + [300 align=4]) = (int_64)0
	$8 = *($6 + [656])
	$5 = *((($6 + [640]) + [20]))
	$4 = (($5 + [16]) - $8)
	$7 = (CASTING uint_64)(uint_32 ($5 - $8))
	$5 = ($6 + [300])
	
.LOOP $label$21:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$21 }
	if ( ($4 == 0) ){ goto $label$14 }
	CALL $63($5, $4)
	$5 = *(($6 + [304]))
	$4 = *(($6 + [300]))
	goto $label$13 
	
.LABEL $label$16
	$9 = [0]
	$4 = [0]
	
.LABEL $label$15
	*($6 + [516]) = $4
	*($6 + [512]) = $4
	*($6 + [520]) = $9
	*($6 + [192]) = ($6 + [512])
	*($6 + [384]) = ($6 + [272])
	CALL $65(($6 + [384]), ($6 + [192]))
	$4 = *($6 + [288])
	if ( ($4 == 0) ){ goto $label$22 }
	*(($6 + [292])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$22
	$12 = ($6 + [676])
	$4 = (($6 + [640]) + [40])
	$9 = *($4)
	if ( ((int_32)$9 == (int_32)*(($6 + [684]))) ){ goto $label$24 }
	CALL $135($9, ($6 + [600]))
	*($4) = (*($4) + [40])
	goto $label$23 
	
.LABEL $label$24
	CALL $136($12, ($6 + [600]))
	
.LABEL $label$23
	$7 = *($0)
	*($6 + [496]) = [8385]
	*($6 + [500]) = CALL $201([8385])
	*($6 + [112]) = *($6 + [496])
	$10 = *(CALL $55(($6 + [504]), ($6 + [112])))
	$15 = *($0)
	*($6 + [480]) = [9836]
	*($6 + [484]) = CALL $201([9836])
	*($6 + [104]) = *($6 + [480])
	$4 = CALL $55(($6 + [488]), ($6 + [104]))
	*(($9 = (($6 + [512]) + [24]))) = [0]
	*($6 + [280]) = $2
	*($6 + [272]) = $1
	*($6 + [288]) = $3
	*($6 + [512]) = $15
	*($6 + [528]) = (int_64)0
	*($6 + [520]) = *($4)
	*(($4 = CALL _Znwj([16]))) = $7
	*($4 + [8]) = $10
	*(($6 + [548])) = [0]
	$11 = ($4 + [16])
	*($9) = $11
	*(($6 + [532])) = $11
	*($6 + [528]) = $4
	*($6 + [540 align=4]) = (int_64)0
	CALL $63(($6 + [540]), [24])
	$4 = *(($6 + [544]))
	$9 = *($6 + [540])
	*($6 + [388]) = $9
	*($6 + [384]) = $9
	*($6 + [392]) = $4
	*($6 + [912]) = ($6 + [384])
	*($6 + [192]) = ($6 + [272])
	CALL $74(($6 + [192]), ($6 + [912]))
	$4 = (($6 + [640]) + [40])
	$9 = *($4)
	if ( ((int_32)$9 == (int_32)*(($6 + [684]))) ){ goto $label$26 }
	CALL $135($9, ($6 + [512]))
	*($4) = (*($4) + [40])
	goto $label$25 
	
.LABEL $label$26
	CALL $136($12, ($6 + [512]))
	
.LABEL $label$25
	*($6 + [472]) = [8642]
	*($6 + [476]) = CALL $201([8642])
	*($6 + [96]) = *($6 + [472])
	if ( ((int_64)*(CALL $55(($6 + [272]), ($6 + [96]))) != (int_64)$2) ){ goto $label$7 }
	$7 = *($0)
	*($6 + [456]) = [8385]
	*($6 + [460]) = CALL $201([8385])
	*($6 + [88]) = *($6 + [456])
	$10 = *(CALL $55(($6 + [464]), ($6 + [88])))
	$15 = *($0)
	*($6 + [440]) = [9048]
	*($6 + [444]) = CALL $201([9048])
	*($6 + [80]) = *($6 + [440])
	$4 = CALL $55(($6 + [448]), ($6 + [80]))
	*(($9 = (($6 + [272]) + [24]))) = [0]
	*($6 + [392]) = $2
	*($6 + [384]) = $1
	*($6 + [400]) = $3
	*($6 + [272]) = $15
	*($6 + [288]) = (int_64)0
	*($6 + [280]) = *($4)
	*(($4 = CALL _Znwj([16]))) = $7
	*($4 + [8]) = $10
	*(($6 + [308])) = [0]
	$11 = ($4 + [16])
	*($9) = $11
	*(($6 + [292])) = $11
	*($6 + [288]) = $4
	*($6 + [300 align=4]) = (int_64)0
	CALL $63(($6 + [300]), [24])
	$4 = *(($6 + [304]))
	$9 = *($6 + [300])
	*($6 + [196]) = $9
	*($6 + [192]) = $9
	*($6 + [200]) = $4
	*($6 + [424]) = ($6 + [192])
	*($6 + [912]) = ($6 + [384])
	CALL $74(($6 + [912]), ($6 + [424]))
	$4 = (($6 + [640]) + [40])
	$9 = *($4)
	if ( ((int_32)$9 == (int_32)*(($6 + [684]))) ){ goto $label$12 }
	CALL $135($9, ($6 + [272]))
	*($4) = (*($4) + [40])
	$4 = *($6 + [300])
	if ( ($4 == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$14
	$5 = [0]
	$4 = [0]
	
.LABEL $label$13
	*($6 + [604]) = $4
	*($6 + [600]) = $4
	*($6 + [608]) = $5
	*($6 + [384]) = ($6 + [600])
	*($6 + [512]) = ($6 + [640])
	CALL $65(($6 + [512]), ($6 + [384]))
	CALL $66(($6 + [272]))
	$4 = *($6 + [300])
	if ( ($4 == 0) ){ goto $label$27 }
	*(($6 + [304])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$27
	$4 = *($6 + [288])
	if ( ($4 == 0) ){ goto $label$28 }
	*(($6 + [292])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$28
	$4 = *($6 + [656])
	if ( ($4 == 0) ){ goto $label$29 }
	*(($6 + [660])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$29
	if ( ($9 == 0) ){ goto $label$30 }
	CALL cancel_deferred(($6 + [896]))
	CALL $70($0, $1, $2, $3)
	
.LABEL $label$30
	*($6 + [736]) = [8642]
	*($6 + [740]) = CALL $201([8642])
	*($6 + [16]) = *($6 + [736])
	if ( ((int_64)*(CALL $55(($6 + [272]), ($6 + [16]))) != (int_64)$2) ){ goto $label$31 }
	$7 = *($0)
	*($6 + [720]) = [8385]
	*($6 + [724]) = CALL $201([8385])
	*($6 + [8]) = *($6 + [720])
	$10 = *(CALL $55(($6 + [728]), ($6 + [8])))
	$15 = *($0)
	*($6 + [704]) = [9048]
	*($6 + [708]) = CALL $201([9048])
	*($6) = *($6 + [704])
	$4 = CALL $55(($6 + [712]), $6)
	*($6 + [648]) = $2
	*($6 + [640]) = $1
	*($6 + [656]) = $3
	*($6 + [272]) = $15
	*($6 + [280]) = *($4)
	*(($4 = CALL _Znwj([16]))) = $7
	*($4 + [8]) = $10
	*(($6 + [308])) = [0]
	$5 = ($4 + [16])
	*((($6 + [272]) + [24])) = $5
	*(($6 + [292])) = $5
	*($6 + [288]) = $4
	*($6 + [300 align=4]) = (int_64)0
	CALL $63(($6 + [300]), [24])
	$8 = ($6 + [304])
	$4 = *($8)
	$5 = *($6 + [300])
	*($6 + [604]) = $5
	*($6 + [600]) = $5
	*($6 + [608]) = $4
	*($6 + [384]) = ($6 + [600])
	*($6 + [512]) = ($6 + [640])
	CALL $74(($6 + [512]), ($6 + [384]))
	CALL $66(($6 + [272]))
	$4 = *($6 + [300])
	if ( ($4 == 0) ){ goto $label$32 }
	*($8) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$32
	$4 = *($6 + [288])
	if ( ($4 == 0) ){ goto $label$31 }
	*(($6 + [292])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$31
	$4 = *($6 + [792])
	if ( ($4 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$12
	CALL $136($12, ($6 + [272]))
	$4 = *($6 + [300])
	if ( $4 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	CALL $192((($6 + [272]) + [16]))
	
.LABEL $label$10
	CALL $192((($6 + [640]) + [16]))
	
.LABEL $label$9
	*(($6 + [304])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$8
	$4 = *($6 + [288])
	if ( ($4 == 0) ){ goto $label$7 }
	*(($6 + [292])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	*(($6 + [660])) = $5
	CALL $137(($6 + [640]), ($6 + [896]), *($0), [0])
	CALL prints([9845])
	*($6 + [432]) = [0]
	*($6 + [424]) = (int_64)0
	CALL $138(($6 + [424]), ($6 + [792]))
	CALL $139(($6 + [384]), $4)
	*(($6 + [328])) = *($6 + [392])
	*(($6 + [336])) = *(($6 + [400]))
	*(($6 + [344])) = *(($6 + [408]))
	*($6 + [280]) = $2
	*($6 + [272]) = $1
	*($6 + [288]) = $3
	*($6 + [296]) = $5
	*($6 + [304]) = *($8)
	*($6 + [320]) = *($6 + [384])
	$4 = CALL $72(($6 + [352]), ($6 + [424]))
	*($6 + [376]) = [0]
	*($6 + [368]) = (int_64)0
	$5 = *($4)
	$11 = *(($6 + [356]))
	$7 = (CASTING uint_64)(uint_32 ((int_32)($11 - $5) / (int_32)[12]))
	$4 = [68]
	
.LOOP $label$33:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$33 }
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$36 }
	
.LOOP $label$37:
	$9 = *($5)
	$8 = *($5 + [4])
	$4 = (($4 + $8) - $9)
	$7 = (CASTING uint_64)(uint_32 ($8 - $9))
	
.LOOP $label$38:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$38 }
	$5 = ($5 + [12])
	if ( ((int_32)$5 != (int_32)$11) ){ goto $label$37 }
	if ( ($4 == 0) ){ goto $label$35 }
	
.LABEL $label$36
	CALL $63(($6 + [368]), $4)
	$5 = *($6 + [372])
	$4 = *($6 + [368])
	goto $label$34 
	
.LABEL $label$35
	$5 = [0]
	$4 = [0]
	
.LABEL $label$34
	*($6 + [196]) = $4
	*($6 + [192]) = $4
	*($6 + [200]) = $5
	*($6 + [184]) = ($6 + [192])
	*($6 + [912]) = ($6 + [272])
	CALL $140(($6 + [912]), ($6 + [184]))
	$9 = *($6 + [352])
	if ( ($9 == 0) ){ goto $label$39 }
	$11 = ($6 + [356])
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$41 }
	
.LOOP $label$42:
	$4 = ($5 + [-12])
	$8 = *($4)
	if ( ($8 == 0) ){ goto $label$43 }
	*(($5 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$43
	$5 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$42 }
	$4 = *(($6 + [352]))
	goto $label$40 
	
.LABEL $label$41
	$4 = $9
	
.LABEL $label$40
	*($11) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$39
	$7 = *($0)
	*($6 + [256]) = [8385]
	*($6 + [260]) = CALL $201([8385])
	*($6 + [72]) = *($6 + [256])
	$2 = *(CALL $55(($6 + [264]), ($6 + [72])))
	*($6 + [240]) = [8306]
	*($6 + [244]) = CALL $201([8306])
	*($6 + [64]) = *($6 + [240])
	$8 = CALL $55(($6 + [248]), ($6 + [64]))
	*($6 + [224]) = [8897]
	*($6 + [228]) = CALL $201([8897])
	*($6 + [56]) = *($6 + [224])
	$9 = CALL $55(($6 + [232]), ($6 + [56]))
	*($6 + [176]) = [9864]
	*($6 + [180]) = CALL $201([9864])
	*($6 + [48]) = *($6 + [176])
	$4 = CALL $55(($6 + [184]), ($6 + [48]))
	*((($6 + [192]) + [24])) = [0]
	*($6 + [192]) = $1
	*($6 + [208]) = (int_64)0
	*($6 + [200]) = *($4)
	$4 = (*($6 + [372]) - *($6 + [368]))
	if ( ($4 == 0) ){ goto $label$44 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$4 }
	$5 = CALL _Znwj($4)
	*(($6 + [208])) = $5
	*(($11 = ($6 + [212]))) = $5
	*(($6 + [216])) = ($5 + $4)
	$0 = *($6 + [368])
	$4 = (*($6 + [372]) - $0)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$44 }
	CALL memcpy($5, $0, $4)
	*($11) = (*($11) + $4)
	
.LABEL $label$44
	*(($5 = (($6 + [272]) + [24]))) = [0]
	*($6 + [288]) = (int_64)0
	*($6 + [272]) = *($8)
	*($6 + [280]) = *($9)
	*(($4 = CALL _Znwj([16]))) = $7
	*($4 + [8]) = $2
	*(($6 + [308])) = [0]
	$8 = ($4 + [16])
	*($5) = $8
	*((($6 + [272]) + [20])) = $8
	*($6 + [288]) = $4
	*($6 + [300 align=4]) = (int_64)0
	$8 = *($6 + [208])
	$5 = *((($6 + [192]) + [20]))
	$4 = (($5 + [16]) - $8)
	$7 = (CASTING uint_64)(uint_32 ($5 - $8))
	$5 = ($6 + [300])
	
.LOOP $label$45:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$45 }
	if ( ($4 == 0) ){ goto $label$47 }
	CALL $63($5, $4)
	$5 = *(($6 + [304]))
	$4 = *(($6 + [300]))
	goto $label$46 
	
.LABEL $label$47
	$5 = [0]
	$4 = [0]
	
.LABEL $label$46
	*($6 + [916]) = $4
	*($6 + [912]) = $4
	*($6 + [920]) = $5
	*($6 + [928]) = ($6 + [912])
	*($6 + [936]) = ($6 + [192])
	CALL $65(($6 + [936]), ($6 + [928]))
	CALL $66(($6 + [272]))
	$4 = *($6 + [300])
	if ( ($4 == 0) ){ goto $label$48 }
	*(($6 + [304])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$48
	$4 = *($6 + [288])
	if ( ($4 == 0) ){ goto $label$49 }
	*(($6 + [292])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$49
	$4 = *($6 + [208])
	if ( ($4 == 0) ){ goto $label$50 }
	*(($6 + [212])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$50
	$4 = *($6 + [368])
	if ( ($4 == 0) ){ goto $label$51 }
	*($6 + [372]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$51
	$9 = *($6 + [424])
	if ( ($9 == 0) ){ goto $label$52 }
	$5 = *($6 + [428])
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$54 }
	
.LOOP $label$55:
	$4 = ($5 + [-12])
	$8 = *($4)
	if ( ($8 == 0) ){ goto $label$56 }
	*(($5 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$56
	$5 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$55 }
	$4 = *($6 + [424])
	goto $label$53 
	
.LABEL $label$54
	$4 = $9
	
.LABEL $label$53
	*($6 + [428]) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$52
	$4 = *($6 + [540])
	if ( ($4 == 0) ){ goto $label$57 }
	*(($6 + [544])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$57
	$4 = *($6 + [528])
	if ( ($4 == 0) ){ goto $label$58 }
	*(($6 + [532])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$58
	$4 = *($6 + [628])
	if ( ($4 == 0) ){ goto $label$59 }
	*(($6 + [632])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$59
	$4 = *($6 + [616])
	if ( ($4 == 0) ){ goto $label$60 }
	*(($6 + [620])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$60
	CALL $75(($6 + [640]))
	$4 = *($6 + [792])
	if ( ($4 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	*($6 + [796]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$12 = *($6 + [848])
	if ( ($12 == 0) ){ goto $label$61 }
	$14 = ($6 + [852])
	$11 = *($14)
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$63 }
	
.LOOP $label$64:
	$11 = ($11 + [-24])
	$0 = *($11)
	*($11) = [0]
	if ( ($0 == 0) ){ goto $label$65 }
	$9 = *($0 + [80])
	if ( ($9 == 0) ){ goto $label$66 }
	$13 = ($0 + [84])
	$5 = *($13)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$68 }
	
.LOOP $label$69:
	$4 = ($5 + [-12])
	$8 = *($4)
	if ( ($8 == 0) ){ goto $label$70 }
	*(($5 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$70
	$5 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$69 }
	$4 = *(($0 + [80]))
	goto $label$67 
	
.LABEL $label$68
	$4 = $9
	
.LABEL $label$67
	*($13) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$66
	CALL _ZdlPv($0)
	
.LABEL $label$65
	if ( ((int_32)$11 != (int_32)$12) ){ goto $label$64 }
	$4 = *(($6 + [848]))
	goto $label$62 
	
.LABEL $label$63
	$4 = $12
	
.LABEL $label$62
	*($14) = $12
	CALL _ZdlPv($4)
	
.LABEL $label$61
	$global$0 = ($6 + [944])
	return (unreachable)
	
.LABEL $label$4
	CALL $192((($6 + [192]) + [16]))
	(unreachable)
	(unreachable)
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$5 = *($0)
	$4 = ($5 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($1)
	$1 = *($0 + [4])
	$6 = (int_64)0
	$2 = [0]
	
.LOOP $label$3:
	if ( ($1 <= *(($0 + [8]))) ){ goto $label$4 }
	CALL eosio_assert([0], [10722])
	$1 = *(($0 + [4]))
	
.LABEL $label$4
	$3 = *($1)
	$4 = ($1 + [1])
	*(($0 + [4])) = $4
	$1 = ($2 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($3 & [127]) << $1)))
	$2 = ($1 + [7])
	$1 = $4
	if ( ($3 & [128]) ){ goto $label$3 }
	*($5 + [16]) = $6
	$1 = ($5 + [20])
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[32]) ){ goto $label$5 }
	CALL eosio_assert([0], [10717])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($1, $4, [33])
	*(($1 = ($0 + [4]))) = (*($1) + [33])
}

int_32 .FUNC $50 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [148])) = [0]
	*(($4 + [140])) = (int_64)0
	*(($4 + [132])) = (int_64)0
	*(($4 + [124])) = (int_64)0
	*(($4 + [116])) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = [0]
	*($4 + [92]) = $2
	*($4 + [88]) = $2
	*($4 + [96]) = ($2 + $7)
	*($4 + [192]) = ($4 + [88])
	*($4 + [232]) = ($4 + [104])
	CALL $54(($4 + [232]), ($4 + [192]))
	*(($8 = (($4 + [40]) + [8]))) = *($4 + [96])
	*($4 + [40]) = *($4 + [88])
	*(($3 = (($4 + [192]) + [8]))) = *($8)
	*($4 + [192]) = *($4 + [40])
	$8 = *($3)
	*((($4 + [232]) + [8])) = $8
	*((($4 + [56]) + [24])) = $8
	*($4 + [56]) = $0
	*($4 + [64]) = $1
	$0 = *($4 + [192])
	*($4 + [72]) = $0
	*($4 + [232]) = $0
	*(($8 = (($4 + [152]) + [8]))) = *((($4 + [104]) + [16]))
	*(($9 = (($4 + [152]) + [16]))) = *((($4 + [104]) + [24]))
	*(($10 = (($4 + [152]) + [24]))) = *((($4 + [104]) + [32]))
	*(($11 = (($4 + [152]) + [32]))) = *(($4 + [144]))
	*($4 + [152]) = *($4 + [112])
	$0 = *($4 + [104])
	*((($4 + [192]) + [32])) = *($11)
	*((($4 + [192]) + [24])) = *($10)
	*((($4 + [192]) + [16])) = *($9)
	*($3) = *($8)
	*($4 + [192]) = *($4 + [152])
	$3 = (($4 + [56]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$1 = *((($4 + [192]) + [32]))
	*((($4 + [232]) + [32])) = $1
	$12 = *((($4 + [192]) + [24]))
	*((($4 + [232]) + [24])) = $12
	$13 = *((($4 + [192]) + [16]))
	*((($4 + [232]) + [16])) = $13
	$14 = *((($4 + [192]) + [8]))
	*((($4 + [232]) + [8])) = $14
	*(($4 + [8])) = $14
	*(($4 + [16])) = $13
	*(($4 + [24])) = $12
	*(($4 + [32])) = $1
	$1 = *($4 + [192])
	*($4) = $1
	*($4 + [232]) = $1
	CALL void $3((int_32 $0), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $207($2)
	
.LABEL $label$5
	$global$0 = ($4 + [272])
	return [1]
}

void .FUNC $51 (int_32 $0, int_64 $1)
{
	int_32 $2
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*($2 + [40]) = [0]
	*($2 + [32]) = (int_64)0
	*($2 + [16]) = [8919]
	*($2 + [20]) = CALL $201([8919])
	*($2 + [8]) = *($2 + [16])
	CALL $62($0, $1, *(CALL $55(($2 + [24]), ($2 + [8]))), ($2 + [32]), [1])
	$global$0 = ($2 + [48])
}

int_32 .FUNC $52 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$5
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = $3
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $207($2)
	
.LABEL $label$7
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $53 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	$2 = ($global$0 - [368])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = (($2 + [136]) + [28])
	$4 = (($2 + [56]) + [16])
	$5 = (($2 + [136]) + [16])
	$6 = (($2 + [296]) + [8])
	$7 = (($2 + [296]) + [24])
	$8 = (($2 + [296]) + [32])
	$9 = ($2 + [193])
	$10 = ($9 + [7])
	$11 = ($2 + [172])
	$12 = (int_64)1
	
.LOOP $label$2:
	*($2 + [280]) = [8306]
	*($2 + [284]) = CALL $201([8306])
	*($2 + [32]) = *($2 + [280])
	CALL $55(($2 + [288]), ($2 + [32]))
	*($6) = $1
	*((($2 + [296]) + [16])) = (int_64)-1
	*($7) = (int_64)0
	*($8) = [0]
	$13 = *($2 + [288])
	*($2 + [296]) = $13
	$14 = CALL db_find_i64($13, $1, (int_64)-9026177492230078464, $12)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$3 }
	$14 = CALL $56(($2 + [296]), $14)
	if ( ((int_32)*($14 + [64]) == (int_32)($2 + [296])) ){ goto $label$4 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$4
	*(($15 = (($2 + [240]) + [32]))) = *(($14 + [40]))
	*(($16 = (($2 + [240]) + [24]))) = *(($14 + [32]))
	*(($17 = (($2 + [240]) + [16]))) = *(($14 + [24]))
	*(($18 = (($2 + [240]) + [8]))) = *(($14 + [16]))
	*($2 + [240]) = *($14 + [8])
	*($2 + [224]) = *($14 + [49 align=1])
	*($2 + [231 align=1]) = *(($14 + [56]))
	if ( *(($14 + [48])) ){ goto $label$3 }
	*(($19 = (($2 + [136]) + [8]))) = $12
	*((($2 + [136]) + [56])) = [1]
	*(($5 + [32])) = *($15)
	*(($5 + [24])) = *($16)
	*(($5 + [16])) = *($17)
	*(($5 + [8])) = *($18)
	*($5) = *($2 + [240])
	*($9) = *($2 + [224])
	*($10) = *($2 + [231 align=1])
	*($2 + [136]) = $1
	*($2 + [208]) = [0]
	*($2 + [212]) = [0]
	*((($2 + [208]) + [8])) = [0]
	$13 = *($5)
	$14 = [58]
	
.LOOP $label$5:
	$14 = ($14 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$5 }
	CALL $63(($2 + [208]), $14)
	$14 = *($2 + [208])
	*(($15 = (($2 + [56]) + [8]))) = *($2 + [212])
	*($2 + [60]) = $14
	*($2 + [56]) = $14
	*($2 + [48]) = ($2 + [56])
	*($2 + [336]) = ($2 + [136])
	CALL $64(($2 + [336]), ($2 + [48]))
	$13 = *($0)
	*($2 + [120]) = [8385]
	*($2 + [124]) = CALL $201([8385])
	*($2 + [24]) = *($2 + [120])
	CALL $55(($2 + [128]), ($2 + [24]))
	*($2 + [104]) = [8306]
	$20 = *($2 + [128])
	*($2 + [108]) = CALL $201([8306])
	*($2 + [16]) = *($2 + [104])
	CALL $55(($2 + [112]), ($2 + [16]))
	*($2 + [88]) = [8897]
	*($2 + [92]) = CALL $201([8897])
	*($2 + [8]) = *($2 + [88])
	CALL $55(($2 + [96]), ($2 + [8]))
	*($2 + [40]) = [8908]
	*($2 + [44]) = CALL $201([8908])
	*($2) = *($2 + [40])
	CALL $55(($2 + [48]), $2)
	*($4) = (int_64)0
	*(($16 = (($2 + [56]) + [24]))) = [0]
	*($15) = *($2 + [48])
	*($2 + [56]) = $1
	$14 = (*($2 + [212]) - *($2 + [208]))
	if ( ($14 == 0) ){ goto $label$6 }
	if ( ((int_32)$14 <= (int_32)[-1]) ){ goto $label$1 }
	$15 = CALL _Znwj($14)
	*($4) = $15
	*(($17 = (($2 + [56]) + [20]))) = $15
	*($16) = ($15 + $14)
	$16 = *($2 + [208])
	$14 = (*($2 + [212]) - $16)
	if ( ((int_32)$14 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($15, $16, $14)
	*($17) = (*($17) + $14)
	
.LABEL $label$6
	*($19) = *($2 + [96])
	*($5) = (int_64)0
	*(($15 = (($2 + [136]) + [24]))) = [0]
	*($2 + [136]) = *($2 + [112])
	$14 = CALL _Znwj([16])
	*($5) = $14
	*($14) = $13
	*($14 + [8]) = $20
	*($3) = (int_64)0
	*($11) = [0]
	$14 = ($14 + [16])
	*($15) = $14
	*(($17 = (($2 + [136]) + [20]))) = $14
	$16 = *($4)
	$18 = (($2 + [56]) + [20])
	$15 = *($18)
	$14 = (($15 + [16]) - $16)
	$13 = (CASTING uint_64)(uint_32 ($15 - $16))
	
.LOOP $label$7:
	$14 = ($14 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$7 }
	if ( ($14 == 0) ){ goto $label$9 }
	CALL $63($3, $14)
	$15 = *((($2 + [136]) + [32]))
	$14 = *($3)
	goto $label$8 
	
.LABEL $label$9
	$15 = [0]
	$14 = [0]
	
.LABEL $label$8
	*((($2 + [336]) + [8])) = $15
	*($2 + [340]) = $14
	*($2 + [336]) = $14
	*($2 + [352]) = ($2 + [336])
	*($2 + [360]) = ($2 + [56])
	CALL $65(($2 + [360]), ($2 + [352]))
	CALL $66(($2 + [136]))
	$14 = *($3)
	if ( ($14 == 0) ){ goto $label$10 }
	*((($2 + [136]) + [32])) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$10
	$14 = *($5)
	if ( ($14 == 0) ){ goto $label$11 }
	*($17) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$11
	$14 = *($4)
	if ( ($14 == 0) ){ goto $label$12 }
	*($18) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$12
	$14 = *($2 + [208])
	if ( ($14 == 0) ){ goto $label$3 }
	*($2 + [212]) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$3
	$16 = *($7)
	if ( ($16 == 0) ){ goto $label$13 }
	$17 = (($2 + [296]) + [28])
	$14 = *($17)
	if ( ((int_32)$14 == (int_32)$16) ){ goto $label$15 }
	
.LOOP $label$16:
	$14 = ($14 + [-24])
	$15 = *($14)
	*($14) = [0]
	if ( ($15 == 0) ){ goto $label$17 }
	CALL _ZdlPv($15)
	
.LABEL $label$17
	if ( ((int_32)$16 != (int_32)$14) ){ goto $label$16 }
	$14 = *($7)
	goto $label$14 
	
.LABEL $label$15
	$14 = $16
	
.LABEL $label$14
	*($17) = $16
	CALL _ZdlPv($14)
	
.LABEL $label$13
	$12 = ((int_64)$12 + (int_64)1)
	if ( (uint_64)($12 <= (int_64)6) ){ goto $label$2 }
	$global$0 = ($2 + [368])
	return (unreachable)
	
.LABEL $label$1
	CALL $192($4)
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$5 = *($0)
	$1 = *($1)
	$3 = *($1 + [4])
	$6 = (int_64)0
	$2 = [0]
	
.LOOP $label$2:
	if ( ($3 <= *(($1 + [8]))) ){ goto $label$3 }
	CALL eosio_assert([0], [10722])
	$3 = *(($1 + [4]))
	
.LABEL $label$3
	$0 = *($3)
	$4 = ($3 + [1])
	*(($1 + [4])) = $4
	$3 = ($2 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($0 & [127]) << $3)))
	$2 = ($3 + [7])
	$3 = $4
	if ( ($0 & [128]) ){ goto $label$2 }
	*($5 + [8]) = $6
	$3 = ($5 + [12])
	if ( ((uint_32)(*(($1 + [8])) - $4) > (uint_32)[32]) ){ goto $label$4 }
	CALL eosio_assert([0], [10717])
	$4 = *(($1 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $4, [33])
	*(($3 = ($1 + [4]))) = (*($3) + [33])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [10336])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [10441])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [10374])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [10441])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $4
	$7 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [10777])
	
.LABEL $label$5
	$4 = CALL $204($6)
	$7 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $6)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $6)
	*(($5 = CALL _Znwj([80])) + [64]) = $0
	*($5 + [8]) = [0]
	$8 = ($5 + [8])
	$2 = $4
	if ( ((uint_32)$6 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10717])
	$2 = *($3 + [36])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $152(($3 + [32]), $8)
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($6 + [8]) = $9
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($2) = ($6 + [24])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $163(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $207($4)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = [1]
	if ( ((int_32)*($0) != (int_32)*($1)) ){ goto $label$1 }
	if ( ((int_32)*($0 + [4]) != (int_32)*($1 + [4])) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [5])) != (int_32)*(($1 + [5]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [6])) != (int_32)*(($1 + [6]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [7])) != (int_32)*(($1 + [7]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [8])) != (int_32)*(($1 + [8]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [9])) != (int_32)*(($1 + [9]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [10])) != (int_32)*(($1 + [10]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [11])) != (int_32)*(($1 + [11]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [12])) != (int_32)*(($1 + [12]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [13])) != (int_32)*(($1 + [13]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [14])) != (int_32)*(($1 + [14]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [15])) != (int_32)*(($1 + [15]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [16])) != (int_32)*(($1 + [16]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [17])) != (int_32)*(($1 + [17]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [18])) != (int_32)*(($1 + [18]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [19])) != (int_32)*(($1 + [19]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [20])) != (int_32)*(($1 + [20]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [21])) != (int_32)*(($1 + [21]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [22])) != (int_32)*(($1 + [22]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [23])) != (int_32)*(($1 + [23]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [24])) != (int_32)*(($1 + [24]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [25])) != (int_32)*(($1 + [25]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [26])) != (int_32)*(($1 + [26]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [27])) != (int_32)*(($1 + [27]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [28])) != (int_32)*(($1 + [28]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [29])) != (int_32)*(($1 + [29]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [30])) != (int_32)*(($1 + [30]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [31])) != (int_32)*(($1 + [31]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [32])) != (int_32)*(($1 + [32]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [33])) != (int_32)*(($1 + [33]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [34])) != (int_32)*(($1 + [34]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [35])) != (int_32)*(($1 + [35]))) ){ goto $label$1 }
	$2 = ((int_32)*(($0 + [36])) != (int_32)*(($1 + [36])))
	
.LABEL $label$1
	return $2
}

void .FUNC $173 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [44])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [48])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$2 = *($1 + [32])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($1 + [36])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10722])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	*($1) = $3
	$2 = ($1 + [4])
	$7 = ($0 + [8])
	if ( ((uint_32)(*($7) - $8) > (uint_32)[32]) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$8 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $8, [33])
	$2 = (*($2) + [33])
	*(($2 = ($0 + [4]))) = $2
	$8 = ($1 + [40])
	if ( ((int_32)*($7) != (int_32)$2) ){ goto $label$4 }
	CALL eosio_assert([0], [10717])
	$2 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($8, $2, [1])
	$7 = (*($2) + [1])
	*(($2 = ($0 + [4]))) = $7
	$8 = ($1 + [48])
	if ( ((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10717])
	$7 = *($2)
	
.LABEL $label$5
	CALL memcpy($8, $7, [8])
	*($2) = (*($2) + [8])
	return $0
}

int_32 .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $77($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $185($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $185($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $183($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[40])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$3 }
	$3 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3 + [4 align=4]) = (int_64)0
	*(($3 + [36])) = [0]
	*(($3 + [28])) = (int_64)0
	*(($3 + [20])) = (int_64)0
	*(($3 + [12])) = (int_64)0
	*($3) = [0]
	$3 = (*($0) + [40])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $192($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$3 * (int_32)[40]))
	$5 = ($2 + ((int_32)$5 * (int_32)[40]))
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	*(($3 + [36])) = [0]
	*(($3 + [28])) = (int_64)0
	*(($3 + [20])) = (int_64)0
	*(($3 + [12])) = (int_64)0
	*(($3 + [4])) = (int_64)0
	$3 = ($3 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$6 = ($2 + ((int_32)$6 * (int_32)[40]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 + ((int_32)((int_32)$1 / (int_32)[-40]) * (int_32)[40]))
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $4, [8])
	*($1 + [8]) = *($2 + [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $4, [8])
	*(($3 = ($0 + [4]))) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $156 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[24])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$2 = ((int_32)($2 - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	$6 = ($6 + [24])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[24]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$6 * (int_32)[24]))
	$3 = ($2 + ((int_32)$3 * (int_32)[24]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	$6 = ($6 + [24])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$5 = ($3 + ((int_32)$1 * (int_32)[24]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 + ((int_32)((int_32)$2 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$8
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$9 }
	CALL _ZdlPv($6)
	
.LABEL $label$9
}

void .FUNC $154 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10722])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ((int_32)($7 - $2) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$5 }
	CALL $157($1, ($6 - $5))
	$7 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$6 }
	$7 = ($2 + ((int_32)$6 * (int_32)[24]))
	*(($1 + [4])) = $7
	
.LABEL $label$6
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	CALL $151($0, $2)
	$2 = ($2 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $158 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($0 + [64]) = [0]
	*($0 + [120 align=4]) = (int_64)0
	*($0 + [144]) = $1
	*(($0 + [128])) = (int_64)0
	*(($0 + [136])) = (int_64)0
	$3 = ($0 + [132])
	$4 = ($0 + [120])
	$5 = ($0 + [64])
	$6 = ($0 + [8])
	$7 = *($1 + [4])
	$1 = *($2 + [4])
	if ( ((uint_32)(*($1 + [8]) - $7) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$7 = *(($1 + [4]))
	
.LABEL $label$1
	CALL memcpy($0, $7, [8])
	*(($7 = ($1 + [4]))) = (*($7) + [8])
	CALL $152($1, $6)
	CALL $152($1, $5)
	CALL $160($1, $4)
	CALL $155($1, $3)
	*($0 + [148]) = *(*($2 + [8]))
	return $0
}

void .FUNC $159 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [132])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [136])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$2 = *($1 + [120])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($1 + [124])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $202(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10800])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $202(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $183 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($4 + [16])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$3 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

void .FUNC $68 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$6 = ($global$0 - [752])
	$global$0 = $6
	CALL eosio_assert((uint_64)($3 <= (int_64)6), [9875])
	*($6 + [712]) = $1
	$7 = ((int_64)((int_64)$3 & (int_64)4294967295) | (int_64)((int_64)$2 & (int_64)-4294967296))
	*($6 + [704]) = $7
	CALL printn($1)
	CALL prints([9774])
	CALL printn($2)
	CALL prints([9774])
	CALL printui($3)
	CALL prints([9776])
	CALL prints([9779])
	*($6 + [216]) = $1
	*($6 + [208]) = $7
	CALL printui128(($6 + [208]))
	CALL prints([9776])
	*($6 + [688]) = [9917]
	*($6 + [692]) = CALL $201([9917])
	*($6 + [104]) = *($6 + [688])
	$8 = CALL $55(($6 + [696]), ($6 + [104]))
	*($6 + [680]) = [8887]
	*($6 + [684]) = CALL $201([8887])
	*($6 + [96]) = *($6 + [680])
	if ( ((int_64)*(CALL $55(($6 + [208]), ($6 + [96]))) != (int_64)$2) ){ goto $label$1 }
	*($6 + [672]) = [9928]
	*($6 + [676]) = CALL $201([9928])
	*($6 + [88]) = *($6 + [672])
	*($8) = *(CALL $55(($6 + [208]), ($6 + [88])))
	
.LABEL $label$1
	*($6 + [616]) = [8306]
	*($6 + [620]) = CALL $201([8306])
	*($6 + [80]) = *($6 + [616])
	$9 = CALL $55(($6 + [624]), ($6 + [80]))
	*(($6 + [664])) = [0]
	*($6 + [648]) = (int_64)-1
	*($6 + [656]) = (int_64)0
	$10 = *($9)
	*($6 + [632]) = $10
	*($6 + [640]) = $1
	$9 = [0]
	$11 = CALL db_find_i64($10, $1, (int_64)5374645266240503808, $7)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $71(($6 + [632]), $11)
	if ( ((int_32)*($9 + [92]) == (int_32)($6 + [632])) ){ goto $label$2 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$2
	CALL eosio_assert(($9 == 0), [9804])
	$7 = CALL current_time()
	*((($6 + [552]) + [28])) = (int_64)0
	*(($6 + [596])) = (int_64)0
	*(($6 + [604])) = (int_64)0
	*($6 + [564]) = [0]
	*($6 + [568]) = [0]
	*($6 + [572 align=4]) = (int_64)0
	*($6 + [588 align=4]) = (int_64)0
	*($6 + [552]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [216]) = $3
	*($6 + [208]) = $1
	*($6 + [224]) = $4
	*($6 + [536]) = (int_64)0
	*($6 + [544]) = [0]
	CALL $63(($6 + [536]), [24])
	$9 = *($6 + [540])
	$11 = *($6 + [536])
	*($6 + [500]) = $11
	*($6 + [496]) = $11
	*($6 + [504]) = $9
	*($6 + [320]) = ($6 + [496])
	*($6 + [408]) = ($6 + [208])
	CALL $141(($6 + [408]), ($6 + [320]))
	$7 = *($0)
	*($6 + [480]) = [8385]
	*($6 + [484]) = CALL $201([8385])
	*($6 + [72]) = *($6 + [480])
	$4 = *(CALL $55(($6 + [488]), ($6 + [72])))
	*($6 + [464]) = [8306]
	*($6 + [468]) = CALL $201([8306])
	*($6 + [64]) = *($6 + [464])
	$12 = CALL $55(($6 + [472]), ($6 + [64]))
	*($6 + [448]) = [8897]
	*($6 + [452]) = CALL $201([8897])
	*($6 + [56]) = *($6 + [448])
	$13 = CALL $55(($6 + [456]), ($6 + [56]))
	*((($6 + [208]) + [24])) = [0]
	*($6 + [208]) = $1
	*($6 + [224]) = (int_64)0
	*($6 + [216]) = *($8)
	$9 = (*($6 + [540]) - *($6 + [536]))
	if ( ($9 == 0) ){ goto $label$5 }
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$4 }
	$11 = CALL _Znwj($9)
	*(($6 + [224])) = $11
	*(($14 = ($6 + [228]))) = $11
	*(($6 + [232])) = ($11 + $9)
	$15 = *($6 + [536])
	$9 = (*($6 + [540]) - $15)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($11, $15, $9)
	*($14) = (*($14) + $9)
	
.LABEL $label$5
	*(($11 = (($6 + [496]) + [24]))) = [0]
	*($6 + [512]) = (int_64)0
	*($6 + [496]) = *($12)
	*($6 + [504]) = *($13)
	*(($9 = CALL _Znwj([16]))) = $7
	*($9 + [8]) = $4
	*(($6 + [532])) = [0]
	$12 = ($9 + [16])
	*($11) = $12
	*((($6 + [496]) + [20])) = $12
	*($6 + [512]) = $9
	*($6 + [524 align=4]) = (int_64)0
	$12 = *($6 + [224])
	$11 = *((($6 + [208]) + [20]))
	$9 = (($11 + [16]) - $12)
	$7 = (CASTING uint_64)(uint_32 ($11 - $12))
	$11 = (($6 + [496]) + [28])
	
.LOOP $label$6:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	if ( ($9 == 0) ){ goto $label$8 }
	CALL $63($11, $9)
	$11 = *(($6 + [528]))
	$9 = *(($6 + [524]))
	goto $label$7 
	
.LABEL $label$8
	$11 = [0]
	$9 = [0]
	
.LABEL $label$7
	*($6 + [412]) = $9
	*($6 + [408]) = $9
	*($6 + [416]) = $11
	*($6 + [128]) = ($6 + [408])
	*($6 + [320]) = ($6 + [208])
	CALL $65(($6 + [320]), ($6 + [128]))
	$9 = *($6 + [224])
	if ( ($9 == 0) ){ goto $label$9 }
	*(($6 + [228])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$9
	$13 = ($6 + [588])
	$9 = (($6 + [552]) + [40])
	$11 = *($9)
	if ( ((int_32)$11 == (int_32)*(($6 + [596]))) ){ goto $label$11 }
	CALL $135($11, ($6 + [496]))
	*($9) = (*($9) + [40])
	goto $label$10 
	
.LABEL $label$11
	CALL $136($13, ($6 + [496]))
	
.LABEL $label$10
	$7 = *($0)
	*($6 + [392]) = [8385]
	*($6 + [396]) = CALL $201([8385])
	*($6 + [48]) = *($6 + [392])
	$4 = *(CALL $55(($6 + [400]), ($6 + [48])))
	$10 = *($0)
	*($6 + [376]) = [9836]
	*($6 + [380]) = CALL $201([9836])
	*($6 + [40]) = *($6 + [376])
	$9 = CALL $55(($6 + [384]), ($6 + [40]))
	*(($11 = (($6 + [408]) + [24]))) = [0]
	*($6 + [216]) = $2
	*($6 + [208]) = $1
	*($6 + [224]) = $3
	*($6 + [408]) = $10
	*($6 + [424]) = (int_64)0
	*($6 + [416]) = *($9)
	*(($9 = CALL _Znwj([16]))) = $7
	*($9 + [8]) = $4
	*(($6 + [444])) = [0]
	$12 = ($9 + [16])
	*($11) = $12
	*(($6 + [428])) = $12
	*($6 + [424]) = $9
	*($6 + [436 align=4]) = (int_64)0
	CALL $63(($6 + [436]), [24])
	$9 = *(($6 + [440]))
	$11 = *($6 + [436])
	*($6 + [324]) = $11
	*($6 + [320]) = $11
	*($6 + [328]) = $9
	*($6 + [720]) = ($6 + [320])
	*($6 + [128]) = ($6 + [208])
	CALL $74(($6 + [128]), ($6 + [720]))
	$9 = (($6 + [552]) + [40])
	$11 = *($9)
	if ( ((int_32)$11 == (int_32)*(($6 + [596]))) ){ goto $label$13 }
	CALL $135($11, ($6 + [408]))
	*($9) = (*($9) + [40])
	goto $label$12 
	
.LABEL $label$13
	CALL $136($13, ($6 + [408]))
	
.LABEL $label$12
	*(($6 + [572])) = $5
	CALL $137(($6 + [552]), ($6 + [704]), *($0), [0])
	CALL prints([9845])
	*($6 + [368]) = [0]
	*($6 + [360]) = (int_64)0
	CALL $138(($6 + [360]), ($6 + [536]))
	CALL $139(($6 + [320]), $9)
	*(($6 + [264])) = *($6 + [328])
	*(($6 + [272])) = *(($6 + [336]))
	*(($6 + [280])) = *(($6 + [344]))
	*($6 + [216]) = $2
	*($6 + [208]) = $1
	*($6 + [224]) = $3
	*($6 + [232]) = $5
	*($6 + [240]) = *($8)
	*($6 + [256]) = *($6 + [320])
	$9 = CALL $72(($6 + [288]), ($6 + [360]))
	*($6 + [312]) = [0]
	*($6 + [304]) = (int_64)0
	$8 = *($9)
	$12 = *(($6 + [292]))
	$7 = (CASTING uint_64)(uint_32 ((int_32)($12 - $8) / (int_32)[12]))
	$9 = [68]
	
.LOOP $label$14:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$14 }
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$17 }
	
.LOOP $label$18:
	$11 = *($8)
	$5 = *($8 + [4])
	$9 = (($9 + $5) - $11)
	$7 = (CASTING uint_64)(uint_32 ($5 - $11))
	
.LOOP $label$19:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$19 }
	$8 = ($8 + [12])
	if ( ((int_32)$8 != (int_32)$12) ){ goto $label$18 }
	if ( ($9 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL $63(($6 + [304]), $9)
	$8 = *($6 + [308])
	$9 = *($6 + [304])
	goto $label$15 
	
.LABEL $label$16
	$8 = [0]
	$9 = [0]
	
.LABEL $label$15
	*($6 + [132]) = $9
	*($6 + [128]) = $9
	*($6 + [136]) = $8
	*($6 + [120]) = ($6 + [128])
	*($6 + [720]) = ($6 + [208])
	CALL $140(($6 + [720]), ($6 + [120]))
	$11 = *($6 + [288])
	if ( ($11 == 0) ){ goto $label$20 }
	$12 = ($6 + [292])
	$8 = *($12)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$22 }
	
.LOOP $label$23:
	$9 = ($8 + [-12])
	$5 = *($9)
	if ( ($5 == 0) ){ goto $label$24 }
	*(($8 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$24
	$8 = $9
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$23 }
	$9 = *(($6 + [288]))
	goto $label$21 
	
.LABEL $label$22
	$9 = $11
	
.LABEL $label$21
	*($12) = $11
	CALL _ZdlPv($9)
	
.LABEL $label$20
	$7 = *($0)
	*($6 + [192]) = [8385]
	*($6 + [196]) = CALL $201([8385])
	*($6 + [32]) = *($6 + [192])
	$3 = *(CALL $55(($6 + [200]), ($6 + [32])))
	*($6 + [176]) = [8306]
	*($6 + [180]) = CALL $201([8306])
	*($6 + [24]) = *($6 + [176])
	$5 = CALL $55(($6 + [184]), ($6 + [24]))
	*($6 + [160]) = [8897]
	*($6 + [164]) = CALL $201([8897])
	*($6 + [16]) = *($6 + [160])
	$11 = CALL $55(($6 + [168]), ($6 + [16]))
	*($6 + [112]) = [9864]
	*($6 + [116]) = CALL $201([9864])
	*($6 + [8]) = *($6 + [112])
	$9 = CALL $55(($6 + [120]), ($6 + [8]))
	*((($6 + [128]) + [24])) = [0]
	*($6 + [128]) = $1
	*($6 + [144]) = (int_64)0
	*($6 + [136]) = *($9)
	$9 = (*($6 + [308]) - *($6 + [304]))
	if ( ($9 == 0) ){ goto $label$25 }
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$3 }
	$8 = CALL _Znwj($9)
	*(($6 + [144])) = $8
	*(($12 = ($6 + [148]))) = $8
	*(($6 + [152])) = ($8 + $9)
	$0 = *($6 + [304])
	$9 = (*($6 + [308]) - $0)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$25 }
	CALL memcpy($8, $0, $9)
	*($12) = (*($12) + $9)
	
.LABEL $label$25
	*(($8 = (($6 + [208]) + [24]))) = [0]
	*($6 + [224]) = (int_64)0
	*($6 + [208]) = *($5)
	*($6 + [216]) = *($11)
	*(($9 = CALL _Znwj([16]))) = $7
	*($9 + [8]) = $3
	*(($6 + [244])) = [0]
	$5 = ($9 + [16])
	*($8) = $5
	*((($6 + [208]) + [20])) = $5
	*($6 + [224]) = $9
	*($6 + [236 align=4]) = (int_64)0
	$5 = *($6 + [144])
	$8 = *((($6 + [128]) + [20]))
	$9 = (($8 + [16]) - $5)
	$7 = (CASTING uint_64)(uint_32 ($8 - $5))
	$8 = ($6 + [236])
	
.LOOP $label$26:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$26 }
	if ( ($9 == 0) ){ goto $label$28 }
	CALL $63($8, $9)
	$8 = *(($6 + [240]))
	$9 = *(($6 + [236]))
	goto $label$27 
	
.LABEL $label$28
	$8 = [0]
	$9 = [0]
	
.LABEL $label$27
	*($6 + [724]) = $9
	*($6 + [720]) = $9
	*($6 + [728]) = $8
	*($6 + [736]) = ($6 + [720])
	*($6 + [744]) = ($6 + [128])
	CALL $65(($6 + [744]), ($6 + [736]))
	CALL $66(($6 + [208]))
	$9 = *($6 + [236])
	if ( ($9 == 0) ){ goto $label$29 }
	*(($6 + [240])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$29
	$9 = *($6 + [224])
	if ( ($9 == 0) ){ goto $label$30 }
	*(($6 + [228])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$30
	$9 = *($6 + [144])
	if ( ($9 == 0) ){ goto $label$31 }
	*(($6 + [148])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$31
	$9 = *($6 + [304])
	if ( ($9 == 0) ){ goto $label$32 }
	*($6 + [308]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$32
	$11 = *($6 + [360])
	if ( ($11 == 0) ){ goto $label$33 }
	$8 = *($6 + [364])
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$35 }
	
.LOOP $label$36:
	$9 = ($8 + [-12])
	$5 = *($9)
	if ( ($5 == 0) ){ goto $label$37 }
	*(($8 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$37
	$8 = $9
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$36 }
	$9 = *($6 + [360])
	goto $label$34 
	
.LABEL $label$35
	$9 = $11
	
.LABEL $label$34
	*($6 + [364]) = $11
	CALL _ZdlPv($9)
	
.LABEL $label$33
	$9 = *($6 + [436])
	if ( ($9 == 0) ){ goto $label$38 }
	*(($6 + [440])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$38
	$9 = *($6 + [424])
	if ( ($9 == 0) ){ goto $label$39 }
	*(($6 + [428])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$39
	$9 = *($6 + [524])
	if ( ($9 == 0) ){ goto $label$40 }
	*(($6 + [528])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$40
	$9 = *($6 + [512])
	if ( ($9 == 0) ){ goto $label$41 }
	*(($6 + [516])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$41
	$9 = *($6 + [536])
	if ( ($9 == 0) ){ goto $label$42 }
	*($6 + [540]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$42
	CALL $75(($6 + [552]))
	$13 = *($6 + [656])
	if ( ($13 == 0) ){ goto $label$43 }
	$15 = ($6 + [660])
	$12 = *($15)
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$45 }
	
.LOOP $label$46:
	$12 = ($12 + [-24])
	$0 = *($12)
	*($12) = [0]
	if ( ($0 == 0) ){ goto $label$47 }
	$11 = *($0 + [80])
	if ( ($11 == 0) ){ goto $label$48 }
	$14 = ($0 + [84])
	$8 = *($14)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$50 }
	
.LOOP $label$51:
	$9 = ($8 + [-12])
	$5 = *($9)
	if ( ($5 == 0) ){ goto $label$52 }
	*(($8 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$52
	$8 = $9
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$51 }
	$9 = *(($0 + [80]))
	goto $label$49 
	
.LABEL $label$50
	$9 = $11
	
.LABEL $label$49
	*($14) = $11
	CALL _ZdlPv($9)
	
.LABEL $label$48
	CALL _ZdlPv($0)
	
.LABEL $label$47
	if ( ((int_32)$12 != (int_32)$13) ){ goto $label$46 }
	$9 = *(($6 + [656]))
	goto $label$44 
	
.LABEL $label$45
	$9 = $13
	
.LABEL $label$44
	*($15) = $13
	CALL _ZdlPv($9)
	
.LABEL $label$43
	$global$0 = ($6 + [752])
	return (unreachable)
	
.LABEL $label$4
	CALL $192((($6 + [208]) + [16]))
	
.LABEL $label$3
	CALL $192((($6 + [128]) + [16]))
	(unreachable)
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $147(*($1), ($4 + [16]))
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $164(*($1), ($4 + [16]))
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($4 + [16])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$3 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

void .FUNC $66 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $63($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $127(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = (int_64)0
	*($2 + [8]) = [0]
	$3 = (*(($1 + [12])) - *($1 + [8]))
	$4 = ((int_32)$3 / (int_32)[40])
	$5 = *($1)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*(($2 + [8])) = ($3 + ((int_32)$4 * (int_32)[40]))
	*($2) = $3
	*($2 + [4]) = $3
	$4 = *(($1 + [8]))
	$1 = (*(($1 + [12])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($3, $4, $1)
	*($2 + [4]) = ($3 + ((int_32)((uint_32)$1 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$2
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($0) + $1))
	
.LABEL $label$3
	CALL void $0((int_32 $5), (int_64 $2), (int_32 $1))
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$4 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $192($2)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10722])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$9 = *($1)
	$8 = *($1 + [4])
	$7 = ((int_32)($8 - $9) / (int_32)[40])
	if ( ((uint_32)$7 >= (uint_32)$2) ){ goto $label$5 }
	CALL $150($1, ($2 - $7))
	$8 = *(($1 + [4]))
	$9 = *($1)
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$7 <= (uint_32)$2) ){ goto $label$6 }
	$8 = ($9 + ((int_32)$2 * (int_32)[40]))
	*(($1 + [4])) = $8
	
.LABEL $label$6
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = ($0 + [4])
	$2 = *($4)
	$1 = ($0 + [8])
	
.LOOP $label$7:
	$3 = (int_64)0
	$5 = [0]
	
.LOOP $label$8:
	if ( ($2 <= *($1)) ){ goto $label$9 }
	CALL eosio_assert([0], [10722])
	$2 = *($4)
	
.LABEL $label$9
	$7 = *($2)
	$6 = ($2 + [1])
	*($4) = $6
	$2 = ($5 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$5 = ($2 + [7])
	$2 = $6
	if ( ($7 & [128]) ){ goto $label$8 }
	*($9) = $3
	$2 = ($9 + [4])
	if ( ((uint_32)(*($1) - $6) > (uint_32)[32]) ){ goto $label$10 }
	CALL eosio_assert([0], [10717])
	$6 = *($4)
	
.LABEL $label$10
	CALL memcpy($2, $6, [33])
	$2 = (*($4) + [33])
	*($4) = $2
	$9 = ($9 + [40])
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $192($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $62 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_64 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_64 $29
	int_64 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_32 $44
	int_32 $45
	int_32 $46
	int_64 $47
	$5 = ($global$0 - [880])
	$global$0 = $5
	$6 = ((int_64)$2 & (int_64)-4294967296)
	if ( ($4 == 0) ){ goto $label$1 }
	*($5 + [832]) = [8306]
	*($5 + [836]) = CALL $201([8306])
	*($5 + [168]) = *($5 + [832])
	$7 = CALL $55(($5 + [840]), ($5 + [168]))
	$8 = [0]
	*(($5 + [272])) = [0]
	*($5 + [256]) = (int_64)-1
	*($5 + [264]) = (int_64)0
	$9 = *($7)
	*($5 + [240]) = $9
	*($5 + [248]) = $1
	$7 = CALL db_find_i64($9, $1, (int_64)5374645266240503808, $6)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $71(($5 + [240]), $7)
	if ( ((int_32)*($8 + [92]) == (int_32)($5 + [240])) ){ goto $label$2 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$2
	CALL eosio_assert(($8 == 0), [9804])
	$10 = *($5 + [264])
	if ( ($10 == 0) ){ goto $label$1 }
	$11 = ($5 + [268])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$4 }
	
.LOOP $label$5:
	$12 = ($12 + [-24])
	$13 = *($12)
	*($12) = [0]
	if ( ($13 == 0) ){ goto $label$6 }
	$14 = *($13 + [80])
	if ( ($14 == 0) ){ goto $label$7 }
	$15 = ($13 + [84])
	$7 = *($15)
	if ( ((int_32)$7 == (int_32)$14) ){ goto $label$9 }
	
.LOOP $label$10:
	$8 = ($7 + [-12])
	$16 = *($8)
	if ( ($16 == 0) ){ goto $label$11 }
	*(($7 + [-8])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$11
	$7 = $8
	if ( ((int_32)$14 != (int_32)$8) ){ goto $label$10 }
	$8 = *(($13 + [80]))
	goto $label$8 
	
.LABEL $label$9
	$8 = $14
	
.LABEL $label$8
	*($15) = $14
	CALL _ZdlPv($8)
	
.LABEL $label$7
	CALL _ZdlPv($13)
	
.LABEL $label$6
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$5 }
	$8 = *(($5 + [264]))
	goto $label$3 
	
.LABEL $label$4
	$8 = $10
	
.LABEL $label$3
	*($11) = $10
	CALL _ZdlPv($8)
	
.LABEL $label$1
	$9 = CALL current_time()
	*((($5 + [768]) + [28])) = (int_64)0
	*(($17 = (($5 + [768]) + [44]))) = (int_64)0
	*(($5 + [820])) = (int_64)0
	*($5 + [780]) = [0]
	*($5 + [784]) = [0]
	*($5 + [788 align=4]) = (int_64)0
	*($5 + [804 align=4]) = (int_64)0
	*($5 + [768]) = ((CASTING uint_32)(uint_64 ((uint_64)$9 / (uint_64)(int_64)1000000)) + [60])
	*($5 + [760]) = [0]
	*($5 + [752]) = (int_64)0
	$18 = (($5 + [440]) + [28])
	$13 = ($5 + [297])
	$14 = (($5 + [240]) + [20])
	$10 = (($5 + [240]) + [28])
	$19 = (($5 + [504]) + [16])
	$20 = (($5 + [768]) + [36])
	$21 = (($5 + [712]) + [8])
	$12 = (($5 + [712]) + [24])
	$22 = (($5 + [712]) + [32])
	$23 = (($5 + [240]) + [56])
	$24 = ($5 + [304])
	$25 = (int_64)1
	$26 = [0]
	
.LOOP $label$15:
	*($5 + [696]) = [8306]
	*($5 + [700]) = CALL $201([8306])
	*($5 + [160]) = *($5 + [696])
	CALL $55(($5 + [704]), ($5 + [160]))
	*($21) = $1
	*((($5 + [712]) + [16])) = (int_64)-1
	*($12) = (int_64)0
	*($22) = [0]
	$9 = *($5 + [704])
	*($5 + [712]) = $9
	$8 = CALL db_find_i64($9, $1, (int_64)-9026177492230078464, $25)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$16 }
	$8 = CALL $56(($5 + [712]), $8)
	if ( ((int_32)*($8 + [64]) == (int_32)($5 + [712])) ){ goto $label$17 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$17
	*(($27 = (($5 + [608]) + [8]))) = (int_64)0
	*(($7 = (($5 + [608]) + [16]))) = (int_64)0
	*(($15 = (($5 + [608]) + [24]))) = (int_64)0
	*(($28 = (($5 + [608]) + [32]))) = (int_64)0
	*($5 + [608]) = (int_64)0
	*(($11 = (($5 + [592]) + [8]))) = [0]
	*($5 + [592]) = (int_64)0
	*($5 + [584]) = [8874]
	*($5 + [588]) = CALL $201([8874])
	*($5 + [152]) = *($5 + [584])
	CALL $55(($5 + [240]), ($5 + [152]))
	if ( ((int_64)*($5 + [240]) != (int_64)$2) ){ goto $label$26 }
	CALL eosio_assert(($26 <= ((int_32)(*(($3 + [4])) - *($3)) / (int_32)[40])), [9938])
	$8 = (*($3) + ((int_32)$26 * (int_32)[40]))
	*(($16 = (($5 + [440]) + [32]))) = *(($8 + [36]))
	$9 = *(($8 + [12]))
	*((($5 + [440]) + [8])) = $9
	$29 = *(($8 + [20]))
	*((($5 + [440]) + [16])) = $29
	$30 = *(($8 + [28]))
	*((($5 + [440]) + [24])) = $30
	*(($31 = (($5 + [656]) + [8]))) = $9
	*(($32 = (($5 + [656]) + [16]))) = $29
	*(($33 = (($5 + [656]) + [24]))) = $30
	*(($34 = (($5 + [656]) + [32]))) = *($16)
	$9 = *($8 + [4 align=4])
	*($5 + [440]) = $9
	*($5 + [656]) = $9
	$8 = *($8)
	*(($35 = (($5 + [240]) + [8]))) = $25
	*(($16 = (($5 + [240]) + [16]))) = $8
	*($23) = [0]
	*($14) = *($5 + [656])
	*(($14 + [8])) = *($31)
	*(($14 + [16])) = *($32)
	*(($14 + [24])) = *($33)
	*(($14 + [32])) = *($34)
	*($13) = *($5 + [648])
	*(($13 + [4])) = *((($5 + [648]) + [4]))
	*(($13 + [6])) = *((($5 + [648]) + [6]))
	*($5 + [240]) = $1
	*($24) = (int_64)0
	*(($31 = (($5 + [848]) + [8]))) = [0]
	*($5 + [848]) = (int_64)0
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = [58]
	
.LOOP $label$27:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$27 }
	CALL $63(($5 + [848]), $8)
	$8 = *($5 + [848])
	*(($32 = (($5 + [504]) + [8]))) = *($5 + [852])
	*($5 + [508]) = $8
	*($5 + [504]) = $8
	*($5 + [872]) = ($5 + [504])
	*($5 + [496]) = ($5 + [240])
	CALL $64(($5 + [496]), ($5 + [872]))
	$8 = *($5 + [592])
	if ( ($8 == 0) ){ goto $label$28 }
	*($5 + [596]) = $8
	CALL _ZdlPv($8)
	*($11) = [0]
	*($5 + [592]) = (int_64)0
	
.LABEL $label$28
	*($11) = *($31)
	*($5 + [592]) = *($5 + [848])
	$9 = *($0)
	*($5 + [568]) = [8385]
	*($5 + [572]) = CALL $201([8385])
	*($5 + [120]) = *($5 + [568])
	CALL $55(($5 + [576]), ($5 + [120]))
	*($5 + [552]) = [8306]
	$29 = *($5 + [576])
	*($5 + [556]) = CALL $201([8306])
	*($5 + [112]) = *($5 + [552])
	CALL $55(($5 + [560]), ($5 + [112]))
	*($5 + [536]) = [8897]
	*($5 + [540]) = CALL $201([8897])
	*($5 + [104]) = *($5 + [536])
	CALL $55(($5 + [544]), ($5 + [104]))
	*($5 + [488]) = [8908]
	*($5 + [492]) = CALL $201([8908])
	*($5 + [96]) = *($5 + [488])
	CALL $55(($5 + [496]), ($5 + [96]))
	*($19) = (int_64)0
	*(($33 = (($5 + [504]) + [24]))) = [0]
	*($32) = *($5 + [496])
	*($5 + [504]) = $1
	$8 = (*($5 + [596]) - *($5 + [592]))
	if ( ($8 == 0) ){ goto $label$29 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$14 }
	$11 = CALL _Znwj($8)
	*($19) = $11
	*(($32 = (($5 + [504]) + [20]))) = $11
	*($33) = ($11 + $8)
	$33 = *($5 + [592])
	$8 = (*($5 + [596]) - $33)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$29 }
	CALL memcpy($11, $33, $8)
	*($32) = (*($32) + $8)
	
.LABEL $label$29
	$26 = ($26 + [1])
	*($35) = *($5 + [544])
	*($16) = (int_64)0
	*(($11 = (($5 + [240]) + [24]))) = [0]
	*($5 + [240]) = *($5 + [560])
	$8 = CALL _Znwj([16])
	*($16) = $8
	*($8) = $9
	*($8 + [8]) = $29
	*($10) = (int_64)0
	*(($32 = (($5 + [240]) + [36]))) = [0]
	$8 = ($8 + [16])
	*($11) = $8
	*($14) = $8
	$34 = *($19)
	$36 = (($5 + [504]) + [20])
	$33 = *($36)
	$8 = (($33 + [16]) - $34)
	$9 = (CASTING uint_64)(uint_32 ($33 - $34))
	
.LOOP $label$30:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$30 }
	if ( ($8 == 0) ){ goto $label$25 }
	CALL $63($10, $8)
	$33 = *((($5 + [240]) + [32]))
	$8 = *($10)
	goto $label$24 
	
.LABEL $label$26
	*($5 + [480]) = [8919]
	*($5 + [484]) = CALL $201([8919])
	*($5 + [144]) = *($5 + [480])
	CALL $55(($5 + [240]), ($5 + [144]))
	if ( ((int_64)*($5 + [240]) != (int_64)$2) ){ goto $label$31 }
	*(($35 = (($5 + [656]) + [8]))) = *(($8 + [20]))
	*(($31 = (($5 + [656]) + [16]))) = *(($8 + [28]))
	*(($32 = (($5 + [656]) + [24]))) = *(($8 + [36]))
	*(($33 = (($5 + [656]) + [32]))) = *(($8 + [44]))
	*(($34 = (($5 + [648]) + [4]))) = *(($8 + [53]))
	*(($36 = (($5 + [648]) + [6]))) = *(($8 + [55]))
	*($5 + [648]) = *($8 + [49 align=1])
	*($5 + [656]) = *(($8 + [12]))
	if ( (*(($8 + [48])) == 0) ){ goto $label$20 }
	$16 = *($8 + [8])
	$29 = *(($8 + [56]))
	*(($37 = (($5 + [240]) + [8]))) = $25
	*(($38 = (($5 + [240]) + [16]))) = $16
	*($23) = [0]
	*($14) = *($5 + [656])
	*(($39 = ($14 + [8]))) = *($35)
	*(($40 = ($14 + [16]))) = *($31)
	*(($41 = ($14 + [24]))) = *($32)
	*(($42 = ($14 + [32]))) = *($33)
	*($13) = *($5 + [648])
	*(($43 = ($13 + [4]))) = *($34)
	*(($44 = ($13 + [6]))) = *($36)
	*($5 + [240]) = $1
	*($24) = $29
	*(($45 = (($5 + [504]) + [8]))) = [0]
	*($5 + [504]) = (int_64)0
	$9 = (CASTING uint_64)(uint_32 $16)
	$8 = [58]
	
.LOOP $label$32:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$32 }
	CALL $63(($5 + [504]), $8)
	$8 = *($5 + [504])
	*(($46 = (($5 + [440]) + [8]))) = *($5 + [508])
	*($5 + [444]) = $8
	*($5 + [440]) = $8
	*($5 + [496]) = ($5 + [440])
	*($5 + [848]) = ($5 + [240])
	CALL $64(($5 + [848]), ($5 + [496]))
	$8 = *($5 + [592])
	if ( ($8 == 0) ){ goto $label$33 }
	*($5 + [596]) = $8
	CALL _ZdlPv($8)
	*($11) = [0]
	*($5 + [592]) = (int_64)0
	
.LABEL $label$33
	*($11) = *($45)
	*($5 + [592]) = *($5 + [504])
	$9 = *($0)
	*($5 + [424]) = [8385]
	*($5 + [428]) = CALL $201([8385])
	*($5 + [136]) = *($5 + [424])
	CALL $55(($5 + [432]), ($5 + [136]))
	$30 = *($0)
	*($5 + [408]) = [9036]
	$47 = *($5 + [432])
	*($5 + [412]) = CALL $201([9036])
	*($5 + [128]) = *($5 + [408])
	CALL $55(($5 + [416]), ($5 + [128]))
	*($37) = $25
	*($38) = $16
	*($23) = [0]
	*($14) = *($5 + [656])
	*($39) = *($35)
	*($40) = *($31)
	*($41) = *($32)
	*($42) = *($33)
	*($13) = *($5 + [648])
	*($43) = *($34)
	*($44) = *($36)
	*($5 + [240]) = $1
	*($24) = $29
	*(($16 = (($5 + [440]) + [16]))) = (int_64)0
	*(($11 = (($5 + [440]) + [24]))) = [0]
	*($46) = *($5 + [416])
	*($5 + [440]) = $30
	$8 = CALL _Znwj([16])
	*($16) = $8
	*($8) = $9
	*($8 + [8]) = $47
	*($18) = (int_64)0
	*(($35 = (($5 + [440]) + [36]))) = [0]
	$8 = ($8 + [16])
	*($11) = $8
	*(($31 = (($5 + [440]) + [20]))) = $8
	$9 = *($38)
	$8 = [58]
	
.LOOP $label$34:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$34 }
	CALL $63($18, $8)
	$8 = *($18)
	*($45) = *((($5 + [440]) + [32]))
	*($5 + [508]) = $8
	*($5 + [504]) = $8
	*($5 + [496]) = ($5 + [504])
	*($5 + [848]) = ($5 + [240])
	CALL $64(($5 + [848]), ($5 + [496]))
	*($27) = *($46)
	*($5 + [608]) = *($5 + [440])
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$35 }
	*((($5 + [608]) + [20])) = $8
	CALL _ZdlPv($8)
	*($15) = [0]
	*($7) = (int_64)0
	
.LABEL $label$35
	*($7) = *($16)
	$8 = *($11)
	*($11) = [0]
	*($15) = $8
	*($16) = (int_64)0
	$8 = (($5 + [608]) + [28])
	$15 = *($8)
	if ( ($15 == 0) ){ goto $label$36 }
	*($28) = $15
	CALL _ZdlPv($15)
	*((($5 + [608]) + [36])) = [0]
	*($8) = (int_64)0
	
.LABEL $label$36
	*($8) = *($18)
	$8 = *($35)
	*($35) = [0]
	*((($5 + [608]) + [36])) = $8
	*($18) = (int_64)0
	$8 = *($16)
	if ( ($8 == 0) ){ goto $label$23 }
	*($31) = $8
	CALL _ZdlPv($8)
	if ( $4 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$31
	CALL eosio_assert([0], [9975])
	if ( $4 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$25
	$33 = [0]
	$8 = [0]
	
.LABEL $label$24
	*($31) = $33
	*($5 + [852]) = $8
	*($5 + [848]) = $8
	*($5 + [864]) = ($5 + [848])
	*($5 + [872]) = ($5 + [504])
	CALL $65(($5 + [872]), ($5 + [864]))
	*($27) = *($35)
	*($5 + [608]) = *($5 + [240])
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$37 }
	*((($5 + [608]) + [20])) = $8
	CALL _ZdlPv($8)
	*($15) = [0]
	*($7) = (int_64)0
	
.LABEL $label$37
	*($7) = *($16)
	$8 = *($11)
	*($11) = [0]
	*($15) = $8
	*($16) = (int_64)0
	$8 = (($5 + [608]) + [28])
	$15 = *($8)
	if ( ($15 == 0) ){ goto $label$38 }
	*($28) = $15
	CALL _ZdlPv($15)
	*((($5 + [608]) + [36])) = [0]
	*($8) = (int_64)0
	
.LABEL $label$38
	*($8) = *($10)
	$8 = *($32)
	*($32) = [0]
	*((($5 + [608]) + [36])) = $8
	*($10) = (int_64)0
	$8 = *($16)
	if ( ($8 == 0) ){ goto $label$39 }
	*($14) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$39
	$8 = *($19)
	if ( ($8 == 0) ){ goto $label$23 }
	*($36) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$23
	if ( ($4 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	$8 = (($5 + [768]) + [40])
	$16 = *($8)
	if ( ((int_32)$16 != (int_32)*($17)) ){ goto $label$41 }
	CALL $136($20, ($5 + [608]))
	goto $label$40 
	
.LABEL $label$41
	CALL $135($16, ($5 + [608]))
	*($8) = (*($8) + [40])
	
.LABEL $label$40
	$8 = *($5 + [756])
	if ( ((int_32)$8 == (int_32)*((($5 + [752]) + [8]))) ){ goto $label$42 }
	*($8) = (int_64)0
	*($8 + [8]) = [0]
	$16 = (*($5 + [596]) - *($5 + [592]))
	if ( ($16 == 0) ){ goto $label$43 }
	if ( ((int_32)$16 <= (int_32)[-1]) ){ goto $label$13 }
	$15 = CALL _Znwj($16)
	*($8) = $15
	*(($8 + [8])) = ($15 + $16)
	*(($8 = ($8 + [4]))) = $15
	$11 = *($5 + [592])
	$16 = (*($5 + [596]) - $11)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$43 }
	CALL memcpy($15, $11, $16)
	*($8) = (*($8) + $16)
	
.LABEL $label$43
	*($5 + [756]) = (*($5 + [756]) + [12])
	$8 = *($5 + [592])
	if ( $8 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$42
	CALL $138(($5 + [752]), ($5 + [592]))
	$8 = *($5 + [592])
	if ( $8 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	CALL $66(($5 + [608]))
	
.LABEL $label$20
	$8 = *($5 + [592])
	if ( ($8 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	*($5 + [596]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$18
	$8 = *((($5 + [608]) + [28]))
	if ( ($8 == 0) ){ goto $label$44 }
	*($28) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$44
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$16 }
	*((($5 + [608]) + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$16
	$16 = *($12)
	if ( ($16 == 0) ){ goto $label$45 }
	$15 = (($5 + [712]) + [28])
	$8 = *($15)
	if ( ((int_32)$8 == (int_32)$16) ){ goto $label$47 }
	
.LOOP $label$48:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$49 }
	CALL _ZdlPv($7)
	
.LABEL $label$49
	if ( ((int_32)$16 != (int_32)$8) ){ goto $label$48 }
	$8 = *($12)
	goto $label$46 
	
.LABEL $label$47
	$8 = $16
	
.LABEL $label$46
	*($15) = $16
	CALL _ZdlPv($8)
	
.LABEL $label$45
	$25 = ((int_64)$25 + (int_64)1)
	if ( (uint_64)($25 <= (int_64)6) ){ goto $label$15 }
	if ( ($4 == 0) ){ goto $label$50 }
	CALL eosio_assert(((int_32)*($5 + [756]) != (int_32)*($5 + [752])), [9991])
	$9 = *($0)
	*($5 + [392]) = [8385]
	*($5 + [396]) = CALL $201([8385])
	*($5 + [88]) = *($5 + [392])
	$25 = *(CALL $55(($5 + [400]), ($5 + [88])))
	$29 = *($0)
	*($5 + [376]) = [9836]
	*($5 + [380]) = CALL $201([9836])
	*($5 + [80]) = *($5 + [376])
	$8 = CALL $55(($5 + [384]), ($5 + [80]))
	*(($7 = (($5 + [712]) + [24]))) = [0]
	*($5 + [248]) = $2
	*($5 + [240]) = $1
	*($5 + [256]) = (int_64)0
	*($5 + [712]) = $29
	*($5 + [728]) = (int_64)0
	*($5 + [720]) = *($8)
	*(($8 = CALL _Znwj([16]))) = $9
	*($8 + [8]) = $25
	*(($5 + [748])) = [0]
	$16 = ($8 + [16])
	*($7) = $16
	*(($5 + [732])) = $16
	*($5 + [728]) = $8
	*($5 + [740 align=4]) = (int_64)0
	CALL $63(($5 + [740]), [24])
	$8 = *(($5 + [744]))
	$7 = *($5 + [740])
	*($5 + [612]) = $7
	*($5 + [608]) = $7
	*($5 + [616]) = $8
	*($5 + [656]) = ($5 + [608])
	*($5 + [440]) = ($5 + [240])
	CALL $74(($5 + [440]), ($5 + [656]))
	$8 = (($5 + [768]) + [40])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)*(($5 + [812]))) ){ goto $label$52 }
	CALL $135($7, ($5 + [712]))
	*($8) = (*($8) + [40])
	goto $label$51 
	
.LABEL $label$52
	CALL $136($20, ($5 + [712]))
	
.LABEL $label$51
	*($5 + [368]) = [8874]
	*($5 + [372]) = CALL $201([8874])
	*($5 + [72]) = *($5 + [368])
	if ( ((int_64)*(CALL $55(($5 + [240]), ($5 + [72]))) != (int_64)$2) ){ goto $label$54 }
	*($5 + [360]) = [8908]
	*($5 + [364]) = CALL $201([8908])
	*($5 + [48]) = *($5 + [360])
	CALL $55(($5 + [240]), ($5 + [48]))
	goto $label$53 
	
.LABEL $label$54
	*($5 + [352]) = [8919]
	*($5 + [356]) = CALL $201([8919])
	*($5 + [64]) = *($5 + [352])
	if ( ((int_64)*(CALL $55(($5 + [240]), ($5 + [64]))) != (int_64)$2) ){ goto $label$55 }
	*($5 + [344]) = [9036]
	*($5 + [348]) = CALL $201([9036])
	*($5 + [56]) = *($5 + [344])
	CALL $55(($5 + [240]), ($5 + [56]))
	goto $label$53 
	
.LABEL $label$55
	CALL eosio_assert([0], [9975])
	
.LABEL $label$53
	*(($5 + [788])) = [604800]
	*($5 + [664]) = $1
	*($5 + [656]) = $6
	CALL $137(($5 + [768]), ($5 + [656]), *($0), [0])
	CALL $139(($5 + [608]), $5)
	*($5 + [232]) = [8908]
	*($5 + [236]) = CALL $201([8908])
	*($5 + [40]) = *($5 + [232])
	$8 = CALL $55(($5 + [504]), ($5 + [40]))
	*(($5 + [296])) = *($5 + [616])
	*(($5 + [304])) = *(($5 + [624]))
	*(($5 + [312])) = *(($5 + [632]))
	*($5 + [248]) = $2
	*($5 + [240]) = $1
	*($5 + [256]) = (int_64)0
	*($5 + [264]) = [604800]
	*($5 + [272]) = *($8)
	*($5 + [288]) = *($5 + [608])
	$8 = CALL $72(($5 + [320]), ($5 + [752]))
	*($5 + [856]) = [0]
	*($5 + [848]) = (int_64)0
	$7 = *($8)
	$12 = *(($5 + [324]))
	$9 = (CASTING uint_64)(uint_32 ((int_32)($12 - $7) / (int_32)[12]))
	$8 = [68]
	
.LOOP $label$56:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$56 }
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$59 }
	
.LOOP $label$60:
	$14 = *($7)
	$16 = *($7 + [4])
	$8 = (($8 + $16) - $14)
	$9 = (CASTING uint_64)(uint_32 ($16 - $14))
	
.LOOP $label$61:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$61 }
	$7 = ($7 + [12])
	if ( ((int_32)$7 != (int_32)$12) ){ goto $label$60 }
	if ( ($8 == 0) ){ goto $label$58 }
	
.LABEL $label$59
	CALL $63(($5 + [848]), $8)
	$7 = *($5 + [852])
	$8 = *($5 + [848])
	goto $label$57 
	
.LABEL $label$58
	$7 = [0]
	$8 = [0]
	
.LABEL $label$57
	*($5 + [444]) = $8
	*($5 + [440]) = $8
	*($5 + [448]) = $7
	*($5 + [496]) = ($5 + [440])
	*($5 + [592]) = ($5 + [240])
	CALL $140(($5 + [592]), ($5 + [496]))
	$14 = *($5 + [320])
	if ( ($14 == 0) ){ goto $label$62 }
	$12 = ($5 + [324])
	$7 = *($12)
	if ( ((int_32)$7 == (int_32)$14) ){ goto $label$64 }
	
.LOOP $label$65:
	$8 = ($7 + [-12])
	$16 = *($8)
	if ( ($16 == 0) ){ goto $label$66 }
	*(($7 + [-8])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$66
	$7 = $8
	if ( ((int_32)$14 != (int_32)$8) ){ goto $label$65 }
	$8 = *(($5 + [320]))
	goto $label$63 
	
.LABEL $label$64
	$8 = $14
	
.LABEL $label$63
	*($12) = $14
	CALL _ZdlPv($8)
	
.LABEL $label$62
	$9 = *($0)
	*($5 + [216]) = [8385]
	*($5 + [220]) = CALL $201([8385])
	*($5 + [32]) = *($5 + [216])
	$25 = *(CALL $55(($5 + [224]), ($5 + [32])))
	*($5 + [200]) = [8306]
	*($5 + [204]) = CALL $201([8306])
	*($5 + [24]) = *($5 + [200])
	$16 = CALL $55(($5 + [208]), ($5 + [24]))
	*($5 + [184]) = [8897]
	*($5 + [188]) = CALL $201([8897])
	*($5 + [16]) = *($5 + [184])
	$14 = CALL $55(($5 + [192]), ($5 + [16]))
	*($5 + [176]) = [9864]
	*($5 + [180]) = CALL $201([9864])
	*($5 + [8]) = *($5 + [176])
	$8 = CALL $55(($5 + [592]), ($5 + [8]))
	*((($5 + [440]) + [24])) = [0]
	*($5 + [440]) = $1
	*($5 + [456]) = (int_64)0
	*($5 + [448]) = *($8)
	$8 = (*($5 + [852]) - *($5 + [848]))
	if ( ($8 == 0) ){ goto $label$67 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL _Znwj($8)
	*(($5 + [456])) = $7
	*(($12 = ($5 + [460]))) = $7
	*(($5 + [464])) = ($7 + $8)
	$13 = *($5 + [848])
	$8 = (*($5 + [852]) - $13)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$67 }
	CALL memcpy($7, $13, $8)
	*($12) = (*($12) + $8)
	
.LABEL $label$67
	*($5 + [240]) = *($16)
	*($5 + [248]) = *($14)
	*(($8 = CALL _Znwj([16]))) = $9
	*($8 + [8]) = $25
	*(($5 + [276])) = [0]
	$7 = ($8 + [16])
	*((($5 + [240]) + [24])) = $7
	*((($5 + [240]) + [20])) = $7
	*($5 + [256]) = $8
	*($5 + [268 align=4]) = (int_64)0
	$16 = *($5 + [456])
	$7 = *((($5 + [440]) + [20]))
	$8 = (($7 + [16]) - $16)
	$9 = (CASTING uint_64)(uint_32 ($7 - $16))
	$7 = ($5 + [268])
	
.LOOP $label$68:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$68 }
	if ( ($8 == 0) ){ goto $label$70 }
	CALL $63($7, $8)
	$7 = *(($5 + [272]))
	$8 = *(($5 + [268]))
	goto $label$69 
	
.LABEL $label$70
	$7 = [0]
	$8 = [0]
	
.LABEL $label$69
	*($5 + [508]) = $8
	*($5 + [504]) = $8
	*($5 + [512]) = $7
	*($5 + [648]) = ($5 + [504])
	*($5 + [496]) = ($5 + [440])
	CALL $65(($5 + [496]), ($5 + [648]))
	CALL $66(($5 + [240]))
	$8 = *($5 + [268])
	if ( ($8 == 0) ){ goto $label$71 }
	*(($5 + [272])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$71
	$8 = *($5 + [256])
	if ( ($8 == 0) ){ goto $label$72 }
	*(($5 + [260])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$72
	$8 = *($5 + [456])
	if ( ($8 == 0) ){ goto $label$73 }
	*(($5 + [460])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$73
	$8 = *($5 + [848])
	if ( ($8 == 0) ){ goto $label$74 }
	*($5 + [852]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$74
	$8 = *($5 + [740])
	if ( ($8 == 0) ){ goto $label$75 }
	*(($5 + [744])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$75
	$8 = *($5 + [728])
	if ( ($8 == 0) ){ goto $label$50 }
	*(($5 + [732])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$50
	$14 = *($5 + [752])
	if ( ($14 == 0) ){ goto $label$76 }
	$7 = *($5 + [756])
	if ( ((int_32)$7 == (int_32)$14) ){ goto $label$78 }
	
.LOOP $label$79:
	$8 = ($7 + [-12])
	$16 = *($8)
	if ( ($16 == 0) ){ goto $label$80 }
	*(($7 + [-8])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$80
	$7 = $8
	if ( ((int_32)$14 != (int_32)$8) ){ goto $label$79 }
	$8 = *($5 + [752])
	goto $label$77 
	
.LABEL $label$78
	$8 = $14
	
.LABEL $label$77
	*($5 + [756]) = $14
	CALL _ZdlPv($8)
	
.LABEL $label$76
	CALL $75(($5 + [768]))
	$global$0 = ($5 + [880])
	return (unreachable)
	
.LABEL $label$14
	CALL $192($19)
	
.LABEL $label$13
	CALL $192($8)
	
.LABEL $label$12
	CALL $192((($5 + [440]) + [16]))
	(unreachable)
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [496])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)3626324442490077183) ){ goto $label$31 }
	if ( ((int_64)$2 > (int_64)4852992390995116031) ){ goto $label$30 }
	if ( ((int_64)$2 > (int_64)4730614997374550015) ){ goto $label$28 }
	if ( ((int_64)$2 > (int_64)3849304916526705151) ){ goto $label$24 }
	if ( ((int_64)$2 == (int_64)3626324442490077184) ){ goto $label$17 }
	if ( ((int_64)$2 != (int_64)3626397281305837568) ){ goto $label$1 }
	*($3 + [284]) = [0]
	*($3 + [280]) = [1]
	*($3 + [208]) = *($3 + [280])
	CALL $3($1, $1, ($3 + [208]))
	goto $label$1 
	
.LABEL $label$31
	if ( ((int_64)$2 <= (int_64)-4420682256544982657) ){ goto $label$29 }
	if ( ((int_64)$2 > (int_64)-4420674009723672817) ){ goto $label$27 }
	if ( ((int_64)$2 > (int_64)-4420679617942336241) ){ goto $label$23 }
	if ( ((int_64)$2 == (int_64)-4420682256544982656) ){ goto $label$16 }
	if ( ((int_64)$2 != (int_64)-4420681645166899952) ){ goto $label$1 }
	*($3 + [412]) = [0]
	*($3 + [408]) = [2]
	*($3 + [80]) = *($3 + [408])
	CALL $5($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$30
	if ( ((int_64)$2 > (int_64)5377987495347093503) ){ goto $label$26 }
	if ( ((int_64)$2 > (int_64)4923678863594618879) ){ goto $label$22 }
	if ( ((int_64)$2 == (int_64)4852992390995116032) ){ goto $label$15 }
	if ( ((int_64)$2 != (int_64)4923678650294861824) ){ goto $label$1 }
	*($3 + [404]) = [0]
	*($3 + [400]) = [3]
	*($3 + [88]) = *($3 + [400])
	CALL $7($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$29
	if ( ((int_64)$2 <= (int_64)-5915097261842366465) ){ goto $label$25 }
	if ( ((int_64)$2 > (int_64)-4849915395346792449) ){ goto $label$21 }
	if ( ((int_64)$2 == (int_64)-5915097261842366464) ){ goto $label$14 }
	if ( ((int_64)$2 != (int_64)-4849915446028664832) ){ goto $label$1 }
	*($3 + [268]) = [0]
	*($3 + [264]) = [4]
	*($3 + [224]) = *($3 + [264])
	CALL $9($1, $1, ($3 + [224]))
	goto $label$1 
	
.LABEL $label$28
	if ( ((int_64)$2 > (int_64)4852739417421381631) ){ goto $label$20 }
	if ( ((int_64)$2 == (int_64)4730614997374550016) ){ goto $label$13 }
	if ( ((int_64)$2 != (int_64)4730614999611867136) ){ goto $label$1 }
	*($3 + [428]) = [0]
	*($3 + [424]) = [5]
	*($3 + [64]) = *($3 + [424])
	CALL $7($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$27
	if ( ((int_64)$2 > (int_64)-3109888186206126081) ){ goto $label$19 }
	if ( ((int_64)$2 == (int_64)-4420674009723672816) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)-4138919895035805696) ){ goto $label$1 }
	*($3 + [292]) = [0]
	*($3 + [288]) = [6]
	*($3 + [200]) = *($3 + [288])
	CALL $12($1, $1, ($3 + [200]))
	goto $label$1 
	
.LABEL $label$26
	if ( ((int_64)$2 > (int_64)6761222076679323647) ){ goto $label$18 }
	if ( ((int_64)$2 == (int_64)5377987495347093504) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)6292810045713099264) ){ goto $label$1 }
	*($3 + [316]) = [0]
	*($3 + [312]) = [7]
	*($3 + [176]) = *($3 + [312])
	CALL $14($1, $1, ($3 + [176]))
	goto $label$1 
	
.LABEL $label$25
	if ( ((int_64)$2 == (int_64)-8966380257431137136) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-7954134489490784256) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-7901691861026209792) ){ goto $label$1 }
	*($3 + [260]) = [0]
	*($3 + [256]) = [8]
	*($3 + [232]) = *($3 + [256])
	CALL $16($1, $1, ($3 + [232]))
	goto $label$1 
	
.LABEL $label$24
	if ( ((int_64)$2 == (int_64)3849304916526705152) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)4335660026808139776) ){ goto $label$1 }
	*($3 + [332]) = [0]
	*($3 + [328]) = [9]
	*($3 + [160]) = *($3 + [328])
	CALL $18($1, $1, ($3 + [160]))
	goto $label$1 
	
.LABEL $label$23
	if ( ((int_64)$2 == (int_64)-4420679617942336240) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-4420674009785538800) ){ goto $label$1 }
	*($3 + [356]) = [0]
	*($3 + [352]) = [10]
	*($3 + [136]) = *($3 + [352])
	CALL $5($1, $1, ($3 + [136]))
	goto $label$1 
	
.LABEL $label$22
	if ( ((int_64)$2 == (int_64)4923678863594618880) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)5374951249011004416) ){ goto $label$1 }
	*($3 + [252]) = [0]
	*($3 + [248]) = [11]
	*($3 + [240]) = *($3 + [248])
	CALL $21($1, $1, ($3 + [240]))
	goto $label$1 
	
.LABEL $label$21
	if ( ((int_64)$2 == (int_64)-4849915395346792448) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4420683143077150720) ){ goto $label$1 }
	*($3 + [380]) = [0]
	*($3 + [376]) = [12]
	*($3 + [112]) = *($3 + [376])
	CALL $5($1, $1, ($3 + [112]))
	goto $label$1 
	
.LABEL $label$20
	if ( ((int_64)$2 == (int_64)4852739417421381632) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)4852743800616654304) ){ goto $label$1 }
	*($3 + [476]) = [0]
	*($3 + [472]) = [13]
	*($3 + [16]) = *($3 + [472])
	CALL $24($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$19
	if ( ((int_64)$2 == (int_64)-3109888186206126080) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)3626087240299970560) ){ goto $label$1 }
	*($3 + [444]) = [0]
	*($3 + [440]) = [14]
	*($3 + [48]) = *($3 + [440])
	CALL $26($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$18
	if ( ((int_64)$2 == (int_64)6761222076679323648) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)8421058852606325248) ){ goto $label$1 }
	*($3 + [308]) = [0]
	*($3 + [304]) = [15]
	*($3 + [184]) = *($3 + [304])
	CALL $28($1, $1, ($3 + [184]))
	goto $label$1 
	
.LABEL $label$17
	*($3 + [468]) = [0]
	*($3 + [464]) = [16]
	*($3 + [24]) = *($3 + [464])
	CALL $30($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$16
	*($3 + [372]) = [0]
	*($3 + [368]) = [17]
	*($3 + [120]) = *($3 + [368])
	CALL $32($1, $1, ($3 + [120]))
	goto $label$1 
	
.LABEL $label$15
	*($3 + [484]) = [0]
	*($3 + [480]) = [18]
	*($3 + [8]) = *($3 + [480])
	CALL $30($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$14
	*($3 + [340]) = [0]
	*($3 + [336]) = [19]
	*($3 + [152]) = *($3 + [336])
	CALL $35($1, $1, ($3 + [152]))
	goto $label$1 
	
.LABEL $label$13
	*($3 + [324]) = [0]
	*($3 + [320]) = [20]
	*($3 + [168]) = *($3 + [320])
	CALL $9($1, $1, ($3 + [168]))
	goto $label$1 
	
.LABEL $label$12
	*($3 + [364]) = [0]
	*($3 + [360]) = [21]
	*($3 + [128]) = *($3 + [360])
	CALL $38($1, $1, ($3 + [128]))
	goto $label$1 
	
.LABEL $label$11
	*($3 + [436]) = [0]
	*($3 + [432]) = [22]
	*($3 + [56]) = *($3 + [432])
	CALL $40($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [420]) = [0]
	*($3 + [416]) = [23]
	*($3 + [72]) = *($3 + [416])
	CALL $7($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [300]) = [0]
	*($3 + [296]) = [24]
	*($3 + [192]) = *($3 + [296])
	CALL $43($1, $1, ($3 + [192]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [348]) = [0]
	*($3 + [344]) = [25]
	*($3 + [144]) = *($3 + [344])
	CALL $45($1, $1, ($3 + [144]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [388]) = [0]
	*($3 + [384]) = [26]
	*($3 + [104]) = *($3 + [384])
	CALL $38($1, $1, ($3 + [104]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [396]) = [0]
	*($3 + [392]) = [27]
	*($3 + [96]) = *($3 + [392])
	CALL $7($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [276]) = [0]
	*($3 + [272]) = [28]
	*($3 + [216]) = *($3 + [272])
	CALL $3($1, $1, ($3 + [216]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [492]) = [0]
	*($3 + [488]) = [29]
	*($3) = *($3 + [488])
	CALL $50($1, $1, $3)
	goto $label$1 
	
.LABEL $label$3
	*($3 + [452]) = [0]
	*($3 + [448]) = [30]
	*($3 + [40]) = *($3 + [448])
	CALL $52($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [460]) = [0]
	*($3 + [456]) = [31]
	*($3 + [32]) = *($3 + [456])
	CALL $52($1, $1, ($3 + [32]))
	
.LABEL $label$1
	CALL $194([0])
	$global$0 = ($3 + [496])
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [272])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	*($2) = *($1)
	*($2 + [12]) = ($4 + [9])
	*($2 + [8]) = ($4 + [8])
	*($2 + [16]) = ($4 + [10])
	*($2 + [20]) = ($4 + [11])
	*($2 + [24]) = ($4 + [12])
	*($2 + [28]) = ($4 + [13])
	*($2 + [32]) = ($4 + [14])
	*($2 + [36]) = ($4 + [15])
	*($2 + [40]) = ($4 + [16])
	*($2 + [44]) = ($4 + [17])
	*($2 + [48]) = ($4 + [18])
	*($2 + [52]) = ($4 + [19])
	*($2 + [56]) = ($4 + [20])
	*($2 + [60]) = ($4 + [21])
	*($2 + [64]) = ($4 + [22])
	*($2 + [68]) = ($4 + [23])
	*($2 + [72]) = ($4 + [24])
	*($2 + [76]) = ($4 + [25])
	*($2 + [80]) = ($4 + [26])
	*($2 + [88]) = ($4 + [28])
	*($2 + [84]) = ($4 + [27])
	*($2 + [92]) = ($4 + [29])
	*($2 + [96]) = ($4 + [30])
	*($2 + [100]) = ($4 + [31])
	*($2 + [104]) = ($4 + [32])
	*($2 + [108]) = ($4 + [33])
	*($2 + [112]) = ($4 + [34])
	*($2 + [116]) = ($4 + [35])
	*($2 + [120]) = ($4 + [36])
	*($2 + [124]) = ($4 + [37])
	*($2 + [128]) = ($4 + [38])
	*($2 + [132]) = ($4 + [39])
	*($2 + [136]) = ($4 + [40])
	*($2 + [140]) = ($4 + [41])
	*($2 + [144]) = ($4 + [42])
	*($2 + [148]) = ($4 + [43])
	*($2 + [152]) = ($4 + [44])
	*($2 + [156]) = ($4 + [45])
	*($2 + [164]) = ($4 + [47])
	*($2 + [160]) = ($4 + [46])
	*($2 + [168]) = ($4 + [48])
	*($2 + [172]) = ($4 + [49])
	*($2 + [176]) = ($4 + [50])
	*($2 + [180]) = ($4 + [51])
	*($2 + [184]) = ($4 + [52])
	*($2 + [188]) = ($4 + [53])
	*($2 + [192]) = ($4 + [54])
	*($2 + [196]) = ($4 + [55])
	*($2 + [200]) = ($4 + [56])
	*($2 + [204]) = ($4 + [57])
	*($2 + [208]) = ($4 + [58])
	*($2 + [212]) = ($4 + [59])
	*($2 + [216]) = ($4 + [60])
	*($2 + [220]) = ($4 + [61])
	*($2 + [224]) = ($4 + [62])
	*($2 + [228]) = ($4 + [63])
	*($2 + [232]) = ($4 + [64])
	*($2 + [240]) = ($4 + [66])
	*($2 + [236]) = ($4 + [65])
	*($2 + [244]) = ($4 + [67])
	*($2 + [248]) = ($4 + [68])
	*($2 + [252]) = ($4 + [69])
	*($2 + [256]) = ($4 + [70])
	*($2 + [260]) = ($4 + [71])
	*($2 + [264]) = ($4 + [72])
	*($2 + [268]) = ($4 + [73])
	CALL $76(($2 + [8]), $2)
	*($2) = *($1)
	*($2 + [12]) = ($4 + [75])
	*($2 + [8]) = ($4 + [74])
	*($2 + [16]) = ($4 + [76])
	*($2 + [20]) = ($4 + [77])
	*($2 + [24]) = ($4 + [78])
	*($2 + [28]) = ($4 + [79])
	*($2 + [32]) = ($4 + [80])
	*($2 + [36]) = ($4 + [81])
	*($2 + [40]) = ($4 + [82])
	*($2 + [44]) = ($4 + [83])
	*($2 + [48]) = ($4 + [84])
	*($2 + [52]) = ($4 + [85])
	*($2 + [56]) = ($4 + [86])
	*($2 + [60]) = ($4 + [87])
	*($2 + [64]) = ($4 + [88])
	*($2 + [68]) = ($4 + [89])
	*($2 + [72]) = ($4 + [90])
	*($2 + [76]) = ($4 + [91])
	*($2 + [80]) = ($4 + [92])
	*($2 + [88]) = ($4 + [94])
	*($2 + [84]) = ($4 + [93])
	*($2 + [92]) = ($4 + [95])
	*($2 + [96]) = ($4 + [96])
	*($2 + [100]) = ($4 + [97])
	*($2 + [104]) = ($4 + [98])
	*($2 + [108]) = ($4 + [99])
	*($2 + [112]) = ($4 + [100])
	*($2 + [116]) = ($4 + [101])
	*($2 + [120]) = ($4 + [102])
	*($2 + [124]) = ($4 + [103])
	*($2 + [128]) = ($4 + [104])
	*($2 + [132]) = ($4 + [105])
	*($2 + [136]) = ($4 + [106])
	*($2 + [140]) = ($4 + [107])
	*($2 + [144]) = ($4 + [108])
	*($2 + [148]) = ($4 + [109])
	*($2 + [152]) = ($4 + [110])
	*($2 + [156]) = ($4 + [111])
	*($2 + [164]) = ($4 + [113])
	*($2 + [160]) = ($4 + [112])
	*($2 + [168]) = ($4 + [114])
	*($2 + [172]) = ($4 + [115])
	*($2 + [176]) = ($4 + [116])
	*($2 + [180]) = ($4 + [117])
	*($2 + [184]) = ($4 + [118])
	*($2 + [188]) = ($4 + [119])
	*($2 + [192]) = ($4 + [120])
	*($2 + [196]) = ($4 + [121])
	*($2 + [200]) = ($4 + [122])
	*($2 + [204]) = ($4 + [123])
	*($2 + [208]) = ($4 + [124])
	*($2 + [212]) = ($4 + [125])
	*($2 + [216]) = ($4 + [126])
	*($2 + [220]) = ($4 + [127])
	*($2 + [224]) = ($4 + [128])
	*($2 + [228]) = ($4 + [129])
	*($2 + [232]) = ($4 + [130])
	*($2 + [240]) = ($4 + [132])
	*($2 + [236]) = ($4 + [131])
	*($2 + [244]) = ($4 + [133])
	*($2 + [248]) = ($4 + [134])
	*($2 + [252]) = ($4 + [135])
	*($2 + [256]) = ($4 + [136])
	*($2 + [260]) = ($4 + [137])
	*($2 + [264]) = ($4 + [138])
	*($2 + [268]) = ($4 + [139])
	CALL $76(($2 + [8]), $2)
	CALL $77(*($1), ($4 + [140]))
	$global$0 = ($2 + [272])
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [16])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $3, [8])
	*(($2 = ($0 + [4]))) = (*($2) + [8])
	return $0
}

int_64 .FUNC $87 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [112])
	$global$0 = $3
	if ( ((int_64)$1 > (int_64)4335660026808139775) ){ goto $label$16 }
	if ( ((int_64)$1 > (int_64)-3109888186206126081) ){ goto $label$15 }
	if ( ((int_64)$1 > (int_64)-4849915446028664833) ){ goto $label$13 }
	if ( ((int_64)$1 == (int_64)-7954134489490784256) ){ goto $label$9 }
	if ( ((int_64)$1 != (int_64)-7901691861026209792) ){ goto $label$1 }
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = [0]
	$4 = *($2 + [4])
	$2 = *($2)
	*($3 + [100]) = $2
	*($3 + [96]) = $2
	*($3 + [104]) = $4
	CALL $93(($3 + [96]), $3)
	$1 = *($3)
	$global$0 = ($3 + [112])
	return $1
	
.LABEL $label$16
	if ( ((int_64)$1 > (int_64)4852992390995116031) ){ goto $label$14 }
	if ( ((int_64)$1 > (int_64)4852739417421381631) ){ goto $label$12 }
	if ( ((int_64)$1 == (int_64)4335660026808139776) ){ goto $label$8 }
	if ( ((int_64)$1 != (int_64)4730614997374550016) ){ goto $label$1 }
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	$2 = *($2)
	$4 = (*($2 + [4]) - $2)
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$17 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$17
	CALL memcpy($3, $2, [8])
	$2 = ($2 + [8])
	$5 = ($3 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$18 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$18
	CALL memcpy($5, $2, [8])
	$1 = *($3)
	$global$0 = ($3 + [112])
	return $1
	
.LABEL $label$15
	if ( ((int_64)$1 > (int_64)3626397281305837567) ){ goto $label$11 }
	if ( ((int_64)$1 == (int_64)-3109888186206126080) ){ goto $label$7 }
	if ( ((int_64)$1 != (int_64)3626324442490077184) ){ goto $label$1 }
	*($3) = (int_64)0
	*($3 + [16]) = [0]
	$4 = *($2 + [4])
	$2 = *($2)
	*($3 + [100]) = $2
	*($3 + [96]) = $2
	*($3 + [104]) = $4
	CALL $128(($3 + [96]), $3)
	$1 = *($3)
	$global$0 = ($3 + [112])
	return $1
	
.LABEL $label$14
	if ( ((int_64)$1 > (int_64)6761222076679323647) ){ goto $label$10 }
	if ( ((int_64)$1 == (int_64)4852992390995116032) ){ goto $label$6 }
	if ( ((int_64)$1 != (int_64)5377987495347093504) ){ goto $label$1 }
	*($3) = (int_64)0
	$2 = *($2)
	$4 = (*($2 + [4]) - $2)
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$19 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$19
	CALL memcpy($3, $2, [8])
	$2 = ($2 + [8])
	$5 = ($3 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$20 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$20
	CALL memcpy($5, $2, [8])
	$1 = *($3)
	$global$0 = ($3 + [112])
	return $1
	
.LABEL $label$13
	if ( ((int_64)$1 == (int_64)-4849915446028664832) ){ goto $label$5 }
	if ( ((int_64)$1 != (int_64)-4849915395346792448) ){ goto $label$1 }
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	$4 = *($2 + [4])
	$2 = *($2)
	*($3 + [100]) = $2
	*($3 + [96]) = $2
	*($3 + [104]) = $4
	CALL $129(($3 + [96]), $3)
	$1 = *($3)
	$global$0 = ($3 + [112])
	return $1
	
.LABEL $label$12
	if ( ((int_64)$1 == (int_64)4852739417421381632) ){ goto $label$4 }
	if ( ((int_64)$1 != (int_64)4852743800616654304) ){ goto $label$1 }
	*(($3 + [16])) = [0]
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	$4 = *($2 + [4])
	$2 = *($2)
	*($3 + [100]) = $2
	*($3 + [96]) = $2
	*($3 + [104]) = $4
	if ( ((uint_32)($4 - $2) > (uint_32)[7]) ){ goto $label$21 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$21
	CALL memcpy($3, $2, [8])
	*($3 + [100]) = ($2 + [8])
	CALL $60(($3 + [96]), ($3 + [8]))
	$1 = *($3)
	$2 = *($3 + [8])
	if ( ($2 == 0) ){ goto $label$22 }
	*(($3 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$22
	$global$0 = ($3 + [112])
	return $1
	
.LABEL $label$11
	if ( ((int_64)$1 == (int_64)3626397281305837568) ){ goto $label$3 }
	if ( ((int_64)$1 != (int_64)3849304916526705152) ){ goto $label$1 }
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	$4 = *($2 + [4])
	$2 = *($2)
	*($3 + [100]) = $2
	*($3 + [96]) = $2
	*($3 + [104]) = $4
	CALL $130(($3 + [96]), $3)
	$1 = *($3 + [8])
	$global$0 = ($3 + [112])
	return $1
	
.LABEL $label$10
	if ( ((int_64)$1 == (int_64)6761222076679323648) ){ goto $label$2 }
	if ( ((int_64)$1 != (int_64)8421058852606325248) ){ goto $label$1 }
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [56]) = [0]
	$4 = *($2 + [4])
	$2 = *($2)
	*($3 + [100]) = $2
	*($3 + [96]) = $2
	*($3 + [104]) = $4
	CALL $131(($3 + [96]), $3)
	$1 = *($3)
	$global$0 = ($3 + [112])
	return $1
	
.LABEL $label$9
	$4 = *($2)
	CALL $132($3, $4, (*($2 + [4]) - $4))
	$1 = *($3)
	$global$0 = ($3 + [112])
	return $1
	
.LABEL $label$8
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = [0]
	$4 = *($2 + [4])
	$2 = *($2)
	*($3 + [100]) = $2
	*($3 + [96]) = $2
	*($3 + [104]) = $4
	CALL $133(($3 + [96]), $3)
	$1 = *($3 + [8])
	$global$0 = ($3 + [112])
	return $1
	
.LABEL $label$7
	$4 = *($2 + [4])
	$2 = *($2)
	*($3) = (int_64)0
	if ( ((uint_32)($4 - $2) > (uint_32)[7]) ){ goto $label$23 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$23
	CALL memcpy($3, $2, [8])
	$1 = *($3)
	$global$0 = ($3 + [112])
	return $1
	
.LABEL $label$6
	*($3) = (int_64)0
	*($3 + [16]) = [0]
	$4 = *($2 + [4])
	$2 = *($2)
	*($3 + [100]) = $2
	*($3 + [96]) = $2
	*($3 + [104]) = $4
	CALL $134(($3 + [96]), $3)
	$1 = *($3)
	$global$0 = ($3 + [112])
	return $1
	
.LABEL $label$5
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	$2 = *($2)
	$4 = (*($2 + [4]) - $2)
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$24 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$24
	CALL memcpy($3, $2, [8])
	$2 = ($2 + [8])
	$5 = ($3 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$25 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$25
	CALL memcpy($5, $2, [8])
	$1 = *($3)
	$global$0 = ($3 + [112])
	return $1
	
.LABEL $label$4
	$1 = (int_64)0
	*($3) = (int_64)0
	*($3 + [8]) = [0]
	$2 = *($2)
	$6 = *($2 + [4])
	if ( ((uint_32)($6 - $2) > (uint_32)[7]) ){ goto $label$26 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$26
	CALL memcpy($3, $2, [8])
	$2 = ($2 + [8])
	$4 = [0]
	
.LOOP $label$27:
	if ( ($2 <= $6) ){ goto $label$28 }
	CALL eosio_assert([0], [10722])
	
.LABEL $label$28
	$4 = ($4 & [255])
	$5 = *($2)
	$1 = ((int_64)$1 | (int_64)(CASTING uint_64)(uint_32 (($5 & [127]) << $4)))
	$2 = ($2 + [1])
	$4 = ($4 + [7])
	if ( ($5 & [128]) ){ goto $label$27 }
	*(($3 + [8])) = $1
	$4 = ($3 + [12])
	if ( ((uint_32)($6 - $2) > (uint_32)[32]) ){ goto $label$29 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$29
	CALL memcpy($4, $2, [33])
	$1 = *($3)
	$global$0 = ($3 + [112])
	return $1
	
.LABEL $label$3
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	$4 = *($2 + [4])
	$2 = *($2)
	*($3 + [100]) = $2
	*($3 + [96]) = $2
	*($3 + [104]) = $4
	CALL $129(($3 + [96]), $3)
	$1 = *($3)
	$global$0 = ($3 + [112])
	return $1
	
.LABEL $label$2
	$4 = *($2 + [4])
	$2 = *($2)
	*($3) = (int_64)0
	if ( ((uint_32)($4 - $2) > (uint_32)[7]) ){ goto $label$30 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$30
	CALL memcpy($3, $2, [8])
	$1 = *($3)
	$global$0 = ($3 + [112])
	return $1
	
.LABEL $label$1
	CALL eosio_assert([0], [10065])
	$global$0 = ($3 + [112])
	return (int_64)0
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [320])
	$global$0 = $2
	$3 = *($1)
	CALL memcpy(($2 + [94]), ($1 + [8]), [66])
	$4 = [0]
	*($2 + [88]) = [0]
	*($2 + [80]) = (int_64)0
	$5 = (*(($1 + [80])) - *($1 + [76]))
	if ( ($5 == 0) ){ goto $label$6 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL _Znwj($5)
	*(($2 + [88])) = ($6 + $5)
	*($2 + [80]) = $6
	*($2 + [84]) = $6
	$4 = *(($1 + [76]))
	$1 = (*(($1 + [80])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($6, $4, $1)
	$4 = ($6 + $1)
	*($2 + [84]) = $4
	goto $label$4 
	
.LABEL $label$6
	$6 = [0]
	$5 = [0]
	goto $label$3 
	
.LABEL $label$5
	$4 = $6
	
.LABEL $label$4
	$5 = $6
	
.LABEL $label$3
	CALL memcpy(($2 + [160]), ($2 + [94]), [66])
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$7 = (*($0) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($7) + $1))
	
.LABEL $label$7
	CALL memcpy(($2 + [248]), ($2 + [160]), [66])
	*($2 + [240]) = [0]
	*($2 + [232]) = (int_64)0
	$0 = ($4 - $5)
	if ( ($0 == 0) ){ goto $label$8 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL _Znwj($0)
	*(($2 + [240])) = ($5 + $0)
	*($2 + [232]) = $5
	*($2 + [236]) = $5
	$4 = ($4 - $6)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($5, $6, $4)
	*($2 + [236]) = ($5 + $4)
	
.LABEL $label$8
	CALL memcpy(($2 + [14]), ($2 + [248]), [66])
	CALL void $7((int_32 $3), (int_64 ($2 + [14])), (int_32 ($2 + [232])), (int_32 $1))
	$1 = *($2 + [232])
	if ( ($1 == 0) ){ goto $label$9 }
	*($2 + [236]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = *($2 + [80])
	if ( ($1 == 0) ){ goto $label$10 }
	*($2 + [84]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$2
	CALL $192(($2 + [80]))
	
.LABEL $label$1
	CALL $192(($2 + [232]))
	(unreachable)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [10777])
	
.LABEL $label$5
	$2 = CALL $204($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	*($5 + [8]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$7
	$7 = ($5 + [8])
	CALL memcpy($5, $2, [8])
	$8 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$8
	CALL memcpy($7, $8, [8])
	*($5 + [24]) = [-1]
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $9
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $165(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $207($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $84 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [160])
	$global$0 = $4
	$5 = *($0)
	*($4 + [104]) = [8385]
	*($4 + [108]) = CALL $201([8385])
	*($4 + [24]) = *($4 + [104])
	$6 = *(CALL $55(($4 + [112]), ($4 + [24])))
	*($4 + [88]) = [8306]
	*($4 + [92]) = CALL $201([8306])
	*($4 + [16]) = *($4 + [88])
	$0 = CALL $55(($4 + [96]), ($4 + [16]))
	*($4 + [72]) = [10030]
	*($4 + [76]) = CALL $201([10030])
	*($4 + [8]) = *($4 + [72])
	$7 = CALL $55(($4 + [80]), ($4 + [8]))
	*((($4 + [32]) + [24])) = $3
	*($4 + [48]) = $2
	*($4 + [32]) = $1
	*($4 + [120]) = *($0)
	*($4 + [128]) = *($7)
	*(($0 = CALL _Znwj([16]))) = $5
	*($0 + [8]) = $6
	*(($4 + [156])) = [0]
	$7 = ($0 + [16])
	*((($4 + [120]) + [24])) = $7
	*(($4 + [140])) = $7
	*($4 + [136]) = $0
	*($4 + [148 align=4]) = (int_64)0
	CALL $63(($4 + [148]), [24])
	$0 = *($4 + [148])
	$7 = (*(($4 + [152])) - $0)
	if ( ((int_32)$7 > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	
.LABEL $label$1
	$8 = (($4 + [32]) + [16])
	CALL memcpy($0, ($4 + [32]), [8])
	$0 = ($0 + [8])
	if ( ((int_32)($7 + [-8]) > (int_32)[15]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	
.LABEL $label$2
	CALL memcpy($0, $8, [16])
	CALL $66(($4 + [120]))
	$0 = *($4 + [148])
	if ( ($0 == 0) ){ goto $label$3 }
	*(($4 + [152])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$0 = *($4 + [136])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($4 + [140])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($4 + [160])
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $4
	$7 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [10777])
	
.LABEL $label$5
	$4 = CALL $204($6)
	$7 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $6)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $6)
	*(($5 = CALL _Znwj([32]))) = (int_64)0
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [16]) = [0]
	*($5 + [20]) = $0
	$8 = ($5 + [8])
	$2 = $4
	if ( ((uint_32)$6 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10717])
	$2 = *($3 + [36])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $155(($3 + [32]), $8)
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($6 + [8]) = $9
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($2) = ($6 + [24])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $156(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $207($4)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$12 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $82 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	if ( ((int_32)*($6 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10726])
	return $6
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $126($0, $5)
	if ( ((int_32)*($6 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10726])
	return $6
	
.LABEL $label$5
	CALL eosio_assert([0], $2)
	
.LABEL $label$1
	return $6
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10717])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $4, [8])
	*(($1 + [24])) = *($2 + [8])
	*($3) = (*($3) + [8])
	$0 = CALL $153($0, ($1 + [32]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $80 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$7 = ($global$0 - [512])
	$global$0 = $7
	CALL prints([10114])
	$8 = CALL $125($0, $1, $3)
	*($7 + [424]) = [8306]
	*($7 + [428]) = CALL $201([8306])
	*($7 + [40]) = *($7 + [424])
	$9 = CALL $55(($7 + [432]), ($7 + [40]))
	$10 = [0]
	*(($7 + [472])) = [0]
	*($7 + [448]) = $2
	*($7 + [456]) = (int_64)-1
	*($7 + [464]) = (int_64)0
	$1 = *($9)
	*($7 + [440]) = $1
	$9 = CALL db_find_i64($1, $2, (int_64)-9026177492230078464, $8)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	$10 = CALL $56(($7 + [440]), $9)
	if ( ((int_32)*($10 + [64]) == (int_32)($7 + [440])) ){ goto $label$1 }
	CALL eosio_assert([0], [10726])
	goto $label$1 
	
.LABEL $label$2
	if ( (uint_64)($8 <= (int_64)4) ){ goto $label$3 }
	$8 = (int_64)3
	$10 = [0]
	$9 = CALL db_find_i64($1, $2, (int_64)-9026177492230078464, (int_64)3)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $56(($7 + [440]), $9)
	if ( ((int_32)*($10 + [64]) == (int_32)($7 + [440])) ){ goto $label$3 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [10133])
	
.LABEL $label$1
	*((($7 + [384]) + [32])) = *(($10 + [40]))
	*((($7 + [384]) + [24])) = *(($10 + [32]))
	*((($7 + [384]) + [16])) = *(($10 + [24]))
	*(($7 + [392])) = *(($10 + [16]))
	*(($7 + [380])) = *(($10 + [53]))
	*(($7 + [382])) = *(($10 + [55]))
	*($7 + [384]) = *($10 + [8])
	*($7 + [376]) = *($10 + [49 align=1])
	$11 = *(($10 + [48]))
	$12 = *(($10 + [56]))
	if ( (int_64)($8 == 0) ){ goto $label$4 }
	CALL eosio_assert((($11 & [255]) == 0), [10152])
	
.LABEL $label$4
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$8 }
	$9 = [0]
	$13 = *([0] + [10680])
	$1 = $2
	
.LOOP $label$10:
	*((($7 + [144]) + ($10 = $9))) = *(($13 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$10 == (int_32)[12]) )))))
	$9 = ($10 + [1])
	if ( ((uint_32)$10 > (uint_32)[11]) ){ goto $label$9 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$10 }
	
.LABEL $label$9
	*(($7 + [368])) = [0]
	*($7 + [360]) = (int_64)0
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$7 }
	*($7 + [360]) = ($9 << [1])
	$13 = (($7 + [360]) | [1])
	goto $label$6 
	
.LABEL $label$8
	*(($7 + [368])) = [0]
	*($7 + [360]) = (int_64)0
	*($7 + [360]) = [0]
	$14 = (($7 + [360]) | [1])
	$10 = $14
	goto $label$5 
	
.LABEL $label$7
	$15 = (($9 + [16]) & [-16])
	$13 = CALL _Znwj($15)
	*($7 + [360]) = ($15 | [1])
	*($7 + [368]) = $13
	*($7 + [364]) = $9
	
.LABEL $label$6
	$15 = ($10 + [1])
	$10 = [0]
	
.LOOP $label$11:
	*(($13 + $10)) = *((($7 + [144]) + $10))
	$10 = ($10 + [1])
	if ( ((int_32)$15 != (int_32)$10) ){ goto $label$11 }
	$10 = ($13 + $9)
	$14 = (($7 + [360]) | [1])
	
.LABEL $label$5
	$9 = [0]
	*($10) = [0]
	CALL prints([10176])
	$10 = *($7 + [360])
	$13 = ($10 & [1])
	CALL prints_l(( *($7 + [368]) ? $14 : $13 ), ( *($7 + [364]) ? uint_32($10 >> [1]) : $13 ))
	CALL prints([9776])
	CALL $188(($7 + [360]), [10190])
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$15 }
	$13 = *([0] + [10680])
	
.LOOP $label$17:
	*((($7 + [144]) + ($10 = $9))) = *(($13 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$10 == (int_32)[12]) )))))
	$9 = ($10 + [1])
	if ( ((uint_32)$10 > (uint_32)[11]) ){ goto $label$16 }
	$3 = ((int_64)$3 << (int_64)5)
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$17 }
	
.LABEL $label$16
	*(($7 + [240])) = [0]
	*($7 + [232]) = (int_64)0
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$14 }
	*($7 + [232]) = ($9 << [1])
	$13 = (($7 + [232]) | [1])
	goto $label$13 
	
.LABEL $label$15
	*(($7 + [240])) = [0]
	*($7 + [232]) = (int_64)0
	*($7 + [232]) = [0]
	$10 = (($7 + [232]) | [1])
	$9 = $10
	goto $label$12 
	
.LABEL $label$14
	$15 = (($9 + [16]) & [-16])
	$13 = CALL _Znwj($15)
	*($7 + [232]) = ($15 | [1])
	*($7 + [240]) = $13
	*($7 + [236]) = $9
	
.LABEL $label$13
	$15 = ($10 + [1])
	$10 = [0]
	
.LOOP $label$18:
	*(($13 + $10)) = *((($7 + [144]) + $10))
	$10 = ($10 + [1])
	if ( ((int_32)$15 != (int_32)$10) ){ goto $label$18 }
	$9 = ($13 + $9)
	$10 = (($7 + [232]) | [1])
	
.LABEL $label$12
	*($9) = [0]
	$9 = *($7 + [232])
	$13 = ($9 & [1])
	CALL $190(($7 + [360]), ( *($7 + [240]) ? $10 : $13 ), ( *($7 + [236]) ? uint_32($9 >> [1]) : $13 ))
	if ( ((*($7 + [232]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($7 + [240])))
	
.LABEL $label$19
	CALL $188(($7 + [360]), [10190])
	CALL prints([10192])
	$10 = *($7 + [360])
	$9 = ($10 & [1])
	CALL prints_l(( *((($7 + [360]) + [8])) ? $14 : $9 ), ( *($7 + [364]) ? uint_32($10 >> [1]) : $9 ))
	CALL prints([9776])
	*((($7 + [344]) + [8])) = [0]
	*($7 + [344]) = (int_64)0
	$10 = *($5)
	$13 = *($5 + [4])
	$5 = ($13 - $10)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$27 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$30 }
	*($7 + [344]) = ($5 << [1])
	$15 = (($7 + [344]) | [1])
	if ( ((int_32)$10 != (int_32)$13) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$9 = (($5 + [16]) & [-16])
	$15 = CALL _Znwj($9)
	*($7 + [344]) = ($9 | [1])
	*($7 + [352]) = $15
	*($7 + [348]) = $5
	if ( ((int_32)$10 == (int_32)$13) ){ goto $label$28 }
	
.LABEL $label$29
	$9 = $15
	
.LOOP $label$31:
	*($9) = *($10)
	$9 = ($9 + [1])
	$10 = ($10 + [1])
	if ( ((int_32)$13 != (int_32)$10) ){ goto $label$31 }
	$15 = ($15 + $5)
	
.LABEL $label$28
	$10 = [0]
	*($15) = [0]
	*($7 + [328]) = (int_64)0
	*($7 + [336]) = [0]
	$9 = *($7 + [344])
	$13 = ( *($7 + [348]) ? uint_32($9 >> [1]) : ($9 & [1]) )
	CALL $185(($7 + [328]), ($13 << [1]))
	if ( ($13 == 0) ){ goto $label$32 }
	$15 = (($7 + [344]) | [1])
	$5 = ($7 + [352])
	
.LOOP $label$33:
	$9 = *((( *($5) ? $15 : (*($7 + [344]) & [1]) ) + $10))
	CALL $189(($7 + [328]), *((uint_32($9 >> [4]) + [10287])))
	CALL $189(($7 + [328]), *((($9 & [15]) + [10287])))
	$10 = ($10 + [1])
	if ( ((int_32)$13 != (int_32)$10) ){ goto $label$33 }
	
.LABEL $label$32
	CALL prints([10206])
	$13 = *($7 + [328])
	$15 = ($13 & [1])
	$9 = (($7 + [328]) | [1])
	$10 = (($7 + [328]) + [8])
	CALL prints_l(( *($10) ? $9 : $15 ), ( *($7 + [332]) ? uint_32($13 >> [1]) : $15 ))
	CALL prints([9776])
	$10 = *($7 + [328])
	$13 = ($10 & [1])
	CALL $190(($7 + [360]), ( *($10) ? $9 : $13 ), ( *($7 + [332]) ? uint_32($10 >> [1]) : $13 ))
	CALL $188(($7 + [360]), [10190])
	if ( $6 ){ goto $label$34 }
	CALL $191(($7 + [144]), $12)
	$10 = *($7 + [144])
	$9 = ($10 & [1])
	CALL $190(($7 + [360]), ( *($7 + [152]) ? (($7 + [144]) | [1]) : $9 ), ( *($7 + [148]) ? uint_32($10 >> [1]) : $9 ))
	if ( ((*($7 + [144]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($7 + [152])))
	
.LABEL $label$34
	CALL prints([10214])
	$10 = *($7 + [360])
	$9 = ($10 & [1])
	$15 = (($7 + [360]) + [8])
	CALL prints_l(( *($15) ? $14 : $9 ), ( *($7 + [364]) ? uint_32($10 >> [1]) : $9 ))
	CALL prints([9776])
	*($7 + [312]) = (int_64)0
	$9 = [0]
	*($7 + [320]) = [0]
	$10 = ($10 & [1])
	$10 = *($7 + [360])
	$13 = ( *($7 + [364]) ? uint_32($10 >> [1]) : $10 )
	if ( ($13 == 0) ){ goto $label$36 }
	if ( ((int_32)$13 <= (int_32)[-1]) ){ goto $label$26 }
	$10 = ( *($15) ? $14 : $10 )
	$9 = CALL _Znwj($13)
	*(($7 + [320])) = ($9 + $13)
	*($7 + [312]) = $9
	*($7 + [316]) = $9
	
.LOOP $label$37:
	*($9) = *($10)
	$9 = (*($7 + [316]) + [1])
	*($7 + [316]) = $9
	$10 = ($10 + [1])
	$13 = ($13 + [-1])
	if ( $13 ){ goto $label$37 }
	$10 = *($7 + [312])
	goto $label$35 
	
.LABEL $label$36
	$10 = [0]
	
.LABEL $label$35
	CALL sha256($10, ($9 - $10), ($7 + [272]))
	CALL printhex(($7 + [272]), [32])
	$10 = (($7 + [384]) + [32])
	*((($7 + [232]) + [32])) = *($10)
	$9 = (($7 + [384]) + [24])
	*((($7 + [232]) + [24])) = *($9)
	$13 = (($7 + [384]) + [16])
	*((($7 + [232]) + [16])) = *($13)
	$15 = (($7 + [384]) + [8])
	*((($7 + [232]) + [8])) = *($15)
	*($7 + [232]) = *($7 + [384])
	CALL prints([10258])
	*($7 + [144]) = *($7 + [232])
	CALL memcpy((($7 + [144]) | [1]), (($7 + [232]) | [4]), [33])
	CALL assert_recover_key(($7 + [272]), $4, [66], ($7 + [144]), [34])
	CALL prints([10225])
	if ( $6 ){ goto $label$38 }
	*(($7 + [200])) = $11
	*((($7 + [144]) + [24])) = *($15)
	*((($7 + [144]) + [32])) = *($13)
	*(($7 + [184])) = *($9)
	*(($7 + [192])) = *($10)
	*(($7 + [205])) = *((($7 + [376]) + [4]))
	*(($7 + [207])) = *(($7 + [382]))
	*($7 + [152]) = $8
	*($7 + [144]) = $2
	*($7 + [160]) = *($7 + [384])
	*($7 + [201 align=1]) = *($7 + [376])
	*(($7 + [208])) = ((int_64)$12 + (int_64)1)
	*($7 + [216]) = (int_64)0
	*($7 + [224]) = [0]
	$10 = [58]
	$3 = *($7 + [160])
	
.LOOP $label$39:
	$10 = ($10 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$39 }
	CALL $63(($7 + [216]), $10)
	$10 = *($7 + [220])
	$9 = *($7 + [216])
	*($7 + [68]) = $9
	*($7 + [64]) = $9
	*($7 + [72]) = $10
	*($7 + [56]) = ($7 + [64])
	*($7 + [480]) = ($7 + [144])
	CALL $64(($7 + [480]), ($7 + [56]))
	$3 = *($0)
	*($7 + [128]) = [8385]
	*($7 + [132]) = CALL $201([8385])
	*($7 + [32]) = *($7 + [128])
	$1 = *(CALL $55(($7 + [136]), ($7 + [32])))
	*($7 + [112]) = [8306]
	*($7 + [116]) = CALL $201([8306])
	*($7 + [24]) = *($7 + [112])
	$13 = CALL $55(($7 + [120]), ($7 + [24]))
	*($7 + [96]) = [8897]
	*($7 + [100]) = CALL $201([8897])
	*($7 + [16]) = *($7 + [96])
	$15 = CALL $55(($7 + [104]), ($7 + [16]))
	*($7 + [48]) = [8908]
	*($7 + [52]) = CALL $201([8908])
	*($7 + [8]) = *($7 + [48])
	$10 = CALL $55(($7 + [56]), ($7 + [8]))
	*((($7 + [64]) + [24])) = [0]
	*($7 + [64]) = $2
	*($7 + [80]) = (int_64)0
	*($7 + [72]) = *($10)
	$10 = (*($7 + [220]) - *($7 + [216]))
	if ( ($10 == 0) ){ goto $label$40 }
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$25 }
	$9 = CALL _Znwj($10)
	*(($7 + [80])) = $9
	*(($5 = ($7 + [84]))) = $9
	*(($7 + [88])) = ($9 + $10)
	$14 = *($7 + [216])
	$10 = (*($7 + [220]) - $14)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$40 }
	CALL memcpy($9, $14, $10)
	*($5) = (*($5) + $10)
	
.LABEL $label$40
	*($7 + [144]) = *($13)
	*($7 + [152]) = *($15)
	*(($10 = CALL _Znwj([16]))) = $3
	*($10 + [8]) = $1
	*(($7 + [180])) = [0]
	$9 = ($10 + [16])
	*((($7 + [144]) + [24])) = $9
	*((($7 + [144]) + [20])) = $9
	*($7 + [160]) = $10
	*($7 + [172 align=4]) = (int_64)0
	$13 = *($7 + [80])
	$9 = *((($7 + [64]) + [20]))
	$10 = (($9 + [16]) - $13)
	$3 = (CASTING uint_64)(uint_32 ($9 - $13))
	$9 = ($7 + [172])
	
.LOOP $label$41:
	$10 = ($10 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$41 }
	if ( ($10 == 0) ){ goto $label$43 }
	CALL $63($9, $10)
	$9 = *(($7 + [176]))
	$10 = *(($7 + [172]))
	goto $label$42 
	
.LABEL $label$43
	$9 = [0]
	$10 = [0]
	
.LABEL $label$42
	*($7 + [484]) = $10
	*($7 + [480]) = $10
	*($7 + [488]) = $9
	*($7 + [496]) = ($7 + [480])
	*($7 + [504]) = ($7 + [64])
	CALL $65(($7 + [504]), ($7 + [496]))
	CALL $66(($7 + [144]))
	$10 = *($7 + [172])
	if ( ($10 == 0) ){ goto $label$44 }
	*(($7 + [176])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$44
	$10 = *($7 + [160])
	if ( ($10 == 0) ){ goto $label$45 }
	*(($7 + [164])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$45
	$10 = *($7 + [80])
	if ( ($10 == 0) ){ goto $label$46 }
	*(($7 + [84])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$46
	$10 = *($7 + [216])
	if ( ($10 == 0) ){ goto $label$38 }
	*($7 + [220]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$38
	$10 = *($7 + [312])
	if ( ($10 == 0) ){ goto $label$47 }
	*($7 + [316]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$47
	if ( (*($7 + [328]) & [1]) ){ goto $label$49 }
	if ( (*($7 + [344]) & [1]) ){ goto $label$48 }
	goto $label$24 
	
.LABEL $label$49
	CALL _ZdlPv(*(($7 + [336])))
	if ( ((*($7 + [344]) & [1]) == 0) ){ goto $label$24 }
	
.LABEL $label$48
	CALL _ZdlPv(*($7 + [352]))
	if ( ((*($7 + [360]) & [1]) == 0) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$27
	CALL $183(($7 + [344]))
	
.LABEL $label$26
	CALL $192(($7 + [312]))
	
.LABEL $label$25
	CALL $192((($7 + [64]) + [16]))
	
.LABEL $label$24
	if ( (*($7 + [360]) & [1]) ){ goto $label$22 }
	
.LABEL $label$23
	$13 = *($7 + [464])
	if ( $13 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL _ZdlPv(*(($7 + [368])))
	$13 = *($7 + [464])
	if ( ($13 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	$15 = ($7 + [468])
	$10 = *($15)
	if ( ((int_32)$10 == (int_32)$13) ){ goto $label$51 }
	
.LOOP $label$52:
	$10 = ($10 + [-24])
	$9 = *($10)
	*($10) = [0]
	if ( ($9 == 0) ){ goto $label$53 }
	CALL _ZdlPv($9)
	
.LABEL $label$53
	if ( ((int_32)$13 != (int_32)$10) ){ goto $label$52 }
	$10 = *(($7 + [464]))
	goto $label$50 
	
.LABEL $label$51
	$10 = $13
	
.LABEL $label$50
	*($15) = $13
	CALL _ZdlPv($10)
	$global$0 = ($7 + [512])
	return 
	
.LABEL $label$20
	$global$0 = ($7 + [512])
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$7 = ($0 + [4])
	$1 = ($0 + [8])
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$5 }
	$8 = [2]
	goto $label$3 
	
.LABEL $label$5
	$8 = [0]
	goto $label$3 
	
.LABEL $label$4
	$8 = [3]
	
.LABEL $label$3
	
.LOOP $label$6:
	goto $label$10 
	
.LABEL $label$12
	$4 = *($7)
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$7 }
	$8 = [2]
	goto $label$6 
	
.LABEL $label$11
	CALL eosio_assert([0], [10587])
	$4 = *($7)
	$8 = [0]
	goto $label$6 
	
.LABEL $label$10
	CALL memcpy($4, $6, [2])
	*($7) = (*($7) + [2])
	CALL $147($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$8 }
	$8 = [3]
	goto $label$6 
	
.LABEL $label$9
	$global$0 = ($2 + [16])
	return $0
	
.LABEL $label$8
	$8 = [1]
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	goto $label$6 
	return $8
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [4])
	$4 = (*($3) + [4])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [4])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[1]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [2])
	$4 = (*($3) + [2])
	*($3) = $4
	$3 = ($1 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [10587])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [4])
	$3 = (*($4) + [4])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [12])
	$8 = ($0 + [8])
	
.LOOP $label$4:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert([0], [10587])
	$3 = *($4)
	
.LABEL $label$5
	CALL memcpy($3, ($2 + [14]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$4 }
	$4 = ($1 + [16])
	$8 = ($0 + [8])
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [10587])
	$3 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $4, [1])
	$3 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [20])
	
.LOOP $label$7:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [15]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert([0], [10587])
	$3 = *($4)
	
.LABEL $label$8
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$7 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $148($0, $1)
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [28])) - *($1 + [24])) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [14]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [14]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *(($1 + [28]))
	$6 = *(($1 + [24]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $127($0, $6)
	$6 = ($6 + [40])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$4 }
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [40])) - *($1 + [36])) / (int_32)[40]))
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$5:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [10587])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$5 }
	$6 = *(($1 + [40]))
	$4 = *(($1 + [36]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $127($0, $4)
	$4 = ($4 + [40])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = CALL $149($0, ($1 + [48]))
	$global$0 = ($2 + [16])
	return $4
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [10587])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10587])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10587])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($4 + [16])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)(*($1 + [8]) - $3) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10587])
	$3 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	$3 = ($4 + [8])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [16])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10587])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [24])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [10587])
	$5 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
	*($2 + [8]) = $4
	CALL $174(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [16])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $0) > (int_32)[15]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $2, [16])
	*(($3 = ($3 + [4]))) = (*($3) + [16])
	CALL $147(*($1), ($4 + [32]))
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	$2 = ($3 + [8])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$2 = ($3 + [16])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10587])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$2 = ($3 + [24])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10587])
	$4 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($4, $2, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	CALL $170(*($1), ($3 + [32]))
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$2 = (*($1 + [4]) - *($1))
	$3 = ((int_32)$2 / (int_32)[12])
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$2 = CALL _Znwj($2)
	*(($4 = ($0 + [4]))) = $2
	*(($0 + [8])) = ($2 + ((int_32)$3 * (int_32)[12]))
	*($0) = $2
	$5 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	*($2) = (int_64)0
	*($2 + [8]) = [0]
	$6 = ($3 + [4])
	$1 = (*($6) - *($3))
	if ( ($1 == 0) ){ goto $label$5 }
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	$8 = CALL _Znwj($1)
	*(($7 = ($2 + [4]))) = $8
	*(($2 + [8])) = ($8 + $1)
	*($2) = $8
	$1 = *($3)
	$2 = (*($6) - $1)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($8, $1, $2)
	*($7) = (*($7) + $2)
	
.LABEL $label$5
	$2 = (*($4) + [12])
	*($4) = $2
	$3 = ($3 + [12])
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$4 }
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	CALL $192($2)
	
.LABEL $label$1
	CALL $192($0)
	(unreachable)
	return (unreachable)
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($4 - $5)) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$4 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($4 << [1])
	$2 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$6
	$5 = CALL _Znwj($2)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $2)
	CALL memcpy($5, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$4 = (*($0 + [4]) - $5)
	$6 = ( ($1 + $4) ? $2 : ((uint_32)$3 > (uint_32)$4) )
	$7 = ($6 - $1)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $7)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$8 }
	$0 = ($2 - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $6, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($5 + $7)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $192($0)
}

void .FUNC $70 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [176])
	$global$0 = $4
	$5 = *($0)
	*($4 + [88]) = [8385]
	*($4 + [92]) = CALL $201([8385])
	*($4 + [24]) = *($4 + [88])
	$6 = *(CALL $55(($4 + [96]), ($4 + [24])))
	*($4 + [72]) = [8306]
	*($4 + [76]) = CALL $201([8306])
	*($4 + [16]) = *($4 + [72])
	$0 = CALL $55(($4 + [80]), ($4 + [16]))
	*($4 + [56]) = [10020]
	*($4 + [60]) = CALL $201([10020])
	*($4 + [8]) = *($4 + [56])
	$7 = CALL $55(($4 + [64]), ($4 + [8]))
	*($4 + [40]) = $2
	*($4 + [32]) = $1
	*($4 + [48]) = $3
	*($4 + [104]) = *($0)
	*($4 + [112]) = *($7)
	*(($0 = CALL _Znwj([16]))) = $5
	*($0 + [8]) = $6
	*(($4 + [140])) = [0]
	$7 = ($0 + [16])
	*((($4 + [104]) + [24])) = $7
	*(($4 + [124])) = $7
	*($4 + [120]) = $0
	*($4 + [132 align=4]) = (int_64)0
	CALL $63(($4 + [132]), [24])
	$8 = ($4 + [136])
	$0 = *($8)
	$7 = *($4 + [132])
	*($4 + [148]) = $7
	*($4 + [144]) = $7
	*($4 + [152]) = $0
	*($4 + [160]) = ($4 + [144])
	*($4 + [168]) = ($4 + [32])
	CALL $74(($4 + [168]), ($4 + [160]))
	CALL $66(($4 + [104]))
	$0 = *($4 + [132])
	if ( ($0 == 0) ){ goto $label$1 }
	*($8) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$0 = *($4 + [120])
	if ( ($0 == 0) ){ goto $label$2 }
	*(($4 + [124])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($4 + [176])
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [10777])
	
.LABEL $label$5
	$5 = CALL $204($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $5, $4)
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($5 + $4)
	*(($2 = CALL _Znwj([112])) + [32]) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [80 align=4]) = (int_64)0
	*($2 + [88]) = [0]
	*($2 + [92]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($2 + [8])
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + [16])
	*($3 + [44]) = ($2 + [24])
	*($3 + [48]) = ($2 + [32])
	*($3 + [52]) = ($2 + [48])
	*($3 + [56]) = ($2 + [80])
	CALL $166(($3 + [32]), ($3 + [24]))
	*($2 + [96]) = $1
	*($3 + [24]) = $2
	$7 = *($2)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$4 = *($8)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $7
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $2
	*($8) = ($4 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $167(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $207($5)
	
.LABEL $label$7
	$6 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$11 }
	$8 = ($6 + [84])
	$1 = *($8)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$13 }
	
.LOOP $label$14:
	$5 = ($1 + [-12])
	$4 = *($5)
	if ( ($4 == 0) ){ goto $label$15 }
	*(($1 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$1 = $5
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$14 }
	$5 = *(($6 + [80]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $0
	
.LABEL $label$12
	*($8) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$11
	CALL _ZdlPv($6)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $2
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$5 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [20])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$6 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$6
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [24])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$7 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$7
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [28])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$8 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$8
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [32])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$9 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$9
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [36])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$10 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$10
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [40])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$11 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$11
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [44])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$12 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$12
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [48])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$13 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$13
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [52])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$14 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$14
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [56])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$15 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$15
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [60])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$16 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$16
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [64])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$17 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$17
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [68])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$18 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$18
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [72])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$19 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$19
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [76])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$20 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$20
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [80])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$21 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$21
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [84])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$22 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$22
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [88])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$23 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$23
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [92])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$24 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$24
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [96])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$25 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$25
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [100])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$26 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$26
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [104])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$27 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$27
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [108])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$28 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$28
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [112])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$29 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$29
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [116])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$30 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$30
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [120])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$31 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$31
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [124])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$32 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$32
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [128])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$33 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$33
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [132])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$34 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$34
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [136])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$35 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$35
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [140])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$36 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$36
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [144])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$37 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$37
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [148])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$38 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$38
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [152])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$39 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$39
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [156])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$40 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$40
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [160])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$41 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$41
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [164])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$42 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$42
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [168])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$43 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$43
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [172])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$44 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$44
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [176])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$45 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$45
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [180])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$46 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$46
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [184])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$47 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$47
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [188])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$48 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$48
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [192])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$49 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$49
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [196])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$50 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$50
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [200])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$51 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$51
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [204])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$52 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$52
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [208])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$53 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$53
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [212])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$54 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$54
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [216])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$55 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$55
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [220])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$56 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$56
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [224])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$57 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$57
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [228])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$58 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$58
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [232])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$59 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$59
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [236])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$60 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$60
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [240])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$61 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$61
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [244])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$62 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$62
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [248])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$63 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$63
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [252])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$64 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$64
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [256])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$65 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$65
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$3 = *($0 + [260])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)*($0 + [8]) != (int_32)$1) ){ goto $label$66 }
	CALL eosio_assert([0], [10717])
	$1 = *(($0 + [4]))
	
.LABEL $label$66
	CALL memcpy($3, $1, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10722])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $63($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [10717])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($4 + [16])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)(*($1 + [8]) - $3) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10587])
	$3 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

int_32 .FUNC $75 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [320])
	$global$0 = $2
	CALL memcpy(($2 + [94]), $1, [66])
	$3 = [0]
	*($2 + [88]) = [0]
	*($2 + [80]) = (int_64)0
	$4 = (*($1 + [72]) - *($1 + [68]))
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL _Znwj($4)
	*(($2 + [88])) = ($5 + $4)
	*($2 + [80]) = $5
	*($2 + [84]) = $5
	$3 = *(($1 + [68]))
	$1 = (*(($1 + [72])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $3, $1)
	$3 = ($5 + $1)
	*($2 + [84]) = $3
	goto $label$4 
	
.LABEL $label$6
	$5 = [0]
	$4 = [0]
	goto $label$3 
	
.LABEL $label$5
	$3 = $5
	
.LABEL $label$4
	$4 = $5
	
.LABEL $label$3
	CALL memcpy(($2 + [160]), ($2 + [94]), [66])
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$6 = (*($0) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($6) + $1))
	
.LABEL $label$7
	CALL memcpy(($2 + [248]), ($2 + [160]), [66])
	*($2 + [240]) = [0]
	*($2 + [232]) = (int_64)0
	$0 = ($3 - $4)
	if ( ($0 == 0) ){ goto $label$8 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL _Znwj($0)
	*(($2 + [240])) = ($4 + $0)
	*($2 + [232]) = $4
	*($2 + [236]) = $4
	$3 = ($3 - $5)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($4, $5, $3)
	*($2 + [236]) = ($4 + $3)
	
.LABEL $label$8
	CALL memcpy(($2 + [14]), ($2 + [248]), [66])
	CALL void $6((int_32 ($2 + [14])), (int_32 ($2 + [232])), (int_32 $1))
	$1 = *($2 + [232])
	if ( ($1 == 0) ){ goto $label$9 }
	*($2 + [236]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = *($2 + [80])
	if ( ($1 == 0) ){ goto $label$10 }
	*($2 + [84]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$2
	CALL $192(($2 + [80]))
	
.LABEL $label$1
	CALL $192(($2 + [232]))
	(unreachable)
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	CALL $77($0, ($1 + [24]))
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [16])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $3, [8])
	return *(($2 = ($0 + [4]))) = (*($2) + [8])
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = *($0)
	$3 = ($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $162(*($1), ($0 + [16]))
	$1 = *($1)
	*($2 + [15]) = *($0 + [40])
	$4 = *($1 + [4])
	if ( ((int_32)(*($1 + [8]) - $4) > (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert([0], [10587])
	$4 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, ($2 + [15]), [1])
	*(($1 = ($1 + [4]))) = (*($1) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($0)
	$2 = ($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = ($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10587])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $147(*($1), ($0 + [24]))
}

void .FUNC $94 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$6 = ($global$0 - [512])
	$global$0 = $6
	*($6 + [424]) = [8306]
	*($6 + [428]) = CALL $201([8306])
	*($6 + [40]) = *($6 + [424])
	$7 = CALL $55(($6 + [432]), ($6 + [40]))
	*(($6 + [472])) = [0]
	*($6 + [448]) = $1
	*($6 + [456]) = (int_64)-1
	*($6 + [464]) = (int_64)0
	$8 = *($7)
	*($6 + [440]) = $8
	$7 = [0]
	$9 = CALL db_find_i64($8, $1, (int_64)-4139260905483403264, $2)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $97(($6 + [440]), $9)
	if ( ((int_32)*($7 + [144]) == (int_32)($6 + [440])) ){ goto $label$1 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8444])
	if ( ($3 == 0) ){ goto $label$3 }
	*(($6 + [392])) = *(($7 + [20]))
	*(($6 + [400])) = *(($7 + [28]))
	*(($6 + [408])) = *(($7 + [36]))
	*(($6 + [416])) = *(($7 + [44]))
	*(($6 + [380])) = *(($7 + [53]))
	*(($6 + [382])) = *(($7 + [55]))
	*($6 + [376]) = *($7 + [49 align=1])
	*($6 + [384]) = *(($7 + [12]))
	$9 = ($7 + [56])
	$10 = *(($7 + [48]))
	$11 = *($7 + [8])
	goto $label$2 
	
.LABEL $label$3
	*(($6 + [392])) = *(($7 + [76]))
	*(($6 + [400])) = *(($7 + [84]))
	*(($6 + [408])) = *(($7 + [92]))
	*(($6 + [416])) = *(($7 + [100]))
	*(($6 + [380])) = *(($7 + [109]))
	*(($6 + [382])) = *(($7 + [111]))
	*($6 + [376]) = *($7 + [105 align=1])
	*($6 + [384]) = *(($7 + [68]))
	$9 = ($7 + [112])
	$10 = *(($7 + [104]))
	$11 = *($7 + [64])
	
.LABEL $label$2
	$12 = *($9)
	CALL eosio_assert((($10 & [255]) == 0), [10236])
	*((($6 + [336]) + [12])) = *((($6 + [384]) + [8]))
	*(($6 + [356])) = *(($6 + [400]))
	*(($6 + [364])) = *(($6 + [408]))
	*(($6 + [372])) = *(($6 + [416]))
	*($6 + [336]) = $11
	*($6 + [340 align=4]) = *($6 + [384])
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$9 = [0]
	$13 = *([0] + [10680])
	$8 = $1
	
.LOOP $label$9:
	*((($6 + [144]) + ($7 = $9))) = *(($13 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$8 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$7 == (int_32)[12]) )))))
	$9 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[11]) ){ goto $label$8 }
	$8 = ((int_64)$8 << (int_64)5)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$9 }
	
.LABEL $label$8
	*(($6 + [328])) = [0]
	*($6 + [320]) = (int_64)0
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$6 }
	*($6 + [320]) = ($9 << [1])
	$13 = (($6 + [320]) | [1])
	goto $label$5 
	
.LABEL $label$7
	*((($6 + [320]) + [8])) = [0]
	*($6 + [320]) = (int_64)0
	*($6 + [320]) = [0]
	$7 = (($6 + [320]) | [1])
	goto $label$4 
	
.LABEL $label$6
	$14 = (($9 + [16]) & [-16])
	$13 = CALL _Znwj($14)
	*($6 + [320]) = ($14 | [1])
	*($6 + [328]) = $13
	*($6 + [324]) = $9
	
.LABEL $label$5
	$14 = ($7 + [1])
	$7 = [0]
	
.LOOP $label$10:
	*(($13 + $7)) = *((($6 + [144]) + $7))
	$7 = ($7 + [1])
	if ( ((int_32)$14 != (int_32)$7) ){ goto $label$10 }
	$7 = ($13 + $9)
	
.LABEL $label$4
	$9 = [0]
	*($7) = [0]
	CALL $188(($6 + [320]), [10190])
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$14 }
	$13 = *([0] + [10680])
	$8 = $2
	
.LOOP $label$16:
	*((($6 + [144]) + ($7 = $9))) = *(($13 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$8 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$7 == (int_32)[12]) )))))
	$9 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[11]) ){ goto $label$15 }
	$8 = ((int_64)$8 << (int_64)5)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$16 }
	
.LABEL $label$15
	*(($6 + [248])) = [0]
	*($6 + [240]) = (int_64)0
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$13 }
	*($6 + [240]) = ($9 << [1])
	$13 = (($6 + [240]) | [1])
	goto $label$12 
	
.LABEL $label$14
	*(($6 + [248])) = [0]
	*($6 + [240]) = (int_64)0
	*($6 + [240]) = [0]
	$7 = (($6 + [240]) | [1])
	$9 = $7
	goto $label$11 
	
.LABEL $label$13
	$14 = (($9 + [16]) & [-16])
	$13 = CALL _Znwj($14)
	*($6 + [240]) = ($14 | [1])
	*($6 + [248]) = $13
	*($6 + [244]) = $9
	
.LABEL $label$12
	$14 = ($7 + [1])
	$7 = [0]
	
.LOOP $label$17:
	*(($13 + $7)) = *((($6 + [144]) + $7))
	$7 = ($7 + [1])
	if ( ((int_32)$14 != (int_32)$7) ){ goto $label$17 }
	$9 = ($13 + $9)
	$7 = (($6 + [240]) | [1])
	
.LABEL $label$11
	*($9) = [0]
	$9 = *($6 + [240])
	$13 = ($9 & [1])
	CALL $190(($6 + [320]), ( *($6 + [248]) ? $7 : $13 ), ( *($6 + [244]) ? uint_32($9 >> [1]) : $13 ))
	if ( ((*($6 + [240]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($6 + [248])))
	
.LABEL $label$18
	CALL $188(($6 + [320]), [10190])
	*(($6 + [312])) = [0]
	*($6 + [304]) = (int_64)0
	$7 = *($5)
	$13 = *($5 + [4])
	$5 = ($13 - $7)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$29 }
	*($6 + [304]) = ($5 << [1])
	$14 = (($6 + [304]) | [1])
	if ( ((int_32)$7 != (int_32)$13) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$9 = (($5 + [16]) & [-16])
	$14 = CALL _Znwj($9)
	*($6 + [304]) = ($9 | [1])
	*($6 + [312]) = $14
	*($6 + [308]) = $5
	if ( ((int_32)$7 == (int_32)$13) ){ goto $label$27 }
	
.LABEL $label$28
	$9 = $14
	
.LOOP $label$30:
	*($9) = *($7)
	$9 = ($9 + [1])
	$7 = ($7 + [1])
	if ( ((int_32)$13 != (int_32)$7) ){ goto $label$30 }
	$14 = ($14 + $5)
	
.LABEL $label$27
	$7 = [0]
	*($14) = [0]
	*($6 + [288]) = (int_64)0
	*($6 + [296]) = [0]
	$9 = *($6 + [304])
	$13 = ( *($6 + [308]) ? uint_32($9 >> [1]) : ($9 & [1]) )
	CALL $185(($6 + [288]), ($13 << [1]))
	if ( ($13 == 0) ){ goto $label$31 }
	$14 = (($6 + [304]) | [1])
	$5 = ($6 + [312])
	
.LOOP $label$32:
	$9 = *((( *($5) ? $14 : (*($6 + [304]) & [1]) ) + $7))
	CALL $189(($6 + [288]), *((uint_32($9 >> [4]) + [10287])))
	CALL $189(($6 + [288]), *((($9 & [15]) + [10287])))
	$7 = ($7 + [1])
	if ( ((int_32)$13 != (int_32)$7) ){ goto $label$32 }
	
.LABEL $label$31
	CALL prints([10206])
	$13 = *($6 + [288])
	$14 = ($13 & [1])
	$9 = (($6 + [288]) | [1])
	$7 = (($6 + [288]) + [8])
	CALL prints_l(( *($7) ? $9 : $14 ), ( *($6 + [292]) ? uint_32($13 >> [1]) : $14 ))
	CALL prints([9776])
	$7 = *($6 + [288])
	$13 = ($7 & [1])
	CALL $190(($6 + [320]), ( *($7) ? $9 : $13 ), ( *($6 + [292]) ? uint_32($7 >> [1]) : $13 ))
	CALL $188(($6 + [320]), [10190])
	CALL $191(($6 + [144]), $12)
	$7 = *($6 + [144])
	$9 = ($7 & [1])
	CALL $190(($6 + [320]), ( *($6 + [152]) ? (($6 + [144]) | [1]) : $9 ), ( *($6 + [148]) ? uint_32($7 >> [1]) : $9 ))
	if ( ((*($6 + [144]) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*((($6 + [144]) + [8])))
	
.LABEL $label$33
	CALL prints([10214])
	$7 = *($6 + [320])
	$9 = ($7 & [1])
	$14 = (($6 + [320]) | [1])
	CALL prints_l(( *($6 + [328]) ? $14 : $9 ), ( *($6 + [324]) ? uint_32($7 >> [1]) : $9 ))
	CALL prints([9776])
	*($6 + [272]) = (int_64)0
	*($6 + [280]) = [0]
	$7 = ($7 & [1])
	$7 = *($6 + [320])
	$13 = ( *($6 + [324]) ? uint_32($7 >> [1]) : $7 )
	if ( ($13 == 0) ){ goto $label$35 }
	if ( ((int_32)$13 <= (int_32)[-1]) ){ goto $label$25 }
	$7 = ( *($6 + [328]) ? $14 : $7 )
	$9 = CALL _Znwj($13)
	*(($6 + [280])) = ($9 + $13)
	*($6 + [272]) = $9
	*($6 + [276]) = $9
	
.LOOP $label$36:
	*($9) = *($7)
	$9 = (*($6 + [276]) + [1])
	*($6 + [276]) = $9
	$7 = ($7 + [1])
	$13 = ($13 + [-1])
	if ( $13 ){ goto $label$36 }
	$7 = *($6 + [272])
	goto $label$34 
	
.LABEL $label$35
	$9 = [0]
	$7 = [0]
	
.LABEL $label$34
	CALL sha256($7, ($9 - $7), ($6 + [240]))
	CALL printhex(($6 + [240]), [32])
	CALL prints([10258])
	*($6 + [144]) = *($6 + [336])
	CALL memcpy((($6 + [144]) | [1]), (($6 + [336]) | [4]), [33])
	CALL assert_recover_key(($6 + [240]), $4, [66], ($6 + [144]), [34])
	CALL prints([10225])
	*(($6 + [200])) = $10
	*(($6 + [164])) = *($6 + [384])
	*(($6 + [172])) = *(($6 + [392]))
	*(($6 + [180])) = *(($6 + [400]))
	*(($6 + [188])) = *(($6 + [408]))
	*(($6 + [196])) = *((($6 + [384]) + [32]))
	*(($6 + [205])) = *(($6 + [380]))
	*(($6 + [207])) = *(($6 + [382]))
	*($6 + [152]) = $2
	*($6 + [144]) = $1
	*($6 + [201 align=1]) = *($6 + [376])
	*($6 + [160]) = $11
	*(($6 + [208])) = ((int_64)$12 + (int_64)1)
	*($6 + [216]) = $3
	*($6 + [224]) = (int_64)0
	*($6 + [232]) = [0]
	$8 = (CASTING uint_64)(uint_32 $11)
	$7 = [59]
	
.LOOP $label$37:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$37 }
	CALL $63(($6 + [224]), $7)
	$7 = *($6 + [228])
	$9 = *($6 + [224])
	*($6 + [68]) = $9
	*($6 + [64]) = $9
	*($6 + [72]) = $7
	*($6 + [56]) = ($6 + [64])
	*($6 + [480]) = ($6 + [144])
	CALL $123(($6 + [480]), ($6 + [56]))
	$8 = *($0)
	*($6 + [128]) = [8385]
	*($6 + [132]) = CALL $201([8385])
	*($6 + [32]) = *($6 + [128])
	$2 = *(CALL $55(($6 + [136]), ($6 + [32])))
	*($6 + [112]) = [8306]
	*($6 + [116]) = CALL $201([8306])
	*($6 + [24]) = *($6 + [112])
	$13 = CALL $55(($6 + [120]), ($6 + [24]))
	*($6 + [96]) = [8897]
	*($6 + [100]) = CALL $201([8897])
	*($6 + [16]) = *($6 + [96])
	$14 = CALL $55(($6 + [104]), ($6 + [16]))
	*($6 + [48]) = [8515]
	*($6 + [52]) = CALL $201([8515])
	*($6 + [8]) = *($6 + [48])
	$7 = CALL $55(($6 + [56]), ($6 + [8]))
	*((($6 + [64]) + [24])) = [0]
	*($6 + [64]) = $1
	*($6 + [80]) = (int_64)0
	*($6 + [72]) = *($7)
	$7 = (*($6 + [228]) - *($6 + [224]))
	if ( ($7 == 0) ){ goto $label$38 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$24 }
	$9 = CALL _Znwj($7)
	*(($6 + [80])) = $9
	*(($5 = ($6 + [84]))) = $9
	*(($6 + [88])) = ($9 + $7)
	$11 = *($6 + [224])
	$7 = (*($6 + [228]) - $11)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$38 }
	CALL memcpy($9, $11, $7)
	*($5) = (*($5) + $7)
	
.LABEL $label$38
	*($6 + [144]) = *($13)
	*($6 + [152]) = *($14)
	*(($7 = CALL _Znwj([16]))) = $8
	*($7 + [8]) = $2
	*(($6 + [180])) = [0]
	$9 = ($7 + [16])
	*((($6 + [144]) + [24])) = $9
	*((($6 + [144]) + [20])) = $9
	*($6 + [160]) = $7
	*($6 + [172 align=4]) = (int_64)0
	$13 = *($6 + [80])
	$9 = *((($6 + [64]) + [20]))
	$7 = (($9 + [16]) - $13)
	$8 = (CASTING uint_64)(uint_32 ($9 - $13))
	$9 = ($6 + [172])
	
.LOOP $label$39:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$39 }
	if ( ($7 == 0) ){ goto $label$41 }
	CALL $63($9, $7)
	$9 = *(($6 + [176]))
	$7 = *(($6 + [172]))
	goto $label$40 
	
.LABEL $label$41
	$9 = [0]
	$7 = [0]
	
.LABEL $label$40
	*($6 + [484]) = $7
	*($6 + [480]) = $7
	*($6 + [488]) = $9
	*($6 + [496]) = ($6 + [480])
	*($6 + [504]) = ($6 + [64])
	CALL $65(($6 + [504]), ($6 + [496]))
	CALL $66(($6 + [144]))
	$7 = *($6 + [172])
	if ( ($7 == 0) ){ goto $label$42 }
	*(($6 + [176])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$42
	$7 = *($6 + [160])
	if ( ($7 == 0) ){ goto $label$43 }
	*(($6 + [164])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$43
	$7 = *($6 + [80])
	if ( ($7 == 0) ){ goto $label$44 }
	*(($6 + [84])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$44
	$7 = *($6 + [224])
	if ( ($7 == 0) ){ goto $label$45 }
	*($6 + [228]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$45
	$7 = *($6 + [272])
	if ( ($7 == 0) ){ goto $label$46 }
	*($6 + [276]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$46
	if ( (*($6 + [288]) & [1]) ){ goto $label$48 }
	if ( (*($6 + [304]) & [1]) ){ goto $label$47 }
	goto $label$23 
	
.LABEL $label$48
	CALL _ZdlPv(*(($6 + [296])))
	if ( ((*($6 + [304]) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$47
	CALL _ZdlPv(*($6 + [312]))
	if ( ((*($6 + [320]) & [1]) == 0) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$26
	CALL $183(($6 + [304]))
	
.LABEL $label$25
	CALL $192(($6 + [272]))
	
.LABEL $label$24
	CALL $192((($6 + [64]) + [16]))
	
.LABEL $label$23
	if ( (*($6 + [320]) & [1]) ){ goto $label$21 }
	
.LABEL $label$22
	$14 = *($6 + [464])
	if ( $14 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL _ZdlPv(*(($6 + [328])))
	$14 = *($6 + [464])
	if ( ($14 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$5 = ($6 + [468])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$14) ){ goto $label$50 }
	
.LOOP $label$51:
	$9 = ($9 + [-24])
	$7 = *($9)
	*($9) = [0]
	if ( ($7 == 0) ){ goto $label$52 }
	$13 = *($7 + [132])
	if ( ($13 == 0) ){ goto $label$53 }
	*(($7 + [136])) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$53
	$13 = *($7 + [120])
	if ( ($13 == 0) ){ goto $label$54 }
	*(($7 + [124])) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$54
	CALL _ZdlPv($7)
	
.LABEL $label$52
	if ( ((int_32)$14 != (int_32)$9) ){ goto $label$51 }
	$7 = *(($6 + [464]))
	goto $label$49 
	
.LABEL $label$50
	$7 = $14
	
.LABEL $label$49
	*($5) = $14
	CALL _ZdlPv($7)
	$global$0 = ($6 + [512])
	return 
	
.LABEL $label$19
	$global$0 = ($6 + [512])
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($5, $4, [8])
	*($3) = (*($3) + [8])
	$3 = *($0 + [4])
	$0 = CALL $151($0, ($1 + [16]))
	if ( ((int_32)*($0 + [8]) != (int_32)$3) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [15]), $3, [1])
	*(($3 = ($0 + [4]))) = (*($3) + [1])
	*(($1 + [40])) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [24])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10717])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	if ( ((int_32)*($6) != (int_32)$4) ){ goto $label$5 }
	CALL eosio_assert([0], [10717])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [15]), $4, [1])
	*(($3 = ($0 + [4]))) = (*($3) + [1])
	*(($1 + [32])) = ((int_32)*($2 + [15]) != (int_32)[0])
	$0 = CALL $77($0, ($1 + [36]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	$2 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [10777])
	
.LABEL $label$5
	$5 = CALL $204($4)
	$2 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $5, $4)
	*($3 + [36]) = $5
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + $4)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([160])
	$6 = CALL $158($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [148])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$4 = *($9)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $7
	*($4 + [16]) = $8
	*($3 + [24]) = [0]
	*($4) = $1
	*($9) = ($4 + [24])
	if ( $2 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $159(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($2 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $207($5)
	
.LABEL $label$7
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	$1 = *($5 + [132])
	if ( ($1 == 0) ){ goto $label$11 }
	*(($5 + [136])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$1 = *($5 + [120])
	if ( ($1 == 0) ){ goto $label$12 }
	*(($5 + [124])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$12
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [592])
	$global$0 = $2
	$3 = *($1)
	CALL memcpy(($2 + [222]), ($1 + [8]), [66])
	CALL memcpy(($2 + [156]), ($1 + [74]), [66])
	$4 = [0]
	*($2 + [152]) = [0]
	*($2 + [144]) = (int_64)0
	$5 = (*(($1 + [144])) - *($1 + [140]))
	if ( ($5 == 0) ){ goto $label$6 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL _Znwj($5)
	*(($2 + [152])) = ($6 + $5)
	*($2 + [144]) = $6
	*($2 + [148]) = $6
	$4 = *(($1 + [140]))
	$1 = (*(($1 + [144])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($6, $4, $1)
	$4 = ($6 + $1)
	*($2 + [148]) = $4
	goto $label$4 
	
.LABEL $label$6
	$6 = [0]
	$5 = [0]
	goto $label$3 
	
.LABEL $label$5
	$4 = $6
	
.LABEL $label$4
	$5 = $6
	
.LABEL $label$3
	CALL memcpy(($2 + [360]), ($2 + [156]), [66])
	CALL memcpy(($2 + [288]), ($2 + [222]), [66])
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$7 = (*($0) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($7) + $1))
	
.LABEL $label$7
	CALL memcpy(($2 + [520]), ($2 + [288]), [66])
	CALL memcpy(($2 + [448]), ($2 + [360]), [66])
	*($2 + [440]) = [0]
	*($2 + [432]) = (int_64)0
	$0 = ($4 - $5)
	if ( ($0 == 0) ){ goto $label$8 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL _Znwj($0)
	*(($2 + [440])) = ($5 + $0)
	*($2 + [432]) = $5
	*($2 + [436]) = $5
	$4 = ($4 - $6)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($5, $6, $4)
	*($2 + [436]) = ($5 + $4)
	
.LABEL $label$8
	CALL memcpy(($2 + [78]), ($2 + [520]), [66])
	CALL memcpy(($2 + [12]), ($2 + [448]), [66])
	CALL void $7((int_32 $3), (int_64 ($2 + [78])), (int_32 ($2 + [12])), (int_32 ($2 + [432])), (int_32 $1))
	$1 = *($2 + [432])
	if ( ($1 == 0) ){ goto $label$9 }
	*($2 + [436]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = *($2 + [144])
	if ( ($1 == 0) ){ goto $label$10 }
	*($2 + [148]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($2 + [592])
	return (unreachable)
	
.LABEL $label$2
	CALL $192(($2 + [144]))
	
.LABEL $label$1
	CALL $192(($2 + [432]))
	(unreachable)
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	CALL $60($0, ($1 + [32]))
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [16])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $3, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [24])
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10717])
	$3 = *($2)
	
.LABEL $label$4
	CALL memcpy($4, $3, [8])
	return *($2) = (*($2) + [8])
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [16])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $3, [8])
	*(($2 = ($0 + [4]))) = (*($2) + [8])
	return $0
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$3 = (*($4) + [8])
	*(($4 = ($0 + [4]))) = $3
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $3) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$3 = *($4)
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	$3 = (*($4) + [8])
	*($4) = $3
	$7 = (int_64)0
	$8 = [0]
	
.LOOP $label$3:
	if ( ($3 <= *($6)) ){ goto $label$4 }
	CALL eosio_assert([0], [10722])
	$3 = *($4)
	
.LABEL $label$4
	$5 = *($3)
	$9 = ($3 + [1])
	*($4) = $9
	$3 = ($8 & [255])
	$7 = ((int_64)$7 | (int_64)(CASTING uint_64)(uint_32 (($5 & [127]) << $3)))
	$8 = ($3 + [7])
	$3 = $9
	if ( ($5 & [128]) ){ goto $label$3 }
	*($1 + [16]) = $7
	$3 = ($1 + [20])
	$8 = ($0 + [8])
	if ( ((uint_32)(*($8) - $9) > (uint_32)[32]) ){ goto $label$5 }
	CALL eosio_assert([0], [10717])
	$9 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $9, [33])
	$5 = (*($3) + [33])
	*(($3 = ($0 + [4]))) = $5
	if ( ((int_32)*($8) != (int_32)$5) ){ goto $label$6 }
	CALL eosio_assert([0], [10717])
	$5 = *($3)
	
.LABEL $label$6
	CALL memcpy(($2 + [15]), $5, [1])
	*($3) = (*($3) + [1])
	*(($1 + [56])) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	*(($2 = ($4 + ((int_32)$3 * (int_32)[12]))) + [8]) = [0]
	*($2) = (int_64)0
	$3 = (*($1 + [4]) - *($1))
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL _Znwj($3)
	*($2) = $6
	*(($7 = ($2 + [4]))) = $6
	*(($2 + [8])) = ($6 + $3)
	$3 = *($1)
	$1 = (*(($1 + [4])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $3, $1)
	*($7) = (*($7) + $1)
	
.LABEL $label$6
	$6 = ($4 + ((int_32)$5 * (int_32)[12]))
	$7 = ($2 + [12])
	$5 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	*(($3 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$1 = ($4 + [-12])
	*($3) = *($1)
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($1) = (int_64)0
	$2 = $3
	$4 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$9 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	$2 = $3
	goto $label$7 
	
.LABEL $label$8
	$4 = $5
	
.LABEL $label$7
	*($0) = $2
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$1 = ($5 + [-12])
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$12 }
	*(($5 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$5 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	return (unreachable)
	
.LABEL $label$5
	CALL $192($2)
	(unreachable)
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = CALL transaction_size()
	$2 = $global$0
	$4 = ($2 - (($3 + [15]) & [-16]))
	$global$0 = $4
	$5 = CALL read_transaction($4, $3)
	CALL eosio_assert(((int_32)$3 == (int_32)$5), [10041])
	CALL sha256($4, $5, $0)
	CALL printhex($0, [32])
	$global$0 = $2
}

int_32 .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [16])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $3, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$1 = ($1 + [24])
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10717])
	$3 = *($2)
	
.LABEL $label$4
	CALL memcpy($1, $3, [8])
	*($2) = (*($2) + [8])
	return $0
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$2 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $2
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $2) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$2 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	$2 = (*($3) + [8])
	*($3) = $2
	$6 = (int_64)0
	$7 = [0]
	
.LOOP $label$3:
	if ( ($2 <= *($5)) ){ goto $label$4 }
	CALL eosio_assert([0], [10722])
	$2 = *($3)
	
.LABEL $label$4
	$4 = *($2)
	$8 = ($2 + [1])
	*($3) = $8
	$2 = ($7 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $2)))
	$7 = ($2 + [7])
	$2 = $8
	if ( ($4 & [128]) ){ goto $label$3 }
	*($1 + [16]) = $6
	$2 = ($1 + [20])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $8) > (uint_32)[32]) ){ goto $label$5 }
	CALL eosio_assert([0], [10717])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, [33])
	$2 = (*($3) + [33])
	*(($3 = ($0 + [4]))) = $2
	$6 = (int_64)0
	$7 = [0]
	
.LOOP $label$6:
	if ( ($2 <= *($5)) ){ goto $label$7 }
	CALL eosio_assert([0], [10722])
	$2 = *($3)
	
.LABEL $label$7
	$4 = *($2)
	$8 = ($2 + [1])
	*($3) = $8
	$2 = ($7 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $2)))
	$7 = ($2 + [7])
	$2 = $8
	if ( ($4 & [128]) ){ goto $label$6 }
	*($1 + [56]) = $6
	$2 = ($1 + [60])
	if ( ((uint_32)(*(($0 + [8])) - $8) > (uint_32)[32]) ){ goto $label$8 }
	CALL eosio_assert([0], [10717])
	$8 = *(($0 + [4]))
	
.LABEL $label$8
	CALL memcpy($2, $8, [33])
	*(($2 = ($0 + [4]))) = (*($2) + [33])
	return $0
}

void .FUNC $132 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*($3 + [4]) = $1
	*($3) = $1
	*($3 + [8]) = ($1 + $2)
	if ( ((uint_32)$2 > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$1
	CALL memcpy($0, $1, [8])
	$4 = ($1 + [8])
	*($3 + [4]) = $4
	$5 = ($0 + [8])
	if ( ((int_32)($2 & [-8]) != (int_32)[8]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$2
	CALL memcpy($5, $4, [8])
	*($3 + [4]) = ($1 + [16])
	CALL $151($3, ($0 + [16]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$2 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $2
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $2) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$2 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	$2 = (*($3) + [8])
	*($3) = $2
	$6 = (int_64)0
	$7 = [0]
	
.LOOP $label$3:
	if ( ($2 <= *($5)) ){ goto $label$4 }
	CALL eosio_assert([0], [10722])
	$2 = *($3)
	
.LABEL $label$4
	$4 = *($2)
	$8 = ($2 + [1])
	*($3) = $8
	$2 = ($7 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $2)))
	$7 = ($2 + [7])
	$2 = $8
	if ( ($4 & [128]) ){ goto $label$3 }
	*($1 + [16]) = $6
	$2 = ($1 + [20])
	if ( ((uint_32)(*(($0 + [8])) - $8) > (uint_32)[32]) ){ goto $label$5 }
	CALL eosio_assert([0], [10717])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, [33])
	*(($2 = ($0 + [4]))) = (*($2) + [33])
	return $0
}

int_32 .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$2 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $2
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $2) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$2 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	$2 = (*($3) + [8])
	*($3) = $2
	$6 = (int_64)0
	$7 = [0]
	
.LOOP $label$3:
	if ( ($2 <= *($5)) ){ goto $label$4 }
	CALL eosio_assert([0], [10722])
	$2 = *($3)
	
.LABEL $label$4
	$4 = *($2)
	$8 = ($2 + [1])
	*($3) = $8
	$2 = ($7 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $2)))
	$7 = ($2 + [7])
	$2 = $8
	if ( ($4 & [128]) ){ goto $label$3 }
	*($1 + [16]) = $6
	$2 = ($1 + [20])
	if ( ((uint_32)(*(($0 + [8])) - $8) > (uint_32)[32]) ){ goto $label$5 }
	CALL eosio_assert([0], [10717])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, [33])
	*(($2 = ($0 + [4]))) = (*($2) + [33])
	return $0
}

int_32 .FUNC $135 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0) = *($1)
	$2 = *(($1 + [8]))
	*(($0 + [20])) = (int_64)0
	*(($0 + [8])) = $2
	*($0 + [16]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($0 + [16])) = $3
	*(($0 + [24])) = ($3 + ($4 << [4]))
	*(($4 = ($0 + [20]))) = $3
	$5 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $6)
	*($4) = (*($4) + $6)
	
.LABEL $label$3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$3 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL _Znwj($3)
	*(($0 + [28])) = $4
	*(($0 + [36])) = ($4 + $3)
	*(($3 = ($0 + [32]))) = $4
	$6 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $6, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $192(($0 + [16]))
	
.LABEL $label$1
	CALL $192(($0 + [28]))
	(unreachable)
	return (unreachable)
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[40])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$2 }
	$5 = [107374182]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	$6 = ($2 + ((int_32)$5 * (int_32)[40]))
	$7 = ($2 + ((int_32)$3 * (int_32)[40]))
	$2 = CALL $135($7, $1)
	$8 = ($2 + [40])
	$5 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$6 }
	$10 = ($5 - $9)
	$1 = [0]
	
.LOOP $label$7:
	$2 = ($9 + $1)
	*((($5 = ($7 + $1)) + [-32])) = *(($2 + [-32]))
	*(($5 + [-40])) = *(($2 + [-40]))
	*(($3 = ($5 + [-24]))) = (int_64)0
	*(($4 = ($5 + [-16]))) = [0]
	$11 = ($2 + [-24])
	*($3) = *($11)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($5 + [-12]))) = (int_64)0
	*(($5 = ($5 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($11) = (int_64)0
	$2 = ($2 + [-4])
	*($5) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$7 }
	$2 = ($7 + $1)
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = *(($5 + [-12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($5 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$2 = ($5 + [-40])
	$1 = *(($5 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($5 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $137 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	*($4 + [16]) = [0]
	CALL $144(($4 + [16]), $0)
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$2 }
	CALL $63($4, $6)
	$5 = *($4 + [4])
	$6 = *($4)
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	*($4 + [20]) = $6
	*($4 + [16]) = $6
	*($4 + [24]) = $5
	CALL $145(($4 + [16]), $0)
	$0 = *($4)
	CALL send_deferred($1, $2, $0, (*($4 + [4]) - $0), $3)
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$3 }
	*($4 + [4]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($4 + [32])
}

int_32 .FUNC $202 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $193())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $203($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $203 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $204($1)
	
.LABEL $label$2
	*(CALL $193()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $204(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $207($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $200 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $196([33], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $201 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $206 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10812]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10816])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10812]) = [1]
	$2 = ($2 << [16])
	*([0] + [10816]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10816])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10816]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10812]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10812]) = [1]
	$3 = ($3 << [16])
	*([0] + [10816]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10816])
	
.LABEL $label$10
	*([0] + [10816]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $207 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19204])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19012]
	$3 = (((int_32)$1 * (int_32)[12]) + [19012])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $204 (int_32 $0)
{
	return CALL $205([10820], $0)
}

int_32 .FUNC $205 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $206($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)*(($1 + [8200])) == (int_32)*($9)) ){ goto $label$10 }
	CALL eosio_assert([0], [8220])
	
.LABEL $label$10
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$11:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$13 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$14 }
	
.LABEL $label$13
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$15 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$15
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$12
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$11 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $207($0)
	
.LABEL $label$1
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [16])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $3, [8])
	*(($2 = ($0 + [4]))) = (*($2) + [8])
	return $0
}

int_32 .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$2 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $2
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $2) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$2 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	$2 = (*($3) + [8])
	*($3) = $2
	$6 = (int_64)0
	$7 = [0]
	
.LOOP $label$3:
	if ( ($2 <= *($5)) ){ goto $label$4 }
	CALL eosio_assert([0], [10722])
	$2 = *($3)
	
.LABEL $label$4
	$4 = *($2)
	$8 = ($2 + [1])
	*($3) = $8
	$2 = ($7 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $2)))
	$7 = ($2 + [7])
	$2 = $8
	if ( ($4 & [128]) ){ goto $label$3 }
	*($1 + [16]) = $6
	$2 = ($1 + [20])
	if ( ((uint_32)(*(($0 + [8])) - $8) > (uint_32)[32]) ){ goto $label$5 }
	CALL eosio_assert([0], [10717])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, [33])
	*(($2 = ($0 + [4]))) = (*($2) + [33])
	return $0
}

void .FUNC $8 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL prints([9514])
	*($3 + [144]) = $2
	*($3 + [136]) = $1
	*($3 + [176]) = (int_64)0
	*($3 + [184]) = [0]
	CALL $63(($3 + [176]), [16])
	$4 = *($3 + [176])
	$5 = (*($3 + [180]) - $4)
	if ( ((int_32)$5 > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	
.LABEL $label$1
	CALL memcpy($4, ($3 + [136]), [8])
	$4 = ($4 + [8])
	$6 = (($3 + [136]) + [8])
	if ( ((int_32)($5 + [-8]) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	
.LABEL $label$2
	CALL memcpy($4, $6, [8])
	$2 = *($0)
	*($3 + [120]) = [8385]
	*($3 + [124]) = CALL $201([8385])
	*($3 + [32]) = *($3 + [120])
	$7 = *(CALL $55(($3 + [128]), ($3 + [32])))
	*($3 + [104]) = [8306]
	*($3 + [108]) = CALL $201([8306])
	*($3 + [24]) = *($3 + [104])
	$5 = CALL $55(($3 + [112]), ($3 + [24]))
	*($3 + [88]) = [8897]
	*($3 + [92]) = CALL $201([8897])
	*($3 + [16]) = *($3 + [88])
	$6 = CALL $55(($3 + [96]), ($3 + [16]))
	*($3 + [40]) = [9532]
	*($3 + [44]) = CALL $201([9532])
	*($3 + [8]) = *($3 + [40])
	$0 = CALL $55(($3 + [48]), ($3 + [8]))
	*((($3 + [56]) + [24])) = [0]
	*($3 + [56]) = $1
	*($3 + [72]) = (int_64)0
	*($3 + [64]) = *($0)
	$0 = (*($3 + [180]) - *($3 + [176]))
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$3 }
	$4 = CALL _Znwj($0)
	*(($3 + [72])) = $4
	*(($8 = ($3 + [76]))) = $4
	*(($3 + [80])) = ($4 + $0)
	$9 = *($3 + [176])
	$0 = (*($3 + [180]) - $9)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $9, $0)
	*($8) = (*($8) + $0)
	
.LABEL $label$4
	*($3 + [136]) = *($5)
	*($3 + [144]) = *($6)
	*(($0 = CALL _Znwj([16]))) = $2
	*($0 + [8]) = $7
	*(($3 + [172])) = [0]
	$4 = ($0 + [16])
	*((($3 + [136]) + [24])) = $4
	*((($3 + [136]) + [20])) = $4
	*($3 + [152]) = $0
	*($3 + [164 align=4]) = (int_64)0
	$5 = *($3 + [72])
	$4 = *((($3 + [56]) + [20]))
	$0 = (($4 + [16]) - $5)
	$1 = (CASTING uint_64)(uint_32 ($4 - $5))
	$4 = ($3 + [164])
	
.LOOP $label$5:
	$0 = ($0 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$5 }
	if ( ($0 == 0) ){ goto $label$7 }
	CALL $63($4, $0)
	$4 = *(($3 + [168]))
	$0 = *(($3 + [164]))
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	$0 = [0]
	
.LABEL $label$6
	*($3 + [196]) = $0
	*($3 + [192]) = $0
	*($3 + [200]) = $4
	*($3 + [208]) = ($3 + [192])
	*($3 + [216]) = ($3 + [56])
	CALL $65(($3 + [216]), ($3 + [208]))
	CALL $66(($3 + [136]))
	$0 = *($3 + [164])
	if ( ($0 == 0) ){ goto $label$8 }
	*(($3 + [168])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$0 = *($3 + [152])
	if ( ($0 == 0) ){ goto $label$9 }
	*(($3 + [156])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$9
	$0 = *($3 + [72])
	if ( ($0 == 0) ){ goto $label$10 }
	*(($3 + [76])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$10
	$0 = *($3 + [176])
	if ( ($0 == 0) ){ goto $label$11 }
	*($3 + [180]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$11
	$global$0 = ($3 + [224])
	return (unreachable)
	
.LABEL $label$3
	CALL $192((($3 + [56]) + [16]))
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$5
	$8 = ($2 + $7)
	CALL memcpy(($4 + [32]), $2, [8])
	$9 = ($2 + [8])
	$3 = (($4 + [32]) + [8])
	if ( ((int_32)($7 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$6
	CALL memcpy($3, $9, [8])
	*(($4 + [24])) = $8
	*($4 + [16]) = $2
	*(($4 + [20])) = ($2 + [16])
	*($4 + [8]) = $1
	*($4) = $0
	$8 = ($4 + int_32($5 >> [1]))
	$0 = *($3)
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($8) + $6))
	
.LABEL $label$7
	CALL void $8((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $207($2)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = *($0)
	$3 = ($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $164(*($1), ($0 + [16]))
	$1 = *($1)
	*($2 + [15]) = *($0 + [72])
	$4 = *($1 + [4])
	if ( ((int_32)(*($1 + [8]) - $4) > (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert([0], [10587])
	$4 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, ($2 + [15]), [1])
	*(($1 = ($1 + [4]))) = (*($1) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0)
	$5 = ($6 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($1)
	$4 = *($5 + [4])
	$7 = (int_64)0
	$8 = [0]
	
.LOOP $label$3:
	if ( ($4 <= *(($5 + [8]))) ){ goto $label$4 }
	CALL eosio_assert([0], [10722])
	$4 = *(($5 + [4]))
	
.LABEL $label$4
	$0 = *($4)
	$3 = ($4 + [1])
	*(($5 + [4])) = $3
	$4 = ($8 & [255])
	$7 = ((int_64)$7 | (int_64)(CASTING uint_64)(uint_32 (($0 & [127]) << $4)))
	$8 = ($4 + [7])
	$4 = $3
	if ( ($0 & [128]) ){ goto $label$3 }
	*($6 + [16]) = $7
	$4 = ($6 + [20])
	if ( ((uint_32)(*(($5 + [8])) - $3) > (uint_32)[32]) ){ goto $label$5 }
	CALL eosio_assert([0], [10717])
	$3 = *(($5 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $3, [33])
	*(($4 = ($5 + [4]))) = (*($4) + [33])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$0) ){ goto $label$6 }
	CALL eosio_assert([0], [10717])
	$0 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy(($2 + [15]), $0, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	*(($6 + [56])) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($4 + [16])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)(*($1 + [8]) - $3) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10587])
	$3 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($4 + [16])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$3 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

void .FUNC $2 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [224])
	$global$0 = $4
	CALL require_auth(*($0))
	CALL prints([9716])
	*($4 + [144]) = $2
	*($4 + [136]) = $1
	*($4 + [152]) = $3
	*($4 + [176]) = (int_64)0
	*($4 + [184]) = [0]
	CALL $63(($4 + [176]), [24])
	$5 = *($4 + [180])
	$6 = *($4 + [176])
	*($4 + [60]) = $6
	*($4 + [56]) = $6
	*($4 + [64]) = $5
	*($4 + [48]) = ($4 + [56])
	*($4 + [192]) = ($4 + [136])
	CALL $121(($4 + [192]), ($4 + [48]))
	$3 = *($0)
	*($4 + [120]) = [8385]
	*($4 + [124]) = CALL $201([8385])
	*($4 + [32]) = *($4 + [120])
	$2 = *(CALL $55(($4 + [128]), ($4 + [32])))
	*($4 + [104]) = [8306]
	*($4 + [108]) = CALL $201([8306])
	*($4 + [24]) = *($4 + [104])
	$6 = CALL $55(($4 + [112]), ($4 + [24]))
	*($4 + [88]) = [8897]
	*($4 + [92]) = CALL $201([8897])
	*($4 + [16]) = *($4 + [88])
	$7 = CALL $55(($4 + [96]), ($4 + [16]))
	*($4 + [40]) = [9735]
	*($4 + [44]) = CALL $201([9735])
	*($4 + [8]) = *($4 + [40])
	$0 = CALL $55(($4 + [48]), ($4 + [8]))
	*((($4 + [56]) + [24])) = [0]
	*($4 + [56]) = $1
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = *($0)
	$0 = (*($4 + [180]) - *($4 + [176]))
	if ( ($0 == 0) ){ goto $label$2 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL _Znwj($0)
	*(($4 + [72])) = $5
	*(($8 = ($4 + [76]))) = $5
	*(($4 + [80])) = ($5 + $0)
	$9 = *($4 + [176])
	$0 = (*($4 + [180]) - $9)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $9, $0)
	*($8) = (*($8) + $0)
	
.LABEL $label$2
	*($4 + [136]) = *($6)
	*($4 + [144]) = *($7)
	*(($0 = CALL _Znwj([16]))) = $3
	*($0 + [8]) = $2
	*(($4 + [172])) = [0]
	$5 = ($0 + [16])
	*((($4 + [136]) + [24])) = $5
	*((($4 + [136]) + [20])) = $5
	*($4 + [152]) = $0
	*($4 + [164 align=4]) = (int_64)0
	$6 = *($4 + [72])
	$5 = *((($4 + [56]) + [20]))
	$0 = (($5 + [16]) - $6)
	$1 = (CASTING uint_64)(uint_32 ($5 - $6))
	$5 = ($4 + [164])
	
.LOOP $label$3:
	$0 = ($0 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$3 }
	if ( ($0 == 0) ){ goto $label$5 }
	CALL $63($5, $0)
	$5 = *(($4 + [168]))
	$0 = *(($4 + [164]))
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	$0 = [0]
	
.LABEL $label$4
	*($4 + [196]) = $0
	*($4 + [192]) = $0
	*($4 + [200]) = $5
	*($4 + [208]) = ($4 + [192])
	*($4 + [216]) = ($4 + [56])
	CALL $65(($4 + [216]), ($4 + [208]))
	CALL $66(($4 + [136]))
	$0 = *($4 + [164])
	if ( ($0 == 0) ){ goto $label$6 }
	*(($4 + [168])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$0 = *($4 + [152])
	if ( ($0 == 0) ){ goto $label$7 }
	*(($4 + [156])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$7
	$0 = *($4 + [72])
	if ( ($0 == 0) ){ goto $label$8 }
	*(($4 + [76])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$0 = *($4 + [176])
	if ( ($0 == 0) ){ goto $label$9 }
	*($4 + [180]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$9
	$global$0 = ($4 + [224])
	return (unreachable)
	
.LABEL $label$1
	CALL $192((($4 + [56]) + [16]))
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [10777])
	
.LABEL $label$5
	$2 = CALL $204($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [10717])
	
.LABEL $label$8
	CALL memcpy(($3 + [24]), $7, [8])
	$8 = *($3 + [24])
	*(($5 + [8])) = $8
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	*($3 + [24]) = $8)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $8
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $154(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $207($2)
	
.LABEL $label$9
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

int_64 .FUNC $125 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [32])
	$global$0 = $3
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$15 }
	$1 = (int_64)0
	if ( ((int_64)$2 > (int_64)3904880791171104767) ){ goto $label$14 }
	if ( ((int_64)$2 > (int_64)-3109888186206126081) ){ goto $label$13 }
	if ( ((int_64)$2 <= (int_64)-5915097261842366465) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-5915097261842366464) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)-4849915446028664832) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-4849915395346792448) ){ goto $label$9 }
	goto $label$5 
	
.LABEL $label$15
	*($3 + [16]) = [8192]
	*($3 + [20]) = CALL $201([8192])
	*($3 + [8]) = *($3 + [16])
	$1 = ( (int_64)1 ? (int_64)3 : ((int_64)*(CALL $55(($3 + [24]), ($3 + [8]))) == (int_64)$2) )
	goto $label$1 
	
.LABEL $label$14
	if ( ((int_64)$2 > (int_64)4852743800616654303) ){ goto $label$12 }
	if ( ((int_64)$2 <= (int_64)4730614997374550015) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)4730614997374550016) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)4730614999611867136) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)4852739417421381632) ){ goto $label$1 }
	goto $label$5 
	
.LABEL $label$13
	if ( ((int_64)$2 <= (int_64)3626324442490077183) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)3626324442490077184) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)3626397281305837568) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)3849304916161986560) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$12
	if ( ((int_64)$2 <= (int_64)5377987495347093503) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)5377987495347093504) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)6761222076679323648) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)8421058852606325248) ){ goto $label$5 }
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return (int_64)2
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)-7954134489490784256) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-7901691861026209792) ){ goto $label$5 }
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return (int_64)5
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)3904880791171104768) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)4335660026808139776) ){ goto $label$5 }
	$global$0 = ($3 + [32])
	return (int_64)4
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-3109888186206126080) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)3626087240299970560) ){ goto $label$1 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)4852743800616654304) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)4852992390995116032) ){ goto $label$1 }
	
.LABEL $label$5
	CALL eosio_assert([0], [10094])
	$global$0 = ($3 + [32])
	return (int_64)3
	
.LABEL $label$4
	$global$0 = ($3 + [32])
	return (int_64)4
	
.LABEL $label$3
	$global$0 = ($3 + [32])
	return (int_64)5
	
.LABEL $label$2
	$global$0 = ($3 + [32])
	return (int_64)1
	
.LABEL $label$1
	$global$0 = ($3 + [32])
	return $1
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $152(*($1), ($4 + [16]))
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [112]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $112(($4 + [16]), ($4 + [112]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($8 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4)
	$3 = *($8)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [96])
	*($4 + [32]) = $0
	*($4 + [112]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	$1 = *($4 + [80])
	$9 = *($4 + [72])
	$10 = *($4 + [64])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $10), (int_64 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $207($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$5 = ($global$0 - [304])
	$global$0 = $5
	CALL require_auth(*($0))
	CALL prints([9698])
	*(($6 = ($5 + [240]))) = *(($3 + [12]))
	*(($7 = ($5 + [248]))) = *(($3 + [20]))
	*(($8 = ($5 + [256]))) = *(($3 + [28]))
	*(($9 = ($5 + [264]))) = *(($3 + [36]))
	*($5 + [232]) = *($3 + [4 align=4])
	$3 = *($3)
	*(($5 + [184])) = [0]
	*((($5 + [128]) + [20])) = *($5 + [232])
	*((($5 + [128]) + [28])) = *($6)
	*((($5 + [128]) + [36])) = *($7)
	*(($5 + [172])) = *($8)
	*(($5 + [180])) = *($9)
	*(($5 + [189])) = *(($5 + [229]))
	*(($5 + [191])) = *(($5 + [231]))
	*($5 + [136]) = $2
	*($5 + [128]) = $1
	*($5 + [144]) = $3
	*($5 + [185 align=1]) = *($5 + [225 align=1])
	*(($5 + [192])) = (int_64)0
	*($5 + [200]) = $4
	*($5 + [208]) = (int_64)0
	*($5 + [216]) = [0]
	$2 = (CASTING uint_64)(uint_32 $3)
	$3 = [59]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	CALL $63(($5 + [208]), $3)
	$3 = *($5 + [212])
	$4 = *($5 + [208])
	*($5 + [52]) = $4
	*($5 + [48]) = $4
	*($5 + [56]) = $3
	*($5 + [40]) = ($5 + [48])
	*($5 + [272]) = ($5 + [128])
	CALL $123(($5 + [272]), ($5 + [40]))
	$2 = *($0)
	*($5 + [112]) = [8385]
	*($5 + [116]) = CALL $201([8385])
	*($5 + [24]) = *($5 + [112])
	$10 = *(CALL $55(($5 + [120]), ($5 + [24])))
	*($5 + [96]) = [8306]
	*($5 + [100]) = CALL $201([8306])
	*($5 + [16]) = *($5 + [96])
	$4 = CALL $55(($5 + [104]), ($5 + [16]))
	*($5 + [80]) = [8897]
	*($5 + [84]) = CALL $201([8897])
	*($5 + [8]) = *($5 + [80])
	$6 = CALL $55(($5 + [88]), ($5 + [8]))
	*($5 + [32]) = [8515]
	*($5 + [36]) = CALL $201([8515])
	*($5) = *($5 + [32])
	$3 = CALL $55(($5 + [40]), $5)
	*((($5 + [48]) + [24])) = [0]
	*($5 + [48]) = $1
	*($5 + [64]) = (int_64)0
	*($5 + [56]) = *($3)
	$3 = (*($5 + [212]) - *($5 + [208]))
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$2 }
	$0 = CALL _Znwj($3)
	*(($5 + [64])) = $0
	*(($7 = ($5 + [68]))) = $0
	*(($5 + [72])) = ($0 + $3)
	$8 = *($5 + [208])
	$3 = (*($5 + [212]) - $8)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($0, $8, $3)
	*($7) = (*($7) + $3)
	
.LABEL $label$3
	*($5 + [128]) = *($4)
	*($5 + [136]) = *($6)
	*(($3 = CALL _Znwj([16]))) = $2
	*($3 + [8]) = $10
	*(($5 + [164])) = [0]
	$0 = ($3 + [16])
	*((($5 + [128]) + [24])) = $0
	*((($5 + [128]) + [20])) = $0
	*($5 + [144]) = $3
	*($5 + [156 align=4]) = (int_64)0
	$4 = *($5 + [64])
	$0 = *((($5 + [48]) + [20]))
	$3 = (($0 + [16]) - $4)
	$2 = (CASTING uint_64)(uint_32 ($0 - $4))
	$0 = ($5 + [156])
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$4 }
	if ( ($3 == 0) ){ goto $label$6 }
	CALL $63($0, $3)
	$0 = *(($5 + [160]))
	$3 = *(($5 + [156]))
	goto $label$5 
	
.LABEL $label$6
	$0 = [0]
	$3 = [0]
	
.LABEL $label$5
	*($5 + [276]) = $3
	*($5 + [272]) = $3
	*($5 + [280]) = $0
	*($5 + [288]) = ($5 + [272])
	*($5 + [296]) = ($5 + [48])
	CALL $65(($5 + [296]), ($5 + [288]))
	CALL $66(($5 + [128]))
	$3 = *($5 + [156])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($5 + [160])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$3 = *($5 + [144])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($5 + [148])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$3 = *($5 + [64])
	if ( ($3 == 0) ){ goto $label$9 }
	*(($5 + [68])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$9
	$3 = *($5 + [208])
	if ( ($3 == 0) ){ goto $label$10 }
	*($5 + [212]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$10
	$global$0 = ($5 + [304])
	return (unreachable)
	
.LABEL $label$2
	CALL $192((($5 + [48]) + [16]))
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [156])) = [0]
	*(($4 + [148])) = (int_64)0
	*(($4 + [140])) = (int_64)0
	*(($4 + [132])) = (int_64)0
	*(($4 + [124])) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = [0]
	*($4 + [160]) = [0]
	*($4 + [92]) = $2
	*($4 + [88]) = $2
	*($4 + [96]) = ($2 + $7)
	*($4 + [208]) = ($4 + [88])
	*($4 + [248]) = ($4 + [104])
	CALL $122(($4 + [248]), ($4 + [208]))
	*(($8 = (($4 + [40]) + [8]))) = *($4 + [96])
	*($4 + [40]) = *($4 + [88])
	*(($3 = (($4 + [208]) + [8]))) = *($8)
	*($4 + [208]) = *($4 + [40])
	$8 = *($3)
	*((($4 + [248]) + [8])) = $8
	*((($4 + [56]) + [24])) = $8
	*($4 + [56]) = $0
	*($4 + [64]) = $1
	$0 = *($4 + [208])
	*($4 + [72]) = $0
	*($4 + [248]) = $0
	*(($8 = (($4 + [168]) + [8]))) = *((($4 + [104]) + [24]))
	*(($9 = (($4 + [168]) + [16]))) = *((($4 + [104]) + [32]))
	*(($10 = (($4 + [168]) + [24]))) = *(($4 + [144]))
	*(($11 = (($4 + [168]) + [32]))) = *(($4 + [152]))
	*($4 + [168]) = *($4 + [120])
	$0 = *($4 + [112])
	$1 = *($4 + [104])
	$12 = *($4 + [160])
	*((($4 + [208]) + [32])) = *($11)
	*((($4 + [208]) + [24])) = *($10)
	*((($4 + [208]) + [16])) = *($9)
	*($3) = *($8)
	*($4 + [208]) = *($4 + [168])
	$3 = (($4 + [56]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$13 = *((($4 + [208]) + [32]))
	*((($4 + [248]) + [32])) = $13
	$14 = *((($4 + [208]) + [24]))
	*((($4 + [248]) + [24])) = $14
	$15 = *((($4 + [208]) + [16]))
	*((($4 + [248]) + [16])) = $15
	$16 = *((($4 + [208]) + [8]))
	*((($4 + [248]) + [8])) = $16
	*(($4 + [8])) = $16
	*(($4 + [16])) = $15
	*(($4 + [24])) = $14
	*(($4 + [32])) = $13
	$13 = *($4 + [208])
	*($4) = $13
	*($4 + [248]) = $13
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $4), (int_32 ((int_32)($12 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $207($2)
	
.LABEL $label$5
	$global$0 = ($4 + [288])
	return [1]
}

void .FUNC $17 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL require_auth(*($0))
	*($4 + [32]) = [8642]
	*($4 + [36]) = CALL $201([8642])
	*($4 + [8]) = *($4 + [32])
	$5 = CALL $55(($4 + [40]), ($4 + [8]))
	*($4 + [24]) = [0]
	*($4 + [16]) = (int_64)0
	CALL $111(($4 + [16]), $3)
	CALL $109($0, $2, $1, $2, *($5), (int_64)0, ($4 + [16]))
	$0 = *($4 + [16])
	if ( ($0 == 0) ){ goto $label$1 }
	*($4 + [20]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL require_auth(*($0))
	*($4 + [8]) = $1
	*($4) = ((int_64)((int_64)$3 & (int_64)4294967295) | (int_64)((int_64)$2 & (int_64)-4294967296))
	CALL cancel_deferred($4)
	CALL $70($0, $1, $2, $3)
	CALL prints([8928])
	$global$0 = ($4 + [16])
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [224])
	$global$0 = $5
	CALL require_auth(*($0))
	CALL prints([9669])
	*(($6 = (($5 + [136]) + [24]))) = *(($3 + [8]))
	*(($5 + [168])) = *(($3 + [16]))
	*($5 + [144]) = $2
	*($5 + [136]) = $1
	*($5 + [176]) = (int_64)0
	*($5 + [184]) = [0]
	*($5 + [152]) = *($3)
	CALL $63(($5 + [176]), [40])
	$3 = *($5 + [180])
	$7 = *($5 + [176])
	*($5 + [60]) = $7
	*($5 + [56]) = $7
	*($5 + [64]) = $3
	*($5 + [48]) = ($5 + [56])
	*($5 + [192]) = ($5 + [136])
	CALL $118(($5 + [192]), ($5 + [48]))
	$2 = *($0)
	*($5 + [120]) = [8385]
	*($5 + [124]) = CALL $201([8385])
	*($5 + [32]) = *($5 + [120])
	$8 = *(CALL $55(($5 + [128]), ($5 + [32])))
	*($5 + [104]) = [8306]
	*($5 + [108]) = CALL $201([8306])
	*($5 + [24]) = *($5 + [104])
	$7 = CALL $55(($5 + [112]), ($5 + [24]))
	*($5 + [88]) = [8897]
	*($5 + [92]) = CALL $201([8897])
	*($5 + [16]) = *($5 + [88])
	$9 = CALL $55(($5 + [96]), ($5 + [16]))
	*($5 + [40]) = [9687]
	*($5 + [44]) = CALL $201([9687])
	*($5 + [8]) = *($5 + [40])
	$3 = CALL $55(($5 + [48]), ($5 + [8]))
	*((($5 + [56]) + [24])) = [0]
	*($5 + [56]) = $1
	*($5 + [72]) = (int_64)0
	*($5 + [64]) = *($3)
	$3 = (*($5 + [180]) - *($5 + [176]))
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$0 = CALL _Znwj($3)
	*(($5 + [72])) = $0
	*(($10 = ($5 + [76]))) = $0
	*(($5 + [80])) = ($0 + $3)
	$11 = *($5 + [176])
	$3 = (*($5 + [180]) - $11)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($0, $11, $3)
	*($10) = (*($10) + $3)
	
.LABEL $label$2
	*($5 + [136]) = *($7)
	*($5 + [144]) = *($9)
	*(($3 = CALL _Znwj([16]))) = $2
	*($3 + [8]) = $8
	*(($5 + [172])) = [0]
	$0 = ($3 + [16])
	*($6) = $0
	*((($5 + [136]) + [20])) = $0
	*($5 + [152]) = $3
	*($5 + [164 align=4]) = (int_64)0
	$6 = *($5 + [72])
	$0 = *((($5 + [56]) + [20]))
	$3 = (($0 + [16]) - $6)
	$1 = (CASTING uint_64)(uint_32 ($0 - $6))
	$0 = ($5 + [164])
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$3 }
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $63($0, $3)
	$0 = *(($5 + [168]))
	$3 = *(($5 + [164]))
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	$3 = [0]
	
.LABEL $label$4
	*($5 + [196]) = $3
	*($5 + [192]) = $3
	*($5 + [200]) = $0
	*($5 + [208]) = ($5 + [192])
	*($5 + [216]) = ($5 + [56])
	CALL $65(($5 + [216]), ($5 + [208]))
	CALL $66(($5 + [136]))
	$3 = *($5 + [164])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($5 + [168])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$3 = *($5 + [152])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($5 + [156])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$3 = *($5 + [72])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($5 + [76])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$3 = *($5 + [176])
	if ( ($3 == 0) ){ goto $label$9 }
	*($5 + [180]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$9
	$global$0 = ($5 + [224])
	return (unreachable)
	
.LABEL $label$1
	CALL $192((($5 + [56]) + [16]))
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [88]) + [24]))) = (int_64)0
	*(($9 = ($4 + [120]))) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [128]) = [0]
	*($4 + [76]) = $2
	*($4 + [72]) = $2
	*($4 + [80]) = ($2 + $7)
	*($4 + [184]) = ($4 + [72])
	*($4 + [40]) = ($4 + [88])
	CALL $119(($4 + [40]), ($4 + [184]))
	*(($10 = (($4 + [24]) + [8]))) = *($4 + [80])
	*($4 + [24]) = *($4 + [72])
	*(($3 = (($4 + [160]) + [8]))) = *($10)
	*($4 + [160]) = *($4 + [24])
	$10 = *($3)
	*((($4 + [184]) + [8])) = $10
	*((($4 + [40]) + [24])) = $10
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$0 = *($4 + [160])
	*($4 + [56]) = $0
	*($4 + [184]) = $0
	*(($10 = (($4 + [136]) + [8]))) = *($8)
	*(($8 = (($4 + [136]) + [16]))) = *($9)
	*($4 + [136]) = *($4 + [104])
	$0 = *($4 + [96])
	$1 = *($4 + [88])
	$9 = *($4 + [128])
	*((($4 + [160]) + [16])) = *($8)
	*($3) = *($10)
	*($4 + [160]) = *($4 + [136])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$11 = *((($4 + [160]) + [16]))
	*((($4 + [184]) + [16])) = $11
	$12 = *((($4 + [160]) + [8]))
	*((($4 + [184]) + [8])) = $12
	*(($4 + [8])) = $12
	*(($4 + [16])) = $11
	$11 = *($4 + [160])
	*($4) = $11
	*($4 + [184]) = $11
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $4), (int_32 ((int_32)($9 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $207($2)
	
.LABEL $label$5
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [480])
	$global$0 = $5
	*($5 + [464]) = [8306]
	*($5 + [468]) = CALL $201([8306])
	*($5 + [136]) = *($5 + [464])
	CALL require_auth(*(CALL $55(($5 + [472]), ($5 + [136]))))
	*($5 + [456]) = $2
	$6 = ((int_64)((int_64)$4 & (int_64)4294967295) | (int_64)((int_64)$3 & (int_64)-4294967296))
	*($5 + [448]) = $6
	CALL $113($5, $1, $6, $2)
	*($5 + [392]) = [8306]
	*($5 + [396]) = CALL $201([8306])
	*($5 + [128]) = *($5 + [392])
	$7 = CALL $55(($5 + [400]), ($5 + [128]))
	$8 = [0]
	*(($5 + [440])) = [0]
	*($5 + [416]) = $1
	*($5 + [424]) = (int_64)-1
	*($5 + [432]) = (int_64)0
	*($5 + [444]) = [0]
	*($5 + [408]) = *($7)
	*($5 + [384]) = ($5 + [408])
	CALL $103(($5 + [320]), ($5 + [384]), ($5 + [448]))
	$7 = [0]
	$9 = *($5 + [324])
	if ( ($9 == 0) ){ goto $label$1 }
	$7 = ( $9 ? [0] : (int_64)(((int_64)((int_64)*($5 + [448]) ^ (int_64)*($9 + [16])) | (int_64)((int_64)*($5 + [456]) ^ (int_64)*(($9 + [24])))) == 0) )
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9285])
	*($5 + [376]) = [0]
	*($5 + [368]) = (int_64)0
	$9 = (*(($7 + [48])) - *($7 + [44]))
	if ( ($9 == 0) ){ goto $label$6 }
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$3 }
	$8 = CALL _Znwj($9)
	*(($5 + [376])) = ($8 + $9)
	*($5 + [368]) = $8
	*($5 + [372]) = $8
	$9 = *(($7 + [44]))
	$7 = (*(($7 + [48])) - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($8, $9, $7)
	$8 = (*($5 + [372]) + $7)
	*($5 + [372]) = $8
	$7 = *($5 + [368])
	goto $label$4 
	
.LABEL $label$6
	$7 = [0]
	goto $label$4 
	
.LABEL $label$5
	$7 = $8
	
.LABEL $label$4
	*(($5 + [360])) = [0]
	*($5 + [328]) = (int_64)0
	*($5 + [320]) = (int_64)0
	*($5 + [336]) = (int_64)0
	*($5 + [352]) = (int_64)0
	*($5 + [260]) = $7
	*($5 + [256]) = $7
	*($5 + [264]) = $8
	CALL $104(($5 + [256]), ($5 + [320]))
	CALL eosio_assert(((int_64)*($5 + [320]) == (int_64)$1), [9329])
	CALL eosio_assert(((int_64)*($5 + [328]) == (int_64)$2), [9346])
	CALL eosio_assert(((int_64)*($5 + [336]) == (int_64)$3), [9365])
	CALL eosio_assert(((int_64)*($5 + [344]) == (int_64)$4), [9391])
	*($5 + [312]) = [8874]
	*($5 + [316]) = CALL $201([8874])
	*($5 + [120]) = *($5 + [312])
	if ( ((int_64)*(CALL $55(($5 + [256]), ($5 + [120]))) == (int_64)$3) ){ goto $label$8 }
	*($5 + [296]) = [8919]
	*($5 + [300]) = CALL $201([8919])
	*($5 + [112]) = *($5 + [296])
	if ( ((int_64)*(CALL $55(($5 + [304]), ($5 + [112]))) != (int_64)$3) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $62($0, $1, $3, ($5 + [352]), [0])
	goto $label$2 
	
.LABEL $label$7
	$7 = *((($5 + [320]) + [32]))
	*(($8 = (($5 + [256]) + [8]))) = *(($7 + [12]))
	*(($9 = (($5 + [256]) + [16]))) = *(($7 + [20]))
	*(($10 = (($5 + [256]) + [24]))) = *(($7 + [28]))
	*(($11 = (($5 + [256]) + [32]))) = *(($7 + [36]))
	*($5 + [256]) = *($7 + [4 align=4])
	$7 = *($7)
	if ( ((int_64)$1 != (int_64)$2) ){ goto $label$9 }
	*((($5 + [144]) + [12])) = *($8)
	*((($5 + [144]) + [20])) = *($9)
	*((($5 + [144]) + [28])) = *($10)
	*((($5 + [144]) + [36])) = *($11)
	*(($5 + [191])) = *(($5 + [310]))
	*(($5 + [189])) = *(($5 + [308]))
	*($5 + [148 align=4]) = *($5 + [256])
	*($5 + [144]) = $7
	*($5 + [184]) = [0]
	*($5 + [185 align=1]) = *($5 + [304 align=1])
	*($5 + [192]) = (int_64)0
	*(($5 + [48])) = (int_64)0
	*(($5 + [40])) = *($5 + [184])
	*(($5 + [32])) = *((($5 + [144]) + [32]))
	*(($5 + [24])) = *((($5 + [144]) + [24]))
	*(($5 + [16])) = *((($5 + [144]) + [16]))
	*(($5 + [8])) = *((($5 + [144]) + [8]))
	*($5) = *($5 + [144])
	CALL $58($0, $2, $3, $4, $5, [0])
	goto $label$2 
	
.LABEL $label$9
	*((($5 + [200]) + [12])) = *($8)
	*((($5 + [200]) + [20])) = *($9)
	*((($5 + [200]) + [28])) = *($10)
	*((($5 + [200]) + [36])) = *($11)
	*(($5 + [247])) = *(($5 + [310]))
	*(($5 + [245])) = *(($5 + [308]))
	*($5 + [204 align=4]) = *($5 + [256])
	*($5 + [200]) = $7
	*($5 + [240]) = [0]
	*($5 + [241 align=1]) = *($5 + [304 align=1])
	*($5 + [248]) = (int_64)0
	*(($5 + [104])) = (int_64)0
	*(($5 + [96])) = *($5 + [240])
	*((($5 + [56]) + [32])) = *((($5 + [200]) + [32]))
	*((($5 + [56]) + [24])) = *((($5 + [200]) + [24]))
	*((($5 + [56]) + [16])) = *((($5 + [200]) + [16]))
	*((($5 + [56]) + [8])) = *((($5 + [200]) + [8]))
	*($5 + [56]) = *($5 + [200])
	CALL $58($0, $1, $3, $4, ($5 + [56]), [2592000])
	goto $label$2 
	
.LABEL $label$3
	CALL $192(($5 + [368]))
	
.LABEL $label$2
	CALL prints([9463])
	CALL $84($0, $1, *($5 + [448]), *($5 + [456]))
	$7 = *(($5 + [352]))
	if ( ($7 == 0) ){ goto $label$10 }
	*(($5 + [356])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$7 = *($5 + [368])
	if ( ($7 == 0) ){ goto $label$11 }
	*($5 + [372]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$11
	$9 = *($5 + [432])
	if ( ($9 == 0) ){ goto $label$12 }
	$10 = ($5 + [436])
	$8 = *($10)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$14 }
	
.LOOP $label$15:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$16 }
	$0 = *($7 + [44])
	if ( ($0 == 0) ){ goto $label$17 }
	*(($7 + [48])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$17
	$0 = *($7 + [32])
	if ( ($0 == 0) ){ goto $label$18 }
	*(($7 + [36])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$18
	CALL _ZdlPv($7)
	
.LABEL $label$16
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$15 }
	$7 = *(($5 + [432]))
	goto $label$13 
	
.LABEL $label$14
	$7 = $9
	
.LABEL $label$13
	*($10) = $9
	CALL _ZdlPv($7)
	
.LABEL $label$12
	$global$0 = ($5 + [480])
	(unreachable)
}

void .FUNC $185 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [164])) = [0]
	*(($4 + [156])) = (int_64)0
	*(($4 + [148])) = (int_64)0
	*(($4 + [140])) = (int_64)0
	*(($4 + [132])) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = [0]
	*($4 + [100]) = $2
	*($4 + [96]) = $2
	*($4 + [104]) = ($2 + $7)
	*($4 + [208]) = ($4 + [96])
	*($4 + [248]) = ($4 + [112])
	CALL $110(($4 + [248]), ($4 + [208]))
	*(($8 = (($4 + [48]) + [8]))) = *($4 + [104])
	*($4 + [48]) = *($4 + [96])
	*(($3 = (($4 + [208]) + [8]))) = *($8)
	*($4 + [208]) = *($4 + [48])
	$8 = *($3)
	*((($4 + [248]) + [8])) = $8
	*((($4 + [64]) + [24])) = $8
	*($4 + [64]) = $0
	*($4 + [72]) = $1
	$0 = *($4 + [208])
	*($4 + [80]) = $0
	*($4 + [248]) = $0
	*(($8 = (($4 + [168]) + [8]))) = *((($4 + [112]) + [24]))
	*(($9 = (($4 + [168]) + [16]))) = *((($4 + [112]) + [32]))
	*(($10 = (($4 + [168]) + [24]))) = *(($4 + [152]))
	*(($11 = (($4 + [168]) + [32]))) = *(($4 + [160]))
	*($4 + [168]) = *($4 + [128])
	$0 = *($4 + [120])
	$1 = *($4 + [112])
	*((($4 + [208]) + [32])) = *($11)
	*((($4 + [208]) + [24])) = *($10)
	*((($4 + [208]) + [16])) = *($9)
	*($3) = *($8)
	*($4 + [208]) = *($4 + [168])
	$3 = (($4 + [64]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$12 = *((($4 + [208]) + [32]))
	*((($4 + [248]) + [32])) = $12
	$13 = *((($4 + [208]) + [24]))
	*((($4 + [248]) + [24])) = $13
	$14 = *((($4 + [208]) + [16]))
	*((($4 + [248]) + [16])) = $14
	$15 = *((($4 + [208]) + [8]))
	*((($4 + [248]) + [8])) = $15
	*((($4 + [8]) + [8])) = $15
	*((($4 + [8]) + [16])) = $14
	*((($4 + [8]) + [24])) = $13
	*((($4 + [8]) + [32])) = $12
	$12 = *($4 + [208])
	*($4 + [8]) = $12
	*($4 + [248]) = $12
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $207($2)
	
.LABEL $label$5
	$global$0 = ($4 + [288])
	return [1]
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$3 = ($global$0 - [624])
	$global$0 = $3
	*(($3 + [588])) = [0]
	*($3 + [544]) = (int_64)0
	*($3 + [552]) = (int_64)0
	*($3 + [560]) = (int_64)0
	*($3 + [568]) = (int_64)0
	*($3 + [580 align=4]) = (int_64)0
	$4 = *($2 + [4])
	$5 = *($2)
	*($3 + [332]) = $5
	*($3 + [328]) = $5
	*($3 + [336]) = $4
	CALL $96(($3 + [328]), ($3 + [544]))
	$5 = *($3 + [576])
	$6 = *($3 + [568])
	$7 = *($3 + [560])
	CALL memcpy(($3 + [472]), $1, [66])
	*($3 + [464]) = [0]
	*($3 + [456]) = (int_64)0
	$1 = (*($2 + [4]) - *($2))
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$3 }
	$4 = CALL _Znwj($1)
	*(($3 + [464])) = ($4 + $1)
	*($3 + [456]) = $4
	*($3 + [460]) = $4
	$1 = *($2)
	$2 = (*(($2 + [4])) - $1)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $1, $2)
	*($3 + [460]) = (*($3 + [460]) + $2)
	
.LABEL $label$4
	CALL memcpy(($3 + [62]), ($3 + [472]), [66])
	CALL $94($0, $7, $6, ((int_32)($5 & [255]) != (int_32)[0]), ($3 + [62]), ($3 + [456]))
	$2 = *($3 + [456])
	if ( ($2 == 0) ){ goto $label$5 }
	*($3 + [460]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	*($3 + [400]) = [8306]
	*($3 + [404]) = CALL $201([8306])
	*($3 + [48]) = *($3 + [400])
	$2 = CALL $55(($3 + [408]), ($3 + [48]))
	*(($3 + [448])) = [0]
	*($3 + [432]) = (int_64)-1
	*($3 + [440]) = (int_64)0
	$8 = *($2)
	*($3 + [416]) = $8
	*($3 + [424]) = $7
	$1 = [0]
	$2 = CALL db_find_i64($8, $7, (int_64)-4139260905483403264, $6)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	$1 = CALL $97(($3 + [416]), $2)
	if ( ((int_32)*($1 + [144]) == (int_32)($3 + [416])) ){ goto $label$6 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [8444])
	$8 = *($3 + [544])
	$1 = *(($1 + [124]))
	$2 = *($1 + [120])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$7 }
	
.LOOP $label$8:
	if ( ((int_64)*($2) == (int_64)$8) ){ goto $label$7 }
	$2 = ($2 + [8])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$8 }
	$2 = $1
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$2 != (int_32)$1), [8473])
	$9 = *(($3 + [552]))
	*($3 + [392]) = [0]
	*($3 + [384]) = (int_64)0
	$2 = (*(($3 + [584])) - *($3 + [580]))
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$2 }
	$1 = CALL _Znwj($2)
	*(($3 + [392])) = ($1 + $2)
	*($3 + [384]) = $1
	*($3 + [388]) = $1
	$4 = *(($3 + [580]))
	$2 = (*(($3 + [584])) - $4)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $4, $2)
	*($3 + [388]) = (*($3 + [388]) + $2)
	
.LABEL $label$9
	*($3 + [376]) = [8192]
	*($3 + [380]) = CALL $201([8192])
	*($3 + [40]) = *($3 + [376])
	if ( ((int_64)$9 != (int_64)*(CALL $55(($3 + [328]), ($3 + [40])))) ){ goto $label$10 }
	*(($2 = (($3 + [328]) + [24]))) = (int_64)0
	*(($3 + [368])) = [0]
	*($3 + [328]) = (int_64)0
	*($3 + [336]) = (int_64)0
	*($3 + [344]) = (int_64)0
	*($3 + [360]) = (int_64)0
	$1 = *($3 + [388])
	$4 = *($3 + [384])
	*($3 + [196]) = $4
	*($3 + [192]) = $4
	*($3 + [200]) = $1
	CALL $81(($3 + [192]), ($3 + [328]))
	*(($1 = (($3 + [312]) + [8]))) = *($2)
	*($3 + [312]) = *($3 + [344])
	$10 = *($0)
	*($3 + [256]) = [8385]
	*($3 + [260]) = CALL $201([8385])
	*($3 + [32]) = *($3 + [256])
	$11 = *(CALL $55(($3 + [264]), ($3 + [32])))
	$12 = *($0)
	*($3 + [240]) = [8505]
	*($3 + [244]) = CALL $201([8505])
	*($3 + [24]) = *($3 + [240])
	$2 = CALL $55(($3 + [248]), ($3 + [24]))
	*(($4 = (($3 + [160]) + [8]))) = *($1)
	*($3 + [160]) = *($3 + [312])
	$13 = *($4)
	*((($3 + [192]) + [8])) = $13
	*(($1 = (($3 + [176]) + [8]))) = $13
	$13 = *($3 + [160])
	*($3 + [176]) = $13
	*($3 + [192]) = $13
	*((($3 + [192]) + [32])) = $8
	*(($4 = (($3 + [272]) + [24]))) = [0]
	*((($3 + [192]) + [24])) = *($1)
	*($3 + [200]) = $6
	*($3 + [192]) = $7
	*($3 + [232]) = [0]
	*($3 + [272]) = $12
	*($3 + [288]) = (int_64)0
	*($3 + [208]) = *($3 + [176])
	*($3 + [280]) = *($2)
	*(($2 = CALL _Znwj([16]))) = $10
	*($2 + [8]) = $11
	*(($3 + [308])) = [0]
	$1 = ($2 + [16])
	*($4) = $1
	*(($3 + [292])) = $1
	*($3 + [288]) = $2
	*($3 + [300 align=4]) = (int_64)0
	CALL $63(($3 + [300]), [41])
	$4 = (($3 + [272]) + [32])
	$2 = *($4)
	$1 = *($3 + [300])
	*($3 + [596]) = $1
	*($3 + [592]) = $1
	*($3 + [600]) = $2
	*($3 + [608]) = ($3 + [592])
	*($3 + [616]) = ($3 + [192])
	CALL $98(($3 + [616]), ($3 + [608]))
	CALL $66(($3 + [272]))
	$2 = *($3 + [300])
	if ( ($2 == 0) ){ goto $label$11 }
	*($4) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$2 = *($3 + [288])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($3 + [292])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	if ( ((*($3 + [360]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [368])))
	
.LABEL $label$10
	*(($3 + [360])) = [0]
	*($3 + [336]) = $9
	*($3 + [328]) = $8
	*($3 + [344]) = $7
	*($3 + [352]) = (int_64)0
	$1 = [0]
	$4 = [0]
	$2 = (*($3 + [388]) - *($3 + [384]))
	if ( ($2 == 0) ){ goto $label$13 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$1 }
	$1 = CALL _Znwj($2)
	*(($3 + [352])) = $1
	*(($5 = ($3 + [356]))) = $1
	*(($3 + [360])) = ($1 + $2)
	$4 = *($3 + [384])
	$2 = (*($3 + [388]) - $4)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$14 }
	CALL memcpy($1, $4, $2)
	$4 = (*($5) + $2)
	*($5) = $4
	$1 = *($3 + [352])
	goto $label$13 
	
.LABEL $label$14
	$4 = $1
	
.LABEL $label$13
	*($3 + [280]) = [0]
	*($3 + [272]) = (int_64)0
	$2 = (($4 + [24]) - $1)
	$8 = (CASTING uint_64)(uint_32 ($4 - $1))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	if ( ($2 == 0) ){ goto $label$17 }
	CALL $63(($3 + [272]), $2)
	$1 = *($3 + [276])
	$2 = *($3 + [272])
	goto $label$16 
	
.LABEL $label$17
	$1 = [0]
	$2 = [0]
	
.LABEL $label$16
	*($3 + [196]) = $2
	*($3 + [192]) = $2
	*($3 + [200]) = $1
	*($3 + [176]) = ($3 + [192])
	*($3 + [312]) = ($3 + [328])
	CALL $99(($3 + [312]), ($3 + [176]))
	$2 = *($3 + [352])
	if ( ($2 == 0) ){ goto $label$18 }
	*(($3 + [356])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$18
	*(($3 + [364])) = [0]
	*($3 + [356 align=4]) = (int_64)0
	$8 = *($0)
	*($3 + [144]) = [8385]
	*($3 + [148]) = CALL $201([8385])
	*($3 + [16]) = *($3 + [144])
	$2 = CALL $55(($3 + [152]), ($3 + [16]))
	*($3 + [192]) = $8
	*($3 + [200]) = *($2)
	*((($2 = CALL _Znwj([16])) + [8])) = *($3 + [200])
	*($2) = *($3 + [192])
	$1 = ($2 + [16])
	*(($3 + [348])) = $1
	*(($3 + [352])) = $1
	*($3 + [344]) = $2
	*($3 + [136]) = [8306]
	*($3 + [140]) = CALL $201([8306])
	*($3 + [8]) = *($3 + [136])
	*($3 + [328]) = *(CALL $55(($3 + [192]), ($3 + [8])))
	*($3 + [128]) = [8392]
	*($3 + [132]) = CALL $201([8392])
	*($3) = *($3 + [128])
	*($3 + [336]) = *(CALL $55(($3 + [192]), $3))
	CALL $73(($3 + [356]), *($3 + [272]), *($3 + [276]))
	CALL $66(($3 + [328]))
	$2 = *($3 + [356])
	if ( ($2 == 0) ){ goto $label$19 }
	*(($3 + [360])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$19
	$2 = *((($3 + [328]) + [16]))
	if ( ($2 == 0) ){ goto $label$20 }
	*(($3 + [348])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$20
	$2 = *($3 + [272])
	if ( ($2 == 0) ){ goto $label$21 }
	*($3 + [276]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$21
	$2 = *($3 + [384])
	if ( ($2 == 0) ){ goto $label$22 }
	*($3 + [388]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$22
	$4 = *($3 + [440])
	if ( ($4 == 0) ){ goto $label$23 }
	$5 = ($3 + [444])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$25 }
	
.LOOP $label$26:
	$1 = ($1 + [-24])
	$2 = *($1)
	*($1) = [0]
	if ( ($2 == 0) ){ goto $label$27 }
	$0 = *($2 + [132])
	if ( ($0 == 0) ){ goto $label$28 }
	*(($2 + [136])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$28
	$0 = *($2 + [120])
	if ( ($0 == 0) ){ goto $label$29 }
	*(($2 + [124])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$29
	CALL _ZdlPv($2)
	
.LABEL $label$27
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$26 }
	$2 = *(($3 + [440]))
	goto $label$24 
	
.LABEL $label$25
	$2 = $4
	
.LABEL $label$24
	*($5) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$23
	$2 = *(($3 + [580]))
	if ( ($2 == 0) ){ goto $label$30 }
	*(($3 + [584])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$30
	$global$0 = ($3 + [624])
	return (unreachable)
	
.LABEL $label$3
	CALL $192(($3 + [456]))
	
.LABEL $label$2
	CALL $192(($3 + [384]))
	
.LABEL $label$1
	CALL $192((($3 + [328]) + [24]))
	(unreachable)
	(unreachable)
}

void .FUNC $184 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $187 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $186 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $187($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $151(*($1), ($4 + [16]))
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = ((int_64)$6 + (int_64)1)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$5 = ($5 & [255])
	$10 = ($2 - (($5 + [16]) & [496]))
	$11 = $10
	$global$0 = $11
	*(($12 = ($10 + $5))) = [0]
	$13 = *($1)
	$2 = ((int_64)$13 < (int_64)0)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)( (int_64)-1 ? (int_64)1 : $2 ) * (int_64)((int_64)$13 % (int_64)$9))
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ($12 + [-1])
	
.LOOP $label$5:
	$14 = ((int_64)$8 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$14 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$8 = $14
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	$12 = ( [10595] ? [10607] : $2 )
	$9 = ((int_64)$13 / (int_64)$9)
	$15 = ($5 + [32])
	$11 = ($11 - (($5 + [47]) & [496]))
	$global$0 = $11
	$8 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (int_64)($8) == 0) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	*((($3 + [41]) + ($1 = $5))) = $8
	$5 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [24]) = ($5 << [1])
	$2 = (($3 + [24]) | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [24]) = [0]
	$1 = (($3 + [24]) | [1])
	$5 = $1
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $5
	
.LABEL $label$7
	$7 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$12:
	*(($2 + $1)) = *((($3 + [41]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$12 }
	$5 = ($2 + $5)
	$1 = (($3 + [24]) | [1])
	
.LABEL $label$6
	*($5) = [0]
	*($3 + [8]) = $10
	*($3) = $9
	*($3 + [12]) = ( *($3 + [32]) ? $1 : (*($3 + [24]) & [1]) )
	CALL $200($11, $15, $12, $3)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$13
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $201($11)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($1 + [16]) & [-16])
	$5 = CALL _Znwj($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$16
	CALL memcpy($5, $11, $1)
	
.LABEL $label$15
	*(($5 + $1)) = [0]
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$14
	CALL $183($0)
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$5 = *($0)
	$4 = ($5 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($1)
	$3 = *($4 + [4])
	$6 = (int_64)0
	$7 = [0]
	
.LOOP $label$3:
	if ( ($3 <= *(($4 + [8]))) ){ goto $label$4 }
	CALL eosio_assert([0], [10722])
	$3 = *(($4 + [4]))
	
.LABEL $label$4
	$0 = *($3)
	$2 = ($3 + [1])
	*(($4 + [4])) = $2
	$3 = ($7 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($0 & [127]) << $3)))
	$7 = ($3 + [7])
	$3 = $2
	if ( ($0 & [128]) ){ goto $label$3 }
	*($5 + [16]) = $6
	$3 = ($5 + [20])
	if ( ((uint_32)(*(($4 + [8])) - $2) > (uint_32)[32]) ){ goto $label$5 }
	CALL eosio_assert([0], [10717])
	$2 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $2, [33])
	*(($3 = ($4 + [4]))) = (*($3) + [33])
	$7 = *($1)
	$3 = *($7 + [4])
	$6 = (int_64)0
	$1 = ($7 + [8])
	$2 = [0]
	
.LOOP $label$6:
	if ( ($3 <= *($1)) ){ goto $label$7 }
	CALL eosio_assert([0], [10722])
	$3 = *(($7 + [4]))
	
.LABEL $label$7
	$0 = *($3)
	$4 = ($3 + [1])
	*(($7 + [4])) = $4
	$3 = ($2 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($0 & [127]) << $3)))
	$2 = ($3 + [7])
	$3 = $4
	if ( ($0 & [128]) ){ goto $label$6 }
	*($5 + [56]) = $6
	$3 = ($5 + [60])
	if ( ((uint_32)(*(($7 + [8])) - $4) > (uint_32)[32]) ){ goto $label$8 }
	CALL eosio_assert([0], [10717])
	$4 = *(($7 + [4]))
	
.LABEL $label$8
	CALL memcpy($3, $4, [33])
	*(($3 = ($7 + [4]))) = (*($3) + [33])
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0)
	$5 = ($6 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$7 = *($6 + [16])
	$0 = *($1)
	$4 = *($0 + [4])
	
.LOOP $label$3:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($2 + [15]) = (($3) << [7]) | ($5 & [127]))
	if ( ((int_32)(*(($0 + [8])) - $4) > (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert([0], [10587])
	$4 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $3 ){ goto $label$3 }
	$5 = ($6 + [20])
	if ( ((int_32)(*(($0 + [8])) - $4) > (int_32)[32]) ){ goto $label$5 }
	CALL eosio_assert([0], [10587])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $5, [33])
	*(($4 = ($0 + [4]))) = (*($4) + [33])
	$7 = *($6 + [56])
	$3 = *($1)
	$4 = *($3 + [4])
	$1 = ($3 + [8])
	
.LOOP $label$6:
	$0 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$5 = ((int_64)$7) != (int_64)0
	*($2 + [14]) = (($5) << [7]) | ($0 & [127]))
	if ( ((int_32)(*($1) - $4) > (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert([0], [10587])
	$4 = *(($3 + [4]))
	
.LABEL $label$7
	CALL memcpy($4, ($2 + [14]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($3 + [4]))) = $4
	if ( $5 ){ goto $label$6 }
	$0 = ($6 + [60])
	if ( ((int_32)(*(($3 + [8])) - $4) > (int_32)[32]) ){ goto $label$8 }
	CALL eosio_assert([0], [10587])
	$4 = *(($3 + [4]))
	
.LABEL $label$8
	CALL memcpy($4, $0, [33])
	*(($4 = ($3 + [4]))) = (*($4) + [33])
	$global$0 = ($2 + [16])
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($0)
	$2 = ($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = ($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($0 + [24])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10717])
	$3 = *(($1 + [4]))
	
.LABEL $label$4
	CALL memcpy($0, $3, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

void .FUNC $113 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	$4 = ($global$0 - [176])
	$global$0 = $4
	*($4 + [152]) = $3
	*($4 + [144]) = $2
	*($4 + [88]) = [8306]
	*($4 + [92]) = CALL $201([8306])
	*($4 + [8]) = *($4 + [88])
	$5 = CALL $55(($4 + [96]), ($4 + [8]))
	$6 = [0]
	*((($4 + [104]) + [32])) = [0]
	*($4 + [112]) = $1
	*($4 + [120]) = (int_64)-1
	*($4 + [128]) = (int_64)0
	*($4 + [140]) = [0]
	*($4 + [104]) = *($5)
	*($4 + [80]) = ($4 + [104])
	CALL $103(($4 + [40]), ($4 + [80]), ($4 + [144]))
	$7 = [0]
	$5 = *($4 + [44])
	if ( ($5 == 0) ){ goto $label$1 }
	$7 = ( $5 ? [0] : (int_64)(((int_64)((int_64)*($4 + [144]) ^ (int_64)*($5 + [16])) | (int_64)((int_64)*($4 + [152]) ^ (int_64)*(($5 + [24])))) == 0) )
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9285])
	*($4 + [24]) = [8306]
	*($4 + [28]) = CALL $201([8306])
	*($4) = *($4 + [24])
	$5 = CALL $55(($4 + [32]), $4)
	*((($4 + [40]) + [32])) = [0]
	*($4 + [56]) = (int_64)-1
	*($4 + [76]) = [0]
	$2 = *($5)
	*($4 + [40]) = $2
	*($4 + [48]) = $1
	*($4 + [64]) = (int_64)0
	$5 = CALL db_find_i64($2, $1, (int_64)4148111391159058432, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $85(($4 + [40]), $5)
	if ( ((int_32)*($6 + [16]) == (int_32)($4 + [40])) ){ goto $label$2 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$2
	$8 = [0]
	$9 = ((int_32)$6 != (int_32)[0])
	$6 = *(($4 + [68]))
	$10 = *(($4 + [64]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$6:
	$5 = ($6 + [-24])
	$11 = *($5)
	if ( ((int_64)*($11) == (int_64)1) ){ goto $label$5 }
	$6 = $5
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$4 }
	if ( ((int_32)*($11 + [16]) == (int_32)($4 + [40])) ){ goto $label$7 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$7
	$8 = $11
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_find_i64(*($4 + [40]), *(($4 + [48])), (int_64)4148111391159058432, (int_64)1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $85(($4 + [40]), $5)
	if ( ((int_32)*($8 + [16]) == (int_32)($4 + [40])) ){ goto $label$3 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$3
	$12 = [0]
	$9 = ($9 + ((int_32)$8 != (int_32)[0]))
	$6 = *(($4 + [68]))
	$10 = *(($4 + [64]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$11:
	$5 = ($6 + [-24])
	$11 = *($5)
	if ( ((int_64)*($11) == (int_64)2) ){ goto $label$10 }
	$6 = $5
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$9 }
	if ( ((int_32)*($11 + [16]) == (int_32)($4 + [40])) ){ goto $label$12 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$12
	$12 = $11
	goto $label$8 
	
.LABEL $label$9
	$5 = CALL db_find_i64(*($4 + [40]), *(($4 + [48])), (int_64)4148111391159058432, (int_64)2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$12 = CALL $85(($4 + [40]), $5)
	if ( ((int_32)*($12 + [16]) == (int_32)($4 + [40])) ){ goto $label$8 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$8
	$8 = [0]
	$9 = ($9 + ((int_32)$12 != (int_32)[0]))
	$6 = *(($4 + [68]))
	$10 = *(($4 + [64]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$14 }
	
.LOOP $label$16:
	$5 = ($6 + [-24])
	$11 = *($5)
	if ( ((int_64)*($11) == (int_64)3) ){ goto $label$15 }
	$6 = $5
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$14 }
	if ( ((int_32)*($11 + [16]) == (int_32)($4 + [40])) ){ goto $label$17 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$17
	$8 = $11
	goto $label$13 
	
.LABEL $label$14
	$5 = CALL db_find_i64(*($4 + [40]), *(($4 + [48])), (int_64)4148111391159058432, (int_64)3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$13 }
	$8 = CALL $85(($4 + [40]), $5)
	if ( ((int_32)*($8 + [16]) == (int_32)($4 + [40])) ){ goto $label$13 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$13
	$12 = [0]
	$9 = ($9 + ((int_32)$8 != (int_32)[0]))
	$6 = *(($4 + [68]))
	$10 = *(($4 + [64]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$19 }
	
.LOOP $label$21:
	$5 = ($6 + [-24])
	$11 = *($5)
	if ( ((int_64)*($11) == (int_64)4) ){ goto $label$20 }
	$6 = $5
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$19 }
	if ( ((int_32)*($11 + [16]) == (int_32)($4 + [40])) ){ goto $label$22 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$22
	$12 = $11
	goto $label$18 
	
.LABEL $label$19
	$5 = CALL db_find_i64(*($4 + [40]), *(($4 + [48])), (int_64)4148111391159058432, (int_64)4)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$18 }
	$12 = CALL $85(($4 + [40]), $5)
	if ( ((int_32)*($12 + [16]) == (int_32)($4 + [40])) ){ goto $label$18 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$18
	$8 = [0]
	$12 = ($9 + ((int_32)$12 != (int_32)[0]))
	$6 = *(($4 + [68]))
	$10 = *(($4 + [64]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$24 }
	
.LOOP $label$26:
	$5 = ($6 + [-24])
	$11 = *($5)
	if ( ((int_64)*($11) == (int_64)5) ){ goto $label$25 }
	$6 = $5
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$24 }
	if ( ((int_32)*($11 + [16]) == (int_32)($4 + [40])) ){ goto $label$27 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$27
	$8 = $11
	goto $label$23 
	
.LABEL $label$24
	$5 = CALL db_find_i64(*($4 + [40]), *(($4 + [48])), (int_64)4148111391159058432, (int_64)5)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$23 }
	$8 = CALL $85(($4 + [40]), $5)
	if ( ((int_32)*($8 + [16]) == (int_32)($4 + [40])) ){ goto $label$23 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$23
	$11 = [0]
	$13 = CALL $195(((float_64)(CASTING float_64)(uint_32 (($12 + ((int_32)$8 != (int_32)[0])) & [255])) * (float_64)(float_64)0.6))
	$5 = *($7 + [32])
	$6 = ((int_32)$5 == (int_32)*(($7 + [36])))
	if ( (((float_64)$13 < (float_64)(float_64)4294967296) & ((float_64)$13 >= (float_64)(float_64)0)) ){ goto $label$30 }
	$8 = [0]
	if ( ($6 == 0) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$8 = (CASTING uint_32)(float_64 $13)
	if ( $6 ){ goto $label$28 }
	
.LABEL $label$29
	$11 = [0]
	$10 = ($7 + [36])
	
.LOOP $label$31:
	*($4 + [16]) = ($4 + [40])
	CALL $102(($4 + [168]), ($4 + [16]), $5)
	$6 = *($4 + [172])
	if ( ($6 == 0) ){ goto $label$32 }
	if ( ((int_64)*($5) != (int_64)*($6 + [8])) ){ goto $label$32 }
	$11 = ($11 + (uint_64)(*($6) <= (int_64)6))
	
.LABEL $label$32
	$5 = ($5 + [8])
	if ( ((int_32)$5 != (int_32)*($10)) ){ goto $label$31 }
	
.LABEL $label$28
	CALL eosio_assert(((uint_32)($11 & [255]) >= (uint_32)$8), [10304])
	$10 = *($4 + [64])
	if ( ($10 == 0) ){ goto $label$33 }
	$11 = ($4 + [68])
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$35 }
	
.LOOP $label$36:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$37 }
	CALL _ZdlPv($6)
	
.LABEL $label$37
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$36 }
	$5 = *(($4 + [64]))
	goto $label$34 
	
.LABEL $label$35
	$5 = $10
	
.LABEL $label$34
	*($11) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$33
	$11 = *($4 + [128])
	if ( ($11 == 0) ){ goto $label$38 }
	$7 = ($4 + [132])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$40 }
	
.LOOP $label$41:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$42 }
	$10 = *($5 + [44])
	if ( ($10 == 0) ){ goto $label$43 }
	*(($5 + [48])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$43
	$10 = *($5 + [32])
	if ( ($10 == 0) ){ goto $label$44 }
	*(($5 + [36])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$44
	CALL _ZdlPv($5)
	
.LABEL $label$42
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$41 }
	$5 = *(($4 + [128]))
	goto $label$39 
	
.LABEL $label$40
	$5 = $11
	
.LABEL $label$39
	*($7) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$38
	$global$0 = ($4 + [176])
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$5 = *($0)
	$4 = ($5 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($1)
	$1 = *($0 + [4])
	$6 = (int_64)0
	$2 = [0]
	
.LOOP $label$3:
	if ( ($1 <= *(($0 + [8]))) ){ goto $label$4 }
	CALL eosio_assert([0], [10722])
	$1 = *(($0 + [4]))
	
.LABEL $label$4
	$3 = *($1)
	$4 = ($1 + [1])
	*(($0 + [4])) = $4
	$1 = ($2 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($3 & [127]) << $1)))
	$2 = ($1 + [7])
	$1 = $4
	if ( ($3 & [128]) ){ goto $label$3 }
	*($5 + [16]) = $6
	$1 = ($5 + [20])
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[32]) ){ goto $label$5 }
	CALL eosio_assert([0], [10717])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($1, $4, [33])
	*(($1 = ($0 + [4]))) = (*($1) + [33])
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[40])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[40])
	if ( ((uint_32)$7 > (uint_32)[53687090]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[40]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	*(($4 = ($5 + ((int_32)$4 * (int_32)[40])))) = *($1)
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 + ((int_32)((int_32)$1 / (int_32)[-40]) * (int_32)[40]))
	$6 = ($5 + ((int_32)$6 * (int_32)[40]))
	$4 = ($4 + [40])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $162(*($1), ($4 + [16]))
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = *($0)
	$3 = ($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $151(*($1), ($0 + [16]))
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)*($1 + [8]) != (int_32)$4) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$4 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [15]), $4, [1])
	*(($1 = ($1 + [4]))) = (*($1) + [1])
	*(($0 + [40])) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $29 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL require_auth(*($0))
	CALL eosio_assert(((int_64)$2 != (int_64)0), [8794])
	*(($5 = (($4 + [152]) + [8]))) = *(($3 + [12]))
	*(($6 = (($4 + [152]) + [16]))) = *(($3 + [20]))
	*(($7 = (($4 + [152]) + [24]))) = *(($3 + [28]))
	*(($8 = (($4 + [152]) + [32]))) = *(($3 + [36]))
	*($4 + [152]) = *($3 + [4 align=4])
	$3 = *($3)
	*($4 + [128]) = [8822]
	*($4 + [132]) = CALL $201([8822])
	*($4 + [64]) = *($4 + [128])
	$9 = CALL $55(($4 + [136]), ($4 + [64]))
	*((($4 + [72]) + [12])) = *($5)
	*((($4 + [72]) + [20])) = *($6)
	*((($4 + [72]) + [28])) = *($7)
	*((($4 + [72]) + [36])) = *($8)
	*(($4 + [119])) = *(($4 + [151]))
	*(($4 + [117])) = *(($4 + [149]))
	*($4 + [72]) = $3
	*($4 + [112]) = [0]
	*($4 + [76 align=4]) = *($4 + [152])
	*($4 + [113 align=1]) = *($4 + [145 align=1])
	*($4 + [120]) = (int_64)0
	$10 = *($9)
	*(($4 + [56])) = (int_64)0
	*(($4 + [48])) = *($4 + [112])
	*((($4 + [8]) + [32])) = *((($4 + [72]) + [32]))
	*((($4 + [8]) + [24])) = *((($4 + [72]) + [24]))
	*((($4 + [8]) + [16])) = *((($4 + [72]) + [16]))
	*((($4 + [8]) + [8])) = *((($4 + [72]) + [8]))
	*($4 + [8]) = *($4 + [72])
	CALL $58($0, $1, $10, $2, ($4 + [8]), [0])
	$global$0 = ($4 + [192])
}

int_32 .FUNC $28 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [480])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [188])) = (int_64)0
	*(($4 + [180])) = (int_64)0
	*(($4 + [172])) = (int_64)0
	*(($4 + [164])) = (int_64)0
	*(($4 + [236])) = [0]
	*(($4 + [228])) = (int_64)0
	*(($4 + [220])) = (int_64)0
	*(($4 + [212])) = (int_64)0
	*(($4 + [204])) = (int_64)0
	*(($4 + [196])) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [160]) = [0]
	*($4 + [132]) = $2
	*($4 + [128]) = $2
	*($4 + [136]) = ($2 + $7)
	*($4 + [400]) = ($4 + [128])
	*($4 + [440]) = ($4 + [144])
	CALL $114(($4 + [440]), ($4 + [400]))
	*(($3 = (($4 + [80]) + [8]))) = *($4 + [136])
	*($4 + [80]) = *($4 + [128])
	*(($8 = (($4 + [400]) + [8]))) = *($3)
	*($4 + [400]) = *($4 + [80])
	$3 = *($8)
	*((($4 + [440]) + [8])) = $3
	*((($4 + [96]) + [24])) = $3
	*($4 + [96]) = $0
	*($4 + [104]) = $1
	$0 = *($4 + [400])
	*($4 + [112]) = $0
	*($4 + [440]) = $0
	*(($3 = (($4 + [280]) + [8]))) = *((($4 + [144]) + [24]))
	*(($8 = (($4 + [280]) + [16]))) = *((($4 + [144]) + [32]))
	*(($9 = (($4 + [280]) + [24]))) = *(($4 + [184]))
	*(($10 = (($4 + [280]) + [32]))) = *(($4 + [192]))
	*(($11 = (($4 + [240]) + [8]))) = *(($4 + [208]))
	*(($12 = (($4 + [240]) + [16]))) = *(($4 + [216]))
	*(($13 = (($4 + [240]) + [24]))) = *(($4 + [224]))
	*(($14 = (($4 + [240]) + [32]))) = *(($4 + [232]))
	*($4 + [280]) = *($4 + [160])
	*($4 + [240]) = *($4 + [200])
	$0 = *($4 + [152])
	$1 = *($4 + [144])
	*((($4 + [360]) + [32])) = *($14)
	*((($4 + [360]) + [24])) = *($13)
	*((($4 + [360]) + [16])) = *($12)
	*((($4 + [360]) + [8])) = *($11)
	*((($4 + [320]) + [8])) = *($3)
	*((($4 + [320]) + [16])) = *($8)
	*((($4 + [320]) + [24])) = *($9)
	*((($4 + [320]) + [32])) = *($10)
	*($4 + [360]) = *($4 + [240])
	*($4 + [320]) = *($4 + [280])
	$3 = (($4 + [96]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	*(($5 = (($4 + [440]) + [32]))) = *((($4 + [320]) + [32]))
	*(($8 = (($4 + [440]) + [24]))) = *((($4 + [320]) + [24]))
	*(($9 = (($4 + [440]) + [16]))) = *((($4 + [320]) + [16]))
	*(($10 = (($4 + [440]) + [8]))) = *((($4 + [320]) + [8]))
	*(($11 = (($4 + [400]) + [8]))) = *((($4 + [360]) + [8]))
	*(($12 = (($4 + [400]) + [16]))) = *((($4 + [360]) + [16]))
	*(($13 = (($4 + [400]) + [24]))) = *((($4 + [360]) + [24]))
	*(($14 = (($4 + [400]) + [32]))) = *((($4 + [360]) + [32]))
	*($4 + [440]) = *($4 + [320])
	*($4 + [400]) = *($4 + [360])
	*((($4 + [40]) + [32])) = *($5)
	*((($4 + [40]) + [24])) = *($8)
	*((($4 + [40]) + [16])) = *($9)
	*((($4 + [40]) + [8])) = *($10)
	*(($4 + [8])) = *($11)
	*(($4 + [16])) = *($12)
	*(($4 + [24])) = *($13)
	*(($4 + [32])) = *($14)
	*($4 + [40]) = *($4 + [440])
	*($4) = *($4 + [400])
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [40])), (int_32 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $207($2)
	
.LABEL $label$5
	$global$0 = ($4 + [480])
	return [1]
}

int_32 .FUNC $21 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	$3 = ($global$0 - [368])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [192]))) = (int_64)0
	*(($9 = ($4 + [184]))) = (int_64)0
	*(($10 = (($4 + [128]) + [48]))) = (int_64)0
	*(($11 = (($4 + [128]) + [40]))) = (int_64)0
	*(($12 = (($4 + [128]) + [32]))) = (int_64)0
	*(($13 = (($4 + [128]) + [24]))) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [144]) = [0]
	*($4 + [116]) = $2
	*($4 + [112]) = $2
	*($4 + [120]) = ($2 + $7)
	*($4 + [256]) = ($4 + [112])
	*($4 + [312]) = ($4 + [128])
	CALL $124(($4 + [312]), ($4 + [256]))
	*(($14 = (($4 + [64]) + [8]))) = *($4 + [120])
	*($4 + [64]) = *($4 + [112])
	*(($3 = (($4 + [256]) + [8]))) = *($14)
	*($4 + [256]) = *($4 + [64])
	$14 = *($3)
	*((($4 + [312]) + [8])) = $14
	*((($4 + [80]) + [24])) = $14
	*($4 + [80]) = $0
	*($4 + [88]) = $1
	$0 = *($4 + [256])
	*($4 + [96]) = $0
	*($4 + [312]) = $0
	*(($14 = (($4 + [200]) + [8]))) = *($13)
	*(($13 = (($4 + [200]) + [16]))) = *($12)
	*(($12 = (($4 + [200]) + [24]))) = *($11)
	*(($11 = (($4 + [200]) + [32]))) = *($10)
	*(($10 = (($4 + [200]) + [40]))) = *($9)
	*(($9 = (($4 + [200]) + [48]))) = *($8)
	*($4 + [200]) = *($4 + [144])
	$0 = *($4 + [136])
	$1 = *($4 + [128])
	*((($4 + [256]) + [48])) = *($9)
	*((($4 + [256]) + [40])) = *($10)
	*((($4 + [256]) + [32])) = *($11)
	*((($4 + [256]) + [24])) = *($12)
	*((($4 + [256]) + [16])) = *($13)
	*($3) = *($14)
	*($4 + [256]) = *($4 + [200])
	$3 = (($4 + [80]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$15 = *((($4 + [256]) + [48]))
	*((($4 + [312]) + [48])) = $15
	$16 = *((($4 + [256]) + [40]))
	*((($4 + [312]) + [40])) = $16
	$17 = *((($4 + [256]) + [32]))
	*((($4 + [312]) + [32])) = $17
	$18 = *((($4 + [256]) + [24]))
	*((($4 + [312]) + [24])) = $18
	$19 = *((($4 + [256]) + [16]))
	*((($4 + [312]) + [16])) = $19
	$20 = *((($4 + [256]) + [8]))
	*((($4 + [312]) + [8])) = $20
	*((($4 + [8]) + [8])) = $20
	*((($4 + [8]) + [16])) = $19
	*((($4 + [8]) + [24])) = $18
	*((($4 + [8]) + [32])) = $17
	*((($4 + [8]) + [40])) = $16
	*((($4 + [8]) + [48])) = $15
	$15 = *($4 + [256])
	*($4 + [8]) = $15
	*($4 + [312]) = $15
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $207($2)
	
.LABEL $label$5
	$global$0 = ($4 + [368])
	return [1]
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [320])
	$global$0 = $4
	CALL require_auth(*($0))
	*($4 + [232]) = [8306]
	*($4 + [236]) = CALL $201([8306])
	*($4 + [40]) = *($4 + [232])
	$5 = CALL $55(($4 + [240]), ($4 + [40]))
	*((($4 + [248]) + [32])) = [0]
	*($4 + [256]) = $1
	*($4 + [264]) = (int_64)-1
	*($4 + [272]) = (int_64)0
	$6 = *($5)
	*($4 + [248]) = $6
	$5 = CALL db_find_i64($6, $1, (int_64)-9026177492230078464, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $56(($4 + [248]), $5)
	if ( ((int_32)*($5 + [64]) == (int_32)($4 + [248])) ){ goto $label$4 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$4
	*((($4 + [144]) + [48])) = *(($5 + [56]))
	*((($4 + [144]) + [40])) = *(($5 + [48]))
	*((($4 + [144]) + [32])) = *(($5 + [40]))
	*((($4 + [144]) + [24])) = *(($5 + [32]))
	*((($4 + [144]) + [16])) = *(($5 + [24]))
	*(($4 + [152])) = *(($5 + [16]))
	*($4 + [144]) = *($5 + [8])
	if ( CALL $57(($4 + [144]), $3) ){ goto $label$2 }
	
.LABEL $label$3
	*((($4 + [144]) + [24])) = *(($3 + [8]))
	*((($4 + [144]) + [32])) = *(($3 + [16]))
	*((($4 + [144]) + [40])) = *(($3 + [24]))
	*((($4 + [144]) + [48])) = *(($3 + [32]))
	*(($4 + [200])) = *(($3 + [40]))
	*(($4 + [208])) = *(($3 + [48]))
	*($4 + [160]) = *($3)
	*($4 + [152]) = $2
	*($4 + [144]) = $1
	*($4 + [216]) = (int_64)0
	*($4 + [224]) = [0]
	$3 = [58]
	$2 = *($4 + [160])
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$5 }
	CALL $63(($4 + [216]), $3)
	$3 = *($4 + [220])
	$5 = *($4 + [216])
	*($4 + [68]) = $5
	*($4 + [64]) = $5
	*($4 + [72]) = $3
	*($4 + [56]) = ($4 + [64])
	*($4 + [288]) = ($4 + [144])
	CALL $64(($4 + [288]), ($4 + [56]))
	$2 = *($0)
	*($4 + [128]) = [8385]
	*($4 + [132]) = CALL $201([8385])
	*($4 + [32]) = *($4 + [128])
	$6 = *(CALL $55(($4 + [136]), ($4 + [32])))
	*($4 + [112]) = [8306]
	*($4 + [116]) = CALL $201([8306])
	*($4 + [24]) = *($4 + [112])
	$0 = CALL $55(($4 + [120]), ($4 + [24]))
	*($4 + [96]) = [8897]
	*($4 + [100]) = CALL $201([8897])
	*($4 + [16]) = *($4 + [96])
	$7 = CALL $55(($4 + [104]), ($4 + [16]))
	*($4 + [48]) = [8908]
	*($4 + [52]) = CALL $201([8908])
	*($4 + [8]) = *($4 + [48])
	$3 = CALL $55(($4 + [56]), ($4 + [8]))
	*((($4 + [64]) + [24])) = [0]
	*($4 + [64]) = $1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = *($3)
	$3 = (*($4 + [220]) - *($4 + [216]))
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL _Znwj($3)
	*(($4 + [80])) = $5
	*(($8 = ($4 + [84]))) = $5
	*(($4 + [88])) = ($5 + $3)
	$9 = *($4 + [216])
	$3 = (*($4 + [220]) - $9)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($5, $9, $3)
	*($8) = (*($8) + $3)
	
.LABEL $label$6
	*($4 + [144]) = *($0)
	*($4 + [152]) = *($7)
	*(($3 = CALL _Znwj([16]))) = $2
	*($3 + [8]) = $6
	*(($4 + [180])) = [0]
	$5 = ($3 + [16])
	*((($4 + [144]) + [24])) = $5
	*((($4 + [144]) + [20])) = $5
	*($4 + [160]) = $3
	*($4 + [172 align=4]) = (int_64)0
	$0 = *($4 + [80])
	$5 = *((($4 + [64]) + [20]))
	$3 = (($5 + [16]) - $0)
	$2 = (CASTING uint_64)(uint_32 ($5 - $0))
	$5 = ($4 + [172])
	
.LOOP $label$7:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$7 }
	if ( ($3 == 0) ){ goto $label$9 }
	CALL $63($5, $3)
	$5 = *(($4 + [176]))
	$3 = *(($4 + [172]))
	goto $label$8 
	
.LABEL $label$9
	$5 = [0]
	$3 = [0]
	
.LABEL $label$8
	*($4 + [292]) = $3
	*($4 + [288]) = $3
	*($4 + [296]) = $5
	*($4 + [304]) = ($4 + [288])
	*($4 + [312]) = ($4 + [64])
	CALL $65(($4 + [312]), ($4 + [304]))
	CALL $66(($4 + [144]))
	$3 = *($4 + [172])
	if ( ($3 == 0) ){ goto $label$10 }
	*(($4 + [176])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$10
	$3 = *($4 + [160])
	if ( ($3 == 0) ){ goto $label$11 }
	*(($4 + [164])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$3 = *($4 + [80])
	if ( ($3 == 0) ){ goto $label$12 }
	*(($4 + [84])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$12
	$3 = *($4 + [216])
	if ( ($3 == 0) ){ goto $label$2 }
	*($4 + [220]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$0 = *($4 + [272])
	if ( ($0 == 0) ){ goto $label$13 }
	$7 = ($4 + [276])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$15 }
	
.LOOP $label$16:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$17 }
	CALL _ZdlPv($5)
	
.LABEL $label$17
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$16 }
	$3 = *(($4 + [272]))
	goto $label$14 
	
.LABEL $label$15
	$3 = $0
	
.LABEL $label$14
	*($7) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$13
	$global$0 = ($4 + [320])
	return (unreachable)
	
.LABEL $label$1
	CALL $192((($4 + [64]) + [16]))
}

void .FUNC $23 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL eosio_assert(((int_32)*($2 + [4]) != (int_32)*($2)), [8842])
	*($3 + [16]) = [8874]
	*($3 + [20]) = CALL $201([8874])
	*($3 + [8]) = *($3 + [16])
	CALL $62($0, $1, *(CALL $55(($3 + [24]), ($3 + [8]))), $2, [1])
	$global$0 = ($3 + [32])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [288])
	$global$0 = $3
	*($3 + [264]) = (int_64)0
	*($3 + [272]) = (int_64)0
	$4 = *($2 + [4])
	$5 = *($2)
	*($3 + [124]) = $5
	*($3 + [120]) = $5
	*($3 + [128]) = $4
	CALL $88(($3 + [120]), ($3 + [264]))
	*($3 + [248]) = [8720]
	*($3 + [252]) = CALL $201([8720])
	*($3 + [80]) = *($3 + [248])
	$5 = CALL $55(($3 + [256]), ($3 + [80]))
	$6 = *($5)
	$7 = *($0)
	$8 = *($3 + [264])
	CALL memcpy(($3 + [176]), $1, [66])
	*($3 + [168]) = [0]
	*($3 + [160]) = (int_64)0
	$1 = (*($2 + [4]) - *($2))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL _Znwj($1)
	*(($3 + [168])) = ($4 + $1)
	*($3 + [160]) = $4
	*($3 + [164]) = $4
	$9 = *($2)
	$1 = (*(($2 + [4])) - $9)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($4, $9, $1)
	*($3 + [164]) = (*($3 + [164]) + $1)
	
.LABEL $label$2
	CALL memcpy(($3 + [14]), ($3 + [176]), [66])
	CALL $80($0, $7, $8, $6, ($3 + [14]), ($3 + [160]), [0])
	$1 = *($3 + [160])
	if ( ($1 == 0) ){ goto $label$3 }
	*($3 + [164]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$3
	*(($3 + [156])) = [0]
	*($3 + [148 align=4]) = (int_64)0
	$6 = *($0)
	*($3 + [88]) = [8385]
	*($3 + [92]) = CALL $201([8385])
	*($3) = *($3 + [88])
	$1 = CALL $55(($3 + [96]), $3)
	*($3 + [104]) = $6
	*($3 + [112]) = *($1)
	*((($1 = CALL _Znwj([16])) + [8])) = *($3 + [112])
	*($1) = *($3 + [104])
	$4 = ($1 + [16])
	*(($3 + [140])) = $4
	*(($3 + [144])) = $4
	*($3 + [136]) = $1
	$6 = *($0)
	*($3 + [128]) = *($5)
	*($3 + [120]) = $6
	$0 = ($3 + [148])
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	CALL $73($0, *($2), *(($2 + [4])))
	
.LABEL $label$4
	CALL $66(($3 + [120]))
	CALL prints([8729])
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$5 }
	*(($3 + [152])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$2 = *(($3 + [136]))
	if ( ($2 == 0) ){ goto $label$6 }
	*(($3 + [140])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$global$0 = ($3 + [288])
	return (unreachable)
	
.LABEL $label$1
	CALL $192(($3 + [160]))
}

void .FUNC $25 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL require_auth(*($0))
	*($4 + [16]) = [8652]
	*($4 + [20]) = CALL $201([8652])
	*($4 + [8]) = *($4 + [16])
	CALL $68($0, $1, *(CALL $55(($4 + [24]), ($4 + [8]))), $2, $3, [1814400])
	$global$0 = ($4 + [32])
}

int_32 .FUNC $24 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [128])
	$global$0 = $3
	*(($4 = $3) + [88]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [80])) = [0]
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	$3 = $2
	if ( ((uint_32)$5 > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10717])
	$3 = *($4 + [52])
	
.LABEL $label$4
	CALL memcpy(($4 + [64]), $3, [8])
	*($4 + [52]) = ($3 + [8])
	$3 = (($4 + [64]) + [8])
	CALL $60(($4 + [48]), $3)
	*(($6 = ($4 + [8]))) = *((($4 + [48]) + [8]))
	*($4) = *($4 + [48])
	*(($7 = (($4 + [96]) + [8]))) = *($6)
	*($4 + [96]) = *($4)
	$6 = *($7)
	*((($4 + [112]) + [8])) = $6
	*(($4 + [40])) = $6
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [96])
	*($4 + [32]) = $0
	*($4 + [112]) = $0
	*($4 + [116]) = ($4 + [88])
	*($4 + [112]) = ($4 + [16])
	CALL $61(($4 + [112]), ($4 + [64]))
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL $207($2)
	
.LABEL $label$5
	$2 = *($3)
	if ( ($2 == 0) ){ goto $label$6 }
	*(($4 + [76])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $27 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [272])
	$global$0 = $5
	CALL require_auth(*($0))
	CALL prints([9484])
	*((($5 + [128]) + [24])) = *(($3 + [8]))
	*((($5 + [128]) + [32])) = *(($3 + [16]))
	*(($5 + [168])) = *(($3 + [24]))
	*(($5 + [176])) = *(($3 + [32]))
	*(($5 + [192])) = *(($4 + [8]))
	*(($5 + [200])) = *(($4 + [16]))
	*(($5 + [208])) = *(($4 + [24]))
	*(($5 + [216])) = *(($4 + [32]))
	*($5 + [136]) = $2
	*($5 + [128]) = $1
	*($5 + [144]) = *($3)
	*($5 + [184]) = *($4)
	*($5 + [232]) = [0]
	*($5 + [224]) = (int_64)0
	$4 = [82]
	$2 = *($5 + [144])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	$2 = *($5 + [184])
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$2 }
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $63(($5 + [224]), $4)
	$3 = *($5 + [228])
	$4 = *($5 + [224])
	goto $label$3 
	
.LABEL $label$4
	$3 = [0]
	$4 = [0]
	
.LABEL $label$3
	*($5 + [52]) = $4
	*($5 + [48]) = $4
	*($5 + [56]) = $3
	*($5 + [40]) = ($5 + [48])
	*($5 + [240]) = ($5 + [128])
	CALL $115(($5 + [240]), ($5 + [40]))
	$2 = *($0)
	*($5 + [112]) = [8385]
	*($5 + [116]) = CALL $201([8385])
	*($5 + [24]) = *($5 + [112])
	$6 = *(CALL $55(($5 + [120]), ($5 + [24])))
	*($5 + [96]) = [8306]
	*($5 + [100]) = CALL $201([8306])
	*($5 + [16]) = *($5 + [96])
	$0 = CALL $55(($5 + [104]), ($5 + [16]))
	*($5 + [80]) = [8897]
	*($5 + [84]) = CALL $201([8897])
	*($5 + [8]) = *($5 + [80])
	$7 = CALL $55(($5 + [88]), ($5 + [8]))
	*($5 + [32]) = [9504]
	*($5 + [36]) = CALL $201([9504])
	*($5) = *($5 + [32])
	$4 = CALL $55(($5 + [40]), $5)
	*((($5 + [48]) + [24])) = [0]
	*($5 + [48]) = $1
	*($5 + [64]) = (int_64)0
	*($5 + [56]) = *($4)
	$4 = (*($5 + [228]) - *($5 + [224]))
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = CALL _Znwj($4)
	*(($5 + [64])) = $3
	*(($8 = ($5 + [68]))) = $3
	*(($5 + [72])) = ($3 + $4)
	$9 = *($5 + [224])
	$4 = (*($5 + [228]) - $9)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($3, $9, $4)
	*($8) = (*($8) + $4)
	
.LABEL $label$6
	*($5 + [128]) = *($0)
	*($5 + [136]) = *($7)
	*(($4 = CALL _Znwj([16]))) = $2
	*($4 + [8]) = $6
	*(($5 + [164])) = [0]
	$3 = ($4 + [16])
	*((($5 + [128]) + [24])) = $3
	*((($5 + [128]) + [20])) = $3
	*($5 + [144]) = $4
	*($5 + [156 align=4]) = (int_64)0
	$0 = *($5 + [64])
	$3 = *((($5 + [48]) + [20]))
	$4 = (($3 + [16]) - $0)
	$2 = (CASTING uint_64)(uint_32 ($3 - $0))
	$3 = ($5 + [156])
	
.LOOP $label$7:
	$4 = ($4 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$7 }
	if ( ($4 == 0) ){ goto $label$9 }
	CALL $63($3, $4)
	$3 = *(($5 + [160]))
	$4 = *(($5 + [156]))
	goto $label$8 
	
.LABEL $label$9
	$3 = [0]
	$4 = [0]
	
.LABEL $label$8
	*($5 + [244]) = $4
	*($5 + [240]) = $4
	*($5 + [248]) = $3
	*($5 + [256]) = ($5 + [240])
	*($5 + [264]) = ($5 + [48])
	CALL $65(($5 + [264]), ($5 + [256]))
	CALL $66(($5 + [128]))
	$4 = *($5 + [156])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($5 + [160])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = *($5 + [144])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($5 + [148])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	$4 = *($5 + [64])
	if ( ($4 == 0) ){ goto $label$12 }
	*(($5 + [68])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$12
	$4 = *($5 + [224])
	if ( ($4 == 0) ){ goto $label$13 }
	*($5 + [228]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$global$0 = ($5 + [272])
	return (unreachable)
	
.LABEL $label$5
	CALL $192((($5 + [48]) + [16]))
}

int_32 .FUNC $26 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [112]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $67(($4 + [24]), ($4 + [112]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($8 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4 + [8])
	$3 = *($8)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [96])
	*($4 + [40]) = $0
	*($4 + [112]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	$1 = *($4 + [80])
	$9 = *($4 + [72])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $207($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = (int_64)0
	*($2 + [8]) = [0]
	$3 = (*(($1 + [44])) - *($1 + [40]))
	$4 = ((int_32)$3 / (int_32)[40])
	$5 = *($1 + [32])
	$6 = *($1 + [24])
	$7 = *($1 + [16])
	$8 = *($1 + [8])
	$9 = *($1)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*(($2 + [8])) = ($3 + ((int_32)$4 * (int_32)[40]))
	*($2) = $3
	*($2 + [4]) = $3
	$4 = *(($1 + [40]))
	$1 = (*(($1 + [44])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($3, $4, $1)
	*($2 + [4]) = ($3 + ((int_32)((uint_32)$1 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$2
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($0) + $1))
	
.LABEL $label$3
	CALL void $0((int_32 $9), (int_64 $8), (int_64 $7), (int_64 $6), (int_64 $5), (int_64 $2), (int_32 $1))
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$4 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $192($2)
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	$2 = ($3 + [8])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$2 = ($3 + [16])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$2 = ($3 + [24])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10717])
	$4 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($2, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$2 = ($3 + [32])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10717])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	CALL $60(*($1), ($3 + [40]))
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_lowerbound(*($2), *($2 + [8]), (int_64)-5915103610240237568, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [56]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [10726])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $171($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)-5915103610240237568, $6))
	if ( ((int_32)*($4 + [56]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$2
	*($4 + [64]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4148111391159058432, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [16]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [10726])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $85($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)4148111391159058432, $6))
	if ( ((int_32)*($4 + [16]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [10726])
	
.LABEL $label$2
	*(($4 + [24])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = [0]
	if ( ((int_32)*($0) != (int_32)*($1)) ){ goto $label$1 }
	if ( ((int_32)*($0 + [4]) != (int_32)*($1 + [4])) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [5])) != (int_32)*(($1 + [5]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [6])) != (int_32)*(($1 + [6]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [7])) != (int_32)*(($1 + [7]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [8])) != (int_32)*(($1 + [8]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [9])) != (int_32)*(($1 + [9]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [10])) != (int_32)*(($1 + [10]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [11])) != (int_32)*(($1 + [11]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [12])) != (int_32)*(($1 + [12]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [13])) != (int_32)*(($1 + [13]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [14])) != (int_32)*(($1 + [14]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [15])) != (int_32)*(($1 + [15]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [16])) != (int_32)*(($1 + [16]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [17])) != (int_32)*(($1 + [17]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [18])) != (int_32)*(($1 + [18]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [19])) != (int_32)*(($1 + [19]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [20])) != (int_32)*(($1 + [20]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [21])) != (int_32)*(($1 + [21]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [22])) != (int_32)*(($1 + [22]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [23])) != (int_32)*(($1 + [23]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [24])) != (int_32)*(($1 + [24]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [25])) != (int_32)*(($1 + [25]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [26])) != (int_32)*(($1 + [26]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [27])) != (int_32)*(($1 + [27]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [28])) != (int_32)*(($1 + [28]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [29])) != (int_32)*(($1 + [29]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [30])) != (int_32)*(($1 + [30]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [31])) != (int_32)*(($1 + [31]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [32])) != (int_32)*(($1 + [32]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [33])) != (int_32)*(($1 + [33]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [34])) != (int_32)*(($1 + [34]))) ){ goto $label$1 }
	if ( ((int_32)*(($0 + [35])) != (int_32)*(($1 + [35]))) ){ goto $label$1 }
	$2 = ((int_32)*(($0 + [36])) == (int_32)*(($1 + [36])))
	
.LABEL $label$1
	return $2
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	CALL $60($0, ($1 + [32]))
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [16])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $3, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [24])
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10717])
	$3 = *($2)
	
.LABEL $label$4
	CALL memcpy($4, $3, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10717])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	$2 = ($3 + [8])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10717])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$2 = ($3 + [16])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10717])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$2 = ($3 + [24])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10717])
	$4 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($2, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	CALL $60(*($1), ($3 + [32]))
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [16])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $0) > (int_32)[15]) ){ goto $label$2 }
	CALL eosio_assert([0], [10587])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $2, [16])
	*(($3 = ($3 + [4]))) = (*($3) + [16])
	$0 = ($4 + [32])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)(*($1 + [8]) - $3) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10587])
	$3 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

void .FUNC $109 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$7 = ($global$0 - [432])
	$global$0 = $7
	*($7 + [392]) = $3
	*($7 + [336]) = [8306]
	*($7 + [340]) = CALL $201([8306])
	*($7 + [64]) = *($7 + [336])
	$8 = CALL $55(($7 + [344]), ($7 + [64]))
	$9 = [0]
	*(($7 + [384])) = [0]
	*($7 + [360]) = $2
	*($7 + [368]) = (int_64)-1
	*($7 + [376]) = (int_64)0
	*($7 + [388]) = [0]
	*($7 + [352]) = *($8)
	*($7 + [328]) = ($7 + [352])
	CALL $102(($7 + [256]), ($7 + [328]), ($7 + [392]))
	$8 = *($7 + [260])
	if ( ($8 == 0) ){ goto $label$1 }
	if ( ((int_64)*($7 + [392]) != (int_64)*($8 + [8])) ){ goto $label$1 }
	$9 = (uint_64)(*($8) <= (int_64)6)
	
.LABEL $label$1
	CALL eosio_assert($9, [9058])
	*((($7 + [256]) + [40])) = [0]
	*($7 + [264]) = $1
	*($7 + [256]) = $2
	*($7 + [288]) = (int_64)0
	*($7 + [272]) = $4
	*($7 + [280]) = $5
	$10 = (*($6 + [4]) - *($6))
	$11 = ((int_32)$10 / (int_32)[40])
	$9 = [32]
	$8 = [0]
	$12 = [0]
	if ( ($10 == 0) ){ goto $label$6 }
	if ( ((uint_32)$11 >= (uint_32)[107374183]) ){ goto $label$5 }
	$8 = CALL _Znwj($10)
	*(($7 + [288])) = $8
	*(($10 = ($7 + [292]))) = $8
	*((($7 + [256]) + [40])) = ($8 + ((int_32)$11 * (int_32)[40]))
	$6 = *($6)
	$12 = (*(($6 + [4])) - $6)
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($8, $6, $12)
	$12 = (*($10) + ((int_32)((uint_32)$12 / (uint_32)[40]) * (int_32)[40]))
	*($10) = $12
	$8 = *($7 + [288])
	goto $label$6 
	
.LABEL $label$7
	$12 = $8
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 & (int_64)4294967295) | (int_64)((int_64)$4 & (int_64)-4294967296))
	*($7 + [320]) = [0]
	*($7 + [312]) = (int_64)0
	$4 = (CASTING uint_64)(uint_32 ((int_32)($12 - $8) / (int_32)[40]))
	
.LOOP $label$8:
	$9 = ($9 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$8 }
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$11 }
	
.LOOP $label$12:
	$9 = ($9 + [33])
	$4 = *($8)
	
.LOOP $label$13:
	$9 = ($9 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$13 }
	$8 = ($8 + [40])
	if ( ((int_32)$8 != (int_32)$12) ){ goto $label$12 }
	if ( ($9 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $63(($7 + [312]), $9)
	$8 = *($7 + [316])
	$9 = *($7 + [312])
	goto $label$9 
	
.LABEL $label$10
	$8 = [0]
	$9 = [0]
	
.LABEL $label$9
	*($7 + [164]) = $9
	*($7 + [160]) = $9
	*($7 + [168]) = $8
	*($7 + [240]) = ($7 + [160])
	*($7 + [400]) = ($7 + [256])
	CALL $142(($7 + [400]), ($7 + [240]))
	$9 = *($7 + [288])
	if ( ($9 == 0) ){ goto $label$14 }
	*(($7 + [292])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	*((($7 + [256]) + [24])) = $1
	*(($7 + [296])) = [0]
	*($7 + [272]) = $5
	*($7 + [256]) = $2
	*($7 + [288]) = (int_64)0
	$8 = [0]
	$12 = [0]
	$9 = (*($7 + [316]) - *($7 + [312]))
	if ( ($9 == 0) ){ goto $label$15 }
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$4 }
	$8 = CALL _Znwj($9)
	*(($7 + [288])) = $8
	*(($6 = ($7 + [292]))) = $8
	*(($7 + [296])) = ($8 + $9)
	$12 = *($7 + [312])
	$9 = (*($7 + [316]) - $12)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($8, $12, $9)
	$12 = (*($6) + $9)
	*($6) = $12
	$8 = *($7 + [288])
	goto $label$15 
	
.LABEL $label$16
	$12 = $8
	
.LABEL $label$15
	*($7 + [248]) = [0]
	*($7 + [240]) = (int_64)0
	$9 = (($12 + [24]) - $8)
	$4 = (CASTING uint_64)(uint_32 ($12 - $8))
	
.LOOP $label$17:
	$9 = ($9 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$17 }
	if ( ($9 == 0) ){ goto $label$19 }
	CALL $63(($7 + [240]), $9)
	$8 = *($7 + [244])
	$9 = *($7 + [240])
	goto $label$18 
	
.LABEL $label$19
	$8 = [0]
	$9 = [0]
	
.LABEL $label$18
	*($7 + [164]) = $9
	*($7 + [160]) = $9
	*($7 + [168]) = $8
	*($7 + [136]) = ($7 + [160])
	*($7 + [400]) = ($7 + [256])
	CALL $143(($7 + [400]), ($7 + [136]))
	$9 = *($7 + [288])
	if ( ($9 == 0) ){ goto $label$20 }
	*(($7 + [292])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$20
	$4 = *($0)
	*($7 + [224]) = [8385]
	*($7 + [228]) = CALL $201([8385])
	*($7 + [56]) = *($7 + [224])
	$3 = *(CALL $55(($7 + [232]), ($7 + [56])))
	*($7 + [208]) = [8306]
	*($7 + [212]) = CALL $201([8306])
	*($7 + [48]) = *($7 + [208])
	$12 = CALL $55(($7 + [216]), ($7 + [48]))
	*($7 + [192]) = [8897]
	*($7 + [196]) = CALL $201([8897])
	*($7 + [40]) = *($7 + [192])
	$6 = CALL $55(($7 + [200]), ($7 + [40]))
	*($7 + [152]) = [9106]
	*($7 + [156]) = CALL $201([9106])
	*($7 + [32]) = *($7 + [152])
	$9 = CALL $55(($7 + [136]), ($7 + [32]))
	*((($7 + [160]) + [24])) = [0]
	*($7 + [160]) = $2
	*($7 + [176]) = (int_64)0
	*($7 + [168]) = *($9)
	$9 = (*($7 + [244]) - *($7 + [240]))
	if ( ($9 == 0) ){ goto $label$21 }
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$3 }
	$8 = CALL _Znwj($9)
	*(($7 + [176])) = $8
	*(($10 = ($7 + [180]))) = $8
	*(($7 + [184])) = ($8 + $9)
	$11 = *($7 + [240])
	$9 = (*($7 + [244]) - $11)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$21 }
	CALL memcpy($8, $11, $9)
	*($10) = (*($10) + $9)
	
.LABEL $label$21
	*(($8 = (($7 + [256]) + [24]))) = [0]
	*($7 + [272]) = (int_64)0
	*($7 + [256]) = *($12)
	*($7 + [264]) = *($6)
	*(($9 = CALL _Znwj([16]))) = $4
	*($9 + [8]) = $3
	*(($7 + [292])) = [0]
	$12 = ($9 + [16])
	*($8) = $12
	*((($7 + [256]) + [20])) = $12
	*($7 + [272]) = $9
	*($7 + [284 align=4]) = (int_64)0
	$12 = *($7 + [176])
	$8 = *((($7 + [160]) + [20]))
	$9 = (($8 + [16]) - $12)
	$4 = (CASTING uint_64)(uint_32 ($8 - $12))
	$8 = ($7 + [284])
	
.LOOP $label$22:
	$9 = ($9 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$22 }
	if ( ($9 == 0) ){ goto $label$24 }
	CALL $63($8, $9)
	$8 = *(($7 + [288]))
	$9 = *(($7 + [284]))
	goto $label$23 
	
.LABEL $label$24
	$8 = [0]
	$9 = [0]
	
.LABEL $label$23
	*($7 + [404]) = $9
	*($7 + [400]) = $9
	*($7 + [408]) = $8
	*($7 + [424]) = ($7 + [400])
	*($7 + [80]) = ($7 + [160])
	CALL $65(($7 + [80]), ($7 + [424]))
	CALL $66(($7 + [256]))
	$9 = *($7 + [284])
	if ( ($9 == 0) ){ goto $label$25 }
	*(($7 + [288])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$25
	$9 = *($7 + [272])
	if ( ($9 == 0) ){ goto $label$26 }
	*(($7 + [276])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$26
	$9 = *($7 + [176])
	if ( ($9 == 0) ){ goto $label$27 }
	*(($7 + [180])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$27
	*(($12 = (($7 + [256]) + [24]))) = $1
	*($7 + [272]) = $5
	*($7 + [256]) = $2
	*($7 + [136]) = (int_64)0
	*($7 + [144]) = [0]
	*($7 + [288]) = *($7 + [392])
	CALL $63(($7 + [136]), [32])
	$9 = *($7 + [140])
	$8 = *($7 + [136])
	*($7 + [164]) = $8
	*($7 + [160]) = $8
	*($7 + [168]) = $9
	*($7 + [80]) = ($7 + [160])
	*($7 + [400]) = ($7 + [256])
	CALL $106(($7 + [400]), ($7 + [80]))
	$4 = *($0)
	*($7 + [120]) = [8385]
	*($7 + [124]) = CALL $201([8385])
	*($7 + [24]) = *($7 + [120])
	$1 = *(CALL $55(($7 + [128]), ($7 + [24])))
	*($7 + [104]) = [8306]
	*($7 + [108]) = CALL $201([8306])
	*($7 + [16]) = *($7 + [104])
	$6 = CALL $55(($7 + [112]), ($7 + [16]))
	*($7 + [88]) = [8897]
	*($7 + [92]) = CALL $201([8897])
	*($7 + [8]) = *($7 + [88])
	$0 = CALL $55(($7 + [96]), ($7 + [8]))
	*($7 + [72]) = [9118]
	*($7 + [76]) = CALL $201([9118])
	*($7) = *($7 + [72])
	$9 = CALL $55(($7 + [80]), $7)
	*((($7 + [160]) + [24])) = [0]
	*($7 + [160]) = $2
	*($7 + [176]) = (int_64)0
	*($7 + [168]) = *($9)
	$9 = (*($7 + [140]) - *($7 + [136]))
	if ( ($9 == 0) ){ goto $label$28 }
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$2 }
	$8 = CALL _Znwj($9)
	*(($7 + [176])) = $8
	*(($10 = ($7 + [180]))) = $8
	*(($7 + [184])) = ($8 + $9)
	$11 = *($7 + [136])
	$9 = (*($7 + [140]) - $11)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$28 }
	CALL memcpy($8, $11, $9)
	*($10) = (*($10) + $9)
	
.LABEL $label$28
	*($7 + [256]) = *($6)
	*($7 + [264]) = *($0)
	*(($9 = CALL _Znwj([16]))) = $4
	*($9 + [8]) = $1
	*(($7 + [292])) = [0]
	$8 = ($9 + [16])
	*($12) = $8
	*((($7 + [256]) + [20])) = $8
	*($7 + [272]) = $9
	*($7 + [284 align=4]) = (int_64)0
	$12 = *($7 + [176])
	$8 = *((($7 + [160]) + [20]))
	$9 = (($8 + [16]) - $12)
	$4 = (CASTING uint_64)(uint_32 ($8 - $12))
	$8 = ($7 + [284])
	
.LOOP $label$29:
	$9 = ($9 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$29 }
	if ( ($9 == 0) ){ goto $label$31 }
	CALL $63($8, $9)
	$8 = *(($7 + [288]))
	$9 = *(($7 + [284]))
	goto $label$30 
	
.LABEL $label$31
	$8 = [0]
	$9 = [0]
	
.LABEL $label$30
	*($7 + [404]) = $9
	*($7 + [400]) = $9
	*($7 + [408]) = $8
	*($7 + [416]) = ($7 + [400])
	*($7 + [424]) = ($7 + [160])
	CALL $65(($7 + [424]), ($7 + [416]))
	CALL $66(($7 + [256]))
	$9 = *($7 + [284])
	if ( ($9 == 0) ){ goto $label$32 }
	*(($7 + [288])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$32
	$9 = *($7 + [272])
	if ( ($9 == 0) ){ goto $label$33 }
	*(($7 + [276])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$33
	$9 = *($7 + [176])
	if ( ($9 == 0) ){ goto $label$34 }
	*(($7 + [180])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$34
	$9 = *($7 + [136])
	if ( ($9 == 0) ){ goto $label$35 }
	*($7 + [140]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$35
	$9 = *($7 + [240])
	if ( ($9 == 0) ){ goto $label$36 }
	*($7 + [244]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$36
	$9 = *($7 + [312])
	if ( ($9 == 0) ){ goto $label$37 }
	*($7 + [316]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$37
	$12 = *($7 + [376])
	if ( ($12 == 0) ){ goto $label$38 }
	$6 = ($7 + [380])
	$9 = *($6)
	if ( ((int_32)$9 == (int_32)$12) ){ goto $label$40 }
	
.LOOP $label$41:
	$9 = ($9 + [-24])
	$8 = *($9)
	*($9) = [0]
	if ( ($8 == 0) ){ goto $label$42 }
	CALL _ZdlPv($8)
	
.LABEL $label$42
	if ( ((int_32)$12 != (int_32)$9) ){ goto $label$41 }
	$9 = *(($7 + [376]))
	goto $label$39 
	
.LABEL $label$40
	$9 = $12
	
.LABEL $label$39
	*($6) = $12
	CALL _ZdlPv($9)
	
.LABEL $label$38
	$global$0 = ($7 + [432])
	return (unreachable)
	
.LABEL $label$5
	CALL $192((($7 + [256]) + [32]))
	
.LABEL $label$4
	CALL $192(($7 + [288]))
	
.LABEL $label$3
	CALL $192((($7 + [160]) + [16]))
	
.LABEL $label$2
	CALL $192((($7 + [160]) + [16]))
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = (int_64)0
	*($2 + [8]) = [0]
	$3 = (*(($1 + [36])) - *($1 + [32]))
	$4 = ((int_32)$3 / (int_32)[40])
	$5 = *($1 + [24])
	$6 = *($1 + [16])
	$7 = *($1 + [8])
	$8 = *($1)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*(($2 + [8])) = ($3 + ((int_32)$4 * (int_32)[40]))
	*($2) = $3
	*($2 + [4]) = $3
	$4 = *(($1 + [32]))
	$1 = (*(($1 + [36])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($3, $4, $1)
	*($2 + [4]) = ($3 + ((int_32)((uint_32)$1 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$2
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($0) + $1))
	
.LABEL $label$3
	CALL void $0((int_32 $8), (int_64 $7), (int_64 $6), (int_64 $5), (int_64 $2), (int_32 $1))
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$4 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $192($2)
}

int_32 .FUNC $38 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [432])
	$global$0 = $3
	*(($4 = $3) + [128]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	$6 = CALL memset((($4 + [40]) + [8]), [0], [66])
	*(($4 + [124])) = [0]
	*($4 + [116 align=4]) = (int_64)0
	*($4 + [28]) = $2
	*($4 + [24]) = $2
	*($4 + [32]) = ($2 + $5)
	$3 = $2
	if ( ((uint_32)$5 > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10717])
	$3 = *($4 + [28])
	
.LABEL $label$4
	CALL memcpy(($4 + [40]), $3, [8])
	*($4 + [28]) = (*($4 + [28]) + [8])
	*($4 + [416]) = ($4 + [24])
	*($4 + [140]) = ($4 + [49])
	*($4 + [136]) = $6
	*($4 + [144]) = ($4 + [50])
	*($4 + [148]) = ($4 + [51])
	*($4 + [152]) = ($4 + [52])
	*($4 + [156]) = ($4 + [53])
	*($4 + [160]) = ($4 + [54])
	*($4 + [164]) = ($4 + [55])
	*($4 + [168]) = ($4 + [56])
	*($4 + [172]) = ($4 + [57])
	*($4 + [176]) = ($4 + [58])
	*($4 + [180]) = ($4 + [59])
	*($4 + [184]) = ($4 + [60])
	*($4 + [188]) = ($4 + [61])
	*($4 + [192]) = ($4 + [62])
	*($4 + [196]) = ($4 + [63])
	*($4 + [200]) = (($4 + [40]) + [24])
	*($4 + [204]) = ($4 + [65])
	*($4 + [208]) = ($4 + [66])
	*($4 + [216]) = ($4 + [68])
	*($4 + [212]) = ($4 + [67])
	*($4 + [220]) = ($4 + [69])
	*($4 + [224]) = ($4 + [70])
	*($4 + [228]) = ($4 + [71])
	*($4 + [232]) = ($4 + [72])
	*($4 + [236]) = ($4 + [73])
	*($4 + [240]) = ($4 + [74])
	*($4 + [244]) = ($4 + [75])
	*($4 + [248]) = ($4 + [76])
	*($4 + [252]) = ($4 + [77])
	*($4 + [256]) = ($4 + [78])
	*($4 + [260]) = ($4 + [79])
	*($4 + [264]) = ($4 + [80])
	*($4 + [268]) = ($4 + [81])
	*($4 + [272]) = ($4 + [82])
	*($4 + [276]) = ($4 + [83])
	*($4 + [280]) = ($4 + [84])
	*($4 + [284]) = ($4 + [85])
	*($4 + [292]) = ($4 + [87])
	*($4 + [288]) = ($4 + [86])
	*($4 + [296]) = ($4 + [88])
	*($4 + [300]) = ($4 + [89])
	*($4 + [304]) = ($4 + [90])
	*($4 + [308]) = ($4 + [91])
	*($4 + [312]) = ($4 + [92])
	*($4 + [316]) = ($4 + [93])
	*($4 + [320]) = ($4 + [94])
	*($4 + [324]) = ($4 + [95])
	*($4 + [328]) = ($4 + [96])
	*($4 + [332]) = ($4 + [97])
	*($4 + [336]) = ($4 + [98])
	*($4 + [340]) = ($4 + [99])
	*($4 + [344]) = ($4 + [100])
	*($4 + [348]) = ($4 + [101])
	*($4 + [352]) = ($4 + [102])
	*($4 + [356]) = ($4 + [103])
	*($4 + [360]) = ($4 + [104])
	*($4 + [368]) = (($4 + [40]) + [66])
	*($4 + [364]) = ($4 + [105])
	*($4 + [372]) = ($4 + [107])
	*($4 + [376]) = ($4 + [108])
	*($4 + [380]) = ($4 + [109])
	*($4 + [384]) = ($4 + [110])
	*($4 + [388]) = ($4 + [111])
	*($4 + [392]) = ($4 + [112])
	*($4 + [396]) = ($4 + [113])
	CALL $76(($4 + [136]), ($4 + [416]))
	$3 = ($4 + [116])
	CALL $77(($4 + [24]), $3)
	*(($6 = (($4 + [8]) + [8]))) = *((($4 + [24]) + [8]))
	*($4 + [8]) = *($4 + [24])
	*(($7 = (($4 + [400]) + [8]))) = *($6)
	*($4 + [400]) = *($4 + [8])
	$6 = *($7)
	*((($4 + [416]) + [8])) = $6
	*((($4 + [136]) + [24])) = $6
	*($4 + [136]) = $0
	*($4 + [144]) = $1
	$0 = *($4 + [400])
	*($4 + [152]) = $0
	*($4 + [416]) = $0
	*($4 + [420]) = ($4 + [128])
	*($4 + [416]) = ($4 + [136])
	CALL $86(($4 + [416]), ($4 + [40]))
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL $207($2)
	
.LABEL $label$5
	$2 = *($3)
	if ( ($2 == 0) ){ goto $label$6 }
	*(($4 + [120])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$global$0 = ($4 + [432])
	return [1]
}

void .FUNC $39 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth(*($0))
	*($3 + [16]) = [8887]
	*($3 + [20]) = CALL $201([8887])
	*($3 + [8]) = *($3 + [16])
	CALL $68($0, $1, *(CALL $55(($3 + [24]), ($3 + [8]))), $2, (int_64)0, [1814400])
	$global$0 = ($3 + [32])
}

void .FUNC $36 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL require_auth(*($0))
	*($3 + [104]) = [8642]
	*($3 + [108]) = CALL $201([8642])
	*($3 + [8]) = *($3 + [104])
	$4 = *(CALL $55(($3 + [112]), ($3 + [8])))
	*($3 + [88]) = $2
	*($3 + [80]) = ((int_64)$4 & (int_64)-4294967296)
	*($3 + [24]) = [8306]
	*($3 + [28]) = CALL $201([8306])
	*($3) = *($3 + [24])
	$5 = CALL $55(($3 + [32]), $3)
	$6 = [0]
	*(($3 + [72])) = [0]
	*($3 + [48]) = $1
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	*($3 + [76]) = [0]
	*($3 + [40]) = *($5)
	*($3 + [16]) = ($3 + [40])
	CALL $103(($3 + [120]), ($3 + [16]), ($3 + [80]))
	$5 = *($3 + [124])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = (int_64)(((int_64)((int_64)*($3 + [80]) ^ (int_64)*($5 + [16])) | (int_64)((int_64)*($3 + [88]) ^ (int_64)*(($5 + [24])))) == 0)
	
.LABEL $label$1
	CALL eosio_assert($6, [9285])
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [9407])
	CALL $84($0, $1, *($3 + [80]), *($3 + [88]))
	$7 = *($3 + [64])
	if ( ($7 == 0) ){ goto $label$2 }
	$8 = ($3 + [68])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	$5 = *($0 + [44])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($0 + [48])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$7
	$5 = *($0 + [32])
	if ( ($5 == 0) ){ goto $label$8 }
	*(($0 + [36])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$8
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$5 }
	$0 = *(($3 + [64]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $7
	
.LABEL $label$3
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($3 + [128])
}

void .FUNC $37 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [448])
	$global$0 = $4
	*($4 + [440]) = [8515]
	*($4 + [444]) = CALL $201([8515])
	*($4 + [152]) = *($4 + [440])
	if ( ((int_64)*(CALL $55(($4 + [376]), ($4 + [152]))) != (int_64)$1) ){ goto $label$4 }
	*($4 + [376]) = (int_64)0
	*($4 + [384]) = (int_64)0
	*($4 + [392]) = [0]
	$5 = *($3 + [4])
	$6 = *($3)
	*($4 + [180]) = $6
	*($4 + [176]) = $6
	*($4 + [184]) = $5
	CALL $93(($4 + [176]), ($4 + [376]))
	CALL eosio_assert(((int_32)*($4 + [432]) ^ (int_32)[1]), [8525])
	$7 = *($4 + [384])
	$8 = *($4 + [376])
	CALL memcpy(($4 + [304]), $2, [66])
	*($4 + [296]) = [0]
	*($4 + [288]) = (int_64)0
	$2 = (*($3 + [4]) - *($3))
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL _Znwj($2)
	*(($4 + [296])) = ($5 + $2)
	*($4 + [288]) = $5
	*($4 + [292]) = $5
	$6 = *($3)
	$2 = (*(($3 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $6, $2)
	*($4 + [292]) = (*($4 + [292]) + $2)
	
.LABEL $label$5
	CALL memcpy(($4 + [12]), ($4 + [304]), [66])
	CALL $94($0, $8, $7, [1], ($4 + [12]), ($4 + [288]))
	$2 = *($4 + [288])
	if ( ($2 == 0) ){ goto $label$3 }
	*($4 + [292]) = $2
	CALL _ZdlPv($2)
	goto $label$3 
	
.LABEL $label$4
	*($4 + [280]) = [8505]
	*($4 + [284]) = CALL $201([8505])
	*($4 + [144]) = *($4 + [280])
	if ( ((int_64)*(CALL $55(($4 + [376]), ($4 + [144]))) != (int_64)$1) ){ goto $label$6 }
	*(($4 + [400])) = (int_64)0
	*(($4 + [408])) = (int_64)0
	*($4 + [376]) = (int_64)0
	*($4 + [384]) = (int_64)0
	*($4 + [392]) = (int_64)0
	$5 = *($3 + [4])
	$6 = *($3)
	*($4 + [180]) = $6
	*($4 + [176]) = $6
	*($4 + [184]) = $5
	CALL $95(($4 + [176]), ($4 + [376]))
	$6 = *($4 + [416])
	$7 = *($4 + [384])
	$8 = *($4 + [376])
	CALL memcpy(($4 + [208]), $2, [66])
	*($4 + [200]) = [0]
	*($4 + [192]) = (int_64)0
	$2 = (*($3 + [4]) - *($3))
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL _Znwj($2)
	*(($4 + [200])) = ($5 + $2)
	*($4 + [192]) = $5
	*($4 + [196]) = $5
	$9 = *($3)
	$2 = (*(($3 + [4])) - $9)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($5, $9, $2)
	*($4 + [196]) = (*($4 + [196]) + $2)
	
.LABEL $label$7
	CALL memcpy(($4 + [78]), ($4 + [208]), [66])
	CALL $94($0, $8, $7, ((int_32)($6 & [255]) != (int_32)[0]), ($4 + [78]), ($4 + [192]))
	$2 = *($4 + [192])
	if ( ($2 == 0) ){ goto $label$3 }
	*($4 + [196]) = $2
	CALL _ZdlPv($2)
	goto $label$3 
	
.LABEL $label$6
	CALL eosio_assert([0], [8576])
	
.LABEL $label$3
	*(($4 + [412])) = [0]
	*($4 + [404 align=4]) = (int_64)0
	$7 = *($0)
	*($4 + [160]) = [8385]
	*($4 + [164]) = CALL $201([8385])
	*($4) = *($4 + [160])
	$2 = CALL $55(($4 + [168]), $4)
	*($4 + [176]) = $7
	*($4 + [184]) = *($2)
	*((($2 = CALL _Znwj([16])) + [8])) = *($4 + [184])
	*($2) = *($4 + [176])
	$5 = ($2 + [16])
	*(($4 + [396])) = $5
	*(($4 + [400])) = $5
	*($4 + [392]) = $2
	$7 = *($0)
	*($4 + [384]) = $1
	*($4 + [376]) = $7
	$2 = ($4 + [404])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	CALL $73($2, *($3), *($3 + [4]))
	
.LABEL $label$8
	CALL $66(($4 + [376]))
	CALL prints([8609])
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$9 }
	*(($4 + [408])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$9
	$3 = *(($4 + [392]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($4 + [396])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$10
	$global$0 = ($4 + [448])
	return (unreachable)
	
.LABEL $label$2
	CALL $192(($4 + [288]))
	
.LABEL $label$1
	CALL $192(($4 + [192]))
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	$6 = ($global$0 - [80])
	$global$0 = $6
	CALL require_auth(*($0))
	*($6 + [64]) = [8874]
	*($6 + [68]) = CALL $201([8874])
	*($6 + [32]) = *($6 + [64])
	if ( ((int_64)*(CALL $55(($6 + [72]), ($6 + [32]))) != (int_64)$3) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($5 + [4]) != (int_32)*($5)), [8842])
	CALL eosio_assert((int_64)($4 == 0), [9130])
	goto $label$1 
	
.LABEL $label$2
	*($6 + [56]) = [8919]
	*($6 + [60]) = CALL $201([8919])
	*($6 + [24]) = *($6 + [56])
	if ( ((int_64)*(CALL $55(($6 + [72]), ($6 + [24]))) != (int_64)$3) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($5 + [4]) == (int_32)*($5)), [9162])
	CALL eosio_assert((int_64)($4 == 0), [9130])
	goto $label$1 
	
.LABEL $label$3
	*($6 + [48]) = [8642]
	*($6 + [52]) = CALL $201([8642])
	*($6 + [16]) = *($6 + [48])
	if ( ((int_64)*(CALL $55(($6 + [72]), ($6 + [16]))) != (int_64)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)(*($5 + [4]) - *($5)) == (int_32)[40]), [9191])
	CALL eosio_assert((int_64)($4 == 0), [9215])
	goto $label$1 
	
.LABEL $label$4
	*($6 + [40]) = [8832]
	*($6 + [44]) = CALL $201([8832])
	*($6 + [8]) = *($6 + [40])
	if ( ((int_64)*(CALL $55(($6 + [72]), ($6 + [8]))) != (int_64)$3) ){ goto $label$5 }
	CALL eosio_assert(((int_32)(*($5 + [4]) - *($5)) == (int_32)[40]), [9191])
	CALL eosio_assert(((int_64)$4 != (int_64)0), [9236])
	goto $label$1 
	
.LABEL $label$5
	CALL eosio_assert([0], [9261])
	
.LABEL $label$1
	CALL $109($0, $1, $1, $2, $3, $4, $5)
	$global$0 = ($6 + [80])
}

int_32 .FUNC $35 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $107(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $108(($4 + [144]), ($4 + [72]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $207($2)
	
.LABEL $label$4
	$2 = *(($4 + [104]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [108])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

int_32 .FUNC $32 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [256])
	$global$0 = $3
	*(($4 = $3) + [216]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*($4 + [64]) = (int_64)0
	CALL memset((($4 + [64]) + [8]), [0], [66])
	CALL memset(($4 + [138]), [0], [66])
	*(($4 + [212])) = [0]
	*($4 + [204 align=4]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [240]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $89(($4 + [16]), ($4 + [240]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [224]) + [8]))) = *($3)
	*($4 + [224]) = *($4)
	$3 = *($6)
	*((($4 + [240]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [224])
	*($4 + [32]) = $0
	*($4 + [240]) = $0
	*($4 + [244]) = ($4 + [216])
	*($4 + [240]) = ($4 + [16])
	CALL $90(($4 + [240]), ($4 + [64]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $207($2)
	
.LABEL $label$4
	$2 = *(($4 + [204]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [208])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $33 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL require_auth(*($0))
	CALL eosio_assert(((int_64)$2 != (int_64)0), [8794])
	*(($5 = (($4 + [152]) + [8]))) = *(($3 + [12]))
	*(($6 = (($4 + [152]) + [16]))) = *(($3 + [20]))
	*(($7 = (($4 + [152]) + [24]))) = *(($3 + [28]))
	*(($8 = (($4 + [152]) + [32]))) = *(($3 + [36]))
	*($4 + [152]) = *($3 + [4 align=4])
	$3 = *($3)
	*($4 + [128]) = [8832]
	*($4 + [132]) = CALL $201([8832])
	*($4 + [64]) = *($4 + [128])
	$9 = CALL $55(($4 + [136]), ($4 + [64]))
	*((($4 + [72]) + [12])) = *($5)
	*((($4 + [72]) + [20])) = *($6)
	*((($4 + [72]) + [28])) = *($7)
	*((($4 + [72]) + [36])) = *($8)
	*(($4 + [119])) = *(($4 + [151]))
	*(($4 + [117])) = *(($4 + [149]))
	*($4 + [72]) = $3
	*($4 + [112]) = [0]
	*($4 + [76 align=4]) = *($4 + [152])
	*($4 + [113 align=1]) = *($4 + [145 align=1])
	*($4 + [120]) = (int_64)0
	$10 = *($9)
	*(($4 + [56])) = (int_64)0
	*(($4 + [48])) = *($4 + [112])
	*((($4 + [8]) + [32])) = *((($4 + [72]) + [32]))
	*((($4 + [8]) + [24])) = *((($4 + [72]) + [24]))
	*((($4 + [8]) + [16])) = *((($4 + [72]) + [16]))
	*((($4 + [8]) + [8])) = *((($4 + [72]) + [8]))
	*($4 + [8]) = *($4 + [72])
	CALL $58($0, $1, $10, $2, ($4 + [8]), [604800])
	$global$0 = ($4 + [192])
}

int_32 .FUNC $30 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $204($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [164])) = [0]
	*(($4 + [156])) = (int_64)0
	*(($4 + [148])) = (int_64)0
	*(($4 + [140])) = (int_64)0
	*(($4 + [132])) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = [0]
	*($4 + [100]) = $2
	*($4 + [96]) = $2
	*($4 + [104]) = ($2 + $7)
	*($4 + [208]) = ($4 + [96])
	*($4 + [248]) = ($4 + [112])
	CALL $59(($4 + [248]), ($4 + [208]))
	*(($8 = (($4 + [48]) + [8]))) = *($4 + [104])
	*($4 + [48]) = *($4 + [96])
	*(($3 = (($4 + [208]) + [8]))) = *($8)
	*($4 + [208]) = *($4 + [48])
	$8 = *($3)
	*((($4 + [248]) + [8])) = $8
	*((($4 + [64]) + [24])) = $8
	*($4 + [64]) = $0
	*($4 + [72]) = $1
	$0 = *($4 + [208])
	*($4 + [80]) = $0
	*($4 + [248]) = $0
	*(($8 = (($4 + [168]) + [8]))) = *((($4 + [112]) + [24]))
	*(($9 = (($4 + [168]) + [16]))) = *((($4 + [112]) + [32]))
	*(($10 = (($4 + [168]) + [24]))) = *(($4 + [152]))
	*(($11 = (($4 + [168]) + [32]))) = *(($4 + [160]))
	*($4 + [168]) = *($4 + [128])
	$0 = *($4 + [120])
	$1 = *($4 + [112])
	*((($4 + [208]) + [32])) = *($11)
	*((($4 + [208]) + [24])) = *($10)
	*((($4 + [208]) + [16])) = *($9)
	*($3) = *($8)
	*($4 + [208]) = *($4 + [168])
	$3 = (($4 + [64]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$12 = *((($4 + [208]) + [32]))
	*((($4 + [248]) + [32])) = $12
	$13 = *((($4 + [208]) + [24]))
	*((($4 + [248]) + [24])) = $13
	$14 = *((($4 + [208]) + [16]))
	*((($4 + [248]) + [16])) = $14
	$15 = *((($4 + [208]) + [8]))
	*((($4 + [248]) + [8])) = $15
	*((($4 + [8]) + [8])) = $15
	*((($4 + [8]) + [16])) = $14
	*((($4 + [8]) + [24])) = $13
	*((($4 + [8]) + [32])) = $12
	$12 = *($4 + [208])
	*($4 + [8]) = $12
	*($4 + [248]) = $12
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $207($2)
	
.LABEL $label$5
	$global$0 = ($4 + [288])
	return [1]
}

void .FUNC $31 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$5 = ($global$0 - [480])
	$global$0 = $5
	*($5 + [472]) = [8634]
	*($5 + [476]) = CALL $201([8634])
	*($5 + [176]) = *($5 + [472])
	if ( ((int_64)*(CALL $55(($5 + [424]), ($5 + [176]))) != (int_64)$1) ){ goto $label$2 }
	*(($5 + [464])) = [0]
	*($5 + [424]) = (int_64)0
	*($5 + [432]) = (int_64)0
	*($5 + [440]) = (int_64)0
	*($5 + [456]) = (int_64)0
	$6 = *($4 + [4])
	$7 = *($4)
	*($5 + [204]) = $7
	*($5 + [200]) = $7
	*($5 + [208]) = $6
	CALL $91(($5 + [200]), ($5 + [424]))
	$8 = *($5 + [432])
	$9 = *($5 + [424])
	$10 = *($5 + [440])
	*($5 + [416]) = [8642]
	*($5 + [420]) = CALL $201([8642])
	*($5 + [160]) = *($5 + [416])
	$11 = *(CALL $55(($5 + [200]), ($5 + [160])))
	$6 = *($5 + [456])
	if ( ($6 == 0) ){ goto $label$3 }
	*(($5 + [460])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$3
	$7 = ((int_64)$10 == (int_64)$11)
	goto $label$1 
	
.LABEL $label$2
	*($5 + [408]) = [8652]
	*($5 + [412]) = CALL $201([8652])
	*($5 + [168]) = *($5 + [408])
	if ( ((int_64)*(CALL $55(($5 + [424]), ($5 + [168]))) != (int_64)$1) ){ goto $label$4 }
	*($5 + [424]) = (int_64)0
	*($5 + [440]) = (int_64)0
	$6 = *($4 + [4])
	$7 = *($4)
	*($5 + [204]) = $7
	*($5 + [200]) = $7
	*($5 + [208]) = $6
	CALL $92(($5 + [200]), ($5 + [424]))
	$8 = *($5 + [440])
	$9 = *($5 + [424])
	$7 = [0]
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	CALL eosio_assert([0], [8662])
	$8 = (int_64)0
	$9 = (int_64)0
	
.LABEL $label$1
	$10 = *($0)
	CALL memcpy(($5 + [336]), $2, [66])
	*($5 + [328]) = [0]
	*($5 + [320]) = (int_64)0
	$2 = (*(($4 + [4])) - *($4))
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$6 }
	$6 = CALL _Znwj($2)
	*(($5 + [328])) = ($6 + $2)
	*($5 + [320]) = $6
	*($5 + [324]) = $6
	$12 = *($4)
	$2 = (*(($4 + [4])) - $12)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($6, $12, $2)
	*($5 + [324]) = (*($5 + [324]) + $2)
	
.LABEL $label$7
	CALL memcpy(($5 + [94]), ($5 + [336]), [66])
	CALL $80($0, $10, $9, $1, ($5 + [94]), ($5 + [320]), $7)
	$2 = *($5 + [320])
	if ( ($2 == 0) ){ goto $label$8 }
	*($5 + [324]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	*($5 + [304]) = [8691]
	*($5 + [308]) = CALL $201([8691])
	*($5 + [80]) = *($5 + [304])
	$9 = *(CALL $55(($5 + [312]), ($5 + [80])))
	$10 = *($0)
	CALL memcpy(($5 + [232]), $3, [66])
	*($5 + [224]) = [0]
	*($5 + [216]) = (int_64)0
	$2 = (*(($4 + [4])) - *($4))
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL _Znwj($2)
	*(($5 + [224])) = ($6 + $2)
	*($5 + [216]) = $6
	*($5 + [220]) = $6
	$3 = *($4)
	$2 = (*(($4 + [4])) - $3)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($6, $3, $2)
	*($5 + [220]) = (*($5 + [220]) + $2)
	
.LABEL $label$9
	CALL memcpy(($5 + [14]), ($5 + [232]), [66])
	CALL $80($0, $10, $8, $9, ($5 + [14]), ($5 + [216]), [0])
	$2 = *($5 + [216])
	if ( ($2 == 0) ){ goto $label$10 }
	*($5 + [220]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$10
	*(($5 + [460])) = [0]
	*($5 + [452 align=4]) = (int_64)0
	$8 = *($0)
	*($5 + [184]) = [8385]
	*($5 + [188]) = CALL $201([8385])
	*($5) = *($5 + [184])
	$2 = CALL $55(($5 + [192]), $5)
	*($5 + [200]) = $8
	*($5 + [208]) = *($2)
	*((($2 = CALL _Znwj([16])) + [8])) = *($5 + [208])
	*($2) = *($5 + [200])
	$6 = ($2 + [16])
	*(($5 + [444])) = $6
	*(($5 + [448])) = $6
	*($5 + [440]) = $2
	$8 = *($0)
	*($5 + [432]) = $1
	*($5 + [424]) = $8
	$0 = ($5 + [452])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$11 }
	CALL $73($0, *($4), *(($4 + [4])))
	
.LABEL $label$11
	CALL $66(($5 + [424]))
	CALL prints([8698])
	$4 = *($0)
	if ( ($4 == 0) ){ goto $label$12 }
	*(($5 + [456])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$12
	$4 = *(($5 + [440]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($5 + [444])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$global$0 = ($5 + [480])
	return (unreachable)
	
.LABEL $label$6
	CALL $192(($5 + [320]))
	
.LABEL $label$5
	CALL $192(($5 + [216]))
	(unreachable)
}

int_32 .FUNC $198 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $199 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $196 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [32] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $198($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $198($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $198($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $198($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19216]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $198($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $198($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $198($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $197 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

void .FUNC $194 (int_32 $0)
{
}

int_64 .FUNC $195 (float_64 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	float_64 $5
	$1 = ($global$0 - [16])
	if ( ((float_64)$0 == (float_64)(float_64)0) ){ goto $label$1 }
	$2 = (CASTING int_64)(float_64 $0)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$3) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = ((int_64)$2 < (int_64)0)
	$5 = (float_64))(( ((float_64)((float_64)$0 + (float_64)(float_64)-4503599627370496) + (float_64)(float_64)4503599627370496) ? ((float_64)((float_64)$0 + (float_64)(float_64)4503599627370496) + (float_64)(float_64)-4503599627370496) : $4 ) - $0)
	if ( ((uint_32)$3 > (uint_32)[1022]) ){ goto $label$2 }
	*($1 + [8]) = $5
	return ( (float_64)-0 ? (float_64)1 : $4 )
	
.LABEL $label$2
	$0 = ((float_64)$5 + (float_64)$0)
	if ( ((int_32)((float_64)$5 < (float_64)(float_64)0) ^ (int_32)[1]) ){ goto $label$1 }
	$0 = ((float_64)$0 + (float_64)(float_64)1)
	
.LABEL $label$1
	return $0
}

void .FUNC $192 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $193 ()
{
	return [10804]
}

int_32 .FUNC $190 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $184($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $191 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $186(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $200(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8629], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $186(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $186(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}