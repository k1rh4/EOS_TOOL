(data (i32.const 4) "Pj\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "transfer\00")
(data (i32.const 128) "chessioadmin\00")
(data (i32.const 144) "cannot pass end iterator to erase\00")
(data (i32.const 192) "cannot increment end iterator\00")
(data (i32.const 224) "object passed to erase is not in multi_index\00")
(data (i32.const 272) "cannot erase objects in table of another contract\00")
(data (i32.const 336) "attempt to remove object that was not in multi_index\00")
(data (i32.const 400) "error reading iterator\00")
(data (i32.const 432) "read\00")
(data (i32.const 448) "invalid symbol name\00")
(data (i32.const 480) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 544) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 608) "no snapshot state\00")
(data (i32.const 640) "snapshot not started\00")
(data (i32.const 672) "cannot pass end iterator to modify\00")
(data (i32.const 720) "no global data\00")
(data (i32.const 736) "object passed to modify is not in multi_index\00")
(data (i32.const 784) "cannot modify objects in table of another contract\00")
(data (i32.const 848) "updater cannot change primary key when modifying an object\00")
(data (i32.const 912) "write\00")
(data (i32.const 928) "eoschessdivi\00")
(data (i32.const 944) "cannot create objects in table of another contract\00")
(data (i32.const 1008) "no dividend state\00")
(data (i32.const 1040) "dividend not started\00")
(data (i32.const 1072) "stats not found\00")
(data (i32.const 1088) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1152) "total stake error\00")
(data (i32.const 1184) "heztcmqxgige\00")
(data (i32.const 1200) "epic.game\00")
(data (i32.const 1216) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1280) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1344) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1392) "eosio.token\00")
(data (i32.const 1408) "chessiobonus\00")
(data (i32.const 1424) "no balance object found\00")
(data (i32.const 1456) "multiplication overflow\00")
(data (i32.const 1488) "multiplication underflow\00")
(data (i32.const 1520) "divide by zero\00")
(data (i32.const 1536) "signed division overflow\00")
(data (i32.const 1568) "active\00")
(data (i32.const 1584) "for dividend\00")
(data (i32.const 1600) "no unstake record\00")
(data (i32.const 1632) "unstake time not reached\00")
(data (i32.const 1664) "no stats data\00")
(data (i32.const 1680) "attempt to subtract asset with different symbol\00")
(data (i32.const 1728) "subtraction underflow\00")
(data (i32.const 1760) "subtraction overflow\00")
(data (i32.const 1792) "unable to find key\00")
(data (i32.const 1824) "stake paused\00")
(data (i32.const 1840) "no dividend record\00")
(data (i32.const 1872) "not enough to claim\00")
(data (i32.const 1920) " Dividend! \00")
(data (i32.const 1936) "chessdice.io\00")
(data (i32.const 1952) "Invalid token\00")
(data (i32.const 1968) "must unstake positive quantity\00")
(data (i32.const 2000) "no stake record\00")
(data (i32.const 2016) "not enough funds to unstake\00")
(data (i32.const 2048) "defrefund\00")
(data (i32.const 2064) "only accepts CHESS\00")
(data (i32.const 2096) "attempt to add asset with different symbol\00")
(data (i32.const 2144) "addition underflow\00")
(data (i32.const 2176) "addition overflow\00")
(data (i32.const 2208) "must stake positive quantity\00")
(data (i32.const 2240) "chessiotoken\00")
(data (i32.const 2256) "not enough funds to stake\00")
(data (i32.const 2288) "only accepts CHESS for staking\00")
(data (i32.const 2320) "Already initialized\00")
(data (i32.const 10736) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$1))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_end_i64" (func $fimport$5 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$8 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$9 (param i32)))
(import "env" "db_idx64_store" (func $fimport$10 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$11 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$15 (param i32)))
(import "env" "db_store_i64" (func $fimport$16 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$17 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$18 (param i32 i32)))
(import "env" "memcpy" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$21 (param i64)))
(import "env" "require_auth2" (func $fimport$22 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$23 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$24 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $119))
(export "free" (func $122))
(export "memcmp" (func $130))
(export "strlen" (func $131))
(table $0 12 12 anyfunc)
(elem (i32.const 0) $132 $14 $10 $6 $18 $11 $19 $17 $8 $16 $15 $13)



void .FUNC $98 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [944])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $123([48])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [480])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [448])
	*($4 + [32]) = $1
	CALL $108(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [36])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $89(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $124($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $123(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $123([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $69(($8 + [28]), [8])
	$2 = *($8 + [28])
	CALL eosio_assert(((int_32)(*($2) - $2) > (int_32)[7]), [912])
	CALL memcpy($2, $4, [8])
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $124($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $124($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $124($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $94 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)((int_64)*(*($3)) * (int_64)-1000000))
	$4 = *($1)
	CALL eosio_assert([1], [848])
	*($5 + [88]) = ($5 + [72])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	CALL $36(($5 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $5, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [224])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [272])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [336])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $124($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $124($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
	$7 = *(($1 + [32]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157661383434960896, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	$4 = *($1 + [8])
	$3 = *($3)
	*($1 + [8]) = *($3)
	*(($5 = ($1 + [16]))) = *(($3 + [8]))
	*(($1 + [20])) = *(($3 + [12]))
	*(($1 + [12])) = *(($3 + [4]))
	*($6 + [24]) = (int_64))((int_64)0 - $4)
	$4 = *($1)
	CALL eosio_assert([1], [848])
	CALL eosio_assert([1], [912])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [912])
	$3 = ($1 + [8])
	CALL memcpy(($6 | [8]), $3, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($6 + [16]), $5, [8])
	CALL db_update_i64(*($1 + [28]), $2, $6, [24])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [40]) = (int_64))((int_64)0 - *($3))
	if ( (CALL memcmp(($6 + [24]), ($6 + [40]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [32])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157661383434960896, ($6 + [32]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($6 + [40]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	$4 = *($1)
	$5 = ($1 + [16])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($5)), [2096])
	$6 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [2144])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [2176])
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [848])
	CALL eosio_assert([1], [912])
	CALL memcpy($7, $1, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($7 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($7 + [16]), $5, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($7 + [24]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $7, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $90 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [544])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $32($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [544])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	$4 = *($1)
	CALL $92($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [848])
	*($5 + [56]) = ($5 + [40])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $87(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $5, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	$3 = *($1 + [24])
	$2 = ($1 + [32])
	$5 = *($2)
	$0 = *(*($0) + [4])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)$5), [1680])
	$3 = (int_64)
	CALL eosio_assert(((int_64)$3($3 - *($0 + [8]))) > (int_64)-4611686018427387904), [1728])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [1760])
	if ( ((int_64)$3 >= (int_64)0) ){ goto $label$1 }
	CALL eosio_assert([1], [480])
	$3 = (int_64)357879334979
	$5 = (int_64)91617109754628
	$0 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	CALL eosio_assert($4, [448])
	$3 = (int_64)0
	
.LABEL $label$1
	*($2) = $5
	*(($1 + [24])) = $3
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$2 = CALL strlen([1904])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$4 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $123($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($4, [1904], $2)
	
.LABEL $label$2
	*(($4 + $2)) = [0]
	CALL $126($0, [1920])
	CALL $126($0, [1936])
	return (unreachable)
	
.LABEL $label$1
	CALL $125($0)
}

int_32 .FUNC $123 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10828])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $115 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [944])
	$4 = CALL $123([80])
	$6 = CALL $23($4)
	*($4 + [64]) = $1
	CALL $116($3, $6)
	*($8 + [88]) = (($8 + [16]) + [64])
	*($8 + [84]) = ($8 + [16])
	*($8 + [80]) = ($8 + [16])
	CALL $55(($8 + [80]), $6)
	$5 = *($4)
	*($4 + [68]) = CALL db_store_i64(*($1 + [8]), (int_64)5455807916487475200, $2, $5, ($8 + [16]), [64])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [80]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$3 = *($4 + [68])
	*($8 + [12]) = $3
	$7 = ($1 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($6 + [8]) = $5
	*($6 + [16]) = $3
	*($8 + [80]) = [0]
	*($6) = $4
	*($7) = ($6 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $25(($1 + [24]), ($8 + [80]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($8 + [80])
	*($8 + [80]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $124($1)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [96])
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10724])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10532]
	$1 = (((int_32)$2 * (int_32)[12]) + [10532])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $132 ()
{
	(unreachable)
}

int_32 .FUNC $121 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10822]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10824])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10822]) = [1]
	$7 = ($7 << [16])
	*([0] + [10824]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10824])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10824]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10822]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10822]) = [1]
	$3 = ($3 << [16])
	*([0] + [10824]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10824])
	
.LABEL $label$8
	*([0] + [10824]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $121($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10736])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = *($0)
	*($1 + [8]) = (int_64)0
	*($1 + [16]) = (int_64)0
	*($1) = *(*($3 + [4]))
	$0 = *(*($0) + [4])
	*($1 + [24]) = *($0 + [8])
	*(($1 + [32])) = *(($0 + [16]))
	CALL eosio_assert([1], [480])
	$0 = [0]
	$2 = (int_64)357879334979
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [448])
	*(($1 + [48])) = (int_64)91617109754628
	*($1 + [40]) = (int_64)0
	CALL eosio_assert([1], [480])
	$2 = (int_64)357879334979
	$0 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [448])
	*(($1 + [64])) = (int_64)91617109754628
	*($1 + [56]) = (int_64)0
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	return CALL $127($0, $1, CALL $131($1))
}

int_32 .FUNC $49 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [544])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157495357179166720, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $64($0, $5)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [544])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = *([0] + [4])
	$11 = $12
	*($1) = (int_64)1
	*($1 + [8]) = (int_64)1
	$8 = (int_64)0
	*($1 + [16]) = (int_64)0
	$4 = ($1 + [16])
	$3 = ($1 + [8])
	$2 = *($0)
	$7 = (int_64)59
	$6 = [928]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$5 = ($5 + [165])
	goto $label$3 
	
.LABEL $label$4
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	*($1 + [24]) = $9
	$6 = $12
	$5 = ($6 + [-32])
	*([0] + [4]) = $5
	CALL eosio_assert([1], [912])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($6 + [-24]), $3, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($6 + [-16]), $4, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($6 + [-8]), ($1 + [24]), [8])
	$8 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-4265651683842850816, *(*($0 + [8])), $8, $5, [32])
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = $11
}

void .FUNC $125 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $123(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $124($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $124($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [480])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [448])
	*($0 + [24]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [432])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [432])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *(*($2 + [8]))
	*($0 + [32]) = [-1]
	*($0 + [28]) = $4
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($1 + [8]) = (int_64)0
	$4 = *($1)
	CALL eosio_assert([1], [848])
	CALL eosio_assert([1], [912])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = *([0] + [4])
	$13 = $14
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($1 + [8]) = (int_64)1
	$10 = (int_64)0
	*($1 + [16]) = (int_64)0
	$6 = ($1 + [16])
	$5 = ($1 + [8])
	$4 = *($1)
	$9 = (int_64)59
	$8 = [928]
	$11 = (int_64)0
	
.LOOP $label$1:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$2 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$7 = ($7 + [165])
	goto $label$3 
	
.LABEL $label$4
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	*($1 + [24]) = $11
	CALL eosio_assert([1], [848])
	$8 = $14
	$7 = ($8 + [-32])
	*([0] + [4]) = $7
	CALL eosio_assert([1], [912])
	CALL memcpy($7, $1, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($8 + [-24]), $5, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($8 + [-16]), $6, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($8 + [-8]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $7, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = $13
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [944])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $123([48])) + [32]) = $1
	*($3 + [8]) = (int_64)0
	CALL $48(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [36])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $44(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $124($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $123(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $124($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $124($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $124 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $128 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $123($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $124($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $8 (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [64])
	*([0] + [4]) = $13
	*($13 + [56]) = $1
	CALL require_auth($1)
	CALL eosio_assert(((int_64)*(CALL $90(($0 + [8]), (int_64)1, [1792]) + [8]) == (int_64)1), [1824])
	$3 = *($2 + [8])
	CALL eosio_assert(((int_64)$3 == (int_64)91617109754628), [2288])
	$4 = [0]
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$9 = (uint_64)$3 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [1952])
	$9 = (int_64)0
	CALL eosio_assert(((int_64)$8 > (int_64)0), [2208])
	$8 = (int_64)59
	$7 = [2240]
	$10 = (int_64)0
	
.LOOP $label$6:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$7 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$4 = ($4 + [165])
	goto $label$8 
	
.LABEL $label$9
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$7
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$6 }
	*(($13 + [48])) = [0]
	*($13 + [24]) = $1
	*($13 + [16]) = $10
	*($13 + [32]) = (int_64)-1
	*($13 + [40]) = (int_64)0
	$7 = CALL $68(($13 + [16]), (uint_64)$3 >> (uint_64)(int_64)8), [1424]
	$11 = *($7) + [8])
	$8 = *($7)
	$5 = *(($0 + [152]))
	$12 = *(($0 + [156]))
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$10 }
	$7 = ($12 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$11:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$10 }
	$12 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$4 = ($0 + [128])
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$14 }
	$7 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$4), [544])
	if ( $7 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$7 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)-3102536759825661952, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$12 }
	$7 = CALL $83($4, $7)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$4), [544])
	
.LABEL $label$13
	CALL eosio_assert(((int_64)*(($7 + [16])) == (int_64)$11), [1680])
	$8 = (int_64)
	CALL eosio_assert(((int_64)$8($8 - *($7 + [8]))) > (int_64)-4611686018427387904), [1728])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [1760])
	
.LABEL $label$12
	CALL eosio_assert(((int_64)*($2) <= (int_64)$8), [2256])
	$9 = *($13 + [56])
	$5 = *(($0 + [112]))
	$12 = *(($0 + [116]))
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$15 }
	$7 = ($12 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$16:
	if ( ((int_64)*(*($7)) == (int_64)$9) ){ goto $label$15 }
	$12 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$16 }
	
.LABEL $label$15
	$4 = ($0 + [88])
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$20 }
	$7 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$4), [544])
	if ( $7 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$7 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-4157661383434960896, $9)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$18 }
	$7 = CALL $27($4, $7)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$4), [544])
	
.LABEL $label$19
	CALL eosio_assert(((int_64)*(($7 + [16])) == (int_64)$11), [1680])
	$9 = (int_64)
	CALL eosio_assert(((int_64)$9($8 - *($7 + [8]))) > (int_64)-4611686018427387904), [1728])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [1760])
	CALL eosio_assert(((int_64)*($2) <= (int_64)$9), [2256])
	$9 = *($0)
	*($13 + [8]) = $2
	CALL eosio_assert([1], [672])
	CALL $109($4, $7, $9, ($13 + [8]))
	goto $label$17 
	
.LABEL $label$18
	CALL eosio_assert(((int_64)*($2) <= (int_64)$8), [2256])
	$9 = *($0)
	*($13 + [12]) = $2
	*($13 + [8]) = ($13 + [56])
	CALL $110($13, $4, $9, ($13 + [8]))
	
.LABEL $label$17
	$5 = *(($0 + [72]))
	$12 = *(($0 + [76]))
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$21 }
	$7 = ($12 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$22:
	if ( ((int_64)*(*($7)) == (int_64)1) ){ goto $label$21 }
	$12 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$22 }
	
.LABEL $label$21
	$4 = ($0 + [48])
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$24 }
	$7 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$4), [544])
	goto $label$23 
	
.LABEL $label$24
	$7 = [0]
	$12 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-4157495357179166720, (int_64)1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$23 }
	$7 = CALL $64($4, $12)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$4), [544])
	
.LABEL $label$23
	$12 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($12, [1664])
	$9 = *($0)
	*($13 + [8]) = $2
	CALL eosio_assert($12, [672])
	CALL $111($4, $7, $9, ($13 + [8]))
	$0 = *($13 + [40])
	if ( ($0 == 0) ){ goto $label$25 }
	$12 = ($13 + [44])
	$7 = *($12)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$27 }
	
.LOOP $label$28:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$29 }
	CALL $124($4)
	
.LABEL $label$29
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$28 }
	$7 = *(($13 + [40]))
	goto $label$26 
	
.LABEL $label$27
	$7 = $0
	
.LABEL $label$26
	*($12) = $0
	CALL $124($7)
	
.LABEL $label$25
	*([0] + [4]) = ($13 + [64])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [480])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [448])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [432])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [432])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [432])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	$1 = *(($0 + [32]))
	$5 = *(($0 + [36]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$1 }
	$4 = ($5 + [-24])
	$2 = ([0] - $1)
	
.LOOP $label$2:
	if ( ((int_64)*(*($4)) == (int_64)1) ){ goto $label$1 }
	$5 = $4
	$3 = ($4 + [-24])
	$4 = $3
	if ( ((int_32)($3 + $2) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [8])
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$4 }
	$3 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$4), [544])
	goto $label$3 
	
.LABEL $label$4
	$3 = [0]
	$5 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7235159537265672192, (int_64)1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $32($4, $5)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$4), [544])
	
.LABEL $label$3
	CALL eosio_assert(($3 == 0), [2320])
	CALL $113($6, $4, *($0), ($6 + [8]))
	CALL $114($6, ($0 + [48]), *($0), ($6 + [8]))
	CALL $115($6, ($0 + [168]), *($0), ($6 + [8]))
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [512])
	*([0] + [4]) = $9
	*(($9 + [200])) = $0
	*(($9 + [208])) = (int_64)-1
	$6 = (int_64)0
	*(($9 + [216])) = (int_64)0
	*(($9 + [224])) = [0]
	*($9 + [192]) = $0
	*($9 + [184]) = $0
	*($9 + [232]) = $0
	*(($9 + [240])) = $0
	*(($9 + [248])) = (int_64)-1
	*(($9 + [256])) = [0]
	*(($9 + [260])) = [0]
	*(($9 + [264])) = [0]
	*($9 + [272]) = $0
	*(($9 + [280])) = $0
	*(($9 + [288])) = (int_64)-1
	*(($9 + [296])) = [0]
	*(($9 + [300])) = [0]
	*(($9 + [304])) = [0]
	*(($9 + [308])) = [0]
	*($9 + [312]) = $0
	*(($9 + [320])) = $0
	*(($9 + [328])) = (int_64)-1
	*(($9 + [336])) = [0]
	*(($9 + [340])) = [0]
	*(($9 + [344])) = [0]
	*($9 + [352]) = $0
	*(($9 + [360])) = $0
	*(($9 + [368])) = (int_64)-1
	*(($9 + [376])) = [0]
	*(($9 + [380])) = [0]
	*(($9 + [384])) = [0]
	*($9 + [392]) = $0
	*(($9 + [400])) = $0
	*(($9 + [408])) = (int_64)-1
	*(($9 + [416])) = [0]
	*(($9 + [420])) = [0]
	*(($9 + [424])) = [0]
	*($9 + [432]) = $0
	*(($9 + [440])) = $0
	*(($9 + [448])) = (int_64)-1
	*(($9 + [456])) = [0]
	*(($9 + [460])) = [0]
	*(($9 + [464])) = [0]
	*(($9 + [468])) = [0]
	*($9 + [472]) = $0
	*(($9 + [480])) = $0
	*(($9 + [488])) = (int_64)-1
	*(($9 + [496])) = [0]
	*(($9 + [500])) = [0]
	*(($9 + [504])) = [0]
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$14 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$20 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$3 = ($3 + [165])
	goto $label$18 
	
.LABEL $label$20
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$16
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$15 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$14 }
	if ( ((int_64)$2 <= (int_64)4921564679018381311) ){ goto $label$30 }
	if ( ((int_64)$2 > (int_64)5455740039478640639) ){ goto $label$29 }
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$27 }
	if ( ((int_64)$2 == (int_64)4931036971691671552) ){ goto $label$26 }
	if ( ((int_64)$2 != (int_64)5374893526411116544) ){ goto $label$14 }
	*($9 + [140]) = [0]
	*($9 + [136]) = [1]
	*($9 + [48 align=4]) = *($9 + [136])
	CALL $12(($9 + [184]), ($9 + [48]))
	goto $label$14 
	
.LABEL $label$30
	if ( ((int_64)$2 <= (int_64)-4265651683863298049) ){ goto $label$28 }
	if ( ((int_64)$2 == (int_64)-4265651683863298048) ){ goto $label$25 }
	if ( ((int_64)$2 == (int_64)-4157661383434960896) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)-3102536759825661952) ){ goto $label$14 }
	*($9 + [164]) = [0]
	*($9 + [160]) = [2]
	*($9 + [24 align=4]) = *($9 + [160])
	CALL $9(($9 + [184]), ($9 + [24]))
	goto $label$14 
	
.LABEL $label$29
	if ( ((int_64)$2 == (int_64)5455740039478640640) ){ goto $label$23 }
	if ( ((int_64)$2 == (int_64)5455984070813024256) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)8421050410982703104) ){ goto $label$14 }
	*($9 + [180]) = [0]
	*($9 + [176]) = [3]
	*($9 + [8 align=4]) = *($9 + [176])
	CALL $7(($9 + [184]), ($9 + [8]))
	goto $label$14 
	
.LABEL $label$28
	if ( ((int_64)$2 == (int_64)-5001342339331915776) ){ goto $label$21 }
	if ( ((int_64)$2 != (int_64)-4265659309842497536) ){ goto $label$14 }
	*($9 + [108]) = [0]
	*($9 + [104]) = [4]
	*($9 + [80 align=4]) = *($9 + [104])
	CALL $12(($9 + [184]), ($9 + [80]))
	goto $label$14 
	
.LABEL $label$27
	*($9 + [156]) = [0]
	*($9 + [152]) = [5]
	*($9 + [32 align=4]) = *($9 + [152])
	CALL $12(($9 + [184]), ($9 + [32]))
	goto $label$14 
	
.LABEL $label$26
	*($9 + [100]) = [0]
	*($9 + [96]) = [6]
	*($9 + [88 align=4]) = *($9 + [96])
	CALL $7(($9 + [184]), ($9 + [88]))
	goto $label$14 
	
.LABEL $label$25
	*($9 + [116]) = [0]
	*($9 + [112]) = [7]
	*($9 + [72 align=4]) = *($9 + [112])
	CALL $7(($9 + [184]), ($9 + [72]))
	goto $label$14 
	
.LABEL $label$24
	*($9 + [172]) = [0]
	*($9 + [168]) = [8]
	*($9 + [16 align=4]) = *($9 + [168])
	CALL $9(($9 + [184]), ($9 + [16]))
	goto $label$14 
	
.LABEL $label$23
	*($9 + [124]) = [0]
	*($9 + [120]) = [9]
	*($9 + [64 align=4]) = *($9 + [120])
	CALL $12(($9 + [184]), ($9 + [64]))
	goto $label$14 
	
.LABEL $label$22
	*($9 + [132]) = [0]
	*($9 + [128]) = [10]
	*($9 + [56 align=4]) = *($9 + [128])
	CALL $7(($9 + [184]), ($9 + [56]))
	goto $label$14 
	
.LABEL $label$21
	*($9 + [148]) = [0]
	*($9 + [144]) = [11]
	*($9 + [40 align=4]) = *($9 + [144])
	CALL $12(($9 + [184]), ($9 + [40]))
	
.LABEL $label$14
	CALL $20(($9 + [184]))
	*([0] + [4]) = ($9 + [512])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	CALL require_auth(*($0))
	$3 = *(($0 + [152]))
	$7 = *(($0 + [156]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = ($0 + [128])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$2), [544])
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)-3102536759825661952, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL $83($2, $6)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$2), [544])
	goto $label$3 
	
.LABEL $label$5
	$6 = [0]
	
.LABEL $label$3
	*($8 + [4]) = $6
	*($8) = $2
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1600])
	CALL eosio_assert(((uint_64)((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295) >= (uint_64)((int_64)*($6 + [24]) + (int_64)86400)), [1632])
	$3 = *(($0 + [72]))
	$7 = *(($0 + [76]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$7:
	if ( ((int_64)*(*($6)) == (int_64)1) ){ goto $label$6 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = ($0 + [48])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$9 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$5), [544])
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-4157495357179166720, (int_64)1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$8 }
	$6 = CALL $64($5, $7)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$5), [544])
	
.LABEL $label$8
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [1664])
	$1 = *($0)
	*($8 + [8]) = $8
	CALL eosio_assert($7, [672])
	CALL $84($5, $6, $1, ($8 + [8]))
	$1 = *($8)
	$6 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	$5 = ((int_32)$6) != (int_32)[0]
	CALL eosio_assert($5), [144])
	CALL eosio_assert($5, [192])
	$5 = CALL db_next_i64(*($6 + [36]), ($8 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	CALL $83((CASTING uint_32)(uint_64 $1), $5)
	
.LABEL $label$10
	CALL $85($2, $6)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [208])
	*([0] + [4]) = $14
	$8 = (int_64)0
	$9 = (int_64)59
	$5 = [128]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($5)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($6)
	$8 = (int_64)0
	$7 = (int_64)59
	$5 = [1392]
	$6 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$10 }
	$1 = *($5)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$1 = ($1 + [165])
	goto $label$8 
	
.LABEL $label$10
	$9 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$6
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$6 = ((int_64)$9 | (int_64)$6)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$5 }
	$8 = (int_64)0
	$9 = (int_64)59
	$5 = [1408]
	$10 = (int_64)0
	
.LOOP $label$11:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$12 }
	$1 = *($5)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$1 = ($1 + [165])
	goto $label$13 
	
.LABEL $label$14
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$12
	$5 = ($5 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$7 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$11 }
	*(($14 + [168])) = [0]
	*($14 + [144]) = $10
	*($14 + [136]) = $6
	*($14 + [152]) = (int_64)-1
	*($14 + [160]) = (int_64)0
	CALL eosio_assert([1], [480])
	$5 = [0]
	$8 = (int_64)5459781
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$1 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$1 = [0]
	
.LABEL $label$15
	CALL eosio_assert($1, [448])
	$8 = (int_64)0
	$5 = CALL $68(($14 + [136]), (int_64)5459781, [1424])
	$9 = *($5)
	CALL __multi3($14, $9, (int_64)$9 >> (int_64)63), (int_64)10, (int_64)0)
	$6 = *($5 + [8])
	$9 = *(($14 + [8]))
	$7 = *($14)
	CALL eosio_assert(( (uint_64)($7 <= (int_64)4611686018427387904) ? ((int_64)$9 < (int_64)0) : (int_64)($9 == 0) ), [1456])
	CALL eosio_assert(( ((uint_64)$7 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$9 > (int_64)-1) : ((int_64)$9 == (int_64)-1) ), [1488])
	*($14 + [128]) = $6
	CALL eosio_assert([1], [1520])
	CALL eosio_assert([1], [1536])
	*($14 + [120]) = ((int_64)$7 / (int_64)100)
	$9 = (int_64)59
	$5 = [1408]
	$6 = (int_64)0
	
.LOOP $label$20:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$21 }
	$1 = *($5)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$1 = ($1 + [165])
	goto $label$22 
	
.LABEL $label$23
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$21
	$5 = ($5 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$20 }
	$8 = (int_64)0
	$7 = (int_64)59
	$5 = [1568]
	$10 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$29 }
	$1 = *($5)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$1 = ($1 + [165])
	goto $label$27 
	
.LABEL $label$29
	$9 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$25
	$5 = ($5 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$24 }
	$8 = (int_64)0
	$7 = (int_64)59
	$5 = [1392]
	$11 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$35 }
	$1 = *($5)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$1 = ($1 + [165])
	goto $label$33 
	
.LABEL $label$35
	$9 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$31
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$11 = ((int_64)$9 | (int_64)$11)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$30 }
	$8 = (int_64)0
	$7 = (int_64)59
	$5 = [112]
	$12 = (int_64)0
	
.LOOP $label$36:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$41 }
	$1 = *($5)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$1 = ($1 + [165])
	goto $label$39 
	
.LABEL $label$41
	$9 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$40
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$38
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$37
	$5 = ($5 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$12 = ((int_64)$9 | (int_64)$12)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$36 }
	$8 = (int_64)0
	$9 = (int_64)59
	$5 = [1408]
	$13 = (int_64)0
	
.LOOP $label$42:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$43 }
	$1 = *($5)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$1 = ($1 + [165])
	goto $label$44 
	
.LABEL $label$45
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$43
	$5 = ($5 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$13 = ((int_64)$7 | (int_64)$13)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$42 }
	*(($14 + [24])) = [0]
	*($14 + [16]) = (int_64)0
	$5 = CALL strlen([1584])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$46 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$49 }
	*($14 + [16]) = ($5 << [1])
	$1 = (($14 + [16]) | [1])
	if ( $5 ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	$4 = (($5 + [16]) & [-16])
	$1 = CALL $123($4)
	*($14 + [16]) = ($4 | [1])
	*($14 + [24]) = $1
	*($14 + [20]) = $5
	
.LABEL $label$48
	CALL memcpy($1, [1584], $5)
	
.LABEL $label$47
	*(($1 + $5)) = [0]
	*((($14 + [32]) + [20])) = *($14 + [124])
	*($14 + [40]) = *($0)
	*((($14 + [32]) + [28])) = *(($14 + [132]))
	*((($14 + [32]) + [24])) = *((($14 + [120]) + [8]))
	*($14 + [32]) = $13
	*($14 + [48]) = *($14 + [120])
	$5 = (($14 + [16]) + [8])
	*(($14 + [72])) = *($5)
	*($14 + [64]) = *($14 + [16])
	*($14 + [16]) = [0]
	*($14 + [20]) = [0]
	*($5) = [0]
	*($14 + [80]) = $11
	*($14 + [88]) = $12
	*($14 + [96]) = [0]
	*(($1 = (($14 + [80]) + [20]))) = [0]
	*(($4 = (($14 + [80]) + [24]))) = [0]
	*(($5 = CALL $123([16]))) = $6
	*($5 + [8]) = $10
	*((($14 + [80]) + [32])) = [0]
	$3 = ($5 + [16])
	*($4) = $3
	*($1) = $3
	*($14 + [96]) = $5
	*($14 + [108]) = [0]
	*((($14 + [80]) + [36])) = [0]
	$5 = *($14 + [64])
	$1 = ( *((($14 + [32]) + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($1 + [32])
	$8 = (CASTING uint_64)(uint_32 $1)
	$1 = (($14 + [80]) + [28])
	
.LOOP $label$50:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$50 }
	if ( ($5 == 0) ){ goto $label$52 }
	CALL $69($1, $5)
	$1 = *(($14 + [112]))
	$5 = *(($14 + [108]))
	goto $label$51 
	
.LABEL $label$52
	$1 = [0]
	$5 = [0]
	
.LABEL $label$51
	*($14 + [196]) = $5
	*($14 + [192]) = $5
	*($14 + [200]) = $1
	*($14 + [176]) = ($14 + [192])
	*($14 + [184]) = ($14 + [32])
	CALL $70(($14 + [184]), ($14 + [176]))
	CALL $71(($14 + [192]), ($14 + [80]))
	$5 = *($14 + [192])
	CALL send_inline($5, (*($14 + [196]) - $5))
	$5 = *($14 + [192])
	if ( ($5 == 0) ){ goto $label$53 }
	*($14 + [196]) = $5
	CALL $124($5)
	
.LABEL $label$53
	$5 = *($14 + [108])
	if ( ($5 == 0) ){ goto $label$54 }
	*(($14 + [112])) = $5
	CALL $124($5)
	
.LABEL $label$54
	$5 = *($14 + [96])
	if ( ($5 == 0) ){ goto $label$55 }
	*(($14 + [100])) = $5
	CALL $124($5)
	
.LABEL $label$55
	if ( ((*(($14 + [64])) & [1]) == 0) ){ goto $label$56 }
	CALL $124(*(($14 + [72])))
	
.LABEL $label$56
	if ( ((*($14 + [16]) & [1]) == 0) ){ goto $label$57 }
	CALL $124(*(($14 + [24])))
	
.LABEL $label$57
	$2 = *(($0 + [192]))
	$4 = *(($0 + [196]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$58 }
	$5 = ($4 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$59:
	if ( ((int_64)*(*($5)) == (int_64)1) ){ goto $label$58 }
	$4 = $5
	$1 = ($5 + [-24])
	$5 = $1
	if ( ((int_32)($1 + $3) != (int_32)[-24]) ){ goto $label$59 }
	
.LABEL $label$58
	$5 = ($0 + [168])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$64 }
	$1 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$5), [544])
	$8 = *($0)
	if ( $1 ){ goto $label$63 }
	goto $label$61 
	
.LABEL $label$64
	$1 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)5455807916487475200, (int_64)1)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$62 }
	$1 = CALL $21($5, $1)
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$5), [544])
	$8 = *($0)
	
.LABEL $label$63
	*($14 + [32]) = ($14 + [120])
	CALL eosio_assert([1], [672])
	CALL $73($5, $1, $8, ($14 + [32]))
	goto $label$60 
	
.LABEL $label$62
	$8 = *($0)
	
.LABEL $label$61
	*($14 + [80]) = ($14 + [120])
	CALL $72(($14 + [32]), $5, $8, ($14 + [80]))
	
.LABEL $label$60
	$2 = *(($0 + [32]))
	$4 = *(($0 + [36]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$65 }
	$5 = ($4 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$66:
	if ( ((int_64)*(*($5)) == (int_64)1) ){ goto $label$65 }
	$4 = $5
	$1 = ($5 + [-24])
	$5 = $1
	if ( ((int_32)($1 + $3) != (int_32)[-24]) ){ goto $label$66 }
	
.LABEL $label$65
	$1 = ($0 + [8])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$68 }
	$5 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [544])
	goto $label$67 
	
.LABEL $label$68
	$5 = [0]
	$4 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7235159537265672192, (int_64)1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$67 }
	$5 = CALL $32($1, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [544])
	
.LABEL $label$67
	$4 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($4, [720])
	$8 = *($0)
	CALL eosio_assert($4, [672])
	CALL $74($1, $5, $8, ($14 + [32]))
	$4 = *($14 + [160])
	if ( ($4 == 0) ){ goto $label$69 }
	$0 = ($14 + [164])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$71 }
	
.LOOP $label$72:
	$5 = ($5 + [-24])
	$1 = *($5)
	*($5) = [0]
	if ( ($1 == 0) ){ goto $label$73 }
	CALL $124($1)
	
.LABEL $label$73
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$72 }
	$5 = *(($14 + [160]))
	goto $label$70 
	
.LABEL $label$71
	$5 = $4
	
.LABEL $label$70
	*($0) = $4
	CALL $124($5)
	
.LABEL $label$69
	*([0] + [4]) = ($14 + [208])
	return (unreachable)
	
.LABEL $label$46
	CALL $125(($14 + [16]))
}

void .FUNC $16 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	float_64 $4
	float_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [48])
	*([0] + [4]) = $16
	*($16 + [32]) = $1
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [128]
	$14 = (int_64)0
	
.LOOP $label$1:
	$15 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($11)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [165])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$2
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($14)
	$3 = *(($0 + [192]))
	$7 = *(($0 + [196]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	$11 = ($7 + [-24])
	$6 = ([0] - $3)
	
.LOOP $label$6:
	if ( ((int_64)*(*($11)) == (int_64)1) ){ goto $label$5 }
	$7 = $11
	$9 = ($11 + [-24])
	$11 = $9
	if ( ((int_32)($9 + $6) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$2 = ($0 + [168])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$8 }
	$9 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$2), [544])
	goto $label$7 
	
.LABEL $label$8
	$11 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)5455807916487475200, (int_64)1)
	if ( ((int_32)$11 <= (int_32)[-1]) ){ goto $label$9 }
	$9 = CALL $21($2, $11)
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$2), [544])
	goto $label$7 
	
.LABEL $label$9
	$9 = [0]
	
.LABEL $label$7
	*($16 + [28]) = $9
	*($16 + [24]) = $2
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [1008])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)1), [1040])
	$11 = CALL $49(($0 + [48]), (int_64)1, [1072])
	$12 = *($11 + [8])
	$15 = *(($11 + [16]))
	CALL eosio_assert([1], [480])
	$13 = (int_64)357879334979
	$11 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$7 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$7 = [0]
	
.LABEL $label$10
	CALL eosio_assert($7, [448])
	CALL eosio_assert(((int_64)$15 == (int_64)91617109754628), [1088])
	CALL eosio_assert(((int_64)$12 > (int_64)0), [1152])
	$6 = ($0 + [208])
	$13 = *($9 + [16])
	$11 = [0]
	$7 = CALL db_lowerbound_i64(*($0 + [208]), *(($0 + [216])), (int_64)-6030912129371581440, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$15 }
	$11 = CALL $28($6, $7)
	
.LABEL $label$15
	*($16 + [20]) = $11
	*($16 + [16]) = $6
	if ( (int_64)(*($9 + [48]) == 0) ){ goto $label$16 }
	$11 = [0]
	$9 = CALL db_lowerbound_i64(*(($0 + [208])), *(($0 + [216])), (int_64)-6030912129371581440, *($9 + [56]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	$11 = CALL $28($6, $9)
	
.LABEL $label$17
	*($16 + [20]) = $11
	*($16 + [16]) = $6
	
.LABEL $label$16
	if ( ($11 == 0) ){ goto $label$18 }
	if ( (int_64)($1 == 0) ){ goto $label$18 }
	$5 = (CASTING float_64)(int_64 ((int_64)$13 * (int_64)1000000))
	$4 = (CASTING float_64)(int_64 $12)
	$10 = (int_64)0
	
.LOOP $label$19:
	$13 = *($11 + [24])
	$12 = *(($11 + [32]))
	$9 = ($11 + [48])
	CALL eosio_assert(((int_64)*($9) == (int_64)$12), [1088])
	$15 = *($11 + [40])
	if ( ((int_64)$15 >= (int_64)$13) ){ goto $label$20 }
	$12 = *($9)
	$13 = $15
	
.LABEL $label$20
	CALL eosio_assert(((int_64)*(($11 + [64])) == (int_64)$12), [1088])
	$12 = *($11 + [56])
	$1 = ( $12 ? $13 : ((int_64)$12 < (int_64)$13) )
	$7 = *($16 + [20])
	$8 = *($7)
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [1184]
	$14 = (int_64)0
	
.LOOP $label$21:
	$15 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$22 }
	$9 = *($11)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$9 = ($9 + [165])
	goto $label$23 
	
.LABEL $label$24
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$22
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$21 }
	if ( ((int_64)$8 == (int_64)$14) ){ goto $label$26 }
	$13 = (int_64)0
	$15 = (int_64)59
	$11 = [1200]
	$14 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$13 > (uint_64)(int_64)8) ){ goto $label$32 }
	$9 = *($11)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$9 = ($9 + [165])
	goto $label$30 
	
.LABEL $label$32
	$12 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$28
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$12 | (int_64)$14)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$27 }
	if ( ((int_64)$8 != (int_64)$14) ){ goto $label$25 }
	
.LABEL $label$26
	$1 = *($7 + [24])
	
.LABEL $label$25
	*($16 + [8]) = (Rounds 0)(((float_64)$5 * (float_64)((float_64)(CASTING float_64)(int_64 $1) / (float_64)$4)))
	$11 = [0]
	$9 = *($16 + [20])
	$13 = *($0)
	*($16 + [40]) = ($16 + [8])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [672])
	CALL $50($6, $9, $13, ($16 + [40]))
	CALL eosio_assert(((int_32)*($16 + [20]) != (int_32)[0]), [192])
	$9 = CALL db_next_i64(*(*($16 + [20]) + [76]), ($16 + [40]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$33 }
	$11 = CALL $28(*($16 + [16]), $9)
	
.LABEL $label$33
	*($16 + [20]) = $11
	if ( ($11 == 0) ){ goto $label$18 }
	$10 = ((int_64)$10 + (int_64)1)
	if ( (uint_64)($10 <= *($16 + [32])) ){ goto $label$19 }
	
.LABEL $label$18
	if ( ($11 == 0) ){ goto $label$35 }
	$11 = *($16 + [28])
	$13 = *($0)
	*($16 + [44]) = ($16 + [16])
	*($16 + [40]) = ($16 + [32])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [672])
	CALL $54($2, $11, $13, ($16 + [40]))
	goto $label$34 
	
.LABEL $label$35
	$13 = *($0)
	*($16 + [40]) = $0
	*($16 + [44]) = ($16 + [24])
	CALL $51(($16 + [8]), ($0 + [248]), $13, ($16 + [40]))
	$13 = *($0)
	$11 = *($16 + [28])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [672])
	CALL $52($2, $11, $13, ($16 + [40]))
	$2 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$36 }
	$11 = ($7 + [-24])
	$6 = ([0] - $2)
	
.LOOP $label$37:
	if ( ((int_64)*(*($11)) == (int_64)1) ){ goto $label$36 }
	$7 = $11
	$9 = ($11 + [-24])
	$11 = $9
	if ( ((int_32)($9 + $6) != (int_32)[-24]) ){ goto $label$37 }
	
.LABEL $label$36
	$9 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$39 }
	$11 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [16]) == (int_32)$9), [544])
	goto $label$38 
	
.LABEL $label$39
	$11 = [0]
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7235159537265672192, (int_64)1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$38 }
	$11 = CALL $32($9, $7)
	CALL eosio_assert(((int_32)*($11 + [16]) == (int_32)$9), [544])
	
.LABEL $label$38
	$7 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($7, [720])
	$13 = *($0)
	CALL eosio_assert($7, [672])
	CALL $53($9, $11, $13, ($16 + [40]))
	
.LABEL $label$34
	*([0] + [4]) = ($16 + [48])
}

void .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($4)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	$2 = *(($0 + [312]))
	$9 = *(($0 + [316]))
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$5 }
	$4 = ($9 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$6:
	if ( ((int_64)*(*($4)) == (int_64)1) ){ goto $label$5 }
	$9 = $4
	$1 = ($4 + [-24])
	$4 = $1
	if ( ((int_32)($1 + $3) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = ($0 + [288])
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$11 }
	$1 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$4), [544])
	$6 = *($0)
	if ( $1 ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$1 = CALL db_find_i64(*(($0 + [288])), *(($0 + [296])), (int_64)-4265651683842850816, (int_64)1)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$9 }
	$1 = CALL $26($4, $1)
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$4), [544])
	$6 = *($0)
	
.LABEL $label$10
	CALL eosio_assert([1], [672])
	CALL $46($4, $1, $6, ($10 + [8]))
	goto $label$7 
	
.LABEL $label$9
	$6 = *($0)
	
.LABEL $label$8
	CALL $45(($10 + [16]), $4, $6, ($10 + [24]))
	
.LABEL $label$7
	$2 = *(($0 + [32]))
	$9 = *(($0 + [36]))
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$12 }
	$4 = ($9 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$13:
	if ( ((int_64)*(*($4)) == (int_64)1) ){ goto $label$12 }
	$9 = $4
	$1 = ($4 + [-24])
	$4 = $1
	if ( ((int_32)($1 + $3) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	$1 = ($0 + [8])
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$15 }
	$4 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$1), [544])
	goto $label$14 
	
.LABEL $label$15
	$4 = [0]
	$9 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7235159537265672192, (int_64)1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$14 }
	$4 = CALL $32($1, $9)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$1), [544])
	
.LABEL $label$14
	$9 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($9, [720])
	$6 = *($0)
	CALL eosio_assert($9, [672])
	CALL $47($1, $4, $6, $10)
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $10 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [144])
	*([0] + [4]) = $12
	*($12 + [120]) = $1
	CALL require_auth($1)
	CALL eosio_assert(((int_64)*(CALL $90(($0 + [8]), (int_64)1, [1792]) + [8]) == (int_64)1), [1824])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)91617109754628), [2064])
	$6 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$10 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [1952])
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [1968])
	$3 = *(($0 + [112]))
	$7 = *(($0 + [116]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$8 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$7:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$6 }
	$7 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$6 = ($0 + [88])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$9 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [544])
	goto $label$8 
	
.LABEL $label$9
	$8 = [0]
	$7 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-4157661383434960896, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$8 }
	$8 = CALL $27($6, $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [544])
	
.LABEL $label$8
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [2000])
	$3 = ($8 + [16])
	$4 = ($2 + [8])
	CALL eosio_assert(((int_64)*($4) == (int_64)*($3)), [1088])
	CALL eosio_assert(((int_64)*($2) <= (int_64)*($8 + [8])), [2016])
	$10 = *($3)
	*((($12 + [104]) + [8])) = $10
	*($12 + [104]) = *($8 + [8])
	CALL eosio_assert(((int_64)$10 == (int_64)*($4)), [1680])
	$10 = (int_64)
	*($12 + [104]) = $10(*($12 + [104]) - *($2)))
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [1728])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [1760])
	if ( ((int_64)$10 == (int_64)0) ){ goto $label$11 }
	if ( ((int_64)$10 < (int_64)1) ){ goto $label$10 }
	$10 = *($0)
	*($12 + [40]) = ($12 + [104])
	CALL eosio_assert($7, [672])
	CALL $96($6, $8, $10, ($12 + [40]))
	goto $label$10 
	
.LABEL $label$11
	CALL eosio_assert($7, [144])
	CALL eosio_assert($7, [192])
	$7 = CALL db_next_i64(*($8 + [28]), ($12 + [40]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$12 }
	CALL $27($6, $7)
	
.LABEL $label$12
	CALL $95($6, $8)
	
.LABEL $label$10
	$10 = *($12 + [120])
	$3 = *(($0 + [152]))
	$7 = *(($0 + [156]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$13 }
	$8 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$14:
	if ( ((int_64)*(*($8)) == (int_64)$10) ){ goto $label$13 }
	$7 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	$8 = ($0 + [128])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$19 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$8), [544])
	$10 = *($0)
	if ( $6 ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$6 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)-3102536759825661952, $10)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$17 }
	$6 = CALL $83($8, $6)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$8), [544])
	$10 = *($0)
	
.LABEL $label$18
	*($12 + [40]) = $2
	CALL eosio_assert([1], [672])
	CALL $97($8, $6, $10, ($12 + [40]))
	goto $label$15 
	
.LABEL $label$17
	$10 = *($0)
	
.LABEL $label$16
	*($12 + [44]) = $2
	*($12 + [40]) = ($12 + [120])
	CALL $98(($12 + [16]), $8, $10, ($12 + [40]))
	
.LABEL $label$15
	$10 = CALL current_time()
	*(($12 + [68])) = [0]
	*(($12 + [72])) = [0]
	*($12 + [52]) = [0]
	*($12 + [56]) = [0]
	*($12 + [60]) = [0]
	*($12 + [64]) = [0]
	*($12 + [40]) = ((CASTING uint_32)(uint_64 ((uint_64)$10 / (uint_64)(int_64)1000000)) + [60])
	*($12 + [76]) = [0]
	*(($12 + [80])) = [0]
	*(($12 + [84])) = [0]
	*($12 + [88]) = [0]
	*(($12 + [92])) = [0]
	*(($12 + [96])) = [0]
	$7 = ($12 + [76])
	$5 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1568]
	$11 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$25 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$6 = ($6 + [165])
	goto $label$23 
	
.LABEL $label$25
	$1 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$21
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$1 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$20 }
	*($12 + [24]) = $11
	*($12 + [16]) = $5
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [2048]
	$11 = (int_64)0
	
.LOOP $label$26:
	if ( ((uint_64)$10 > (uint_64)(int_64)8) ){ goto $label$31 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$6 = ($6 + [165])
	goto $label$29 
	
.LABEL $label$31
	$1 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$27
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$1 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$26 }
	*($12 + [128]) = $11
	*($12 + [8]) = *($12 + [120])
	CALL $99($7, ($12 + [16]), $0, ($12 + [128]), ($12 + [8]))
	$10 = *($12 + [120])
	*(($12 + [60])) = [86400]
	*($12 + [24]) = (int_64)0
	*($12 + [16]) = $10
	CALL $100(($12 + [128]), ($12 + [40]))
	$8 = *($12 + [128])
	CALL send_deferred(($12 + [16]), $10, $8, (*($12 + [132]) - $8), [1])
	$8 = *($12 + [128])
	if ( ($8 == 0) ){ goto $label$32 }
	*($12 + [132]) = $8
	CALL $124($8)
	
.LABEL $label$32
	$3 = *(($0 + [72]))
	$7 = *(($0 + [76]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$33 }
	$8 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$34:
	if ( ((int_64)*(*($8)) == (int_64)1) ){ goto $label$33 }
	$7 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$34 }
	
.LABEL $label$33
	$6 = ($0 + [48])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$36 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [544])
	goto $label$35 
	
.LABEL $label$36
	$8 = [0]
	$7 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-4157495357179166720, (int_64)1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$35 }
	$8 = CALL $64($6, $7)
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [544])
	
.LABEL $label$35
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [1664])
	$10 = *($0)
	*($12 + [16]) = $2
	CALL eosio_assert($7, [672])
	CALL $101($6, $8, $10, ($12 + [16]))
	CALL $102(($12 + [40]))
	*([0] + [4]) = ($12 + [144])
}

void .FUNC $11 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [160])
	*([0] + [4]) = $14
	CALL require_auth($1)
	CALL eosio_assert(((int_64)*(CALL $90(($0 + [8]), (int_64)1, [1792]) + [8]) == (int_64)1), [1824])
	$2 = *(($0 + [232]))
	$6 = *(($0 + [236]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$7 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$6 = $7
	$5 = ($7 + [-24])
	$7 = $5
	if ( ((int_32)($5 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [208])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$3), [544])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [208])), *(($0 + [216])), (int_64)-6030912129371581440, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $28($3, $7)
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$3), [544])
	
.LABEL $label$3
	$2 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($2, [1840])
	$11 = *($6 + [8])
	*($14 + [120]) = (int_64)1397703940
	*($14 + [112]) = ((uint_64)$11 / (uint_64)(int_64)1000000)
	CALL eosio_assert([1], [480])
	$9 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$5 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$5 = [0]
	
.LABEL $label$5
	CALL eosio_assert($5, [448])
	CALL eosio_assert([1], [480])
	$9 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$5 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$5 = [0]
	
.LABEL $label$10
	CALL eosio_assert($5, [448])
	CALL eosio_assert(((int_64)1397703940 == (int_64)1397703940), [1088])
	CALL eosio_assert(((uint_64)$11 > (uint_64)(int_64)999999), [1872])
	$4 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1568]
	$10 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$20 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$5 = ($5 + [165])
	goto $label$18 
	
.LABEL $label$20
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$16
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$15 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1392]
	$12 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$26 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$5 = ($5 + [165])
	goto $label$24 
	
.LABEL $label$26
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$22
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$12 = ((int_64)$11 | (int_64)$12)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$21 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [112]
	$13 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$32 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$5 = ($5 + [165])
	goto $label$30 
	
.LABEL $label$32
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$28
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$27 }
	CALL $93(($14 + [8]), $0)
	*((($14 + [24]) + [20])) = *($14 + [116])
	*($14 + [32]) = $1
	*((($14 + [24]) + [28])) = *(($14 + [124]))
	*((($14 + [24]) + [24])) = *((($14 + [112]) + [8]))
	*($14 + [24]) = *($0)
	*($14 + [40]) = *($14 + [112])
	$7 = (($14 + [8]) + [8])
	*(($14 + [64])) = *($7)
	*($14 + [56]) = *($14 + [8])
	*($14 + [8]) = [0]
	*($14 + [12]) = [0]
	*($7) = [0]
	*($14 + [72]) = $12
	*($14 + [80]) = $13
	*(($7 = CALL $123([16]))) = $4
	*($7 + [8]) = $10
	*((($14 + [72]) + [32])) = [0]
	$5 = ($7 + [16])
	*((($14 + [72]) + [24])) = $5
	*((($14 + [72]) + [20])) = $5
	*($14 + [88]) = $7
	*($14 + [100]) = [0]
	*((($14 + [72]) + [36])) = [0]
	$7 = *($14 + [56])
	$5 = ( *((($14 + [24]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($5 + [32])
	$9 = (CASTING uint_64)(uint_32 $5)
	$5 = (($14 + [72]) + [28])
	
.LOOP $label$33:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$33 }
	if ( ($7 == 0) ){ goto $label$35 }
	CALL $69($5, $7)
	$5 = *(($14 + [104]))
	$7 = *(($14 + [100]))
	goto $label$34 
	
.LABEL $label$35
	$5 = [0]
	$7 = [0]
	
.LABEL $label$34
	*($14 + [132]) = $7
	*($14 + [128]) = $7
	*($14 + [136]) = $5
	*($14 + [144]) = ($14 + [128])
	*($14 + [152]) = ($14 + [24])
	CALL $70(($14 + [152]), ($14 + [144]))
	CALL $71(($14 + [128]), ($14 + [72]))
	$7 = *($14 + [128])
	CALL send_inline($7, (*($14 + [132]) - $7))
	$7 = *($14 + [128])
	if ( ($7 == 0) ){ goto $label$36 }
	*($14 + [132]) = $7
	CALL $124($7)
	
.LABEL $label$36
	$7 = *($14 + [100])
	if ( ($7 == 0) ){ goto $label$37 }
	*(($14 + [104])) = $7
	CALL $124($7)
	
.LABEL $label$37
	$7 = *($14 + [88])
	if ( ($7 == 0) ){ goto $label$38 }
	*(($14 + [92])) = $7
	CALL $124($7)
	
.LABEL $label$38
	if ( ((*(($14 + [56])) & [1]) == 0) ){ goto $label$39 }
	CALL $124(*(($14 + [64])))
	
.LABEL $label$39
	if ( ((*($14 + [8]) & [1]) == 0) ){ goto $label$40 }
	CALL $124(*(($14 + [16])))
	
.LABEL $label$40
	$9 = *($0)
	*($14 + [24]) = ($14 + [112])
	CALL eosio_assert($2, [672])
	CALL $94($3, $6, $9, ($14 + [24]))
	*([0] + [4]) = ($14 + [160])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [432])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [128]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	CALL eosio_assert(((int_64)*(CALL $90(($0 + [8]), (int_64)1, [1792]) + [8]) == (int_64)1), [1824])
	$4 = *(($0 + [152]))
	$11 = *(($0 + [156]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$5 }
	$6 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$5 }
	$11 = $6
	$2 = ($6 + [-24])
	$6 = $2
	if ( ((int_32)($2 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$3 = ($0 + [128])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$8 }
	$6 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$3), [544])
	goto $label$7 
	
.LABEL $label$8
	$6 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)-3102536759825661952, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$9 }
	$6 = CALL $83($3, $6)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$3), [544])
	goto $label$7 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$7
	*($12 + [4]) = $6
	*($12) = $3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1600])
	CALL eosio_assert(((uint_64)((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295) >= (uint_64)((int_64)*($6 + [24]) + (int_64)86400)), [1632])
	$4 = *(($0 + [72]))
	$11 = *(($0 + [76]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$10 }
	$6 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$11:
	if ( ((int_64)*(*($6)) == (int_64)1) ){ goto $label$10 }
	$11 = $6
	$2 = ($6 + [-24])
	$6 = $2
	if ( ((int_32)($2 + $5) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$2 = ($0 + [48])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$13 }
	$6 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$2), [544])
	goto $label$12 
	
.LABEL $label$13
	$6 = [0]
	$11 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-4157495357179166720, (int_64)1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$12 }
	$6 = CALL $64($2, $11)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$2), [544])
	
.LABEL $label$12
	$11 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($11, [1664])
	$8 = *($0)
	*($12 + [8]) = $12
	CALL eosio_assert($11, [672])
	CALL $91($2, $6, $8, ($12 + [8]))
	$8 = *($12)
	$6 = (CASTING uint_32)(uint_64 (uint_64)$8 >> (uint_64)(int_64)32)
	$2 = ((int_32)$6) != (int_32)[0]
	CALL eosio_assert($2), [144])
	CALL eosio_assert($2, [192])
	$2 = CALL db_next_i64(*($6 + [36]), ($12 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$14 }
	CALL $83((CASTING uint_32)(uint_64 $8), $2)
	
.LABEL $label$14
	CALL $85($3, $6)
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	*($1 + [8]) = (int_64)1
	$0 = *($0)
	*($1 + [16]) = *($0)
	*(($1 + [24])) = *(($0 + [8]))
	CALL eosio_assert([1], [480])
	$0 = [0]
	$4 = (int_64)357879334979
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$2 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [448])
	*(($1 + [40])) = (int_64)91617109754628
	$4 = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [48]) = (int_64)0
	$3 = (int_64)59
	$0 = [928]
	$5 = (int_64)0
	
.LOOP $label$6:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$7 }
	$2 = *($0)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$2 = ($2 + [165])
	goto $label$8 
	
.LABEL $label$9
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$7
	$0 = ($0 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$6 }
	*($1 + [56]) = $5
}

void .FUNC $18 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [32])
	*([0] + [4]) = $19
	*($19 + [16]) = $1
	$5 = (int_64)0
	$13 = (int_64)59
	$17 = [128]
	$14 = (int_64)0
	
.LOOP $label$1:
	$15 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($17)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [165])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$2
	$17 = ($17 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($14)
	$6 = *(($0 + [312]))
	$18 = *(($0 + [316]))
	if ( ((int_32)$18 == (int_32)$6) ){ goto $label$5 }
	$17 = ($18 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$6:
	if ( ((int_64)*(*($17)) == (int_64)1) ){ goto $label$5 }
	$18 = $17
	$8 = ($17 + [-24])
	$17 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$2 = ($0 + [288])
	if ( ((int_32)$18 == (int_32)$6) ){ goto $label$8 }
	$16 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [32]) == (int_32)$2), [544])
	goto $label$7 
	
.LABEL $label$8
	$16 = [0]
	$17 = CALL db_find_i64(*(($0 + [288])), *(($0 + [296])), (int_64)-4265651683842850816, (int_64)1)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$7 }
	$16 = CALL $26($2, $17)
	CALL eosio_assert(((int_32)*($16 + [32]) == (int_32)$2), [544])
	
.LABEL $label$7
	$17 = [0]
	$3 = ((int_32)$16 != (int_32)[0])
	CALL eosio_assert($3, [608])
	CALL eosio_assert(((int_64)*($16 + [8]) == (int_64)1), [640])
	$8 = ($0 + [88])
	$18 = CALL db_lowerbound_i64(*($0 + [88]), *(($0 + [96])), (int_64)-4157661383434960896, (int_64)0)
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$9 }
	$17 = CALL $27($8, $18)
	
.LABEL $label$9
	*($19 + [12]) = $17
	*($19 + [8]) = $8
	if ( (int_64)(*($16 + [16]) == 0) ){ goto $label$10 }
	$17 = [0]
	$18 = CALL db_lowerbound_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-4157661383434960896, *($16 + [24]))
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$11 }
	$17 = CALL $27($8, $18)
	
.LABEL $label$11
	*($19 + [12]) = $17
	*($19 + [8]) = $8
	
.LABEL $label$10
	if ( ($17 == 0) ){ goto $label$12 }
	if ( (int_64)($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [208])
	$13 = (int_64)0
	$9 = ($0 + [232])
	$10 = ($0 + [236])
	$11 = ($0 + [216])
	$12 = ($0 + [208])
	
.LOOP $label$13:
	$5 = *($17)
	$6 = *($9)
	$18 = *($10)
	if ( ((int_32)$18 == (int_32)$6) ){ goto $label$14 }
	$17 = ($18 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$15:
	if ( ((int_64)*(*($17)) == (int_64)$5) ){ goto $label$14 }
	$18 = $17
	$8 = ($17 + [-24])
	$17 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$15 }
	
.LABEL $label$14
	if ( ((int_32)$18 == (int_32)$6) ){ goto $label$20 }
	$17 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($17 + [72]) == (int_32)$4), [544])
	$5 = *($0)
	if ( $17 ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$17 = CALL db_find_i64(*($12), *($11), (int_64)-6030912129371581440, $5)
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$18 }
	$17 = CALL $28($4, $17)
	CALL eosio_assert(((int_32)*($17 + [72]) == (int_32)$4), [544])
	$5 = *($0)
	
.LABEL $label$19
	*($19 + [24]) = ($19 + [8])
	CALL eosio_assert([1], [672])
	CALL $30($4, $17, $5, ($19 + [24]))
	goto $label$16 
	
.LABEL $label$18
	$5 = *($0)
	
.LABEL $label$17
	*($19) = ($19 + [8])
	CALL $29(($19 + [24]), $4, $5, $19)
	
.LABEL $label$16
	$17 = [0]
	CALL eosio_assert(((int_32)*($19 + [12]) != (int_32)[0]), [192])
	$8 = CALL db_next_i64(*(*($19 + [12]) + [28]), ($19 + [24]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$21 }
	$17 = CALL $27(*($19 + [8]), $8)
	
.LABEL $label$21
	*($19 + [12]) = $17
	if ( ($17 == 0) ){ goto $label$12 }
	$13 = ((int_64)$13 + (int_64)1)
	if ( (uint_64)($13 <= *($19 + [16])) ){ goto $label$13 }
	
.LABEL $label$12
	$5 = *($0)
	if ( ($17 == 0) ){ goto $label$23 }
	*($19 + [28]) = ($19 + [8])
	*($19 + [24]) = ($19 + [16])
	CALL eosio_assert($3, [672])
	CALL $34($2, $16, $5, ($19 + [24]))
	goto $label$22 
	
.LABEL $label$23
	CALL eosio_assert($3, [672])
	CALL $31($2, $16, $5, ($19 + [24]))
	$6 = *(($0 + [32]))
	$18 = *(($0 + [36]))
	if ( ((int_32)$18 == (int_32)$6) ){ goto $label$24 }
	$17 = ($18 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$25:
	if ( ((int_64)*(*($17)) == (int_64)1) ){ goto $label$24 }
	$18 = $17
	$8 = ($17 + [-24])
	$17 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = ($0 + [8])
	if ( ((int_32)$18 == (int_32)$6) ){ goto $label$27 }
	$17 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($17 + [16]) == (int_32)$8), [544])
	goto $label$26 
	
.LABEL $label$27
	$17 = [0]
	$18 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7235159537265672192, (int_64)1)
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$26 }
	$17 = CALL $32($8, $18)
	CALL eosio_assert(((int_32)*($17 + [16]) == (int_32)$8), [544])
	
.LABEL $label$26
	$18 = ((int_32)$17 != (int_32)[0])
	CALL eosio_assert($18, [720])
	$5 = *($0)
	CALL eosio_assert($18, [672])
	CALL $33($8, $17, $5, ($19 + [24]))
	
.LABEL $label$22
	*([0] + [4]) = ($19 + [32])
}

void .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [128]
	$5 = (int_64)0
	
.LOOP $label$1:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$7 = *($2)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$7 = ($7 + [165])
	goto $label$3 
	
.LABEL $label$4
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$2
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($5)
	$2 = CALL db_lowerbound_i64(*($0 + [168]), *(($0 + [176])), (int_64)5455807916487475200, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$0 = ($0 + [168])
	$7 = CALL $21($0, $2)
	
.LOOP $label$6:
	CALL eosio_assert([1], [144])
	CALL eosio_assert([1], [192])
	$2 = [0]
	$1 = CALL db_next_i64(*($7 + [68]), ($8 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$7 }
	$2 = CALL $21($0, $1)
	
.LABEL $label$7
	CALL $22($0, $7)
	$7 = $2
	if ( $2 ){ goto $label$6 }
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$9 = (*([0] + [4]) - [32])
	$12 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$8 = ($4 + [264])
	$7 = *($8)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = ($4 + [248])
	$6 = CALL db_lowerbound_i64(*($5), *(($4 + [256])), (int_64)5455799468283133952, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $60($5, $6)
	*($12 + [12]) = [0]
	*($12 + [8]) = $5
	$7 = *(*(CALL $61(($12 + [8])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [264])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [1216])
	$7 = *($8)
	*($1 + [8]) = (int_64)1
	*($1) = $7
	$4 = *(*($3 + [4]) + [4])
	*($1 + [16]) = *($4 + [16])
	*(($1 + [24])) = *(($4 + [24]))
	$3 = *(*($3 + [4]) + [4])
	*($1 + [32]) = *($3 + [32])
	*(($1 + [40])) = *(($3 + [40]))
	$3 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	*($1 + [48]) = (CASTING uint_64)(uint_32 ($3 - ((uint_32)$3 % (uint_32)[3600])))
	$3 = $9
	$9 = ($3 + [-64])
	*([0] + [4]) = $9
	*($12 + [12]) = $9
	*($12 + [8]) = $9
	*($12 + [16]) = ($3 + [-8])
	CALL $62(($12 + [8]), $1)
	$7 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)5455799468283133952, *(*($0 + [8])), $7, $9, [56])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$7 = *(($2 + [8]))
	$10 = *(*(($0 + [8])))
	$11 = *($1)
	*($12 + [24]) = *(($1 + [48]))
	*($1 + [64]) = CALL db_idx64_store($7, (int_64)5455799468283133952, $10, $11, ($12 + [24]))
	*([0] + [4]) = ($12 + [32])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $123(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $124($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $124($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [848])
	*($5 + [88]) = ($5 + [72])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	CALL $36(($5 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $5, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [944])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $123([72])
	CALL $57($3)
	*($3 + [56]) = $1
	CALL $58(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [60])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $59(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $124($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	$4 = *($1)
	CALL $56($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [848])
	*($5 + [72]) = ($5 + [64])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $55(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $5, [64])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($1 + [8]) = (int_64)1
	$4 = *($1)
	CALL eosio_assert([1], [848])
	CALL eosio_assert([1], [912])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)*(*($3)))
	$4 = *($1)
	*($1 + [56]) = *(*(*($3 + [4]) + [4]))
	CALL eosio_assert([1], [848])
	*($5 + [72]) = ($5 + [64])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $55(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $5, [64])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	$4 = *($1)
	*($1 + [24]) = *(*(*($3 + [4]) + [4]))
	CALL eosio_assert([1], [848])
	CALL eosio_assert([1], [912])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($5 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($5 + [24]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $5, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	*($1 + [8]) = (int_64)0
	CALL eosio_assert([1], [480])
	$3 = [0]
	$5 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$2 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [448])
	*(($1 + [24])) = (int_64)1397703936
	*($1 + [16]) = (int_64)0
	CALL eosio_assert([1], [480])
	$5 = (int_64)357879334979
	$3 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$2 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$2 = [0]
	
.LABEL $label$6
	CALL eosio_assert($2, [448])
	*(($1 + [40])) = (int_64)91617109754624
	$5 = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [48]) = (int_64)0
	$4 = (int_64)59
	$3 = [928]
	$6 = (int_64)0
	
.LOOP $label$11:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$12 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$2 = ($2 + [165])
	goto $label$13 
	
.LABEL $label$14
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$12
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$11 }
	*($1 + [56]) = $6
}

int_32 .FUNC $57 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [16]) = (int_64)0
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	CALL eosio_assert([1], [480])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [448])
	*(($2 = ($0 + [40]))) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [480])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [448])
	return $0
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	*($1 + [8]) = (int_64)0
	*($1) = (int_64)1
	CALL eosio_assert([1], [480])
	$3 = [0]
	$2 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [448])
	*(($1 + [24])) = (int_64)1397703940
	*($1 + [16]) = (int_64)0
	CALL eosio_assert([1], [480])
	$2 = (int_64)357879334979
	$3 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [448])
	*(($1 + [40])) = (int_64)91617109754628
	*($1 + [32]) = (int_64)0
	*($1 + [48]) = (int_64)0
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	*($1) = (int_64)1
	CALL eosio_assert([1], [480])
	$3 = [0]
	$2 = (int_64)357879334979
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [448])
	*(($1 + [16])) = (int_64)91617109754628
	*($1 + [8]) = (int_64)0
	CALL eosio_assert([1], [480])
	$2 = (int_64)357879334979
	$3 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [448])
	*(($1 + [32])) = (int_64)91617109754628
	*($1 + [24]) = (int_64)0
}

void .FUNC $114 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [944])
	$4 = CALL $123([56])
	$6 = CALL $65($4)
	*($4 + [40]) = $1
	CALL $117($3, $6)
	*($8 + [72]) = (($8 + [16]) + [40])
	*($8 + [68]) = ($8 + [16])
	*($8 + [64]) = ($8 + [16])
	CALL $87(($8 + [64]), $6)
	$5 = *($4)
	*($4 + [44]) = CALL db_store_i64(*($1 + [8]), (int_64)-4157495357179166720, $2, $5, ($8 + [16]), [40])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [64]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$3 = *($4 + [44])
	*($8 + [12]) = $3
	$7 = ($1 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($6 + [8]) = $5
	*($6 + [16]) = $3
	*($8 + [64]) = [0]
	*($6) = $4
	*($7) = ($6 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $67(($1 + [24]), ($8 + [64]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($8 + [64])
	*($8 + [64]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $124($1)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [80])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $123(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $124($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $124($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$2 = *($0)
	$4 = *($4 + [4])
	*($1 + [8]) = *($4)
	*(($5 = ($1 + [16]))) = *(($4 + [8]))
	CALL eosio_assert([1], [912])
	CALL memcpy($8, $1, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($8 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($8 + [16]), $5, [8])
	$3 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-4157661383434960896, *(*($0 + [8])), $3, $8, [24])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($2 + [8]))
	$6 = *(*(($0 + [8])))
	$7 = *($1)
	*($8 + [24]) = (int_64))((int_64)0 - *($1 + [8]))
	*($1 + [32]) = CALL db_idx64_store($3, (int_64)-4157661383434960896, $6, $7, ($8 + [24]))
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $113 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [944])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $123([32])
	CALL $118($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $35(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $124($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $110 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [944])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $123([40])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [480])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [448])
	*($4 + [24]) = $1
	CALL $112(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [28])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $42(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $124($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $111 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [16]))), [2096])
	$5 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [2144])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [2176])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [848])
	*($6 + [56]) = ($6 + [40])
	*($6 + [52]) = $6
	*($6 + [48]) = $6
	CALL $87(($6 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $6, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [64])
}

int_32 .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)1
	*($0 + [8]) = (int_64)1
	$1 = *($2)
	CALL eosio_assert([1], [912])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $120([2340], $0)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [944])
	$4 = CALL $123([88])
	$6 = CALL $37($4)
	*($4 + [72]) = $1
	CALL $38($3, $6)
	*($8 + [104]) = (($8 + [16]) + [72])
	*($8 + [100]) = ($8 + [16])
	*($8 + [96]) = ($8 + [16])
	CALL $36(($8 + [96]), $6)
	$5 = *($4)
	*($4 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)-6030912129371581440, $2, $5, ($8 + [16]), [72])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [96]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$3 = *($4 + [76])
	*($8 + [12]) = $3
	$7 = ($1 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($6 + [8]) = $5
	*($6 + [16]) = $3
	*($8 + [96]) = [0]
	*($6) = $4
	*($7) = ($6 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $39(($1 + [24]), ($8 + [96]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($8 + [96])
	*($8 + [96]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $124($1)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [112])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [400])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $123([88])
	$4 = CALL $37($6)
	*($6 + [72]) = $0
	CALL $40(($8 + [32]), $4)
	*($6 + [76]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [76])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $39(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $124($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [912])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [912])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $78($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [912])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [912])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [912])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $78(CALL $77($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [400])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $123([80])
	$4 = CALL $23($6)
	*($6 + [64]) = $0
	CALL $24(($8 + [32]), $4)
	*($6 + [68]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [68])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $25(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $124($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $20 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [312]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [316])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $124($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($0 + [312]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $124($4)
	
.LABEL $label$1
	$1 = *(($0 + [272]))
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($0 + [276])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $124($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($0 + [272]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $124($4)
	
.LABEL $label$6
	$1 = *(($0 + [232]))
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($0 + [236])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	CALL $124($2)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($0 + [232]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $124($4)
	
.LABEL $label$11
	$1 = *(($0 + [192]))
	if ( ($1 == 0) ){ goto $label$16 }
	$3 = ($0 + [196])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$20 }
	CALL $124($2)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$19 }
	$4 = *(($0 + [192]))
	goto $label$17 
	
.LABEL $label$18
	$4 = $1
	
.LABEL $label$17
	*($3) = $1
	CALL $124($4)
	
.LABEL $label$16
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$21 }
	$3 = ($0 + [156])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$25 }
	CALL $124($2)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$24 }
	$4 = *(($0 + [152]))
	goto $label$22 
	
.LABEL $label$23
	$4 = $1
	
.LABEL $label$22
	*($3) = $1
	CALL $124($4)
	
.LABEL $label$21
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$26 }
	$3 = ($0 + [116])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$28 }
	
.LOOP $label$29:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$30 }
	CALL $124($2)
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$29 }
	$4 = *(($0 + [112]))
	goto $label$27 
	
.LABEL $label$28
	$4 = $1
	
.LABEL $label$27
	*($3) = $1
	CALL $124($4)
	
.LABEL $label$26
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$31 }
	$3 = ($0 + [76])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$33 }
	
.LOOP $label$34:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$35 }
	CALL $124($2)
	
.LABEL $label$35
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$34 }
	$4 = *(($0 + [72]))
	goto $label$32 
	
.LABEL $label$33
	$4 = $1
	
.LABEL $label$32
	*($3) = $1
	CALL $124($4)
	
.LABEL $label$31
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$36 }
	$3 = ($0 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$38 }
	
.LOOP $label$39:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$40 }
	CALL $124($2)
	
.LABEL $label$40
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$39 }
	$4 = *(($0 + [32]))
	goto $label$37 
	
.LABEL $label$38
	$4 = $1
	
.LABEL $label$37
	*($3) = $1
	CALL $124($4)
	
.LABEL $label$36
	return $0
}

int_32 .FUNC $23 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [16]) = (int_64)0
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	CALL eosio_assert([1], [480])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [448])
	*(($2 = ($0 + [40]))) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [480])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [448])
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [224])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [272])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [336])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $124($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $124($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $123(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $124($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $124($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [400])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $123([40])
	$6 = CALL $41($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [28])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $42(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $124($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [400])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $123([48])) + [32]) = $0
	*($6 + [8]) = (int_64)0
	CALL $43(($8 + [32]), $6)
	*($6 + [36]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $44(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $124($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $109 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($7 + [24]) = (int_64))((int_64)0 - *($1 + [8]))
	$4 = *($1)
	$5 = ($1 + [16])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($5)), [2096])
	$6 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [2144])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [2176])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [848])
	CALL eosio_assert([1], [912])
	CALL memcpy($7, $1, [8])
	CALL eosio_assert([1], [912])
	$3 = ($1 + [8])
	CALL memcpy(($7 | [8]), $3, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($7 + [16]), $5, [8])
	CALL db_update_i64(*($1 + [28]), $2, $7, [24])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($7 + [40]) = (int_64))((int_64)0 - *($3))
	if ( (CALL memcmp(($7 + [24]), ($7 + [40]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [32])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157661383434960896, ($7 + [32]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($7 + [40]))
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $123($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $129($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $124($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $68 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [544])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $80($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [544])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$2 = *($0)
	$4 = *($4 + [4])
	*($1 + [8]) = *($4)
	*(($5 = ($1 + [16]))) = *(($4 + [8]))
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [912])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($6 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($6 + [16]), $5, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($6 + [24]), ($1 + [24]), [8])
	$3 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-3102536759825661952, *(*($0 + [8])), $3, $6, [32])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $65 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [480])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [448])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [480])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [448])
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [400])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $123([56])
	$4 = CALL $65($6)
	*($6 + [40]) = $0
	CALL $66(($8 + [32]), $4)
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $67(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $124($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $123(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $124($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $124($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [60]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1344])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)5455799468283133952)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1280])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1280])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $60(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [400])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $123([72])
	$4 = CALL $57($6)
	*($6 + [56]) = $0
	CALL $63(($8 + [32]), $4)
	*($6 + [64]) = [-1]
	*($6 + [60]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [60])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $59(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $124($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $101 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	$4 = *($1)
	CALL $103($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [848])
	*($5 + [56]) = ($5 + [40])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $87(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $5, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $104($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $69($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $105($4, $1)
	CALL $107(CALL $106(CALL $106($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = *($1 + [8])
	$2 = ($1 + [16])
	$6 = *($2)
	$4 = *($0)
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)$6), [1680])
	$3 = (int_64)
	CALL eosio_assert(((int_64)$3($3 - *($4))) > (int_64)-4611686018427387904), [1728])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [1760])
	if ( ((int_64)$3 >= (int_64)0) ){ goto $label$1 }
	CALL eosio_assert([1], [480])
	$3 = (int_64)357879334979
	$6 = (int_64)91617109754628
	$4 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	CALL eosio_assert($5, [448])
	$3 = (int_64)0
	
.LABEL $label$1
	*($2) = $6
	*(($1 + [8])) = $3
	$4 = *($0)
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*(($1 + [32]))), [2096])
	$3 = ((int_64)*($1 + [24]) + (int_64)*($4))
	*($1 + [24]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [2144])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [2176])
}

int_32 .FUNC $102 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $124($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $124($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $124($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $124($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $124($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $124($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $124($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $124($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [912])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [912])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [912])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [912])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $123(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $124($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $124($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	$3 = *($1 + [24])
	$2 = ($1 + [32])
	$5 = *($2)
	$0 = *(*($0) + [4])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)$5), [1680])
	$3 = (int_64)
	CALL eosio_assert(((int_64)$3($3 - *($0 + [8]))) > (int_64)-4611686018427387904), [1728])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [1760])
	if ( ((int_64)$3 >= (int_64)0) ){ goto $label$1 }
	CALL eosio_assert([1], [480])
	$3 = (int_64)357879334979
	$5 = (int_64)91617109754628
	$0 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	CALL eosio_assert($4, [448])
	$3 = (int_64)0
	
.LABEL $label$1
	*($2) = $5
	*(($1 + [24])) = $3
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [224])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [272])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [336])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $124($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $124($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	$4 = *($1)
	CALL $86($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [848])
	*($5 + [56]) = ($5 + [40])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $87(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $5, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [400])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $123([48])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [480])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [448])
	*($4 + [32]) = $0
	CALL $88(($8 + [32]), $4)
	*($4 + [36]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [36])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $89($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $124($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $123(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $124($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $124($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [480])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [448])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [432])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [400])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $123([32])
	$6 = CALL $81($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $82(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $124($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [944])
	$4 = CALL $123([80])
	$6 = CALL $23($4)
	*($4 + [64]) = $1
	CALL $76($3, $6)
	*($8 + [88]) = (($8 + [16]) + [64])
	*($8 + [84]) = ($8 + [16])
	*($8 + [80]) = ($8 + [16])
	CALL $55(($8 + [80]), $6)
	$5 = *($4)
	*($4 + [68]) = CALL db_store_i64(*($1 + [8]), (int_64)5455807916487475200, $2, $5, ($8 + [16]), [64])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [80]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$3 = *($4 + [68])
	*($8 + [12]) = $3
	$7 = ($1 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($6 + [8]) = $5
	*($6 + [16]) = $3
	*($8 + [80]) = [0]
	*($6) = $4
	*($7) = ($6 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $25(($1 + [24]), ($8 + [80]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($8 + [80])
	*($8 + [80]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $124($1)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [96])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	$4 = *($1)
	CALL $75($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [848])
	*($5 + [72]) = ($5 + [64])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $55(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $5, [64])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $79(*($1), ($0 + [32]))
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $69($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [912])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [912])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $78(CALL $77($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	*($1 + [8]) = (int_64)1
	*($1) = (int_64)1
	$0 = *($0)
	*($1 + [16]) = *($0)
	*(($1 + [24])) = *(($0 + [8]))
	CALL eosio_assert([1], [480])
	$0 = [0]
	$4 = (int_64)357879334979
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$2 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [448])
	*(($1 + [40])) = (int_64)91617109754628
	$4 = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [48]) = (int_64)0
	$3 = (int_64)59
	$0 = [928]
	$5 = (int_64)0
	
.LOOP $label$6:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$7 }
	$2 = *($0)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$2 = ($2 + [165])
	goto $label$8 
	
.LABEL $label$9
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$7
	$0 = ($0 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$6 }
	*($1 + [56]) = $5
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [912])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [912])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [912])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($1 + [8]) = (int_64)0
	$4 = *($1)
	CALL eosio_assert([1], [848])
	CALL eosio_assert([1], [912])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $123(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $124($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $124($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $37 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [24]) = (int_64)0
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [480])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [448])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [480])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [448])
	*(($2 = ($0 + [64]))) = (int_64)1398362884
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [480])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [448])
	return $0
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [912])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [912])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [912])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [912])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [400])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $123([32])) + [8]) = (int_64)0
	*($6) = (int_64)0
	*($6 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [432])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [432])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $35(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $124($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($1 + [8]) = (int_64)1
	$4 = *($1)
	CALL eosio_assert([1], [848])
	CALL eosio_assert([1], [912])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*(($1 + [68])) = *(($1 + [52]))
	$5 = ($1 + [48])
	*(($1 + [64])) = *($5)
	*(($1 + [60])) = *(($1 + [44]))
	*($1 + [56]) = *($1 + [40])
	$4 = *($1)
	*($1 + [40]) = *($1 + [24])
	$6 = ($1 + [32])
	*($5) = *($6)
	$3 = *(*($3) + [4])
	*($1 + [24]) = *($3 + [8])
	*($6) = *(($3 + [16]))
	CALL eosio_assert([1], [848])
	*($7 + [88]) = ($7 + [72])
	*($7 + [84]) = $7
	*($7 + [80]) = $7
	CALL $36(($7 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $7, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [96])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = *([0] + [4])
	$13 = $14
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	$10 = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1 + [16]) = (int_64)0
	$6 = ($1 + [16])
	$5 = ($1 + [8])
	$4 = *($1)
	$9 = (int_64)59
	$8 = [928]
	$11 = (int_64)0
	
.LOOP $label$1:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$2 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$7 = ($7 + [165])
	goto $label$3 
	
.LABEL $label$4
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	*($1 + [24]) = $11
	CALL eosio_assert([1], [848])
	$8 = $14
	$7 = ($8 + [-32])
	*([0] + [4]) = $7
	CALL eosio_assert([1], [912])
	CALL memcpy($7, $1, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($8 + [-24]), $5, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($8 + [-16]), $6, [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($8 + [-8]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $7, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = $13
}

void .FUNC $129 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $127 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $128($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}