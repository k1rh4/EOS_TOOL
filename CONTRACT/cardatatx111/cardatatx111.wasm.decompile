(data (i32.const 8192) "order_id must >0\00")
(data (i32.const 8209) "data_total_price must >0\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8320) "gas must >0\00")
(data (i32.const 8332) "service_fee must >0\00")
(data (i32.const 8352) "expire_time must >0\00")
(data (i32.const 8372) "suborders size must >0\00")
(data (i32.const 8395) "order exists\00")
(data (i32.const 8408) "sub order already exists\00")
(data (i32.const 8433) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8484) "error reading iterator\00")
(data (i32.const 8507) "read\00")
(data (i32.const 8512) "cannot create objects in table of another contract\00")
(data (i32.const 8563) "write\00")
(data (i32.const 8569) "order not exists\00")
(data (i32.const 8587) "quantity must be valid\00")
(data (i32.const 8610) "active\00")
(data (i32.const 8617) "transfer\00")
(data (i32.const 8626) "pay\00")
(data (i32.const 8630) "string is too long to be a valid symbol_code\00")
(data (i32.const 8675) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8728) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8777) "invalid symbol name\00")
(data (i32.const 8797) "string is too long to be a valid name\00")
(data (i32.const 8835) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8902) "character is not in allowed character set for names\00")
(data (i32.const 8954) "cannot pass end iterator to modify\00")
(data (i32.const 8989) "object passed to modify is not in multi_index\00")
(data (i32.const 9035) "cannot modify objects in table of another contract\00")
(data (i32.const 9086) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9145) "data_price must >0\00")
(data (i32.const 9164) "confirm order\00")
(data (i32.const 9178) "cannot pass end iterator to erase\00")
(data (i32.const 9212) "cannot increment end iterator\00")
(data (i32.const 9242) "object passed to erase is not in multi_index\00")
(data (i32.const 9287) "cannot erase objects in table of another contract\00")
(data (i32.const 9337) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9390) "get\00")
(data (i32.const 9394) "CAR\00")
(data (i32.const 9398) "cartokeneos1\00")
(import "env" "action_data_size" (func $fimport$0 (result i32)))
(import "env" "read_action_data" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$6 (param i32 i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$8 (result i64)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$11 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$12 (param i32)))
(import "env" "abort" (func $fimport$13))
(import "env" "memset" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$16 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$19 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$20 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$23 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$24 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$25 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$26 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$27 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$28 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$31 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$33 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$34 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$35 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $48))
(export "_Znwj" (func $46))
(export "_Znaj" (func $47))
(export "_ZdaPv" (func $49))
(export "_ZnwjSt11align_val_t" (func $50))
(export "_ZnajSt11align_val_t" (func $51))
(export "_ZdlPvSt11align_val_t" (func $52))
(export "_ZdaPvSt11align_val_t" (func $53))
(table $0 6 6 anyfunc)
(elem (i32.const 1) $2 $4 $6 $8 $10)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17828))
(global $global$2 i32 (i32.const 17828))


void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [8512])
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [40]) = $1
	$3 = *($3)
	*($5) = *($3)
	*($5 + [8]) = *($3 + [8])
	*($5 + [32]) = (int_64)0
	*($5 + [16]) = *($3 + [16])
	*($5 + [24]) = *($3 + [24])
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	$3 = ($5 + [8])
	*($4 + [76]) = $3
	*($4 + [72]) = $5
	*($4 + [80]) = ($5 + [16])
	*($4 + [84]) = ($5 + [24])
	*($4 + [88]) = ($5 + [32])
	CALL $33(($4 + [72]), ($4 + [64]))
	$6 = *($5 + [8])
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-4139006359028891648, $2, $6, $4, [40])
	*($5 + [44]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [72]) = $5
	$6 = *($3)
	*($4) = $6
	*($4 + [48]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [72]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $34(($1 + [24]), ($4 + [72]), $4, ($4 + [48]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [96])
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $63($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8234])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy(($3 + [32]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8563])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8563])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8563])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8563])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $40(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [9242])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9287])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9337])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [8989])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9035])
	*($1 + [56]) = (int_64)0
	*($1 + [48]) = (int_64)2
	$5 = *($1)
	CALL eosio_assert([1], [9086])
	*($4 + [80]) = ($4 + [64])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	*($4 + [88]) = ($4 + [72])
	*($4 + [100]) = ($1 + [8])
	*($4 + [96]) = $1
	*($4 + [104]) = ($1 + [16])
	*($4 + [108]) = ($1 + [24])
	*($4 + [112]) = ($1 + [32])
	*($4 + [116]) = ($1 + [40])
	*($4 + [120]) = ($1 + [48])
	*($4 + [124]) = ($1 + [56])
	CALL $36(($4 + [96]), ($4 + [88]))
	CALL db_update_i64(*($1 + [68]), $2, $4, [64])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $38($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $39(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8797])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8902])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8835])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8902])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $23 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [8989])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9035])
	*($1 + [48]) = (int_64)1
	*($1 + [56]) = ((int_64)((int_64)*(*($3 + [4])) + (int_64)*(*($3))) + (int_64)*(*($3 + [8])))
	$5 = *($1)
	CALL eosio_assert([1], [9086])
	*($4 + [80]) = ($4 + [64])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	*($4 + [88]) = ($4 + [72])
	*($4 + [100]) = ($1 + [8])
	*($4 + [96]) = $1
	*($4 + [104]) = ($1 + [16])
	*($4 + [108]) = ($1 + [24])
	*($4 + [112]) = ($1 + [32])
	*($4 + [116]) = ($1 + [40])
	*($4 + [120]) = ($1 + [48])
	*($4 + [124]) = ($1 + [56])
	CALL $36(($4 + [96]), ($4 + [88]))
	CALL db_update_i64(*($1 + [68]), $2, $4, [64])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $38($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8563])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8563])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $42(CALL $41($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = *($1 + [40])
	if ( ($3 & [1]) ){ goto $label$5 }
	$4 = (($1 + [40]) + [1])
	$1 = uint_32($3 >> [1])
	if ( ((uint_32)$1 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *(($1 + [48]))
	$1 = *(($1 + [44]))
	if ( ($1 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [8630])
	goto $label$2 
	
.LABEL $label$3
	if ( $1 ){ goto $label$2 }
	$5 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)0
	
.LOOP $label$6:
	$6 = (($4 + $1) + [-1])
	$3 = *($6)
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [8675])
	$3 = *($6)
	
.LABEL $label$7
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	
.LABEL $label$1
	*($0) = $2
	*($0 + [8]) = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8728])
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	$1 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$2 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$5 = $2
	$4 = [1]
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	$5 = $2
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $3 ){ goto $label$13 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$10 }
	
.LABEL $label$11
	CALL eosio_assert($4, [8777])
	return 
	
.LABEL $label$9
	CALL eosio_assert([0], [8777])
	return 
	
.LABEL $label$8
	CALL eosio_assert([0], [8777])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy(($3 + [32]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [8989])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9035])
	*($1 + [56]) = (int_64))((int_64))(*(*(*($3) + [4]) + [56]) - *(*($3 + [4]))) - *(*($3 + [8])))
	$5 = *($1)
	CALL eosio_assert([1], [9086])
	*($4 + [80]) = ($4 + [64])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	*($4 + [88]) = ($4 + [72])
	*($4 + [100]) = ($1 + [8])
	*($4 + [96]) = $1
	*($4 + [104]) = ($1 + [16])
	*($4 + [108]) = ($1 + [24])
	*($4 + [112]) = ($1 + [32])
	*($4 + [116]) = ($1 + [40])
	*($4 + [120]) = ($1 + [48])
	*($4 + [124]) = ($1 + [56])
	CALL $36(($4 + [96]), ($4 + [88]))
	CALL db_update_i64(*($1 + [68]), $2, $4, [64])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8989])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9035])
	*($1 + [32]) = (int_64)1
	$5 = *($1 + [8])
	CALL eosio_assert([1], [9086])
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	*($4 + [76]) = ($1 + [8])
	*($4 + [72]) = $1
	*($4 + [80]) = ($1 + [16])
	*($4 + [84]) = ($1 + [24])
	*($4 + [88]) = ($1 + [32])
	CALL $33(($4 + [72]), ($4 + [64]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $64($0)
	
.LABEL $label$1
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy(($2 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy(($0 + [48]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $44(*($1), ($0 + [56]))
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8563])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8563])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8563])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8563])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8563])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8563])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8563])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $61($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9412])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $61($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[40])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$3 }
	$3 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3 + [16]) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	$3 = (*($0) + [40])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $55($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$3 * (int_32)[40]))
	$5 = ($2 + ((int_32)$5 * (int_32)[40]))
	$3 = ($5 + [8])
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [-8])) = (int_64)0
	$3 = ($3 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$6 = ($2 + ((int_32)$6 * (int_32)[40]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 + ((int_32)((int_32)$1 / (int_32)[-40]) * (int_32)[40]))
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [9390])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$4 = (CASTING uint_32)(uint_64 $5)
	$8 = *($1)
	$3 = *($1 + [4])
	$7 = ((int_32)($3 - $8) / (int_32)[40])
	if ( ((uint_32)$7 >= (uint_32)$4) ){ goto $label$4 }
	CALL $45($1, ($4 - $7))
	$3 = *(($1 + [4]))
	$8 = *($1)
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$7 <= (uint_32)$4) ){ goto $label$5 }
	$3 = ($8 + ((int_32)$4 * (int_32)[40]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($2 + [20])
	
.LOOP $label$6:
	*($2) = $0
	*($2 + [8]) = $8
	*((($2 + [8]) + [8])) = ($8 + [16])
	*($4) = ($8 + [24])
	*((($2 + [8]) + [16])) = ($8 + [32])
	*($2 + [12]) = ($8 + [8])
	CALL $37(($2 + [8]), $2)
	$8 = ($8 + [40])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $61($1)
	
.LABEL $label$2
	*(CALL $56()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $61(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $64($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $8 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL require_auth(*($0 + [8]))
	if ( ((int_64)$3 != (int_64)1) ){ goto $label$6 }
	*(($4 + [32])) = [0]
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	$3 = *(($0 + [8]))
	*($4) = $3
	*($4 + [8]) = $1
	$0 = [0]
	$5 = CALL db_find_i64($3, $1, (int_64)-7954137195043356672, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$0 = CALL $15($4, $5)
	CALL eosio_assert(((int_32)*($0 + [64]) == (int_32)$4), [8433])
	
.LABEL $label$7
	$5 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($5, [8569])
	CALL eosio_assert($5, [9178])
	CALL eosio_assert($5, [9212])
	$5 = CALL db_next_i64(*($0 + [68]), ($4 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	CALL $15($4, $5)
	
.LABEL $label$8
	CALL $29($4, $0)
	$6 = *($4 + [24])
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($4 + [28])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	CALL _ZdlPv($5)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($4 + [24]))
	goto $label$4 
	
.LABEL $label$6
	*(($4 + [32])) = [0]
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	$3 = *(($0 + [8]))
	*($4) = $3
	*($4 + [8]) = $1
	$0 = [0]
	$5 = CALL db_find_i64($3, $1, (int_64)-4139006359028891648, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$11 }
	$0 = CALL $17($4, $5)
	CALL eosio_assert(((int_32)*($0 + [40]) == (int_32)$4), [8433])
	
.LABEL $label$11
	$5 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($5, [8569])
	CALL eosio_assert($5, [9178])
	CALL eosio_assert($5, [9212])
	$5 = CALL db_next_i64(*($0 + [44]), ($4 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	CALL $17($4, $5)
	
.LABEL $label$12
	CALL $30($4, $0)
	$6 = *($4 + [24])
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($4 + [28])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$13:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$13 }
	$0 = *(($4 + [24]))
	goto $label$1 
	
.LABEL $label$5
	$0 = $6
	
.LABEL $label$4
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$2
	$0 = $6
	
.LABEL $label$1
	*($7) = $6
	CALL _ZdlPv($0)
	$global$0 = ($4 + [48])
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $61($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [112]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8507])
	CALL memcpy(($4 + [104]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [8507])
	CALL memcpy((($4 + [104]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [8507])
	CALL memcpy((($4 + [104]) + [16]), ($2 + [16]), [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [24])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$3 = CALL $13(($4 + [40]), $0, $1, ($4 + [8]))
	$8 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [120])
	$1 = *($4 + [112])
	$9 = *($4 + [104])
	if ( ($5 & [1]) ){ goto $label$11 }
	CALL void $8((int_32 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL void $8((int_32 $9), (int_64 $1), (int_64 $0), (int_64 *((*($8) + $6))))
	if ( ($7 <= [513]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $64($2)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$5
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$6 = ($global$0 - [352])
	$global$0 = $6
	*($6 + [320]) = $5
	*($6 + [328]) = $4
	CALL require_auth(*($0 + [8]))
	CALL eosio_assert(((int_64)$1 != (int_64)0), [8192])
	CALL eosio_assert(((int_64)$4 != (int_64)0), [9145])
	CALL eosio_assert(((int_64)$5 != (int_64)0), [8320])
	$7 = [0]
	*(($6 + [312])) = [0]
	*($6 + [288]) = $1
	*($6 + [296]) = (int_64)-1
	*($6 + [304]) = (int_64)0
	$8 = *($0 + [8])
	*($6 + [280]) = $8
	$9 = [0]
	$10 = CALL db_find_i64($8, $1, (int_64)-4139006359028891648, $3)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $17(($6 + [280]), $10)
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)($6 + [280])), [8433])
	$5 = *($6 + [320])
	$4 = *($6 + [328])
	
.LABEL $label$1
	$11 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($11, [8569])
	CALL eosio_assert(((int_64)*($9) == (int_64)$2), [8586])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)$3), [8586])
	CALL eosio_assert(((int_64)*($9 + [16]) == (int_64)$4), [8586])
	CALL eosio_assert(((int_64)*($9 + [24]) == (int_64)$5), [8586])
	CALL eosio_assert((int_64)(*($9 + [32]) == 0), [8586])
	CALL $25(($6 + [264]), $0, ((int_64)*($0 + [32]) * (int_64)$4))
	CALL $25(($6 + [248]), $0, ((int_64)*($0 + [32]) * (int_64)$5))
	if ( ((uint_64)((int_64)*($6 + [264]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$8 = (uint_64)*($6 + [272]) >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$8 = $12
	$7 = [1]
	$13 = $10
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$8 = $12
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$10 < (int_32)[6])
	$13 = ($10 + [1])
	$10 = $13
	if ( $7 ){ goto $label$6 }
	$7 = [1]
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	CALL eosio_assert($7, [8587])
	$7 = [0]
	if ( ((uint_64)((int_64)*($6 + [248]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$8 = (uint_64)*($6 + [256]) >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $12
	$7 = [1]
	$13 = $10
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$8 = $12
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$10 < (int_32)[6])
	$13 = ($10 + [1])
	$10 = $13
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [8587])
	*(($6 + [240])) = [0]
	*($6 + [224]) = (int_64)-1
	*($6 + [232]) = (int_64)0
	$8 = *(($0 + [8]))
	*($6 + [208]) = $8
	*($6 + [216]) = $1
	$10 = CALL db_find_i64($8, $1, (int_64)-7954137195043356672, $2)
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$13 }
	$10 = CALL $15(($6 + [208]), $10)
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)($6 + [208])), [8433])
	*($6 + [204]) = $10
	*($6 + [200]) = ($6 + [208])
	$5 = *($6 + [320])
	$4 = *($6 + [328])
	goto $label$12 
	
.LABEL $label$13
	$10 = [0]
	*($6 + [204]) = [0]
	*($6 + [200]) = ($6 + [208])
	
.LABEL $label$12
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8569])
	CALL eosio_assert(((int_64)*($10 + [48]) == (int_64)1), [8586])
	CALL eosio_assert(((uint_64)*($10 + [56]) >= (uint_64)((int_64)$5 + (int_64)$4)), [8586])
	$8 = *(($0 + [8]))
	*($6 + [160]) = [8610]
	*($6 + [164]) = CALL $58([8610])
	*($6 + [40]) = *($6 + [160])
	*($6 + [152]) = *(CALL $20(($6 + [80]), ($6 + [40])))
	*($6 + [144]) = $8
	$13 = ($0 + [52])
	$10 = *($0 + [52])
	if ( ($10 & [1]) ){ goto $label$15 }
	$10 = uint_32($10 >> [1])
	$7 = ($13 + [1])
	goto $label$14 
	
.LABEL $label$15
	$10 = *(($0 + [56]))
	$7 = *(($0 + [60]))
	
.LABEL $label$14
	*($6 + [132]) = $10
	*($6 + [128]) = $7
	*($6 + [32]) = *($6 + [128])
	$14 = CALL $20(($6 + [136]), ($6 + [32]))
	*($6 + [160]) = [8617]
	*($6 + [164]) = CALL $58([8617])
	*($6 + [24]) = *($6 + [160])
	$8 = *(CALL $20(($6 + [80]), ($6 + [24])))
	*(($6 + [72])) = [0]
	*($6 + [64]) = (int_64)0
	$10 = CALL $58([9164])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$20 }
	*($6 + [64]) = ($10 << [1])
	$7 = (($6 + [64]) | [1])
	if ( $10 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$15 = (($10 + [16]) & [-16])
	$7 = CALL _Znwj($15)
	*($6 + [64]) = ($15 | [1])
	*($6 + [72]) = $7
	*($6 + [68]) = $10
	
.LABEL $label$19
	CALL memcpy($7, [9164], $10)
	
.LABEL $label$18
	*(($7 + $10)) = [0]
	*(($6 + [104])) = *((($6 + [264]) + [8]))
	$10 = (($6 + [64]) + [8])
	*(($6 + [120])) = *($10)
	*($10) = [0]
	*($6 + [88]) = $3
	*($6 + [80]) = *(($0 + [8]))
	*($6 + [96]) = *($6 + [264])
	*($6 + [112]) = *($6 + [64])
	*($6 + [64]) = (int_64)0
	$10 = CALL $21(($6 + [160]), ($6 + [144]), *($14), $8, ($6 + [80]))
	CALL $22(($6 + [336]), $10)
	$7 = *($6 + [336])
	CALL send_inline($7, (*($6 + [340]) - $7))
	$7 = *($6 + [336])
	if ( ($7 == 0) ){ goto $label$21 }
	*($6 + [340]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$21
	$7 = *($10 + [28])
	if ( ($7 == 0) ){ goto $label$22 }
	*(($10 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$22
	$7 = *($10 + [16])
	if ( ($7 == 0) ){ goto $label$23 }
	*(($10 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$23
	if ( ((*(($6 + [112])) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($6 + [120])))
	
.LABEL $label$24
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($6 + [72])))
	
.LABEL $label$25
	$8 = *(($0 + [8]))
	*($6 + [160]) = [8610]
	*($6 + [164]) = CALL $58([8610])
	*($6 + [16]) = *($6 + [160])
	*($6 + [152]) = *(CALL $20(($6 + [80]), ($6 + [16])))
	*($6 + [144]) = $8
	$10 = *(($0 + [52]))
	if ( ($10 & [1]) ){ goto $label$27 }
	$10 = uint_32($10 >> [1])
	$7 = ($13 + [1])
	goto $label$26 
	
.LABEL $label$27
	$10 = *(($0 + [56]))
	$7 = *(($0 + [60]))
	
.LABEL $label$26
	*($6 + [52]) = $10
	*($6 + [48]) = $7
	*($6 + [8]) = *($6 + [48])
	$13 = CALL $20(($6 + [56]), ($6 + [8]))
	*($6 + [160]) = [8617]
	*($6 + [164]) = CALL $58([8617])
	*($6) = *($6 + [160])
	$8 = *(CALL $20(($6 + [80]), $6))
	$14 = *($6 + [204])
	*(($6 + [72])) = [0]
	*($6 + [64]) = (int_64)0
	$10 = CALL $58([9164])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$30 }
	*($6 + [64]) = ($10 << [1])
	$7 = (($6 + [64]) | [1])
	if ( $10 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$15 = (($10 + [16]) & [-16])
	$7 = CALL _Znwj($15)
	*($6 + [64]) = ($15 | [1])
	*($6 + [72]) = $7
	*($6 + [68]) = $10
	
.LABEL $label$29
	CALL memcpy($7, [9164], $10)
	
.LABEL $label$28
	*(($7 + $10)) = [0]
	$4 = *($14 + [8])
	*(($6 + [104])) = *((($6 + [248]) + [8]))
	$10 = (($6 + [64]) + [8])
	*(($6 + [120])) = *($10)
	*($10) = [0]
	*($6 + [80]) = *(($0 + [8]))
	*($6 + [96]) = *($6 + [248])
	*($6 + [112]) = *($6 + [64])
	*($6 + [88]) = $4
	*($6 + [64]) = (int_64)0
	$10 = CALL $21(($6 + [160]), ($6 + [144]), *($13), $8, ($6 + [80]))
	CALL $22(($6 + [336]), $10)
	$7 = *($6 + [336])
	CALL send_inline($7, (*($6 + [340]) - $7))
	$7 = *($6 + [336])
	if ( ($7 == 0) ){ goto $label$31 }
	*($6 + [340]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$31
	$7 = *($10 + [28])
	if ( ($7 == 0) ){ goto $label$32 }
	*(($10 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$32
	$7 = *($10 + [16])
	if ( ($7 == 0) ){ goto $label$33 }
	*(($10 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$33
	if ( ((*(($6 + [112])) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($6 + [120])))
	
.LABEL $label$34
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*(($6 + [72])))
	
.LABEL $label$35
	$10 = ($0 + [8])
	$8 = *($10)
	CALL eosio_assert($11, [8954])
	CALL $26(($6 + [280]), $9, $8, ($6 + [80]))
	$8 = *($10)
	$10 = *($6 + [204])
	*($6 + [84]) = ($6 + [328])
	*($6 + [80]) = ($6 + [200])
	*($6 + [88]) = ($6 + [320])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8954])
	CALL $27(($6 + [208]), $10, $8, ($6 + [80]))
	$0 = *($6 + [232])
	if ( ($0 == 0) ){ goto $label$36 }
	$13 = ($6 + [236])
	$10 = *($13)
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$38 }
	
.LOOP $label$39:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$40 }
	CALL _ZdlPv($7)
	
.LABEL $label$40
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$39 }
	$10 = *(($6 + [232]))
	goto $label$37 
	
.LABEL $label$38
	$10 = $0
	
.LABEL $label$37
	*($13) = $0
	CALL _ZdlPv($10)
	
.LABEL $label$36
	$0 = *($6 + [304])
	if ( ($0 == 0) ){ goto $label$41 }
	$13 = ($6 + [308])
	$10 = *($13)
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$43 }
	
.LOOP $label$44:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$45 }
	CALL _ZdlPv($7)
	
.LABEL $label$45
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$44 }
	$10 = *(($6 + [304]))
	goto $label$42 
	
.LABEL $label$43
	$10 = $0
	
.LABEL $label$42
	*($13) = $0
	CALL _ZdlPv($10)
	
.LABEL $label$41
	$global$0 = ($6 + [352])
	return (unreachable)
	
.LABEL $label$17
	CALL $54(($6 + [64]))
	
.LABEL $label$16
	CALL $54(($6 + [64]))
	(unreachable)
}

int_32 .FUNC $7 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $61($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [100]) = $2
	*($4 + [96]) = $2
	*($4 + [104]) = ($2 + $7)
	*($4 + [152]) = ($4 + [96])
	*($4 + [32]) = ($4 + [112])
	CALL $24(($4 + [32]), ($4 + [152]))
	$3 = *($4 + [104])
	*((($4 + [16]) + [8])) = $3
	*(($4 + [8])) = $3
	$8 = *($4 + [96])
	*($4) = $8
	*($4 + [16]) = $8
	$3 = CALL $13(($4 + [32]), $0, $1, $4)
	$9 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [144])
	$1 = *($4 + [136])
	$8 = *($4 + [128])
	$10 = *($4 + [120])
	$11 = *($4 + [112])
	if ( ($5 & [1]) ){ goto $label$11 }
	CALL void $9((int_32 $11), (int_64 $10), (int_64 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL void $9((int_32 $11), (int_64 $10), (int_64 $8), (int_64 $1), (int_64 $0), (int_64 *((*($9) + $6))))
	if ( ($7 <= [513]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $64($2)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $4 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [272])
	$global$0 = $3
	CALL require_auth(*($0 + [8]))
	CALL eosio_assert(((int_64)$1 != (int_64)0), [8192])
	*(($3 + [248])) = [0]
	*($3 + [224]) = $1
	*($3 + [232]) = (int_64)-1
	*($3 + [240]) = (int_64)0
	$4 = *($0 + [8])
	*($3 + [216]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $1, (int_64)-7954137195043356672, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $15(($3 + [216]), $6)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)($3 + [216])), [8433])
	
.LABEL $label$1
	$7 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($7, [8569])
	CALL eosio_assert(((int_64)*($5) == (int_64)$2), [8586])
	CALL eosio_assert(((int_64)*($5 + [48]) == (int_64)1), [8586])
	CALL eosio_assert(((int_64)*($5 + [56]) != (int_64)0), [8586])
	$1 = *($0 + [32])
	$4 = *($5 + [32])
	$8 = *($5 + [56])
	CALL eosio_assert([1], [8586])
	$1 = ((int_64)$1 * (int_64))($8 - $4)
	if ( ((int_64)$1) == (int_64)0) ){ goto $label$6 }
	CALL $25(($3 + [200]), $0, $1)
	$1 = *(($0 + [8]))
	*($3 + [160]) = [8610]
	*($3 + [164]) = CALL $58([8610])
	*($3 + [40]) = *($3 + [160])
	*($3 + [152]) = *(CALL $20(($3 + [80]), ($3 + [40])))
	*($3 + [144]) = $1
	$9 = ($0 + [52])
	$6 = *($0 + [52])
	if ( ($6 & [1]) ){ goto $label$5 }
	$6 = uint_32($6 >> [1])
	$10 = ($9 + [1])
	goto $label$4 
	
.LABEL $label$6
	$9 = ($0 + [52])
	goto $label$3 
	
.LABEL $label$5
	$6 = *(($0 + [56]))
	$10 = *(($0 + [60]))
	
.LABEL $label$4
	*($3 + [132]) = $6
	*($3 + [128]) = $10
	*($3 + [32]) = *($3 + [128])
	$11 = CALL $20(($3 + [136]), ($3 + [32]))
	*($3 + [160]) = [8617]
	*($3 + [164]) = CALL $58([8617])
	*($3 + [24]) = *($3 + [160])
	$1 = *(CALL $20(($3 + [80]), ($3 + [24])))
	*(($3 + [72])) = [0]
	*($3 + [64]) = (int_64)0
	$6 = CALL $58([8626])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$9 }
	*($3 + [64]) = ($6 << [1])
	$10 = (($3 + [64]) | [1])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$12 = (($6 + [16]) & [-16])
	$10 = CALL _Znwj($12)
	*($3 + [64]) = ($12 | [1])
	*($3 + [72]) = $10
	*($3 + [68]) = $6
	
.LABEL $label$8
	CALL memcpy($10, [8626], $6)
	
.LABEL $label$7
	*(($10 + $6)) = [0]
	*(($3 + [104])) = *((($3 + [200]) + [8]))
	$6 = (($3 + [64]) + [8])
	*(($3 + [120])) = *($6)
	*($6) = [0]
	*($3 + [88]) = $2
	*($3 + [80]) = *(($0 + [8]))
	*($3 + [96]) = *($3 + [200])
	*($3 + [112]) = *($3 + [64])
	*($3 + [64]) = (int_64)0
	$6 = CALL $21(($3 + [160]), ($3 + [144]), *($11), $1, ($3 + [80]))
	CALL $22(($3 + [256]), $6)
	$10 = *($3 + [256])
	CALL send_inline($10, (*($3 + [260]) - $10))
	$10 = *($3 + [256])
	if ( ($10 == 0) ){ goto $label$10 }
	*($3 + [260]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$10
	$10 = *($6 + [28])
	if ( ($10 == 0) ){ goto $label$11 }
	*(($6 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$11
	$10 = *($6 + [16])
	if ( ($10 == 0) ){ goto $label$12 }
	*(($6 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$12
	if ( ((*(($3 + [112])) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [120])))
	
.LABEL $label$13
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$3
	CALL $25(($3 + [200]), $0, ((int_64)*(($0 + [32])) * (int_64)*(($5 + [32]))))
	$1 = *(($0 + [8]))
	*($3 + [160]) = [8610]
	*($3 + [164]) = CALL $58([8610])
	*($3 + [16]) = *($3 + [160])
	*($3 + [152]) = *(CALL $20(($3 + [80]), ($3 + [16])))
	*($3 + [144]) = $1
	$6 = *(($0 + [52]))
	if ( ($6 & [1]) ){ goto $label$15 }
	$6 = uint_32($6 >> [1])
	$10 = ($9 + [1])
	goto $label$14 
	
.LABEL $label$15
	$6 = *(($0 + [56]))
	$10 = *(($0 + [60]))
	
.LABEL $label$14
	*($3 + [52]) = $6
	*($3 + [48]) = $10
	*($3 + [8]) = *($3 + [48])
	$9 = CALL $20(($3 + [56]), ($3 + [8]))
	*($3 + [160]) = [8617]
	*($3 + [164]) = CALL $58([8617])
	*($3) = *($3 + [160])
	$1 = *(CALL $20(($3 + [80]), $3))
	*(($3 + [72])) = [0]
	*($3 + [64]) = (int_64)0
	$6 = CALL $58([8626])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$19 }
	*($3 + [64]) = ($6 << [1])
	$10 = (($3 + [64]) | [1])
	if ( $6 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$11 = (($6 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($3 + [64]) = ($11 | [1])
	*($3 + [72]) = $10
	*($3 + [68]) = $6
	
.LABEL $label$18
	CALL memcpy($10, [8626], $6)
	
.LABEL $label$17
	*(($10 + $6)) = [0]
	$2 = *($5 + [8])
	*(($3 + [104])) = *((($3 + [200]) + [8]))
	$6 = (($3 + [64]) + [8])
	*(($3 + [120])) = *($6)
	*($6) = [0]
	*($3 + [80]) = *(($0 + [8]))
	*($3 + [96]) = *($3 + [200])
	*($3 + [112]) = *($3 + [64])
	*($3 + [88]) = $2
	*($3 + [64]) = (int_64)0
	$6 = CALL $21(($3 + [160]), ($3 + [144]), *($9), $1, ($3 + [80]))
	CALL $22(($3 + [256]), $6)
	$10 = *($3 + [256])
	CALL send_inline($10, (*($3 + [260]) - $10))
	$10 = *($3 + [256])
	if ( ($10 == 0) ){ goto $label$20 }
	*($3 + [260]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$20
	$10 = *($6 + [28])
	if ( ($10 == 0) ){ goto $label$21 }
	*(($6 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$21
	$10 = *($6 + [16])
	if ( ($10 == 0) ){ goto $label$22 }
	*(($6 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$22
	if ( ((*(($3 + [112])) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($3 + [120])))
	
.LABEL $label$23
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$24
	$1 = *(($0 + [8]))
	CALL eosio_assert($7, [8954])
	CALL $28(($3 + [216]), $5, $1, ($3 + [80]))
	$6 = *($3 + [240])
	if ( ($6 == 0) ){ goto $label$25 }
	$10 = ($3 + [244])
	$0 = *($10)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$27 }
	
.LOOP $label$28:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$29 }
	CALL _ZdlPv($5)
	
.LABEL $label$29
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$28 }
	$0 = *(($3 + [240]))
	goto $label$26 
	
.LABEL $label$27
	$0 = $6
	
.LABEL $label$26
	*($10) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$25
	$global$0 = ($3 + [272])
	return (unreachable)
	
.LABEL $label$16
	CALL $54(($3 + [64]))
	
.LABEL $label$2
	CALL $54(($3 + [64]))
	(unreachable)
}

int_32 .FUNC $5 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $61($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [104]) = (int_64)0
	*($4 + [96]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8507])
	CALL memcpy(($4 + [96]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8507])
	CALL memcpy((($4 + [96]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$3 = CALL $13(($4 + [32]), $0, $1, $4)
	$8 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [104])
	$1 = *($4 + [96])
	if ( ($5 & [1]) ){ goto $label$11 }
	CALL void $8((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL void $8((int_32 $1), (int_64 $0), (int_64 *((*($8) + $6))))
	if ( ($7 <= [513]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $64($2)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$5
	$global$0 = ($4 + [112])
	return [1]
}

void .FUNC $2 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5, int_64 $6, int_64 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$9 = ($global$0 - [192])
	$global$0 = $9
	*($9 + [176]) = $7
	*($9 + [184]) = $2
	*($9 + [144]) = $6
	*($9 + [152]) = $5
	*($9 + [160]) = $4
	*($9 + [168]) = $3
	CALL require_auth(*($0 + [8]))
	CALL eosio_assert(((int_64)$1 != (int_64)0), [8192])
	CALL eosio_assert(((int_64)$3 != (int_64)0), [8209])
	CALL eosio_assert(((int_64)$4 != (int_64)0), [8320])
	CALL eosio_assert(((int_64)$5 != (int_64)0), [8332])
	CALL eosio_assert(((int_64)$6 != (int_64)0), [8352])
	CALL eosio_assert(((int_32)*($8 + [4]) != (int_32)*($8)), [8372])
	*((($9 + [104]) + [32])) = [0]
	*($9 + [112]) = $1
	*($9 + [120]) = (int_64)-1
	*($9 + [128]) = (int_64)0
	$3 = *($0 + [8])
	*($9 + [104]) = $3
	$10 = CALL db_find_i64($3, $1, (int_64)-7954137195043356672, $2)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $15(($9 + [104]), $10) + [64]) == (int_32)($9 + [104])), [8433])
	$10 = [0]
	goto $label$1 
	
.LABEL $label$2
	$10 = [1]
	
.LABEL $label$1
	CALL eosio_assert($10, [8395])
	$11 = ($0 + [8])
	$3 = *($11)
	*($9 + [68]) = ($9 + [168])
	*($9 + [64]) = ($9 + [184])
	*($9 + [72]) = ($9 + [160])
	*($9 + [76]) = ($9 + [152])
	*($9 + [80]) = ($9 + [144])
	*($9 + [84]) = ($9 + [176])
	CALL $16(($9 + [24]), ($9 + [104]), $3, ($9 + [64]))
	*((($9 + [64]) + [32])) = [0]
	*($9 + [72]) = $1
	*($9 + [80]) = (int_64)-1
	*($9 + [88]) = (int_64)0
	*($9 + [64]) = *($11)
	$13 = *(($8 + [4]))
	$12 = *($8)
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$3 }
	$14 = [0]
	$15 = ($9 + [92])
	$0 = [0]
	
.LOOP $label$4:
	*((($9 + [24]) + [32])) = *(($12 + [32]))
	*((($9 + [24]) + [24])) = *(($12 + [24]))
	*((($9 + [24]) + [16])) = *(($12 + [16]))
	$1 = *(($12 + [8]))
	*((($9 + [24]) + [8])) = $1
	*($9 + [24]) = *($12)
	if ( ((int_32)$14 == (int_32)$0) ){ goto $label$6 }
	
.LOOP $label$8:
	$8 = ($0 + [-24])
	$10 = *($8)
	if ( ((int_64)*($10 + [8]) == (int_64)$1) ){ goto $label$7 }
	$0 = $8
	if ( ((int_32)$14 != (int_32)$8) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$14 == (int_32)$0) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($9 + [64])), [8433])
	goto $label$5 
	
.LABEL $label$6
	$10 = [0]
	$8 = CALL db_find_i64(*($9 + [64]), *((($9 + [64]) + [8])), (int_64)-4139006359028891648, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$10 = CALL $17(($9 + [64]), $8)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($9 + [64])), [8433])
	
.LABEL $label$5
	CALL eosio_assert(($10 == 0), [8408])
	$1 = *($11)
	*($9 + [16]) = ($9 + [24])
	CALL $18(($9 + [8]), ($9 + [64]), $1, ($9 + [16]))
	$12 = ($12 + [40])
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$9 }
	$14 = *((($9 + [64]) + [24]))
	$0 = *($15)
	goto $label$4 
	
.LABEL $label$9
	$10 = *($9 + [88])
	if ( ($10 == 0) ){ goto $label$3 }
	$14 = ($9 + [92])
	$8 = *($14)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$11 }
	
.LOOP $label$12:
	$8 = ($8 + [-24])
	$0 = *($8)
	*($8) = [0]
	if ( ($0 == 0) ){ goto $label$13 }
	CALL _ZdlPv($0)
	
.LABEL $label$13
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$12 }
	$8 = *(($9 + [88]))
	goto $label$10 
	
.LABEL $label$11
	$8 = $10
	
.LABEL $label$10
	*($14) = $10
	CALL _ZdlPv($8)
	
.LABEL $label$3
	$10 = *($9 + [128])
	if ( ($10 == 0) ){ goto $label$14 }
	$14 = ($9 + [132])
	$8 = *($14)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$16 }
	
.LOOP $label$17:
	$8 = ($8 + [-24])
	$0 = *($8)
	*($8) = [0]
	if ( ($0 == 0) ){ goto $label$18 }
	CALL _ZdlPv($0)
	
.LABEL $label$18
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$17 }
	$8 = *(($9 + [128]))
	goto $label$15 
	
.LABEL $label$16
	$8 = $10
	
.LABEL $label$15
	*($14) = $10
	CALL _ZdlPv($8)
	
.LABEL $label$14
	$global$0 = ($9 + [192])
}

int_32 .FUNC $3 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [208])
	$global$0 = $3
	*(($4 = $3) + [200]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $61($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [192])) = [0]
	*($4 + [136]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [116]) = $2
	*($4 + [112]) = $2
	*($4 + [120]) = ($2 + $5)
	*($4 + [24]) = ($4 + [112])
	*($4 + [48]) = ($4 + [128])
	CALL $12(($4 + [48]), ($4 + [24]))
	$3 = *($4 + [120])
	*((($4 + [32]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$6 = *($4 + [112])
	*($4 + [8]) = $6
	*($4 + [32]) = $6
	$3 = CALL $13(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [24]) = $3
	*($4 + [28]) = ($4 + [200])
	CALL $14(($4 + [24]), ($4 + [128]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$10 }
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $64($2)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($3 + [40]) & $2) ){ goto $label$6 }
	
.LABEL $label$7
	$2 = *(($4 + [184]))
	if ( ($2 == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [48])))
	$2 = *(($4 + [184]))
	if ( ($2 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [188])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)4982871653160583167) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)4982871653160583168) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)5377860905033793536) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$1 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [1]
	*($3) = *($3 + [72])
	CALL $3($1, $1, $3)
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_64)$2 == (int_64)-6216093385678127104) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)4982486054922616832) ){ goto $label$1 }
	*($3 + [52]) = [0]
	*($3 + [48]) = [2]
	*($3 + [24]) = *($3 + [48])
	CALL $5($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [60]) = [0]
	*($3 + [56]) = [3]
	*($3 + [16]) = *($3 + [56])
	CALL $7($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [44]) = [0]
	*($3 + [40]) = [4]
	*($3 + [32]) = *($3 + [40])
	CALL $9($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [68]) = [0]
	*($3 + [64]) = [5]
	*($3 + [8]) = *($3 + [64])
	CALL $11($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $57([0])
	$global$0 = ($3 + [80])
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = (int_64)0
	*($2 + [8]) = [0]
	$3 = (*(($1 + [60])) - *($1 + [56]))
	$4 = ((int_32)$3 / (int_32)[40])
	$5 = *($1 + [48])
	$6 = *($1 + [40])
	$7 = *($1 + [32])
	$8 = *($1 + [24])
	$9 = *($1 + [16])
	$10 = *($1 + [8])
	$11 = *($1)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*(($2 + [8])) = ($3 + ((int_32)$4 * (int_32)[40]))
	*($2) = $3
	*($2 + [4]) = $3
	$4 = *(($1 + [56]))
	$1 = (*(($1 + [60])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($3, $4, $1)
	*($2 + [4]) = ($3 + ((int_32)((uint_32)$1 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$2
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($0) + $1))
	
.LABEL $label$3
	CALL void $0((int_32 $11), (int_64 $10), (int_64 $9), (int_64 $8), (int_64 $7), (int_64 $6), (int_64 $5), (int_64 $2), (int_32 $1))
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$4 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $55($2)
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8484])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $61($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [64]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [56])
	CALL $35(($3 + [32]), ($3 + [24]))
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $32(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $64($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [8512])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([80])
	CALL $31($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [68])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $32(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8484])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $61($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	CALL $37(($3 + [40]), ($3 + [32]))
	*($5 + [44]) = $1
	*($3 + [32]) = $5
	$6 = *($5 + [8])
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $34(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $64($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$6 = ($global$0 - [240])
	$global$0 = $6
	*($6 + [208]) = $4
	*($6 + [216]) = $3
	*($6 + [200]) = $5
	CALL eosio_assert(((int_64)$1 != (int_64)0), [8192])
	CALL eosio_assert(((int_64)$3 != (int_64)0), [8209])
	CALL eosio_assert(((int_64)$4 != (int_64)0), [8320])
	CALL eosio_assert(((int_64)$5 != (int_64)0), [8332])
	*(($6 + [192])) = [0]
	*($6 + [168]) = $1
	*($6 + [176]) = (int_64)-1
	*($6 + [184]) = (int_64)0
	$7 = *($0 + [8])
	*($6 + [160]) = $7
	$8 = [0]
	$9 = CALL db_find_i64($7, $1, (int_64)-7954137195043356672, $2)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $15(($6 + [160]), $9)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)($6 + [160])), [8433])
	$5 = *($6 + [200])
	$4 = *($6 + [208])
	$3 = *($6 + [216])
	
.LABEL $label$1
	$10 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($10, [8569])
	CALL require_auth(*($8))
	CALL eosio_assert(((int_64)*($8) == (int_64)$2), [8586])
	CALL eosio_assert(((int_64)*($8 + [16]) == (int_64)$3), [8586])
	CALL eosio_assert(((int_64)*($8 + [24]) == (int_64)$4), [8586])
	CALL eosio_assert(((int_64)*($8 + [32]) == (int_64)$5), [8586])
	CALL eosio_assert((int_64)(*($8 + [48]) == 0), [8586])
	$5 = ((int_64)((int_64)$4 + (int_64)$3) + (int_64)$5)
	$3 = *($0 + [32])
	$9 = *($0 + [40])
	if ( ($9 & [1]) ){ goto $label$6 }
	$11 = (($0 + [40]) + [1])
	$1 = ((int_64)$5 * (int_64)$3)
	$9 = uint_32($9 >> [1])
	if ( ((uint_32)$9 >= (uint_32)[8]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$11 = *(($0 + [48]))
	$1 = ((int_64)$5 * (int_64)$3)
	$9 = *(($0 + [44]))
	if ( ($9 <= [8]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [8630])
	goto $label$3 
	
.LABEL $label$4
	if ( $9 ){ goto $label$3 }
	$5 = (int_64)0
	goto $label$2 
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$7:
	$12 = (($11 + $9) + [-1])
	$13 = *($12)
	if ( ((($13 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [8675])
	$13 = *($12)
	
.LABEL $label$8
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$7 }
	
.LABEL $label$2
	$7 = ((int_64)$1 + (int_64)4611686018427387903)
	CALL eosio_assert((uint_64)($7 <= (int_64)9223372036854775807), [8728])
	$14 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	$9 = [0]
	$3 = ((int_64)$5 & (int_64)72057594037927935)
	$5 = $3
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$4 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$5 = $4
	$13 = [1]
	$12 = $9
	$9 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$5 = $4
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$13 = ((int_32)$9 < (int_32)[6])
	$12 = ($9 + [1])
	$9 = $12
	if ( $13 ){ goto $label$13 }
	$13 = [1]
	$9 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$13 = [0]
	
.LABEL $label$9
	CALL eosio_assert($13, [8777])
	$13 = [0]
	if ( ((uint_64)$7 > (uint_64)(int_64)9223372036854775806) ){ goto $label$14 }
	$9 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$3 = $5
	$13 = [1]
	$12 = $9
	$9 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$3 = $5
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$13 = ((int_32)$9 < (int_32)[6])
	$12 = ($9 + [1])
	$9 = $12
	if ( $13 ){ goto $label$18 }
	$13 = [1]
	$9 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$13 = [0]
	
.LABEL $label$14
	CALL eosio_assert($13, [8587])
	*($6 + [120]) = [8610]
	*($6 + [124]) = CALL $58([8610])
	*($6 + [16]) = *($6 + [120])
	*($6 + [112]) = *(CALL $20(($6 + [40]), ($6 + [16])))
	*($6 + [104]) = $2
	$9 = *($0 + [52])
	if ( ($9 & [1]) ){ goto $label$20 }
	$9 = uint_32($9 >> [1])
	$13 = (($0 + [52]) + [1])
	goto $label$19 
	
.LABEL $label$20
	$9 = *(($0 + [56]))
	$13 = *(($0 + [60]))
	
.LABEL $label$19
	*($6 + [92]) = $9
	*($6 + [88]) = $13
	*($6 + [8]) = *($6 + [88])
	$12 = CALL $20(($6 + [96]), ($6 + [8]))
	*($6 + [120]) = [8617]
	*($6 + [124]) = CALL $58([8617])
	*($6) = *($6 + [120])
	$5 = *(CALL $20(($6 + [40]), $6))
	*(($6 + [32])) = [0]
	*($6 + [24]) = (int_64)0
	$9 = CALL $58([8626])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$21 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$24 }
	*($6 + [24]) = ($9 << [1])
	$13 = (($6 + [24]) | [1])
	if ( $9 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$11 = (($9 + [16]) & [-16])
	$13 = CALL _Znwj($11)
	*($6 + [24]) = ($11 | [1])
	*($6 + [32]) = $13
	*($6 + [28]) = $9
	
.LABEL $label$23
	CALL memcpy($13, [8626], $9)
	
.LABEL $label$22
	*(($13 + $9)) = [0]
	*(($6 + [64])) = $14
	$9 = (($6 + [24]) + [8])
	*(($6 + [80])) = *($9)
	*($9) = [0]
	*($6 + [40]) = $2
	*($6 + [56]) = $1
	*($6 + [48]) = *(($0 + [8]))
	*($6 + [72]) = *($6 + [24])
	*($6 + [24]) = (int_64)0
	$9 = CALL $21(($6 + [120]), ($6 + [104]), *($12), $5, ($6 + [40]))
	CALL $22(($6 + [224]), $9)
	$13 = *($6 + [224])
	CALL send_inline($13, (*($6 + [228]) - $13))
	$13 = *($6 + [224])
	if ( ($13 == 0) ){ goto $label$25 }
	*($6 + [228]) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$25
	$13 = *($9 + [28])
	if ( ($13 == 0) ){ goto $label$26 }
	*(($9 + [32])) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$26
	$13 = *($9 + [16])
	if ( ($13 == 0) ){ goto $label$27 }
	*(($9 + [20])) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$27
	if ( ((*(($6 + [72])) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($6 + [80])))
	
.LABEL $label$28
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($6 + [32])))
	
.LABEL $label$29
	$5 = *(($0 + [8]))
	*($6 + [44]) = ($6 + [208])
	*($6 + [40]) = ($6 + [216])
	*($6 + [48]) = ($6 + [200])
	CALL eosio_assert($10, [8954])
	CALL $23(($6 + [160]), $8, $5, ($6 + [40]))
	$12 = *($6 + [184])
	if ( ($12 == 0) ){ goto $label$30 }
	$11 = ($6 + [188])
	$9 = *($11)
	if ( ((int_32)$9 == (int_32)$12) ){ goto $label$32 }
	
.LOOP $label$33:
	$9 = ($9 + [-24])
	$13 = *($9)
	*($9) = [0]
	if ( ($13 == 0) ){ goto $label$34 }
	CALL _ZdlPv($13)
	
.LABEL $label$34
	if ( ((int_32)$12 != (int_32)$9) ){ goto $label$33 }
	$9 = *(($6 + [184]))
	goto $label$31 
	
.LABEL $label$32
	$9 = $12
	
.LABEL $label$31
	*($11) = $12
	CALL _ZdlPv($9)
	
.LABEL $label$30
	$global$0 = ($6 + [240])
	return (unreachable)
	
.LABEL $label$21
	CALL $54(($6 + [24]))
}

int_32 .FUNC $11 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $61($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [100]) = $2
	*($4 + [96]) = $2
	*($4 + [104]) = ($2 + $7)
	*($4 + [152]) = ($4 + [96])
	*($4 + [32]) = ($4 + [112])
	CALL $19(($4 + [32]), ($4 + [152]))
	$3 = *($4 + [104])
	*((($4 + [16]) + [8])) = $3
	*(($4 + [8])) = $3
	$8 = *($4 + [96])
	*($4) = $8
	*($4 + [16]) = $8
	$3 = CALL $13(($4 + [32]), $0, $1, $4)
	$9 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [144])
	$1 = *($4 + [136])
	$8 = *($4 + [128])
	$10 = *($4 + [120])
	$11 = *($4 + [112])
	if ( ($5 & [1]) ){ goto $label$11 }
	CALL void $9((int_32 $11), (int_64 $10), (int_64 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL void $9((int_32 $11), (int_64 $10), (int_64 $8), (int_64 $1), (int_64 $0), (int_64 *((*($9) + $6))))
	if ( ($7 <= [513]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $64($2)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy(($4 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($2 + [8]) = $4
	CALL $43(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $13 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($0) = $1
	*($0 + [8]) = $2
	$2 = *($3)
	*($0 + [16]) = $2
	$3 = *(($3 + [8]))
	*(($4 + [8])) = $3
	*(($0 + [24])) = $3
	*($4) = $2
	*(($0 + [48])) = [0]
	*($0 + [40 align=4]) = (int_64)0
	*($0 + [32]) = (int_64)10000
	$5 = ($0 + [40])
	$3 = CALL $58([9394])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0 + [40]) = ($6 | [1])
	*(($0 + [48])) = $5
	*(($0 + [44])) = $3
	
.LABEL $label$4
	CALL memcpy($5, [9394], $3)
	
.LABEL $label$3
	*(($5 + $3)) = [0]
	*(($0 + [60])) = [0]
	*($0 + [52 align=4]) = (int_64)0
	$5 = ($0 + [52])
	$3 = CALL $58([9398])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$8 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0 + [52]) = ($6 | [1])
	*(($0 + [60])) = $5
	*(($0 + [56])) = $3
	
.LABEL $label$7
	CALL memcpy($5, [9398], $3)
	
.LABEL $label$6
	*(($5 + $3)) = [0]
	$global$0 = ($4 + [16])
	return $0
	
.LABEL $label$2
	CALL $54($5)
	
.LABEL $label$1
	CALL $54($5)
	(unreachable)
	return (unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8563])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8563])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8563])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8563])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8563])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8563])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8563])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8563])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8507])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8563])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8563])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8563])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8563])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8563])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9242])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9287])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((int_64)*(*(($5 + [-24])) + [8]) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8) + [8]) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9337])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

int_32 .FUNC $31 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [128])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [64]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [16]) = *(*($1 + [4]))
	*($0 + [24]) = *(*($1 + [8]))
	*($0 + [32]) = *(*($1 + [12]))
	*($0 + [40]) = *(*($1 + [16]))
	$4 = *($2)
	*($0 + [8]) = *(*($1 + [20]))
	*($0 + [48]) = (int_64)0
	*($0 + [56]) = (int_64)0
	*($3 + [80]) = ($3 + [64])
	*($3 + [76]) = $3
	*($3 + [72]) = $3
	*($3 + [88]) = ($3 + [72])
	*($3 + [100]) = ($0 + [8])
	*($3 + [96]) = $0
	*($3 + [104]) = ($0 + [16])
	*($3 + [108]) = ($0 + [24])
	*($3 + [112]) = ($0 + [32])
	*($3 + [116]) = ($0 + [40])
	*($3 + [120]) = ($0 + [48])
	*($3 + [124]) = ($0 + [56])
	CALL $36(($3 + [96]), ($3 + [88]))
	$5 = *($0)
	*($0 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)-7954137195043356672, *(*($2 + [8])), $5, $3, [64])
	if ( (uint_64)($5 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [128])
	return $0
}

int_32 .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $56())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $60($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $61 (int_32 $0)
{
	return CALL $62([9432], $0)
}

int_32 .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9424]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9428])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9424]) = [1]
	$2 = ($2 << [16])
	*([0] + [9428]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9428])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9428]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9424]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9424]) = [1]
	$3 = ($3 << [16])
	*([0] + [9428]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9428])
	
.LABEL $label$10
	*([0] + [9428]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17816])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17624]
	$3 = (((int_32)$1 * (int_32)[12]) + [17624])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $59(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9412])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $59(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $55($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $64($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $54 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $55 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $56 ()
{
	return [9416]
}

void .FUNC $57 (int_32 $0)
{
}