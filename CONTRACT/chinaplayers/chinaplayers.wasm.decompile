(data (i32.const 4) "\10g\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "eosio.token\00")
(data (i32.const 128) "transfer\00")
(data (i32.const 144) "read\00")
(data (i32.const 160) "chinaplayers\00")
(data (i32.const 176) "Hello, \00")
(data (i32.const 192) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 256) "cannot pass end iterator to erase\00")
(data (i32.const 304) "cannot increment end iterator\00")
(data (i32.const 336) "object passed to erase is not in multi_index\00")
(data (i32.const 384) "cannot erase objects in table of another contract\00")
(data (i32.const 448) "attempt to remove object that was not in multi_index\00")
(data (i32.const 512) "error reading iterator\00")
(data (i32.const 544) "invalid symbol name\00")
(data (i32.const 576) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 640) "invalid quantity\00")
(data (i32.const 672) "must larger than 0.1 EOS\00")
(data (i32.const 704) "$\00")
(data (i32.const 720) ":\00")
(data (i32.const 736) "Not enough token received.\00")
(data (i32.const 784) "savepoorsvip\00")
(data (i32.const 800) "active\00")
(data (i32.const 816) "withdraw EOS\00")
(data (i32.const 832) "attempt to subtract asset with different symbol\00")
(data (i32.const 880) "subtraction underflow\00")
(data (i32.const 912) "subtraction overflow\00")
(data (i32.const 944) "cannot pass end iterator to modify\00")
(data (i32.const 992) "multiplication overflow or underflow\00")
(data (i32.const 1040) "multiplication underflow\00")
(data (i32.const 1072) "multiplication overflow\00")
(data (i32.const 1104) "only core token allowed\00")
(data (i32.const 1136) "object passed to modify is not in multi_index\00")
(data (i32.const 1184) "cannot modify objects in table of another contract\00")
(data (i32.const 1248) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1312) "write\00")
(data (i32.const 1328) "attempt to add asset with different symbol\00")
(data (i32.const 1376) "addition underflow\00")
(data (i32.const 1408) "addition overflow\00")
(data (i32.const 1440) "cannot create objects in table of another contract\00")
(data (i32.const 1504) "get\00")
(data (i32.const 9904) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$7 (param i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$10 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$11 (param i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "printn" (func $fimport$13 (param i64)))
(import "env" "prints" (func $fimport$14 (param i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$16 (param i64)))
(import "env" "require_auth2" (func $fimport$17 (param i64 i64)))
(import "env" "send_inline" (func $fimport$18 (param i32 i32)))
(import "env" "sha256" (func $fimport$19 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$20 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$21 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $33))
(export "free" (func $36))
(export "llabs" (func $44))
(export "atoi" (func $45))
(export "memcmp" (func $46))
(export "memchr" (func $47))
(export "strlen" (func $48))
(table $0 2 2 anyfunc)
(elem (i32.const 0) $49 $9)



void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1312])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1312])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1312])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1312])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $28(*($1), ($0 + [32]))
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $17($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [1312])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [1312])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $27(CALL $26($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $39 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($6 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $37(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $41($0)
	
.LABEL $label$1
	$6 = ($4 + ((int_32)$2 * (int_32)[12]))
	CALL $42($6, $1)
	$2 = ($4 + ((int_32)$5 * (int_32)[12]))
	$3 = ($6 + [12])
	$5 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$5 = ($4 + [-12])
	
.LOOP $label$7:
	*(($6 + [-12])) = *($5)
	$4 = ($5 + [8])
	*(($6 + [-4])) = *($4)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	$6 = ($6 + [-12])
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	$6 = ([0] - $4)
	$5 = ($5 + [-12])
	
.LOOP $label$9:
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $38(*(($5 + [8])))
	
.LABEL $label$10
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $38($4)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1312])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1312])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [1136])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1184])
	$4 = *($1)
	$5 = *($3)
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*(($1 + [16]))), [1328])
	$6 = ((int_64)*($1 + [8]) + (int_64)*($5))
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1376])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1408])
	*($1 + [44]) = [1]
	*($1 + [40]) = (*($1 + [40]) + [1])
	$5 = *($3 + [4])
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	*($1 + [48]) = *(*($3 + [8]))
	*($1 + [52]) = [1]
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1248])
	*($7 + [72]) = ($7 + [56])
	*($7 + [68]) = $7
	*($7 + [64]) = $7
	CALL $24(($7 + [64]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $7, [56])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [80])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1440])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $37([72])
	CALL $13($3, (int_64)0)
	*($3 + [56]) = $1
	CALL $25(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [60])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $15(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $38($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [16]))), [1328])
	$2 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1376])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1408])
	$3 = [0]
	*($1 + [44]) = [0]
	*($1 + [40]) = (*($1 + [40]) + [1])
	CALL eosio_assert([1], [576])
	$2 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [544])
	*(($1 + [32])) = (int_64)1397703940
	*($1 + [24]) = (int_64)0
	$3 = *($0 + [4])
	*($1 + [52]) = [1]
	*($1 + [48]) = *($3)
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [1136])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1184])
	$4 = *($1)
	CALL $23($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1248])
	*($5 + [72]) = ($5 + [56])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $24(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	*($1) = *(*(*($0 + [4])))
	$2 = *($0)
	CALL eosio_assert([1], [576])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [544])
	*(($1 + [16])) = (int_64)1397703940
	*($1 + [8]) = (int_64)0
	*($1 + [40]) = [0]
	$5 = $7
	$4 = ($5 + [-64])
	*([0] + [4]) = $4
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = ($5 + [-8])
	CALL $24($6, $1)
	$3 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)3607749778735104000, *(*($0 + [8])), $3, $4, [56])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1312])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1312])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1312])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1312])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1312])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1312])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1312])
	CALL memcpy(*($0 + [4]), ($1 + [44]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1312])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1312])
	CALL memcpy(*($0 + [4]), ($1 + [52]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1312])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1312])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1312])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1312])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1312])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $49 ()
{
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $37($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $37($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $41 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $37(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $38($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC atoi (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$3 = *($0)
	$1 = int_32(($3 << [24]) >> [24])
	$2 = ($1 + [-9])
	$4 = ($0 + [1])
	$0 = $4
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$1 }
	$0 = $4
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$1 = [1]
	goto $label$4 
	
.LABEL $label$5
	$1 = [0]
	
.LABEL $label$4
	$3 = *($4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-1])
	$1 = [0]
	
.LABEL $label$2
	$2 = [0]
	$3 = (int_32(($3 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($4 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $3)
	$3 = *($0)
	$0 = ($0 + [1])
	$3 = ($3 + [-48])
	if ( ($3 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $1 )
}

int_64 .FUNC llabs (int_64 $0)
{
	int_64 $1
	$1 = (int_64)$0 >> (int_64)63
	return ((int_64)((int_64)$0 + (int_64)$1)) ^ (int_64)$1)
}

void .FUNC $8 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	$20 = (*([0] + [4]) - [288])
	*([0] + [4]) = $20
	if ( ((int_64)*($1 + [8]) != (int_64)*($0)) ){ goto $label$6 }
	$11 = ($1 + [24])
	if ( ((int_64)*($11) != (int_64)1397703940) ){ goto $label$6 }
	*(($10 = (($20 + [240]) + [8]))) = *($11)
	*($20 + [240]) = *($1 + [16])
	*(($12 = (($20 + [224]) + [8]))) = *($11)
	*($12) = (int_64)1397703940
	*($20 + [224]) = *($1 + [16])
	*($20 + [224]) = (int_64)0
	$13 = *($10)
	CALL eosio_assert(((int_64)$13 == (int_64)1397703940), [1104])
	$10 = [0]
	$17 = *($20 + [240])
	if ( ((uint_64)((int_64)$17 + (int_64)4611686018427387903) >= (uint_64)(int_64)9223372036854775807) ){ goto $label$7 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$10 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$10 = [0]
	
.LABEL $label$7
	CALL eosio_assert($10, [640])
	CALL eosio_assert(((int_64)$17 > (int_64)999), [672])
	*($20 + [216]) = [0]
	*($20 + [208]) = (int_64)0
	*($20 + [200]) = [0]
	*($20 + [192]) = (int_64)0
	*((($20 + [64]) + [8])) = [0]
	*($20 + [64]) = (int_64)0
	$11 = CALL strlen([704])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$5 }
	$12 = ($1 + [32])
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$14 }
	*($20 + [64]) = ($11 << [1])
	$10 = (($20 + [64]) | [1])
	if ( $11 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$3 = (($11 + [16]) & [-16])
	$10 = CALL $37($3)
	*($20 + [64]) = ($3 | [1])
	*($20 + [72]) = $10
	*($20 + [68]) = $11
	
.LABEL $label$13
	CALL memcpy($10, [704], $11)
	
.LABEL $label$12
	*(($10 + $11)) = [0]
	CALL $16($0, $12, ($20 + [64]), ($20 + [208]))
	if ( ((*($20 + [64]) & [1]) == 0) ){ goto $label$15 }
	CALL $38(*($20 + [72]))
	
.LABEL $label$15
	$12 = *($20 + [208])
	*(($20 + [72])) = [0]
	*($20 + [64]) = (int_64)0
	$11 = CALL strlen([720])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$18 }
	*($20 + [64]) = ($11 << [1])
	$10 = (($20 + [64]) | [1])
	if ( $11 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$3 = (($11 + [16]) & [-16])
	$10 = CALL $37($3)
	*($20 + [64]) = ($3 | [1])
	*($20 + [72]) = $10
	*($20 + [68]) = $11
	
.LABEL $label$17
	CALL memcpy($10, [720], $11)
	
.LABEL $label$16
	*(($10 + $11)) = [0]
	CALL $16($0, $12, ($20 + [64]), ($20 + [192]))
	if ( ((*($20 + [64]) & [1]) == 0) ){ goto $label$19 }
	CALL $38(*($20 + [72]))
	
.LABEL $label$19
	*($20 + [156]) = ((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$20())
	CALL sha256(($20 + [156]), [4], ($20 + [160]))
	*($20 + [152]) = ((int_64)((int_64)CALL llabs(*($20 + [161])) % (int_64)6) + (int_64)1)
	$11 = *($20 + [208])
	if ( (*($11 + [12]) & [1]) ){ goto $label$21 }
	$11 = (($11 + [12]) + [1])
	goto $label$20 
	
.LABEL $label$21
	$11 = *(($11 + [20]))
	
.LABEL $label$20
	$3 = ((int_32)CALL atoi($11) * (int_32)[10000])
	$13 = (int_64)0
	$10 = [1]
	$11 = [0]
	
.LOOP $label$22:
	$12 = (*($20 + [192]) + $11)
	if ( (*($12) & [1]) ){ goto $label$24 }
	$12 = ($12 + [1])
	goto $label$23 
	
.LABEL $label$24
	$12 = *(($12 + [8]))
	
.LABEL $label$23
	CALL atoi($12)
	if ( ((int_32)$10 > (int_32)[6]) ){ goto $label$26 }
	$12 = ( [50] ? [0] : ((int_32)$10 == (int_32)*($20 + [152])) )
	goto $label$25 
	
.LABEL $label$26
	$9 = (($10 + [-1]) & [-2])
	if ( ((int_32)$9 == (int_32)[8]) ){ goto $label$27 }
	$12 = [0]
	if ( ((int_32)$9 != (int_32)[6]) ){ goto $label$25 }
	$12 = ((int_32)*($20 + [152]) % (int_32)[2])
	$9 = ( ( [0] ? [18] : $12 ) ? [0] : ((int_32)$11 == (int_32)[84]) )
	$12 = ( ( [18] ? $9 : ((int_32)$12 == (int_32)[1]) ) ? $9 : ((int_32)$11 == (int_32)[72]) )
	goto $label$25 
	
.LABEL $label$27
	$12 = *($20 + [152])
	$9 = ( ( [18] ? [0] : ((int_32)$12 < (int_32)[4]) ) ? [0] : ((int_32)$11 == (int_32)[108]) )
	$12 = ( ( [18] ? $9 : ((int_32)$12 > (int_32)[3]) ) ? $9 : ((int_32)$11 == (int_32)[96]) )
	
.LABEL $label$25
	$9 = (*($20 + [192]) + $11)
	if ( (*($9) & [1]) ){ goto $label$29 }
	$9 = ($9 + [1])
	goto $label$28 
	
.LABEL $label$29
	$9 = *(($9 + [8]))
	
.LABEL $label$28
	*($20 + [224]) = ((int_64)(CASTING int_64)(int_32 ((int_32)((int_32)((int_32)$3 * (int_32)$12) * (int_32)CALL atoi($9)) / (int_32)[1000])) + (int_64)*($20 + [224]))
	$12 = (*($20 + [192]) + $11)
	if ( (*($12) & [1]) ){ goto $label$31 }
	$12 = ($12 + [1])
	goto $label$30 
	
.LABEL $label$31
	$12 = *(($12 + [8]))
	
.LABEL $label$30
	$10 = ($10 + [1])
	$13 = ((int_64)(CASTING int_64)(int_32 ((int_32)((int_32)$3 * (int_32)CALL atoi($12)) / (int_32)[100])) + (int_64)$13)
	$11 = ($11 + [12])
	if ( ((int_32)$11 != (int_32)[120]) ){ goto $label$22 }
	CALL eosio_assert(((uint_64)$13 <= (uint_64)*($20 + [240])), [736])
	$12 = *($20 + [208])
	*(($20 + [72])) = [0]
	*($20 + [64]) = (int_64)0
	$11 = CALL strlen([768])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$34 }
	*($20 + [64]) = ($11 << [1])
	$10 = (($20 + [64]) | [1])
	if ( $11 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$3 = (($11 + [16]) & [-16])
	$10 = CALL $37($3)
	*($20 + [64]) = ($3 | [1])
	*($20 + [72]) = $10
	*($20 + [68]) = $11
	
.LABEL $label$33
	CALL memcpy($10, [768], $11)
	
.LABEL $label$32
	*(($10 + $11)) = [0]
	$11 = ($3 & [1])
	$3 = *($20 + [64])
	$9 = ($11 & [1])
	$11 = *(($12 + [24]))
	$4 = uint_32($11 >> [1])
	$5 = ( *(($12 + [28])) ? $4 : $9 )
	if ( ((int_32)$5 != (int_32)( *($20 + [68]) ? uint_32($3 >> [1]) : $11 )) ){ goto $label$38 }
	$11 = ( *($20 + [72]) ? (($20 + [64]) | [1]) : $11 )
	$10 = (($12 + [24]) + [1])
	if ( $9 ){ goto $label$39 }
	if ( ($5 == 0) ){ goto $label$36 }
	$12 = ([0] - $4)
	
.LOOP $label$40:
	if ( ((int_32)*($10) != (int_32)*($11)) ){ goto $label$38 }
	$11 = ($11 + [1])
	$10 = ($10 + [1])
	$12 = ($12 + [1])
	if ( $12 ){ goto $label$40 }
	goto $label$36 
	
.LABEL $label$39
	if ( ($5 == 0) ){ goto $label$36 }
	if ( (CALL memcmp(( *(($12 + [32])) ? $10 : $9 ), $11, $5) == 0) ){ goto $label$37 }
	
.LABEL $label$38
	$11 = *($20 + [208])
	$10 = *($11 + [24])
	if ( ($10 & [1]) ){ goto $label$42 }
	$10 = uint_32($10 >> [1])
	goto $label$41 
	
.LABEL $label$42
	$10 = *(($11 + [28]))
	
.LABEL $label$41
	if ( ((*($20 + [64]) & [1]) == 0) ){ goto $label$43 }
	CALL $38(*($20 + [72]))
	
.LABEL $label$43
	$11 = [784]
	if ( ((int_32)$10 != (int_32)[12]) ){ goto $label$35 }
	$11 = *($20 + [208])
	if ( (*($11 + [24]) & [1]) ){ goto $label$44 }
	$11 = (($11 + [24]) + [1])
	goto $label$35 
	
.LABEL $label$44
	$11 = *(($11 + [32]))
	goto $label$35 
	
.LABEL $label$37
	$3 = *($20 + [64])
	
.LABEL $label$36
	if ( (($3 & [1]) == 0) ){ goto $label$45 }
	CALL $38(*(($20 + [72])))
	
.LABEL $label$45
	$11 = [784]
	
.LABEL $label$35
	$10 = [-1]
	
.LOOP $label$46:
	$12 = ($11 + $10)
	$3 = ($10 + [1])
	$10 = $3
	if ( *(($12 + [1])) ){ goto $label$46 }
	$16 = (CASTING uint_64)(uint_32 $3)
	$13 = (int_64)0
	$17 = (int_64)59
	$14 = (int_64)0
	
.LOOP $label$47:
	$15 = (int_64)0
	if ( ((uint_64)$13 >= (uint_64)$16) ){ goto $label$48 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$50 }
	$10 = ($10 + [165])
	goto $label$49 
	
.LABEL $label$50
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$49
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$48
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$52 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	goto $label$51 
	
.LABEL $label$52
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$51
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$47 }
	$8 = ((int_64)*($20 + [240]) / (int_64)100)
	$6 = *(($20 + [248]))
	$7 = *($0)
	$13 = (int_64)0
	$15 = (int_64)59
	$11 = [800]
	$16 = (int_64)0
	
.LOOP $label$53:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$58 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$10 = ($10 + [165])
	goto $label$56 
	
.LABEL $label$58
	$17 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$57
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$55
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$54
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$53 }
	$13 = (int_64)0
	$15 = (int_64)59
	$11 = [112]
	$18 = (int_64)0
	
.LOOP $label$59:
	if ( ((uint_64)$13 > (uint_64)(int_64)10) ){ goto $label$64 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$63 }
	$10 = ($10 + [165])
	goto $label$62 
	
.LABEL $label$64
	$17 = (int_64)0
	if ( ((int_64)$13 == (int_64)11) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$63
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$62
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$61
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$60
	$11 = ($11 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$18 = ((int_64)$17 | (int_64)$18)
	$13 = ((int_64)$13 + (int_64)1)
	if ( ((int_64)$13 != (int_64)13) ){ goto $label$59 }
	$13 = (int_64)0
	$15 = (int_64)59
	$11 = [128]
	$19 = (int_64)0
	
.LOOP $label$65:
	if ( ((uint_64)$13 > (uint_64)(int_64)7) ){ goto $label$70 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$69 }
	$10 = ($10 + [165])
	goto $label$68 
	
.LABEL $label$70
	$17 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$69
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$68
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$67
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$66
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$19 = ((int_64)$17 | (int_64)$19)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$65 }
	*(($20 + [264])) = [0]
	*($20 + [256]) = (int_64)0
	$11 = CALL strlen([816])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$73 }
	*($20 + [256]) = ($11 << [1])
	$10 = (($20 + [256]) | [1])
	if ( $11 ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$73
	$12 = (($11 + [16]) & [-16])
	$10 = CALL $37($12)
	*($20 + [256]) = ($12 | [1])
	*($20 + [264]) = $10
	*($20 + [260]) = $11
	
.LABEL $label$72
	CALL memcpy($10, [816], $11)
	
.LABEL $label$71
	*(($10 + $11)) = [0]
	*((($20 + [64]) + [24])) = $6
	*(($10 = (($20 + [64]) + [36]))) = *($20 + [260])
	*($20 + [72]) = $14
	$11 = ($20 + [264])
	*(($20 + [104])) = *($11)
	*($20 + [64]) = *($0)
	*($20 + [80]) = $8
	*($20 + [96]) = *($20 + [256])
	*($20 + [256]) = [0]
	*($20 + [260]) = [0]
	*($11) = [0]
	*($20 + [112]) = $18
	*($20 + [120]) = $19
	*($20 + [128]) = [0]
	*(($12 = ($20 + [132]))) = [0]
	*(($3 = (($20 + [112]) + [24]))) = [0]
	*(($11 = CALL $37([16]))) = $7
	*($11 + [8]) = $16
	*((($20 + [112]) + [32])) = [0]
	$9 = ($11 + [16])
	*($3) = $9
	*($12) = $9
	*($20 + [128]) = $11
	*($20 + [140]) = [0]
	*((($20 + [112]) + [36])) = [0]
	$11 = *($20 + [96])
	$10 = ( *($10) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$11 = ($10 + [32])
	$13 = (CASTING uint_64)(uint_32 $10)
	$10 = ($20 + [140])
	
.LOOP $label$74:
	$11 = ($11 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$74 }
	if ( ($11 == 0) ){ goto $label$76 }
	CALL $17($10, $11)
	$10 = *(($20 + [144]))
	$11 = *(($20 + [140]))
	goto $label$75 
	
.LABEL $label$76
	$10 = [0]
	$11 = [0]
	
.LABEL $label$75
	*($20 + [28]) = $11
	*($20 + [24]) = $11
	*($20 + [32]) = $10
	*($20 + [280]) = ($20 + [24])
	*($20 + [8]) = ($20 + [64])
	CALL $18(($20 + [8]), ($20 + [280]))
	CALL $19(($20 + [24]), ($20 + [112]))
	$11 = *($20 + [24])
	CALL send_inline($11, (*($20 + [28]) - $11))
	$11 = *($20 + [24])
	if ( ($11 == 0) ){ goto $label$77 }
	*($20 + [28]) = $11
	CALL $38($11)
	
.LABEL $label$77
	$11 = *($20 + [140])
	if ( ($11 == 0) ){ goto $label$78 }
	*(($20 + [144])) = $11
	CALL $38($11)
	
.LABEL $label$78
	$11 = *($20 + [128])
	if ( ($11 == 0) ){ goto $label$79 }
	*(($20 + [132])) = $11
	CALL $38($11)
	
.LABEL $label$79
	if ( ((*(($20 + [96])) & [1]) == 0) ){ goto $label$80 }
	CALL $38(*(($20 + [104])))
	
.LABEL $label$80
	if ( ((*($20 + [256]) & [1]) == 0) ){ goto $label$81 }
	CALL $38(*(($20 + [264])))
	
.LABEL $label$81
	CALL eosio_assert(((int_64)$6 == (int_64)*(($20 + [248]))), [832])
	$13 = (int_64)
	*($20 + [240]) = $13(*($20 + [240]) - $8))
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [880])
	CALL eosio_assert(((int_64)*($20 + [240]) < (int_64)4611686018427387904), [912])
	*($20 + [128]) = (int_64)-1
	*($20 + [136]) = [0]
	$17 = *($0)
	*($20 + [112]) = $17
	$13 = *($1)
	*($20 + [120]) = $13
	*(($20 + [140])) = [0]
	*(($20 + [144])) = [0]
	$11 = CALL db_find_i64($17, $13, (int_64)3607749778735104000, $13)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$83 }
	$11 = CALL $11(($20 + [112]), $11)
	CALL eosio_assert(((int_32)*($11 + [56]) == (int_32)($20 + [112])), [192])
	goto $label$82 
	
.LABEL $label$83
	$13 = *($0)
	*($20 + [24]) = $1
	CALL $20(($20 + [64]), ($20 + [112]), $13, ($20 + [24]))
	$11 = *($20 + [68])
	
.LABEL $label$82
	if ( ((int_64)*($20 + [224]) < (int_64)1) ){ goto $label$89 }
	*($20 + [68]) = ($20 + [224])
	*($20 + [64]) = ($20 + [240])
	*($20 + [72]) = ($20 + [152])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [944])
	$13 = (int_64)0
	CALL $21(($20 + [112]), $11, (int_64)0, ($20 + [64]))
	$17 = (int_64)59
	$11 = [784]
	$16 = (int_64)0
	
.LOOP $label$90:
	$15 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$91 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$93 }
	$10 = ($10 + [165])
	goto $label$92 
	
.LABEL $label$93
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$92
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($10 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$91
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$90 }
	if ( ((int_64)$14 == (int_64)$16) ){ goto $label$94 }
	$11 = ($20 + [232])
	$17 = *($11)
	$13 = *($20 + [224])
	CALL eosio_assert([1], [992])
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [1040])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [1072])
	*($11) = $17
	*($20 + [224]) = ((int_64)((int_64)$13 * (int_64)201) / (int_64)200)
	
.LABEL $label$94
	$19 = *($0)
	$13 = (int_64)0
	$15 = (int_64)59
	$11 = [800]
	$14 = (int_64)0
	
.LOOP $label$95:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$100 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$99 }
	$10 = ($10 + [165])
	goto $label$98 
	
.LABEL $label$100
	$17 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$97 }
	goto $label$96 
	
.LABEL $label$99
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$98
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$97
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$96
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$17 | (int_64)$14)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$95 }
	$13 = (int_64)0
	$15 = (int_64)59
	$11 = [112]
	$16 = (int_64)0
	
.LOOP $label$101:
	if ( ((uint_64)$13 > (uint_64)(int_64)10) ){ goto $label$106 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$105 }
	$10 = ($10 + [165])
	goto $label$104 
	
.LABEL $label$106
	$17 = (int_64)0
	if ( ((int_64)$13 == (int_64)11) ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$105
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$104
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$103
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$102
	$11 = ($11 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$16 = ((int_64)$17 | (int_64)$16)
	$13 = ((int_64)$13 + (int_64)1)
	if ( ((int_64)$13 != (int_64)13) ){ goto $label$101 }
	$13 = (int_64)0
	$15 = (int_64)59
	$11 = [128]
	$18 = (int_64)0
	
.LOOP $label$107:
	if ( ((uint_64)$13 > (uint_64)(int_64)7) ){ goto $label$112 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$111 }
	$10 = ($10 + [165])
	goto $label$110 
	
.LABEL $label$112
	$17 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$109 }
	goto $label$108 
	
.LABEL $label$111
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$110
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$109
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$108
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$18 = ((int_64)$17 | (int_64)$18)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$107 }
	*(($20 + [16])) = [0]
	*($20 + [8]) = (int_64)0
	$11 = CALL strlen([816])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$88 }
	*($20 + [8]) = ($11 << [1])
	$10 = (($20 + [8]) | [1])
	if ( $11 ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$89
	*($20 + [68]) = ($20 + [152])
	*($20 + [64]) = ($20 + [240])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [944])
	CALL $22(($20 + [112]), $11, (int_64)0, ($20 + [64]))
	$12 = *($20 + [136])
	if ( $12 ){ goto $label$85 }
	goto $label$84 
	
.LABEL $label$88
	$12 = (($11 + [16]) & [-16])
	$10 = CALL $37($12)
	*($20 + [8]) = ($12 | [1])
	*($20 + [16]) = $10
	*($20 + [12]) = $11
	
.LABEL $label$87
	CALL memcpy($10, [816], $11)
	
.LABEL $label$86
	*(($10 + $11)) = [0]
	*((($20 + [64]) + [20])) = *($20 + [228])
	*($20 + [72]) = *($1)
	*((($20 + [64]) + [28])) = *(($20 + [236]))
	*((($20 + [64]) + [24])) = *((($20 + [224]) + [8]))
	*($20 + [64]) = *($0)
	*($20 + [80]) = *($20 + [224])
	$11 = (($20 + [8]) + [8])
	*(($20 + [104])) = *($11)
	*($20 + [96]) = *($20 + [8])
	*($20 + [8]) = [0]
	*($20 + [12]) = [0]
	*($11) = [0]
	*($20 + [24]) = $16
	*($20 + [32]) = $18
	*($20 + [40]) = [0]
	*(($10 = (($20 + [24]) + [20]))) = [0]
	*(($12 = (($20 + [24]) + [24]))) = [0]
	*(($11 = CALL $37([16]))) = $19
	*($11 + [8]) = $14
	*((($20 + [24]) + [32])) = [0]
	$3 = ($11 + [16])
	*($12) = $3
	*($10) = $3
	*($20 + [40]) = $11
	*($20 + [52]) = [0]
	*((($20 + [24]) + [36])) = [0]
	$11 = *($20 + [96])
	$10 = ( *((($20 + [64]) + [36])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$11 = ($10 + [32])
	$13 = (CASTING uint_64)(uint_32 $10)
	$10 = (($20 + [24]) + [28])
	
.LOOP $label$113:
	$11 = ($11 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$113 }
	if ( ($11 == 0) ){ goto $label$115 }
	CALL $17($10, $11)
	$10 = *(($20 + [56]))
	$11 = *(($20 + [52]))
	goto $label$114 
	
.LABEL $label$115
	$10 = [0]
	$11 = [0]
	
.LABEL $label$114
	*($20 + [260]) = $11
	*($20 + [256]) = $11
	*($20 + [264]) = $10
	*($20 + [272]) = ($20 + [256])
	*($20 + [280]) = ($20 + [64])
	CALL $18(($20 + [280]), ($20 + [272]))
	CALL $19(($20 + [256]), ($20 + [24]))
	$11 = *($20 + [256])
	CALL send_inline($11, (*($20 + [260]) - $11))
	$11 = *($20 + [256])
	if ( ($11 == 0) ){ goto $label$116 }
	*($20 + [260]) = $11
	CALL $38($11)
	
.LABEL $label$116
	$11 = *($20 + [52])
	if ( ($11 == 0) ){ goto $label$117 }
	*(($20 + [56])) = $11
	CALL $38($11)
	
.LABEL $label$117
	$11 = *($20 + [40])
	if ( ($11 == 0) ){ goto $label$118 }
	*(($20 + [44])) = $11
	CALL $38($11)
	
.LABEL $label$118
	if ( ((*(($20 + [96])) & [1]) == 0) ){ goto $label$119 }
	CALL $38(*(($20 + [104])))
	
.LABEL $label$119
	if ( ((*($20 + [8]) & [1]) == 0) ){ goto $label$120 }
	CALL $38(*(($20 + [16])))
	
.LABEL $label$120
	$12 = *($20 + [136])
	if ( ($12 == 0) ){ goto $label$84 }
	
.LABEL $label$85
	$3 = ($20 + [140])
	$11 = *($3)
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$122 }
	
.LOOP $label$123:
	$11 = ($11 + [-24])
	$10 = *($11)
	*($11) = [0]
	if ( ($10 == 0) ){ goto $label$124 }
	CALL $38($10)
	
.LABEL $label$124
	if ( ((int_32)$12 != (int_32)$11) ){ goto $label$123 }
	$11 = *(($20 + [136]))
	goto $label$121 
	
.LABEL $label$122
	$11 = $12
	
.LABEL $label$121
	*($3) = $12
	CALL $38($11)
	
.LABEL $label$84
	$12 = *($20 + [192])
	if ( ($12 == 0) ){ goto $label$125 }
	$11 = *($20 + [196])
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$127 }
	$10 = ([0] - $12)
	$11 = ($11 + [-12])
	
.LOOP $label$128:
	if ( ((*($11) & [1]) == 0) ){ goto $label$129 }
	CALL $38(*(($11 + [8])))
	
.LABEL $label$129
	$11 = ($11 + [-12])
	if ( ((int_32)($11 + $10) != (int_32)[-12]) ){ goto $label$128 }
	$11 = *($20 + [192])
	goto $label$126 
	
.LABEL $label$127
	$11 = $12
	
.LABEL $label$126
	*($20 + [196]) = $12
	CALL $38($11)
	
.LABEL $label$125
	$12 = *($20 + [208])
	if ( ($12 == 0) ){ goto $label$6 }
	$11 = *($20 + [212])
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$131 }
	$10 = ([0] - $12)
	$11 = ($11 + [-12])
	
.LOOP $label$132:
	if ( ((*($11) & [1]) == 0) ){ goto $label$133 }
	CALL $38(*(($11 + [8])))
	
.LABEL $label$133
	$11 = ($11 + [-12])
	if ( ((int_32)($11 + $10) != (int_32)[-12]) ){ goto $label$132 }
	$11 = *($20 + [208])
	goto $label$130 
	
.LABEL $label$131
	$11 = $12
	
.LABEL $label$130
	*($20 + [212]) = $12
	CALL $38($11)
	
.LABEL $label$6
	*([0] + [4]) = ($20 + [288])
	return (unreachable)
	
.LABEL $label$5
	CALL $39(($20 + [64]))
	
.LABEL $label$4
	CALL $39(($20 + [64]))
	
.LABEL $label$3
	CALL $39(($20 + [64]))
	
.LABEL $label$2
	CALL $39(($20 + [256]))
	
.LABEL $label$1
	CALL $39(($20 + [8]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [160]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	CALL prints([176])
	CALL printn($1)
	*(($9 + [32])) = [0]
	*($9 + [8]) = $1
	*($9 + [16]) = (int_64)-1
	*($9 + [24]) = (int_64)0
	$6 = *($0)
	*($9) = $6
	$4 = CALL db_find_i64($6, $1, (int_64)3607749778735104000, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $11($9, $4)
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$9), [192])
	CALL eosio_assert([1], [256])
	CALL eosio_assert([1], [304])
	$2 = CALL db_next_i64(*($4 + [60]), ($9 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	CALL $11($9, $2)
	
.LABEL $label$6
	CALL $12($9, $4)
	
.LABEL $label$5
	$0 = *($9 + [24])
	if ( ($0 == 0) ){ goto $label$7 }
	$3 = ($9 + [28])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $38($2)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($9 + [24]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $0
	
.LABEL $label$8
	*($3) = $0
	CALL $38($4)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $7(($9 + [16]))
	CALL $8($0, ($9 + [16]), $1)
	if ( ((*($9 + [48]) & [1]) == 0) ){ goto $label$7 }
	CALL $38(*(($9 + [56])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)$2 != (int_64)4923678490122780672) ){ goto $label$7 }
	*($9 + [12]) = [0]
	*($9 + [8]) = [1]
	*($9) = *($9 + [8])
	CALL $10($0, $9)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [64])
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [576])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [544])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $30($6, $0)
	*([0] + [4]) = ($6 + [16])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$14 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$20 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$3 = ($3 + [165])
	goto $label$18 
	
.LABEL $label$20
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$16
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$15 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$14 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$26 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$3 = ($3 + [165])
	goto $label$24 
	
.LABEL $label$26
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$22
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$21 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$14 }
	*([0] + [4]) = ($9 + [48])
	return (unreachable)
	
.LABEL $label$14
	*(($9 + [16])) = $0
	*(($9 + [24])) = (int_64)-1
	*(($9 + [32])) = (int_64)0
	*(($9 + [40])) = [0]
	*($9 + [8]) = $0
	*($9) = $0
	CALL $6($9, $1, $2)
	CALL eosio_exit([0])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [144])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [144])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [144])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [144])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [144])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [144])
	CALL memcpy(($1 + [44]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [144])
	CALL memcpy(($1 + [48]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [144])
	CALL memcpy(($1 + [52]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $37(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $41($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $38($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $38($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [48])
	*([0] + [4]) = $17
	CALL $42(($17 + [32]), $1)
	*($17 + [24]) = [0]
	*($17 + [16]) = (int_64)0
	$5 = ($2 + [1])
	$4 = (($17 + [32]) | [1])
	$12 = ($2 + [4])
	$11 = [0]
	
.LOOP $label$3:
	$16 = ($1 & [1])
	$1 = *($17 + [32])
	$1 = ( *($17 + [36]) ? uint_32($1 >> [1]) : $16 )
	if ( ((uint_32)$1 <= (uint_32)$11) ){ goto $label$2 }
	$10 = ($10 & [1])
	$10 = *($2)
	$8 = ( *($12) ? uint_32($10 >> [1]) : $10 )
	if ( ($8 == 0) ){ goto $label$2 }
	$13 = ($2 + [8])
	$14 = (($17 + [32]) + [8])
	$6 = ( *($14) ? $4 : $16 )
	$9 = ($6 + $1)
	$15 = ($6 + $11)
	if ( ((int_32)$1 == (int_32)$11) ){ goto $label$4 }
	$7 = ( *($13) ? $5 : $10 )
	
.LOOP $label$5:
	$10 = *($15)
	$16 = $8
	$1 = $7
	
.LOOP $label$6:
	if ( ((int_32)($10 & [255]) == (int_32)*($1)) ){ goto $label$4 }
	$1 = ($1 + [1])
	$16 = ($16 + [-1])
	if ( $16 ){ goto $label$6 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 != (int_32)$9) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$15 == (int_32)$9) ){ goto $label$2 }
	$1 = ($15 - $6)
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	CALL $43($17, ($17 + [32]), $11, ($1 - $11), ($17 + [32]))
	if ( (*($17 + [16]) & [1]) ){ goto $label$8 }
	*($17 + [16]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($17 + [16]) + [8]))) = [0]
	*($17 + [20]) = [0]
	
.LABEL $label$7
	CALL $40(($17 + [16]), [0])
	*((($17 + [16]) + [8])) = *(($17 + [8]))
	*($17 + [16]) = *($17)
	$16 = ($3 + [4])
	$10 = *($16)
	if ( ((int_32)$10 == (int_32)*(($3 + [8]))) ){ goto $label$10 }
	CALL $42($10, ($17 + [16]))
	*($16) = (*($16) + [12])
	goto $label$9 
	
.LABEL $label$10
	CALL $29($3, ($17 + [16]))
	
.LABEL $label$9
	$16 = ($16 & [1])
	$16 = *($17 + [32])
	$8 = ( *($17 + [36]) ? uint_32($16 >> [1]) : $16 )
	if ( ((uint_32)$8 <= (uint_32)$1) ){ goto $label$1 }
	$9 = ( *($14) ? $4 : $16 )
	$1 = ($9 + $1)
	$16 = ($16 & [1])
	$16 = *($2)
	$10 = ( *($12) ? uint_32($16 >> [1]) : $16 )
	if ( ($10 == 0) ){ goto $label$11 }
	$11 = ( *($13) ? $5 : $16 )
	$16 = (($8 + $6) - $15)
	
.LOOP $label$12:
	if ( (CALL memchr($11, *($1), $10) == 0) ){ goto $label$11 }
	$1 = ($1 + [1])
	$16 = ($16 + [-1])
	if ( $16 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$11
	$11 = ($1 - $9)
	if ( ((int_32)$11 != (int_32)[-1]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	CALL $43($17, ($17 + [32]), $11, [-1], ($17 + [32]))
	if ( (*($17 + [16]) & [1]) ){ goto $label$14 }
	*($17 + [16]) = [0]
	goto $label$13 
	
.LABEL $label$14
	*(*(($17 + [24]))) = [0]
	*($17 + [20]) = [0]
	
.LABEL $label$13
	CALL $40(($17 + [16]), [0])
	*((($17 + [16]) + [8])) = *(($17 + [8]))
	*($17 + [16]) = *($17)
	$1 = ($3 + [4])
	$16 = *($1)
	if ( ((int_32)$16 == (int_32)*(($3 + [8]))) ){ goto $label$15 }
	CALL $42($16, ($17 + [16]))
	*($1) = (*($1) + [12])
	goto $label$1 
	
.LABEL $label$15
	CALL $29($3, ($17 + [16]))
	
.LABEL $label$1
	if ( ((*($17 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL $38(*(($17 + [24])))
	
.LABEL $label$16
	if ( ((*($17 + [32]) & [1]) == 0) ){ goto $label$17 }
	CALL $38(*(($17 + [40])))
	
.LABEL $label$17
	*([0] + [4]) = ($17 + [48])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $37($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $41($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $38($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [144])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [512])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $37([72])
	$4 = CALL $13($6, (int_64)0)
	*($6 + [56]) = $0
	CALL $14(($8 + [32]), $4)
	*($6 + [60]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [60])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $15(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $38($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [384])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [448])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $38($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $38($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
}

int_32 .FUNC $13 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*($0) = $1
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [544])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [576])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [544])
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9892])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9700]
	$1 = (((int_32)$2 * (int_32)[12]) + [9700])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $37 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9996])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $35($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9904])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $35 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9990]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9992])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9990]) = [1]
	$7 = ($7 << [16])
	*([0] + [9992]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9992])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9992]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9990]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9990]) = [1]
	$3 = ($3 << [16])
	*([0] + [9992]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9992])
	
.LABEL $label$8
	*([0] + [9992]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1504])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $17($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [144])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $34([1508], $0)
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $31($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [144])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [144])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [144])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $32($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $40($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $37($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $40($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $38($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $39($7)
	return (unreachable)
}

void .FUNC $38 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}