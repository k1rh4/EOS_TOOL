(data (i32.const 4) "\f0h\00\00")
(data (i32.const 16) "eosio.token\00")
(data (i32.const 32) "transfer\00")
(data (i32.const 48) "eosblingebgx\00")
(data (i32.const 64) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 128) "invalid symbol name\00")
(data (i32.const 160) "read\00")
(data (i32.const 176) "get\00")
(data (i32.const 192) "the params SHOULD NOT be empty\00")
(data (i32.const 224) "the contract is stopped\00")
(data (i32.const 256) "the offer count can not be zero\00")
(data (i32.const 288) "the offer amount can not be divided\00")
(data (i32.const 336) "the star of the offer is too big\00")
(data (i32.const 384) "the eos offer is too small\00")
(data (i32.const 416) "the eos offer is too big\00")
(data (i32.const 448) "the offer is too small\00")
(data (i32.const 480) "the offer is too big\00")
(data (i32.const 512) "the offer symbol is not allowed\00")
(data (i32.const 544) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 608) "the game is not active\00")
(data (i32.const 640) "cannot pass end iterator to modify\00")
(data (i32.const 688) "cannot create objects in table of another contract\00")
(data (i32.const 752) "write\00")
(data (i32.const 768) "object passed to modify is not in multi_index\00")
(data (i32.const 816) "cannot modify objects in table of another contract\00")
(data (i32.const 880) "updater cannot change primary key when modifying an object\00")
(data (i32.const 944) "attempt to add asset with different symbol\00")
(data (i32.const 992) "addition underflow\00")
(data (i32.const 1024) "addition overflow\00")
(data (i32.const 1056) "divide by zero\00")
(data (i32.const 1072) "signed division overflow\00")
(data (i32.const 1104) "multiplication overflow\00")
(data (i32.const 1136) "multiplication underflow\00")
(data (i32.const 1168) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1232) "the amount is not enough for the offer\00")
(data (i32.const 1280) "unable to find key\00")
(data (i32.const 1312) "error reading iterator\00")
(data (i32.const 1344) "\e6\9c\80\e9\ab\98\e5\8f\aa\e8\83\bd\e6\8a\95\e6\b3\a85\e4\bd\8d\e6\95\b0\e5\ad\97\00")
(data (i32.const 1376) "\e9\87\8d\e5\a4\8d\e6\95\b0\e5\ad\97\e6\8a\95\e6\b3\a8\00")
(data (i32.const 1408) "\e6\8b\ac\e5\8f\b7\e5\86\85\e6\b2\a1\e6\9c\89\e5\8c\85\e5\90\ab\e6\95\b0\e5\ad\97\00")
(data (i32.const 1440) "\e6\b2\a1\e6\9c\89\e5\8f\b3\e6\8b\ac\e5\8f\b7\00")
(data (i32.const 1456) "\e4\b8\8d\e5\90\88\e6\b3\95\e7\9a\84\e6\8a\95\e6\b3\a8\e6\a0\bc\e5\bc\8f\00")
(data (i32.const 1488) "\e5\8c\85\e5\90\ab\e4\b8\8d\e5\90\88\e6\b3\95\e7\9a\84\e5\ad\97\e7\ac\a6\00")
(data (i32.const 1520) "cannot pass end iterator to erase\00")
(data (i32.const 1568) "cannot increment end iterator\00")
(data (i32.const 1600) "object passed to erase is not in multi_index\00")
(data (i32.const 1648) "cannot erase objects in table of another contract\00")
(data (i32.const 1712) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1776) "invalid status\00")
(data (i32.const 1792) "invalid quantity\00")
(data (i32.const 1824) "must offer positive quantity\00")
(data (i32.const 1856) "the user name could NOT be the same with the owner\00")
(data (i32.const 1920) "active\00")
(data (i32.const 1952) "the game should not be open\00")
(data (i32.const 10384) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__udivti3" (func $fimport$1 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$2))
(import "env" "action_data_size" (func $fimport$3 (result i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "current_time" (func $fimport$5 (result i64)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$8 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$9 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$11 (param i32)))
(import "env" "db_idx64_store" (func $fimport$12 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$13 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "db_store_i64" (func $fimport$17 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$18 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$19 (param i32 i32)))
(import "env" "memcpy" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$24 (param i64)))
(import "env" "require_auth2" (func $fimport$25 (param i64 i64)))
(import "env" "send_inline" (func $fimport$26 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $86))
(export "free" (func $89))
(export "memchr" (func $101))
(export "memcmp" (func $102))
(export "strlen" (func $103))
(table $0 11 11 anyfunc)
(elem (i32.const 0) $104 $15 $22 $16 $12 $6 $14 $20 $11 $18 $9)



void .FUNC $98 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $90($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $90($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $91($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $90(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $91($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $94($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $97 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $90 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10476])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $91 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $92 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $94($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $38 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [24]) = (int_64)0
	*($0) = (int_64)0
	*(($2 = ($0 + [32]))) = (int_64)1397703940
	CALL eosio_assert([1], [64])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [128])
	*(($0 + [48])) = [0]
	*($0 + [40 align=4]) = (int_64)0
	*($0 + [56]) = (int_64)0
	*(($2 = ($0 + [64]))) = (int_64)1397703940
	CALL eosio_assert([1], [64])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [128])
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $90(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $91($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $91($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [64])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [128])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [12]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [752])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [752])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $42($0, ($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [52]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $90(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL $91(*(($1 + [48])))
	
.LABEL $label$11
	CALL $91($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $91($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1312])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $90([32])
	$6 = CALL $48($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $49(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $91($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $46 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [544])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $47($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [544])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [12]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	$6 = *($0)
	$9 = *($6 + [8])
	if ( ((int_64)$9 != (int_64)1397703940) ){ goto $label$9 }
	$2 = *($0 + [12])
	CALL eosio_assert(((int_64)$9 == (int_64)*(($1 + [32]))), [944])
	$9 = ((int_64)*($1 + [24]) + (int_64)*($6))
	*($1 + [24]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [1024])
	$9 = (int_64)0
	$6 = *($0)
	$10 = *($6 + [8])
	$11 = *($6)
	$8 = *(*($0 + [4]))
	CALL eosio_assert(((int_64)$8 != (int_64)0), [1056])
	CALL eosio_assert((((int_64)$8 != (int_64)-1) | ((int_64)$11 != (int_64)-9223372036854775808)), [1072])
	$11 = ((int_64)$11 / (int_64)$8)
	$3 = *($6 + [4])
	$6 = *($0 + [8])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$10:
	$6 = [2]
	if ( *($0) ){ goto $label$11 }
	$6 = [1]
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$11 }
	$6 = [10]
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$11 }
	$6 = [100]
	if ( ((int_32)$4 < (int_32)[3]) ){ goto $label$11 }
	$6 = [1000]
	if ( ((int_32)$4 == (int_32)[3]) ){ goto $label$11 }
	$6 = ( [100000] ? [10000] : ((int_32)$4 > (int_32)[4]) )
	
.LABEL $label$11
	$5 = ($6 + $5)
	$0 = ($0 + [72])
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$10 }
	$8 = (CASTING int_64)(int_32 $5)
	$7 = (int_64)$8 >> (int_64)63)
	goto $label$7 
	
.LABEL $label$9
	CALL eosio_assert(((int_64)$9 == (int_64)*(($1 + [48]))), [944])
	$9 = ((int_64)*($1 + [40]) + (int_64)*($6))
	*($1 + [40]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [1024])
	$6 = *($0)
	$8 = *($6 + [8])
	$9 = *($6)
	$11 = *(*($0 + [4]))
	CALL eosio_assert(((int_64)$11 != (int_64)0), [1056])
	CALL eosio_assert((((int_64)$11 != (int_64)-1) | ((int_64)$9 != (int_64)-9223372036854775808)), [1072])
	$9 = ((int_64)$9 / (int_64)$11)
	$3 = *($6 + [4])
	$6 = *($0 + [8])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$6 }
	$5 = [0]
	
.LOOP $label$12:
	$6 = [2]
	if ( *($0) ){ goto $label$13 }
	$6 = [1]
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$13 }
	$6 = [10]
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$13 }
	$6 = [100]
	if ( ((int_32)$4 < (int_32)[3]) ){ goto $label$13 }
	$6 = [1000]
	if ( ((int_32)$4 == (int_32)[3]) ){ goto $label$13 }
	$6 = ( [100000] ? [10000] : ((int_32)$4 > (int_32)[4]) )
	
.LABEL $label$13
	$5 = ($6 + $5)
	$0 = ($0 + [72])
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$12 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = (int_64)$11 >> (int_64)63)
	goto $label$5 
	
.LABEL $label$8
	$8 = (int_64)0
	$7 = (int_64)0
	
.LABEL $label$7
	CALL __multi3(($12 + [8]), $8, $7, $11, (int_64)$11 >> (int_64)63))
	$11 = *(($12 + [16]))
	$8 = *($12 + [8])
	CALL eosio_assert(( (uint_64)($8 <= (int_64)4611686018427387904) ? ((int_64)$11 < (int_64)0) : (int_64)($11 == 0) ), [1104])
	CALL eosio_assert(( ((uint_64)$8 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$11 > (int_64)-1) : ((int_64)$11 == (int_64)-1) ), [1136])
	CALL eosio_assert(((int_64)$10 == (int_64)*(($1 + [64]))), [944])
	$11 = ((int_64)$8 + (int_64)*($1 + [56]))
	*($1 + [56]) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [1024])
	$8 = (int_64)59
	$0 = [16]
	$10 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$19 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$6 = ($6 + [165])
	goto $label$17 
	
.LABEL $label$19
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$15
	$0 = ($0 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$14 }
	$9 = *($2)
	*(($12 + [72])) = [0]
	*($12 + [48]) = $9
	*($12 + [40]) = $10
	*($12 + [56]) = (int_64)-1
	*($12 + [64]) = (int_64)0
	$0 = CALL $46(($12 + [40]), (int_64)5459781, [1280])
	$9 = *($0 + [8])
	$11 = *($0)
	$5 = *($12 + [64])
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = ($12 + [68])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$20:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$21 }
	CALL $91($6)
	
.LABEL $label$21
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$20 }
	$0 = *(($12 + [64]))
	goto $label$3 
	
.LABEL $label$6
	$11 = (int_64)0
	$10 = (int_64)0
	
.LABEL $label$5
	CALL __multi3(($12 + [24]), $11, $10, $9, (int_64)$9 >> (int_64)63))
	$9 = *(($12 + [32]))
	$11 = *($12 + [24])
	CALL eosio_assert(( (uint_64)($11 <= (int_64)4611686018427387904) ? ((int_64)$9 < (int_64)0) : (int_64)($9 == 0) ), [1104])
	CALL eosio_assert(( ((uint_64)$11 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$9 > (int_64)-1) : ((int_64)$9 == (int_64)-1) ), [1136])
	CALL eosio_assert(((int_64)$8 == (int_64)*(($1 + [80]))), [944])
	$9 = ((int_64)$11 + (int_64)*($1 + [72]))
	*($1 + [72]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($1 + [72]) < (int_64)4611686018427387904), [1024])
	goto $label$1 
	
.LABEL $label$4
	$0 = $5
	
.LABEL $label$3
	*($3) = $5
	CALL $91($0)
	
.LABEL $label$2
	CALL eosio_assert(((int_64)*(($1 + [64])) == (int_64)$9), [1168])
	CALL eosio_assert(((int_64)*(($1 + [56])) <= (int_64)$11), [1232])
	
.LABEL $label$1
	*([0] + [4]) = ($12 + [80])
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [116])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$6 }
	CALL $91(*(($2 + [48])))
	
.LABEL $label$6
	CALL $91($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($0 + [112]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $91($4)
	
.LABEL $label$1
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$7 }
	$3 = ($0 + [76])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $91($2)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($0 + [72]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $1
	
.LABEL $label$8
	*($3) = $1
	CALL $91($4)
	
.LABEL $label$7
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$12 }
	$3 = ($0 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$16 }
	CALL $91($2)
	
.LABEL $label$16
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$4 = *(($0 + [32]))
	goto $label$13 
	
.LABEL $label$14
	$4 = $1
	
.LABEL $label$13
	*($3) = $1
	CALL $91($4)
	
.LABEL $label$12
	return $0
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$4 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [1792])
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [1824])
	CALL eosio_assert(((int_64)*($0) != (int_64)$1), [1856])
	CALL require_auth(*($0))
	CALL $29($0, $1, $2, $3, [1])
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_32 $23
	int_32 $24
	$24 = (*([0] + [4]) - [240])
	*([0] + [4]) = $24
	*($24 + [220]) = $2
	CALL require_auth(*($0))
	$2 = ($0 + [8])
	$6 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)7235159542211379200, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$2 = CALL $30($2, $6)
	goto $label$1 
	
.LABEL $label$2
	CALL $80(($24 + [48]), $2, *($0), ($24 + [112]))
	$2 = *($24 + [52])
	
.LABEL $label$1
	CALL eosio_assert((*($2 + [8]) <= [2]), [224])
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$3 }
	CALL $60($0, ($1 - $3), [0])
	
.LABEL $label$3
	$5 = (CASTING uint_64)(uint_32 $1)
	$9 = *(($0 + [72]))
	$2 = *(($0 + [76]))
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$4 }
	$1 = ($2 + [-24])
	$6 = ([0] - $9)
	
.LOOP $label$5:
	if ( ((int_64)*(*($1)) == (int_64)$5) ){ goto $label$4 }
	$2 = $1
	$3 = ($1 + [-24])
	$1 = $3
	if ( ((int_32)($3 + $6) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = ($0 + [48])
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$10 }
	$10 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [88]) == (int_32)$4), [544])
	if ( $10 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$1 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7035929504123977728, $5)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$8 }
	$10 = CALL $33($4, $1)
	CALL eosio_assert(((int_32)*($10 + [88]) == (int_32)$4), [544])
	
.LABEL $label$9
	CALL eosio_assert((*($10 + [12]) == 0), [608])
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$5() / (uint_64)(int_64)1000000)) > (uint_32)*($10 + [8])), [1952])
	*($24 + [208]) = (int_64)1397703940
	*($24 + [200]) = (int_64)0
	CALL eosio_assert([1], [64])
	$19 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $19) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [128])
	*($24 + [192]) = (int_64)1195525380
	*($24 + [184]) = (int_64)0
	CALL eosio_assert([1], [64])
	$19 = (int_64)4670021
	$1 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $19) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [128])
	*($24 + [176]) = ($0 + [88])
	*($24 + [112]) = $5
	CALL $81(($24 + [48]), ($24 + [176]), ($24 + [112]))
	$1 = *($24 + [52])
	if ( ($1 == 0) ){ goto $label$22 }
	if ( ((int_64)*($24 + [112]) != (int_64)*($1 + [8])) ){ goto $label$22 }
	$19 = *($24 + [48])
	*($24 + [168]) = $19
	$1 = (CASTING uint_32)(uint_64 (uint_64)$19 >> (uint_64)(int_64)32)
	if ( ($1) == 0) ){ goto $label$21 }
	$9 = (($24 + [48]) + [32])
	$6 = (($24 + [48]) + [16])
	$8 = (($24 + [32]) | [1])
	$7 = (($24 + [32]) | [1])
	$11 = (($24 + [16]) + [8])
	$15 = ($24 + [140])
	$17 = ($24 + [88])
	$16 = ($24 + [132])
	
.LOOP $label$23:
	if ( ((int_64)*($1 + [8]) != (int_64)$5) ){ goto $label$21 }
	CALL $82(($24 + [152]), $0, $1, *($24 + [220]))
	$19 = *($24 + [152])
	CALL __multi3(($24 + [16]), $19, (int_64)$19 >> (int_64)63), (int_64)98, (int_64)0)
	CALL __udivti3($24, *($24 + [16]), *($11), (int_64)100, (int_64)0)
	*($24 + [152]) = *($24)
	$1 = *($24 + [172])
	*($24 + [48]) = ($24 + [152])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [640])
	CALL $83(*($24 + [176]), $1, (int_64)0, ($24 + [48]))
	$2 = *($24 + [172])
	if ( ((int_64)*($2 + [56]) < (int_64)1) ){ goto $label$24 }
	$12 = (($24 + [200]) + [8])
	$19 = *(($2 + [64]))
	if ( ((int_64)$19 != (int_64)*($12)) ){ goto $label$31 }
	if ( ((int_64)$19 != (int_64)1397703940) ){ goto $label$31 }
	$22 = *($0)
	$19 = (int_64)0
	$18 = (int_64)59
	$1 = [1920]
	$20 = (int_64)0
	
.LOOP $label$32:
	if ( ((uint_64)$19 > (uint_64)(int_64)5) ){ goto $label$37 }
	$3 = *($1)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$3 = ($3 + [165])
	goto $label$35 
	
.LABEL $label$37
	$21 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$33
	$1 = ($1 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$20 = ((int_64)$21 | (int_64)$20)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$32 }
	*((($24 + [96]) + [8])) = $20
	*($24 + [96]) = $22
	$19 = (int_64)0
	$18 = (int_64)59
	$1 = [16]
	$20 = (int_64)0
	
.LOOP $label$38:
	if ( ((uint_64)$19 > (uint_64)(int_64)10) ){ goto $label$43 }
	$3 = *($1)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$3 = ($3 + [165])
	goto $label$41 
	
.LABEL $label$43
	$21 = (int_64)0
	if ( ((int_64)$19 == (int_64)11) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$42
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$40
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$39
	$1 = ($1 + [1])
	$18 = ((int_64)$18 + (int_64)-5)
	$20 = ((int_64)$21 | (int_64)$20)
	$19 = ((int_64)$19 + (int_64)1)
	if ( ((int_64)$19 != (int_64)13) ){ goto $label$38 }
	$19 = (int_64)0
	$18 = (int_64)59
	$1 = [32]
	$22 = (int_64)0
	
.LOOP $label$44:
	if ( ((uint_64)$19 > (uint_64)(int_64)7) ){ goto $label$49 }
	$3 = *($1)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$48 }
	$3 = ($3 + [165])
	goto $label$47 
	
.LABEL $label$49
	$21 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$47
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$46
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$45
	$1 = ($1 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$22 = ((int_64)$21 | (int_64)$22)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$44 }
	*(($13 = (($24 + [32]) + [8]))) = [0]
	*($24 + [32]) = (int_64)0
	$1 = CALL strlen([1936])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$7 }
	$3 = ($2 + [56])
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$30 }
	*($24 + [32]) = ($1 << [1])
	$23 = $8
	if ( $1 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$22 = *($0)
	$19 = (int_64)0
	$18 = (int_64)59
	$1 = [1920]
	$20 = (int_64)0
	
.LOOP $label$50:
	if ( ((uint_64)$19 > (uint_64)(int_64)5) ){ goto $label$55 }
	$3 = *($1)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$3 = ($3 + [165])
	goto $label$53 
	
.LABEL $label$55
	$21 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$54
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$52
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$51
	$1 = ($1 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$20 = ((int_64)$21 | (int_64)$20)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$50 }
	*((($24 + [96]) + [8])) = $20
	*($24 + [96]) = $22
	$19 = (int_64)0
	$21 = (int_64)59
	$1 = [48]
	$20 = (int_64)0
	
.LOOP $label$56:
	$18 = (int_64)0
	if ( ((uint_64)$19 > (uint_64)(int_64)11) ){ goto $label$57 }
	$3 = *($1)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$59 }
	$3 = ($3 + [165])
	goto $label$58 
	
.LABEL $label$59
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$58
	$18 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$57
	$1 = ($1 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$20 = ((int_64)$18 | (int_64)$20)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$56 }
	$19 = (int_64)0
	$18 = (int_64)59
	$1 = [32]
	$22 = (int_64)0
	
.LOOP $label$60:
	if ( ((uint_64)$19 > (uint_64)(int_64)7) ){ goto $label$65 }
	$3 = *($1)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$64 }
	$3 = ($3 + [165])
	goto $label$63 
	
.LABEL $label$65
	$21 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$64
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$63
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$62
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$61
	$1 = ($1 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$22 = ((int_64)$21 | (int_64)$22)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$60 }
	*(($13 = (($24 + [32]) + [8]))) = [0]
	*($24 + [32]) = (int_64)0
	$1 = CALL strlen([1936])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$6 }
	$3 = ($2 + [56])
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$27 }
	*($24 + [32]) = ($1 << [1])
	$12 = $7
	if ( $1 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$30
	$14 = (($1 + [16]) & [-16])
	$23 = CALL $90($14)
	*($13) = $23
	*($24 + [32]) = ($14 | [1])
	*($24 + [36]) = $1
	
.LABEL $label$29
	CALL memcpy($23, [1936], $1)
	
.LABEL $label$28
	*(($23 + $1)) = [0]
	*((($24 + [48]) + [8])) = *(($2 + [16]))
	*(($6 + [8])) = *(($3 + [8]))
	*(($6 + [4])) = *(($3 + [4]))
	*($6) = *($3)
	*(($6 + [12])) = *(($3 + [12]))
	*($24 + [48]) = *($0)
	*(($9 + [8])) = *($13)
	*($9) = *($24 + [32])
	*($24 + [32]) = [0]
	*($24 + [36]) = [0]
	*($13) = [0]
	CALL $76(($24 + [224]), CALL $75(($24 + [112]), ($24 + [96]), $20, $22, ($24 + [48])))
	$1 = *($24 + [224])
	CALL send_inline($1, (*($24 + [228]) - $1))
	$1 = *($24 + [224])
	if ( ($1 == 0) ){ goto $label$66 }
	*($24 + [228]) = $1
	CALL $91($1)
	
.LABEL $label$66
	$1 = *($15)
	if ( ($1 == 0) ){ goto $label$67 }
	*((($24 + [112]) + [32])) = $1
	CALL $91($1)
	
.LABEL $label$67
	$1 = *((($24 + [112]) + [16]))
	if ( ($1 == 0) ){ goto $label$68 }
	*($16) = $1
	CALL $91($1)
	
.LABEL $label$68
	if ( ((*($9) & [1]) == 0) ){ goto $label$69 }
	CALL $91(*($17))
	
.LABEL $label$69
	if ( ((*($24 + [32]) & [1]) == 0) ){ goto $label$70 }
	CALL $91(*($13))
	
.LABEL $label$70
	$1 = *($24 + [172])
	CALL eosio_assert(((int_64)*(($1 + [64])) == (int_64)*($12)), [944])
	$19 = ((int_64)*($24 + [200]) + (int_64)*($1 + [56]))
	*($24 + [200]) = $19
	CALL eosio_assert(((int_64)$19 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($24 + [200]) < (int_64)4611686018427387904), [1024])
	goto $label$24 
	
.LABEL $label$27
	$23 = (($1 + [16]) & [-16])
	$12 = CALL $90($23)
	*($13) = $12
	*($24 + [32]) = ($23 | [1])
	*($24 + [36]) = $1
	
.LABEL $label$26
	CALL memcpy($12, [1936], $1)
	
.LABEL $label$25
	*(($12 + $1)) = [0]
	*((($24 + [48]) + [8])) = *(($2 + [16]))
	*(($6 + [8])) = *(($3 + [8]))
	*(($6 + [4])) = *(($3 + [4]))
	*($6) = *($3)
	*(($6 + [12])) = *(($3 + [12]))
	*($24 + [48]) = *($0)
	*(($9 + [8])) = *($13)
	*($9) = *($24 + [32])
	*($24 + [32]) = [0]
	*($24 + [36]) = [0]
	*($13) = [0]
	CALL $76(($24 + [224]), CALL $75(($24 + [112]), ($24 + [96]), $20, $22, ($24 + [48])))
	$1 = *($24 + [224])
	CALL send_inline($1, (*($24 + [228]) - $1))
	$1 = *($24 + [224])
	if ( ($1 == 0) ){ goto $label$71 }
	*($24 + [228]) = $1
	CALL $91($1)
	
.LABEL $label$71
	$1 = *($15)
	if ( ($1 == 0) ){ goto $label$72 }
	*((($24 + [112]) + [32])) = $1
	CALL $91($1)
	
.LABEL $label$72
	$1 = *((($24 + [112]) + [16]))
	if ( ($1 == 0) ){ goto $label$73 }
	*($16) = $1
	CALL $91($1)
	
.LABEL $label$73
	if ( ((*($9) & [1]) == 0) ){ goto $label$74 }
	CALL $91(*($17))
	
.LABEL $label$74
	if ( ((*($24 + [32]) & [1]) == 0) ){ goto $label$75 }
	CALL $91(*($13))
	
.LABEL $label$75
	$1 = *($24 + [172])
	CALL eosio_assert(((int_64)*(($1 + [64])) == (int_64)*((($24 + [184]) + [8]))), [944])
	$19 = ((int_64)*($24 + [184]) + (int_64)*($1 + [56]))
	*($24 + [184]) = $19
	CALL eosio_assert(((int_64)$19 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($24 + [184]) < (int_64)4611686018427387904), [1024])
	
.LABEL $label$24
	CALL $84(($24 + [168]))
	$1 = *($24 + [172])
	if ( $1 ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	*($24 + [172]) = [0]
	*($24 + [168]) = ($24 + [176])
	
.LABEL $label$21
	*($24 + [52]) = ($24 + [200])
	*($24 + [48]) = ($24 + [220])
	*($24 + [56]) = ($24 + [184])
	CALL eosio_assert([1], [640])
	CALL $85($4, $10, (int_64)0, ($24 + [48]))
	
.LABEL $label$8
	*([0] + [4]) = ($24 + [240])
	return (unreachable)
	
.LABEL $label$7
	CALL $92(($24 + [32]))
	
.LABEL $label$6
	CALL $92(($24 + [32]))
	(unreachable)
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [160])
	CALL memcpy($5, $3, [4])
	$6 = ($1 & [-4])
	CALL eosio_assert(((int_32)$6 != (int_32)[4]), [160])
	CALL memcpy(($5 | [4]), ($3 + [4]), [4])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [160])
	$6 = ($5 + [8])
	CALL memcpy($6, ($3 + [8]), [4])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *($6)
	$6 = *($5 + [4])
	$0 = *($5)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 $0), (int_32 $6), (int_32 $3), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [304])
	*([0] + [4]) = $9
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$11 }
	*(($9 + [192])) = $1
	*(($9 + [200])) = (int_64)-1
	*(($9 + [208])) = (int_64)0
	*(($9 + [216])) = [0]
	*($9 + [184]) = $1
	*($9 + [176]) = $1
	*($9 + [224]) = $1
	*(($9 + [232])) = $1
	*(($9 + [240])) = (int_64)-1
	*(($9 + [248])) = [0]
	*(($9 + [252])) = [0]
	*(($9 + [256])) = [0]
	*($9 + [264]) = $1
	*(($9 + [272])) = $1
	*(($9 + [280])) = (int_64)-1
	*(($9 + [288])) = [0]
	*(($9 + [292])) = [0]
	*(($9 + [296])) = [0]
	*(($9 + [300])) = [0]
	if ( ((int_64)$2 <= (int_64)-4417032211186843649) ){ goto $label$10 }
	if ( ((int_64)$2 <= (int_64)-3665743330775236609) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-3665743330775236608) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)4923678490122780672) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)6138814543947628544) ){ goto $label$2 }
	*($9 + [132]) = [0]
	*($9 + [128]) = [1]
	*($9 + [40 align=4]) = *($9 + [128])
	CALL $13(($9 + [176]), ($9 + [40]))
	CALL $8(($9 + [176]))
	goto $label$1 
	
.LABEL $label$11
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$17 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$3 = ($3 + [165])
	goto $label$15 
	
.LABEL $label$17
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$13
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$12 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$18 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$24 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$3 = ($3 + [165])
	goto $label$22 
	
.LABEL $label$24
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$20
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$19 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$1 }
	*(($9 + [192])) = $0
	*(($9 + [200])) = (int_64)-1
	*(($9 + [208])) = (int_64)0
	*(($9 + [216])) = [0]
	*($9 + [184]) = $0
	*($9 + [176]) = $0
	*($9 + [224]) = $0
	*(($9 + [232])) = $0
	*(($9 + [240])) = (int_64)-1
	*(($9 + [248])) = [0]
	*(($9 + [252])) = [0]
	*(($9 + [256])) = [0]
	*($9 + [264]) = $0
	*(($9 + [272])) = $0
	*(($9 + [280])) = (int_64)-1
	*(($9 + [288])) = [0]
	*(($9 + [292])) = [0]
	*(($9 + [296])) = [0]
	*(($9 + [300])) = [0]
	*($9 + [96]) = [2]
	*($9 + [100]) = [0]
	*($9 + [72 align=4]) = *($9 + [96])
	CALL $23(($9 + [176]), ($9 + [72]))
	CALL $8(($9 + [176]))
	goto $label$1 
	
.LABEL $label$18
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [48]
	$7 = (int_64)0
	
.LOOP $label$25:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$26 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$3 = ($3 + [165])
	goto $label$27 
	
.LABEL $label$28
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$26
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$25 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$34 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$1 }
	*(($9 + [192])) = $0
	*(($9 + [200])) = (int_64)-1
	*(($9 + [208])) = (int_64)0
	*(($9 + [216])) = [0]
	*($9 + [184]) = $0
	*($9 + [176]) = $0
	*($9 + [224]) = $0
	*(($9 + [232])) = $0
	*(($9 + [240])) = (int_64)-1
	*(($9 + [248])) = [0]
	*(($9 + [252])) = [0]
	*(($9 + [256])) = [0]
	*($9 + [264]) = $0
	*(($9 + [272])) = $0
	*(($9 + [280])) = (int_64)-1
	*(($9 + [288])) = [0]
	*(($9 + [292])) = [0]
	*(($9 + [296])) = [0]
	*(($9 + [300])) = [0]
	*($9 + [88]) = [2]
	*($9 + [92]) = [0]
	*($9 + [80 align=4]) = *($9 + [88])
	CALL $23(($9 + [176]), ($9 + [80]))
	CALL $8(($9 + [176]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 > (int_64)-6402240904323284993) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-6712989502257758208) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-6712989315359571968) ){ goto $label$2 }
	*($9 + [124]) = [0]
	*($9 + [120]) = [3]
	*($9 + [48 align=4]) = *($9 + [120])
	CALL $17(($9 + [176]), ($9 + [48]))
	CALL $8(($9 + [176]))
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-4417032211186843648) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-4417017204164263936) ){ goto $label$2 }
	*($9 + [148]) = [0]
	*($9 + [144]) = [4]
	*($9 + [24 align=4]) = *($9 + [144])
	CALL $13(($9 + [176]), ($9 + [24]))
	CALL $8(($9 + [176]))
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)-6402240904323284992) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-4992623624440512512) ){ goto $label$2 }
	*($9 + [172]) = [0]
	*($9 + [168]) = [5]
	*($9) = *($9 + [168])
	CALL $7(($9 + [176]), $9)
	CALL $8(($9 + [176]))
	goto $label$1 
	
.LABEL $label$7
	*($9 + [140]) = [0]
	*($9 + [136]) = [6]
	*($9 + [32 align=4]) = *($9 + [136])
	CALL $13(($9 + [176]), ($9 + [32]))
	CALL $8(($9 + [176]))
	goto $label$1 
	
.LABEL $label$6
	*($9 + [108]) = [0]
	*($9 + [104]) = [7]
	*($9 + [64 align=4]) = *($9 + [104])
	CALL $21(($9 + [176]), ($9 + [64]))
	CALL $8(($9 + [176]))
	goto $label$1 
	
.LABEL $label$5
	*($9 + [156]) = [0]
	*($9 + [152]) = [8]
	*($9 + [16 align=4]) = *($9 + [152])
	CALL $10(($9 + [176]), ($9 + [16]))
	CALL $8(($9 + [176]))
	goto $label$1 
	
.LABEL $label$4
	*($9 + [116]) = [0]
	*($9 + [112]) = [9]
	*($9 + [56 align=4]) = *($9 + [112])
	CALL $19(($9 + [176]), ($9 + [56]))
	CALL $8(($9 + [176]))
	goto $label$1 
	
.LABEL $label$3
	*($9 + [164]) = [0]
	*($9 + [160]) = [10]
	*($9 + [8 align=4]) = *($9 + [160])
	CALL $10(($9 + [176]), ($9 + [8]))
	CALL $8(($9 + [176]))
	goto $label$1 
	
.LABEL $label$2
	CALL $8(($9 + [176]))
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [304])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*($5 + [24]) = $1
	*($5 + [16]) = $2
	CALL require_auth(*($0))
	$3 = ($0 + [8])
	$4 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)7235159542211379200, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $30($3, $4)
	goto $label$1 
	
.LABEL $label$2
	CALL $71(($5 + [8]), $3, *($0), $5)
	$0 = *($5 + [12])
	
.LABEL $label$1
	*($5 + [12]) = ($5 + [16])
	*($5 + [8]) = ($5 + [24])
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [640])
	CALL $72($3, $0, (int_64)0, ($5 + [8]))
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*($5 + [24]) = $1
	*($5 + [16]) = $2
	CALL require_auth(*($0))
	$3 = ($0 + [8])
	$4 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)7235159542211379200, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $30($3, $4)
	goto $label$1 
	
.LABEL $label$2
	CALL $69(($5 + [8]), $3, *($0), $5)
	$0 = *($5 + [12])
	
.LABEL $label$1
	*($5 + [12]) = ($5 + [16])
	*($5 + [8]) = ($5 + [24])
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [640])
	CALL $70($3, $0, (int_64)0, ($5 + [8]))
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $16 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	*($4 + [24]) = $1
	CALL require_auth(*($0))
	$2 = ($0 + [8])
	$3 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)7235159542211379200, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $30($2, $3)
	goto $label$1 
	
.LABEL $label$2
	CALL $67(($4 + [16]), $2, *($0), ($4 + [8]))
	$0 = *($4 + [20])
	
.LABEL $label$1
	*($4 + [16]) = ($4 + [24])
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [640])
	CALL $68($2, $0, (int_64)0, ($4 + [16]))
	*([0] + [4]) = ($4 + [32])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [160])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [24])) = (int_64)1397703940
	*($9 + [16]) = (int_64)0
	*($9 + [8]) = (int_64)0
	CALL eosio_assert([1], [64])
	$6 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$4
	CALL eosio_assert($7, [128])
	*(($9 + [40])) = [0]
	*($9 + [32]) = (int_64)0
	*($9 + [80]) = $5
	$1 = ($5 + $3)
	*($9 + [88]) = $1
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [160])
	CALL memcpy(($9 + [8]), $5, [8])
	$4 = ($5 + [8])
	CALL eosio_assert(((uint_32)($1 - $4) > (uint_32)[7]), [160])
	$7 = (($9 + [8]) + [8])
	CALL memcpy($7, $4, [8])
	$4 = ($5 + [16])
	CALL eosio_assert(((uint_32)($1 - $4) > (uint_32)[7]), [160])
	CALL memcpy((($9 + [8]) + [16]), $4, [8])
	*($9 + [84]) = ($5 + [24])
	$1 = (($9 + [8]) + [24])
	CALL $26(($9 + [80]), $1)
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($5)
	
.LABEL $label$9
	*(($5 = (($9 + [64]) + [8]))) = *(($7 + [8]))
	$6 = *($9 + [8])
	*($9 + [64]) = *($7)
	CALL $99(($9 + [48]), $1)
	*((($9 + [80]) + [8])) = *($5)
	*($9 + [80]) = *($9 + [64])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$10 }
	$8 = *((*($1) + $8))
	
.LABEL $label$10
	CALL void $1((int_32 $6), (int_64 ($9 + [80])), (int_32 ($9 + [48])), (int_32 $8))
	if ( ((*($9 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL $91(*($9 + [56]))
	
.LABEL $label$11
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL $91(*(($9 + [40])))
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [144])
	*([0] + [4]) = $12
	$4 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$11 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [1792])
	$11 = (int_64)0
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [1824])
	CALL eosio_assert(((int_64)*($0) != (int_64)$1), [1856])
	CALL require_auth($1)
	if ( ((int_64)*(($2 + [8])) != (int_64)1397703940) ){ goto $label$15 }
	$11 = (int_64)0
	$7 = (int_64)59
	$6 = [1920]
	$8 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$21 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$4 = ($4 + [165])
	goto $label$19 
	
.LABEL $label$21
	$9 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$17
	$6 = ($6 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$16 }
	*($12 + [80]) = $8
	*($12 + [72]) = $1
	$11 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$8 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$27 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$4 = ($4 + [165])
	goto $label$25 
	
.LABEL $label$27
	$9 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$23
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$22 }
	$11 = (int_64)0
	$7 = (int_64)59
	$6 = [32]
	$10 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$11 > (uint_64)(int_64)7) ){ goto $label$33 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$4 = ($4 + [165])
	goto $label$31 
	
.LABEL $label$33
	$9 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$29
	$6 = ($6 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$28 }
	*(($12 + [16])) = [0]
	*($12 + [8]) = (int_64)0
	$6 = CALL strlen([1936])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$14 }
	*($12 + [8]) = ($6 << [1])
	$4 = (($12 + [8]) | [1])
	if ( $6 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$7 = (int_64)59
	$6 = [1920]
	$8 = (int_64)0
	
.LOOP $label$34:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$39 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$4 = ($4 + [165])
	goto $label$37 
	
.LABEL $label$39
	$9 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$35
	$6 = ($6 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$34 }
	*($12 + [80]) = $8
	*($12 + [72]) = $1
	$11 = (int_64)0
	$9 = (int_64)59
	$6 = [48]
	$8 = (int_64)0
	
.LOOP $label$40:
	$7 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$41 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$4 = ($4 + [165])
	goto $label$42 
	
.LABEL $label$43
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$42
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$41
	$6 = ($6 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$8 = ((int_64)$7 | (int_64)$8)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$40 }
	$11 = (int_64)0
	$7 = (int_64)59
	$6 = [32]
	$10 = (int_64)0
	
.LOOP $label$44:
	if ( ((uint_64)$11 > (uint_64)(int_64)7) ){ goto $label$49 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$48 }
	$4 = ($4 + [165])
	goto $label$47 
	
.LABEL $label$49
	$9 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$47
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$46
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$45
	$6 = ($6 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$44 }
	*(($12 + [16])) = [0]
	*($12 + [8]) = (int_64)0
	$6 = CALL strlen([1936])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$11 }
	*($12 + [8]) = ($6 << [1])
	$4 = (($12 + [8]) | [1])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$14
	$5 = (($6 + [16]) & [-16])
	$4 = CALL $90($5)
	*($12 + [8]) = ($5 | [1])
	*($12 + [16]) = $4
	*($12 + [12]) = $6
	
.LABEL $label$13
	CALL memcpy($4, [1936], $6)
	
.LABEL $label$12
	*(($4 + $6)) = [0]
	*(($12 + [52])) = *(($2 + [12]))
	*(($12 + [48])) = *(($2 + [8]))
	*(($12 + [44])) = *(($2 + [4]))
	*($12 + [24]) = $1
	*($12 + [32]) = *($0)
	*($12 + [40]) = *($2)
	$6 = (($12 + [8]) + [8])
	*(($12 + [64])) = *($6)
	*($12 + [56]) = *($12 + [8])
	*($12 + [8]) = [0]
	*($12 + [12]) = [0]
	*($6) = [0]
	$6 = CALL $75(($12 + [88]), ($12 + [72]), $8, $10, ($12 + [24]))
	CALL $76(($12 + [128]), $6)
	$4 = *($12 + [128])
	CALL send_inline($4, (*($12 + [132]) - $4))
	$4 = *($12 + [128])
	if ( ($4 == 0) ){ goto $label$50 }
	*($12 + [132]) = $4
	CALL $91($4)
	
.LABEL $label$50
	$4 = *($6 + [28])
	if ( ($4 == 0) ){ goto $label$51 }
	*(($6 + [32])) = $4
	CALL $91($4)
	
.LABEL $label$51
	$4 = *($6 + [16])
	if ( ($4 == 0) ){ goto $label$52 }
	*(($6 + [20])) = $4
	CALL $91($4)
	
.LABEL $label$52
	if ( ((*(($12 + [56])) & [1]) == 0) ){ goto $label$53 }
	CALL $91(*(($12 + [64])))
	
.LABEL $label$53
	if ( ((*($12 + [8]) & [1]) == 0) ){ goto $label$8 }
	CALL $91(*(($12 + [16])))
	goto $label$8 
	
.LABEL $label$11
	$5 = (($6 + [16]) & [-16])
	$4 = CALL $90($5)
	*($12 + [8]) = ($5 | [1])
	*($12 + [16]) = $4
	*($12 + [12]) = $6
	
.LABEL $label$10
	CALL memcpy($4, [1936], $6)
	
.LABEL $label$9
	*(($4 + $6)) = [0]
	*(($12 + [52])) = *(($2 + [12]))
	*(($12 + [48])) = *(($2 + [8]))
	*(($12 + [44])) = *(($2 + [4]))
	*($12 + [24]) = $1
	*($12 + [32]) = *($0)
	*($12 + [40]) = *($2)
	$6 = (($12 + [8]) + [8])
	*(($12 + [64])) = *($6)
	*($12 + [56]) = *($12 + [8])
	*($12 + [8]) = [0]
	*($12 + [12]) = [0]
	*($6) = [0]
	$6 = CALL $75(($12 + [88]), ($12 + [72]), $8, $10, ($12 + [24]))
	CALL $76(($12 + [128]), $6)
	$4 = *($12 + [128])
	CALL send_inline($4, (*($12 + [132]) - $4))
	$4 = *($12 + [128])
	if ( ($4 == 0) ){ goto $label$54 }
	*($12 + [132]) = $4
	CALL $91($4)
	
.LABEL $label$54
	$4 = *($6 + [28])
	if ( ($4 == 0) ){ goto $label$55 }
	*(($6 + [32])) = $4
	CALL $91($4)
	
.LABEL $label$55
	$4 = *($6 + [16])
	if ( ($4 == 0) ){ goto $label$56 }
	*(($6 + [20])) = $4
	CALL $91($4)
	
.LABEL $label$56
	if ( ((*(($12 + [56])) & [1]) == 0) ){ goto $label$57 }
	CALL $91(*(($12 + [64])))
	
.LABEL $label$57
	if ( ((*($12 + [8]) & [1]) == 0) ){ goto $label$8 }
	CALL $91(*(($12 + [16])))
	
.LABEL $label$8
	CALL $29($0, $1, $2, $3, [1])
	*([0] + [4]) = ($12 + [144])
	return (unreachable)
	
.LABEL $label$7
	CALL $92(($12 + [8]))
	
.LABEL $label$6
	CALL $92(($12 + [8]))
	(unreachable)
}

void .FUNC $12 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*($5 + [24]) = $1
	*($5 + [16]) = $2
	CALL require_auth(*($0))
	$3 = ($0 + [8])
	$4 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)7235159542211379200, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $30($3, $4)
	goto $label$1 
	
.LABEL $label$2
	CALL $73(($5 + [8]), $3, *($0), $5)
	$0 = *($5 + [12])
	
.LABEL $label$1
	*($5 + [12]) = ($5 + [16])
	*($5 + [8]) = ($5 + [24])
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [640])
	CALL $74($3, $0, (int_64)0, ($5 + [8]))
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [160])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [160])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

int_32 .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $90([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $28($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $79(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	*($4 + [28]) = $1
	CALL require_auth(*($0))
	$2 = ($0 + [8])
	$3 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)7235159542211379200, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $30($2, $3)
	goto $label$1 
	
.LABEL $label$2
	CALL $65(($4 + [16]), $2, *($0), ($4 + [8]))
	$0 = *($4 + [20])
	$1 = *($4 + [28])
	
.LABEL $label$1
	CALL eosio_assert(($1 <= [3]), [1776])
	*($4 + [16]) = ($4 + [28])
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [640])
	CALL $66($2, $0, (int_64)0, ($4 + [16]))
	*([0] + [4]) = ($4 + [32])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [160])
	CALL memcpy(($5 + [8]), $3, [4])
	$6 = *($5 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 $6), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [160])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [160])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [688])
	*(($4 = CALL $90([88]))) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = (int_64)1000000
	*($4 + [24]) = (int_64)1000
	*($4 + [32]) = (int_64)100000000
	*($4 + [40]) = (int_64)1000
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = $1
	*($9 + [104]) = (($9 + [16]) + [72])
	*($9 + [100]) = ($9 + [16])
	*($9 + [96]) = ($9 + [16])
	CALL $43(($9 + [96]), $4)
	$5 = *($4)
	*($4 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159542211379200, $2, $5, ($9 + [16]), [72])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [96]) = $4
	$5 = *($4)
	*($9 + [16]) = $5
	$6 = *($4 + [76])
	*($9 + [12]) = $6
	$8 = ($1 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($9 + [96]) = [0]
	*($7) = $4
	*($8) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $57(($1 + [24]), ($9 + [96]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [96])
	*($9 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $91($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [112])
}

int_32 .FUNC $50 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [24]) = (int_64)0
	*($0) = (int_64)0
	*(($2 = ($0 + [32]))) = (int_64)1397703940
	CALL eosio_assert([1], [64])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [128])
	*(($2 = ($0 + [48]))) = (int_64)1397703940
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [64])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [128])
	*(($2 = ($0 + [64]))) = (int_64)1397703940
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [64])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [128])
	*(($2 = ($0 + [80]))) = (int_64)1397703940
	*($0 + [72]) = (int_64)0
	CALL eosio_assert([1], [64])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [128])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $90(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $91($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $91($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [160])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [160])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [160])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	if ( ((int_32)$2 != (int_32)[1]) ){ goto $label$2 }
	$3 = (*($1) + [-98])
	if ( ((uint_32)$3 > (uint_32)[17]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$3
	*($0 + [56]) = [0]
	*($0) = [0]
	CALL memset(($0 + [4]), [0], [10])
	CALL memset(($0 + [14]), [0], [10])
	CALL memset(($0 + [24]), [0], [10])
	CALL memset(($0 + [34]), [0], [10])
	CALL memset(($0 + [44]), [0], [10])
	*($0) = ( [1] ? [2] : ((int_32)*($1) == (int_32)[98]) )
	return [1]
	
.LABEL $label$2
	return CALL $56($0, $1, $2)
	
.LABEL $label$1
	*($0 + [56]) = [0]
	*($0) = [0]
	CALL memset(($0 + [4]), [0], [10])
	CALL memset(($0 + [14]), [0], [10])
	CALL memset(($0 + [24]), [0], [10])
	CALL memset(($0 + [34]), [0], [10])
	CALL memset(($0 + [44]), [0], [10])
	*($0) = ( [4] ? [8] : ((int_32)*($1) == (int_32)[111]) )
	$3
	return [1]
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0) = *($1)
	$2 = ($0 + [4])
	CALL memset($2, [0], [10])
	$3 = ($0 + [14])
	CALL memset($3, [0], [10])
	$4 = ($0 + [24])
	CALL memset($4, [0], [10])
	$5 = ($0 + [34])
	CALL memset($5, [0], [10])
	$6 = ($0 + [44])
	CALL memset($6, [0], [10])
	*($0 + [56]) = *($1 + [56])
	CALL $99(($0 + [60]), ($1 + [60]))
	CALL memcpy($2, ($1 + [4]), [10])
	CALL memcpy($3, ($1 + [14]), [10])
	CALL memcpy($4, ($1 + [24]), [10])
	CALL memcpy($5, ($1 + [34]), [10])
	CALL memcpy($6, ($1 + [44]), [10])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [128])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [688])
	$4 = CALL $90([104])
	$6 = CALL $50($4)
	*($4 + [88]) = $1
	*($4 + [48]) = (int_64)1195525380
	*($4 + [80]) = (int_64)1195525380
	$3 = *(*($3))
	*($4) = (CASTING uint_64)(uint_32 $3)
	*($4 + [8]) = (((int_32)$3 * (int_32)[60]) + [60])
	*($8 + [120]) = (($8 + [16]) + [84])
	*($8 + [116]) = ($8 + [16])
	*($8 + [112]) = ($8 + [16])
	CALL $45(($8 + [112]), $6)
	$5 = *($4)
	*($4 + [92]) = CALL db_store_i64(*($1 + [8]), (int_64)7035929504123977728, $2, $5, ($8 + [16]), [84])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [112]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [92])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [112]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $51(($1 + [24]), ($8 + [112]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [112])
	*($8 + [112]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $91($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [128])
}

int_32 .FUNC $56 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	*($0 + [56]) = [0]
	*($0) = [0]
	$3 = ($0 + [4])
	CALL memset($3, [0], [10])
	$4 = ($0 + [14])
	CALL memset($4, [0], [10])
	$5 = ($0 + [24])
	CALL memset($5, [0], [10])
	$6 = ($0 + [34])
	CALL memset($6, [0], [10])
	$7 = ($0 + [44])
	CALL memset($7, [0], [10])
	$12 = [1]
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$4 }
	$10 = ($0 + [56])
	$9 = [0]
	
.LOOP $label$7:
	$11 = *(($1 + $9))
	$12 = *($10)
	*($10) = ($12 + [1])
	if ( ((uint_32)$12 >= (uint_32)[5]) ){ goto $label$6 }
	$8 = ( [0] ? (($0 + ((int_32)$12 * (int_32)[10])) + [4]) : ((uint_32)$12 > (uint_32)[4]) )
	if ( ((uint_32)(($11 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$10 }
	CALL memset($8, [0], [10])
	*((($8 + $11) + [-48])) = [1]
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$11 != (int_32)[40]) ){ goto $label$5 }
	$11 = ($9 + [1])
	$13 = ((int_32)$11 < (int_32)$2)
	$12 = *(($1 + $11))
	if ( ((int_32)$11 >= (int_32)$2) ){ goto $label$12 }
	if ( ((uint_32)(($12 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$12 }
	$11 = ($9 + [2])
	
.LOOP $label$13:
	$9 = $11
	if ( ((uint_32)(($12 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$8 }
	$12 = (($8 + int_32(($12 << [24]) >> [24])) + [-48])
	if ( *($12) ){ goto $label$8 }
	*($12) = [1]
	$11 = ($9 + [1])
	$12 = *(($1 + $9))
	if ( ((int_32)$9 >= (int_32)$2) ){ goto $label$14 }
	if ( ((($12 + [-48]) & [255]) <= [10]) ){ goto $label$13 }
	
.LABEL $label$14
	$13 = ((int_32)$9 < (int_32)$2)
	$9 = ($11 + [-1])
	goto $label$11 
	
.LABEL $label$12
	$9 = $11
	
.LABEL $label$11
	if ( ((int_32)(((((((((((int_32)*($8 + [1]) != (int_32)[0]) + ((int_32)*($8) != (int_32)[0])) + ((int_32)*($8 + [2]) != (int_32)[0])) + ((int_32)*($8 + [3]) != (int_32)[0])) + ((int_32)*($8 + [4]) != (int_32)[0])) + ((int_32)*($8 + [5]) != (int_32)[0])) + ((int_32)*($8 + [6]) != (int_32)[0])) + ((int_32)*($8 + [7]) != (int_32)[0])) + ((int_32)*($8 + [8]) != (int_32)[0])) + ((int_32)*($8 + [9]) != (int_32)[0])) <= (int_32)[0]) ){ goto $label$3 }
	if ( ((int_32)($12 & [255]) != (int_32)[41]) ){ goto $label$2 }
	if ( ($13 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$12 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)$2) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$8
	CALL $96(($0 + [60]), [1376])
	return [0]
	
.LABEL $label$6
	CALL $96(($0 + [60]), [1344])
	return [0]
	
.LABEL $label$5
	$12 = [0]
	*($0) = [0]
	*(($0 + [56])) = [0]
	CALL memset($3, [0], [10])
	CALL memset($4, [0], [10])
	CALL memset($5, [0], [10])
	CALL memset($6, [0], [10])
	CALL memset($7, [0], [10])
	CALL $96(($0 + [60]), [1488])
	
.LABEL $label$4
	return $12
	
.LABEL $label$3
	CALL $96(($0 + [60]), [1408])
	return [0]
	
.LABEL $label$2
	CALL $96(($0 + [60]), [1440])
	return [0]
	
.LABEL $label$1
	CALL $96(($0 + [60]), [1456])
	return [0]
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $90(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $91($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $91($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [768])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [816])
	$4 = *($1)
	CALL $44($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [880])
	*($5 + [104]) = ($5 + [84])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $45(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $5, [84])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $29 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [80])
	*([0] + [4]) = $16
	*($16 + [72]) = $1
	$5 = ($0 + [8])
	$12 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)7235159542211379200, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $30($5, $12)
	goto $label$1 
	
.LABEL $label$2
	CALL $31(($16 + [48]), $5, *($0), ($16 + [8]))
	$9 = *($16 + [52])
	
.LABEL $label$1
	*(($16 + [64])) = (int_64)0
	*($16 + [56]) = (int_64)0
	*($16 + [48]) = (int_64)0
	$12 = CALL $32(($16 + [48]), $3, [44])
	if ( ($4 == 0) ){ goto $label$5 }
	CALL eosio_assert($12, ( *(($16 + [68])) ? ($16 + [61]) : (*($16 + [60]) & [1]) ))
	CALL eosio_assert(((int_32)*($16 + [52]) != (int_32)*($16 + [48])), [192])
	goto $label$4 
	
.LABEL $label$5
	if ( ($12 == 0) ){ goto $label$3 }
	if ( ((int_32)*($16 + [52]) == (int_32)*($16 + [48])) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert((*($9 + [8]) == 0), [224])
	$15 = [0]
	$6 = *($16 + [52])
	$11 = *($16 + [48])
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$6 }
	$10 = ($11 + [13])
	$15 = [0]
	
.LOOP $label$7:
	$14 = [1]
	if ( *($11) ){ goto $label$8 }
	$7 = *($11 + [56])
	$14 = [1]
	$13 = [0]
	$12 = $10
	
.LOOP $label$9:
	if ( ((int_32)$13 >= (int_32)$7) ){ goto $label$8 }
	$14 = ((int_32)(((((((((((int_32)*(($12 + [-8])) != (int_32)[0]) + ((int_32)*(($12 + [-9])) != (int_32)[0])) + ((int_32)*(($12 + [-7])) != (int_32)[0])) + ((int_32)*(($12 + [-6])) != (int_32)[0])) + ((int_32)*(($12 + [-5])) != (int_32)[0])) + ((int_32)*(($12 + [-4])) != (int_32)[0])) + ((int_32)*(($12 + [-3])) != (int_32)[0])) + ((int_32)*(($12 + [-2])) != (int_32)[0])) + ((int_32)*(($12 + [-1])) != (int_32)[0])) + ((int_32)*($12) != (int_32)[0])) * (int_32)$14)
	$12 = ($12 + [10])
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[5]) ){ goto $label$9 }
	
.LABEL $label$8
	$10 = ($10 + [72])
	$15 = ($14 + $15)
	$11 = ($11 + [72])
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$7 }
	
.LABEL $label$6
	*($16 + [44]) = $15
	CALL eosio_assert(((int_32)$15 > (int_32)[0]), [256])
	$1 = (CASTING int_64)(int_32 $15)
	CALL eosio_assert((int_64)(((int_64)*($2) % (int_64)$1) == 0), [288])
	$13 = *($16 + [52])
	$12 = *($16 + [48])
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$11 }
	$11 = (*($9 + [12]) + [1])
	
.LOOP $label$12:
	if ( *($12) ){ goto $label$13 }
	$7 = [0]
	$14 = *(($12 + [56]))
	if ( ((int_32)$14 > (int_32)$11) ){ goto $label$10 }
	if ( ((int_32)$14 > (int_32)[5]) ){ goto $label$10 }
	
.LABEL $label$13
	$12 = ($12 + [72])
	if ( ((int_32)$13 != (int_32)$12) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = [1]
	
.LABEL $label$10
	CALL eosio_assert($7, [336])
	$8 = *($2 + [8])
	if ( ((int_64)$8 != (int_64)1397703940) ){ goto $label$15 }
	CALL eosio_assert(((uint_64)((int_64)*($2) / (int_64)$1) >= (uint_64)*($9 + [24])), [384])
	CALL eosio_assert(((uint_64)((int_64)*($2) / (int_64)*($16 + [44])) <= (uint_64)*($9 + [16])), [416])
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_64)$8 != (int_64)*($9 + [48])) ){ goto $label$16 }
	CALL eosio_assert(((uint_64)((int_64)*($2) / (int_64)$1) >= (uint_64)*($9 + [40])), [448])
	CALL eosio_assert(((uint_64)((int_64)*($2) / (int_64)*($16 + [44])) <= (uint_64)*($9 + [32])), [480])
	goto $label$14 
	
.LABEL $label$16
	if ( ((int_64)$8 != (int_64)1195525380) ){ goto $label$17 }
	CALL eosio_assert(((uint_64)((int_64)*($2) / (int_64)$1) >= (uint_64)*($9 + [40])), [448])
	CALL eosio_assert(((uint_64)((int_64)*($2) / (int_64)*($16 + [44])) <= (uint_64)*($9 + [32])), [480])
	goto $label$14 
	
.LABEL $label$17
	if ( ($4 == 0) ){ goto $label$14 }
	CALL eosio_assert([1], [512])
	
.LABEL $label$14
	$1 = CALL current_time()
	$11 = *(($0 + [72]))
	$14 = *(($0 + [76]))
	$12 = ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) / (uint_32)[60])
	*($16 + [40]) = $12
	$1 = (CASTING uint_64)(uint_32 $12)
	if ( ((int_32)$14 == (int_32)$11) ){ goto $label$18 }
	$12 = ($14 + [-24])
	$7 = ([0] - $11)
	
.LOOP $label$19:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$18 }
	$14 = $12
	$13 = ($12 + [-24])
	$12 = $13
	if ( ((int_32)($13 + $7) != (int_32)[-24]) ){ goto $label$19 }
	
.LABEL $label$18
	$13 = ($0 + [48])
	if ( ((int_32)$14 == (int_32)$11) ){ goto $label$22 }
	$12 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [88]) == (int_32)$13), [544])
	if ( $12 ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$22
	$12 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7035929504123977728, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$21 }
	$12 = CALL $33($13, $12)
	CALL eosio_assert(((int_32)*($12 + [88]) == (int_32)$13), [544])
	goto $label$20 
	
.LABEL $label$21
	$1 = *($0)
	*($16 + [32]) = ($16 + [40])
	CALL $34(($16 + [8]), $13, $1, ($16 + [32]))
	$12 = *($16 + [12])
	
.LABEL $label$20
	CALL eosio_assert((*($12 + [12]) == 0), [608])
	*($16 + [8]) = $2
	*($16 + [12]) = ($16 + [44])
	*($16 + [16]) = ($16 + [48])
	*($16 + [20]) = $0
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [640])
	CALL $35($13, $12, (int_64)0, ($16 + [8]))
	*($16 + [32]) = ((int_64)*($9 + [64]) + (int_64)1)
	*($16 + [8]) = ($16 + [32])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [640])
	CALL $36($5, $9, (int_64)0, ($16 + [8]))
	$1 = *($0)
	*($16 + [20]) = $2
	*($16 + [24]) = $3
	*($16 + [12]) = ($16 + [40])
	*($16 + [8]) = ($16 + [32])
	*($16 + [16]) = ($16 + [72])
	CALL $37($16, ($0 + [88]), $1, ($16 + [8]))
	
.LABEL $label$3
	if ( ((*($16 + [60]) & [1]) == 0) ){ goto $label$23 }
	CALL $91(*(($16 + [68])))
	
.LABEL $label$23
	$14 = *($16 + [48])
	if ( ($14 == 0) ){ goto $label$24 }
	$12 = *($16 + [52])
	if ( ((int_32)$12 == (int_32)$14) ){ goto $label$26 }
	$13 = ([0] - $14)
	$12 = ($12 + [-12])
	
.LOOP $label$27:
	if ( ((*($12) & [1]) == 0) ){ goto $label$28 }
	CALL $91(*(($12 + [8])))
	
.LABEL $label$28
	$12 = ($12 + [-72])
	if ( ((int_32)($12 + $13) != (int_32)[-12]) ){ goto $label$27 }
	$12 = *($16 + [48])
	goto $label$25 
	
.LABEL $label$26
	$12 = $14
	
.LABEL $label$25
	*($16 + [52]) = $14
	CALL $91($12)
	
.LABEL $label$24
	*([0] + [4]) = ($16 + [80])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $90($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $98($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $91($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $5) / (int_32)[72])
	$2 = ($4 + [1])
	if ( ((uint_32)$2 >= (uint_32)[59652324]) ){ goto $label$2 }
	$6 = [59652323]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[72])
	if ( ((uint_32)$5 > (uint_32)[29826160]) ){ goto $label$4 }
	$6 = ($5 << [1])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL $90(((int_32)$6 * (int_32)[72]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$2 = ($5 + ((int_32)$6 * (int_32)[72]))
	$5 = ($5 + ((int_32)$4 * (int_32)[72]))
	$1 = CALL $54($5, $1)
	$3 = ($1 + [72])
	$4 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = ($6 + [-72])
	CALL $54(($1 + [-72]), $6)
	$5 = ($5 + [-72])
	$1 = $5
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$7 }
	$4 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $4
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	$5 = ([0] - $1)
	$6 = ($4 + [-12])
	
.LOOP $label$9:
	if ( ((*($6) & [1]) == 0) ){ goto $label$10 }
	CALL $91(*(($6 + [8])))
	
.LABEL $label$10
	$6 = ($6 + [-72])
	if ( ((int_32)($6 + $5) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $91($1)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = (*([0] + [4]) - [16])
	$5 = $3
	*([0] + [4]) = $3
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [160])
	CALL memcpy(($5 + [8]), $3, [4])
	CALL eosio_assert(((int_32)($1 & [-4]) != (int_32)[4]), [160])
	CALL memcpy((($5 + [8]) | [4]), ($3 + [4]), [4])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *($5 + [12])
	$0 = *($5 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$4 = *((*($1) + $4))
	
.LABEL $label$6
	CALL void $1((int_32 $0), (int_32 $3), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	$3 = ($0 + [8])
	$4 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)7235159542211379200, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $30($3, $4)
	goto $label$1 
	
.LABEL $label$2
	CALL $59(($5 + [8]), $3, *($0), $5)
	
.LABEL $label$1
	CALL $60($0, $1, $2)
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1397703940
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [64])
	$3 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [128])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $24(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $25(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $91(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	$5 = *($0)
	if ( ((int_64)$5 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$5 != (int_64)$2) ){ goto $label$1 }
	CALL $29($0, $1, $3, $4, [0])
	
.LABEL $label$1
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $99(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $99(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $91(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $91(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $26(*($1), ($0 + [32]))
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [176])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $28($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [160])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $27($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $95($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $90($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $95($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $91($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $92($7)
	return (unreachable)
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [688])
	*(($4 = CALL $90([88]))) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = (int_64)1000000
	*($4 + [24]) = (int_64)1000
	*($4 + [32]) = (int_64)100000000
	*($4 + [40]) = (int_64)1000
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = $1
	*($9 + [104]) = (($9 + [16]) + [72])
	*($9 + [100]) = ($9 + [16])
	*($9 + [96]) = ($9 + [16])
	CALL $43(($9 + [96]), $4)
	$5 = *($4)
	*($4 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159542211379200, $2, $5, ($9 + [16]), [72])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [96]) = $4
	$5 = *($4)
	*($9 + [16]) = $5
	$6 = *($4 + [76])
	*($9 + [12]) = $6
	$8 = ($1 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($9 + [96]) = [0]
	*($7) = $4
	*($8) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $57(($1 + [24]), ($9 + [96]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [96])
	*($9 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $91($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [112])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [768])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [816])
	*($1 + [12]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [880])
	*($5 + [88]) = ($5 + [72])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	CALL $43(($5 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $5, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [688])
	*(($4 = CALL $90([88]))) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = (int_64)1000000
	*($4 + [24]) = (int_64)1000
	*($4 + [32]) = (int_64)100000000
	*($4 + [40]) = (int_64)1000
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = $1
	*($9 + [104]) = (($9 + [16]) + [72])
	*($9 + [100]) = ($9 + [16])
	*($9 + [96]) = ($9 + [16])
	CALL $43(($9 + [96]), $4)
	$5 = *($4)
	*($4 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159542211379200, $2, $5, ($9 + [16]), [72])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [96]) = $4
	$5 = *($4)
	*($9 + [16]) = $5
	$6 = *($4 + [76])
	*($9 + [12]) = $6
	$8 = ($1 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($9 + [96]) = [0]
	*($7) = $4
	*($8) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $57(($1 + [24]), ($9 + [96]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [96])
	*($9 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $91($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [112])
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $26($0, ($1 + [40]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [160])
	CALL memcpy(($1 + [52]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [160])
	CALL memcpy(($1 + [72]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [688])
	*(($4 = CALL $90([88]))) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = (int_64)1000000
	*($4 + [24]) = (int_64)1000
	*($4 + [32]) = (int_64)100000000
	*($4 + [40]) = (int_64)1000
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = $1
	*($9 + [104]) = (($9 + [16]) + [72])
	*($9 + [100]) = ($9 + [16])
	*($9 + [96]) = ($9 + [16])
	CALL $43(($9 + [96]), $4)
	$5 = *($4)
	*($4 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159542211379200, $2, $5, ($9 + [16]), [72])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [96]) = $4
	$5 = *($4)
	*($9 + [16]) = $5
	$6 = *($4 + [76])
	*($9 + [12]) = $6
	$8 = ($1 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($9 + [96]) = [0]
	*($7) = $4
	*($8) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $57(($1 + [24]), ($9 + [96]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [96])
	*($9 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $91($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [112])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [768])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [816])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [880])
	*($5 + [88]) = ($5 + [72])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	CALL $43(($5 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $5, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1312])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $90([88])
	$4 = CALL $38($6)
	*($6 + [76]) = $0
	CALL $64(($8 + [32]), $4)
	*($6 + [84]) = [-1]
	*($6 + [80]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [80])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $40(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$10 }
	CALL $91(*(($4 + [48])))
	
.LABEL $label$10
	CALL $91($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	if ( ($1 == 0) ){ goto $label$1 }
	$6 = CALL db_lowerbound_i64(*($0 + [88]), *(($0 + [96])), (int_64)-6712989470042357760, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$3 = ($0 + [88])
	$6 = CALL $61($3, $6)
	$4 = (CASTING uint_64)(uint_32 $1)
	if ( ($2 == 0) ){ goto $label$3 }
	
.LOOP $label$4:
	if ( ((uint_64)*($6 + [8]) > (uint_64)$4) ){ goto $label$2 }
	$7 = [0]
	$5 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($5, [1520])
	CALL eosio_assert($5, [1568])
	$5 = CALL db_next_i64(*($6 + [80]), ($8 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$7 = CALL $61($3, $5)
	
.LABEL $label$5
	CALL $62($3, $6)
	$6 = $7
	if ( $7 ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	
.LOOP $label$6:
	if ( ((uint_64)*($6 + [8]) > (uint_64)$4) ){ goto $label$2 }
	if ( (*($6 + [52]) == 0) ){ goto $label$7 }
	$7 = [0]
	$5 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($5, [1520])
	CALL eosio_assert($5, [1568])
	$5 = CALL db_next_i64(*($6 + [80]), ($8 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$7 = CALL $61($3, $5)
	
.LABEL $label$8
	CALL $62($3, $6)
	$6 = $7
	if ( $6 ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$7
	CALL eosio_assert([1], [1568])
	$7 = *($6 + [80])
	$6 = [0]
	$7 = CALL db_next_i64($7, ($8 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $61($3, $7)
	
.LABEL $label$9
	if ( $6 ){ goto $label$6 }
	
.LABEL $label$2
	$6 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)7035929504123977728, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [48])
	$6 = CALL $33($3, $6)
	$4 = (CASTING uint_64)(uint_32 $1)
	if ( ($2 == 0) ){ goto $label$10 }
	
.LOOP $label$11:
	if ( ((uint_64)*($6) > (uint_64)$4) ){ goto $label$1 }
	$7 = [0]
	$5 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($5, [1520])
	CALL eosio_assert($5, [1568])
	$5 = CALL db_next_i64(*($6 + [92]), ($8 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	$7 = CALL $33($3, $5)
	
.LABEL $label$12
	CALL $63($3, $6)
	$6 = $7
	if ( $7 ){ goto $label$11 }
	goto $label$1 
	
.LABEL $label$10
	
.LOOP $label$13:
	if ( ((uint_64)*($6) > (uint_64)$4) ){ goto $label$1 }
	if ( (*($6 + [12]) == 0) ){ goto $label$14 }
	$7 = [0]
	$5 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($5, [1520])
	CALL eosio_assert($5, [1568])
	$5 = CALL db_next_i64(*($6 + [92]), ($8 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$15 }
	$7 = CALL $33($3, $5)
	
.LABEL $label$15
	CALL $63($3, $6)
	$6 = $7
	if ( $6 ){ goto $label$13 }
	goto $label$1 
	
.LABEL $label$14
	CALL eosio_assert([1], [1568])
	$7 = *($6 + [92])
	$6 = [0]
	$7 = CALL db_next_i64($7, ($8 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$16 }
	$6 = CALL $33($3, $7)
	
.LABEL $label$16
	if ( $6 ){ goto $label$13 }
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [1600])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [1648])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1712])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $91($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $91($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [92]))
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [76]) == (int_32)$0), [1600])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [1648])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1712])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$7 }
	CALL $91(*(($4 + [48])))
	
.LABEL $label$7
	CALL $91($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$10 }
	CALL $91(*(($4 + [48])))
	
.LABEL $label$10
	CALL $91($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [80]))
	$7 = *($1 + [84])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6712989470042357760, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx64_remove($7)
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $90($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $104 ()
{
	(unreachable)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10364])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10172]
	$1 = (((int_32)$2 * (int_32)[12]) + [10172])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $88 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10470]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10472])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10470]) = [1]
	$7 = ($7 << [16])
	*([0] + [10472]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10472])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10472]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10470]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10470]) = [1]
	$3 = ($3 << [16])
	*([0] + [10472]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10472])
	
.LABEL $label$8
	*([0] + [10472]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $88($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10384])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $87([1980], $0)
}

void .FUNC $85 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [768])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [816])
	$5 = *(*($3))
	*($1 + [12]) = [1]
	*($1 + [16]) = $5
	$4 = *($1)
	$5 = *($3 + [4])
	*($1 + [56]) = *($5)
	*(($1 + [64])) = *(($5 + [8]))
	$3 = *($3 + [8])
	*($1 + [72]) = *($3)
	*(($1 + [80])) = *(($3 + [8]))
	CALL eosio_assert([1], [880])
	*($6 + [104]) = ($6 + [84])
	*($6 + [100]) = $6
	*($6 + [96]) = $6
	CALL $45(($6 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $6, [84])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [112])
}

int_32 .FUNC $84 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$7 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [1568])
	$8 = *($0 + [4])
	$6 = *($8 + [84])
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$1 }
	$6 = *(*($0))
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-6712989470042357760, ($9 + [8]), *($8))
	*(*(($0 + [4])) + [84]) = $6
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($6, ($9 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$3 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$4:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$3 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [76]) == (int_32)$2), [544])
	goto $label$5 
	
.LABEL $label$6
	$7 = CALL $61($2, CALL $fimport$6(*($2), *($2 + [8]), (int_64)-6712989470042357760, $3))
	CALL eosio_assert(((int_32)*($7 + [76]) == (int_32)$2), [544])
	
.LABEL $label$5
	*($7 + [84]) = $1
	
.LABEL $label$2
	*(($0 + [4])) = $7
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $83 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [76]) == (int_32)$0), [768])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [816])
	$3 = *($3)
	*($1 + [56]) = *($3)
	*(($1 + [68])) = *(($3 + [12]))
	*(($1 + [64])) = *(($3 + [8]))
	*(($1 + [60])) = *(($3 + [4]))
	*(($8 = $7) + [24]) = *($1 + [8])
	$4 = *($1)
	*($1 + [52]) = [1]
	*($1 + [72]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [880])
	$3 = *($1 + [40])
	$5 = ( *(($1 + [44])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [64])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8 + [12]) = $7
	*($8 + [8]) = $7
	*($8 + [16]) = ($7 + $3)
	CALL $41(($8 + [8]), $1)
	CALL db_update_i64(*($1 + [80]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($8 + [40]) = *(($1 + [8]))
	if ( (CALL memcmp(($8 + [24]), ($8 + [40]), [8]) == 0) ){ goto $label$6 }
	$3 = *($1 + [84])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6712989470042357760, ($8 + [32]), $4)
	*(($1 + [84])) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($8 + [40]))
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_32 $22
	int_32 $23
	$23 = (*([0] + [4]) - [32])
	*([0] + [4]) = $23
	*(($23 + [24])) = (int_64)0
	*($23 + [16]) = (int_64)0
	*($23 + [8]) = (int_64)0
	CALL $32(($23 + [8]), ($2 + [40]), [44])
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [64])
	$18 = [0]
	$14 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$19 = [1]
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$19 = [0]
	
.LABEL $label$1
	CALL eosio_assert($19, [128])
	*(($0 + [8])) = *(($2 + [32]))
	$4 = *($23 + [12])
	$22 = *($23 + [8])
	$13 = ((int_32)$22 == (int_32)$4)
	if ( $13 ){ goto $label$6 }
	$15 = ($22 + [13])
	$16 = $22
	$17 = [0]
	
.LOOP $label$7:
	$20 = [1]
	if ( *($16) ){ goto $label$8 }
	$5 = *($16 + [56])
	$20 = [1]
	$19 = [0]
	$18 = $15
	
.LOOP $label$9:
	if ( ((int_32)$19 >= (int_32)$5) ){ goto $label$8 }
	$20 = ((int_32)(((((((((((int_32)*(($18 + [-8])) != (int_32)[0]) + ((int_32)*(($18 + [-9])) != (int_32)[0])) + ((int_32)*(($18 + [-7])) != (int_32)[0])) + ((int_32)*(($18 + [-6])) != (int_32)[0])) + ((int_32)*(($18 + [-5])) != (int_32)[0])) + ((int_32)*(($18 + [-4])) != (int_32)[0])) + ((int_32)*(($18 + [-3])) != (int_32)[0])) + ((int_32)*(($18 + [-2])) != (int_32)[0])) + ((int_32)*(($18 + [-1])) != (int_32)[0])) + ((int_32)*($18) != (int_32)[0])) * (int_32)$20)
	$18 = ($18 + [10])
	$19 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[5]) ){ goto $label$9 }
	
.LABEL $label$8
	$15 = ($15 + [72])
	$17 = ($20 + $17)
	$16 = ($16 + [72])
	if ( ((int_32)$16 != (int_32)$4) ){ goto $label$7 }
	if ( ((int_32)$17 < (int_32)[1]) ){ goto $label$6 }
	if ( $13 ){ goto $label$6 }
	$14 = *($2 + [24])
	CALL eosio_assert([1], [1056])
	CALL eosio_assert([1], [1072])
	$6 = ((int_64)$14 / (int_64)(CASTING int_64)(int_32 $17))
	$18 = *($23 + [12])
	$22 = *($23 + [8])
	if ( ((int_32)$22 == (int_32)$18) ){ goto $label$6 }
	$7 = ((uint_32)$3 % (uint_32)[10])
	$19 = ((uint_32)$3 % (uint_32)[100])
	if ( ((int_32)$19 != (int_32)[88]) ){ goto $label$10 }
	
.LOOP $label$11:
	$18 = ($18 + [-72])
	if ( ((int_32)$22 != (int_32)$18) ){ goto $label$11 }
	goto $label$6 
	
.LABEL $label$10
	$8 = ($3 & [1])
	$20 = ($22 + [-6])
	$21 = (int_64)0
	$19 = ($19 & [127])
	$16 = ((int_32)$19 == (int_32)[22])
	$4 = ((int_32)$19 == (int_32)[66])
	$11 = ((int_32)$19 == (int_32)[88])
	$12 = ($7 <= [5])
	$19 = $22
	
.LOOP $label$12:
	if ( $16 ){ goto $label$13 }
	if ( $4 ){ goto $label$13 }
	if ( $11 ){ goto $label$13 }
	$9 = *($19)
	if ( ((uint_32)$9 > (uint_32)[8]) ){ goto $label$13 }
	goto $label$20 
	
.LABEL $label$20
	$5 = *($19 + [56])
	if ( ($5 == 0) ){ goto $label$13 }
	$10 = ($5 + [-5])
	$17 = ($20 + ((int_32)$5 * (int_32)[10]))
	$15 = $3
	
.LOOP $label$21:
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$15 }
	if ( ((int_32)$5 <= (int_32)$10) ){ goto $label$15 }
	$2 = (((uint_32)$15 % (uint_32)[10]) | [48])
	if ( ((uint_32)(($2 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$13 }
	$15 = ((uint_32)$15 / (uint_32)[10])
	$5 = ($5 + [-1])
	$13 = ( [0] ? $17 : ((uint_32)$5 > (uint_32)[4]) )
	$17 = ($17 + [-10])
	if ( *((($13 + $2) + [-48])) ){ goto $label$21 }
	goto $label$13 
	
.LABEL $label$19
	$14 = (int_64)2
	if ( ((uint_32)$7 > (uint_32)[4]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$18
	$14 = (int_64)2
	if ( $12 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$17
	$14 = (int_64)2
	if ( $8 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$14 = (int_64)2
	if ( ($8 == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$14 = (int_64)2
	if ( $9 ){ goto $label$14 }
	$5 = *($19 + [56])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$22 }
	$14 = (int_64)10
	if ( ((int_32)$5 == (int_32)[1]) ){ goto $label$14 }
	$14 = (int_64)100
	if ( ((int_32)$5 < (int_32)[3]) ){ goto $label$14 }
	$14 = (int_64)1000
	if ( ((int_32)$5 == (int_32)[3]) ){ goto $label$14 }
	$14 = ( (int_64)100000 ? (int_64)10000 : ((int_32)$5 > (int_32)[4]) )
	goto $label$14 
	
.LABEL $label$22
	$14 = (int_64)1
	
.LABEL $label$14
	$21 = ((int_64)$21 + (int_64)((int_64)$14 * (int_64)$6))
	*($0) = $21
	
.LABEL $label$13
	$20 = ($20 + [72])
	$19 = ($19 + [72])
	if ( ((int_32)$19 != (int_32)$18) ){ goto $label$12 }
	
.LABEL $label$6
	if ( ((*($23 + [20]) & [1]) == 0) ){ goto $label$23 }
	CALL $91(*(($23 + [28])))
	$22 = *($23 + [8])
	
.LABEL $label$23
	if ( ($22 == 0) ){ goto $label$24 }
	$18 = *($23 + [12])
	if ( ((int_32)$18 == (int_32)$22) ){ goto $label$26 }
	$19 = ([0] - $22)
	$18 = ($18 + [-12])
	
.LOOP $label$27:
	if ( ((*($18) & [1]) == 0) ){ goto $label$28 }
	CALL $91(*(($18 + [8])))
	
.LABEL $label$28
	$18 = ($18 + [-72])
	if ( ((int_32)($18 + $19) != (int_32)[-12]) ){ goto $label$27 }
	$18 = *($23 + [8])
	goto $label$25 
	
.LABEL $label$26
	$18 = $22
	
.LABEL $label$25
	*($23 + [12]) = $22
	CALL $91($18)
	
.LABEL $label$24
	*([0] + [4]) = ($23 + [32])
	$9
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-6712989470042357760, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [76]) == (int_32)$4), [544])
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$8 = CALL db_find_i64(*($4), *($4 + [8]), (int_64)-6712989470042357760, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $61($4, $8)
	CALL eosio_assert(((int_32)*($2 + [76]) == (int_32)$4), [544])
	
.LABEL $label$4
	*($2 + [84]) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [688])
	*(($4 = CALL $90([88]))) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = (int_64)1000000
	*($4 + [24]) = (int_64)1000
	*($4 + [32]) = (int_64)100000000
	*($4 + [40]) = (int_64)1000
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = $1
	*($9 + [104]) = (($9 + [16]) + [72])
	*($9 + [100]) = ($9 + [16])
	*($9 + [96]) = ($9 + [16])
	CALL $43(($9 + [96]), $4)
	$5 = *($4)
	*($4 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159542211379200, $2, $5, ($9 + [16]), [72])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [96]) = $4
	$5 = *($4)
	*($9 + [16]) = $5
	$6 = *($4 + [76])
	*($9 + [12]) = $6
	$8 = ($1 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($9 + [96]) = [0]
	*($7) = $4
	*($8) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $57(($1 + [24]), ($9 + [96]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [96])
	*($9 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $91($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [112])
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [768])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [816])
	*($1 + [40]) = *(*($3))
	*($1 + [32]) = *(*($3 + [4]))
	$4 = *($1)
	CALL eosio_assert([1], [880])
	*($5 + [88]) = ($5 + [72])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	CALL $43(($5 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $5, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [688])
	*(($4 = CALL $90([88]))) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = (int_64)1000000
	*($4 + [24]) = (int_64)1000
	*($4 + [32]) = (int_64)100000000
	*($4 + [40]) = (int_64)1000
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = $1
	*($9 + [104]) = (($9 + [16]) + [72])
	*($9 + [100]) = ($9 + [16])
	*($9 + [96]) = ($9 + [16])
	CALL $43(($9 + [96]), $4)
	$5 = *($4)
	*($4 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159542211379200, $2, $5, ($9 + [16]), [72])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [96]) = $4
	$5 = *($4)
	*($9 + [16]) = $5
	$6 = *($4 + [76])
	*($9 + [12]) = $6
	$8 = ($1 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($9 + [96]) = [0]
	*($7) = $4
	*($8) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $57(($1 + [24]), ($9 + [96]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [96])
	*($9 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $91($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [112])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [768])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [816])
	*($1 + [24]) = *(*($3))
	*($1 + [16]) = *(*($3 + [4]))
	$4 = *($1)
	CALL eosio_assert([1], [880])
	*($5 + [88]) = ($5 + [72])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	CALL $43(($5 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $5, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [688])
	*(($4 = CALL $90([88]))) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = (int_64)1000000
	*($4 + [24]) = (int_64)1000
	*($4 + [32]) = (int_64)100000000
	*($4 + [40]) = (int_64)1000
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = $1
	*($9 + [104]) = (($9 + [16]) + [72])
	*($9 + [100]) = ($9 + [16])
	*($9 + [96]) = ($9 + [16])
	CALL $43(($9 + [96]), $4)
	$5 = *($4)
	*($4 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159542211379200, $2, $5, ($9 + [16]), [72])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [96]) = $4
	$5 = *($4)
	*($9 + [16]) = $5
	$6 = *($4 + [76])
	*($9 + [12]) = $6
	$8 = ($1 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($9 + [96]) = [0]
	*($7) = $4
	*($8) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $57(($1 + [24]), ($9 + [96]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [96])
	*($9 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $91($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [112])
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $28($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [752])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [752])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $78(CALL $77($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [752])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [752])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [752])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [768])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [816])
	*($1 + [56]) = *(*($3))
	*($1 + [48]) = *(*($3 + [4]))
	$4 = *($1)
	CALL eosio_assert([1], [880])
	*($5 + [88]) = ($5 + [72])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	CALL $43(($5 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $5, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [32])
	$9 = $8
	*([0] + [4]) = $8
	$6 = *($0 + [4])
	*($1) = *(*($6))
	*($1 + [8]) = *(*($6 + [4]))
	$2 = *($0)
	*($1 + [52]) = [0]
	*($1 + [16]) = *(*($6 + [8]))
	$3 = *($6 + [12])
	*($1 + [24]) = *($3)
	*(($1 + [32])) = *(($3 + [8]))
	CALL $93(($1 + [40]), *($6 + [16]))
	$6 = *($1 + [40])
	$3 = ( *(($1 + [44])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($3 + [64])
	$7 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($6)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($8 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	*($9 + [12]) = $8
	*($9 + [8]) = $8
	*($9 + [16]) = ($8 + $6)
	CALL $41(($9 + [8]), $1)
	$7 = *($1)
	*($1 + [80]) = CALL db_store_i64(*($2 + [8]), (int_64)-6712989470042357760, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL free($8)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$7 = *(($2 + [8]))
	$4 = *(*(($0 + [8])))
	$5 = *($1)
	*($9 + [24]) = *(($1 + [8]))
	*($1 + [84]) = CALL db_idx64_store($7, (int_64)-6712989470042357760, $4, $5, ($9 + [24]))
	*([0] + [4]) = ($9 + [32])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [768])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [816])
	*($1 + [64]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [880])
	*($5 + [88]) = ($5 + [72])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	CALL $43(($5 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $5, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [688])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $90([88])
	CALL $38($3)
	*($3 + [76]) = $1
	CALL $39(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [80])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $40(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$4 }
	CALL $91(*(($1 + [48])))
	
.LABEL $label$4
	CALL $91($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [752])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [752])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [752])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [752])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [752])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $42(*($1), ($0 + [32]))
}

int_32 .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [96])
	*([0] + [4]) = $19
	$16 = CALL $97($1, $2, [0])
	$10 = ($0 + [12])
	$9 = ($19 + [68])
	$8 = (($19 + [80]) | [1])
	$7 = ($19 + [52])
	$6 = ($19 + [42])
	$5 = ($19 + [32])
	$4 = ($19 + [22])
	$3 = (($19 + [8]) | [4])
	$15 = (($19 + [80]) + [8])
	$11 = ($19 + [72])
	$12 = ($19 + [64])
	$14 = ($19 + [76])
	$17 = [0]
	
.LOOP $label$3:
	if ( ((int_32)$16 == (int_32)[-1]) ){ goto $label$2 }
	CALL $100(($19 + [80]), $1, $17, ($16 - $17), $1)
	$18 = *($19 + [80])
	if ( (( *($19 + [84]) ? uint_32($18 >> [1]) : ($18 & [1]) ) == 0) ){ goto $label$5 }
	CALL memset($3, [0], [10])
	CALL memset($4, [0], [10])
	CALL memset($5, [0], [10])
	CALL memset($6, [0], [10])
	CALL memset($7, [0], [10])
	*($11) = (int_64)0
	*($12) = (int_64)0
	$18 = *($19 + [80])
	$13 = ($18 & [1])
	if ( (CALL $53(($19 + [8]), ( *($15) ? $8 : $13 ), ( *($19 + [84]) ? uint_32($18 >> [1]) : $13 )) == 0) ){ goto $label$9 }
	$18 = ($0 + [4])
	$13 = *($18)
	if ( ((int_32)$13 == (int_32)*(($0 + [8]))) ){ goto $label$8 }
	CALL $54($13, ($19 + [8]))
	*($18) = (*($18) + [72])
	goto $label$7 
	
.LABEL $label$9
	CALL $93($10, $9)
	$13 = [1]
	goto $label$6 
	
.LABEL $label$8
	CALL $55($0, ($19 + [8]))
	
.LABEL $label$7
	$13 = [0]
	
.LABEL $label$6
	if ( ((*($9) & [1]) == 0) ){ goto $label$10 }
	CALL $91(*($14))
	
.LABEL $label$10
	$18 = [1]
	if ( $13 ){ goto $label$4 }
	
.LABEL $label$5
	$17 = ($16 + [1])
	$16 = CALL $97($1, $2, $17)
	$18 = [0]
	
.LABEL $label$4
	if ( ((*($19 + [80]) & [1]) == 0) ){ goto $label$11 }
	CALL $91(*($15))
	
.LABEL $label$11
	if ( ($18 == 0) ){ goto $label$3 }
	$16 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $100(($19 + [80]), $1, $17, [-1], $1)
	$16 = [1]
	$1 = *($19 + [80])
	if ( (( *($19 + [84]) ? uint_32($1 >> [1]) : ($1 & [1]) ) == 0) ){ goto $label$12 }
	CALL memset((($19 + [8]) | [4]), [0], [10])
	CALL memset(($19 + [22]), [0], [10])
	CALL memset(($19 + [32]), [0], [10])
	CALL memset(($19 + [42]), [0], [10])
	CALL memset(($19 + [52]), [0], [10])
	*(($19 + [72])) = (int_64)0
	*($19 + [64]) = (int_64)0
	$16 = *($19 + [80])
	$1 = ($16 & [1])
	if ( (CALL $53(($19 + [8]), ( *($19 + [88]) ? (($19 + [80]) | [1]) : $1 ), ( *($19 + [84]) ? uint_32($16 >> [1]) : $1 )) == 0) ){ goto $label$15 }
	$16 = *(($0 + [4]))
	if ( ((int_32)$16 == (int_32)*(($0 + [8]))) ){ goto $label$14 }
	CALL $54($16, ($19 + [8]))
	*(($16 = ($0 + [4]))) = (*($16) + [72])
	goto $label$13 
	
.LABEL $label$15
	CALL $93($10, ($19 + [68]))
	if ( ((*($19 + [68]) & [1]) == 0) ){ goto $label$16 }
	CALL $91(*(($19 + [76])))
	
.LABEL $label$16
	$16 = [0]
	goto $label$12 
	
.LABEL $label$14
	CALL $55($0, ($19 + [8]))
	
.LABEL $label$13
	$16 = [1]
	if ( ((*($19 + [68]) & [1]) == 0) ){ goto $label$12 }
	CALL $91(*(($19 + [76])))
	
.LABEL $label$12
	if ( ((*($19 + [80]) & [1]) == 0) ){ goto $label$1 }
	CALL $91(*($19 + [88]))
	
.LABEL $label$1
	*([0] + [4]) = ($19 + [96])
	return $16
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1312])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $90([104])
	$4 = CALL $50($6)
	*($6 + [88]) = $0
	CALL $52(($8 + [32]), $4)
	*($6 + [92]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [92])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $51(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $91($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1312])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $90([88]))) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [16]) = (int_64)1000000
	*($6 + [24]) = (int_64)1000
	*($6 + [32]) = (int_64)100000000
	*($6 + [40]) = (int_64)1000
	*($6 + [64]) = (int_64)0
	*($6 + [72]) = $0
	CALL $58(($8 + [32]), $6)
	*($6 + [76]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [76])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $57(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $91($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [688])
	*(($4 = CALL $90([88]))) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = (int_64)1000000
	*($4 + [24]) = (int_64)1000
	*($4 + [32]) = (int_64)100000000
	*($4 + [40]) = (int_64)1000
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = $1
	*($9 + [104]) = (($9 + [16]) + [72])
	*($9 + [100]) = ($9 + [16])
	*($9 + [96]) = ($9 + [16])
	CALL $43(($9 + [96]), $4)
	$5 = *($4)
	*($4 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159542211379200, $2, $5, ($9 + [16]), [72])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [96]) = $4
	$5 = *($4)
	*($9 + [16]) = $5
	$6 = *($4 + [76])
	*($9 + [12]) = $6
	$8 = ($1 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($9 + [96]) = [0]
	*($7) = $4
	*($8) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $57(($1 + [24]), ($9 + [96]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [96])
	*($9 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $91($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [112])
}