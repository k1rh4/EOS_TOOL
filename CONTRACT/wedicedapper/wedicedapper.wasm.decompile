
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "require_recipient" (func $fimport$1 (param i64)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$2 (param i32 i32)))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$5 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$6 (param i32 i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(table $0 1 1 anyfunc)

(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 8192))
(global $global$2 i32 (i32.const 8192))


void .FUNC $2 (int_32 $0)
{
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	CALL memory()
	CALL $2([0])
}