(data (i32.const 16896) "V1.1\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 16910) "code_apply...\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 17015) "transfer\00")
(data (i32.const 17024) "status\00")
(data (i32.const 17031) "cancelsale\00")
(data (i32.const 17042) "admin\00stoull\00")
(data (i32.const 17055) "cmessage\00")
(data (i32.const 17064) "dogame\00")
(data (i32.const 17071) "string is too long to be a valid name\00")
(data (i32.const 17109) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 17176) "character is not in allowed character set for names\00")
(data (i32.const 17228) " from: \00")
(data (i32.const 17236) " quantity: \00")
(data (i32.const 17248) " symbol: \00")
(data (i32.const 17258) " memo: \00")
(data (i32.const 17266) " code_: \00")
(data (i32.const 17275) " \00")
(data (i32.const 17277) " CHECK_A \00")
(data (i32.const 17287) " CHECK_B \00")
(data (i32.const 17297) "sell\00")
(data (i32.const 17302) " CHECK_C \00")
(data (i32.const 17312) " CHECK_D \00")
(data (i32.const 17322) " CHECK_E \00")
(data (i32.const 17332) "SELL!\00")
(data (i32.const 17338) " coincontract:\00")
(data (i32.const 17353) " sym:\00: no conversion\00")
(data (i32.const 17375) " price:\00: out of range\00")
(data (i32.const 17398) " amount:\00")
(data (i32.const 17407) " p_restricted:\00")
(data (i32.const 17422) " p_bid:\00")
(data (i32.const 17430) " p_info:\00")
(data (i32.const 17439) " AMOUNT MINIMUM 0.1 EOS! \00")
(data (i32.const 17465) " ERROR SYMBOL! \00")
(data (i32.const 17481) " WRONG SYMBOL!!! \00")
(data (i32.const 17499) "EOS\00")
(data (i32.const 17503) " ERROR EOS SYMBOL! \00")
(data (i32.const 17523) " EOS NOT ALLOWED!!! \00")
(data (i32.const 17544) " AMOUNT DOES NOT MATCH! \00")
(data (i32.const 17569) " Contract is locked for maintenance! \00")
(data (i32.const 17607) " bundlesnum(globals):\00")
(data (i32.const 17629) " p_bid:...[\00")
(data (i32.const 17641) "] value:[\00")
(data (i32.const 17651) "]\c2\a0\00")
(data (i32.const 17655) " BUNDLE STILL EXIST1!!! \00")
(data (i32.const 17680) " Bundle still exist! \00")
(data (i32.const 17702) " BUNDLE STILL EXIST2!!! \00")
(data (i32.const 17727) "Bundle does not exit \00")
(data (i32.const 17749) "buy\00")
(data (i32.const 17753) "BUY: \00")
(data (i32.const 17759) "eosio.token\00")
(data (i32.const 17771) " ONLY BUY WITH EOS! \00")
(data (i32.const 17792) " AAA \00")
(data (i32.const 17798) "Found! ts:\00")
(data (i32.const 17809) " price: \00")
(data (i32.const 17818) " b_amount:\00")
(data (i32.const 17829) " b_tokencontract:\00")
(data (i32.const 17847) " b_symbol:\00")
(data (i32.const 17858) " b_seller:\00")
(data (i32.const 17869) " b_restricted xxx:\00")
(data (i32.const 17888) " b_dealed:\00")
(data (i32.const 17899) " ORDER MUST BE OPEN! \00")
(data (i32.const 17922) "Is restricted an OK!\00")
(data (i32.const 17943) "Is restircted, wrong user! \00")
(data (i32.const 17971) " ORDER IS RESTRICTED TO A SINGLE ACCOUNT \00")
(data (i32.const 18013) " total_net:\00")
(data (i32.const 18025) " fee:\00")
(data (i32.const 18031) " total:\00")
(data (i32.const 18039) " data.quantity.amount:\00")
(data (i32.const 18062) " PAYMENT TO LOW \00")
(data (i32.const 18079) "DEXUNIVERSAL - Your tokens (\00")
(data (i32.const 18108) "/\00")
(data (i32.const 18110) "). OrderID: \00")
(data (i32.const 18123) " are sold!\00")
(data (i32.const 18134) "DEXUNIVERSAL - Delivery of your acquired tokens (\00")
(data (i32.const 18184) "active\00")
(data (i32.const 18191) "frogdividend\00")
(data (i32.const 18204) " NOT FOUND!\00")
(data (i32.const 18216) " FIN (buy)! \00")
(data (i32.const 18229) "catch\00")
(data (i32.const 18235) "Symbol: \00")
(data (i32.const 18244) "FROG\00")
(data (i32.const 18249) "Symbol2: \00")
(data (i32.const 18259) "Must pay with EOS token!\00")
(data (i32.const 18284) "read\00")
(data (i32.const 18289) "get\00")
(data (i32.const 18293) ",\00")
(data (i32.const 18295) "string is too long to be a valid symbol_code\00")
(data (i32.const 18340) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 18393) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18444) "error reading iterator\00")
(data (i32.const 18467) "cannot create objects in table of another contract\00")
(data (i32.const 18518) "write\00")
(data (i32.const 18524) "cannot pass end iterator to modify\00")
(data (i32.const 18559) "object passed to modify is not in multi_index\00")
(data (i32.const 18605) "cannot modify objects in table of another contract\00")
(data (i32.const 18656) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18716) " I\00\00")
(data (i32.const 18720) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 18753) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 18802) "invalid symbol name\00")
(data (i32.const 18822) " Doit dexuniversal - \00")
(data (i32.const 18844) " VERSION: \00")
(data (i32.const 18855) " DO cancelsale - \00")
(data (i32.const 18873) " data...[\00")
(data (i32.const 18883) " first:...[\00")
(data (i32.const 18895) "]  \c2\a0\00")
(data (i32.const 18901) " ALF2 \00")
(data (i32.const 18908) " DOES NOT EXIST! \00")
(data (i32.const 18926) " Seller: \00")
(data (i32.const 18936) "Found! \00")
(data (i32.const 18944) "dealed! \00")
(data (i32.const 18953) " STILL CANCELED! \00")
(data (i32.const 18971) "Cancel order: \00")
(data (i32.const 18986) "FINa \00")
(data (i32.const 18992) "Not found! \00")
(data (i32.const 19004) " FIN\00")
(data (i32.const 19009) " ADMIN_1 \00")
(data (i32.const 19019) " weiter1 \00")
(data (i32.const 19029) " weiter2 \00")
(data (i32.const 19039) " ADMIN...[\00")
(data (i32.const 19050) "test\00")
(data (i32.const 19055) " test... \00")
(data (i32.const 19065) "init\00")
(data (i32.const 19070) " Init... \00")
(data (i32.const 19080) " globals exists\00")
(data (i32.const 19096) " globals will be created... \00")
(data (i32.const 19125) "reset\00")
(data (i32.const 19131) "Reset \00")
(data (i32.const 19138) " FIN-Reset \00")
(data (i32.const 19150) "resetbundles\00")
(data (i32.const 19163) "Reset bundles \00")
(data (i32.const 19178) " FIN-Reset bundles\00")
(data (i32.const 19197) "cannot pass end iterator to erase\00")
(data (i32.const 19231) "cannot increment end iterator\00")
(data (i32.const 19261) "object passed to erase is not in multi_index\00")
(data (i32.const 19306) "cannot erase objects in table of another contract\00")
(data (i32.const 19356) "attempt to remove object that was not in multi_index\00")
(data (i32.const 19409) " DOGAME-1 \00")
(data (i32.const 19420) " DOGAME-2 \00")
(data (i32.const 19440) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "prints" (func $fimport$0 (param i32)))
(import "env" "printn" (func $fimport$1 (param i64)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$3 (result i32)))
(import "env" "read_action_data" (func $fimport$4 (param i32 i32) (result i32)))
(import "env" "printi" (func $fimport$5 (param i64)))
(import "env" "printui" (func $fimport$6 (param i64)))
(import "env" "prints_l" (func $fimport$7 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "send_inline" (func $fimport$9 (param i32 i32)))
(import "env" "memcpy" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$11 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$14 (param i64)))
(import "env" "current_receiver" (func $fimport$15 (result i64)))
(import "env" "db_get_i64" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$17 (result i64)))
(import "env" "db_store_i64" (func $fimport$18 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$19 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$20 (param i32)))
(import "env" "abort" (func $fimport$21))
(import "env" "memset" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$31 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$34 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$35 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$38 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$40 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$41 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$42 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $2))
(export "_ZdlPv" (func $45))
(export "_Znwj" (func $43))
(export "_Znaj" (func $44))
(export "_ZdaPv" (func $46))
(export "_ZnwjSt11align_val_t" (func $47))
(export "_ZnajSt11align_val_t" (func $48))
(export "_ZdlPvSt11align_val_t" (func $49))
(export "_ZdaPvSt11align_val_t" (func $50))
(table $0 8 8 anyfunc)
(elem (i32.const 1) $4 $6 $7 $8 $9 $11 $1)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19697))
(global $global$2 i32 (i32.const 19697))


int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [18518])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [18518])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $89($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $85($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8204])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $85($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $42 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	*([0] + [8192 align=4]) = (int_64)0
	*([0] + [8200]) = [0]
	$0 = CALL $80([16896])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*([0] + [8192]) = ($0 << [1])
	$1 = [8193]
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8192]) = ($2 | [1])
	*([0] + [8200]) = $1
	*([0] + [8196]) = $0
	
.LABEL $label$3
	CALL memcpy($1, [16896], $0)
	
.LABEL $label$2
	*(($1 + $0)) = [0]
	CALL $71([7], [0], [8192])
	return (unreachable)
	
.LABEL $label$1
	CALL $51([8192])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($1 + [8]) = [0]
	*($1 + [16]) = (int_64)0
	*($1) = *(*(*($0 + [4])))
	$3 = *($0)
	CALL eosio_assert([1], [18518])
	CALL memcpy($2, $1, [8])
	*($2 + [31]) = *($1 + [8])
	CALL eosio_assert([1], [18518])
	CALL memcpy(($2 | [8]), ($2 + [31]), [1])
	CALL eosio_assert([1], [18518])
	CALL memcpy(($2 | [9]), ($1 + [16]), [8])
	$4 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)7235159537265672192, *(*($0 + [8])), $4, $2, [17])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18518])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [18518])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $83(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8204])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $83(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $89($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [112])
	$global$0 = $1
	CALL prints([19009])
	CALL require_auth(*($0))
	CALL prints([19019])
	CALL $22(($1 + [88]))
	CALL prints([19029])
	CALL prints([19039])
	$2 = *($1 + [88])
	$3 = ($2 & [1])
	CALL prints_l(( *($1 + [96]) ? (($1 + [88]) | [1]) : $3 ), ( *($1 + [92]) ? uint_32($2 >> [1]) : $3 ))
	CALL prints([17651])
	*($1 + [80]) = [0]
	*($1 + [72]) = (int_64)0
	$2 = CALL $52(($1 + [56]), ($1 + [88]))
	CALL $13($0, ($1 + [72]), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	$2 = *($1 + [72])
	CALL prints([18883])
	$3 = *($2)
	$4 = ($3 & [1])
	CALL prints_l(( *($2 + [8]) ? ($2 + [1]) : $4 ), ( *($2 + [4]) ? uint_32($3 >> [1]) : $4 ))
	CALL prints([17651])
	$2 = *($1 + [72])
	$3 = *($2)
	$4 = CALL $80([19050])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$2 }
	if ( CALL $59($2, [0], [-1], [19050], $4) ){ goto $label$2 }
	CALL prints([19055])
	
.LABEL $label$2
	$2 = *($1 + [72])
	$3 = *($2)
	$4 = CALL $80([19065])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$3 }
	if ( CALL $59($2, [0], [-1], [19065], $4) ){ goto $label$3 }
	CALL prints([19070])
	*($1 + [52]) = [0]
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	$5 = *($0)
	*($1 + [8]) = $5
	*($1 + [16]) = $5
	*($1 + [32]) = (int_64)0
	$2 = CALL db_find_i64($5, $5, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $14(($1 + [8]), $2) + [24]) == (int_32)($1 + [8])), [18393])
	CALL prints([19080])
	$4 = *($1 + [32])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL prints([19096])
	$5 = *($0)
	*($1) = ($1 + [52])
	CALL $24(($1 + [104]), ($1 + [8]), $5, $1)
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($1 + [36])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($1 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $4
	
.LABEL $label$6
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$3
	$2 = *($1 + [88])
	$3 = CALL $80([19125])
	if ( ((int_32)$3 != (int_32)( *($1 + [92]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$10 }
	if ( CALL $59(($1 + [88]), [0], [-1], [19125], $3) ){ goto $label$10 }
	CALL prints([19131])
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	$5 = *($0)
	*($1 + [8]) = $5
	*($1 + [16]) = $5
	*($1 + [32]) = (int_64)0
	$2 = CALL db_lowerbound_i64($5, $5, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$11 }
	$3 = CALL $14(($1 + [8]), $2)
	
.LOOP $label$12:
	CALL eosio_assert([1], [19197])
	CALL eosio_assert([1], [19231])
	$2 = [0]
	$4 = CALL db_next_i64(*($3 + [28]), ($1 + [104]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$2 = CALL $14(($1 + [8]), $4)
	
.LABEL $label$13
	CALL $25(($1 + [8]), $3)
	$3 = $2
	if ( $2 ){ goto $label$12 }
	
.LABEL $label$11
	CALL prints([19138])
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$10 }
	$6 = ($1 + [36])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$17 }
	CALL _ZdlPv($3)
	
.LABEL $label$17
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($1 + [32]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $4
	
.LABEL $label$14
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$2 = *($1 + [88])
	$3 = CALL $80([19150])
	if ( ((int_32)$3 != (int_32)( *($1 + [92]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$18 }
	if ( CALL $59(($1 + [88]), [0], [-1], [19150], $3) ){ goto $label$18 }
	CALL prints([19163])
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	$5 = *($0)
	*($1 + [8]) = $5
	*($1 + [16]) = $5
	*($1 + [32]) = (int_64)0
	$2 = CALL db_lowerbound_i64($5, $5, (int_64)4514463537124250000, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$19 }
	$3 = CALL $15(($1 + [8]), $2)
	
.LOOP $label$20:
	CALL eosio_assert([1], [19197])
	CALL eosio_assert([1], [19231])
	$2 = [0]
	$0 = CALL db_next_i64(*($3 + [112]), ($1 + [104]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$21 }
	$2 = CALL $15(($1 + [8]), $0)
	
.LABEL $label$21
	CALL $26(($1 + [8]), $3)
	$3 = $2
	if ( $2 ){ goto $label$20 }
	
.LABEL $label$19
	CALL prints([19178])
	$0 = *($1 + [32])
	if ( ($0 == 0) ){ goto $label$18 }
	$4 = ($1 + [36])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$25 }
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$26
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($2 + [40])))
	
.LABEL $label$27
	CALL _ZdlPv($2)
	
.LABEL $label$25
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$24 }
	$2 = *(($1 + [32]))
	goto $label$22 
	
.LABEL $label$23
	$2 = $0
	
.LABEL $label$22
	*($4) = $0
	CALL _ZdlPv($2)
	
.LABEL $label$18
	$0 = *($1 + [72])
	if ( ($0 == 0) ){ goto $label$28 }
	$3 = *($1 + [76])
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$30 }
	
.LOOP $label$31:
	$2 = ($3 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$32
	$3 = $2
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$31 }
	$2 = *($1 + [72])
	goto $label$29 
	
.LABEL $label$30
	$2 = $0
	
.LABEL $label$29
	*($1 + [76]) = $0
	CALL _ZdlPv($2)
	
.LABEL $label$28
	if ( ((*($1 + [88]) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*(($1 + [96])))
	
.LABEL $label$33
	$global$0 = ($1 + [112])
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL require_recipient($1)
}

void .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	CALL prints([18822])
	CALL prints([18844])
	$1 = *([0] + [8192])
	$2 = ($1 & [1])
	CALL prints_l(( *([0] + [8200]) ? [8193] : $2 ), ( *([0] + [8196]) ? uint_32($1 >> [1]) : $2 ))
	CALL prints([17275])
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$1 = ($global$0 - [288])
	$global$0 = $1
	CALL prints([18855])
	CALL $22(($1 + [256]))
	CALL prints([18873])
	$2 = *($1 + [256])
	$3 = ($2 & [1])
	CALL prints_l(( *($1 + [264]) ? (($1 + [256]) | [1]) : $3 ), ( *($1 + [260]) ? uint_32($2 >> [1]) : $3 ))
	CALL prints([17651])
	*($1 + [248]) = [0]
	*($1 + [240]) = (int_64)0
	$2 = CALL $52(($1 + [224]), ($1 + [256]))
	CALL $13($0, ($1 + [240]), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	$2 = *($1 + [240])
	CALL prints([18883])
	$3 = *($2)
	$4 = ($3 & [1])
	CALL prints_l(( *($2 + [8]) ? ($2 + [1]) : $4 ), ( *($2 + [4]) ? uint_32($3 >> [1]) : $4 ))
	CALL prints([18895])
	$2 = *($1 + [240])
	$3 = *($2)
	if ( ($3 & [1]) ){ goto $label$3 }
	$3 = uint_32($3 >> [1])
	$2 = ($2 + [1])
	goto $label$2 
	
.LABEL $label$3
	$3 = *($2 + [4])
	$2 = *($2 + [8])
	
.LABEL $label$2
	*($1 + [220]) = $3
	*($1 + [216]) = $2
	*($1 + [16]) = *($1 + [216])
	$5 = *(CALL $3(($1 + [24]), ($1 + [16])))
	CALL prints([18901])
	CALL printui($5)
	CALL prints([17275])
	*(($1 + [208])) = [0]
	*($1 + [192]) = (int_64)-1
	*($1 + [200]) = (int_64)0
	$6 = *($0)
	*($1 + [176]) = $6
	*($1 + [184]) = $6
	$7 = [0]
	$2 = CALL db_find_i64($6, $6, (int_64)4514463537124250000, $5)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$7 = CALL $15(($1 + [176]), $2)
	CALL eosio_assert(((int_32)*($7 + [108]) == (int_32)($1 + [176])), [18393])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18908])
	CALL prints([18926])
	CALL printn(*($7 + [64]))
	CALL prints([17275])
	CALL require_auth(*($7 + [64]))
	if ( ($7 == 0) ){ goto $label$12 }
	$6 = *($7 + [88])
	CALL prints([18936])
	CALL printui($6)
	CALL prints([17275])
	$6 = *($7 + [92])
	CALL prints([18944])
	CALL printui($6)
	CALL prints([17275])
	CALL eosio_assert((uint_64)($6 <= (int_64)2), [18953])
	$6 = *($0)
	CALL eosio_assert([1], [18524])
	CALL $23(($1 + [176]), $7, $6, ($1 + [24]))
	CALL $60(($1 + [160]), [18971], *($1 + [240]))
	$8 = *($7 + [56])
	$2 = *($7 + [32])
	if ( ($2 & [1]) ){ goto $label$11 }
	$9 = (($7 + [32]) + [1])
	$2 = uint_32($2 >> [1])
	if ( ((uint_32)$2 >= (uint_32)[8]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	CALL prints([18992])
	CALL prints([19004])
	$4 = *($1 + [200])
	if ( $4 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$11
	$9 = *(($7 + [40]))
	$2 = *(($7 + [36]))
	if ( ($2 <= [8]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL eosio_assert([0], [18295])
	goto $label$8 
	
.LABEL $label$9
	if ( $2 ){ goto $label$8 }
	$10 = (int_64)4
	goto $label$7 
	
.LABEL $label$8
	$6 = (int_64)0
	
.LOOP $label$13:
	$4 = (($9 + $2) + [-1])
	$3 = *($4)
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [18340])
	$3 = *($4)
	
.LABEL $label$14
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$13 }
	$10 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	
.LABEL $label$7
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18753])
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$5 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$6 = $5
	$3 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$6 = $5
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$4 = ($2 + [1])
	$2 = $4
	if ( $3 ){ goto $label$19 }
	$3 = [1]
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$3 = [0]
	
.LABEL $label$15
	CALL eosio_assert($3, [18802])
	$6 = *($0)
	*($1 + [88]) = [18184]
	*($1 + [92]) = CALL $80([18184])
	*($1 + [8]) = *($1 + [88])
	$2 = CALL $3(($1 + [96]), ($1 + [8]))
	*($1 + [104]) = $6
	*($1 + [112]) = *($2)
	$6 = *($7 + [24])
	*($1 + [72]) = [17015]
	*($1 + [76]) = CALL $80([17015])
	*($1) = *($1 + [72])
	$2 = CALL $3(($1 + [80]), $1)
	$5 = *(($7 + [64]))
	*(($1 + [48])) = $10
	*($1 + [24]) = *($0)
	*($1 + [40]) = $8
	*($1 + [32]) = $5
	CALL $52(($1 + [56]), ($1 + [160]))
	$2 = CALL $19(($1 + [120]), ($1 + [104]), $6, *($2), ($1 + [24]))
	CALL $20(($1 + [272]), $2)
	$3 = *($1 + [272])
	CALL send_inline($3, (*($1 + [276]) - $3))
	$3 = *($1 + [272])
	if ( ($3 == 0) ){ goto $label$20 }
	*($1 + [276]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$20
	$3 = *($2 + [28])
	if ( ($3 == 0) ){ goto $label$21 }
	*(($2 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$22 }
	*(($2 + [20])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$22
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($1 + [64])))
	
.LABEL $label$23
	CALL prints([18986])
	if ( ((*($1 + [160]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($1 + [168]))
	
.LABEL $label$24
	CALL prints([19004])
	$4 = *($1 + [200])
	if ( ($4 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$9 = ($1 + [204])
	$3 = *($9)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$26 }
	
.LOOP $label$27:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$28 }
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$29
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*(($2 + [40])))
	
.LABEL $label$30
	CALL _ZdlPv($2)
	
.LABEL $label$28
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$27 }
	$2 = *(($1 + [200]))
	goto $label$25 
	
.LABEL $label$26
	$2 = $4
	
.LABEL $label$25
	*($9) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$4 = *($1 + [240])
	if ( ($4 == 0) ){ goto $label$31 }
	$3 = *($1 + [244])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$33 }
	
.LOOP $label$34:
	$2 = ($3 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$35
	$3 = $2
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$34 }
	$2 = *($1 + [240])
	goto $label$32 
	
.LABEL $label$33
	$2 = $4
	
.LABEL $label$32
	*($1 + [244]) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$31
	if ( ((*($1 + [256]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($1 + [264])))
	
.LABEL $label$36
	$global$0 = ($1 + [288])
}

void .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	float_64 $21
	float_64 $22
	$1 = ($global$0 - [528])
	$global$0 = $1
	CALL $12(($1 + [464]))
	CALL prints([17228])
	CALL printn(*($1 + [464]))
	CALL prints([17236])
	CALL printi(*($1 + [480]))
	CALL prints([17248])
	$2 = ($1 + [488])
	CALL printui(*($2))
	CALL prints([18293])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$1 }
	$2 = [0]
	
.LOOP $label$3:
	*((($1 + [96]) + $2)) = $3
	$4 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[5]) ){ goto $label$2 }
	$2 = $4
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	
.LABEL $label$2
	CALL prints_l(($1 + [96]), $4)
	
.LABEL $label$1
	CALL prints([17258])
	$2 = *($1 + [496])
	$4 = ($2 & [1])
	CALL prints_l(( *(($1 + [504])) ? ($1 + [497]) : $4 ), ( *(($1 + [500])) ? uint_32($2 >> [1]) : $4 ))
	CALL prints([17266])
	CALL printn(*($0 + [8]))
	CALL prints([17275])
	CALL prints([17277])
	*($1 + [456]) = [0]
	*($1 + [448]) = (int_64)0
	$2 = CALL $52(($1 + [432]), ($1 + [496]))
	CALL $13($0, ($1 + [448]), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$4
	CALL prints([17287])
	$2 = *($1 + [448])
	$4 = *($2)
	$5 = CALL $80([17297])
	if ( ((int_32)$5 != (int_32)( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$5 }
	if ( CALL $59($2, [0], [-1], [17297], $5) ){ goto $label$5 }
	CALL prints([17302])
	$6 = CALL $52(($1 + [176]), (*($1 + [448]) + [24]))
	*($1 + [296]) = (CASTING int_64)(int_32 CALL $61((*($1 + [448]) + [36]), [0], [10]))
	CALL prints([17312])
	*($1 + [280]) = CALL $64((*($1 + [448]) + [48]), [0], [10])
	CALL prints([17322])
	$2 = *($1 + [448])
	$4 = *($2 + [60])
	if ( ($4 & [1]) ){ goto $label$7 }
	$4 = uint_32($4 >> [1])
	$2 = (($2 + [60]) + [1])
	goto $label$6 
	
.LABEL $label$7
	$4 = *(($2 + [64]))
	$2 = *(($2 + [68]))
	
.LABEL $label$6
	*($1 + [428]) = $4
	*($1 + [424]) = $2
	*($1 + [56]) = *($1 + [424])
	$7 = CALL $3(($1 + [264]), ($1 + [56]))
	$2 = *($1 + [448])
	$4 = *($2 + [12])
	if ( ($4 & [1]) ){ goto $label$9 }
	$4 = uint_32($4 >> [1])
	$2 = (($2 + [12]) + [1])
	goto $label$8 
	
.LABEL $label$9
	$4 = *(($2 + [16]))
	$2 = *(($2 + [20]))
	
.LABEL $label$8
	*($1 + [420]) = $4
	*($1 + [416]) = $2
	*($1 + [48]) = *($1 + [416])
	$8 = CALL $3(($1 + [232]), ($1 + [48]))
	$9 = CALL $52(($1 + [512]), (*($1 + [448]) + [72]))
	$10 = CALL $52(($1 + [400]), (*($1 + [448]) + [84]))
	CALL prints([17332])
	CALL prints([17338])
	CALL printn(*($8))
	CALL prints([17275])
	CALL prints([17353])
	$2 = *($1 + [176])
	$4 = ($2 & [1])
	$5 = ($6 + [1])
	CALL prints_l(( *($6 + [8]) ? $5 : $4 ), ( *($6 + [4]) ? uint_32($2 >> [1]) : $4 ))
	CALL prints([17275])
	CALL prints([17375])
	CALL printui(*($1 + [296]))
	CALL prints([17275])
	CALL prints([17398])
	CALL printui(*($1 + [280]))
	CALL prints([17275])
	CALL prints([17407])
	CALL printn(*($7))
	CALL prints([17275])
	CALL prints([17422])
	$2 = *($1 + [512])
	$4 = ($2 & [1])
	$11 = ($9 + [1])
	CALL prints_l(( *($9 + [8]) ? $11 : $4 ), ( *($9 + [4]) ? uint_32($2 >> [1]) : $4 ))
	CALL prints([17275])
	CALL prints([17430])
	$2 = *($1 + [400])
	$4 = ($2 & [1])
	CALL prints_l(( *($10 + [8]) ? ($10 + [1]) : $4 ), ( *($10 + [4]) ? uint_32($2 >> [1]) : $4 ))
	CALL prints([17275])
	$12 = [0]
	if ( ((uint_64)*($1 + [296]) > (uint_64)(int_64)999) ){ goto $label$10 }
	CALL prints([17439])
	CALL eosio_assert([0], [17439])
	$12 = [1]
	
.LABEL $label$10
	$4 = *(($6 + [8]))
	$13 = ($2 & [1])
	$2 = *($1 + [176])
	$2 = ( *(($6 + [4])) ? uint_32($2 >> [1]) : $13 )
	if ( ($2 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [18295])
	goto $label$13 
	
.LABEL $label$14
	if ( ($2 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$13 = ( $4 ? $5 : $13 )
	$3 = (int_64)0
	
.LOOP $label$15:
	$5 = (($13 + $2) + [-1])
	$4 = *($5)
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [18340])
	$4 = *($5)
	
.LABEL $label$16
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$15 }
	$3 = ((int_64)$3 << (int_64)8)
	goto $label$11 
	
.LABEL $label$12
	$3 = (int_64)0
	
.LABEL $label$11
	if ( ((int_64)*(($1 + [488])) == (int_64)((int_64)$3 | (int_64)4)) ){ goto $label$17 }
	CALL prints([17465])
	CALL eosio_assert([0], [17481])
	$12 = [1]
	
.LABEL $label$17
	$2 = CALL $80([17499])
	if ( ($2 <= [8]) ){ goto $label$21 }
	CALL eosio_assert([0], [18295])
	goto $label$20 
	
.LABEL $label$21
	if ( ($2 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$3 = (int_64)0
	
.LOOP $label$22:
	$4 = *(($2 + [17498]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$23 }
	CALL eosio_assert([0], [18340])
	
.LABEL $label$23
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$22 }
	$3 = ((int_64)$3 << (int_64)8)
	goto $label$18 
	
.LABEL $label$19
	$3 = (int_64)0
	
.LABEL $label$18
	if ( ((int_64)*(($1 + [488])) != (int_64)((int_64)$3 | (int_64)4)) ){ goto $label$24 }
	CALL prints([17503])
	CALL eosio_assert([0], [17523])
	$12 = [1]
	
.LABEL $label$24
	CALL eosio_assert(((int_64)*($1 + [280]) == (int_64)*(($1 + [480]))), [17544])
	*((($1 + [96]) + [32])) = [0]
	*($1 + [112]) = (int_64)-1
	$3 = *($0)
	*($1 + [96]) = $3
	*($1 + [104]) = $3
	*($1 + [120]) = (int_64)0
	$14 = [0]
	$2 = CALL db_find_i64($3, $3, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$25 }
	$14 = CALL $14(($1 + [96]), $2)
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)($1 + [96])), [18393])
	
.LABEL $label$25
	CALL eosio_assert(((int_32)*($14 + [8]) ^ (int_32)[1]), [17569])
	*($1 + [392]) = *($14 + [16])
	CALL prints([17607])
	CALL printui(*($1 + [392]))
	*((($1 + [352]) + [32])) = [0]
	*($1 + [368]) = (int_64)-1
	*($1 + [376]) = (int_64)0
	$3 = *($0)
	*($1 + [352]) = $3
	*($1 + [360]) = $3
	$2 = *($1 + [512])
	$4 = ($2 & [1])
	*($1 + [336]) = ( *(($9 + [8])) ? $11 : $4 )
	*($1 + [340]) = ( *(($9 + [4])) ? uint_32($2 >> [1]) : $4 )
	*($1 + [40]) = *($1 + [336])
	$11 = CALL $3(($1 + [344]), ($1 + [40]))
	CALL prints([17629])
	CALL printn(*($11))
	CALL prints([17641])
	CALL printui(*($11))
	CALL prints([17651])
	$3 = *($11)
	$4 = *(($1 + [380]))
	$5 = *($1 + [376])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$31 }
	
.LOOP $label$33:
	$2 = ($4 + [-24])
	$13 = *($2)
	if ( ((int_64)*($13) == (int_64)$3) ){ goto $label$32 }
	$4 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$31 }
	CALL eosio_assert(((int_32)*($13 + [108]) == (int_32)($1 + [352])), [18393])
	CALL eosio_assert(($13 == 0), [17655])
	if ( $13 ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$31
	$2 = CALL db_find_i64(*($1 + [352]), *((($1 + [352]) + [8])), (int_64)4514463537124250000, $3)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$29 }
	CALL eosio_assert(((int_32)*(CALL $15(($1 + [352]), $2) + [108]) == (int_32)($1 + [352])), [18393])
	CALL eosio_assert([0], [17655])
	
.LABEL $label$30
	CALL prints([17680])
	CALL eosio_assert(($12 == 0), [17702])
	$5 = *($1 + [376])
	if ( $5 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	CALL eosio_assert([1], [17655])
	
.LABEL $label$28
	*($1 + [392]) = ((int_64)*($1 + [392]) + (int_64)1)
	CALL prints([17727])
	$3 = *($0)
	*($1 + [192]) = $11
	*($1 + [200]) = $8
	*($1 + [204]) = $6
	*($1 + [220]) = $7
	*($1 + [224]) = $10
	*($1 + [196]) = ($1 + [392])
	*($1 + [208]) = ($1 + [296])
	*($1 + [212]) = ($1 + [280])
	*($1 + [216]) = ($1 + [464])
	CALL $16(($1 + [328]), ($1 + [352]), $3, ($1 + [192]))
	$3 = *($0)
	*($1 + [192]) = ($1 + [392])
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [18524])
	CALL $17(($1 + [96]), $14, $3, ($1 + [192]))
	$5 = *($1 + [376])
	if ( ($5 == 0) ){ goto $label$26 }
	
.LABEL $label$27
	$13 = ($1 + [380])
	$4 = *($13)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$35 }
	
.LOOP $label$36:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$37 }
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$38
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*(($2 + [40])))
	
.LABEL $label$39
	CALL _ZdlPv($2)
	
.LABEL $label$37
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$36 }
	$2 = *(($1 + [376]))
	goto $label$34 
	
.LABEL $label$35
	$2 = $5
	
.LABEL $label$34
	*($13) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$26
	$5 = *($1 + [120])
	if ( ($5 == 0) ){ goto $label$40 }
	$13 = ($1 + [124])
	$2 = *($13)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$42 }
	
.LOOP $label$43:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$44 }
	CALL _ZdlPv($4)
	
.LABEL $label$44
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$43 }
	$2 = *(($1 + [120]))
	goto $label$41 
	
.LABEL $label$42
	$2 = $5
	
.LABEL $label$41
	*($13) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$40
	if ( (*($1 + [400]) & [1]) ){ goto $label$48 }
	if ( (*($1 + [512]) & [1]) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	CALL _ZdlPv(*(($10 + [8])))
	if ( ((*($1 + [512]) & [1]) == 0) ){ goto $label$46 }
	
.LABEL $label$47
	CALL _ZdlPv(*(($9 + [8])))
	if ( (*($1 + [176]) & [1]) ){ goto $label$45 }
	goto $label$5 
	
.LABEL $label$46
	if ( ((*($1 + [176]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$45
	CALL _ZdlPv(*(($6 + [8])))
	
.LABEL $label$5
	$2 = *($1 + [448])
	$4 = *($2)
	$5 = CALL $80([17749])
	if ( ((int_32)$5 != (int_32)( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$49 }
	if ( CALL $59($2, [0], [-1], [17749], $5) ){ goto $label$49 }
	*($1 + [392]) = *($1 + [464])
	$2 = *($1 + [448])
	CALL prints([17753])
	$4 = *($2)
	$5 = ($4 & [1])
	CALL prints_l(( *($2 + [8]) ? ($2 + [1]) : $5 ), ( *($2 + [4]) ? uint_32($4 >> [1]) : $5 ))
	CALL prints([17275])
	$4 = *($2 + [12])
	$5 = ($4 & [1])
	CALL prints_l(( *(($2 + [20])) ? ($2 + [13]) : $5 ), ( *(($2 + [16])) ? uint_32($4 >> [1]) : $5 ))
	CALL prints([17275])
	*($1 + [320]) = [17759]
	*($1 + [324]) = CALL $80([17759])
	*($1 + [32]) = *($1 + [320])
	$2 = CALL $3(($1 + [96]), ($1 + [32]))
	if ( ((int_64)*(($0 + [8])) != (int_64)*($2)) ){ goto $label$55 }
	$2 = CALL $80([17499])
	if ( ($2 <= [8]) ){ goto $label$54 }
	CALL eosio_assert([0], [18295])
	goto $label$53 
	
.LABEL $label$55
	CALL eosio_assert([0], [17771])
	goto $label$50 
	
.LABEL $label$54
	if ( ($2 == 0) ){ goto $label$52 }
	
.LABEL $label$53
	$3 = (int_64)0
	
.LOOP $label$56:
	$4 = *(($2 + [17498]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$57 }
	CALL eosio_assert([0], [18340])
	
.LABEL $label$57
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$56 }
	$3 = ((int_64)$3 << (int_64)8)
	goto $label$51 
	
.LABEL $label$52
	$3 = (int_64)0
	
.LABEL $label$51
	CALL eosio_assert(((int_64)*(($1 + [488])) == (int_64)((int_64)$3 | (int_64)4)), [17771])
	
.LABEL $label$50
	$2 = *($1 + [448])
	$4 = *($2 + [12])
	if ( ($4 & [1]) ){ goto $label$59 }
	$4 = uint_32($4 >> [1])
	$2 = (($2 + [12]) + [1])
	goto $label$58 
	
.LABEL $label$59
	$4 = *(($2 + [16]))
	$2 = *(($2 + [20]))
	
.LABEL $label$58
	*($1 + [316]) = $4
	*($1 + [312]) = $2
	*($1 + [24]) = *($1 + [312])
	$15 = *(CALL $3(($1 + [96]), ($1 + [24])))
	CALL prints([17792])
	CALL printui($15)
	*((($1 + [352]) + [32])) = [0]
	*($1 + [368]) = (int_64)-1
	*($1 + [376]) = (int_64)0
	$3 = *($0)
	*($1 + [352]) = $3
	*($1 + [360]) = $3
	$2 = CALL db_find_i64($3, $3, (int_64)4514463537124250000, $15)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$65 }
	$9 = CALL $15(($1 + [352]), $2)
	CALL eosio_assert(((int_32)*($9 + [108]) == (int_32)($1 + [352])), [18393])
	$16 = *($9 + [24])
	$17 = *($9 + [56])
	$15 = *($9 + [48])
	$18 = *($9 + [88])
	$6 = CALL $52(($1 + [400]), ($9 + [32]))
	$3 = *($9 + [92])
	$19 = *($9 + [72])
	$20 = *($9 + [64])
	CALL prints([17798])
	CALL printui($18)
	CALL prints([17809])
	CALL printui($15)
	CALL prints([17818])
	CALL printui($17)
	CALL prints([17275])
	CALL prints([17829])
	CALL printn($16)
	CALL prints([17275])
	CALL prints([17847])
	$2 = *($1 + [400])
	$4 = ($2 & [1])
	$10 = ($6 + [1])
	CALL prints_l(( *($6 + [8]) ? $10 : $4 ), ( *($6 + [4]) ? uint_32($2 >> [1]) : $4 ))
	CALL prints([17275])
	CALL prints([17858])
	CALL printn($20)
	CALL prints([17275])
	CALL prints([17869])
	CALL printn($19)
	CALL prints([17275])
	CALL prints([17888])
	CALL printui($3)
	CALL prints([17275])
	CALL eosio_assert((int_64)($3 == 0), [17899])
	if ( ((int_64)$19 == (int_64)0) ){ goto $label$64 }
	$4 = [0]
	$5 = *([0] + [18716])
	$3 = $19
	
.LOOP $label$67:
	*((($1 + [96]) + ($2 = $4))) = *(($5 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$4 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$66 }
	$3 = ((int_64)$3 << (int_64)5)
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$67 }
	
.LABEL $label$66
	*(($1 + [200])) = [0]
	*($1 + [192]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$63 }
	*($1 + [192]) = ($4 << [1])
	$5 = (($1 + [192]) | [1])
	goto $label$62 
	
.LABEL $label$65
	CALL prints([18204])
	CALL prints([18216])
	$5 = *($1 + [376])
	if ( $5 ){ goto $label$60 }
	goto $label$49 
	
.LABEL $label$64
	*(($1 + [200])) = [0]
	*($1 + [192]) = (int_64)0
	*($1 + [192]) = [0]
	$2 = (($1 + [192]) | [1])
	goto $label$61 
	
.LABEL $label$63
	$13 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($13)
	*($1 + [192]) = ($13 | [1])
	*($1 + [200]) = $5
	*($1 + [196]) = $4
	
.LABEL $label$62
	$13 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$68:
	*(($5 + $2)) = *((($1 + [96]) + $2))
	$2 = ($2 + [1])
	if ( ((int_32)$13 != (int_32)$2) ){ goto $label$68 }
	$2 = ($5 + $4)
	
.LABEL $label$61
	*($2) = [0]
	$2 = [1]
	$4 = ($4 & [1])
	$4 = *($1 + [192])
	$5 = CALL $80([17921])
	if ( ((int_32)$5 != (int_32)( *($1 + [196]) ? uint_32($4 >> [1]) : $4 )) ){ goto $label$69 }
	$2 = ((int_32)CALL $59(($1 + [192]), [0], [-1], [17921], $5) != (int_32)[0])
	$4 = (*($1 + [192]) & [1])
	
.LABEL $label$69
	if ( ($4 == 0) ){ goto $label$70 }
	CALL _ZdlPv(*($1 + [200]))
	
.LABEL $label$70
	if ( ($2 == 0) ){ goto $label$71 }
	if ( ((int_64)*($1 + [392]) != (int_64)$19) ){ goto $label$73 }
	CALL prints([17922])
	goto $label$72 
	
.LABEL $label$73
	CALL prints([17943])
	
.LABEL $label$72
	CALL eosio_assert(((int_64)*($1 + [392]) == (int_64)$19), [17971])
	
.LABEL $label$71
	CALL prints([18013])
	CALL printui($15)
	CALL prints([17275])
	CALL prints([18025])
	$21 = (CASTING float_64)(uint_64 $15)
	$22 = ((float_64)$21 * (float_64)(float_64)0.01)
	if ( (((float_64)$22 < (float_64)(float_64)18446744073709551615) & ((float_64)$22 >= (float_64)(float_64)0)) ){ goto $label$75 }
	$3 = (int_64)0
	goto $label$74 
	
.LABEL $label$75
	$3 = (Rounds 0)($22)
	
.LABEL $label$74
	CALL printui($3)
	CALL prints([17275])
	CALL prints([18031])
	$3 = ((int_64)$15 + (int_64)$3)
	CALL printui($3)
	CALL prints([17275])
	CALL prints([18039])
	$2 = ($1 + [480])
	CALL printi(*($2))
	CALL prints([17275])
	CALL eosio_assert(((uint_64)*($2) >= (uint_64)$3), [18062])
	$2 = ((int_64)$16 != (int_64)0)
	$22 = ((float_64)$21 * (float_64)(float_64)0.005)
	if ( (((float_64)$22 < (float_64)(float_64)18446744073709551615) & ((float_64)$22 >= (float_64)(float_64)0)) ){ goto $label$79 }
	$19 = (int_64)0
	if ( ($2 == 0) ){ goto $label$78 }
	goto $label$77 
	
.LABEL $label$79
	$19 = (Rounds 0)($22)
	if ( $2 ){ goto $label$77 }
	
.LABEL $label$78
	*(($1 + [304])) = [0]
	*($1 + [296]) = (int_64)0
	*($1 + [296]) = [0]
	$2 = (($1 + [296]) | [1])
	goto $label$76 
	
.LABEL $label$77
	$4 = [0]
	$5 = *([0] + [18716])
	$3 = $16
	
.LOOP $label$81:
	*((($1 + [96]) + ($2 = $4))) = *(($5 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$4 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$80 }
	$3 = ((int_64)$3 << (int_64)5)
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$81 }
	
.LABEL $label$80
	*(($1 + [304])) = [0]
	*($1 + [296]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$83 }
	*($1 + [296]) = ($4 << [1])
	$5 = (($1 + [296]) | [1])
	goto $label$82 
	
.LABEL $label$83
	$13 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($13)
	*($1 + [296]) = ($13 | [1])
	*($1 + [304]) = $5
	*($1 + [300]) = $4
	
.LABEL $label$82
	$13 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$84:
	*(($5 + $2)) = *((($1 + [96]) + $2))
	$2 = ($2 + [1])
	if ( ((int_32)$13 != (int_32)$2) ){ goto $label$84 }
	$2 = ($5 + $4)
	
.LABEL $label$76
	*($2) = [0]
	CALL $60(($1 + [264]), [18079], ($1 + [296]))
	$2 = CALL $57(($1 + [264]), [18108])
	$4 = ($2 + [8])
	*((($1 + [512]) + [8])) = *($4)
	*($1 + [512]) = *($2)
	*($2) = (int_64)0
	*($4) = [0]
	$2 = *($1 + [400])
	$4 = ($2 & [1])
	$2 = CALL $58(($1 + [512]), ( *(($6 + [8])) ? $10 : $4 ), ( *(($6 + [4])) ? uint_32($2 >> [1]) : $4 ))
	$4 = ($2 + [8])
	*((($1 + [176]) + [8])) = *($4)
	*($1 + [176]) = *($2)
	*($2) = (int_64)0
	*($4) = [0]
	$2 = CALL $57(($1 + [176]), [18110])
	$4 = ($2 + [8])
	*((($1 + [192]) + [8])) = *($4)
	*($1 + [192]) = *($2)
	*($2) = (int_64)0
	*($4) = [0]
	$4 = *($2 + [12])
	$5 = ($4 & [1])
	$2 = *($1 + [448])
	$2 = CALL $58(($1 + [192]), ( *(($2 + [20])) ? ($2 + [13]) : $5 ), ( *(($2 + [16])) ? uint_32($4 >> [1]) : $5 ))
	$4 = ($2 + [8])
	*((($1 + [96]) + [8])) = *($4)
	*($1 + [96]) = *($2)
	*($2) = (int_64)0
	*($4) = [0]
	$2 = CALL $57(($1 + [96]), [18123])
	$4 = ($2 + [8])
	*((($1 + [280]) + [8])) = *($4)
	*($1 + [280]) = *($2)
	*($2) = (int_64)0
	*($4) = [0]
	if ( (*($1 + [96]) & [1]) ){ goto $label$93 }
	if ( (*($1 + [192]) & [1]) ){ goto $label$92 }
	goto $label$91 
	
.LABEL $label$93
	CALL _ZdlPv(*($1 + [104]))
	if ( ((*($1 + [192]) & [1]) == 0) ){ goto $label$91 }
	
.LABEL $label$92
	CALL _ZdlPv(*($1 + [200]))
	$2 = [1]
	if ( ((*($1 + [176]) & [1]) == 0) ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$91
	$2 = [1]
	if ( (*($1 + [176]) & [1]) ){ goto $label$89 }
	
.LABEL $label$90
	if ( (*($1 + [512]) & $2) ){ goto $label$88 }
	goto $label$87 
	
.LABEL $label$89
	CALL _ZdlPv(*($1 + [184]))
	if ( ((*($1 + [512]) & $2) == 0) ){ goto $label$87 }
	
.LABEL $label$88
	CALL _ZdlPv(*($1 + [520]))
	$4 = [1]
	if ( (*($1 + [264]) & [1]) ){ goto $label$86 }
	goto $label$85 
	
.LABEL $label$87
	$4 = [1]
	if ( ((*($1 + [264]) & [1]) == 0) ){ goto $label$85 }
	
.LABEL $label$86
	CALL _ZdlPv(*($1 + [272]))
	
.LABEL $label$85
	$2 = CALL $52(($1 + [248]), ($1 + [280]))
	CALL $18($0, $20, $15, $2)
	if ( ((*($2) & $4) == 0) ){ goto $label$94 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$94
	CALL $60(($1 + [232]), [18134], ($1 + [296]))
	$2 = CALL $57(($1 + [232]), [18108])
	$4 = ($2 + [8])
	*((($1 + [512]) + [8])) = *($4)
	*($1 + [512]) = *($2)
	*($2) = (int_64)0
	*($4) = [0]
	$2 = *($1 + [400])
	$4 = ($2 & [1])
	$2 = CALL $58(($1 + [512]), ( *(($6 + [8])) ? $10 : $4 ), ( *(($6 + [4])) ? uint_32($2 >> [1]) : $4 ))
	$4 = ($2 + [8])
	*((($1 + [176]) + [8])) = *($4)
	*($1 + [176]) = *($2)
	*($2) = (int_64)0
	*($4) = [0]
	$2 = CALL $57(($1 + [176]), [18110])
	$4 = ($2 + [8])
	*((($1 + [192]) + [8])) = *($4)
	*($1 + [192]) = *($2)
	*($2) = (int_64)0
	*($4) = [0]
	$4 = *($2 + [12])
	$5 = ($4 & [1])
	$2 = *($1 + [448])
	$2 = CALL $58(($1 + [192]), ( *(($2 + [20])) ? ($2 + [13]) : $5 ), ( *(($2 + [16])) ? uint_32($4 >> [1]) : $5 ))
	$4 = ($2 + [8])
	*((($1 + [96]) + [8])) = *($4)
	*($1 + [96]) = *($2)
	*($2) = (int_64)0
	*($4) = [0]
	$2 = CALL $57(($1 + [96]), [17921])
	$4 = ($2 + [8])
	*((($1 + [264]) + [8])) = *($4)
	*($1 + [264]) = *($2)
	*($2) = (int_64)0
	*($4) = [0]
	if ( (*($1 + [96]) & [1]) ){ goto $label$103 }
	if ( (*($1 + [192]) & [1]) ){ goto $label$102 }
	goto $label$101 
	
.LABEL $label$103
	CALL _ZdlPv(*($1 + [104]))
	if ( ((*($1 + [192]) & [1]) == 0) ){ goto $label$101 }
	
.LABEL $label$102
	CALL _ZdlPv(*($1 + [200]))
	$2 = [1]
	if ( ((*($1 + [176]) & [1]) == 0) ){ goto $label$100 }
	goto $label$99 
	
.LABEL $label$101
	$2 = [1]
	if ( (*($1 + [176]) & [1]) ){ goto $label$99 }
	
.LABEL $label$100
	if ( (*($1 + [512]) & $2) ){ goto $label$98 }
	goto $label$97 
	
.LABEL $label$99
	CALL _ZdlPv(*($1 + [184]))
	if ( ((*($1 + [512]) & $2) == 0) ){ goto $label$97 }
	
.LABEL $label$98
	CALL _ZdlPv(*($1 + [520]))
	$2 = [1]
	if ( (*($1 + [232]) & [1]) ){ goto $label$96 }
	goto $label$95 
	
.LABEL $label$97
	$2 = [1]
	if ( ((*($1 + [232]) & [1]) == 0) ){ goto $label$95 }
	
.LABEL $label$96
	CALL _ZdlPv(*($1 + [240]))
	
.LABEL $label$95
	$5 = *(($6 + [8]))
	$4 = ($4 & $2)
	$4 = *($1 + [400])
	$2 = ( *(($6 + [4])) ? uint_32($4 >> $2) : $4 )
	if ( ($2 <= [8]) ){ goto $label$107 }
	CALL eosio_assert([0], [18295])
	goto $label$106 
	
.LABEL $label$107
	if ( ($2 == 0) ){ goto $label$105 }
	
.LABEL $label$106
	$13 = ( $5 ? $10 : $4 )
	$3 = (int_64)0
	
.LOOP $label$108:
	$5 = (($13 + $2) + [-1])
	$4 = *($5)
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$109 }
	CALL eosio_assert([0], [18340])
	$4 = *($5)
	
.LABEL $label$109
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$108 }
	$15 = ((int_64)$3 << (int_64)8)
	goto $label$104 
	
.LABEL $label$105
	$15 = (int_64)0
	
.LABEL $label$104
	CALL eosio_assert((uint_64)(((int_64)$17 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18753])
	$3 = (uint_64)$15 >> (uint_64)(int_64)8)
	$20 = ((int_64)$15 | (int_64)4)
	$2 = [0]
	
.LOOP $label$112:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$111 }
	$15 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$113 }
	$3 = $15
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$112 }
	goto $label$110 
	
.LABEL $label$113
	$3 = $15
	
.LOOP $label$114:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$111 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$114 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$112 }
	goto $label$110 
	
.LABEL $label$111
	$4 = [0]
	
.LABEL $label$110
	CALL eosio_assert($4, [18802])
	$3 = *($0)
	*($1 + [160]) = [18184]
	*($1 + [164]) = CALL $80([18184])
	*($1 + [16]) = *($1 + [160])
	$2 = CALL $3(($1 + [168]), ($1 + [16]))
	*($1 + [176]) = $3
	*($1 + [184]) = *($2)
	*($1 + [144]) = [17015]
	*($1 + [148]) = CALL $80([17015])
	*($1 + [8]) = *($1 + [144])
	$2 = CALL $3(($1 + [152]), ($1 + [8]))
	*(($1 + [120])) = $20
	*($1 + [112]) = $17
	*($1 + [96]) = *($0)
	*($1 + [104]) = *($1 + [392])
	CALL $52(($1 + [128]), ($1 + [264]))
	$2 = CALL $19(($1 + [192]), ($1 + [176]), $16, *($2), ($1 + [96]))
	CALL $20(($1 + [512]), $2)
	$4 = *($1 + [512])
	CALL send_inline($4, (*($1 + [516]) - $4))
	$4 = *($1 + [512])
	if ( ($4 == 0) ){ goto $label$115 }
	*($1 + [516]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$115
	$4 = *($2 + [28])
	if ( ($4 == 0) ){ goto $label$116 }
	*(($2 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$116
	$4 = *($2 + [16])
	if ( ($4 == 0) ){ goto $label$117 }
	*(($2 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$117
	if ( ((*($1 + [128]) & [1]) == 0) ){ goto $label$118 }
	CALL _ZdlPv(*(($1 + [136])))
	
.LABEL $label$118
	*(($1 + [104])) = [0]
	*($1 + [96]) = (int_64)0
	$2 = CALL $80([17921])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$126 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$129 }
	*($1 + [96]) = ($2 << [1])
	$4 = (($1 + [96]) | [1])
	if ( $2 ){ goto $label$128 }
	goto $label$127 
	
.LABEL $label$129
	$5 = (($2 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($1 + [96]) = ($5 | [1])
	*($1 + [104]) = $4
	*($1 + [100]) = $2
	
.LABEL $label$128
	CALL memcpy($4, [17921], $2)
	
.LABEL $label$127
	*(($4 + $2)) = [0]
	*($1 + [80]) = [18191]
	*($1 + [84]) = CALL $80([18191])
	*($1) = *($1 + [80])
	$4 = CALL $3(($1 + [88]), $1)
	$2 = CALL $52(($1 + [64]), ($1 + [96]))
	CALL $18($0, *($4), $19, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$130 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$130
	$3 = *($0)
	*($1 + [192]) = ($1 + [392])
	CALL eosio_assert([1], [18524])
	CALL $21(($1 + [352]), $9, $3, ($1 + [192]))
	if ( (*($1 + [96]) & [1]) ){ goto $label$132 }
	$2 = [1]
	if ( (*($1 + [264]) & [1]) ){ goto $label$131 }
	goto $label$125 
	
.LABEL $label$132
	CALL _ZdlPv(*($1 + [104]))
	$2 = [1]
	if ( ((*($1 + [264]) & [1]) == 0) ){ goto $label$125 }
	
.LABEL $label$131
	CALL _ZdlPv(*($1 + [272]))
	if ( ((*($1 + [280]) & $2) == 0) ){ goto $label$124 }
	goto $label$123 
	
.LABEL $label$126
	CALL $51(($1 + [96]))
	
.LABEL $label$125
	if ( (*($1 + [280]) & $2) ){ goto $label$123 }
	
.LABEL $label$124
	$2 = [1]
	if ( (*($1 + [296]) & [1]) ){ goto $label$122 }
	goto $label$121 
	
.LABEL $label$123
	CALL _ZdlPv(*($1 + [288]))
	$2 = [1]
	if ( ((*($1 + [296]) & [1]) == 0) ){ goto $label$121 }
	
.LABEL $label$122
	CALL _ZdlPv(*($1 + [304]))
	if ( ((*($1 + [400]) & $2) == 0) ){ goto $label$120 }
	goto $label$119 
	
.LABEL $label$121
	if ( (*($1 + [400]) & $2) ){ goto $label$119 }
	
.LABEL $label$120
	CALL prints([18216])
	$5 = *($1 + [376])
	if ( $5 ){ goto $label$60 }
	goto $label$49 
	
.LABEL $label$119
	CALL _ZdlPv(*(($6 + [8])))
	CALL prints([18216])
	$5 = *($1 + [376])
	if ( ($5 == 0) ){ goto $label$49 }
	
.LABEL $label$60
	$13 = ($1 + [380])
	$4 = *($13)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$134 }
	
.LOOP $label$135:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$136 }
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$137 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$137
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$138 }
	CALL _ZdlPv(*(($2 + [40])))
	
.LABEL $label$138
	CALL _ZdlPv($2)
	
.LABEL $label$136
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$135 }
	$2 = *(($1 + [376]))
	goto $label$133 
	
.LABEL $label$134
	$2 = $5
	
.LABEL $label$133
	*($13) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$49
	$2 = *($1 + [448])
	$4 = *($2)
	$5 = CALL $80([18229])
	if ( ((int_32)$5 != (int_32)( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$139 }
	if ( CALL $59($2, [0], [-1], [18229], $5) ){ goto $label$139 }
	CALL prints([18235])
	$2 = ($1 + [488])
	CALL printui(*($2))
	CALL prints([18293])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$140 }
	$2 = [0]
	
.LOOP $label$142:
	*((($1 + [96]) + $2)) = $3
	$4 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[5]) ){ goto $label$141 }
	$2 = $4
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$142 }
	
.LABEL $label$141
	CALL prints_l(($1 + [96]), $4)
	
.LABEL $label$140
	*(($1 + [360])) = [0]
	*($1 + [352]) = (int_64)0
	$2 = CALL $80([17921])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$144 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$147 }
	*($1 + [352]) = ($2 << [1])
	$4 = (($1 + [352]) | [1])
	if ( $2 ){ goto $label$146 }
	goto $label$145 
	
.LABEL $label$147
	$5 = (($2 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($1 + [352]) = ($5 | [1])
	*($1 + [360]) = $4
	*($1 + [356]) = $2
	
.LABEL $label$146
	CALL memcpy($4, [17921], $2)
	
.LABEL $label$145
	*(($4 + $2)) = [0]
	$2 = CALL $80([17499])
	if ( ($2 <= [8]) ){ goto $label$150 }
	CALL eosio_assert([0], [18295])
	goto $label$149 
	
.LABEL $label$150
	if ( ($2 == 0) ){ goto $label$148 }
	
.LABEL $label$149
	$3 = (int_64)0
	
.LOOP $label$151:
	$4 = *(($2 + [17498]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$152 }
	CALL eosio_assert([0], [18340])
	
.LABEL $label$152
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$151 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$143 
	
.LABEL $label$148
	$3 = (int_64)4
	goto $label$143 
	
.LABEL $label$144
	CALL $51(($1 + [352]))
	
.LABEL $label$143
	$5 = [0]
	if ( ((int_64)*(($1 + [488])) != (int_64)$3) ){ goto $label$153 }
	CALL $56(($1 + [352]), [17499])
	$5 = [1]
	
.LABEL $label$153
	$2 = CALL $80([18244])
	if ( ($2 <= [8]) ){ goto $label$157 }
	CALL eosio_assert([0], [18295])
	goto $label$156 
	
.LABEL $label$157
	if ( ($2 == 0) ){ goto $label$155 }
	
.LABEL $label$156
	$3 = (int_64)0
	
.LOOP $label$158:
	$4 = *(($2 + [18243]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$159 }
	CALL eosio_assert([0], [18340])
	
.LABEL $label$159
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$158 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$154 
	
.LABEL $label$155
	$3 = (int_64)4
	
.LABEL $label$154
	$2 = ($1 + [488])
	if ( ((int_64)*($2) != (int_64)$3) ){ goto $label$160 }
	CALL $56(($1 + [352]), [18244])
	$5 = [1]
	
.LABEL $label$160
	CALL prints([18249])
	CALL printui(*($2))
	CALL prints([18293])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$161 }
	$2 = [0]
	
.LOOP $label$163:
	*((($1 + [96]) + $2)) = $3
	$4 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[5]) ){ goto $label$162 }
	$2 = $4
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$163 }
	
.LABEL $label$162
	CALL prints_l(($1 + [96]), $4)
	
.LABEL $label$161
	CALL eosio_assert($5, [18259])
	*(($1 + [128])) = [0]
	*($1 + [112]) = (int_64)-1
	$3 = *($0)
	*($1 + [96]) = $3
	*($1 + [104]) = $3
	*($1 + [120]) = (int_64)0
	$2 = CALL db_find_i64($3, $3, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$164 }
	CALL eosio_assert(((int_32)*(CALL $14(($1 + [96]), $2) + [24]) == (int_32)($1 + [96])), [18393])
	$5 = *($1 + [120])
	if ( ($5 == 0) ){ goto $label$164 }
	$13 = ($1 + [124])
	$2 = *($13)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$166 }
	
.LOOP $label$167:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$168 }
	CALL _ZdlPv($4)
	
.LABEL $label$168
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$167 }
	$2 = *(($1 + [120]))
	goto $label$165 
	
.LABEL $label$166
	$2 = $5
	
.LABEL $label$165
	*($13) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$164
	if ( ((*($1 + [352]) & [1]) == 0) ){ goto $label$139 }
	CALL _ZdlPv(*($1 + [360]))
	
.LABEL $label$139
	$5 = *($1 + [448])
	if ( ($5 == 0) ){ goto $label$169 }
	$4 = *($1 + [452])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$171 }
	
.LOOP $label$172:
	$2 = ($4 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$173 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$173
	$4 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$172 }
	$2 = *($1 + [448])
	goto $label$170 
	
.LABEL $label$171
	$2 = $5
	
.LABEL $label$170
	*($1 + [452]) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$169
	if ( ((*(($1 + [496])) & [1]) == 0) ){ goto $label$174 }
	CALL _ZdlPv(*(($1 + [504])))
	
.LABEL $label$174
	$global$0 = ($1 + [528])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $5 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $85($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [28]) = [233423244]
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $89($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 apply)
{
	int_32 $3
	$3 = ($global$0 - [208])
	$global$0 = $3
	CALL memory()
	CALL prints([16910])
	CALL printn($1)
	*($3 + [192]) = [17015]
	*($3 + [196]) = CALL $80([17015])
	*($3 + [96]) = *($3 + [192])
	CALL $3(($3 + [200]), ($3 + [96]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [1]
	*($3 + [88]) = *($3 + [184])
	CALL $5($0, $1, ($3 + [88]))
	
.LABEL $label$1
	*($3 + [176]) = [17024]
	*($3 + [180]) = CALL $80([17024])
	*($3 + [80]) = *($3 + [176])
	CALL $3(($3 + [200]), ($3 + [80]))
	if ( ((int_64)$2 != (int_64)-4157493845350678528) ){ goto $label$2 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [2]
	*($3 + [72]) = *($3 + [168])
	CALL $5($0, $1, ($3 + [72]))
	
.LABEL $label$2
	*($3 + [160]) = [17031]
	*($3 + [164]) = CALL $80([17031])
	*($3 + [64]) = *($3 + [160])
	CALL $3(($3 + [200]), ($3 + [64]))
	if ( ((int_64)$2 != (int_64)4730614998698196992) ){ goto $label$3 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [3]
	*($3 + [56]) = *($3 + [152])
	CALL $5($0, $1, ($3 + [56]))
	
.LABEL $label$3
	*($3 + [144]) = [17042]
	*($3 + [148]) = CALL $80([17042])
	*($3 + [48]) = *($3 + [144])
	CALL $3(($3 + [200]), ($3 + [48]))
	if ( ((int_64)$2 != (int_64)3631283935532548096) ){ goto $label$4 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [4]
	*($3 + [40]) = *($3 + [136])
	CALL $5($0, $1, ($3 + [40]))
	
.LABEL $label$4
	*($3 + [128]) = [17055]
	*($3 + [132]) = CALL $80([17055])
	*($3 + [32]) = *($3 + [128])
	CALL $3(($3 + [200]), ($3 + [32]))
	if ( ((int_64)$2 != (int_64)4942010207426314240) ){ goto $label$5 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [5]
	*($3 + [24]) = *($3 + [120])
	CALL $10($0, $1, ($3 + [24]))
	
.LABEL $label$5
	*($3 + [112]) = [17064]
	*($3 + [116]) = CALL $80([17064])
	*($3 + [16]) = *($3 + [112])
	CALL $3(($3 + [200]), ($3 + [16]))
	if ( ((int_64)$2 != (int_64)5555305760881115136) ){ goto $label$6 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [6]
	*($3 + [8]) = *($3 + [104])
	CALL $5($0, $1, ($3 + [8]))
	
.LABEL $label$6
	CALL $70([0])
	$global$0 = ($3 + [208])
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [17071])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [17176])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [17109])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [17176])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC memory ()
{
	CALL $42()
}

void .FUNC $1 (int_32 $0)
{
	if ( ((*([0] + [8192]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8200]))
	
.LABEL $label$1
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18444])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $85($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18284])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [18284])
	CALL memcpy(($3 + [16]), ($2 + [8]), [1])
	*($5 + [8]) = ((int_32)*($3 + [16]) != (int_32)[0])
	CALL eosio_assert(((uint_32)($4 + [-9]) > (uint_32)[7]), [18284])
	CALL memcpy(($5 + [16]), ($2 + [9]), [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $35(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $89($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18444])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $85($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([120])) + [24]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = [0]
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [96 align=4]) = (int_64)0
	*($5 + [104]) = [0]
	*($5 + [108]) = $0
	CALL $36(($3 + [32]), $5)
	*($5 + [112]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $31(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $89($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [104])))
	
.LABEL $label$10
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [18467])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([120])) + [24]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40]) = [0]
	*($3 + [64]) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [96 align=4]) = (int_64)0
	*($3 + [104]) = [0]
	*($3 + [108]) = $1
	CALL $30(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [112])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $31(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [104])))
	
.LABEL $label$4
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [18559])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [18605])
	*($1 + [16]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [18656])
	CALL eosio_assert([1], [18518])
	CALL memcpy($4, $1, [8])
	*($4 + [31]) = *($1 + [8])
	CALL eosio_assert([1], [18518])
	CALL memcpy(($4 | [8]), ($4 + [31]), [1])
	CALL eosio_assert([1], [18518])
	CALL memcpy(($4 | [9]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [17])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $85($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [64]) = ($2 + $7)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18284])
	CALL memcpy(($4 + [72]), $2, [8])
	*($4 + [60]) = ($2 + [8])
	$8 = (($4 + [72]) + [8])
	CALL $27(($4 + [56]), $8)
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($9 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4 + [8])
	$3 = *($9)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [96])
	*($4 + [40]) = $0
	*($4 + [112]) = $0
	*($4 + [52]) = [233423244]
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [72])
	$8 = CALL $52(($4 + [96]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $52(($4 + [112]), $8)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [112]) & [1]) ){ goto $label$11 }
	if ( (*($4 + [96]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	
.LABEL $label$8
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $89($2)
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [88])))
	$global$0 = ($4 + [128])
	return $2
	
.LABEL $label$5
	$global$0 = ($4 + [128])
	return $2
}

void .FUNC $11 (int_32 $0)
{
	CALL prints([19409])
	CALL require_auth(*($0))
	CALL prints([19420])
}

void .FUNC $12 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $85($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $28(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$2 }
	$5 = ($2 + [1])
	$2 = ($5 + uint_32($4 >> [1]))
	goto $label$1 
	
.LABEL $label$2
	$5 = *($2 + [8])
	$2 = ($5 + *($2 + [4]))
	
.LABEL $label$1
	*($3 + [24]) = $2
	*($3 + [16]) = $5
	*($3 + [8]) = $5
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$5 }
	$6 = ($1 + [8])
	$7 = ($1 + [4])
	$4 = $5
	
.LOOP $label$6:
	if ( ((int_32)*($4) != (int_32)[59]) ){ goto $label$12 }
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*($6)) ){ goto $label$11 }
	*($2) = (int_64)0
	*(($2 + [8])) = [0]
	$8 = ($4 - $5)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$10 }
	*($2) = ($8 << [1])
	$9 = ($2 + [1])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	$4 = ($4 + [1])
	*($3 + [8]) = $4
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$11
	CALL $29($1, ($3 + [16]), ($3 + [8]))
	goto $label$7 
	
.LABEL $label$10
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($2) = ($10 | [1])
	*($2 + [8]) = $9
	*($2 + [4]) = $8
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$9
	$2 = $9
	
.LOOP $label$13:
	*($2) = *($5)
	$2 = ($2 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$13 }
	$9 = ($9 + $8)
	
.LABEL $label$8
	*($9) = [0]
	*($7) = (*($7) + [12])
	
.LABEL $label$7
	$4 = (*($3 + [8]) + [1])
	*($3 + [16]) = $4
	$2 = *($3 + [24])
	$5 = $4
	*($3 + [8]) = $4
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$16 }
	$4 = *($1 + [4])
	if ( ((uint_32)$4 >= (uint_32)*($1 + [8])) ){ goto $label$17 }
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$9 = ($2 - $5)
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$9 > (uint_32)[10]) ){ goto $label$15 }
	*($4) = ($9 << [1])
	$7 = ($4 + [1])
	goto $label$14 
	
.LABEL $label$17
	CALL $29($1, ($3 + [16]), ($3 + [24]))
	
.LABEL $label$16
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$15
	$8 = (($9 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($4) = ($8 | [1])
	*($4 + [8]) = $7
	*($4 + [4]) = $9
	
.LABEL $label$14
	$4 = $7
	
.LOOP $label$18:
	*($4) = *($5)
	$4 = ($4 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$18 }
	*(($7 + $9)) = [0]
	*(($5 = ($1 + [4]))) = (*($5) + [12])
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$4
	CALL $51($2)
	
.LABEL $label$3
	CALL $51($4)
}

int_32 .FUNC $75 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $73($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $18 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [192])
	$global$0 = $4
	$5 = CALL $80([17499])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [18295])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [17498]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [18340])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18753])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $9
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [18802])
	$6 = *($0)
	*($4 + [104]) = [18184]
	*($4 + [108]) = CALL $80([18184])
	*($4 + [16]) = *($4 + [104])
	$5 = CALL $3(($4 + [112]), ($4 + [16]))
	*($4 + [120]) = $6
	*($4 + [128]) = *($5)
	*($4 + [88]) = [17759]
	*($4 + [92]) = CALL $80([17759])
	*($4 + [8]) = *($4 + [88])
	$5 = CALL $3(($4 + [96]), ($4 + [8]))
	*($4 + [72]) = [17015]
	*($4 + [76]) = CALL $80([17015])
	*($4) = *($4 + [72])
	$7 = CALL $3(($4 + [80]), $4)
	*(($4 + [48])) = $8
	*($4 + [32]) = $1
	*($4 + [40]) = $2
	*($4 + [24]) = *($0)
	CALL $52(($4 + [56]), $3)
	$5 = CALL $19(($4 + [136]), ($4 + [120]), *($5), *($7), ($4 + [24]))
	CALL $20(($4 + [176]), $5)
	$7 = *($4 + [176])
	CALL send_inline($7, (*($4 + [180]) - $7))
	$7 = *($4 + [176])
	if ( ($7 == 0) ){ goto $label$12 }
	*($4 + [180]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$12
	$7 = *($5 + [28])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($5 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$13
	$7 = *($5 + [16])
	if ( ($7 == 0) ){ goto $label$14 }
	*(($5 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$14
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$15
	$global$0 = ($4 + [192])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $32($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $33(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

int_32 .FUNC $58 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $54($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $79(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $51 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $54($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18289])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $32($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18284])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $80($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $54($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $54($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $80($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $54($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $68($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($3 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $68($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$4 * (int_32)[12])))) = (int_64)0
	*(($3 + [8])) = [0]
	$1 = *($1)
	$2 = *($2)
	$8 = ($2 - $1)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$8 }
	*($3) = ($8 << [1])
	$5 = ($3 + [1])
	$4 = ((int_32)$6 * (int_32)[12])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$9 = (($8 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($3) = ($9 | [1])
	*(($4 = ($7 + ((int_32)$4 * (int_32)[12]))) + [8]) = $5
	*($4 + [4]) = $8
	$4 = ((int_32)$6 * (int_32)[12])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($1)
	$6 = ($6 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	$5 = ($5 + $8)
	
.LABEL $label$6
	$8 = ($7 + $4)
	*($5) = [0]
	$5 = ($3 + [12])
	$6 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($1 + [-4])
	*(($3 + [-4])) = *($2)
	$1 = ($1 + [-12])
	*(($3 = ($3 + [-12]))) = *($1)
	*($1) = (int_64)0
	*($2) = [0]
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$12 }
	$6 = *(($0 + [4]))
	$2 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$2 = $6
	
.LABEL $label$10
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($6 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$15
	$6 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($2 == 0) ){ goto $label$16 }
	CALL _ZdlPv($2)
	
.LABEL $label$16
	return (unreachable)
	
.LABEL $label$5
	CALL $51($3)
	(unreachable)
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18284])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18284])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18284])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18284])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $27(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [108]) == (int_32)$0), [18559])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [18605])
	*($1 + [92]) = [1]
	*($1 + [80]) = *(*($3))
	$6 = *($1)
	CALL eosio_assert([1], [18656])
	$3 = *($1 + [32])
	$7 = ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [80])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [96])
	$7 = ( *(($1 + [100])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $85($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $37($5, $1)
	CALL db_update_i64(*($1 + [112]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $89($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $32($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [18518])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [18518])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $40(CALL $39($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [108]) == (int_32)$0), [18559])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [18605])
	*($1 + [92]) = [2]
	$6 = *($1)
	CALL eosio_assert([1], [18656])
	$7 = *($1 + [32])
	$8 = ( *(($1 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($8 + [80])
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$8 = *($1 + [96])
	$8 = ( *(($1 + [100])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$7 = ($8 + $7)
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$4 = CALL $85($7)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $7)
	CALL $37($5, $1)
	CALL db_update_i64(*($1 + [112]), $2, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $89($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $22 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $85($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2 + [4]) = $1
	*($2) = $1
	*($2 + [8]) = ($1 + $3)
	CALL $27($2, $0)
	$global$0 = ($2 + [16])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [19261])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [19306])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [19356])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [18467])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [24]) = $1
	CALL $41(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $35(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $34($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $55($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $55($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $51($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [108]) == (int_32)$0), [19261])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [19306])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [19356])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [104])))
	
.LABEL $label$10
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [104])))
	
.LABEL $label$14
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [112]))
}

int_32 .FUNC $69 ()
{
	return [8208]
}

void .FUNC $68 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $80($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $54($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

int_64 .FUNC $64 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $80([17048])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [17048], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $69())
	*(CALL $69()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $77($4, ($3 + [12]), $2)
	$0 = CALL $69()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $62($3)
	
.LABEL $label$1
	CALL $63($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $67 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $66 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $61 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $80([16924])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [16924], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $69())
	*(CALL $69()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $78($4, ($3 + [12]), $2)
	$5 = CALL $69()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $62($3)
	
.LABEL $label$1
	CALL $63($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = CALL $80($1)
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, $1, $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$3 = ($2 + [1])
	$5 = (*($2) & [1])
	$2 = *($2 + [8])
	$6 = *($0)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$9 }
	$1 = [10]
	$3 = ( $2 ? $3 : $5 )
	$2 = uint_32($6 >> [1])
	if ( (([10] - $2) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$3 = ( $2 ? $3 : $5 )
	$2 = *(($0 + [4]))
	$1 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($1 - $2) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $54($0, $1, (($2 + $4) - $1), $2, $2, [0], $4, $3)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ( *(($0 + [8])) ? ($0 + [1]) : $7 )
	CALL memcpy(($5 + $2), $3, $4)
	$2 = ($2 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*(($5 + $2)) = [0]
	(unreachable)
}

void .FUNC $63 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $65($1, $0, [17359])
	CALL $67()
	(unreachable)
}

void .FUNC $62 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $65($1, $0, [17383])
	CALL $66()
	(unreachable)
}

void .FUNC $89 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16884])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16692]
	$3 = (((int_32)$1 * (int_32)[12]) + [16692])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $86([8500], $1)
	CALL memset($0, [0], $1)
	return $0
}

int_32 .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8492]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8496])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8492]) = [1]
	$2 = ($2 << [16])
	*([0] + [8496]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8496])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8496]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8492]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8492]) = [1]
	$3 = ($3 << [16])
	*([0] + [8496]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8496])
	
.LABEL $label$10
	*([0] + [8496]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $87($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [16929])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $85 (int_32 $0)
{
	return CALL $86([8500], $0)
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $85($1)
	
.LABEL $label$2
	*(CALL $69()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $85(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $89($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $69())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $84($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $82 (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $81 (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC $80 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $73 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $72($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $70 (int_32 $0)
{
}

int_32 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $81([8216])
	$3 = *([0] + [8224])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8228])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8232]
	*([0] + [8224]) = [8232]
	$4 = *([0] + [8228])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $88([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8224])
	*([0] + [8224]) = $3
	*([0] + [8228]) = [0]
	
.LABEL $label$2
	*([0] + [8228]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $82([8216])
	return [0]
	
.LABEL $label$1
	CALL $82([8216])
	return [-1]
}

int_64 .FUNC $76 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $75($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $69()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $75($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [19441]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $74($0, (int_64)0)
	*(CALL $69()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $75($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $75($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $75($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $75($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [19441])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [19441]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19441]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $75($0)
	$5 = *(($6 + [19441]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $75($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [19441]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [16901]))
	$8 = (int_64)0
	$5 = *(($6 + [19441]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19441]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $75($0)
	$5 = *(($6 + [19441]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $75($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [19441]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $74($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [19441]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [19441]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $75($0) + [19441]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $69()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $69()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $69()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_64 .FUNC $77 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $74($3, (int_64)0)
	$4 = CALL $76($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

void .FUNC $74 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18518])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18518])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18518])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $27($0, ($1 + [96]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18284])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18284])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18284])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18284])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $27($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18284])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18284])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18284])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18284])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18284])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18284])
	CALL memcpy(($1 + [88]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18284])
	CALL memcpy(($1 + [92]), *($0 + [4]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $38($0, ($1 + [96]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18518])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18518])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18518])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18518])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $38($0, ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18518])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18518])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18518])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18518])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18518])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18518])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18518])
	CALL memcpy(*($0 + [4]), ($1 + [92]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $74($3, (int_64)0)
	$4 = CALL $76($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $79 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $68($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18518])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18518])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18518])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [18518])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $38(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	$5 = *($4)
	*($1) = *($5)
	*($1 + [8]) = *($5)
	*($1 + [16]) = *(*($4 + [4]))
	*($1 + [24]) = *(*($4 + [8]))
	CALL $53(($1 + [32]), *($4 + [12]))
	*($1 + [48]) = *(*($4 + [16]))
	*($1 + [56]) = *(*($4 + [20]))
	*($1 + [64]) = *(*($4 + [24]))
	*($1 + [72]) = *(*($4 + [28]))
	*(($5 = $2) + [24]) = [17921]
	*($5 + [28]) = CALL $80([17921])
	*($5) = *($5 + [24])
	*($1 + [80]) = *(CALL $3(($5 + [8]), $5))
	$6 = CALL current_time()
	*($1 + [92]) = [0]
	*($1 + [88]) = ((uint_64)$6 / (uint_64)(int_64)1000000)
	CALL $53(($1 + [96]), *($4 + [32]))
	$4 = *($1 + [32])
	$7 = ( *(($1 + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [80])
	$6 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$7 = *(($1 + [96]))
	$7 = ( *(($1 + [100])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$4 = ($7 + $4)
	$6 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $85($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($5 + [12]) = $2
	*($5 + [8]) = $2
	*($5 + [16]) = ($2 + $4)
	CALL $37(($5 + [8]), $1)
	$6 = *($1)
	*($1 + [112]) = CALL db_store_i64(*($3 + [8]), (int_64)4514463537124250000, *(*($0 + [8])), $6, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($3 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $89($2)
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [32])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $68($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [104])))
	
.LABEL $label$11
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}