(data (i32.const 4) "\f0l\00\00")
(data (i32.const 16) "Invalid hex character\00")
(data (i32.const 48) "0123456789abcdef\00")
(data (i32.const 80) "invalid sha256\00")
(data (i32.const 96) "invalid sha1\00")
(data (i32.const 112) "invalid first pos\00")
(data (i32.const 144) "parse memo error\00")
(data (i32.const 176) "invalid first pos when parse roll num\00")
(data (i32.const 224) ",\00")
(data (i32.const 240) "/\00")
(data (i32.const 256) "invalid the format of roll num\00")
(data (i32.const 288) "eosio.token\00")
(data (i32.const 304) "transfer\00")
(data (i32.const 320) "Not contract action cannot be accepted\00")
(data (i32.const 368) "systemkernel\00")
(data (i32.const 384) "transaction declares authority\00")
(data (i32.const 416) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 480) "invalid symbol name\00")
(data (i32.const 512) "attempt to subtract asset with different symbol\00")
(data (i32.const 560) "subtraction underflow\00")
(data (i32.const 592) "subtraction overflow\00")
(data (i32.const 624) "active\00")
(data (i32.const 640) "crownplzcoin\00")
(data (i32.const 656) "Transfer Bonus, Profit Divided, Game: \00")
(data (i32.const 704) "write\00")
(data (i32.const 712) "\d0\02\00\00")
(data (i32.const 720) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 768) "crownpayment\00")
(data (i32.const 784) "unable to find key\00")
(data (i32.const 816) "fund pool overdraw\00")
(data (i32.const 848) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 912) "cannot create objects in table of another contract\00")
(data (i32.const 976) "error reading iterator\00")
(data (i32.const 1008) "read\00")
(data (i32.const 1024) "game is already stop\00")
(data (i32.const 1056) "cannot pass end iterator to modify\00")
(data (i32.const 1104) "object passed to modify is not in multi_index\00")
(data (i32.const 1152) "cannot modify objects in table of another contract\00")
(data (i32.const 1216) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1280) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1344) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1408) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1456) "get\00")
(data (i32.const 1472) "game is running\00")
(data (i32.const 1488) "payout\00")
(data (i32.const 1504) "divide by zero\00")
(data (i32.const 1520) "signed division overflow\00")
(data (i32.const 1552) "fee\00")
(data (i32.const 1568) "crowndicelog\00")
(data (i32.const 1584) "result\00")
(data (i32.const 1600) "cannot pass end iterator to erase\00")
(data (i32.const 1648) "cannot increment end iterator\00")
(data (i32.const 1680) "object passed to erase is not in multi_index\00")
(data (i32.const 1728) "cannot erase objects in table of another contract\00")
(data (i32.const 1792) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1856) "fund unlock error\00")
(data (i32.const 1888) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1952) "bet not found\00")
(data (i32.const 1968) "reveal\00")
(data (i32.const 1984) "roulette game already stop\00")
(data (i32.const 2016) "only EOS token allowed\00")
(data (i32.const 2048) "quantity invalid\00")
(data (i32.const 2080) "transfer quantity must be greater than 0.1\00")
(data (i32.const 2128) "referrer can not be self\00")
(data (i32.const 2160) "receipt\00")
(data (i32.const 2176) "issue\00")
(data (i32.const 2192) "Prize Fund, Game: \00")
(data (i32.const 2224) "The pay amount of payer, Game: crownbetdice\00")
(data (i32.const 2272) "start\00")
(data (i32.const 2288) "attempt to add asset with different symbol\00")
(data (i32.const 2336) "addition underflow\00")
(data (i32.const 2368) "addition overflow\00")
(data (i32.const 2400) "roll size overflow, must be greater than 2 and less than 34\00")
(data (i32.const 2464) "offered overflow, expected earning is greater than the maximum bonus\00")
(data (i32.const 2560) "read transaction failed\00")
(data (i32.const 2592) "wrong transaction\00")
(data (i32.const 2624) "offline\00")
(data (i32.const 2640) "online\00")
(data (i32.const 11056) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 11152) "stoi\00")
(data (i32.const 11168) ": no conversion\00")
(data (i32.const 11184) ": out of range\00")
(data (i32.const 11216) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 11488) "\00\01\02\04\07\03\06\05\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$10 (param i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$13 (param i32 i32)))
(import "env" "has_auth" (func $fimport$14 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "read_transaction" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$20 (param i64)))
(import "env" "require_auth2" (func $fimport$21 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$22 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$23 (param i32 i32)))
(import "env" "sha1" (func $fimport$24 (param i32 i32 i32)))
(import "env" "sha256" (func $fimport$25 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$26 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$27 (result i32)))
(import "env" "transaction_size" (func $fimport$28 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z13uint64_stringy" (func $5))
(export "_Z8from_hexc" (func $7))
(export "_Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj" (func $8))
(export "_Z6to_hexPKcm" (func $9))
(export "_Z13sha256_to_hexRK11checksum256" (func $10))
(export "_Z11sha1_to_hexRK11checksum160" (func $11))
(export "_Z13hex_to_sha256RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $12))
(export "_Z11hex_to_sha1RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $13))
(export "_Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb" (func $14))
(export "_Z4stoiRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERi" (func $15))
(export "_Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_" (func $16))
(export "_Z9parse_numRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $19))
(export "apply" (func $20))
(export "_ZN4game8roulette8transferERKyS2_RKN5eosio5assetERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE" (func $21))
(export "_ZN4game8roulette7receiptERKNS_6st_betE" (func $23))
(export "_ZN4game8roulette5startERKy" (func $25))
(export "_ZN4game8roulette6revealERKy" (func $27))
(export "_ZN4game8roulette6onlineEv" (func $28))
(export "_ZN4game8roulette7offlineEv" (func $30))
(export "_ZN4game8roulette7dividedEv" (func $31))
(export "malloc" (func $108))
(export "free" (func $111))
(export "_ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji" (func $126))
(export "isspace" (func $133))
(export "__errno_location" (func $134))
(export "strtol" (func $135))
(export "__shlim" (func $136))
(export "__intscan" (func $137))
(export "__shgetc" (func $138))
(export "__uflow" (func $139))
(export "__toread" (func $140))
(export "memchr" (func $141))
(export "memcmp" (func $142))
(export "strlen" (func $143))
(table $0 8 8 anyfunc)
(elem (i32.const 0) $144 $21 $23 $31 $30 $28 $27 $25)



int_32 .FUNC $98 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $112([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [24])
	$2 = (CASTING uint_64)(uint_32 $1)
	$5 = ($4 + [24])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $35($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = $1
	CALL eosio_assert(((int_32)($1 - $8) > (int_32)[7]), [704])
	CALL memcpy($8, $4, [8])
	$6 = ($8 + [8])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [704])
	CALL memcpy($6, ($4 + [8]), [8])
	$6 = ($8 + [16])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [704])
	CALL memcpy($6, ($4 + [16]), [8])
	*($9 + [4]) = ($8 + [24])
	CALL $40($9, $5)
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [64])
	$12 = $13
	*([0] + [4]) = $13
	$9 = *($0 + [4])
	*($1) = *(*($9))
	*($1 + [8]) = *(*($9) + [8])
	$2 = *($0)
	*($1 + [16]) = *(*($9) + [16])
	$11 = *($9)
	*($1 + [24]) = *($11 + [24])
	*(($1 + [32])) = *(($11 + [32]))
	$6 = ($1 + [40])
	CALL $115($6, (*($9) + [40]))
	$11 = *($9)
	*($1 + [64]) = *($11 + [64])
	*(($1 + [88])) = *(($11 + [88]))
	*(($1 + [80])) = *(($11 + [80]))
	*(($1 + [72])) = *(($11 + [72]))
	*($1 + [96]) = *(*($9) + [96])
	$9 = *($1 + [40])
	$11 = ( *(($1 + [44])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($11 + [68])
	$10 = (CASTING uint_64)(uint_32 $11)
	$8 = ($1 + [96])
	$7 = ($1 + [64])
	$5 = ($1 + [24])
	$4 = ($1 + [16])
	$3 = ($1 + [8])
	
.LOOP $label$1:
	$9 = ($9 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ($9 <= [513]) ){ goto $label$3 }
	$11 = CALL malloc($9)
	goto $label$2 
	
.LABEL $label$3
	$11 = ($13 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $11
	
.LABEL $label$2
	*($12 + [12]) = $11
	*($12 + [8]) = $11
	*($12 + [16]) = ($11 + $9)
	*($12 + [24]) = ($12 + [8])
	*($12 + [36]) = $3
	*($12 + [32]) = $1
	*($12 + [40]) = $4
	*($12 + [44]) = $5
	*($12 + [48]) = $6
	*($12 + [52]) = $7
	*($12 + [56]) = $8
	CALL $97(($12 + [32]), ($12 + [24]))
	$10 = *($1)
	*($1 + [108]) = CALL db_store_i64(*($2 + [8]), (int_64)4229865212519383040, *(*($0 + [8])), $10, $11, $9)
	if ( ($9 <= [513]) ){ goto $label$4 }
	CALL free($11)
	
.LABEL $label$4
	if ( (uint_64)($10 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($12 + [64])
}

int_64 .FUNC $94 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$4 = ($0 + [24])
	$3 = *($4)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$1 }
	$3 = (int_64)0
	$1 = ($0 + [8])
	$2 = CALL db_lowerbound_i64(*($1), *(($0 + [16])), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	CALL $55($1, $2)
	*($5 + [28]) = [0]
	*($5 + [24]) = $1
	$3 = *(*(CALL $56(($5 + [24])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [24])) = $3
	
.LABEL $label$1
	$1 = ($0 + [88])
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [1280])
	$3 = *($4)
	*($5 + [8]) = (int_64)0
	*($5) = $3
	*($5 + [16]) = [1]
	$4 = *(($0 + [116]))
	if ( ((int_32)$4 == (int_32)*(($0 + [112]))) ){ goto $label$5 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$1), [848])
	if ( $4 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$4 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $49($1, $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$1), [848])
	goto $label$3 
	
.LABEL $label$4
	$4 = $5
	
.LABEL $label$3
	*((($5 + [24]) + [16])) = *(($4 + [16]))
	*((($5 + [24]) + [8])) = *(($4 + [8]))
	*($5 + [24]) = *($4)
	*($5 + [24]) = ((int_64)*($5 + [24]) + (int_64)1)
	CALL $50($1, ($5 + [24]), *($0))
	$3 = *($5 + [24])
	*([0] + [4]) = ($5 + [48])
	return $3
}

void .FUNC $95 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [912])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $112([128])) + [32]) = (int_64)1397703940
	*($4 + [24]) = (int_64)0
	CALL eosio_assert([1], [416])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [480])
	*($4 + [48]) = [0]
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [104]) = $1
	CALL $99(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [108])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $58(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$9 }
	CALL $113(*(($3 + [48])))
	
.LABEL $label$9
	CALL $113($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*($5 + [24]) = (int_64)1397703940
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [416])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [480])
	$3 = ($0 + [48])
	CALL $42($5, $3, *($0), ($5 + [16]))
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*($5 + [8])), [2288])
	$2 = ((int_64)*($5) + (int_64)*($1))
	*($5) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [2336])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [2368])
	CALL $74($3, $5, *($0))
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $40(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[19]), [704])
	CALL memcpy(*($2 + [4]), $3, [20])
	*($2 + [4]) = (*($2 + [4]) + [20])
	$0 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $90 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [368]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	$6 = [0]
	if ( ((int_64)$9 != (int_64)$1) ){ goto $label$5 }
	$3 = *($2)
	$4 = CALL strlen([2624])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$8 }
	if ( (CALL $125($2, [0], [-1], [2624], $4) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$3 = *($2)
	$4 = CALL strlen([2640])
	if ( ((int_32)$4 != (int_32)( *(($2 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$5 }
	$6 = [0]
	if ( CALL $125($2, [0], [-1], [2640], $4) ){ goto $label$5 }
	$5 = *($0)
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [624]
	$9 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$14 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$3 = ($3 + [165])
	goto $label$12 
	
.LABEL $label$14
	$7 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$10
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$9 }
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [2640]
	$1 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$20 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$3 = ($3 + [165])
	goto $label$18 
	
.LABEL $label$20
	$7 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$16
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$1 = ((int_64)$7 | (int_64)$1)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$15 }
	*($11 + [16]) = $1
	*($11 + [8]) = $5
	*(($6 = CALL $112([16]))) = $5
	*($6 + [8]) = $9
	*(($11 + [40])) = [0]
	$3 = ($6 + [16])
	*(($11 + [32])) = $3
	*(($11 + [28])) = $3
	*($11 + [24]) = $6
	*($11 + [36]) = [0]
	*(($11 + [44])) = [0]
	CALL $37(($11 + [48]), ($11 + [8]))
	$6 = *($11 + [48])
	CALL send_inline($6, (*($11 + [52]) - $6))
	$6 = *($11 + [48])
	if ( ($6 == 0) ){ goto $label$21 }
	*($11 + [52]) = $6
	CALL $113($6)
	
.LABEL $label$21
	$6 = *(($11 + [36]))
	if ( ($6 == 0) ){ goto $label$22 }
	*(($11 + [40])) = $6
	CALL $113($6)
	
.LABEL $label$22
	$6 = *($11 + [24])
	if ( ($6 == 0) ){ goto $label$6 }
	*(($11 + [28])) = $6
	CALL $113($6)
	goto $label$6 
	
.LABEL $label$7
	$5 = *($0)
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [624]
	$9 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$28 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$7 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$24
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$23 }
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [2624]
	$1 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$34 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$7 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$30
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$1 = ((int_64)$7 | (int_64)$1)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$29 }
	*($11 + [16]) = $1
	*($11 + [8]) = $5
	*(($6 = CALL $112([16]))) = $5
	*($6 + [8]) = $9
	*(($11 + [40])) = [0]
	$3 = ($6 + [16])
	*(($11 + [32])) = $3
	*(($11 + [28])) = $3
	*($11 + [24]) = $6
	*($11 + [36]) = [0]
	*(($11 + [44])) = [0]
	CALL $37(($11 + [48]), ($11 + [8]))
	$6 = *($11 + [48])
	CALL send_inline($6, (*($11 + [52]) - $6))
	$6 = *($11 + [48])
	if ( ($6 == 0) ){ goto $label$35 }
	*($11 + [52]) = $6
	CALL $113($6)
	
.LABEL $label$35
	$6 = *(($11 + [36]))
	if ( ($6 == 0) ){ goto $label$36 }
	*(($11 + [40])) = $6
	CALL $113($6)
	
.LABEL $label$36
	$6 = *($11 + [24])
	if ( ($6 == 0) ){ goto $label$6 }
	*(($11 + [28])) = $6
	CALL $113($6)
	
.LABEL $label$6
	$6 = [1]
	
.LABEL $label$5
	*([0] + [4]) = ($11 + [64])
	return $6
}

void .FUNC $91 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$3 = (*([0] + [4]) - [144])
	*([0] + [4]) = $3
	$9 = CALL transaction_size()
	$4 = ($3 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $4
	$1 = CALL read_transaction($4, $9)
	CALL eosio_assert(((int_32)$9 == (int_32)$1), [2560])
	$6 = CALL current_time()
	*((($9 = $3) + [108])) = [0]
	*(($9 + [112])) = [0]
	*($9 + [92]) = [0]
	*($9 + [96]) = [0]
	*($9 + [100]) = [0]
	*($9 + [104]) = [0]
	*($9 + [80]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	*($9 + [116]) = [0]
	*(($9 + [120])) = [0]
	*(($9 + [124])) = [0]
	*($9 + [128]) = [0]
	*(($9 + [132])) = [0]
	*(($9 + [136])) = [0]
	*($9 + [44]) = $4
	*($9 + [40]) = $4
	*($9 + [48]) = ($4 + $1)
	CALL $100(($9 + [40]), ($9 + [80]))
	CALL $102(CALL $101(CALL $101(($9 + [40]), ($9 + [104])), ($9 + [116])), ($9 + [128]))
	$1 = CALL $103(($9 + [40]), *($9 + [116]))
	*($9 + [8]) = *($1 + [8])
	CALL $34(($9 + [24]), ($9 + [8]))
	*($9) = *($1)
	CALL $34(($9 + [8]), $9)
	$2 = *($1 + [8])
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [304]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	$4 = [0]
	if ( ((int_64)$2 != (int_64)$7) ){ goto $label$7 }
	$2 = *($1)
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [288]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$8 }
	$4 = ((int_64)$2 == (int_64)$7)
	
.LABEL $label$7
	CALL eosio_assert($4, [2592])
	if ( ((*($9 + [8]) & [1]) == 0) ){ goto $label$14 }
	CALL $113(*($9 + [16]))
	
.LABEL $label$14
	if ( ((*($9 + [24]) & [1]) == 0) ){ goto $label$15 }
	CALL $113(*($9 + [32]))
	
.LABEL $label$15
	$4 = *($1 + [28])
	if ( ($4 == 0) ){ goto $label$16 }
	*(($1 + [32])) = $4
	CALL $113($4)
	
.LABEL $label$16
	$4 = *($1 + [16])
	if ( ($4 == 0) ){ goto $label$17 }
	*(($1 + [20])) = $4
	CALL $113($4)
	
.LABEL $label$17
	CALL $80(($9 + [80]))
	*([0] + [4]) = ($9 + [144])
}

int_32 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [64])
	*([0] + [4]) = $15
	$8 = *($1)
	$9 = CALL strlen([2544])
	if ( ((int_32)$9 != (int_32)( *($1 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$2 }
	$8 = [0]
	if ( (CALL $125($1, [0], [-1], [2544], $9) == 0) ){ goto $label$1 }
	$8 = *($1)
	
.LABEL $label$2
	if ( ($8 & [1]) ){ goto $label$4 }
	$9 = ($1 + [1])
	$8 = uint_32(($8 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$8 = *(($1 + [4]))
	$9 = *($1 + [8])
	
.LABEL $label$3
	$7 = ($9 + $8)
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	if ( CALL isspace(*($9)) ){ goto $label$6 }
	$9 = ($9 + [1])
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$8 }
	$8 = $9
	
.LOOP $label$9:
	$8 = ($8 + [1])
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$8 }
	if ( CALL isspace(*($8)) ){ goto $label$9 }
	*($9) = *($8)
	$9 = ($9 + [1])
	goto $label$9 
	
.LABEL $label$8
	$7 = $9
	
.LABEL $label$5
	$9 = *($1)
	if ( ($9 & [1]) ){ goto $label$11 }
	$8 = ($1 + [1])
	$9 = ($8 + uint_32($9 >> [1]))
	goto $label$10 
	
.LABEL $label$11
	$8 = *($1 + [8])
	$9 = ($8 + *(($1 + [4])))
	
.LABEL $label$10
	CALL $123($1, ($7 - $8), ($9 - $7))
	$8 = *($1)
	if ( ($8 & [1]) ){ goto $label$13 }
	$9 = uint_32($8 >> [1])
	$8 = ($1 + [1])
	goto $label$12 
	
.LABEL $label$13
	$9 = *(($1 + [4]))
	$8 = *($1 + [8])
	
.LABEL $label$12
	$7 = ($8 + $9)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$17 }
	$9 = [0]
	
.LOOP $label$18:
	$9 = (((int_32)*($8) == (int_32)[45]) + $9)
	$8 = ($8 + [1])
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$18 }
	$8 = [0]
	if ( ((int_32)$9 != (int_32)[2]) ){ goto $label$1 }
	$8 = [0]
	*($15 + [56]) = [0]
	*($15 + [48]) = (int_64)0
	*($15 + [47]) = [45]
	*($15) = [0]
	*($15 + [46]) = [1]
	$9 = CALL _Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb($1, ($15 + [48]), ($15 + [47]), $15, ($15 + [46]))
	*($15 + [60]) = $9
	$14 = *($15 + [48])
	if ( (( *($15 + [52]) ? uint_32($14 >> [1]) : ($14 & [1]) ) == 0) ){ goto $label$14 }
	CALL _Z9parse_numRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($15, ($15 + [48]))
	$7 = *($3)
	if ( ($7 == 0) ){ goto $label$16 }
	*($3 + [4]) = $7
	CALL $113($7)
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	$7 = ($3 + [8])
	goto $label$15 
	
.LABEL $label$17
	$8 = [0]
	goto $label$1 
	
.LABEL $label$16
	$7 = ($3 + [8])
	
.LABEL $label$15
	*($3) = *($15)
	*($7) = *($15 + [8])
	*(($3 + [4])) = *($15 + [4])
	CALL $115($2, ($15 + [48]))
	*($15) = [45]
	*($15 + [60]) = ($9 + [1])
	*($15 + [47]) = [1]
	$7 = CALL _Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb($1, ($15 + [48]), $15, ($15 + [60]), ($15 + [47]))
	*($15 + [60]) = $7
	$14 = *($15 + [48])
	$9 = ( *($15 + [52]) ? uint_32($14 >> [1]) : ($14 & [1]) )
	if ( ($9 == 0) ){ goto $label$14 }
	CALL eosio_assert(((int_32)$9 == (int_32)[40]), [96])
	CALL _Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj(($15 + [48]), $15, [20])
	*(($4 + [24])) = *(($15 + [24]))
	*(($4 + [16])) = *(($15 + [16]))
	*(($4 + [8])) = *($15 + [8])
	*($4) = *($15)
	$14 = *($15 + [48])
	if ( (( *($15 + [52]) ? uint_32($14 >> [1]) : ($14 & [1]) ) == 0) ){ goto $label$14 }
	$8 = ($7 + [1])
	*($15 + [60]) = $8
	CALL $132($15, $1, $8, [-1], $1)
	if ( (*($15 + [48]) & [1]) ){ goto $label$20 }
	*($15 + [48]) = [0]
	goto $label$19 
	
.LABEL $label$20
	*(*(($15 + [56]))) = [0]
	*($15 + [52]) = [0]
	
.LABEL $label$19
	CALL $117(($15 + [48]), [0])
	$8 = *(($15 + [8]))
	*((($15 + [48]) + [8])) = $8
	*($15 + [48]) = *($15)
	$14 = *($15 + [48])
	$8 = ( $8 ? (($15 + [48]) | [1]) : ($14 & [1]) )
	$9 = [-1]
	
.LOOP $label$21:
	$7 = ($8 + $9)
	$1 = ($9 + [1])
	$9 = $1
	if ( *(($7 + [1])) ){ goto $label$21 }
	$6 = (CASTING uint_64)(uint_32 $1)
	$11 = (int_64)0
	$10 = (int_64)59
	$12 = (int_64)0
	
.LOOP $label$22:
	$13 = (int_64)0
	if ( ((uint_64)$11 >= (uint_64)$6) ){ goto $label$23 }
	$9 = *($8)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$9 = ($9 + [165])
	goto $label$24 
	
.LABEL $label$25
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$27 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	goto $label$26 
	
.LABEL $label$27
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$26
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$22 }
	*($5) = $12
	$8 = [1]
	
.LABEL $label$14
	if ( (($14 & [1]) == 0) ){ goto $label$1 }
	CALL $113(*(($15 + [56])))
	
.LABEL $label$1
	*([0] + [4]) = ($15 + [64])
	return $8
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert((((*($1) + [-1]) & [255]) <= [34]), [2400])
	$4 = *($2 + [8])
	$3 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)((float_64)((float_64)(float_64)36 / (float_64)(CASTING float_64)(uint_32 *($1))) * (float_64)(float_64)0.98)))
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [416])
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$1 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	
.LABEL $label$1
	CALL eosio_assert($1, [480])
	CALL $33($7, $0)
	$6 = *($7)
	$5 = *($7 + [8])
	CALL eosio_assert([1], [1504])
	CALL eosio_assert([1], [1520])
	CALL eosio_assert(((int_64)$4 == (int_64)$5), [1888])
	CALL eosio_assert(((int_64)$3 <= (int_64)((int_64)$6 / (int_64)50)), [2464])
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

int_32 .FUNC $123 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $116($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $122 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$3 }
	$4 = uint_32($5 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $6 ){ goto $label$5 }
	$6 = [10]
	goto $label$4 
	
.LABEL $label$5
	$5 = *($0)
	$6 = (($5 & [-2]) + [-1])
	
.LABEL $label$4
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$6 }
	CALL $116($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	return $0
	
.LABEL $label$6
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ($5 & [1]) ){ goto $label$8 }
	$5 = ($0 + [1])
	goto $label$7 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	
.LABEL $label$7
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$10 }
	CALL memmove(($6 + $3), $6, $1)
	$2 = ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) )
	
.LABEL $label$10
	CALL memmove($6, $2, $3)
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$12 }
	*($0) = ($3 << [1])
	goto $label$11 
	
.LABEL $label$12
	*($0 + [4]) = $3
	
.LABEL $label$11
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $130 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $112($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $132 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $112($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC isspace (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC __errno_location ()
{
	return [11200]
}

int_32 .FUNC $121 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $122($0, $1, $2, CALL $143($2))
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [11217])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [11217])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [11217]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [11217]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [11488]))
	$10 = *(($13 + [11217]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [11217]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [11217]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [11217]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [11217])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [11217])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $112($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $113($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [704])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [704])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [704])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$3 = CALL strlen([11152])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($6) = ($3 << [1])
	$5 = ($6 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $112($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $5
	*($6 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($5, [11152], $3)
	
.LABEL $label$4
	*(($5 + $3)) = [0]
	*($6 + [12]) = [0]
	$3 = *($0 + [8])
	$5 = *($0)
	$4 = *(CALL __errno_location())
	*(CALL __errno_location()) = [0]
	$3 = ( $3 ? ($0 + [1]) : ($5 & [1]) )
	$2 = CALL strtol($3, ($6 + [12]), $2)
	$0 = CALL __errno_location()
	$5 = *($0)
	*($0) = $4
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($6 + [12])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $3)
	
.LABEL $label$7
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	CALL $113(*($6 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
	return $2
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $127($6)
	
.LABEL $label$1
	CALL $128($6)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [976])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $112([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [1008])
	CALL memcpy($5, $6, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [1008])
	CALL memcpy(($5 + [8]), ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [1008])
	CALL memcpy(($7 + [16]), ($6 + [16]), [1])
	*($5 + [16]) = ((int_32)*($7 + [16]) != (int_32)[0])
	*($5 + [28]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)7235159537265672192
	$6 = *($5 + [28])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)7235159537265672192
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $54(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$7
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $113($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

int_32 .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$4 = ($0 + [24])
	$3 = *($4)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$1 }
	$3 = (int_64)0
	$1 = ($0 + [8])
	$2 = CALL db_lowerbound_i64(*($1), *(($0 + [16])), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	CALL $55($1, $2)
	*($5 + [28]) = [0]
	*($5 + [24]) = $1
	$3 = *(*(CALL $56(($5 + [24])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [24])) = $3
	
.LABEL $label$1
	$1 = ($0 + [88])
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [1280])
	$3 = *($4)
	*($5 + [8]) = (int_64)0
	*($5) = $3
	*($5 + [16]) = [1]
	$4 = *(($0 + [116]))
	if ( ((int_32)$4 == (int_32)*(($0 + [112]))) ){ goto $label$5 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$1), [848])
	if ( $4 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$4 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $49($1, $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$1), [848])
	goto $label$3 
	
.LABEL $label$4
	$4 = $5
	
.LABEL $label$3
	*(($2 = (($5 + [24]) + [16]))) = *(($4 + [16]))
	*((($5 + [24]) + [8])) = *(($4 + [8]))
	*($5 + [24]) = *($4)
	CALL $50($1, ($5 + [24]), *($0))
	$0 = *($2)
	*([0] + [4]) = ($5 + [48])
	return $0
}

int_32 .FUNC $125 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	$9 = $10
	*([0] + [4]) = $10
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$5 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($7 >> [31]) ^ (int_32)[1]), [976])
	if ( ((uint_32)$7 <= (uint_32)[512]) ){ goto $label$6 }
	$3 = CALL malloc($7)
	CALL db_get_i64($1, $3, $7)
	CALL free($3)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($10 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $3
	CALL db_get_i64($1, $3, $7)
	
.LABEL $label$5
	$2 = ($0 + [24])
	*(($5 = CALL $112([32])) + [8]) = (int_64)1397703940
	*($5) = (int_64)0
	CALL eosio_assert([1], [416])
	$10 = ($5 + [8])
	$8 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$4 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [480])
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [1008])
	CALL memcpy($5, $3, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [1008])
	CALL memcpy($10, ($3 + [8]), [8])
	*($5 + [20]) = $1
	*($9 + [24]) = $5
	*($9 + [16]) = (int_64)6820308914865700864
	$7 = *($5 + [20])
	*($9 + [12]) = $7
	$1 = ($0 + [28])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($6 + [8]) = (int_64)6820308914865700864
	*($6 + [16]) = $7
	*($9 + [24]) = [0]
	*($6) = $5
	*($1) = ($6 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $45($2, ($9 + [24]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$12
	$6 = *($9 + [24])
	*($9 + [24]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $113($6)
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [32])
	return $5
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = *(($1 + [28]))
	if ( ((int_32)$4 == (int_32)*($1 + [24])) ){ goto $label$4 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$1), [848])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)6820308914865700864, (int_64)6820308914865700864)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $43($1, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$1), [848])
	
.LABEL $label$3
	*($0) = *($4)
	*(($0 + [8])) = *(($4 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($5 + [8]) = $3
	CALL $44($5, $1, $2, ($5 + [8]))
	$1 = *($5 + [4])
	*($0) = *($1)
	*(($0 + [12])) = *(($1 + [12]))
	*(($0 + [8])) = *(($1 + [8]))
	*(($0 + [4])) = *(($1 + [4]))
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $41 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [848])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $46($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [848])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [704])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [704])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $112(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $113($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $113($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	$9 = $10
	*([0] + [4]) = $10
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$5 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($7 >> [31]) ^ (int_32)[1]), [976])
	if ( ((uint_32)$7 <= (uint_32)[512]) ){ goto $label$6 }
	$3 = CALL malloc($7)
	CALL db_get_i64($1, $3, $7)
	CALL free($3)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($10 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $3
	CALL db_get_i64($1, $3, $7)
	
.LABEL $label$5
	$2 = ($0 + [24])
	*(($5 = CALL $112([32])) + [8]) = (int_64)1397703940
	*($5) = (int_64)0
	CALL eosio_assert([1], [416])
	$10 = ($5 + [8])
	$8 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$4 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [480])
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [1008])
	CALL memcpy($5, $3, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [1008])
	CALL memcpy($10, ($3 + [8]), [8])
	*($5 + [20]) = $1
	*($9 + [24]) = $5
	$8 = (uint_64)*(($5 + [8])) >> (uint_64)(int_64)8
	*($9 + [16]) = $8)
	$7 = *($5 + [20])
	*($9 + [12]) = $7
	$1 = ($0 + [28])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($6 + [8]) = $8
	*($6 + [16]) = $7
	*($9 + [24]) = [0]
	*($6) = $5
	*($1) = ($6 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $47($2, ($9 + [24]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$12
	$6 = *($9 + [24])
	*($9 + [24]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $113($6)
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [32])
	return $5
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $112(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $113($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $113($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [912])
	*(($4 = CALL $112([32])) + [8]) = (int_64)1397703940
	*($4) = (int_64)0
	CALL eosio_assert([1], [416])
	$5 = ($4 + [8])
	$6 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [480])
	*($4 + [16]) = $1
	$7 = *($3)
	*($4) = *($7)
	*(($4 + [12])) = *(($7 + [12]))
	*(($4 + [8])) = *(($7 + [8]))
	*(($4 + [4])) = *(($7 + [4]))
	CALL eosio_assert([1], [704])
	CALL memcpy(($9 + [16]), $4, [8])
	CALL eosio_assert([1], [704])
	CALL memcpy((($9 + [16]) | [8]), $5, [8])
	*($4 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)6820308914865700864, $2, (int_64)6820308914865700864, ($9 + [16]), [16])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$6 }
	*(($1 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$6
	*($9 + [8]) = $4
	*($9 + [16]) = (int_64)6820308914865700864
	$8 = *($4 + [20])
	*($9 + [4]) = $8
	$3 = ($1 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)6820308914865700864
	*($7 + [16]) = $8
	*($9 + [8]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $45(($1 + [24]), ($9 + [8]), ($9 + [16]), ($9 + [4]))
	
.LABEL $label$7
	*($0 + [4]) = $4
	*($0) = $1
	$7 = *($9 + [8])
	*($9 + [8]) = [0]
	if ( ($7 == 0) ){ goto $label$9 }
	CALL $113($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [32])
}

int_32 .FUNC $124 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

void .FUNC $128 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $129($1, $0, [11168])
	CALL abort()
	(unreachable)
}

int_32 .FUNC _Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = $1
	if ( ($2 == 0) ){ goto $label$1 }
	$13 = $1
	$9 = ($9 & [1])
	$9 = *($0)
	if ( (( *($0 + [4]) ? uint_32($9 >> [1]) : $9 ) == 0) ){ goto $label$1 }
	$3 = ($0 + [1])
	$5 = ($0 + [8])
	$9 = ( *($5) ? $3 : $9 )
	$8 = ($2 + [-1])
	$13 = $1
	
.LOOP $label$2:
	$2 = *($9)
	if ( ((uint_32)(($2 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$4 }
	$2 = ($2 + [208])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$2 = ($2 + [169])
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)(($2 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$6 }
	$2 = ($2 + [201])
	goto $label$3 
	
.LABEL $label$6
	$2 = [0]
	CALL eosio_assert([0], [16])
	
.LABEL $label$3
	$10 = ($2 << [4])
	*($13) = $10
	$7 = ($0 + [4])
	$11 = *($7)
	$2 = *($0)
	$6 = ($2 & [1])
	$12 = *($5)
	$4 = ($9 + [1])
	if ( ((int_32)$4 == (int_32)(( $12 ? $3 : $6 ) + ( $11 ? uint_32($2 >> [1]) : $6 ))) ){ goto $label$10 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$9 }
	$2 = ($2 + [208])
	goto $label$8 
	
.LABEL $label$10
	$9 = $4
	$13 = ($13 + [1])
	if ( $8 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$9
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$11 }
	$2 = ($2 + [169])
	goto $label$8 
	
.LABEL $label$11
	if ( ((uint_32)(($2 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$12 }
	$2 = ($2 + [201])
	goto $label$8 
	
.LABEL $label$12
	$2 = [0]
	CALL eosio_assert([0], [16])
	$10 = *($13)
	
.LABEL $label$8
	*($13) = ($10 | $2)
	$9 = ($9 + [2])
	$11 = *($7)
	$12 = *($5)
	$2 = *($0)
	$13 = ($13 + [1])
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$7
	$8 = ($8 + [-1])
	$4 = ($2 & [1])
	if ( ((int_32)$9 != (int_32)(( $12 ? $3 : $4 ) + ( $11 ? uint_32(($2 & [254]) >> [1]) : $4 ))) ){ goto $label$2 }
	
.LABEL $label$1
	return ($13 - $1)
}

void .FUNC _Z6to_hexPKcm (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$2:
	$3 = *($1)
	CALL $119($0, *((uint_32($3 >> [4]) + [48])))
	CALL $119($0, *((($3 & [15]) + [48])))
	$1 = ($1 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($5 + [15]) = $1
	$1 = *($2)
	$3 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($3 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$4 = (($3 + [17]) & [-16])
	$1 = CALL $112($4)
	*($0) = ($4 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($5 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $118($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $3)
	*([0] + [4]) = ($5 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $114($0)
}

int_32 .FUNC _Z8from_hexc (int_32 $0)
{
	if ( ((uint_32)(($0 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$2 }
	$0 = ($0 + [208])
	goto $label$1 
	
.LABEL $label$2
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$3 }
	$0 = ($0 + [169])
	goto $label$1 
	
.LABEL $label$3
	if ( ((uint_32)(($0 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$4 }
	$0 = ($0 + [201])
	goto $label$1 
	
.LABEL $label$4
	$0 = [0]
	CALL eosio_assert([0], [16])
	
.LABEL $label$1
	return ($0 & [255])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _Z13uint64_stringy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 ((uint_64)$1 % (uint_64)(int_64)10))
	CALL $6($5, ( ($3 | [48]) ? ($3 + [55]) : ($3 <= [10]) ), $0)
	$2 = ((uint_64)$1 / (uint_64)(int_64)10)
	if ( (*($0) & [1]) ){ goto $label$3 }
	*($0) = [0]
	goto $label$2 
	
.LABEL $label$3
	*(*(($0 + [8]))) = [0]
	*($4) = [0]
	
.LABEL $label$2
	CALL $117($0, [0])
	*(($0 + [8])) = *(($5 + [8]))
	*($0) = *($5)
	$3 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $2
	if ( $3 ){ goto $label$1 }
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($3) != (int_32)[-1]), [112])
	$2 = CALL $124($0, *($2), *($3))
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$4 }
	$3 = *($3)
	CALL $132($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$3 }
	*($1) = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert(((int_32)*($4) ^ (int_32)[1]), [144])
	$2 = [-1]
	goto $label$1 
	
.LABEL $label$3
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$2
	CALL $117($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
	return $2
}

int_32 .FUNC _Z4stoiRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERi (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = [0]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	if ( ($3 <= $2) ){ goto $label$2 }
	
.LABEL $label$1
	*($1) = CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji($0, [0], [10])
	return [1]
}

void .FUNC _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [32])
	*([0] + [4]) = $13
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	CALL $131(($13 + [16]), $1)
	$4 = ($2 + [1])
	$3 = (($13 + [16]) | [1])
	$10 = ($2 + [4])
	
.LOOP $label$2:
	$8 = *($13 + [16])
	$12 = ($8 & [1])
	$11 = (($13 + [16]) + [8])
	$9 = [0]
	$6 = ($1 & [1])
	$1 = *($2)
	$1 = ( *($10) ? uint_32($1 >> [1]) : $6 )
	if ( ($1 == 0) ){ goto $label$3 }
	$9 = ( *($13 + [20]) ? uint_32($8 >> [1]) : $12 )
	if ( ((int_32)$9 < (int_32)$1) ){ goto $label$1 }
	$5 = ( *($11) ? $3 : $12 )
	$7 = ($5 + $9)
	$6 = ( *(($2 + [8])) ? $4 : $6 )
	$8 = *($6)
	$12 = $5
	
.LOOP $label$4:
	$9 = (($9 - $1) + [1])
	if ( ($9 == 0) ){ goto $label$1 }
	$9 = CALL memchr($12, $8, $9)
	if ( ($9 == 0) ){ goto $label$1 }
	if ( (CALL memcmp($9, $6, $1) == 0) ){ goto $label$5 }
	$12 = ($9 + [1])
	$9 = ($7 - $12)
	if ( ((int_32)$9 >= (int_32)$1) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$1 }
	$9 = ($9 - $5)
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$3
	CALL $132($13, ($13 + [16]), [0], $9, ($13 + [16]))
	$1 = ($0 + [4])
	$12 = *($1)
	if ( ((uint_32)$12 >= (uint_32)*(($0 + [8]))) ){ goto $label$7 }
	*($12) = *($13)
	$12 = ($13 + [8])
	*(($12 + [8])) = *($12)
	*($12) = [0]
	*($13) = [0]
	*($13 + [4]) = [0]
	*($1) = (*($1) + [12])
	goto $label$6 
	
.LABEL $label$7
	CALL $17($0, $13)
	if ( ((*($13) & [1]) == 0) ){ goto $label$6 }
	CALL $113(*(($13 + [8])))
	
.LABEL $label$6
	CALL $132($13, ($13 + [16]), ($9 + [1]), [-1], ($13 + [16]))
	if ( (*($13 + [16]) & [1]) ){ goto $label$9 }
	*($13 + [16]) = [0]
	goto $label$8 
	
.LABEL $label$9
	*(*($11)) = [0]
	*($13 + [20]) = [0]
	
.LABEL $label$8
	CALL $117(($13 + [16]), [0])
	*($11) = *(($13 + [8]))
	*($13 + [16]) = *($13)
	goto $label$2 
	
.LABEL $label$1
	$1 = *($13 + [16])
	if ( (( *($13 + [20]) ? uint_32($1 >> [1]) : ($1 & [1]) ) == 0) ){ goto $label$10 }
	$1 = ($0 + [4])
	$9 = *($1)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [8]))) ){ goto $label$11 }
	CALL $131($9, ($13 + [16]))
	*($1) = (*($1) + [12])
	goto $label$10 
	
.LABEL $label$11
	CALL $18($0, ($13 + [16]))
	
.LABEL $label$10
	if ( ((*($13 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL $113(*(($13 + [24])))
	
.LABEL $label$12
	*([0] + [4]) = ($13 + [32])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $112(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $113(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $113($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _Z13sha256_to_hexRK11checksum256 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	
.LOOP $label$1:
	$2 = *(($1 + $3))
	CALL $119($0, *((uint_32($2 >> [4]) + [48])))
	CALL $119($0, *((($2 & [15]) + [48])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$1 }
}

void .FUNC _Z11sha1_to_hexRK11checksum160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	
.LOOP $label$1:
	$2 = *(($1 + $3))
	CALL $119($0, *((uint_32($2 >> [4]) + [48])))
	CALL $119($0, *((($2 & [15]) + [48])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[20]) ){ goto $label$1 }
}

void .FUNC _Z13hex_to_sha256RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = *($1)
	CALL eosio_assert(((int_32)( *($1 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ) == (int_32)[64]), [80])
	CALL _Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj($1, $0, [32])
}

void .FUNC _Z11hex_to_sha1RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = *($1)
	CALL eosio_assert(((int_32)( *($1 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ) == (int_32)[40]), [96])
	CALL _Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj($1, $0, [20])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	$3 = *($3)
	*($1) = *($3)
	*(($4 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [1216])
	CALL eosio_assert([1], [704])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [704])
	CALL memcpy(($5 | [8]), $4, [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($6 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $112(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$6 = ($4 + ((int_32)$2 * (int_32)[12]))
	CALL $131($6, $1)
	$2 = ($4 + ((int_32)$5 * (int_32)[12]))
	$3 = ($6 + [12])
	$5 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$5 = ($4 + [-12])
	
.LOOP $label$7:
	*(($6 + [-12])) = *($5)
	$4 = ($5 + [8])
	*(($6 + [-4])) = *($4)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	$6 = ($6 + [-12])
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	$6 = ([0] - $4)
	$5 = ($5 + [-12])
	
.LOOP $label$9:
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $113(*(($5 + [8])))
	
.LABEL $label$10
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $113($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _Z9parse_numRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$8 = *($1)
	CALL eosio_assert(((int_32)( *($1 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) ) != (int_32)[0]), [176])
	$8 = CALL $112([144])
	*($0) = $8
	*($0 + [4]) = $8
	*($8) = (int_64)0
	*($8 + [8 align=4]) = (int_64)0
	*($8 + [16]) = [0]
	$3 = ($8 + [144])
	*($0 + [8]) = $3
	*($8 + [20]) = [0]
	*($8 + [24]) = [0]
	*($8 + [28]) = [0]
	*($8 + [32]) = [0]
	*($8 + [36]) = [0]
	*($8 + [40]) = [0]
	*($8 + [44]) = [0]
	*($8 + [48]) = [0]
	*($8 + [52]) = [0]
	*($8 + [56]) = [0]
	*($8 + [60]) = [0]
	*($8 + [64]) = [0]
	*($8 + [68]) = [0]
	*($8 + [72]) = [0]
	*($8 + [76]) = [0]
	*($8 + [80]) = [0]
	*($8 + [84]) = [0]
	*($8 + [88]) = [0]
	*($8 + [92]) = [0]
	*($8 + [96]) = [0]
	*($8 + [100]) = [0]
	*($8 + [104]) = [0]
	*($8 + [108]) = [0]
	*($8 + [112]) = [0]
	*($8 + [116]) = [0]
	*($8 + [120]) = [0]
	*($8 + [124]) = [0]
	*($8 + [128]) = [0]
	*($8 + [132]) = [0]
	*($8 + [136]) = [0]
	*($8 + [140]) = [0]
	*($0 + [4]) = $3
	*(($9 + [24])) = [0]
	*($9 + [16]) = (int_64)0
	$8 = CALL strlen([224])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$4 }
	*($9 + [16]) = ($8 << [1])
	$3 = (($9 + [16]) | [1])
	if ( $8 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($8 + [16]) & [-16])
	$3 = CALL $112($5)
	*($9 + [16]) = ($5 | [1])
	*($9 + [24]) = $3
	*($9 + [20]) = $8
	
.LABEL $label$3
	CALL memcpy($3, [224], $8)
	
.LABEL $label$2
	*(($3 + $8)) = [0]
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_(($9 + [32]), $1, ($9 + [16]))
	$8 = [1]
	if ( ((*($9 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $113(*($9 + [24]))
	
.LABEL $label$5
	$5 = *($9 + [32])
	if ( ((int_32)$5 == (int_32)*($9 + [36])) ){ goto $label$6 }
	$4 = (($9 + [16]) + [8])
	
.LOOP $label$8:
	$8 = *($5)
	if ( ($8 & [1]) ){ goto $label$10 }
	$1 = uint_32($8 >> [1])
	$6 = ($5 + [1])
	goto $label$9 
	
.LABEL $label$10
	$1 = *($5 + [4])
	$6 = *($5 + [8])
	
.LABEL $label$9
	$7 = [0]
	$3 = [0]
	$8 = CALL strlen([240])
	if ( ($8 == 0) ){ goto $label$13 }
	if ( ((int_32)$1 < (int_32)$8) ){ goto $label$12 }
	$2 = ($6 + $1)
	$3 = $6
	
.LOOP $label$14:
	$1 = (($1 - $8) + [1])
	if ( ($1 == 0) ){ goto $label$12 }
	$1 = CALL memchr($3, [47], $1)
	if ( ($1 == 0) ){ goto $label$12 }
	if ( (CALL memcmp($1, [240], $8) == 0) ){ goto $label$15 }
	$3 = ($1 + [1])
	$1 = ($2 - $3)
	if ( ((int_32)$1 >= (int_32)$8) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$12 }
	$3 = ($1 - $6)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL $132(($9 + [16]), $5, [0], $3, $5)
	$8 = CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(($9 + [16]), [0], [10])
	CALL $132($9, $5, ($3 + [1]), [-1], $5)
	$3 = CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji($9, [0], [10])
	$1 = ($8 + [-1])
	if ( ((uint_32)$1 > (uint_32)[35]) ){ goto $label$16 }
	$7 = (((int_32)$3 > (int_32)$8) & ((int_32)$3 < (int_32)[37]))
	
.LABEL $label$16
	if ( ((*($9) & [1]) == 0) ){ goto $label$17 }
	CALL $113(*(($9 + [8])))
	
.LABEL $label$17
	if ( ((*($9 + [16]) & [1]) == 0) ){ goto $label$18 }
	CALL $113(*($4))
	
.LABEL $label$18
	if ( ($7 == 0) ){ goto $label$7 }
	if ( ((int_32)$8 > (int_32)$3) ){ goto $label$11 }
	$8 = ((*($0) + ($8 << [2])) + [-4])
	
.LOOP $label$19:
	*($8) = [1]
	$8 = ($8 + [4])
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)$3) ){ goto $label$19 }
	goto $label$11 
	
.LABEL $label$12
	$8 = CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji($5, [0], [10])
	$1 = ($8 + [-1])
	if ( ((uint_32)$1 > (uint_32)[35]) ){ goto $label$20 }
	*((*($0) + ($1 << [2]))) = [1]
	goto $label$11 
	
.LABEL $label$20
	if ( ($8 == 0) ){ goto $label$21 }
	if ( ((int_32)$8 != (int_32)[37]) ){ goto $label$11 }
	$8 = [1]
	$1 = [0]
	
.LOOP $label$22:
	if ( ((int_32)((int_32)$8 % (int_32)[2]) != (int_32)[1]) ){ goto $label$23 }
	*((*($0) + $1)) = [1]
	
.LABEL $label$23
	$1 = ($1 + [4])
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)[37]) ){ goto $label$22 }
	goto $label$11 
	
.LABEL $label$21
	$8 = [1]
	$1 = [0]
	
.LOOP $label$24:
	if ( ($8 & [1]) ){ goto $label$25 }
	*((*($0) + $1)) = [1]
	
.LABEL $label$25
	$1 = ($1 + [4])
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)[37]) ){ goto $label$24 }
	
.LABEL $label$11
	$5 = ($5 + [12])
	if ( ((int_32)$5 != (int_32)*($9 + [36])) ){ goto $label$8 }
	$8 = [1]
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	
.LABEL $label$6
	CALL eosio_assert($8, [256])
	$3 = *($9 + [32])
	if ( ($3 == 0) ){ goto $label$26 }
	$8 = *($9 + [36])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$28 }
	$1 = ([0] - $3)
	$8 = ($8 + [-12])
	
.LOOP $label$29:
	if ( ((*($8) & [1]) == 0) ){ goto $label$30 }
	CALL $113(*(($8 + [8])))
	
.LABEL $label$30
	$8 = ($8 + [-12])
	if ( ((int_32)($8 + $1) != (int_32)[-12]) ){ goto $label$29 }
	$8 = *($9 + [32])
	goto $label$27 
	
.LABEL $label$28
	$8 = $3
	
.LABEL $label$27
	*($9 + [36]) = $3
	CALL $113($8)
	
.LABEL $label$26
	*([0] + [4]) = ($9 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $114(($9 + [16]))
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $112(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL $113(*(($1 + [48])))
	
.LABEL $label$11
	CALL $113($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $113($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1008])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1008])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1008])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1008])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [1008])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $60(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[19]), [1008])
	CALL memcpy($3, *($2 + [4]), [20])
	*($2 + [4]) = (*($2 + [4]) + [20])
	$0 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1008])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$0), [848])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $49($0, $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$0), [848])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [1056])
	CALL $51($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $52($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	$3 = *($3)
	*($1) = *($3)
	*(($4 = ($1 + [16]))) = *(($3 + [16]))
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [1216])
	CALL eosio_assert([1], [704])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [704])
	CALL memcpy(($6 | [8]), $5, [8])
	*($6 + [31]) = *($4)
	CALL eosio_assert([1], [704])
	CALL memcpy(($6 + [16]), ($6 + [31]), [1])
	CALL db_update_i64(*($1 + [28]), $2, $6, [17])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [912])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $112([40])) + [24]) = $1
	CALL $53(($7 + [16]), $3)
	*($7 + [32]) = $3
	*($7 + [16]) = (int_64)7235159537265672192
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = (int_64)7235159537265672192
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $54(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $113($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$2 = *($0)
	$3 = *(*($0 + [4]))
	*($1) = *($3)
	*(($4 = ($1 + [16]))) = *(($3 + [16]))
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [704])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [704])
	CALL memcpy(($6 | [8]), $5, [8])
	*($6 + [31]) = *($4)
	CALL eosio_assert([1], [704])
	CALL memcpy(($6 + [16]), ($6 + [31]), [1])
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)7235159537265672192, *(*($0 + [8])), (int_64)7235159537265672192, $6, [17])
	if ( ((uint_64)*($2 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($2 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $112(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $113($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $113($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $112([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [712]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $132($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $117($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $56 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [108]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1408])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4229865212519383040)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1344])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1344])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $55(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [24]) = (int_64)0
	*(($4 = ($0 + [32]))) = (int_64)1397703940
	CALL eosio_assert([1], [416])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [480])
	*(($0 + [48])) = [0]
	*($0 + [40 align=4]) = (int_64)0
	*($0 + [104]) = $1
	*($6 + [8]) = *($2 + [4])
	*($6 + [20]) = ($0 + [8])
	*($6 + [16]) = $0
	*($6 + [24]) = ($0 + [16])
	*($6 + [28]) = ($0 + [24])
	*($6 + [32]) = ($0 + [40])
	*($6 + [36]) = ($0 + [64])
	*($6 + [40]) = ($0 + [96])
	CALL $59(($6 + [16]), ($6 + [8]))
	*($0 + [108]) = *(*($2 + [8]))
	*([0] + [4]) = ($6 + [48])
	return $0
}

void .FUNC $116 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $112($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $113($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $112(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $113($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $114 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $112($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $130($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $113($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $112 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11148])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $113 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $110 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11142]) == 0) ){ goto $label$2 }
	$7 = *([0] + [11144])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [11142]) = [1]
	$7 = ($7 << [16])
	*([0] + [11144]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11144])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [11144]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [11142]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [11142]) = [1]
	$3 = ($3 << [16])
	*([0] + [11144]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11144])
	
.LABEL $label$8
	*([0] + [11144]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [11032])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10840]
	$1 = (((int_32)$2 * (int_32)[12]) + [10840])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

int_32 .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $116($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0)
	$2 = ($4 & [1])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ((*($0) & [-2]) + [-1])
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = [10]
	$4 = uint_32($4 >> [1])
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $120($0, $3, [1], $3, $3, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($4 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($4 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $4)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC _ZN4game8roulette6onlineEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$3 = [1]
	if ( CALL has_auth(*($0)) ){ goto $label$1 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [368]
	$6 = (int_64)0
	
.LOOP $label$2:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$3 }
	$1 = *($3)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$1 = ($1 + [165])
	goto $label$4 
	
.LABEL $label$5
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$3
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$2 }
	$3 = CALL has_auth($6)
	
.LABEL $label$1
	CALL eosio_assert($3, [384])
	CALL eosio_assert(((int_32)CALL $48($0) ^ (int_32)[1]), [1472])
	*(($3 = ($8 + [16]))) = (int_64)0
	*(($8 + [8])) = (int_64)0
	*($3) = [1]
	*($8) = (int_64)0
	$1 = ($0 + [88])
	$3 = *(($0 + [116]))
	if ( ((int_32)$3 == (int_32)*(($0 + [112]))) ){ goto $label$8 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$1), [848])
	if ( $3 ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$3 = CALL db_find_i64(*($1), *(($0 + [96])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	$3 = CALL $49($1, $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$1), [848])
	goto $label$6 
	
.LABEL $label$7
	$3 = $8
	
.LABEL $label$6
	*(($2 = (($8 + [24]) + [16]))) = *(($3 + [16]))
	*((($8 + [24]) + [8])) = *(($3 + [8]))
	*($8 + [24]) = *($3)
	if ( ((int_32)*($2) == (int_32)[1]) ){ goto $label$9 }
	*($2) = [1]
	CALL $50($1, ($8 + [24]), *($0))
	
.LABEL $label$9
	*([0] + [4]) = ($8 + [48])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [976])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $112([128])
	$6 = CALL $57($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [108])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $58(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$10 }
	CALL $113(*(($4 + [48])))
	
.LABEL $label$10
	CALL $113($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $7) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$6 = *($0)
	$3 = int_32(($7 - $6) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$3 }
	$5 = [268435455]
	$2 = ($2 - $6)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$5 = int_32($2 >> [3])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL $112(($5 << [4]))
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$1 
	
.LABEL $label$5
	*(($0 + [4])) = ($7 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $130($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$7 = ($7 - $6)
	$3 = ($2 + ($3 << [4]))
	$4 = ($3 - $7)
	$1 = ($3 + ($1 << [4]))
	$5 = ($2 + ($5 << [4]))
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($4, $6, $7)
	$6 = *($0)
	
.LABEL $label$7
	*($0) = $4
	*(($0 + [4])) = $1
	*(($0 + [8])) = $5
	if ( ($6 == 0) ){ goto $label$8 }
	CALL $113($6)
	
.LABEL $label$8
	(unreachable)
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1456])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $107($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [1008])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [1008])
	CALL memcpy(($7 + [8]), *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC _ZN4game8roulette8transferERKyS2_RKN5eosio5assetERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	$20 = (*([0] + [4]) - [352])
	*([0] + [4]) = $20
	CALL require_auth(*($1))
	$14 = *($0)
	$16 = *($1)
	if ( ((int_64)$16 == (int_64)$14) ){ goto $label$2 }
	if ( ((int_64)*($2) != (int_64)$14) ){ goto $label$2 }
	if ( CALL $90($0, $16, $4) ){ goto $label$2 }
	CALL eosio_assert(CALL $48($0), [1984])
	CALL $91($0)
	$2 = [0]
	*($20 + [328]) = [0]
	*($20 + [320]) = (int_64)0
	*($20 + [312]) = [0]
	*($20 + [304]) = (int_64)0
	CALL $131(($20 + [248]), $4)
	$5 = CALL $92($0, ($20 + [248]), ($20 + [320]), ($20 + [304]), ($20 + [272]), ($20 + [264]))
	if ( ((*($20 + [248]) & [1]) == 0) ){ goto $label$3 }
	CALL $113(*($20 + [256]))
	
.LABEL $label$3
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)1397703940), [2016])
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$4 }
	$14 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$2 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [2048])
	CALL eosio_assert(((int_64)*($3) > (int_64)999), [2080])
	if ( ($5 == 0) ){ goto $label$9 }
	$2 = [0]
	$5 = *($20 + [308])
	$4 = *($20 + [304])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$10 }
	$2 = [0]
	
.LOOP $label$11:
	$2 = (*($4) + $2)
	$4 = ($4 + [4])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$10
	*($20 + [128]) = $2
	CALL $93($0, ($20 + [128]), $3)
	CALL eosio_assert(((int_64)*($20 + [264]) != (int_64)*($1)), [2128])
	$14 = CALL $94($0)
	*(($20 + [164])) = *(($3 + [12]))
	*(($20 + [160])) = *(($3 + [8]))
	*(($20 + [156])) = *(($3 + [4]))
	*($20 + [128]) = $14
	*($20 + [136]) = *($1)
	*($20 + [152]) = *($3)
	*($20 + [144]) = *($20 + [264])
	$5 = ($20 + [168])
	CALL $131($5, ($20 + [320]))
	*(($20 + [216])) = *((($20 + [272]) + [24]))
	*(($20 + [208])) = *((($20 + [272]) + [16]))
	*(($20 + [200])) = *($20 + [280])
	*($20 + [192]) = *($20 + [272])
	*($20 + [224]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$14 = *($0)
	*($20 + [72]) = ($20 + [128])
	CALL $95($20, ($0 + [8]), $14, ($20 + [72]))
	CALL $96($0, $3)
	$10 = ($20 + [224])
	$9 = ($20 + [192])
	$8 = (($20 + [128]) + [24])
	$7 = (($20 + [128]) + [16])
	$6 = (($20 + [128]) | [8])
	$18 = *($0)
	$14 = (int_64)0
	$13 = (int_64)59
	$4 = [624]
	$15 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$17 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$2 = ($2 + [165])
	goto $label$15 
	
.LABEL $label$17
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$13
	$4 = ($4 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$12 }
	$14 = (int_64)0
	$13 = (int_64)59
	$4 = [2160]
	$17 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$14 > (uint_64)(int_64)6) ){ goto $label$23 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$2 = ($2 + [165])
	goto $label$21 
	
.LABEL $label$23
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$19
	$4 = ($4 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$17 = ((int_64)$16 | (int_64)$17)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$18 }
	*(($2 = ($20 + [24]))) = [0]
	*($20 + [8]) = $17
	*($20) = $18
	*($20 + [16]) = (int_64)0
	*(($4 = CALL $112([16]))) = $18
	*($4 + [8]) = $15
	*(($20 + [32])) = [0]
	$12 = ($4 + [16])
	*($2) = $12
	*(($20 + [20])) = $12
	*($20 + [16]) = $4
	*($20 + [28]) = [0]
	*(($20 + [36])) = [0]
	$4 = *(($20 + [168]))
	$2 = ( *(($20 + [172])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($2 + [68])
	$14 = (CASTING uint_64)(uint_32 $2)
	$2 = ($20 + [28])
	
.LOOP $label$24:
	$4 = ($4 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$24 }
	if ( ($4 == 0) ){ goto $label$26 }
	CALL $35($2, $4)
	$2 = *(($20 + [32]))
	$4 = *(($20 + [28]))
	goto $label$25 
	
.LABEL $label$26
	$2 = [0]
	$4 = [0]
	
.LABEL $label$25
	*($20 + [116]) = $4
	*($20 + [112]) = $4
	*($20 + [120]) = $2
	*($20 + [336]) = ($20 + [112])
	*($20 + [76]) = $6
	*($20 + [80]) = $7
	*($20 + [84]) = $8
	*($20 + [88]) = $5
	*($20 + [92]) = $9
	*($20 + [96]) = $10
	*($20 + [72]) = ($20 + [128])
	CALL $97(($20 + [72]), ($20 + [336]))
	CALL $37(($20 + [72]), $20)
	$4 = *($20 + [72])
	CALL send_inline($4, (*($20 + [76]) - $4))
	$4 = *($20 + [72])
	if ( ($4 == 0) ){ goto $label$27 }
	*($20 + [76]) = $4
	CALL $113($4)
	
.LABEL $label$27
	$4 = *($20 + [28])
	if ( ($4 == 0) ){ goto $label$28 }
	*(($20 + [32])) = $4
	CALL $113($4)
	
.LABEL $label$28
	$4 = *($20 + [16])
	if ( ($4 == 0) ){ goto $label$29 }
	*(($20 + [20])) = $4
	CALL $113($4)
	
.LABEL $label$29
	$18 = *($0)
	$14 = (int_64)0
	$13 = (int_64)59
	$4 = [624]
	$15 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$35 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$2 = ($2 + [165])
	goto $label$33 
	
.LABEL $label$35
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$31
	$4 = ($4 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$30 }
	*($20 + [120]) = $15
	*($20 + [112]) = $18
	$14 = (int_64)0
	$16 = (int_64)59
	$4 = [640]
	$15 = (int_64)0
	
.LOOP $label$36:
	$13 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$37 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$2 = ($2 + [165])
	goto $label$38 
	
.LABEL $label$39
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$37
	$4 = ($4 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$36 }
	$14 = (int_64)0
	$13 = (int_64)59
	$4 = [2176]
	$17 = (int_64)0
	
.LOOP $label$40:
	if ( ((uint_64)$14 > (uint_64)(int_64)4) ){ goto $label$45 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$2 = ($2 + [165])
	goto $label$43 
	
.LABEL $label$45
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$44
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$42
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$41
	$4 = ($4 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$17 = ((int_64)$16 | (int_64)$17)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$40 }
	*($20 + [48]) = $18
	CALL $34(($20 + [56]), ($20 + [48]))
	$4 = CALL $121(($20 + [56]), [0], [2192])
	$2 = *($4)
	*($4) = [0]
	$5 = *($4 + [4])
	*($4 + [4]) = [0]
	$10 = *($4 + [8])
	*($4 + [8]) = [0]
	*($20 + [72]) = *($1)
	*((($20 + [72]) + [12])) = *(($3 + [4]))
	*(($20 + [92])) = *(($3 + [12]))
	*($20 + [80]) = *($3)
	*($20 + [96]) = $2
	*(($20 + [100])) = $5
	*(($20 + [104])) = $10
	$4 = CALL $98($20, ($20 + [112]), $15, $17, ($20 + [72]))
	CALL $37(($20 + [336]), $4)
	$2 = *($20 + [336])
	CALL send_inline($2, (*($20 + [340]) - $2))
	$2 = *($20 + [336])
	if ( ($2 == 0) ){ goto $label$46 }
	*($20 + [340]) = $2
	CALL $113($2)
	
.LABEL $label$46
	$2 = *($4 + [28])
	if ( ($2 == 0) ){ goto $label$47 }
	*(($4 + [32])) = $2
	CALL $113($2)
	
.LABEL $label$47
	$2 = *($4 + [16])
	if ( ($2 == 0) ){ goto $label$48 }
	*(($4 + [20])) = $2
	CALL $113($2)
	
.LABEL $label$48
	if ( ((*($20 + [96]) & [1]) == 0) ){ goto $label$49 }
	CALL $113(*(($20 + [104])))
	
.LABEL $label$49
	if ( ((*($20 + [56]) & [1]) == 0) ){ goto $label$50 }
	CALL $113(*($20 + [64]))
	
.LABEL $label$50
	$11 = *($0)
	$14 = (int_64)0
	$13 = (int_64)59
	$4 = [624]
	$15 = (int_64)0
	
.LOOP $label$51:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$56 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$55 }
	$2 = ($2 + [165])
	goto $label$54 
	
.LABEL $label$56
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$55
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$54
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$53
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$52
	$4 = ($4 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$51 }
	$14 = (int_64)0
	$13 = (int_64)59
	$4 = [288]
	$17 = (int_64)0
	
.LOOP $label$57:
	if ( ((uint_64)$14 > (uint_64)(int_64)10) ){ goto $label$62 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$61 }
	$2 = ($2 + [165])
	goto $label$60 
	
.LABEL $label$62
	$16 = (int_64)0
	if ( ((int_64)$14 == (int_64)11) ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$61
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$60
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$59
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$58
	$4 = ($4 + [1])
	$13 = ((int_64)$13 + (int_64)-5)
	$17 = ((int_64)$16 | (int_64)$17)
	$14 = ((int_64)$14 + (int_64)1)
	if ( ((int_64)$14 != (int_64)13) ){ goto $label$57 }
	$14 = (int_64)0
	$13 = (int_64)59
	$4 = [304]
	$18 = (int_64)0
	
.LOOP $label$63:
	if ( ((uint_64)$14 > (uint_64)(int_64)7) ){ goto $label$68 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$67 }
	$2 = ($2 + [165])
	goto $label$66 
	
.LABEL $label$68
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$67
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$66
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$65
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$64
	$4 = ($4 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$18 = ((int_64)$16 | (int_64)$18)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$63 }
	$14 = (int_64)0
	$16 = (int_64)59
	$4 = [768]
	$19 = (int_64)0
	
.LOOP $label$69:
	$13 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$70 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$72 }
	$2 = ($2 + [165])
	goto $label$71 
	
.LABEL $label$72
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$71
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$70
	$4 = ($4 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$19 = ((int_64)$13 | (int_64)$19)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$69 }
	*(($20 + [344])) = [0]
	*($20 + [336]) = (int_64)0
	$4 = CALL strlen([2224])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$75 }
	*($20 + [336]) = ($4 << [1])
	$2 = (($20 + [336]) | [1])
	if ( $4 ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$75
	$1 = (($4 + [16]) & [-16])
	$2 = CALL $112($1)
	*($20 + [336]) = ($1 | [1])
	*($20 + [344]) = $2
	*($20 + [340]) = $4
	
.LABEL $label$74
	CALL memcpy($2, [2224], $4)
	
.LABEL $label$73
	*(($2 + $4)) = [0]
	*(($20 + [28])) = *(($3 + [12]))
	*(($20 + [24])) = *(($3 + [8]))
	*(($20 + [20])) = *(($3 + [4]))
	*($20 + [8]) = $19
	*($20) = *($0)
	*($20 + [16]) = *($3)
	$4 = (($20 + [336]) + [8])
	*(($20 + [40])) = *($4)
	*($20 + [32]) = *($20 + [336])
	*($20 + [336]) = [0]
	*($20 + [340]) = [0]
	*($4) = [0]
	*($20 + [72]) = $17
	*($20 + [80]) = $18
	*($20 + [88]) = [0]
	*(($2 = (($20 + [72]) + [20]))) = [0]
	*(($3 = (($20 + [72]) + [24]))) = [0]
	*(($4 = CALL $112([16]))) = $11
	*($4 + [8]) = $15
	*((($20 + [72]) + [32])) = [0]
	$1 = ($4 + [16])
	*($3) = $1
	*($2) = $1
	*($20 + [88]) = $4
	*($20 + [100]) = [0]
	*((($20 + [72]) + [36])) = [0]
	$4 = *($20 + [32])
	$2 = ( *(($20 + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($2 + [32])
	$14 = (CASTING uint_64)(uint_32 $2)
	$2 = (($20 + [72]) + [28])
	
.LOOP $label$76:
	$4 = ($4 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$76 }
	if ( ($4 == 0) ){ goto $label$78 }
	CALL $35($2, $4)
	$2 = *(($20 + [104]))
	$4 = *(($20 + [100]))
	goto $label$77 
	
.LABEL $label$78
	$2 = [0]
	$4 = [0]
	
.LABEL $label$77
	*($20 + [116]) = $4
	*($20 + [112]) = $4
	*($20 + [120]) = $2
	*($20 + [48]) = ($20 + [112])
	*($20 + [56]) = $20
	CALL $36(($20 + [56]), ($20 + [48]))
	CALL $37(($20 + [112]), ($20 + [72]))
	$4 = *($20 + [112])
	CALL send_inline($4, (*($20 + [116]) - $4))
	$4 = *($20 + [112])
	if ( ($4 == 0) ){ goto $label$79 }
	*($20 + [116]) = $4
	CALL $113($4)
	
.LABEL $label$79
	$4 = *($20 + [100])
	if ( ($4 == 0) ){ goto $label$80 }
	*(($20 + [104])) = $4
	CALL $113($4)
	
.LABEL $label$80
	$4 = *($20 + [88])
	if ( ($4 == 0) ){ goto $label$81 }
	*(($20 + [92])) = $4
	CALL $113($4)
	
.LABEL $label$81
	if ( ((*(($20 + [32])) & [1]) == 0) ){ goto $label$82 }
	CALL $113(*(($20 + [40])))
	
.LABEL $label$82
	if ( ((*($20 + [336]) & [1]) == 0) ){ goto $label$83 }
	CALL $113(*(($20 + [344])))
	
.LABEL $label$83
	$17 = *($0)
	$14 = (int_64)0
	$13 = (int_64)59
	$4 = [624]
	$15 = (int_64)0
	
.LOOP $label$84:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$89 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$88 }
	$2 = ($2 + [165])
	goto $label$87 
	
.LABEL $label$89
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$86 }
	goto $label$85 
	
.LABEL $label$88
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$87
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$86
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$85
	$4 = ($4 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$84 }
	*($20 + [8]) = $15
	*($20) = $17
	$14 = (int_64)0
	$13 = (int_64)59
	$4 = [2272]
	$15 = (int_64)0
	
.LOOP $label$90:
	if ( ((uint_64)$14 > (uint_64)(int_64)4) ){ goto $label$95 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$94 }
	$2 = ($2 + [165])
	goto $label$93 
	
.LABEL $label$95
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$92 }
	goto $label$91 
	
.LABEL $label$94
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$93
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$92
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$91
	$4 = ($4 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$90 }
	*($20 + [72]) = $15
	CALL $86($0, $20, $0, ($20 + [72]), ($20 + [128]))
	if ( ((*(($20 + [168])) & [1]) == 0) ){ goto $label$9 }
	CALL $113(*(($20 + [176])))
	
.LABEL $label$9
	$4 = *($20 + [304])
	if ( ($4 == 0) ){ goto $label$96 }
	*($20 + [308]) = $4
	CALL $113($4)
	
.LABEL $label$96
	if ( ((*($20 + [320]) & [1]) == 0) ){ goto $label$2 }
	CALL $113(*(($20 + [328])))
	
.LABEL $label$2
	*([0] + [4]) = ($20 + [352])
	return (unreachable)
	
.LABEL $label$1
	CALL $114(($20 + [336]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [240])
	*([0] + [4]) = $9
	*(($9 + [128])) = $0
	*(($9 + [136])) = (int_64)-1
	$6 = (int_64)0
	*(($9 + [144])) = (int_64)0
	*(($9 + [152])) = [0]
	*($9 + [120]) = $0
	*($9 + [112]) = $0
	*($9 + [160]) = $0
	*(($9 + [168])) = $0
	*(($9 + [176])) = (int_64)-1
	*(($9 + [184])) = [0]
	*(($9 + [188])) = [0]
	*(($9 + [192])) = [0]
	*($9 + [200]) = $0
	*(($9 + [208])) = $0
	*(($9 + [216])) = (int_64)-1
	*(($9 + [224])) = [0]
	*(($9 + [228])) = [0]
	*(($9 + [232])) = [0]
	$5 = (int_64)59
	$4 = [288]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [304]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	*($9 + [108]) = [0]
	*($9 + [104]) = [1]
	*($9 + [48 align=4]) = *($9 + [104])
	CALL $22(($9 + [112]), ($9 + [48]))
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$14 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [304]
	$7 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$20 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$3 = ($3 + [165])
	goto $label$18 
	
.LABEL $label$20
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$16
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$15 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$14 }
	if ( ((int_64)$2 > (int_64)-4992623624440512513) ){ goto $label$26 }
	if ( ((int_64)$2 == (int_64)-6712871099018772480) ){ goto $label$25 }
	if ( ((int_64)$2 == (int_64)-6565428398988984320) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)-5003315193367756800) ){ goto $label$21 }
	*($9 + [100]) = [0]
	*($9 + [96]) = [2]
	*($9) = *($9 + [96])
	CALL $24(($9 + [112]), $9)
	goto $label$14 
	
.LABEL $label$26
	if ( ((int_64)$2 == (int_64)-4992623624440512512) ){ goto $label$23 }
	if ( ((int_64)$2 == (int_64)-4157529991795441664) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)5455799413643411456) ){ goto $label$21 }
	*($9 + [60]) = [0]
	*($9 + [56]) = [3]
	*($9 + [40 align=4]) = *($9 + [56])
	CALL $29(($9 + [112]), ($9 + [40]))
	goto $label$14 
	
.LABEL $label$25
	*($9 + [68]) = [0]
	*($9 + [64]) = [4]
	*($9 + [32 align=4]) = *($9 + [64])
	CALL $29(($9 + [112]), ($9 + [32]))
	goto $label$14 
	
.LABEL $label$24
	*($9 + [76]) = [0]
	*($9 + [72]) = [5]
	*($9 + [24 align=4]) = *($9 + [72])
	CALL $29(($9 + [112]), ($9 + [24]))
	goto $label$14 
	
.LABEL $label$23
	*($9 + [84]) = [0]
	*($9 + [80]) = [6]
	*($9 + [16 align=4]) = *($9 + [80])
	CALL $26(($9 + [112]), ($9 + [16]))
	goto $label$14 
	
.LABEL $label$22
	*($9 + [92]) = [0]
	*($9 + [88]) = [7]
	*($9 + [8 align=4]) = *($9 + [88])
	CALL $26(($9 + [112]), ($9 + [8]))
	goto $label$14 
	
.LABEL $label$21
	CALL eosio_assert([0], [320])
	
.LABEL $label$14
	CALL $32(($9 + [112]))
	*([0] + [4]) = ($9 + [240])
}

void .FUNC _ZN4game8roulette7receiptERKNS_6st_betE (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [112])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [24])) = (int_64)1397703940
	*($9 + [8]) = (int_64)0
	*($9) = (int_64)0
	*($9 + [16]) = (int_64)0
	CALL eosio_assert([1], [416])
	$6 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$4
	CALL eosio_assert($7, [480])
	*(($9 + [40])) = [0]
	*($9 + [32]) = (int_64)0
	*($9 + [84]) = $5
	*($9 + [80]) = $5
	*($9 + [88]) = ($5 + $3)
	*($9 + [48]) = ($9 + [80])
	*($9 + [64]) = $9
	CALL $89(($9 + [64]), ($9 + [48]))
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($5)
	
.LABEL $label$9
	$6 = *(($9 + [8]))
	*(($9 + [76])) = *(($9 + [28]))
	*(($1 = (($9 + [64]) + [8]))) = *(($9 + [24]))
	*($9 + [68]) = *(($9 + [20]))
	$4 = *($9)
	*($9 + [64]) = *($9 + [16])
	CALL $131(($9 + [48]), ($9 + [32]))
	*((($9 + [80]) + [8])) = *($1)
	*($9 + [80]) = *($9 + [64])
	*($9 + [104]) = $4
	*($9 + [96]) = $6
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$10 }
	$8 = *((*($1) + $8))
	
.LABEL $label$10
	CALL void $1((int_32 ($9 + [104])), (int_32 ($9 + [96])), (int_32 ($9 + [80])), (int_32 ($9 + [48])), (int_32 $8))
	if ( ((*($9 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL $113(*($9 + [56]))
	
.LABEL $label$11
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL $113(*(($9 + [40])))
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [112])
	return [1]
}

void .FUNC _ZN4game8roulette5startERKy (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	CALL require_auth(*($0))
	$2 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [624]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	*($9 + [24]) = $7
	*($9 + [16]) = $2
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1968]
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$12 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$3 = ($3 + [165])
	goto $label$10 
	
.LABEL $label$12
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$7 }
	*($9 + [8]) = $7
	CALL $86($0, ($9 + [16]), $0, ($9 + [8]), $1)
	*([0] + [4]) = ($9 + [32])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = (*([0] + [4]) - [224])
	$5 = $3
	*([0] + [4]) = $3
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	CALL $88($5, $3, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	CALL memcpy(($5 + [112]), $5, [40])
	CALL $131((($5 + [112]) + [40]), ($5 + [40]))
	CALL memcpy((($5 + [112]) + [64]), ($5 + [64]), [40])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$4 = *((*($1) + $4))
	
.LABEL $label$6
	CALL void $1((int_32 ($5 + [112])), (int_32 $4))
	if ( ((*((($5 + [112]) + [40])) & [1]) == 0) ){ goto $label$7 }
	CALL $113(*(($5 + [160])))
	
.LABEL $label$7
	if ( ((*(($5 + [40])) & [1]) == 0) ){ goto $label$8 }
	CALL $113(*(($5 + [48])))
	
.LABEL $label$8
	*([0] + [4]) = ($5 + [224])
	return [1]
}

void .FUNC _ZN4game8roulette6revealERKy (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	$20 = (*([0] + [4]) - [416])
	*([0] + [4]) = $20
	CALL require_auth(*($0))
	CALL $62(($20 + [240]), $0, $1)
	$3 = (($20 + [240]) + [24])
	$2 = ($20 + [280])
	CALL $63(($20 + [48]), $0, $2, (($20 + [240]) | [8]), $3)
	CALL $64(($20 + [208]), $0, ($20 + [48]))
	$4 = ($20 + [304])
	CALL $65(($20 + [176]), $0, $4)
	$5 = CALL $66($0, ($20 + [208]), ($20 + [176]))
	CALL eosio_assert([1], [416])
	$15 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$12 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$12 = [0]
	
.LABEL $label$1
	CALL eosio_assert($12, [480])
	CALL _Z9parse_numRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(($20 + [160]), $2)
	$6 = *($20 + [160])
	if ( (*((($6 + ($5 << [2])) + [-4])) == 0) ){ goto $label$7 }
	$12 = [0]
	$7 = *($20 + [164])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$8 }
	$12 = [0]
	$1 = $6
	
.LOOP $label$9:
	$12 = (*($1) + $12)
	$1 = ($1 + [4])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$9 }
	
.LABEL $label$8
	*($20 + [8]) = $12
	CALL $67(($20 + [48]), $0, ($20 + [8]), $3)
	$19 = *($20 + [56])
	$13 = *($20 + [48])
	$18 = *($0)
	$15 = (int_64)0
	$14 = (int_64)59
	$1 = [624]
	$16 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$15 }
	$12 = *($1)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$12 = ($12 + [165])
	goto $label$13 
	
.LABEL $label$15
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$11
	$1 = ($1 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$10 }
	*($20 + [16]) = $16
	*($20 + [8]) = $18
	$15 = (int_64)0
	$17 = (int_64)59
	$1 = [768]
	$16 = (int_64)0
	
.LOOP $label$16:
	$14 = (int_64)0
	if ( ((uint_64)$15 > (uint_64)(int_64)11) ){ goto $label$17 }
	$12 = *($1)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$12 = ($12 + [165])
	goto $label$18 
	
.LABEL $label$19
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($12 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$17
	$1 = ($1 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$14 | (int_64)$16)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$16 }
	*($20 + [360]) = $16
	$15 = (int_64)0
	$14 = (int_64)59
	$1 = [1488]
	$16 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$25 }
	$12 = *($1)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$12 = ($12 + [165])
	goto $label$23 
	
.LABEL $label$25
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$21
	$1 = ($1 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$20 }
	*($20 + [400]) = $16
	*(($20 + [64])) = $19
	*($20 + [56]) = $13
	*($20 + [48]) = *($20 + [248])
	CALL $68($0, ($20 + [8]), ($20 + [360]), ($20 + [400]), ($20 + [48]))
	goto $label$6 
	
.LABEL $label$7
	$19 = (int_64)1397703940
	$13 = (int_64)0
	
.LABEL $label$6
	CALL $69($0, $3)
	if ( ((int_64)*($20 + [256]) == (int_64)*($0)) ){ goto $label$26 }
	$8 = *(($20 + [272]))
	$15 = *($20 + [264])
	CALL eosio_assert([1], [1504])
	CALL eosio_assert([1], [1520])
	$9 = ((int_64)$15 / (int_64)200)
	$18 = *($0)
	$15 = (int_64)0
	$14 = (int_64)59
	$1 = [624]
	$16 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$32 }
	$12 = *($1)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$12 = ($12 + [165])
	goto $label$30 
	
.LABEL $label$32
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$28
	$1 = ($1 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$27 }
	*($20 + [368]) = $16
	*($20 + [360]) = $18
	$15 = (int_64)0
	$17 = (int_64)59
	$1 = [768]
	$16 = (int_64)0
	
.LOOP $label$33:
	$14 = (int_64)0
	if ( ((uint_64)$15 > (uint_64)(int_64)11) ){ goto $label$34 }
	$12 = *($1)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$12 = ($12 + [165])
	goto $label$35 
	
.LABEL $label$36
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($12 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$34
	$1 = ($1 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$14 | (int_64)$16)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$33 }
	$15 = (int_64)0
	$14 = (int_64)59
	$1 = [1552]
	$18 = (int_64)0
	
.LOOP $label$37:
	if ( ((uint_64)$15 > (uint_64)(int_64)2) ){ goto $label$42 }
	$12 = *($1)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$12 = ($12 + [165])
	goto $label$40 
	
.LABEL $label$42
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$41
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$39
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$38
	$1 = ($1 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$18 = ((int_64)$17 | (int_64)$18)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$37 }
	*((($20 + [8]) + [16])) = $8
	*($20 + [16]) = $9
	*($20 + [8]) = *((($20 + [240]) + [16]))
	$1 = CALL $70(($20 + [48]), ($20 + [360]), $16, $18, ($20 + [8]))
	CALL $37(($20 + [400]), $1)
	$12 = *($20 + [400])
	CALL send_inline($12, (*($20 + [404]) - $12))
	$12 = *($20 + [400])
	if ( ($12 == 0) ){ goto $label$43 }
	*($20 + [404]) = $12
	CALL $113($12)
	
.LABEL $label$43
	$12 = *($1 + [28])
	if ( ($12 == 0) ){ goto $label$44 }
	*(($1 + [32])) = $12
	CALL $113($12)
	
.LABEL $label$44
	$12 = *($1 + [16])
	if ( ($12 == 0) ){ goto $label$26 }
	*(($1 + [20])) = $12
	CALL $113($12)
	
.LABEL $label$26
	*($20 + [48]) = *($20 + [240])
	CALL $71($0, ($20 + [48]))
	*($20 + [64]) = *($20 + [248])
	*($20 + [48]) = *($20 + [240])
	*($20 + [56]) = *($0)
	*($20 + [72]) = *((($20 + [240]) + [16]))
	*(($20 + [88])) = *(($3 + [8]))
	*($20 + [80]) = *($3)
	$7 = ($20 + [96])
	CALL $131($7, $2)
	*(($20 + [140])) = *(($4 + [28]))
	*(($20 + [136])) = *(($4 + [24]))
	*(($20 + [132])) = *(($4 + [20]))
	*(($20 + [128])) = *(($4 + [16]))
	*(($20 + [124])) = *(($4 + [12]))
	*(($20 + [120])) = *(($4 + [8]))
	*(($20 + [116])) = *(($4 + [4]))
	*($20 + [108]) = $5
	*($20 + [112]) = *($4)
	*($20 + [144]) = $13
	*(($20 + [152])) = $19
	$4 = ($20 + [112])
	$3 = ($20 + [108])
	$2 = ($20 + [80])
	$5 = (($20 + [48]) + [24])
	$11 = (($20 + [48]) + [16])
	$10 = (($20 + [48]) | [8])
	$13 = *($0)
	$15 = (int_64)0
	$14 = (int_64)59
	$1 = [624]
	$16 = (int_64)0
	
.LOOP $label$45:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$50 }
	$12 = *($1)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$49 }
	$12 = ($12 + [165])
	goto $label$48 
	
.LABEL $label$50
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$49
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$48
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$47
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$46
	$1 = ($1 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$45 }
	$15 = (int_64)0
	$17 = (int_64)59
	$1 = [1568]
	$18 = (int_64)0
	
.LOOP $label$51:
	$14 = (int_64)0
	if ( ((uint_64)$15 > (uint_64)(int_64)11) ){ goto $label$52 }
	$12 = *($1)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$12 = ($12 + [165])
	goto $label$53 
	
.LABEL $label$54
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($12 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$52
	$1 = ($1 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$18 = ((int_64)$14 | (int_64)$18)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$51 }
	$15 = (int_64)0
	$14 = (int_64)59
	$1 = [1584]
	$19 = (int_64)0
	
.LOOP $label$55:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$60 }
	$12 = *($1)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$59 }
	$12 = ($12 + [165])
	goto $label$58 
	
.LABEL $label$60
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$59
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$58
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$57
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$56
	$1 = ($1 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$19 = ((int_64)$17 | (int_64)$19)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$55 }
	*($20 + [16]) = $19
	*($20 + [8]) = $18
	*(($1 = CALL $112([16]))) = $13
	*($1 + [8]) = $16
	*(($20 + [40])) = [0]
	$12 = ($1 + [16])
	*(($20 + [32])) = $12
	*(($20 + [28])) = $12
	*($20 + [24]) = $1
	*($20 + [36]) = [0]
	*(($20 + [44])) = [0]
	$1 = *(($20 + [96]))
	$12 = ( *(($20 + [100])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($12 + [85])
	$15 = (CASTING uint_64)(uint_32 $12)
	$12 = ($20 + [36])
	
.LOOP $label$61:
	$1 = ($1 + [1])
	$15 = (uint_64)$15 >> (uint_64)(int_64)7
	if ( ((int_64)$15) != (int_64)0) ){ goto $label$61 }
	if ( ($1 == 0) ){ goto $label$63 }
	CALL $35($12, $1)
	$12 = *(($20 + [40]))
	$1 = *(($20 + [36]))
	goto $label$62 
	
.LABEL $label$63
	$12 = [0]
	$1 = [0]
	
.LABEL $label$62
	*($20 + [404]) = $1
	*($20 + [400]) = $1
	*($20 + [408]) = $12
	*($20 + [352]) = ($20 + [400])
	*($20 + [364]) = $10
	*($20 + [368]) = $11
	*($20 + [372]) = $5
	*($20 + [376]) = $2
	*($20 + [380]) = $7
	*($20 + [384]) = $3
	*($20 + [360]) = ($20 + [48])
	*($20 + [388]) = $4
	*($20 + [392]) = ($20 + [144])
	CALL $72(($20 + [360]), ($20 + [352]))
	CALL $37(($20 + [360]), ($20 + [8]))
	$1 = *($20 + [360])
	CALL send_inline($1, (*($20 + [364]) - $1))
	$1 = *($20 + [360])
	if ( ($1 == 0) ){ goto $label$64 }
	*($20 + [364]) = $1
	CALL $113($1)
	
.LABEL $label$64
	$1 = *($20 + [36])
	if ( ($1 == 0) ){ goto $label$65 }
	*(($20 + [40])) = $1
	CALL $113($1)
	
.LABEL $label$65
	$1 = *($20 + [24])
	if ( ($1 == 0) ){ goto $label$66 }
	*(($20 + [28])) = $1
	CALL $113($1)
	
.LABEL $label$66
	if ( ((*(($20 + [96])) & [1]) == 0) ){ goto $label$67 }
	CALL $113(*(($20 + [104])))
	
.LABEL $label$67
	if ( ($6 == 0) ){ goto $label$68 }
	*($20 + [164]) = $6
	CALL $113($6)
	
.LABEL $label$68
	if ( ((*(($20 + [280])) & [1]) == 0) ){ goto $label$69 }
	CALL $113(*(($20 + [288])))
	
.LABEL $label$69
	*([0] + [4]) = ($20 + [416])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1008])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*($6 + [8]) = $3
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($6 + [8])), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $110($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [11056])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC strtol (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return (CASTING uint_32)(uint_64 $3)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*($5 + [24]) = (int_64)1397703940
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [416])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [480])
	$3 = ($0 + [48])
	CALL $42($5, $3, *($0), ($5 + [16]))
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*($5 + [8])), [512])
	$2 = (int_64)
	*($5) = $2(*($5) - *($1)))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [560])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [592])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($5) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [1856])
	CALL $74($3, $5, *($0))
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $77(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $78($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $79(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $113($0)
	
.LABEL $label$1
	CALL $80(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $109([2648], $0)
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = [0]
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	
.LOOP $label$1:
	$3 = *(($2 + $4))
	CALL $119($5, *((uint_32($3 >> [4]) + [48])))
	CALL $119($5, *((($3 & [15]) + [48])))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[20]) ){ goto $label$1 }
	$3 = (*($5) & [1])
	$2 = *(($5 + [8]))
	$4 = ( $2 ? ($5 | [1]) : $3 )
	if ( ($3 == 0) ){ goto $label$2 }
	CALL $113($2)
	
.LABEL $label$2
	CALL sha1($4, CALL $143($4), $0)
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = [0]
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	
.LOOP $label$1:
	$3 = *(($2 + $4))
	CALL $119($5, *((uint_32($3 >> [4]) + [48])))
	CALL $119($5, *((($3 & [15]) + [48])))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$1 }
	$3 = (*($5) & [1])
	$2 = *(($5 + [8]))
	$4 = ( $2 ? ($5 | [1]) : $3 )
	if ( ($3 == 0) ){ goto $label$2 }
	CALL $113($2)
	
.LABEL $label$2
	CALL sha256($4, CALL $143($4), $0)
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	$5 = *($3 + [8])
	*($7 + [24]) = $5
	$4 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($3)) * (float_64)((float_64)((float_64)(float_64)36 / (float_64)(CASTING float_64)(uint_32 *($2))) * (float_64)(float_64)0.98)))
	*($7 + [16]) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [416])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$2 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [480])
	CALL $33(($7 + [32]), $1)
	*(($3 = ($7 + [8]))) = *((($7 + [32]) + [8]))
	*($7) = *($7 + [32])
	CALL eosio_assert([1], [1504])
	$6 = *($7)
	CALL eosio_assert([1], [1520])
	$6 = ((int_64)$6 / (int_64)50)
	*($7) = $6
	CALL eosio_assert(((int_64)*($3) == (int_64)$5), [1888])
	$3 = ( $7 ? ($7 + [16]) : ((int_64)$6 < (int_64)$4) )
	*(($0 + [8])) = *(($3 + [8]))
	*($0) = *($3)
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = [0]
	*($8 + [8]) = [0]
	*($8) = (int_64)0
	
.LOOP $label$1:
	$4 = *(($1 + $6))
	CALL $119($8, *((uint_32($4 >> [4]) + [48])))
	CALL $119($8, *((($4 & [15]) + [48])))
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)[32]) ){ goto $label$1 }
	$6 = *($8)
	$4 = ($6 & [1])
	$7 = ( *(($8 + [8])) ? ($8 | [1]) : $4 )
	$3 = ( *($8 + [4]) ? uint_32($6 >> [1]) : $4 )
	if ( ($3 <= [4]) ){ goto $label$5 }
	$1 = $3
	$6 = $7
	$4 = $3
	
.LOOP $label$6:
	CALL memcpy(($8 + [12]), $6, [4])
	$5 = ((int_32)*($8 + [12]) * (int_32)[1540483477])
	$4 = ((int_32)((int_32)((int_32)uint_32($5 >> [24]) ^ (int_32)$5) * (int_32)[1540483477]) ^ (int_32)((int_32)$4 * (int_32)[1540483477]))
	$6 = ($6 + [4])
	$1 = ($1 + [-4])
	if ( ((uint_32)$1 > (uint_32)[3]) ){ goto $label$6 }
	$6 = ($3 + [-4])
	$1 = ($6 & [-4])
	$7 = (($7 + $1) + [4])
	$3 = ($6 - $1)
	if ( ((int_32)$3 != (int_32)[1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = $3
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$7 }
	if ( ((int_32)$3 != (int_32)[3]) ){ goto $label$2 }
	$4 = ((int_32)(*($7 + [2]) << [16]) ^ (int_32)$4)
	
.LABEL $label$7
	$4 = ((int_32)(*($7 + [1]) << [8]) ^ (int_32)$4)
	
.LABEL $label$3
	$4 = ((int_32)((int_32)*($7) ^ (int_32)$4) * (int_32)[1540483477])
	
.LABEL $label$2
	$6 = ((int_32)((int_32)uint_32($4 >> [13]) ^ (int_32)$4) * (int_32)[1540483477])
	$6 = ((int_32)uint_32($6 >> [15]) ^ (int_32)$6)
	if ( ((*($8) & [1]) == 0) ){ goto $label$8 }
	CALL $113(*(($8 + [8])))
	
.LABEL $label$8
	$3 = ($6 + [-1640531527])
	$6 = [0]
	*($8 + [8]) = [0]
	*($8) = (int_64)0
	
.LOOP $label$9:
	$4 = *(($2 + $6))
	CALL $119($8, *((uint_32($4 >> [4]) + [48])))
	CALL $119($8, *((($4 & [15]) + [48])))
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)[20]) ){ goto $label$9 }
	$6 = *($8)
	$4 = ($6 & [1])
	$7 = ( *(($8 + [8])) ? ($8 | [1]) : $4 )
	$5 = ( *($8 + [4]) ? uint_32($6 >> [1]) : $4 )
	if ( ($5 <= [4]) ){ goto $label$13 }
	$1 = $5
	$6 = $7
	$4 = $5
	
.LOOP $label$14:
	CALL memcpy(($8 + [12]), $6, [4])
	$2 = ((int_32)*($8 + [12]) * (int_32)[1540483477])
	$4 = ((int_32)((int_32)((int_32)uint_32($2 >> [24]) ^ (int_32)$2) * (int_32)[1540483477]) ^ (int_32)((int_32)$4 * (int_32)[1540483477]))
	$6 = ($6 + [4])
	$1 = ($1 + [-4])
	if ( ((uint_32)$1 > (uint_32)[3]) ){ goto $label$14 }
	$6 = ($5 + [-4])
	$1 = ($6 & [-4])
	$7 = (($7 + $1) + [4])
	$5 = ($6 - $1)
	if ( ((int_32)$5 != (int_32)[1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$4 = $5
	if ( ((int_32)$5 == (int_32)[1]) ){ goto $label$11 }
	
.LABEL $label$12
	if ( ((int_32)$5 == (int_32)[2]) ){ goto $label$15 }
	if ( ((int_32)$5 != (int_32)[3]) ){ goto $label$10 }
	$4 = ((int_32)(*($7 + [2]) << [16]) ^ (int_32)$4)
	
.LABEL $label$15
	$4 = ((int_32)(*($7 + [1]) << [8]) ^ (int_32)$4)
	
.LABEL $label$11
	$4 = ((int_32)((int_32)*($7) ^ (int_32)$4) * (int_32)[1540483477])
	
.LABEL $label$10
	$6 = ((int_32)((int_32)uint_32($4 >> [13]) ^ (int_32)$4) * (int_32)[1540483477])
	$6 = ((int_32)(((($3 << [6]) + uint_32($3 >> [2])) + ((int_32)uint_32($6 >> [15]) ^ (int_32)$6)) + [-1640531527]) ^ (int_32)$3)
	if ( ((*($8) & [1]) == 0) ){ goto $label$16 }
	CALL $113(*(($8 + [8])))
	
.LABEL $label$16
	*([0] + [4]) = ($8 + [16])
	return (((uint_32)$6 % (uint_32)[36]) + [1])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1456])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $35($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [1008])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $61($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $117($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $112($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $117($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $113($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $114($7)
	return (unreachable)
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	CALL $131(($10 + [16]), $2)
	*($10) = (int_64)0
	*($10 + [8]) = [0]
	$5 = ($10 | [1])
	$9 = *($4)
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 ((uint_64)$9 % (uint_64)(int_64)10))
	CALL $6(($10 + [32]), ( ($4 | [48]) ? ($4 + [55]) : ($4 <= [10]) ), $10)
	$6 = ((uint_64)$9 / (uint_64)(int_64)10)
	if ( (*($10) & [1]) ){ goto $label$3 }
	*($10) = [0]
	goto $label$2 
	
.LABEL $label$3
	*(*(($10 + [8]))) = [0]
	*($10 + [4]) = [0]
	
.LABEL $label$2
	CALL $117($10, [0])
	*(($10 + [8])) = *((($10 + [32]) + [8]))
	*($10) = *($10 + [32])
	$4 = ((uint_64)$9 > (uint_64)(int_64)9)
	$9 = $6
	if ( $4 ){ goto $label$1 }
	$4 = *($10)
	$7 = ($4 & [1])
	$2 = ($10 + [8])
	CALL $118(($10 + [16]), ( *($2) ? $5 : $7 ), ( *($10 + [4]) ? uint_32($4 >> [1]) : $7 ))
	if ( ((*($10) & [1]) == 0) ){ goto $label$4 }
	CALL $113(*($2))
	
.LABEL $label$4
	$4 = CALL tapos_block_prefix()
	$5 = CALL tapos_block_num()
	$9 = *($3)
	$6 = CALL $85($1)
	$8 = CALL current_time()
	*($10 + [8]) = [0]
	*($10) = (int_64)0
	$9 = (int_64))(((int_64)$6 + (int_64)((int_64)$9 + (int_64)(CASTING int_64)(int_32 ((int_32)$5 * (int_32)$4)))) - $8)
	$1 = ($10 | [1])
	
.LOOP $label$5:
	$4 = (CASTING uint_32)(uint_64 ((uint_64)$9 % (uint_64)(int_64)10))
	CALL $6(($10 + [32]), ( ($4 | [48]) ? ($4 + [55]) : ($4 <= [10]) ), $10)
	$6 = ((uint_64)$9 / (uint_64)(int_64)10)
	if ( (*($10) & [1]) ){ goto $label$7 }
	*($10) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*($2)) = [0]
	*($10 + [4]) = [0]
	
.LABEL $label$6
	CALL $117($10, [0])
	*($2) = *((($10 + [32]) + [8]))
	*($10) = *($10 + [32])
	$4 = ((uint_64)$9 > (uint_64)(int_64)9)
	$9 = $6
	if ( $4 ){ goto $label$5 }
	$4 = *($10)
	$2 = ($4 & [1])
	$3 = ($10 + [8])
	CALL $118(($10 + [16]), ( *($3) ? $1 : $2 ), ( *($10 + [4]) ? uint_32($4 >> [1]) : $2 ))
	if ( ((*($10) & [1]) == 0) ){ goto $label$8 }
	CALL $113(*($3))
	
.LABEL $label$8
	$4 = ( *($10 + [24]) ? (($10 + [16]) | [1]) : (*($10 + [16]) & [1]) )
	CALL sha256($4, CALL $143($4), $0)
	if ( ((*($10 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL $113(*(($10 + [24])))
	
.LABEL $label$9
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($2)
	$4 = *(($1 + [32]))
	$7 = *(($1 + [36]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	$2 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($2)) == (int_64)$3) ){ goto $label$1 }
	$7 = $2
	$6 = ($2 + [-24])
	$2 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($1 + [8])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$2 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [104]) == (int_32)$6), [848])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$7 = CALL db_find_i64(*(($1 + [8])), *(($1 + [16])), (int_64)4229865212519383040, $3)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $55($6, $7)
	CALL eosio_assert(((int_32)*($2 + [104]) == (int_32)$6), [848])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [1952])
	$6 = CALL memcpy($0, $2, [40])
	CALL $131(($6 + [40]), ($2 + [40]))
	CALL memcpy(($6 + [64]), ($2 + [64]), [40])
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1456])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$6 = *($1)
	$2 = *($1 + [4])
	$7 = ((int_32)($2 - $6) / (int_32)[40])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $105($1, ($4 - $7))
	$2 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[40])
	$3 = ($6 + $4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$4 }
	$6 = (([0] - $6) - $4)
	$4 = ($2 + [-24])
	
.LOOP $label$5:
	$7 = *(($4 + [12]))
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [16])) = $7
	CALL $113($7)
	
.LABEL $label$6
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$7 }
	*(($4 + [4])) = $7
	CALL $113($7)
	
.LABEL $label$7
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$2
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	$4 = ($0 + [4])
	
.LOOP $label$9:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($4)) > (uint_32)[7]), [1008])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [1008])
	CALL memcpy(($7 + [8]), *($4), [8])
	*($4) = (*($4) + [8])
	CALL $61(CALL $106($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	return $0
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1008])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1008])
	CALL memcpy(($1 + [4]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1008])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$6 = [0]
	$5 = (int_64)0
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *(($0 + [8]))), [1456])
	$7 = ($0 + [4])
	$4 = *($7)
	$2 = *($4)
	$4 = ($4 + [1])
	*($7) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($2 >> [7]) ){ goto $label$1 }
	*($1 + [12]) = $5
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)*($3) != (int_32)$4), [1008])
	$4 = ($0 + [4])
	CALL memcpy(($1 + [16]), *($4), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	$7 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	CALL eosio_assert(($6 <= *($3)), [1456])
	$6 = *($4)
	$2 = *($6)
	$6 = ($6 + [1])
	*($4) = $6
	$7 = ($7 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $7)) | (int_64)$5)
	$7 = ($7 + [7])
	if ( uint_32($2 >> [7]) ){ goto $label$2 }
	*($1 + [20]) = $5
	return $0
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	*($0 + [16 align=4]) = (int_64)0
	*(($0 + [24])) = [0]
	$4 = (*(($1 + [20])) - *($1 + [16]))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$2 }
	$4 = CALL $112($4)
	*(($0 + [16])) = $4
	*(($0 + [24])) = ($4 + ($5 << [4]))
	*(($5 = ($0 + [20]))) = $4
	$2 = *(($1 + [16]))
	$3 = (*(($1 + [20])) - $2)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($4, $2, $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$4 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL $112($4)
	*(($0 + [28])) = $5
	*(($0 + [36])) = ($5 + $4)
	*(($4 = ($0 + [32]))) = $5
	$3 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($5, $3, $1)
	*($4) = (*($4) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $130(($0 + [16]))
	
.LABEL $label$1
	CALL $130(($0 + [28]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1456])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$7 = *($1 + [4])
	$5 = int_32(($7 - $3) >> [4])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$3 }
	CALL $104($1, ($4 - $5))
	$7 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$5) ){ goto $label$2 }
	$4 = ($4 << [4])
	$2 = ($3 + $4)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$3 = (([0] - $3) - $4)
	$4 = ($7 + [-12])
	
.LOOP $label$5:
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$6 }
	*(($4 + [4])) = $5
	CALL $113($5)
	
.LABEL $label$6
	$4 = ($4 + [-16])
	if ( ((int_32)($4 + $3) != (int_32)[-12]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$7 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$7 }
	$3 = ($0 + [8])
	
.LOOP $label$8:
	$5 = ($0 + [4])
	CALL eosio_assert(((uint_32)(*($3) - *($5)) > (uint_32)[1]), [1008])
	CALL memcpy($4, *($5), [2])
	*($5) = (*($5) + [2])
	CALL $61($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)((int_32)($8 - $7) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($7 - $4) / (int_32)[40])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$3 }
	$7 = [107374182]
	$8 = ((int_32)($8 - $4) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$6 }
	$7 = ($8 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$8 = CALL $112(((int_32)$7 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*($7) = (int_64)0
	*($7 + [16 align=4]) = (int_64)0
	*(($7 + [8])) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*(($7 + [32])) = (int_64)0
	$7 = (*($8) + [40])
	*($8) = $7
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$8 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $130($0)
	
.LABEL $label$2
	$2 = ($8 + ((int_32)$7 * (int_32)[40]))
	$8 = ($8 + ((int_32)$5 * (int_32)[40]))
	$7 = $8
	
.LOOP $label$8:
	*($7) = (int_64)0
	*($7 + [16 align=4]) = (int_64)0
	*(($7 + [8])) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*(($7 + [32])) = (int_64)0
	$7 = ($7 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$10 }
	$3 = ([0] - $4)
	$1 = ($1 + [-20])
	
.LOOP $label$11:
	*(($8 + [-32])) = *(($1 + [-12]))
	*(($8 + [-40])) = *(($1 + [-20]))
	*(($4 = ($8 + [-24]))) = (int_64)0
	*(($5 = ($8 + [-16]))) = [0]
	$6 = ($1 + [-4])
	*($4) = *($6)
	*(($8 + [-20])) = *($1)
	$4 = ($1 + [4])
	*($5) = *($4)
	*($4) = [0]
	*(($4 = ($8 + [-12]))) = (int_64)0
	*($6) = (int_64)0
	*(($5 = ($8 + [-4]))) = [0]
	$6 = ($1 + [8])
	*($4) = *($6)
	*(($8 + [-8])) = *(($1 + [12]))
	$4 = ($1 + [16])
	*($5) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$8 = ($8 + [-40])
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $3) != (int_32)[-20]) ){ goto $label$11 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$5 = $4
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $7
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$12 }
	$1 = ([0] - $5)
	$7 = ($4 + [-24])
	
.LOOP $label$13:
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$14 }
	*(($7 + [16])) = $8
	CALL $113($8)
	
.LABEL $label$14
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$15 }
	*(($7 + [4])) = $8
	CALL $113($8)
	
.LABEL $label$15
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $1) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $113($5)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)int_32(($8 - $7) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$4 = int_32(($7 - $5) >> [4])
	$7 = ($4 + $1)
	if ( ((uint_32)$7 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$8 = ($8 - $5)
	if ( ((uint_32)int_32($8 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($8 >> [3])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$8 = CALL $112(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $7
	$8 = $1
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$7 }
	*(($0 + [4])) = ($7 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $130($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$2 = ($8 + ($6 << [4]))
	$8 = ($8 + ($4 << [4]))
	$6 = $8
	$7 = $1
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$3 = ($8 + ($1 << [4]))
	$6 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$10 }
	$4 = ([0] - $6)
	$6 = ($7 + [-16])
	
.LOOP $label$11:
	*(($8 + [-16])) = *($6)
	*(($7 = ($8 + [-12]))) = (int_64)0
	*(($1 = ($8 + [-4]))) = [0]
	$5 = ($6 + [4])
	*($7) = *($5)
	*(($8 + [-8])) = *(($6 + [8]))
	$7 = ($6 + [12])
	*($1) = *($7)
	*($7) = [0]
	*($5) = (int_64)0
	$8 = ($8 + [-16])
	$6 = ($6 + [-16])
	if ( ((int_32)($6 + $4) != (int_32)[-16]) ){ goto $label$11 }
	$6 = *(($0 + [4]))
	$1 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$1 = $6
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$12 }
	$7 = ([0] - $1)
	$6 = ($6 + [-12])
	
.LOOP $label$13:
	$8 = *($6)
	if ( ($8 == 0) ){ goto $label$14 }
	*(($6 + [4])) = $8
	CALL $113($8)
	
.LABEL $label$14
	$6 = ($6 + [-16])
	if ( ((int_32)($6 + $7) != (int_32)[-12]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$15 }
	CALL $113($1)
	
.LABEL $label$15
	(unreachable)
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1008])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1008])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1008])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [1008])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $60(*($1), ($0 + [32]))
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	$4 = [0]
	*((($0 = CALL memset($0, [0], [112])) + [32])) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [416])
	$3 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [480])
	*(($0 + [48])) = [0]
	*($0 + [40]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [24])
	*($6 + [48]) = ($0 + [40])
	*($6 + [52]) = ($0 + [64])
	*($6 + [56]) = ($0 + [96])
	CALL $59(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [64])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $112(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $112([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $35(($8 + [28]), [8])
	$2 = *($8 + [28])
	CALL eosio_assert(((int_32)(*($2) - $2) > (int_32)[7]), [704])
	CALL memcpy($2, $4, [8])
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $113($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $113($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $113($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $87(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $78($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $79(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $113($0)
	
.LABEL $label$1
	CALL $80(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

int_64 .FUNC $85 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [24]))
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$1 }
	$3 = (int_64)0
	$1 = ($0 + [8])
	$2 = CALL db_lowerbound_i64(*($1), *(($0 + [16])), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	CALL $55($1, $2)
	*($4 + [12]) = [0]
	*($4 + [8]) = $1
	$3 = *(*(CALL $56(($4 + [8])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [24])) = $3
	
.LABEL $label$1
	$1 = ($0 + [88])
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [1280])
	$2 = *(($0 + [116]))
	if ( ((int_32)$2 == (int_32)*(($0 + [112]))) ){ goto $label$6 }
	$0 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)$1), [848])
	if ( $0 ){ goto $label$5 }
	$3 = (int_64)0
	goto $label$3 
	
.LABEL $label$6
	$0 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $49($1, $0)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)$1), [848])
	
.LABEL $label$5
	$3 = *($0 + [8])
	goto $label$3 
	
.LABEL $label$4
	$3 = (int_64)0
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [16])
	return $3
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [704])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [704])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $39($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [704])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [704])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [704])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $39(CALL $38($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [704])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [704])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [704])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [704])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [704])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $80 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $113($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $113($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $113($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $113($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $113($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $113($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $113($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $113($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $144 ()
{
	(unreachable)
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $40(*($1), *($0 + [20]))
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [704])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[19]), [704])
	CALL memcpy(*($2 + [4]), $3, [20])
	*($2 + [4]) = (*($2 + [4]) + [20])
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($0 + [4]), $2, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [704])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [1680])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1728])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1792])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$7 }
	CALL $113(*(($4 + [48])))
	
.LABEL $label$7
	CALL $113($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$10 }
	CALL $113(*(($4 + [48])))
	
.LABEL $label$10
	CALL $113($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [108])))
}

int_32 .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$6 = CALL $112([16])
	*($0 + [16]) = $6
	*(($7 = ($0 + [20]))) = $6
	$8 = ($6 + [16])
	*($5) = $8
	*(($6 + [8])) = *(($1 + [8]))
	*($6) = *($1)
	*($7) = $8
	*($0 + [28]) = [0]
	*(($6 = ($0 + [32]))) = [0]
	*(($0 + [36])) = [0]
	CALL $35(($0 + [28]), [24])
	$6 = *($0 + [28])
	$1 = (*($6) - $6)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [704])
	CALL memcpy($6, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [704])
	CALL memcpy(($6 + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [704])
	CALL memcpy(($6 + [16]), ($4 + [16]), [8])
	return $0
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *($1)
	$3 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	$1 = ($6 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($1)) == (int_64)$2) ){ goto $label$1 }
	$6 = $1
	$5 = ($1 + [-24])
	$1 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$4 }
	$1 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$5), [848])
	goto $label$3 
	
.LABEL $label$4
	$1 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)4229865212519383040, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $55($5, $6)
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$5), [848])
	
.LABEL $label$3
	$6 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($6, [1600])
	CALL eosio_assert($6, [1648])
	$6 = CALL db_next_i64(*($1 + [108]), ($7 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $55($5, $6)
	
.LABEL $label$5
	CALL $73($5, $1)
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [912])
	*(($4 = CALL $112([32])) + [8]) = (int_64)1397703940
	*($4) = (int_64)0
	CALL eosio_assert([1], [416])
	$5 = ($4 + [8])
	$6 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [480])
	*($4 + [16]) = $1
	$7 = *($3)
	*($4) = *($7)
	*(($4 + [12])) = *(($7 + [12]))
	*(($4 + [8])) = *(($7 + [8]))
	*(($4 + [4])) = *(($7 + [4]))
	CALL eosio_assert([1], [704])
	CALL memcpy(($9 + [16]), $4, [8])
	CALL eosio_assert([1], [704])
	CALL memcpy((($9 + [16]) | [8]), $5, [8])
	*($4 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)6820308914865700864, $2, (int_64)6820308914865700864, ($9 + [16]), [16])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$6 }
	*(($1 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$6
	*($9 + [8]) = $4
	*($9 + [16]) = (int_64)6820308914865700864
	$8 = *($4 + [20])
	*($9 + [4]) = $8
	$3 = ($1 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)6820308914865700864
	*($7 + [16]) = $8
	*($9 + [8]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $45(($1 + [24]), ($9 + [8]), ($9 + [16]), ($9 + [4]))
	
.LABEL $label$7
	*($0 + [4]) = $4
	*($0) = $1
	$7 = *($9 + [8])
	*($9 + [8]) = [0]
	if ( ($7 == 0) ){ goto $label$9 }
	CALL $113($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [32])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = *($0)
	$9 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$5 = ($9 + [1])
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$7 = ($8 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $112(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$5 = ($8 + ((int_32)$7 * (int_32)[40]))
	$9 = ($8 + ((int_32)$9 * (int_32)[40]))
	$8 = CALL $70($9, $1, *($2), *($3), $4)
	$6 = ($8 + [40])
	$7 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$6 }
	$4 = ([0] - $7)
	$7 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($7 + [-12]))
	*(($8 + [-40])) = *(($7 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($2 = ($8 + [-16]))) = [0]
	$3 = ($7 + [-4])
	*($1) = *($3)
	*(($8 + [-20])) = *($7)
	$1 = ($7 + [4])
	*($2) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($3) = (int_64)0
	*(($2 = ($8 + [-4]))) = [0]
	$3 = ($7 + [8])
	*($1) = *($3)
	*(($8 + [-8])) = *(($7 + [12]))
	$8 = ($7 + [16])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$9 = ($9 + [-40])
	$8 = $9
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $4) != (int_32)[-20]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $7
	
.LABEL $label$5
	*($0) = $9
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$8 }
	$9 = ([0] - $1)
	$7 = ($7 + [-24])
	
.LOOP $label$9:
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($7 + [16])) = $8
	CALL $113($8)
	
.LABEL $label$10
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$11 }
	*(($7 + [4])) = $8
	CALL $113($8)
	
.LABEL $label$11
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $9) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $113($1)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$0), [848])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)6820308914865700864, (int_64)6820308914865700864)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $43($0, $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$0), [848])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [1056])
	CALL $75($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $76($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [704])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [704])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $40(*($1), ($0 + [32]))
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $35($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [704])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [704])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $39(CALL $38($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_64 .FUNC $78 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$4 = ($0 + [24])
	$3 = *($4)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$1 }
	$3 = (int_64)0
	$2 = ($0 + [8])
	$1 = CALL db_lowerbound_i64(*($2), *(($0 + [16])), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	CALL $55($2, $1)
	*($5 + [28]) = [0]
	*($5 + [24]) = $2
	$3 = *(*(CALL $56(($5 + [24])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [24])) = $3
	
.LABEL $label$1
	$1 = ($0 + [88])
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [1280])
	$3 = *($4)
	*($5 + [8]) = (int_64)0
	*($5) = $3
	*($5 + [16]) = [1]
	$4 = *(($0 + [116]))
	if ( ((int_32)$4 == (int_32)*(($0 + [112]))) ){ goto $label$5 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$1), [848])
	if ( $4 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$4 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $49($1, $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$1), [848])
	goto $label$3 
	
.LABEL $label$4
	$4 = $5
	
.LABEL $label$3
	*((($5 + [24]) + [16])) = *(($4 + [16]))
	*(($2 = (($5 + [24]) + [8]))) = *(($4 + [8]))
	*($5 + [24]) = *($4)
	*($2) = ((int_64)*($2) + (int_64)1)
	CALL $50($1, ($5 + [24]), *($0))
	$3 = *($2)
	*([0] + [4]) = ($5 + [48])
	return $3
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $81($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $35($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $82($4, $1)
	CALL $84(CALL $83(CALL $83($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [116])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $113($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($0 + [112]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $113($4)
	
.LABEL $label$1
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($0 + [76])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $113($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($0 + [72]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $113($4)
	
.LABEL $label$6
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($0 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$16 }
	CALL $113(*(($2 + [48])))
	
.LABEL $label$16
	CALL $113($2)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($0 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $113($4)
	
.LABEL $label$11
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [288]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$6 }
	$11 = *($5)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$11 = ($11 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$1 }
	$7 = (int_64)0
	$9 = (int_64)59
	$5 = [768]
	$10 = (int_64)0
	
.LOOP $label$7:
	$6 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$8 }
	$11 = *($5)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$11 = ($11 + [165])
	goto $label$9 
	
.LABEL $label$10
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$8
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$6 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$7 }
	$5 = [0]
	*(($12 + [72])) = [0]
	*($12 + [48]) = $10
	*($12 + [40]) = $8
	*($12 + [56]) = (int_64)-1
	*($12 + [64]) = (int_64)0
	$7 = (int_64)5459781
	$11 = CALL $41(($12 + [40]), (int_64)5459781, [784])
	*((($12 + [24]) + [8])) = *(($11 + [8]))
	*($12 + [24]) = *($11)
	$2 = *($12 + [64])
	if ( ($2 == 0) ){ goto $label$11 }
	$4 = ($12 + [68])
	$11 = *($4)
	if ( ((int_32)$11 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$11 = ($11 + [-24])
	$3 = *($11)
	*($11) = [0]
	if ( ($3 == 0) ){ goto $label$15 }
	CALL $113($3)
	
.LABEL $label$15
	if ( ((int_32)$2 != (int_32)$11) ){ goto $label$14 }
	$11 = *(($12 + [64]))
	goto $label$12 
	
.LABEL $label$13
	$11 = $2
	
.LABEL $label$12
	*($4) = $2
	CALL $113($11)
	
.LABEL $label$11
	*($12 + [48]) = (int_64)1397703940
	*($12 + [40]) = (int_64)0
	CALL eosio_assert([1], [416])
	
.LOOP $label$17:
	$11 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$11 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$17 }
	
.LABEL $label$16
	CALL eosio_assert($11, [480])
	CALL $42(($12 + [8]), ($1 + [48]), *($1), ($12 + [40]))
	$7 = *($12 + [8])
	$9 = *($12 + [16])
	*($0) = *($12 + [24])
	$6 = *((($12 + [24]) + [8]))
	*(($0 + [8])) = $6
	CALL eosio_assert(((int_64)$9 == (int_64)$6), [512])
	$7 = (int_64)
	*($0) = $7(*($0) - $7))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [560])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [592])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [816])
	*([0] + [4]) = ($12 + [80])
}

void .FUNC _ZN4game8roulette7offlineEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$3 = [1]
	if ( CALL has_auth(*($0)) ){ goto $label$1 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [368]
	$6 = (int_64)0
	
.LOOP $label$2:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$3 }
	$1 = *($3)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$1 = ($1 + [165])
	goto $label$4 
	
.LABEL $label$5
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$3
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$2 }
	$3 = CALL has_auth($6)
	
.LABEL $label$1
	CALL eosio_assert($3, [384])
	CALL eosio_assert(CALL $48($0), [1024])
	*(($3 = ($8 + [16]))) = (int_64)0
	*(($8 + [8])) = (int_64)0
	*($3) = [1]
	*($8) = (int_64)0
	$1 = ($0 + [88])
	$3 = *(($0 + [116]))
	if ( ((int_32)$3 == (int_32)*(($0 + [112]))) ){ goto $label$8 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$1), [848])
	if ( $3 ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$3 = CALL db_find_i64(*($1), *(($0 + [96])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	$3 = CALL $49($1, $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$1), [848])
	goto $label$6 
	
.LABEL $label$7
	$3 = $8
	
.LABEL $label$6
	*(($2 = (($8 + [24]) + [16]))) = *(($3 + [16]))
	*((($8 + [24]) + [8])) = *(($3 + [8]))
	*($8 + [24]) = *($3)
	if ( (*($2) == 0) ){ goto $label$9 }
	*($2) = [0]
	CALL $50($1, ($8 + [24]), *($0))
	
.LABEL $label$9
	*([0] + [4]) = ($8 + [48])
}

void .FUNC _ZN4game8roulette7dividedEv (int_32 $0)
{
	int_64 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [144])
	*([0] + [4]) = $15
	$7 = [1]
	if ( CALL has_auth(*($0)) ){ goto $label$1 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [368]
	$10 = (int_64)0
	
.LOOP $label$2:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$3 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$3
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$2 }
	$7 = CALL has_auth($10)
	
.LABEL $label$1
	CALL eosio_assert($7, [384])
	CALL $33(($15 + [24]), $0)
	CALL eosio_assert([1], [416])
	$9 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$4 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [480])
	$9 = *($15 + [24])
	$1 = *($15 + [32])
	CALL eosio_assert(((int_64)$1 == (int_64)1397703940), [512])
	$2 = ((int_64)$9 + (int_64)-50000000)
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [560])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [592])
	$3 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [624]
	$10 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$16 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$4 = ($4 + [165])
	goto $label$14 
	
.LABEL $label$16
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$12
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$11 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [288]
	$12 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$22 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$4 = ($4 + [165])
	goto $label$20 
	
.LABEL $label$22
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$18
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$12 = ((int_64)$11 | (int_64)$12)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$17 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [304]
	$13 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$28 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$4 = ($4 + [165])
	goto $label$26 
	
.LABEL $label$28
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$24
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$23 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [640]
	$14 = (int_64)0
	
.LOOP $label$29:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$30 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$4 = ($4 + [165])
	goto $label$31 
	
.LABEL $label$32
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$30
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$14 = ((int_64)$8 | (int_64)$14)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$29 }
	*($15) = $3
	CALL $34(($15 + [8]), $15)
	$7 = CALL $121(($15 + [8]), [0], [656])
	$4 = *($7)
	*($7) = [0]
	$5 = *($7 + [4])
	*($7 + [4]) = [0]
	$6 = *($7 + [8])
	*($7 + [8]) = [0]
	*((($15 + [24]) + [24])) = $1
	*($15 + [24]) = *($0)
	*($15 + [40]) = $2
	*($15 + [32]) = $14
	*($15 + [56]) = $4
	*((($15 + [24]) + [36])) = $5
	*(($15 + [64])) = $6
	*($15 + [72]) = $12
	*($15 + [80]) = $13
	*(($7 = CALL $112([16]))) = $3
	*($7 + [8]) = $10
	*((($15 + [72]) + [32])) = [0]
	$0 = ($7 + [16])
	*((($15 + [72]) + [24])) = $0
	*(($15 + [92])) = $0
	*($15 + [88]) = $7
	*($15 + [100]) = [0]
	*((($15 + [72]) + [36])) = [0]
	$4 = ( $5 ? (uint_32($4 >> [1]) & [127]) : ($4 & [1]) )
	$7 = ($4 + [32])
	$9 = (CASTING uint_64)(uint_32 $4)
	$4 = ($15 + [100])
	
.LOOP $label$33:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$33 }
	if ( ($7 == 0) ){ goto $label$35 }
	CALL $35($4, $7)
	$4 = *(($15 + [104]))
	$7 = *(($15 + [100]))
	goto $label$34 
	
.LABEL $label$35
	$4 = [0]
	$7 = [0]
	
.LABEL $label$34
	*($15 + [116]) = $7
	*($15 + [112]) = $7
	*($15 + [120]) = $4
	*($15 + [128]) = ($15 + [112])
	*($15 + [136]) = ($15 + [24])
	CALL $36(($15 + [136]), ($15 + [128]))
	CALL $37(($15 + [112]), ($15 + [72]))
	$7 = *($15 + [112])
	CALL send_inline($7, (*($15 + [116]) - $7))
	$7 = *($15 + [112])
	if ( ($7 == 0) ){ goto $label$36 }
	*($15 + [116]) = $7
	CALL $113($7)
	
.LABEL $label$36
	$7 = *($15 + [100])
	if ( ($7 == 0) ){ goto $label$37 }
	*(($15 + [104])) = $7
	CALL $113($7)
	
.LABEL $label$37
	$7 = *($15 + [88])
	if ( ($7 == 0) ){ goto $label$38 }
	*(($15 + [92])) = $7
	CALL $113($7)
	
.LABEL $label$38
	if ( ((*($15 + [56]) & [1]) == 0) ){ goto $label$39 }
	CALL $113(*(($15 + [64])))
	
.LABEL $label$39
	if ( ((*($15 + [8]) & [1]) == 0) ){ goto $label$40 }
	CALL $113(*($15 + [16]))
	
.LABEL $label$40
	*([0] + [4]) = ($15 + [144])
}

void .FUNC $129 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $112($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $118($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $127 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $129($1, $0, [11184])
	CALL abort()
	(unreachable)
}