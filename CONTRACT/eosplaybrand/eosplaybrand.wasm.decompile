(data (i32.const 4) "p~\00\00")
(data (i32.const 16) "\00")
(data (i32.const 288) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 352) "invalid symbol name\00")
(data (i32.const 384) "unexpected asset symbol input\00")
(data (i32.const 416) "invalid sell\00")
(data (i32.const 432) "invalid conversion\00")
(data (i32.const 464) "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\00")
(data (i32.const 528) "EOS\00")
(data (i32.const 544) "PUB_R1_\00")
(data (i32.const 560) "unrecognized public key format\00")
(data (i32.const 592) "invalid base-58 value\00")
(data (i32.const 624) "base-58 value is out of range\00")
(data (i32.const 656) "eosio\00")
(data (i32.const 672) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 736) "RAMCORE market not found\00")
(data (i32.const 768) "error reading iterator\00")
(data (i32.const 800) "read\00")
(data (i32.const 816) "onerror\00")
(data (i32.const 832) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 896) "transfer\00")
(data (i32.const 912) "get\00")
(data (i32.const 928) "unsupported token\00")
(data (i32.const 960) "invalid token contract name\00")
(data (i32.const 992) "invalid token symbol\00")
(data (i32.const 1024) "current token status unusual\00")
(data (i32.const 1056) "unstake\00")
(data (i32.const 1072) "sell ram\00")
(data (i32.const 1088) "deposit\00")
(data (i32.const 1104) "game closed\00")
(data (i32.const 1120) "must bet big than 0\00")
(data (i32.const 1152) "must bet multiple of min bet\00")
(data (i32.const 1184) "invalid bet content\00")
(data (i32.const 1216) "cannot pass end iterator to modify\00")
(data (i32.const 1264) " bet:\00")
(data (i32.const 1280) " for \00")
(data (i32.const 1296) "eosplayagent\00")
(data (i32.const 1312) "eosplaybanks\00")
(data (i32.const 1328) "divide by zero\00")
(data (i32.const 1344) "signed division overflow\00")
(data (i32.const 1376) "invalid bet amount\00")
(data (i32.const 1408) "1\00")
(data (i32.const 1424) "must bet quantity in range\00")
(data (i32.const 1456) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1520) "out of total bet limit\00")
(data (i32.const 1552) "expected return out of limit\00")
(data (i32.const 1584) "cannot create objects in table of another contract\00")
(data (i32.const 1648) "write\00")
(data (i32.const 1664) "object passed to modify is not in multi_index\00")
(data (i32.const 1712) "cannot modify objects in table of another contract\00")
(data (i32.const 1776) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1840) "attempt to add asset with different symbol\00")
(data (i32.const 1888) "addition underflow\00")
(data (i32.const 1920) "addition overflow\00")
(data (i32.const 1952) "unable to find key\00")
(data (i32.const 1984) "multiplication overflow\00")
(data (i32.const 2016) "multiplication underflow\00")
(data (i32.const 2048) "cannot increment end iterator\00")
(data (i32.const 2080) "next primary key in table is at autoincrement limit\00")
(data (i32.const 2144) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 2208) "cannot decrement iterator at beginning of table\00")
(data (i32.const 2256) "invalid bet\00")
(data (i32.const 2272) "too long betinfo\00")
(data (i32.const 2304) ",\00")
(data (i32.const 2320) "no betinfo\00")
(data (i32.const 2336) "invalid betinfo\00")
(data (i32.const 2352) "%05d\00")
(data (i32.const 2368) "\\\8f\c2\f5(\\\ff?\9a\99\99\99\99\99#@\00\00\00\00\00\80X@\00\00\00\00\00\a0\8e@\00\00\00\00\00$\c3@\00\00\00\00\00\ed\f7@")
(data (i32.const 2416) "baccarat: invalid table id\00")
(data (i32.const 2448) "B\00")
(data (i32.const 2464) "P\00")
(data (i32.const 2480) "baccarat: invalid bet amount\00")
(data (i32.const 2512) "T\00")
(data (i32.const 2528) "BP\00")
(data (i32.const 2544) "PP\00")
(data (i32.const 2560) "baccarat: invalid  bet type\00")
(data (i32.const 2608) "bet range: [2, 98]\00")
(data (i32.const 2640) "bet over limit\00")
(data (i32.const 2656) "bet range: [1, 97]\00")
(data (i32.const 2688) "no need bet number\00")
(data (i32.const 2720) "invalid bet info, unknow type\00")
(data (i32.const 2752) "slots:\00")
(data (i32.const 2768) "dice:\00")
(data (i32.const 2784) "lottery:\00")
(data (i32.const 2800) "niuniu:\00")
(data (i32.const 2816) "baccarat:\00")
(data (i32.const 2832) "invalid transfer\00")
(data (i32.const 2864) "active\00")
(data (i32.const 2880) "-\00")
(data (i32.const 2896) ".\00")
(data (i32.const 2912) " \00")
(data (i32.const 2916) "p\0b\00\00")
(data (i32.const 2928) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 2976) "player does not exist\00")
(data (i32.const 3008) "ref does not exist\00")
(data (i32.const 3040) "over level limit: 18\00")
(data (i32.const 3072) "Malformed Memo (not right length)\00")
(data (i32.const 3120) "Malformed Memo [12] == -\00")
(data (i32.const 3152) "Not enough money\00")
(data (i32.const 3184) "attempt to subtract asset with different symbol\00")
(data (i32.const 3232) "subtraction underflow\00")
(data (i32.const 3264) "subtraction overflow\00")
(data (i32.const 3296) "eosio.token\00")
(data (i32.const 3312) "Remaining balance of create account: \00")
(data (i32.const 3360) "only core token can create account\00")
(data (i32.const 3408) "create:\00")
(data (i32.const 3424) "eosplayadmin\00")
(data (i32.const 3440) "hash on date not exist\00")
(data (i32.const 3472) "no found offer\00")
(data (i32.const 3488) "not owners offer\00")
(data (i32.const 3520) "offer bet missmatch\00")
(data (i32.const 3552) "baccarat:win|\00")
(data (i32.const 3568) "cannot pass end iterator to erase\00")
(data (i32.const 3616) "object passed to erase is not in multi_index\00")
(data (i32.const 3664) "cannot erase objects in table of another contract\00")
(data (i32.const 3728) "attempt to remove object that was not in multi_index\00")
(data (i32.const 3792) "niuniu invalid scale\00")
(data (i32.const 3824) "niuniu invalid result\00")
(data (i32.const 3856) "niureceipt\00")
(data (i32.const 3872) "invalid slot result\00")
(data (i32.const 3904) "id miss match slot offer\00")
(data (i32.const 3936) "owner miss match slot offer\00")
(data (i32.const 3968) "time miss match slot offer\00")
(data (i32.const 4000) "did not support this token\00")
(data (i32.const 4032) "slots:win|\00")
(data (i32.const 4048) "slot\00")
(data (i32.const 4064) "slotsreceipt\00")
(data (i32.const 4080) "receipt\00")
(data (i32.const 4096) "\00\00\00\00\00\88\c3@\00\00\00\00\00@\8f@\00\00\00\00\00\c0r@\00\00\00\00\00\00i@\00\00\00\00\00\00I@\00\00\00\00\00\00.@\00\00\00\00\00\00 @\00\00\00\00\00\00\14@\00\00\00\00\00\00\00@\00\00\00\00\00\00\00\00")
(data (i32.const 4176) "\1e\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\n\00\00\00\00\00\00\00\t\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00\07\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00")
(data (i32.const 4256) "reward: top [\00")
(data (i32.const 4272) "] at \00")
(data (i32.const 4288) " Round: \00")
(data (i32.const 4304) "cannot decrement end iterator when the index is empty\00")
(data (i32.const 4368) "cannot decrement iterator at beginning of index\00")
(data (i32.const 4416) "dice invalid result\00")
(data (i32.const 4448) "over\00")
(data (i32.const 4464) "under\00")
(data (i32.const 4480) "small\00")
(data (i32.const 4496) "big\00")
(data (i32.const 4512) "pair\00")
(data (i32.const 4528) "dice:win|\00")
(data (i32.const 4544) "dicereceipt\00")
(data (i32.const 4560) "token transfer error - did not support this token\00")
(data (i32.const 4624) "lottery\00")
(data (i32.const 4640) "dice\00")
(data (i32.const 4656) "niuniu\00")
(data (i32.const 4672) "baccarat\00")
(data (i32.const 4688) "lottery:win|\00")
(data (i32.const 4704) ":\00")
(data (i32.const 4720) "lotreceipt\00")
(data (i32.const 4736) "invalid result\00")
(data (i32.const 13152) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 13248) "%d\00")
(data (i32.const 13264) "%ld\00")
(data (i32.const 13280) "%lu\00")
(data (i32.const 13296) "%llu\00")
(data (i32.const 13312) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 13328) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 13344) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 13360) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 13824) "0123456789ABCDEF")
(data (i32.const 13840) "-+   0X0x\00")
(data (i32.const 13856) "(null)\00")
(data (i32.const 13872) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 13904) "inf\00")
(data (i32.const 13920) "INF\00")
(data (i32.const 13936) "nan\00")
(data (i32.const 13952) "NAN\00")
(data (i32.const 13968) ".\00")
(data (i32.const 13984) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 14080) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 15952) "UTC\00")
(data (i32.const 15968) "\1f\1e\1f\1e\1f\1f\1e\1f\1e\1f\1f\1d")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$2 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$3 (param i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$4 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$5 (param i32 i32)))
(import "env" "__floatunsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__multi3" (func $fimport$8 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$12))
(import "env" "action_data_size" (func $fimport$13 (result i32)))
(import "env" "assert_sha256" (func $fimport$14 (param i32 i32 i32)))
(import "env" "current_receiver" (func $fimport$15 (result i64)))
(import "env" "current_time" (func $fimport$16 (result i64)))
(import "env" "db_end_i64" (func $fimport$17 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_end" (func $fimport$20 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$21 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$22 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "db_idx64_previous" (func $fimport$24 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$25 (param i32)))
(import "env" "db_idx64_store" (func $fimport$26 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$27 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$29 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$30 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$31 (param i32)))
(import "env" "db_store_i64" (func $fimport$32 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$33 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$34 (param i32 i32)))
(import "env" "is_account" (func $fimport$35 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$36 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$37 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$38 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$39 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$40 (param i64)))
(import "env" "require_auth2" (func $fimport$41 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$42 (param i64)))
(import "env" "send_deferred" (func $fimport$43 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$44 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN11eosiosystem14exchange_state19convert_to_exchangeERNS0_9connectorEN5eosio5assetE" (func $5))
(export "_ZN11eosiosystem14exchange_state21convert_from_exchangeERNS0_9connectorEN5eosio5assetE" (func $6))
(export "_ZN11eosiosystem14exchange_state7convertEN5eosio5assetENS1_11symbol_typeE" (func $7))
(export "_ZN6abieos14get_base58_mapEv" (func $8))
(export "_ZN6abieos20string_to_public_keyENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE" (func $9))
(export "_ZN5eosio11buyrambytesEm" (func $11))
(export "apply" (func $16))
(export "malloc" (func $319))
(export "free" (func $322))
(export "_ZNSt3__19to_stringEi" (func $339))
(export "_ZNSt3__19to_stringEl" (func $341))
(export "_ZNSt3__19to_stringEm" (func $342))
(export "_ZNSt3__19to_stringEy" (func $343))
(export "pow" (func $347))
(export "sqrt" (func $348))
(export "fabs" (func $349))
(export "scalbn" (func $350))
(export "snprintf" (func $351))
(export "vsnprintf" (func $352))
(export "__errno_location" (func $354))
(export "vfprintf" (func $355))
(export "__lockfile" (func $357))
(export "__unlockfile" (func $358))
(export "__fwritex" (func $359))
(export "strerror" (func $361))
(export "strnlen" (func $362))
(export "wctomb" (func $363))
(export "__signbitl" (func $364))
(export "__fpclassifyl" (func $365))
(export "frexpl" (func $366))
(export "wcrtomb" (func $367))
(export "memchr" (func $368))
(export "__lctrans" (func $369))
(export "__lctrans_impl" (func $370))
(export "__mo_lookup" (func $371))
(export "strcmp" (func $372))
(export "__towrite" (func $373))
(export "sprintf" (func $374))
(export "vsprintf" (func $375))
(export "atoi" (func $376))
(export "llabs" (func $377))
(export "memcmp" (func $378))
(export "strlen" (func $379))
(export "strncmp" (func $380))
(export "strtok" (func $381))
(export "strspn" (func $382))
(export "strcspn" (func $383))
(export "__strchrnul" (func $384))
(export "gmtime" (func $385))
(export "__gmtime_r" (func $386))
(export "__secs_to_tm" (func $387))
(table $0 26 26 anyfunc)
(elem (i32.const 0) $388 $25 $17 $29 $47 $19 $41 $34 $56 $43 $38 $40 $50 $23 $21 $58 $45 $52 $54 $27 $49 $31 $36 $32 $59 $353)



void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = *($0)
	$7 = ($6 + [80])
	$5 = *($7)
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$2 = ($6 + [64])
	$3 = CALL db_lowerbound_i64(*($2), *(($6 + [72])), (int_64)-8272103851780956784, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $115($2, $3)
	*($8 + [12]) = [0]
	*($8 + [8]) = $2
	$5 = *(*(CALL $122(($8 + [8])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [80])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [2080])
	*($1) = *($7)
	*($1 + [8]) = *(*($0 + [4]))
	*($1 + [16]) = *(*($0 + [8]))
	$4 = *(*($0 + [12]))
	CALL eosio_assert([1], [288])
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [352])
	*(($1 + [32])) = $4
	*($1 + [24]) = (int_64)0
	$4 = *(*(($0 + [12])))
	CALL eosio_assert([1], [288])
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$0 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$0 = [0]
	
.LABEL $label$8
	CALL eosio_assert($0, [352])
	*(($1 + [48])) = $4
	*($1 + [40]) = (int_64)0
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $120 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	$4 = CALL $116($0)
	*($0 + [56]) = $1
	$1 = *($2)
	CALL $121(*($2 + [4]), $4)
	*($7 + [64]) = ($7 + [56])
	*($7 + [60]) = $7
	*($7 + [56]) = $7
	CALL $104(($7 + [56]), $4)
	$3 = *($0)
	*($0 + [60]) = CALL db_store_i64(*($1 + [8]), (int_64)-8272103851780956784, *(*($2 + [8])), $3, $7, [56])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($1 + [8]))
	$5 = *(*(($2 + [8])))
	$6 = *($0)
	*($7 + [72]) = *($0 + [16])
	*($0 + [64]) = CALL db_idx64_store($3, (int_64)-8272103851780956784, $5, $6, ($7 + [72]))
	*([0] + [4]) = ($7 + [80])
	return $0
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	$2 = *($0)
	$3 = *($0 + [4])
	$5 = *($3)
	$6 = $7
	CALL $68(($6 + [8]), $5)
	*($6 + [8]) = ((int_64)*($6 + [8]) + (int_64)1)
	CALL $95(($5 + [504]), ($6 + [8]), *($5))
	*($1) = *($6 + [8])
	$5 = *($3 + [4])
	*($1 + [8]) = *($5)
	*(($1 + [16])) = *(($5 + [8]))
	CALL $326(($1 + [24]), *($3 + [8]))
	*($1 + [56]) = *(*($3 + [12]))
	*($1 + [40]) = *(*($3 + [16]))
	*($1 + [48]) = *(*($3 + [20]))
	$3 = *($1 + [24])
	$5 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [41])
	$4 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	*($6 + [12]) = $5
	*($6 + [8]) = $5
	*($6 + [16]) = ($5 + $3)
	CALL $128(($6 + [8]), $1)
	$4 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($2 + [8]), (int_64)4147959691619784352, *(*($0 + [8])), $4, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($5)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [64])
}

void .FUNC $189 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL $324(*(($1 + [56])))
	
.LABEL $label$11
	CALL $324($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $324($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $188 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [1664])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1712])
	$4 = *($1)
	$5 = ($1 + [48])
	CALL $326($5, *($3))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1776])
	$3 = *($1 + [48])
	$6 = ( *(($1 + [52])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($6 + [40])
	$8 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$9 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$9 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$2
	*($10) = $9
	$6 = ($9 + $3)
	*($10 + [8]) = $6
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [1648])
	CALL memcpy($9, $1, [8])
	$7 = ($9 + [8])
	CALL eosio_assert(((int_32)($6 - $7) > (int_32)[31]), [1648])
	CALL memcpy($7, ($1 + [16]), [32])
	*($10 + [4]) = ($9 + [40])
	CALL $97($10, $5)
	CALL db_update_i64(*($1 + [64]), $2, $9, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($9)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $49 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [3424]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($6)
	CALL $68(($8 + [8]), $0)
	*($8 + [16]) = $1
	CALL $95(($0 + [504]), ($8 + [8]), *($0))
	*([0] + [4]) = ($8 + [64])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [96])
	*([0] + [4]) = $2
	*(($3 = $2) + [92]) = $0
	*($3 + [80]) = *($1)
	*($3 + [84]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $209(($3 + [8]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [4]) = ($3 + [80])
	*($3) = ($3 + [92])
	CALL $210($3, ($3 + [8]))
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$6 }
	CALL $324(*(($3 + [36])))
	
.LABEL $label$6
	*([0] + [4]) = ($3 + [96])
	return [1]
}

void .FUNC $264 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1584])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $323([96])
	CALL $265($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [88])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $161(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $324($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $265 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	$4 = CALL $162($0)
	*($0 + [84]) = $1
	$1 = *($2)
	CALL $266(*($2 + [4]), $4)
	*($7 + [96]) = ($7 + [84])
	*($7 + [92]) = $7
	*($7 + [88]) = $7
	CALL $157(($7 + [88]), $4)
	$3 = *($0)
	*($0 + [88]) = CALL db_store_i64(*($1 + [8]), (int_64)-3020384829779738624, *(*($2 + [8])), $3, $7, [84])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($1 + [8]))
	$5 = *(*(($2 + [8])))
	$6 = *($0)
	*($7 + [104]) = *($0 + [8])
	*($0 + [92]) = CALL db_idx64_store($3, (int_64)-3020384829779738624, $5, $6, ($7 + [104]))
	*([0] + [4]) = ($7 + [112])
	return $0
}

void .FUNC $266 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	*($1) = *(*($0))
	*($1 + [8]) = *(*($0 + [4]))
	CALL eosio_assert([1], [288])
	$0 = [0]
	$2 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [352])
	*(($1 + [24])) = (int_64)1397703940
	*($1 + [16]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [352])
	*(($1 + [40])) = (int_64)1397703940
	*($1 + [32]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [352])
	*(($1 + [56])) = (int_64)1397703940
	*($1 + [48]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [352])
	*(($1 + [72])) = (int_64)1397703940
	*($1 + [64]) = (int_64)0
	*($1 + [80]) = [0]
}

void .FUNC $267 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	$4 = [0]
	*($0 + [16]) = [0]
	*($0 + [24]) = (int_64)0
	*(($0 + [32])) = (int_64)1398362884
	CALL eosio_assert([1], [288])
	$3 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [352])
	*(($0 + [48])) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [288])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [352])
	*($0 + [56 align=4]) = (int_64)0
	*(($0 + [64])) = (int_64)0
	*($0 + [72]) = [0]
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $269(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $43 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	CALL require_auth(*($0))
	CALL require_recipient($1)
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [96])
	*([0] + [4]) = $3
	*(($2 = $3) + [60]) = $0
	*($2 + [48]) = *($1)
	*($2 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = [0]
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = [0]
	*($2 + [68]) = $1
	*($2 + [64]) = $1
	*($2 + [72]) = ($1 + $0)
	*($2 + [80]) = ($2 + [64])
	*($2 + [88]) = $2
	CALL $235(($2 + [88]), ($2 + [80]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [68]) = ($2 + [48])
	*($2 + [64]) = ($2 + [60])
	CALL $236(($2 + [64]), $2)
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $324(*(($2 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [96])
	return [1]
}

void .FUNC $41 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	float_64 $12
	float_64 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	float_64 $20
	int_64 $21
	int_32 $22
	$22 = (*([0] + [4]) - [368])
	*([0] + [4]) = $22
	$16 = (int_64)0
	$15 = (int_64)59
	$14 = [3424]
	$17 = (int_64)0
	
.LOOP $label$1:
	$18 = (int_64)0
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$2 }
	$6 = *($14)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$6 = ($6 + [165])
	goto $label$3 
	
.LABEL $label$4
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$18 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$2
	$14 = ($14 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($17)
	if ( (*($3) & [1]) ){ goto $label$6 }
	$14 = ($3 + [1])
	goto $label$5 
	
.LABEL $label$6
	$14 = *($3 + [8])
	
.LABEL $label$5
	CALL eosio_assert(CALL $237($0, $14), [3872])
	$8 = *(($0 + [248]))
	$19 = *(($0 + [252]))
	if ( ((int_32)$19 == (int_32)$8) ){ goto $label$7 }
	$14 = ($19 + [-24])
	$9 = ([0] - $8)
	
.LOOP $label$8:
	if ( ((int_64)*(*($14)) == (int_64)$1) ){ goto $label$7 }
	$19 = $14
	$6 = ($14 + [-24])
	$14 = $6
	if ( ((int_32)($6 + $9) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = ($0 + [224])
	if ( ((int_32)$19 == (int_32)$8) ){ goto $label$13 }
	$19 = *(($19 + [-24]))
	CALL eosio_assert(((int_32)*($19 + [48]) == (int_32)$7), [672])
	if ( $19 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$14 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)-4293731249866407936, $1)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$11 }
	$19 = CALL $238($7, $14)
	CALL eosio_assert(((int_32)*($19 + [48]) == (int_32)$7), [672])
	
.LABEL $label$12
	CALL eosio_assert(((int_64)*($19) == (int_64)$1), [3904])
	CALL eosio_assert(((int_64)*($19 + [8]) == (int_64)$2), [3936])
	CALL eosio_assert(((int_64)*($19 + [40]) == (int_64)$4), [3968])
	*($22 + [360]) = ($0 + [24])
	*($22 + [136]) = *(($19 + [24]))
	CALL $67(($22 + [48]), ($22 + [360]), ($22 + [136]))
	$9 = [0]
	$14 = *($22 + [52])
	if ( ($14 == 0) ){ goto $label$14 }
	$9 = ( $14 ? [0] : ((int_64)*($22 + [136]) == (int_64)*($14 + [16])) )
	
.LABEL $label$14
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [4000])
	$14 = *($19 + [32])
	if ( (*($3) & [1]) ){ goto $label$16 }
	$6 = ($3 + [1])
	goto $label$15 
	
.LABEL $label$16
	$6 = *($3 + [8])
	
.LABEL $label$15
	$20 = CALL $239($0, $14, $6)
	$1 = *(($19 + [24]))
	CALL eosio_assert([1], [288])
	$16 = (uint_64)$1 >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	
.LOOP $label$21:
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$21 }
	
.LABEL $label$20
	$6 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$6 = [0]
	
.LABEL $label$17
	CALL eosio_assert($6, [352])
	$21 = (int_64)0
	$14 = ((float_64)$20 != (float_64)$20)
	if ( (((float_64)$20 <= (float_64)(float_64)0) | $14) ){ goto $label$22 }
	if ( ((((float_64)$20 < (float_64)(float_64)1e4) | $14) == 0) ){ goto $label$24 }
	$16 = (int_64)0
	goto $label$23 
	
.LABEL $label$24
	$14 = *(($19 + [32]))
	if ( (*($3) & [1]) ){ goto $label$29 }
	if ( CALL $240($0, $14, ($3 + [1])) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	if ( (CALL $240($0, $14, *($3 + [8])) == 0) ){ goto $label$27 }
	
.LABEL $label$28
	$14 = *($9)
	$15 = *($9 + [40])
	$16 = *($19 + [16])
	if ( ((int_64)$16 >= (int_64)((int_64)$15 * (int_64)100)) ){ goto $label$26 }
	$14 = (((int_64)$16 >= (int_64)((int_64)$15 * (int_64)10)) | ($14 << [8]))
	goto $label$25 
	
.LABEL $label$27
	$16 = (int_64)0
	goto $label$23 
	
.LABEL $label$26
	$14 = (($14 << [8]) | [2])
	
.LABEL $label$25
	*($22 + [48]) = *(($19 + [24]))
	$16 = (CASTING int_64)(int_32 $14)
	*($22 + [136]) = $16
	$10 = *(($0 + [568]))
	$9 = *(($0 + [572]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$30 }
	$14 = ($9 + [-24])
	$8 = ([0] - $10)
	
.LOOP $label$31:
	if ( ((int_64)*(*($14)) == (int_64)$16) ){ goto $label$30 }
	$9 = $14
	$6 = ($14 + [-24])
	$14 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$31 }
	
.LABEL $label$30
	$6 = ($0 + [544])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$34 }
	$14 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$6), [672])
	if ( $14 ){ goto $label$32 }
	goto $label$33 
	
.LABEL $label$34
	$14 = CALL db_find_i64(*(($0 + [544])), *(($0 + [552])), (int_64)8759794652103573504, $16)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$33 }
	$14 = CALL $79($6, $14)
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$6), [672])
	goto $label$32 
	
.LABEL $label$33
	$16 = *($0)
	*($22 + [348]) = ($22 + [48])
	*($22 + [344]) = ($22 + [136])
	CALL $80(($22 + [120]), $6, $16, ($22 + [344]))
	$14 = *($22 + [124])
	
.LABEL $label$32
	$12 = ((float_64)(CASTING float_64)(int_64 ((int_64)*(($19 + [16])) / (int_64)*(($19 + [32])))) * (float_64)(float_64)1e4)
	$13 = (CASTING float_64)(int_64 *($14 + [8]))
	if ( (((float_64)$13 <= (float_64)$12) | (((float_64)$13 != (float_64)$13) | ((float_64)$12 != (float_64)$12))) ){ goto $label$36 }
	CALL eosio_assert(((int_64)*(($14 + [16])) == (int_64)$1), [1840])
	$16 = *(($14 + [8]))
	CALL eosio_assert(((int_64)$16 > (int_64)-4611686018427387904), [1888])
	CALL eosio_assert(((int_64)$16 < (int_64)4611686018427387904), [1920])
	$20 = ((float_64)$20 + (float_64)(float_64)-1e4)
	goto $label$35 
	
.LABEL $label$36
	$16 = (int_64)0
	
.LABEL $label$35
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [1216])
	CALL $241($6, $14, (int_64)0, ($22 + [48]))
	
.LABEL $label$23
	$15 = *(($19 + [32]))
	$18 = *($19 + [16])
	*(($22 + [320])) = [0]
	*($22 + [312]) = (int_64)0
	$21 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $16) + (float_64)((float_64)$20 * (float_64)(CASTING float_64)(int_64 ((int_64)$18 / (int_64)$15)))))
	$14 = CALL strlen([4032])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$39 }
	*($22 + [312]) = ($14 << [1])
	$6 = (($22 + [312]) | [1])
	if ( $14 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$9 = (($14 + [16]) & [-16])
	$6 = CALL $323($9)
	*($22 + [312]) = ($9 | [1])
	*($22 + [320]) = $6
	*($22 + [316]) = $14
	
.LABEL $label$38
	CALL memcpy($6, [4032], $14)
	
.LABEL $label$37
	*(($6 + $14)) = [0]
	CALL _ZNSt3__19to_stringEm(($22 + [296]), $5)
	$14 = *($22 + [296])
	$6 = ($14 & [1])
	$14 = CALL $330(($22 + [312]), ( *($22 + [304]) ? (($22 + [296]) | [1]) : $6 ), ( *($22 + [300]) ? uint_32($14 >> [1]) : $6 ))
	$6 = ($14 + [8])
	*((($22 + [328]) + [8])) = *($6)
	*($22 + [328]) = *($14)
	*($14) = [0]
	*(($14 + [4])) = [0]
	*($6) = [0]
	$14 = CALL $331(($22 + [328]), [2304])
	$6 = ($14 + [8])
	*((($22 + [344]) + [8])) = *($6)
	*($22 + [344]) = *($14)
	*($14) = [0]
	*(($14 + [4])) = [0]
	*($6) = [0]
	$14 = *($3)
	$6 = ($14 & [1])
	$14 = CALL $330(($22 + [344]), ( *($3 + [8]) ? ($3 + [1]) : $6 ), ( *($3 + [4]) ? uint_32($14 >> [1]) : $6 ))
	$6 = ($14 + [8])
	*((($22 + [136]) + [8])) = *($6)
	*($22 + [136]) = *($14)
	*($14) = [0]
	*(($14 + [4])) = [0]
	*($6) = [0]
	$14 = CALL $331(($22 + [136]), [2304])
	$6 = ($14 + [8])
	*((($22 + [48]) + [8])) = *($6)
	*($22 + [48]) = *($14)
	*($14) = [0]
	*(($14 + [4])) = [0]
	*($6) = [0]
	*(($14 = (($22 + [264]) + [8]))) = *(($19 + [24]))
	$16 = *($19 + [16])
	*((($22 + [32]) + [12])) = *((($22 + [264]) + [12]))
	*((($22 + [32]) + [8])) = *($14)
	*($22 + [264]) = $16
	*($22 + [36]) = *($22 + [268])
	*($22 + [32]) = *($22 + [264])
	CALL $75(($22 + [280]), $0, ($22 + [32]))
	$14 = *($22 + [280])
	$6 = ($14 & [1])
	$14 = CALL $330(($22 + [48]), ( *($22 + [288]) ? (($22 + [280]) | [1]) : $6 ), ( *($22 + [284]) ? uint_32($14 >> [1]) : $6 ))
	$6 = ($14 + [8])
	*((($22 + [120]) + [8])) = *($6)
	*($22 + [120]) = *($14)
	*($14) = [0]
	*(($14 + [4])) = [0]
	*($6) = [0]
	if ( ((*($22 + [280]) & [1]) == 0) ){ goto $label$40 }
	CALL $324(*((($22 + [280]) + [8])))
	
.LABEL $label$40
	if ( ((*($22 + [48]) & [1]) == 0) ){ goto $label$41 }
	CALL $324(*($22 + [56]))
	
.LABEL $label$41
	if ( ((*($22 + [136]) & [1]) == 0) ){ goto $label$42 }
	CALL $324(*($22 + [144]))
	
.LABEL $label$42
	if ( ((*($22 + [344]) & [1]) == 0) ){ goto $label$43 }
	CALL $324(*($22 + [352]))
	
.LABEL $label$43
	if ( ((*($22 + [328]) & [1]) == 0) ){ goto $label$44 }
	CALL $324(*($22 + [336]))
	
.LABEL $label$44
	if ( ((*($22 + [296]) & [1]) == 0) ){ goto $label$45 }
	CALL $324(*(($22 + [304])))
	
.LABEL $label$45
	if ( ((*($22 + [312]) & [1]) == 0) ){ goto $label$46 }
	CALL $324(*($22 + [320]))
	
.LABEL $label$46
	CALL $345(($22 + [248]), ($22 + [120]))
	*($22 + [144]) = $1
	*($22 + [136]) = $21
	*($22 + [344]) = $2
	if ( ((int_64)$21 < (int_64)1) ){ goto $label$47 }
	$16 = *($0)
	*($22 + [48]) = $0
	*($22 + [52]) = ($22 + [344])
	*($22 + [56]) = ($22 + [136])
	*($22 + [60]) = ($22 + [248])
	CALL $198(($22 + [328]), ($0 + [384]), $16, ($22 + [48]))
	
.LABEL $label$47
	if ( ((*($22 + [248]) & [1]) == 0) ){ goto $label$48 }
	CALL $324(*($22 + [256]))
	
.LABEL $label$48
	if ( ((*($22 + [120]) & [1]) == 0) ){ goto $label$22 }
	CALL $324(*($22 + [128]))
	
.LABEL $label$22
	$16 = *($19)
	*(($22 + [240])) = [0]
	*($22 + [232]) = (int_64)0
	$14 = CALL strlen([4048])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$51 }
	*($22 + [232]) = ($14 << [1])
	$6 = (($22 + [232]) | [1])
	if ( $14 ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	$9 = (($14 + [16]) & [-16])
	$6 = CALL $323($9)
	*($22 + [232]) = ($9 | [1])
	*($22 + [240]) = $6
	*($22 + [236]) = $14
	
.LABEL $label$50
	CALL memcpy($6, [4048], $14)
	
.LABEL $label$49
	*(($6 + $14)) = [0]
	*(($14 = (($22 + [216]) + [8]))) = *(($19 + [24]))
	*($22 + [208]) = $1
	$15 = *($19 + [16])
	*((($22 + [16]) + [8])) = *($14)
	*($22 + [216]) = $15
	*($22 + [200]) = $21
	*($22 + [16]) = *($22 + [216])
	*(($22 + [8])) = *($22 + [208])
	*($22) = *($22 + [200])
	CALL $242($0, $16, ($22 + [232]), $2, ($22 + [16]), $22)
	if ( ((*($22 + [232]) & [1]) == 0) ){ goto $label$52 }
	CALL $324(*($22 + [240]))
	
.LABEL $label$52
	$9 = ($19 + [16])
	$16 = CALL current_time()
	*(($22 + [164])) = [0]
	*(($22 + [168])) = [0]
	*($22 + [148]) = [0]
	*($22 + [152]) = [0]
	*($22 + [156]) = [0]
	*($22 + [160]) = [0]
	*($22 + [136]) = ((CASTING uint_32)(uint_64 ((uint_64)$16 / (uint_64)(int_64)1000000)) + [60])
	*($22 + [172]) = [0]
	*(($22 + [176])) = [0]
	*(($22 + [180])) = [0]
	*($22 + [184]) = [0]
	*(($22 + [188])) = [0]
	*(($22 + [192])) = [0]
	$8 = ($22 + [172])
	$11 = *($0)
	$16 = (int_64)0
	$18 = (int_64)59
	$14 = [2864]
	$17 = (int_64)0
	
.LOOP $label$53:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$58 }
	$6 = *($14)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$6 = ($6 + [165])
	goto $label$56 
	
.LABEL $label$58
	$15 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$57
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$55
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$54
	$14 = ($14 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$15 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$53 }
	*($22 + [128]) = $17
	*($22 + [120]) = $11
	$16 = (int_64)0
	$15 = (int_64)59
	$14 = [4064]
	$17 = (int_64)0
	
.LOOP $label$59:
	$18 = (int_64)0
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$60 }
	$6 = *($14)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$62 }
	$6 = ($6 + [165])
	goto $label$61 
	
.LABEL $label$62
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$61
	$18 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$60
	$14 = ($14 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$59 }
	*($22 + [344]) = $17
	*($22 + [64]) = $5
	*(($22 + [84])) = *(($9 + [12]))
	*(($22 + [80])) = *(($9 + [8]))
	*(($22 + [76])) = *(($9 + [4]))
	*($22 + [56]) = $4
	*($22 + [48]) = $2
	*($22 + [72]) = *($9)
	*($22 + [88]) = $21
	*(($22 + [96])) = $1
	CALL $345(($22 + [104]), $3)
	CALL $243($8, ($22 + [120]), $0, ($22 + [344]), ($22 + [48]))
	if ( ((*($22 + [104]) & [1]) == 0) ){ goto $label$63 }
	CALL $324(*(($22 + [112])))
	
.LABEL $label$63
	CALL $68(($22 + [48]), $0)
	*($22 + [64]) = ((int_64)*($22 + [64]) + (int_64)1)
	CALL $95(($0 + [504]), ($22 + [48]), *($0))
	$16 = *($22 + [64])
	*($22 + [56]) = (int_64)0
	*($22 + [48]) = $16
	$16 = *($0)
	CALL $220(($22 + [120]), ($22 + [136]))
	$14 = *($22 + [120])
	CALL send_deferred(($22 + [48]), $16, $14, (*($22 + [124]) - $14), [0])
	$14 = *($22 + [120])
	if ( ($14 == 0) ){ goto $label$64 }
	*($22 + [124]) = $14
	CALL $324($14)
	
.LABEL $label$64
	CALL eosio_assert([1], [3568])
	CALL eosio_assert([1], [2048])
	$14 = CALL db_next_i64(*($19 + [52]), ($22 + [48]))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$65 }
	CALL $238($7, $14)
	
.LABEL $label$65
	CALL $244($7, $19)
	CALL $221(($22 + [136]))
	
.LABEL $label$11
	*([0] + [4]) = ($22 + [368])
	return (unreachable)
	
.LABEL $label$10
	CALL $325(($22 + [232]))
	
.LABEL $label$9
	CALL $325(($22 + [312]))
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$23 = (*([0] + [4]) - [224])
	*([0] + [4]) = $23
	$18 = (int_64)0
	$17 = (int_64)59
	$16 = [3424]
	$19 = (int_64)0
	
.LOOP $label$1:
	$20 = (int_64)0
	if ( ((uint_64)$18 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($16)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$20 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$2
	$16 = ($16 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($19)
	$17 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$18 = ((int_64)$17 & (int_64)4294967295)
	if ( ((uint_64)$18 > (uint_64)(int_64)1540357199) ){ goto $label$5 }
	CALL $249($0, $18)
	CALL $250($0, $18)
	if ( (uint_64)($18 <= (int_64)1539993600) ){ goto $label$5 }
	$16 = *($0 + [12])
	*(($23 + [184])) = [0]
	*($23 + [168]) = (int_64)-1
	*($23 + [176]) = (int_64)0
	$18 = *($0)
	*($23 + [152]) = $18
	$17 = (CASTING uint_64)(uint_32 ((uint_32)((uint_32)((CASTING uint_32)(uint_64 $17) - $16) / (uint_32)$16) % (uint_32)[100]))
	*($23 + [160]) = $17
	*($23 + [188]) = [0]
	*($23 + [112]) = $18
	$16 = CALL db_find_i64($18, $17, (int_64)-5069073155046244352, $18)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$8 }
	$21 = CALL $251(($23 + [152]), $16)
	CALL eosio_assert(((int_32)*($21 + [56]) == (int_32)($23 + [152])), [672])
	goto $label$7 
	
.LABEL $label$8
	$18 = *($0)
	*($23 + [192]) = ($23 + [112])
	CALL $252(($23 + [208]), ($23 + [152]), $18, ($23 + [192]))
	$21 = *($23 + [212])
	if ( ($21 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	if ( ((int_64)(*($21 + [24]) == 0) == 0) ){ goto $label$6 }
	*($23 + [144]) = (int_64)0
	CALL eosio_assert([1], [288])
	$18 = (int_64)5459781
	$16 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$2 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$2 = [0]
	
.LABEL $label$9
	CALL eosio_assert($2, [352])
	*($23 + [136]) = ($23 + [152])
	*((($23 + [112]) + [8])) = [0]
	*(($2 = ($23 + [128]))) = [0]
	*($23 + [116]) = ($23 + [136])
	*($23 + [124]) = ($23 + [136])
	*($23 + [208]) = (int_64)0
	CALL $253(($23 + [192]), ($23 + [136]), ($23 + [208]))
	if ( ((int_32)*($2) == (int_32)*($23 + [196])) ){ goto $label$14 }
	$16 = (($23 + [112]) + [12])
	$18 = ((int_64)$17 + (int_64)-75)
	$19 = ( ((int_64)$17 + (int_64)25) ? $18 : (int_64)($18 == 0) )
	$5 = ($0 + [384])
	$4 = (($23 + [16]) | [1])
	$3 = (($23 + [32]) | [1])
	$22 = [0]
	
.LOOP $label$15:
	*($23 + [208]) = *($16)
	if ( ((int_64)*(*(CALL $254(($23 + [208])) + [4])) != (int_64)*($0)) ){ goto $label$16 }
	CALL $254($16)
	*($23 + [208]) = (int_64)0
	CALL $253(($23 + [192]), ($23 + [136]), ($23 + [208]))
	if ( ((int_32)*($2) != (int_32)*($23 + [196])) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$6 = ($22 + [1])
	CALL _ZNSt3__19to_stringEi(($23 + [48]), $6)
	$7 = CALL $334(($23 + [48]), [0], [4256])
	$11 = ($7 + [8])
	*(($8 = (($23 + [64]) + [8]))) = *($11)
	*($23 + [64]) = *($7)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($11) = [0]
	$7 = CALL $331(($23 + [64]), [4272])
	$11 = ($7 + [8])
	*(($9 = (($23 + [80]) + [8]))) = *($11)
	*($23 + [80]) = *($7)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($11) = [0]
	CALL _ZNSt3__19to_stringEy(($23 + [32]), $17)
	$7 = *($23 + [32])
	$13 = ($7 & [1])
	$10 = (($23 + [32]) + [8])
	$7 = CALL $330(($23 + [80]), ( *($10) ? $3 : $13 ), ( *($23 + [36]) ? uint_32($7 >> [1]) : $13 ))
	$13 = ($7 + [8])
	*(($11 = (($23 + [192]) + [8]))) = *($13)
	*($23 + [192]) = *($7)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($13) = [0]
	$7 = CALL $331(($23 + [192]), [4288])
	$12 = ($7 + [8])
	*(($13 = (($23 + [208]) + [8]))) = *($12)
	*($23 + [208]) = *($7)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($12) = [0]
	CALL _ZNSt3__19to_stringEy(($23 + [16]), $19)
	$7 = *($23 + [16])
	$12 = ($7 & [1])
	$14 = (($23 + [16]) + [8])
	$7 = CALL $330(($23 + [208]), ( *($14) ? $4 : $12 ), ( *($23 + [20]) ? uint_32($7 >> [1]) : $12 ))
	$12 = ($7 + [8])
	*(($15 = (($23 + [96]) + [8]))) = *($12)
	*($23 + [96]) = *($7)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($12) = [0]
	if ( ((*($23 + [16]) & [1]) == 0) ){ goto $label$17 }
	CALL $324(*($14))
	
.LABEL $label$17
	if ( ((*($23 + [208]) & [1]) == 0) ){ goto $label$18 }
	CALL $324(*($13))
	
.LABEL $label$18
	if ( ((*($23 + [192]) & [1]) == 0) ){ goto $label$19 }
	CALL $324(*($11))
	
.LABEL $label$19
	$7 = ($22 << [3])
	if ( ((*($23 + [32]) & [1]) == 0) ){ goto $label$20 }
	CALL $324(*($10))
	
.LABEL $label$20
	$7 = ($7 + [4176])
	if ( ((*($23 + [80]) & [1]) == 0) ){ goto $label$21 }
	CALL $324(*($9))
	
.LABEL $label$21
	$18 = *($7)
	if ( ((*($23 + [64]) & [1]) == 0) ){ goto $label$22 }
	CALL $324(*($8))
	
.LABEL $label$22
	$18 = ((int_64)$18 * (int_64)10000)
	if ( ((*($23 + [48]) & [1]) == 0) ){ goto $label$23 }
	CALL $324(*((($23 + [48]) + [8])))
	
.LABEL $label$23
	*($23 + [208]) = *($16)
	$20 = *(*(CALL $254(($23 + [208])) + [4]))
	CALL $345($23, ($23 + [96]))
	*($11) = (int_64)1397703940
	*($23 + [192]) = $18
	*($23 + [80]) = $20
	$20 = *($0)
	*($23 + [208]) = $0
	*($13) = ($23 + [192])
	*((($23 + [208]) + [12])) = $23
	*($23 + [212]) = ($23 + [80])
	CALL $198(($23 + [64]), $5, $20, ($23 + [208]))
	if ( ((*($23) & [1]) == 0) ){ goto $label$24 }
	CALL $324(*(($23 + [8])))
	
.LABEL $label$24
	*($23 + [144]) = ((int_64)*($23 + [144]) + (int_64)$18)
	CALL $254($16)
	if ( ((*($23 + [96]) & [1]) == 0) ){ goto $label$25 }
	CALL $324(*($15))
	
.LABEL $label$25
	*($23 + [208]) = (int_64)0
	CALL $253(($23 + [192]), ($23 + [136]), ($23 + [208]))
	if ( ((int_32)$6 > (int_32)[9]) ){ goto $label$14 }
	$22 = $6
	if ( ((int_32)*($2) != (int_32)*($23 + [196])) ){ goto $label$15 }
	
.LABEL $label$14
	if ( ((int_64)*($23 + [144]) < (int_64)1) ){ goto $label$6 }
	*($23 + [208]) = ($23 + [144])
	CALL eosio_assert([1], [1216])
	CALL $255(($23 + [152]), $21, (int_64)0, ($23 + [208]))
	
.LABEL $label$6
	$0 = *($23 + [176])
	if ( ($0 == 0) ){ goto $label$5 }
	$21 = ($23 + [180])
	$16 = *($21)
	if ( ((int_32)$16 == (int_32)$0) ){ goto $label$27 }
	
.LOOP $label$28:
	$16 = ($16 + [-24])
	$2 = *($16)
	*($16) = [0]
	if ( ($2 == 0) ){ goto $label$29 }
	CALL $324($2)
	
.LABEL $label$29
	if ( ((int_32)$0 != (int_32)$16) ){ goto $label$28 }
	$16 = *(($23 + [176]))
	goto $label$26 
	
.LABEL $label$27
	$16 = $0
	
.LABEL $label$26
	*($21) = $0
	CALL $324($16)
	
.LABEL $label$5
	*([0] + [4]) = ($23 + [224])
}

void .FUNC $47 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	CALL require_auth(*($0))
	CALL require_recipient($1)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($3 = $4) + [44]) = $0
	*($3 + [32]) = *($1)
	*($3 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [16])) = (int_64)0
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = [0]
	*($3 + [48]) = $1
	$4 = ($1 + $0)
	*($3 + [56]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [800])
	CALL memcpy($3, $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[3]), [800])
	CALL memcpy(($3 + [8]), $2, [4])
	*($3 + [52]) = ($1 + [12])
	CALL $64(($3 + [48]), ($3 + [12]))
	CALL eosio_assert(((uint_32)(*($3 + [56]) - *($3 + [52])) > (uint_32)[3]), [800])
	CALL memcpy(($3 + [24]), *($3 + [52]), [4])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $213(($3 + [48]), $3)
	if ( ((*($3 + [12]) & [1]) == 0) ){ goto $label$5 }
	CALL $324(*(($3 + [20])))
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [64])
	return [1]
}

void .FUNC $45 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	float_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	float_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_64 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_32 $44
	int_32 $45
	float_64 $46
	float_64 $47
	int_32 $48
	int_64 $49
	int_64 $50
	int_64 $51
	int_32 $52
	$52 = (*([0] + [4]) - [512])
	*([0] + [4]) = $52
	*($52 + [472]) = $1
	$1 = (int_64)0
	$51 = (int_64)59
	$48 = [3424]
	$50 = (int_64)0
	
.LOOP $label$1:
	$49 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$2 }
	$26 = *($48)
	if ( ((uint_32)(($26 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$26 = ($26 + [165])
	goto $label$3 
	
.LABEL $label$4
	$26 = ( ($26 + [208]) ? [0] : ((($26 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$49 = ((int_64)(CASTING uint_64)(uint_32 ($26 & [31])) << (int_64)((int_64)$51 & (int_64)4294967295))
	
.LABEL $label$2
	$48 = ($48 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$50 = ((int_64)$49 | (int_64)$50)
	$51 = ((int_64)$51 + (int_64)-5)
	if ( ((int_64)$51 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($50)
	CALL eosio_assert((($4 + [10]) <= [21]), [3792])
	CALL $345(($52 + [456]), $3)
	$26 = [0]
	$48 = ($48 & [1])
	$48 = *($52 + [456])
	if ( ((int_32)( *($52 + [460]) ? uint_32($48 >> [1]) : $48 ) != (int_32)[20]) ){ goto $label$5 }
	if ( $48 ){ goto $label$7 }
	$22 = (($52 + [456]) | [1])
	$48 = [0]
	
.LOOP $label$8:
	$29 = *(($22 + $48))
	$26 = int_32(($29 << [24]) >> [24])
	if ( ((int_32)$26 < (int_32)[48]) ){ goto $label$6 }
	if ( ((int_32)$26 < (int_32)[58]) ){ goto $label$9 }
	if ( ((uint_32)(($26 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$6 }
	
.LABEL $label$9
	if ( (($48 & [1]) == 0) ){ goto $label$10 }
	if ( (($29 + [-101]) <= [2]) ){ goto $label$6 }
	if ( ((int_32)$29 == (int_32)[48]) ){ goto $label$6 }
	
.LABEL $label$10
	$26 = [1]
	$48 = ($48 + [1])
	if ( ((int_32)$48 < (int_32)[20]) ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$7
	$22 = *($52 + [464])
	$48 = [0]
	
.LOOP $label$11:
	$29 = *(($22 + $48))
	$26 = int_32(($29 << [24]) >> [24])
	if ( ((int_32)$26 < (int_32)[48]) ){ goto $label$6 }
	if ( ((int_32)$26 < (int_32)[58]) ){ goto $label$12 }
	if ( ((uint_32)(($26 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$6 }
	
.LABEL $label$12
	if ( (($48 & [1]) == 0) ){ goto $label$13 }
	if ( (($29 + [-101]) <= [2]) ){ goto $label$6 }
	if ( ((int_32)$29 == (int_32)[48]) ){ goto $label$6 }
	
.LABEL $label$13
	$26 = [1]
	$48 = ($48 + [1])
	if ( ((int_32)$48 < (int_32)[20]) ){ goto $label$11 }
	goto $label$5 
	
.LABEL $label$6
	$26 = [0]
	
.LABEL $label$5
	CALL eosio_assert($26, [3824])
	if ( ((*($52 + [456]) & [1]) == 0) ){ goto $label$14 }
	CALL $324(*($52 + [464]))
	
.LABEL $label$14
	*($52 + [448]) = ($0 + [264])
	CALL $214(($52 + [64]), ($52 + [448]), ($52 + [472]))
	$48 = *($52 + [68])
	if ( ($48 == 0) ){ goto $label$17 }
	if ( ((int_64)*($52 + [472]) != (int_64)*($48 + [40])) ){ goto $label$17 }
	$1 = *($52 + [64])
	*($52 + [440]) = $1
	if ( (uint_64)($1 <= (int_64)4294967296) ){ goto $label$16 }
	$1 = CALL current_time()
	$51 = CALL current_time()
	*((($52 + [376]) + [28])) = [0]
	*((($52 + [376]) + [32])) = [0]
	*($52 + [388]) = [0]
	*($52 + [392]) = [0]
	*($52 + [396]) = [0]
	*($52 + [400]) = [0]
	*($52 + [376]) = ((CASTING uint_32)(uint_64 ((uint_64)$51 / (uint_64)(int_64)1000000)) + [60])
	*($52 + [412]) = [0]
	*(($27 = (($52 + [376]) + [40]))) = [0]
	*(($28 = ($52 + [420]))) = [0]
	*($52 + [424]) = [0]
	*(($52 + [428])) = [0]
	*((($52 + [376]) + [56])) = [0]
	$1 = ((uint_64)$1 / (uint_64)(int_64)1000000)
	if ( (*($52 + [444]) == 0) ){ goto $label$18 }
	$5 = (CASTING uint_32)(uint_64 $1)
	$48 = ((int_32)$4 > (int_32)[0])
	$6 = (CASTING float_64)(int_32 $4)
	$47 = ((float_64)$6 / (float_64)(float_64)10)
	$17 = ( ((float_64)$47 * (float_64)(float_64)0.98) ? $47 : $48 )
	$18 = ( (float_64)0.98 ? ( (float_64)-1 ? $6 : $4 ) : $48 )
	$16 = ($0 + [24])
	$15 = ($0 + [384])
	$14 = ($0 + [104])
	$10 = ($3 + [1])
	$13 = (($52 + [168]) | [1])
	$12 = (($52 + [200]) | [1])
	$11 = (($52 + [216]) | [1])
	$9 = (($52 + [64]) + [20])
	$8 = (($52 + [376]) + [36])
	$7 = (($52 + [344]) | [1])
	$48 = *($52 + [444])
	$29 = (($52 + [360]) + [8])
	$42 = (($52 + [64]) + [16])
	$43 = (($52 + [64]) + [32])
	$44 = ($52 + [112])
	$4 = (($52 + [64]) + [56])
	$45 = ($4 + [4])
	
.LOOP $label$20:
	if ( ((int_64)*($48 + [40]) != (int_64)*($52 + [472])) ){ goto $label$23 }
	$20 = *($48 + [16])
	$19 = *($48 + [8])
	$22 = *($48 + [32])
	$21 = *(($48 + [24]))
	*($29) = $21
	*($52 + [360]) = (int_64)0
	CALL eosio_assert([1], [288])
	$30 = ($22 & [255])
	$1 = (uint_64)*($29) >> (uint_64)(int_64)8)
	$48 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$25 }
	
.LOOP $label$26:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$48 = ($48 + [1])
	if ( ((int_32)$48 < (int_32)[7]) ){ goto $label$26 }
	
.LABEL $label$25
	$26 = [1]
	$48 = ($48 + [1])
	if ( ((int_32)$48 < (int_32)[7]) ){ goto $label$24 }
	goto $label$21 
	
.LABEL $label$23
	CALL $215(($52 + [440]))
	$48 = *($52 + [444])
	if ( $48 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$26 = [0]
	
.LABEL $label$21
	CALL eosio_assert($26, [352])
	if ( ((int_32)$30 == (int_32)[1]) ){ goto $label$28 }
	$46 = $6
	if ( $30 ){ goto $label$27 }
	$46 = $18
	goto $label$27 
	
.LABEL $label$28
	$46 = $17
	
.LABEL $label$27
	*(($30 = (($52 + [344]) + [8]))) = [0]
	*($52 + [344]) = (int_64)0
	$48 = CALL strlen([2592])
	if ( ((uint_32)$48 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$48 >= (uint_32)[11]) ){ goto $label$31 }
	*($52 + [344]) = ($48 << [1])
	$26 = $7
	if ( $48 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$39 = (($48 + [16]) & [-16])
	$26 = CALL $323($39)
	*($30) = $26
	*($52 + [344]) = ($39 | [1])
	*($52 + [348]) = $48
	
.LABEL $label$30
	CALL memcpy($26, [2592], $48)
	
.LABEL $label$29
	*(($26 + $48)) = [0]
	CALL $72(($52 + [336]), $0, $19, (int_64)0)
	$47 = (float_64)1
	if ( ((int_64)$21 == (int_64)1397703940) ){ goto $label$32 }
	*($52 + [480]) = $16
	*($52 + [496]) = $21
	CALL $67(($52 + [64]), ($52 + [480]), ($52 + [496]))
	$48 = *($52 + [68])
	if ( ($48 == 0) ){ goto $label$33 }
	if ( ((int_64)*($52 + [496]) != (int_64)*($48 + [16])) ){ goto $label$33 }
	$47 = *($48 + [32])
	goto $label$32 
	
.LABEL $label$33
	$47 = (float_64)1
	
.LABEL $label$32
	*($52 + [328]) = $47
	$1 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $20) * (float_64)$46))
	*($52 + [360]) = $1
	if ( ((int_64)((int_64)$1 + (int_64)$20) < (int_64)1) ){ goto $label$34 }
	CALL _ZNSt3__19to_stringEm(($52 + [232]), $2)
	$48 = CALL $334(($52 + [232]), [0], [2800])
	$26 = ($48 + [8])
	*(($31 = (($52 + [248]) + [8]))) = *($26)
	*($52 + [248]) = *($48)
	*($48) = [0]
	*(($48 + [4])) = [0]
	*($26) = [0]
	$48 = CALL $331(($52 + [248]), [2304])
	$26 = ($48 + [8])
	*(($32 = (($52 + [264]) + [8]))) = *($26)
	*($52 + [264]) = *($48)
	*($48) = [0]
	*(($48 + [4])) = [0]
	*($26) = [0]
	$48 = *($3)
	$26 = ($48 & [1])
	$48 = CALL $330(($52 + [264]), ( *(($3 + [8])) ? $10 : $26 ), ( *(($3 + [4])) ? uint_32($48 >> [1]) : $26 ))
	$26 = ($48 + [8])
	*(($33 = (($52 + [280]) + [8]))) = *($26)
	*($52 + [280]) = *($48)
	*($48) = [0]
	*(($48 + [4])) = [0]
	*($26) = [0]
	$48 = CALL $331(($52 + [280]), [2304])
	$26 = ($48 + [8])
	*(($34 = (($52 + [296]) + [8]))) = *($26)
	*($52 + [296]) = *($48)
	*($48) = [0]
	*(($48 + [4])) = [0]
	*($26) = [0]
	CALL _ZNSt3__19to_stringEi(($52 + [216]), $22)
	$48 = *($52 + [216])
	$26 = ($48 & [1])
	$35 = (($52 + [216]) + [8])
	$48 = CALL $330(($52 + [296]), ( *($35) ? $11 : $26 ), ( *($52 + [220]) ? uint_32($48 >> [1]) : $26 ))
	$26 = ($48 + [8])
	*(($36 = (($52 + [312]) + [8]))) = *($26)
	*($52 + [312]) = *($48)
	*($48) = [0]
	*(($48 + [4])) = [0]
	*($26) = [0]
	$48 = CALL $331(($52 + [312]), [2304])
	$26 = ($48 + [8])
	*(($37 = (($52 + [480]) + [8]))) = *($26)
	*($52 + [480]) = *($48)
	*($48) = [0]
	*(($48 + [4])) = [0]
	*($26) = [0]
	*((($52 + [184]) + [8])) = $21
	*((($52 + [48]) + [8])) = $21
	*($52 + [184]) = $20
	*($52 + [48]) = $20
	CALL $75(($52 + [200]), $0, ($52 + [48]))
	$48 = *($52 + [200])
	$26 = ($48 & [1])
	$38 = (($52 + [200]) + [8])
	$48 = CALL $330(($52 + [480]), ( *($38) ? $12 : $26 ), ( *($52 + [204]) ? uint_32($48 >> [1]) : $26 ))
	$26 = ($48 + [8])
	*(($39 = (($52 + [496]) + [8]))) = *($26)
	*($52 + [496]) = *($48)
	*($48) = [0]
	*(($48 + [4])) = [0]
	*($26) = [0]
	$48 = CALL $331(($52 + [496]), [2304])
	$26 = ($48 + [8])
	*(($40 = (($52 + [64]) + [8]))) = *($26)
	*($52 + [64]) = *($48)
	*($48) = [0]
	*(($48 + [4])) = [0]
	*($26) = [0]
	$1 = *($29)
	*((($52 + [152]) + [8])) = $1
	*((($52 + [32]) + [8])) = $1
	$1 = *($52 + [360])
	*($52 + [152]) = $1
	*($52 + [32]) = $1
	CALL $75(($52 + [168]), $0, ($52 + [32]))
	$48 = *($52 + [168])
	$26 = ($48 & [1])
	$41 = (($52 + [168]) + [8])
	$48 = CALL $330(($52 + [64]), ( *($41) ? $13 : $26 ), ( *($52 + [172]) ? uint_32($48 >> [1]) : $26 ))
	$26 = *($48)
	*($48) = [0]
	$23 = *($48 + [4])
	*($48 + [4]) = [0]
	$24 = *($48 + [8])
	*($48 + [8]) = [0]
	if ( (*($52 + [344]) & [1]) ){ goto $label$36 }
	*($52 + [344]) = [0]
	goto $label$35 
	
.LABEL $label$36
	*(*($30)) = [0]
	*($52 + [348]) = [0]
	
.LABEL $label$35
	CALL $328(($52 + [344]), [0])
	*($30) = $24
	*($52 + [344]) = $26
	*($52 + [348]) = $23
	if ( ((*($52 + [168]) & [1]) == 0) ){ goto $label$37 }
	CALL $324(*($41))
	
.LABEL $label$37
	if ( ((*($52 + [64]) & [1]) == 0) ){ goto $label$38 }
	CALL $324(*($40))
	
.LABEL $label$38
	if ( ((*($52 + [496]) & [1]) == 0) ){ goto $label$39 }
	CALL $324(*($39))
	
.LABEL $label$39
	if ( ((*($52 + [200]) & [1]) == 0) ){ goto $label$40 }
	CALL $324(*($38))
	
.LABEL $label$40
	if ( ((*($52 + [480]) & [1]) == 0) ){ goto $label$41 }
	CALL $324(*($37))
	
.LABEL $label$41
	if ( ((*($52 + [312]) & [1]) == 0) ){ goto $label$42 }
	CALL $324(*($36))
	
.LABEL $label$42
	if ( ((*($52 + [216]) & [1]) == 0) ){ goto $label$43 }
	CALL $324(*($35))
	
.LABEL $label$43
	if ( ((*($52 + [296]) & [1]) == 0) ){ goto $label$44 }
	CALL $324(*($34))
	
.LABEL $label$44
	if ( ((*($52 + [280]) & [1]) == 0) ){ goto $label$45 }
	CALL $324(*($33))
	
.LABEL $label$45
	if ( ((*($52 + [264]) & [1]) == 0) ){ goto $label$46 }
	CALL $324(*($32))
	
.LABEL $label$46
	if ( ((*($52 + [248]) & [1]) == 0) ){ goto $label$47 }
	CALL $324(*($31))
	
.LABEL $label$47
	if ( ((*($52 + [232]) & [1]) == 0) ){ goto $label$48 }
	CALL $324(*((($52 + [232]) + [8])))
	
.LABEL $label$48
	CALL eosio_assert(((int_64)*($29) == (int_64)$21), [1840])
	$1 = ((int_64)*($52 + [360]) + (int_64)$20)
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [1888])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [1920])
	CALL $345(($52 + [136]), ($52 + [344]))
	*($39) = $21
	*($52 + [496]) = $1
	*($52 + [480]) = $19
	if ( ((int_64)$1 < (int_64)1) ){ goto $label$49 }
	$1 = *($0)
	*($52 + [64]) = $0
	*($40) = ($52 + [496])
	*((($52 + [64]) + [12])) = ($52 + [136])
	*($52 + [68]) = ($52 + [480])
	CALL $198(($52 + [312]), $15, $1, ($52 + [64]))
	
.LABEL $label$49
	if ( ((*($52 + [136]) & [1]) == 0) ){ goto $label$50 }
	CALL $324(*((($52 + [136]) + [8])))
	
.LABEL $label$50
	$48 = *($52 + [340])
	*($52 + [68]) = ($52 + [328])
	*($52 + [64]) = ($52 + [360])
	CALL eosio_assert(((int_32)$48 != (int_32)[0]), [1216])
	CALL $222($14, $48, (int_64)0, ($52 + [64]))
	$51 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($52 + [360])) / (float_64)*($52 + [328])))
	CALL eosio_assert((uint_64)(((int_64)$51 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [288])
	$1 = (int_64)5459781
	$48 = [0]
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$54 }
	
.LOOP $label$55:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$52 }
	$48 = ($48 + [1])
	if ( ((int_32)$48 < (int_32)[7]) ){ goto $label$55 }
	
.LABEL $label$54
	$26 = [1]
	$48 = ($48 + [1])
	if ( ((int_32)$48 < (int_32)[7]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$52
	$26 = [0]
	
.LABEL $label$51
	CALL eosio_assert($26, [352])
	*($40) = (int_64)1397703940
	*((($52 + [16]) + [8])) = (int_64)1397703940
	*($52 + [64]) = $51
	*($52 + [16]) = $51
	CALL $216($0, (int_64)0, [3], ($52 + [16]))
	*($52 + [496]) = $5
	$48 = CALL gmtime(($52 + [496]))
	$1 = *($48 + [12])
	$26 = *($48 + [20])
	$48 = *($48 + [16])
	*($39) = (int_64)1397703940
	*(($52 + [8])) = (int_64)1397703940
	*($52 + [496]) = $51
	*($52) = $51
	CALL $216($0, ((int_64)((int_64)$1 + (int_64)((int_64)(CASTING int_64)(int_32 ($26 + [1900])) * (int_64)10000)) + (int_64)((int_64)(CASTING int_64)(int_32 ($48 + [1])) * (int_64)100)), [3], $52)
	
.LABEL $label$34
	$25 = *($0)
	$1 = (int_64)0
	$49 = (int_64)59
	$48 = [2864]
	$50 = (int_64)0
	
.LOOP $label$56:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$61 }
	$26 = *($48)
	if ( ((uint_32)(($26 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$60 }
	$26 = ($26 + [165])
	goto $label$59 
	
.LABEL $label$61
	$51 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$60
	$26 = ( ($26 + [208]) ? [0] : ((($26 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$59
	$51 = (int_64)((int_64)(CASTING uint_64)(uint_32 $26) << (int_64)56) >> (int_64)56)
	
.LABEL $label$58
	$51 = ((int_64)((int_64)$51 & (int_64)31) << (int_64)((int_64)$49 & (int_64)4294967295))
	
.LABEL $label$57
	$48 = ($48 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$50 = ((int_64)$51 | (int_64)$50)
	$49 = ((int_64)$49 + (int_64)-5)
	if ( ((int_64)$49 != (int_64)-6) ){ goto $label$56 }
	*(($39 = (($52 + [496]) + [8]))) = $50
	*($52 + [496]) = $25
	$1 = (int_64)0
	$49 = (int_64)59
	$48 = [3856]
	$50 = (int_64)0
	
.LOOP $label$62:
	if ( ((uint_64)$1 > (uint_64)(int_64)9) ){ goto $label$67 }
	$26 = *($48)
	if ( ((uint_32)(($26 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$26 = ($26 + [165])
	goto $label$65 
	
.LABEL $label$67
	$51 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$66
	$26 = ( ($26 + [208]) ? [0] : ((($26 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$65
	$51 = (int_64)((int_64)(CASTING uint_64)(uint_32 $26) << (int_64)56) >> (int_64)56)
	
.LABEL $label$64
	$51 = ((int_64)((int_64)$51 & (int_64)31) << (int_64)((int_64)$49 & (int_64)4294967295))
	
.LABEL $label$63
	$48 = ($48 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$50 = ((int_64)$51 | (int_64)$50)
	$49 = ((int_64)$49 + (int_64)-5)
	if ( ((int_64)$49 != (int_64)-6) ){ goto $label$62 }
	*($52 + [312]) = $50
	*($42) = $2
	*($52 + [64]) = $19
	*((($52 + [64]) + [8])) = *($52 + [472])
	CALL $345($9, $3)
	*((($52 + [64]) + [40])) = $20
	*($43) = $22
	*($44) = $21
	*(($4 + [12])) = *((($52 + [360]) + [12]))
	*(($4 + [8])) = *($29)
	*($45) = *($52 + [364])
	*($4) = *($52 + [360])
	$26 = *($27)
	if ( ((uint_32)$26 >= (uint_32)*($28)) ){ goto $label$71 }
	*($26 + [16 align=4]) = (int_64)0
	$1 = *($0)
	*($26 + [8]) = *($52 + [312])
	*($26) = $1
	*(($22 = ($26 + [24]))) = [0]
	$48 = CALL $323([16])
	*($26 + [16]) = $48
	$40 = ($48 + [16])
	*($22) = $40
	*(($48 + [8])) = *($39)
	*($48) = *($52 + [496])
	*(($26 + [20])) = $40
	*($26 + [28]) = [0]
	*(($39 = ($26 + [32]))) = [0]
	*(($26 + [36])) = [0]
	$48 = *($9)
	$22 = ( *((($52 + [64]) + [24])) ? uint_32($48 >> [1]) : ($48 & [1]) )
	$48 = ($22 + [53])
	$1 = (CASTING uint_64)(uint_32 $22)
	$26 = ($26 + [28])
	
.LOOP $label$72:
	$48 = ($48 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$72 }
	if ( ($48 == 0) ){ goto $label$70 }
	CALL $66($26, $48)
	$22 = *($39)
	$48 = *($26)
	goto $label$69 
	
.LABEL $label$71
	CALL $218($8, ($52 + [496]), $0, ($52 + [312]), ($52 + [64]))
	goto $label$68 
	
.LABEL $label$70
	$22 = [0]
	$48 = [0]
	
.LABEL $label$69
	*((($52 + [480]) + [8])) = $22
	*($52 + [484]) = $48
	*($52 + [480]) = $48
	*($52 + [280]) = ($52 + [480])
	*($52 + [296]) = ($52 + [64])
	CALL $217(($52 + [296]), ($52 + [280]))
	*($27) = (*($27) + [40])
	
.LABEL $label$68
	if ( ((*($9) & [1]) == 0) ){ goto $label$73 }
	CALL $324(*((($52 + [64]) + [28])))
	
.LABEL $label$73
	$1 = *($52 + [440])
	*($52 + [64]) = $1
	$48 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$48) != (int_32)[0]), [3568])
	CALL $215(($52 + [64]))
	CALL $219(*($52 + [448]), $48)
	*($52 + [440]) = *($52 + [64])
	if ( ((*($52 + [344]) & [1]) == 0) ){ goto $label$74 }
	CALL $324(*($30))
	
.LABEL $label$74
	$48 = *($52 + [444])
	if ( $48 ){ goto $label$20 }
	
.LABEL $label$19
	if ( ((int_32)*(($52 + [416])) == (int_32)*(($52 + [412]))) ){ goto $label$18 }
	CALL $68(($52 + [64]), $0)
	*($52 + [80]) = ((int_64)*($52 + [80]) + (int_64)1)
	CALL $95(($0 + [504]), ($52 + [64]), *($0))
	$1 = *($52 + [80])
	*($52 + [72]) = (int_64)0
	*($52 + [64]) = $1
	$1 = *($0)
	CALL $220(($52 + [496]), ($52 + [376]))
	$48 = *($52 + [496])
	CALL send_deferred(($52 + [64]), $1, $48, (*($52 + [500]) - $48), [0])
	$48 = *($52 + [496])
	if ( ($48 == 0) ){ goto $label$18 }
	*($52 + [500]) = $48
	CALL $324($48)
	
.LABEL $label$18
	CALL $221(($52 + [376]))
	goto $label$16 
	
.LABEL $label$17
	*($52 + [444]) = [0]
	*($52 + [440]) = ($52 + [448])
	
.LABEL $label$16
	*([0] + [4]) = ($52 + [512])
	return (unreachable)
	
.LABEL $label$15
	CALL $325(($52 + [344]))
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [96])
	*([0] + [4]) = $2
	*(($3 = $2) + [92]) = $0
	*($3 + [80]) = *($1)
	*($3 + [84]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $232(($3 + [8]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [4]) = ($3 + [80])
	*($3) = ($3 + [92])
	CALL $233($3, ($3 + [8]))
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$6 }
	CALL $324(*(($3 + [72])))
	
.LABEL $label$6
	*([0] + [4]) = ($3 + [96])
	return [1]
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

void .FUNC $167 (int_64 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	$3 = *($1 + [8])
	*($1 + [8]) = [0]
	$4 = *($1)
	*($1 + [4]) = [0]
	*($8 + [96]) = $4
	*($8 + [104]) = $3
	*($1) = [0]
	*($8) = *($2)
	*($8 + [8]) = *($2 + [8])
	*($8 + [16]) = *($2 + [16])
	$1 = ($2 + [20])
	*(($8 + [20])) = *($1)
	$3 = ($2 + [24])
	*(($8 + [24])) = *($3)
	*($3) = [0]
	$3 = ($2 + [28])
	$5 = *($3)
	*($3) = [0]
	*(($8 + [28])) = $5
	*($1) = [0]
	$1 = ($2 + [32])
	*(($8 + [32])) = *($1)
	$3 = ($2 + [36])
	*(($8 + [36])) = *($3)
	*($3) = [0]
	$3 = ($2 + [40])
	$5 = *($3)
	*($3) = [0]
	*(($8 + [40])) = $5
	*($1) = [0]
	$1 = ($2 + [44])
	*(($8 + [44])) = *($1)
	$3 = ($2 + [48])
	*(($8 + [48])) = *($3)
	*($3) = [0]
	$3 = ($2 + [52])
	$5 = *($3)
	*($3) = [0]
	*(($8 + [52])) = $5
	*($1) = [0]
	*($8 + [56]) = *($2 + [56])
	$1 = ($2 + [60])
	*(($8 + [60])) = *($1)
	$3 = ($2 + [64])
	*(($8 + [64])) = *($3)
	*($3) = [0]
	$3 = ($2 + [68])
	$5 = *($3)
	*($3) = [0]
	*(($8 + [68])) = $5
	*($1) = [0]
	$3 = ($2 + [72])
	*(($1 = ($8 + [72]))) = *($3)
	$5 = ($2 + [76])
	*(($8 + [76])) = *($5)
	*($5) = [0]
	$5 = ($2 + [80])
	$6 = *($5)
	*($5) = [0]
	*(($8 + [80])) = $6
	*($3) = [0]
	$5 = ($2 + [84])
	*(($3 = ($8 + [84]))) = *($5)
	$6 = ($2 + [88])
	*(($7 = ($8 + [88]))) = *($6)
	*($6) = [0]
	$2 = ($2 + [92])
	$6 = *($2)
	*($2) = [0]
	*(($8 + [92])) = $6
	*($5) = [0]
	CALL $176($0, (int_64)-7297973096368160768, ($8 + [96]), $8)
	$2 = *($3)
	if ( ($2 == 0) ){ goto $label$1 }
	*($7) = $2
	CALL $324($2)
	
.LABEL $label$1
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$2 }
	*(($8 + [76])) = $2
	CALL $324($2)
	
.LABEL $label$2
	$2 = *(($8 + [60]))
	if ( ($2 == 0) ){ goto $label$3 }
	*(($8 + [64])) = $2
	CALL $324($2)
	
.LABEL $label$3
	$2 = *(($8 + [44]))
	if ( ($2 == 0) ){ goto $label$4 }
	*(($8 + [48])) = $2
	CALL $324($2)
	
.LABEL $label$4
	$2 = *(($8 + [32]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($8 + [36])) = $2
	CALL $324($2)
	
.LABEL $label$5
	$2 = *(($8 + [20]))
	if ( ($2 == 0) ){ goto $label$6 }
	*(($8 + [24])) = $2
	CALL $324($2)
	
.LABEL $label$6
	$2 = *($8 + [96])
	if ( ($2 == 0) ){ goto $label$7 }
	*($8 + [100]) = $2
	CALL $324($2)
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [112])
}

int_32 .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*(($0 + [8])) = (int_64)0
	*($0 + [4]) = [0]
	*($0) = *($1)
	$2 = (*(($1 + [8])) - *($1 + [4]))
	$3 = ((int_32)$2 / (int_32)[44])
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[97612894]) ){ goto $label$3 }
	$2 = CALL $323($2)
	*(($0 + [4])) = $2
	*(($0 + [12])) = ($2 + ((int_32)$3 * (int_32)[44]))
	*(($3 = ($0 + [8]))) = $2
	$4 = *(($1 + [4]))
	$5 = (*(($1 + [8])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[44]) * (int_32)[44]))
	
.LABEL $label$4
	*($0 + [16 align=4]) = (int_64)0
	*(($0 + [24])) = [0]
	$2 = (*(($1 + [20])) - *($1 + [16]))
	$3 = ((int_32)$2 / (int_32)[24])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$2 }
	$2 = CALL $323($2)
	*(($0 + [16])) = $2
	*(($0 + [24])) = ($2 + ((int_32)$3 * (int_32)[24]))
	*(($3 = ($0 + [20]))) = $2
	$4 = *(($1 + [16]))
	$5 = (*(($1 + [20])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$5
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$2 = (*(($1 + [32])) - *($1 + [28]))
	$3 = int_32($2 >> [3])
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$1 }
	$2 = CALL $323($2)
	*(($0 + [28])) = $2
	*(($0 + [36])) = ($2 + ($3 << [3]))
	*(($3 = ($0 + [32]))) = $2
	$5 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $5)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $5, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$6
	return $0
	
.LABEL $label$3
	CALL $344(($0 + [4]))
	
.LABEL $label$2
	CALL $344(($0 + [16]))
	
.LABEL $label$1
	CALL $344(($0 + [28]))
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [80]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [768])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $323([96])
	$4 = CALL $162($6)
	*($6 + [84]) = $0
	CALL $165(($8 + [32]), $4)
	*($6 + [92]) = [-1]
	*($6 + [88]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [88])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $161(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $324($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $163 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	*($1) = *(*($0))
	*($1 + [8]) = *(*($0 + [4]))
	CALL eosio_assert([1], [288])
	$0 = [0]
	$2 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [352])
	*(($1 + [24])) = (int_64)1397703940
	*($1 + [16]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [352])
	*(($1 + [40])) = (int_64)1397703940
	*($1 + [32]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [352])
	*(($1 + [56])) = (int_64)1397703940
	*($1 + [48]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [352])
	*(($1 + [72])) = (int_64)1397703940
	*($1 + [64]) = (int_64)0
	*($1 + [80]) = [0]
}

int_32 .FUNC $162 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [16]) = (int_64)0
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [352])
	*(($2 = ($0 + [40]))) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [352])
	*(($2 = ($0 + [56]))) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [352])
	*(($2 = ($0 + [72]))) = (int_64)1398362884
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [352])
	return $0
}

void .FUNC $161 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $324($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $324($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $160 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	$4 = CALL $162($0)
	*($0 + [84]) = $1
	$1 = *($2)
	CALL $163(*($2 + [4]), $4)
	*($7 + [96]) = ($7 + [84])
	*($7 + [92]) = $7
	*($7 + [88]) = $7
	CALL $157(($7 + [88]), $4)
	$3 = *($0)
	*($0 + [88]) = CALL db_store_i64(*($1 + [8]), (int_64)-3020384829779738624, *(*($2 + [8])), $3, $7, [84])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($1 + [8]))
	$5 = *(*(($2 + [8])))
	$6 = *($0)
	*($7 + [104]) = *($0 + [8])
	*($0 + [92]) = CALL db_idx64_store($3, (int_64)-3020384829779738624, $5, $6, ($7 + [104]))
	*([0] + [4]) = ($7 + [112])
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)4982871454518345728, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)$4), [672])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $184($4, CALL $fimport$18(*($4), *($4 + [8]), (int_64)4982871454518345728, $5))
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)$4), [672])
	
.LABEL $label$4
	*(($2 + [80])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $169 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $323($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	*($9 + [52]) = [0]
	*(($8 = ($9 + [56]))) = [0]
	*(($9 + [60])) = [0]
	CALL $66(($9 + [52]), [49])
	$8 = *($8)
	$2 = *($9 + [52])
	*($9 + [84]) = $2
	*($9 + [80]) = $2
	*($9 + [88]) = $8
	*($9 + [64]) = ($9 + [80])
	*($9 + [72]) = $3
	CALL $174(($9 + [72]), ($9 + [64]))
	CALL $153(($9 + [80]), ($9 + [24]))
	$8 = *($9 + [80])
	CALL send_inline($8, (*($9 + [84]) - $8))
	$8 = *($9 + [80])
	if ( ($8 == 0) ){ goto $label$4 }
	*($9 + [84]) = $8
	CALL $324($8)
	
.LABEL $label$4
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($9 + [56])) = $8
	CALL $324($8)
	
.LABEL $label$5
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($9 + [44])) = $8
	CALL $324($8)
	
.LABEL $label$6
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [12]) = $8
	CALL $324($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $344(($9 + [8]))
}

void .FUNC $168 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $323($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	*($9 + [52]) = [0]
	*(($8 = (($9 + [24]) + [32]))) = [0]
	*(($9 + [60])) = [0]
	CALL $66(($9 + [52]), [32])
	$8 = *($8)
	$2 = *($9 + [52])
	*($9 + [84]) = $2
	*($9 + [80]) = $2
	*($9 + [88]) = $8
	*($9 + [64]) = ($9 + [80])
	*($9 + [72]) = $3
	CALL $175(($9 + [72]), ($9 + [64]))
	CALL $153(($9 + [80]), ($9 + [24]))
	$8 = *($9 + [80])
	CALL send_inline($8, (*($9 + [84]) - $8))
	$8 = *($9 + [80])
	if ( ($8 == 0) ){ goto $label$4 }
	*($9 + [84]) = $8
	CALL $324($8)
	
.LABEL $label$4
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($9 + [56])) = $8
	CALL $324($8)
	
.LABEL $label$5
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($9 + [44])) = $8
	CALL $324($8)
	
.LABEL $label$6
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [12]) = $8
	CALL $324($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $344(($9 + [8]))
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $323($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $344($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $324($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [568]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [572])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $324($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($0 + [568]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $324($4)
	
.LABEL $label$1
	$1 = *(($0 + [528]))
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($0 + [532])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $324($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($0 + [528]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $324($4)
	
.LABEL $label$6
	$1 = *(($0 + [488]))
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($0 + [492])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	CALL $324($2)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($0 + [488]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $324($4)
	
.LABEL $label$11
	$1 = *(($0 + [448]))
	if ( ($1 == 0) ){ goto $label$16 }
	$3 = ($0 + [452])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$20 }
	CALL $324($2)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$19 }
	$4 = *(($0 + [448]))
	goto $label$17 
	
.LABEL $label$18
	$4 = $1
	
.LABEL $label$17
	*($3) = $1
	CALL $324($4)
	
.LABEL $label$16
	$1 = *(($0 + [408]))
	if ( ($1 == 0) ){ goto $label$21 }
	$3 = ($0 + [412])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$25 }
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$26 }
	CALL $324(*(($2 + [40])))
	
.LABEL $label$26
	CALL $324($2)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$24 }
	$4 = *(($0 + [408]))
	goto $label$22 
	
.LABEL $label$23
	$4 = $1
	
.LABEL $label$22
	*($3) = $1
	CALL $324($4)
	
.LABEL $label$21
	$1 = *(($0 + [368]))
	if ( ($1 == 0) ){ goto $label$27 }
	$3 = ($0 + [372])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$29 }
	
.LOOP $label$30:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$31 }
	CALL $324($2)
	
.LABEL $label$31
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$30 }
	$4 = *(($0 + [368]))
	goto $label$28 
	
.LABEL $label$29
	$4 = $1
	
.LABEL $label$28
	*($3) = $1
	CALL $324($4)
	
.LABEL $label$27
	$1 = *(($0 + [328]))
	if ( ($1 == 0) ){ goto $label$32 }
	$3 = ($0 + [332])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$34 }
	
.LOOP $label$35:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$36 }
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$37 }
	CALL $324(*(($2 + [32])))
	
.LABEL $label$37
	CALL $324($2)
	
.LABEL $label$36
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$35 }
	$4 = *(($0 + [328]))
	goto $label$33 
	
.LABEL $label$34
	$4 = $1
	
.LABEL $label$33
	*($3) = $1
	CALL $324($4)
	
.LABEL $label$32
	$1 = *(($0 + [288]))
	if ( ($1 == 0) ){ goto $label$38 }
	$3 = ($0 + [292])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$40 }
	
.LOOP $label$41:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$42 }
	CALL $324($2)
	
.LABEL $label$42
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$41 }
	$4 = *(($0 + [288]))
	goto $label$39 
	
.LABEL $label$40
	$4 = $1
	
.LABEL $label$39
	*($3) = $1
	CALL $324($4)
	
.LABEL $label$38
	$1 = *(($0 + [248]))
	if ( ($1 == 0) ){ goto $label$43 }
	$3 = ($0 + [252])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$45 }
	
.LOOP $label$46:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$47 }
	CALL $324($2)
	
.LABEL $label$47
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$46 }
	$4 = *(($0 + [248]))
	goto $label$44 
	
.LABEL $label$45
	$4 = $1
	
.LABEL $label$44
	*($3) = $1
	CALL $324($4)
	
.LABEL $label$43
	$1 = *(($0 + [208]))
	if ( ($1 == 0) ){ goto $label$48 }
	$3 = ($0 + [212])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$50 }
	
.LOOP $label$51:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$52 }
	CALL $324($2)
	
.LABEL $label$52
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$51 }
	$4 = *(($0 + [208]))
	goto $label$49 
	
.LABEL $label$50
	$4 = $1
	
.LABEL $label$49
	*($3) = $1
	CALL $324($4)
	
.LABEL $label$48
	$1 = *(($0 + [168]))
	if ( ($1 == 0) ){ goto $label$53 }
	$3 = ($0 + [172])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$55 }
	
.LOOP $label$56:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$57 }
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$58 }
	CALL $324(*(($2 + [32])))
	
.LABEL $label$58
	CALL $324($2)
	
.LABEL $label$57
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$56 }
	$4 = *(($0 + [168]))
	goto $label$54 
	
.LABEL $label$55
	$4 = $1
	
.LABEL $label$54
	*($3) = $1
	CALL $324($4)
	
.LABEL $label$53
	$1 = *(($0 + [128]))
	if ( ($1 == 0) ){ goto $label$59 }
	$3 = ($0 + [132])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$61 }
	
.LOOP $label$62:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$63 }
	CALL $324($2)
	
.LABEL $label$63
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$62 }
	$4 = *(($0 + [128]))
	goto $label$60 
	
.LABEL $label$61
	$4 = $1
	
.LABEL $label$60
	*($3) = $1
	CALL $324($4)
	
.LABEL $label$59
	$1 = *(($0 + [88]))
	if ( ($1 == 0) ){ goto $label$64 }
	$3 = ($0 + [92])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$66 }
	
.LOOP $label$67:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$68 }
	CALL $324($2)
	
.LABEL $label$68
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$67 }
	$4 = *(($0 + [88]))
	goto $label$65 
	
.LABEL $label$66
	$4 = $1
	
.LABEL $label$65
	*($3) = $1
	CALL $324($4)
	
.LABEL $label$64
	$1 = *(($0 + [48]))
	if ( ($1 == 0) ){ goto $label$69 }
	$3 = ($0 + [52])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$71 }
	
.LOOP $label$72:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$73 }
	CALL $324($2)
	
.LABEL $label$73
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$72 }
	$4 = *(($0 + [48]))
	goto $label$70 
	
.LABEL $label$71
	$4 = $1
	
.LABEL $label$70
	*($3) = $1
	CALL $324($4)
	
.LABEL $label$69
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [288])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [352])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $62(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $63(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $324(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $345(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $345(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $324(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $324(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $241 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1664])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1712])
	*($1 + [8]) = (int_64)0
	$4 = *($1)
	CALL eosio_assert([1], [1776])
	CALL eosio_assert([1], [1648])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [1648])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1648])
	CALL memcpy(($5 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $5, [24])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

void .FUNC $87 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [96])
	*([0] + [4]) = $12
	*($12 + [88]) = $1
	*($12 + [80]) = $4
	*($12 + [72]) = ((uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) / (uint_64)*($0 + [8]))
	*($12 + [68]) = [0]
	if ( (*($7) & [1]) ){ goto $label$2 }
	$10 = ($7 + [1])
	goto $label$1 
	
.LABEL $label$2
	$10 = *($7 + [8])
	
.LABEL $label$1
	*(($12 + [64])) = [0]
	*($12 + [56]) = (int_64)0
	$8 = CALL strlen($10)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$7 }
	*($12 + [56]) = ($8 << [1])
	$11 = (($12 + [56]) | [1])
	if ( $8 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = (($8 + [16]) & [-16])
	$11 = CALL $323($9)
	*($12 + [56]) = ($9 | [1])
	*($12 + [64]) = $11
	*($12 + [60]) = $8
	
.LABEL $label$6
	CALL memcpy($11, $10, $8)
	
.LABEL $label$5
	*(($11 + $8)) = [0]
	if ( (*($7) & [1]) ){ goto $label$9 }
	$10 = ($7 + [1])
	goto $label$8 
	
.LABEL $label$9
	$10 = *($7 + [8])
	
.LABEL $label$8
	*(($12 + [8])) = [0]
	*($12) = (int_64)0
	$8 = CALL strlen($10)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$12 }
	*($12) = ($8 << [1])
	$11 = ($12 | [1])
	if ( $8 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$9 = (($8 + [16]) & [-16])
	$11 = CALL $323($9)
	*($12) = ($9 | [1])
	*($12 + [8]) = $11
	*($12 + [4]) = $8
	
.LABEL $label$11
	CALL memcpy($11, $10, $8)
	
.LABEL $label$10
	*(($11 + $8)) = [0]
	if ( (*($7) & [1]) ){ goto $label$14 }
	*($7) = [0]
	goto $label$13 
	
.LABEL $label$14
	*(*($7 + [8])) = [0]
	*($7 + [4]) = [0]
	
.LABEL $label$13
	CALL $328($7, [0])
	*($7) = *($12)
	*(($7 + [8])) = *(($12 + [8]))
	$8 = *($7)
	*($12 + [48]) = (int_64)0
	if ( ($8 & [1]) ){ goto $label$16 }
	$7 = ($7 + [1])
	goto $label$15 
	
.LABEL $label$16
	$7 = *($7 + [8])
	
.LABEL $label$15
	$4 = *($6)
	CALL $88($0, $7, $4, [0], ($12 + [68]), ($12 + [48]))
	$4 = ((int_64)$4 / (int_64)*($12 + [68]))
	CALL eosio_assert((((int_64)$4 <= (int_64)$3) & ((int_64)$4 >= (int_64)$2)), [1424])
	$1 = *($6 + [8])
	$4 = *($12 + [72])
	CALL $89(($12 + [40]), $0, *($0), $4, $1)
	CALL $89(($12 + [32]), $0, *($12 + [80]), $4, $1)
	$7 = *($12 + [44])
	*($12 + [4]) = $0
	*($12) = $6
	*($12 + [8]) = ($12 + [88])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1216])
	$8 = ($0 + [64])
	CALL $90($8, $7, (int_64)0, $12)
	$7 = *($12 + [44])
	CALL eosio_assert(((int_64)*(($7 + [32])) == (int_64)*(($7 + [48]))), [1456])
	CALL eosio_assert(((int_64)*($7 + [24]) <= (int_64)*($7 + [40])), [1520])
	$7 = *($12 + [36])
	*($12) = $6
	*($12 + [4]) = ($12 + [48])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1216])
	CALL $91($8, $7, (int_64)0, $12)
	$8 = *($12 + [44])
	$7 = *($12 + [36])
	CALL eosio_assert(((int_64)*(($7 + [48])) == (int_64)*(($8 + [48]))), [1456])
	CALL eosio_assert(((int_64)*($7 + [40]) <= (int_64)*($8 + [40])), [1552])
	$4 = *($0)
	*($12 + [4]) = $6
	*($12) = $0
	*($12 + [8]) = ($12 + [56])
	*($12 + [12]) = ($12 + [80])
	*($12 + [16]) = ($12 + [72])
	CALL $92(($12 + [24]), ($0 + [144]), $4, $12)
	if ( ((*($12 + [56]) & [1]) == 0) ){ goto $label$17 }
	CALL $324(*($12 + [64]))
	
.LABEL $label$17
	*([0] + [4]) = ($12 + [96])
	return (unreachable)
	
.LABEL $label$4
	CALL $325(($12 + [56]))
	
.LABEL $label$3
	CALL $325($12)
	(unreachable)
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$5 = [0]
	$2 = ( *($1 + [8]) ? ($1 + [1]) : (*($1) & [1]) )
	if ( CALL strncmp($2, [3408], [7]) ){ goto $label$2 }
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$3 = ($2 + [7])
	$5 = CALL strlen($3)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$5 }
	*($6) = ($5 << [1])
	$2 = ($6 | [1])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($5 + [16]) & [-16])
	$2 = CALL $323($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $2
	*($6 + [4]) = $5
	
.LABEL $label$4
	CALL memcpy($2, $3, $5)
	
.LABEL $label$3
	*(($2 + $5)) = [0]
	if ( (*($1) & [1]) ){ goto $label$7 }
	*($1) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($1 + [8]))) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$6
	CALL $328($1, [0])
	*(($1 + [8])) = *(($6 + [8]))
	*($1) = *($6)
	$5 = [1]
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [16])
	return $5
	
.LABEL $label$1
	CALL $325($6)
	return (unreachable)
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*($4 + [16]) = (int_64)1
	*($4 + [8]) = (int_64)1
	*($4 + [24]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)0
	$2 = ($1 + [504])
	$3 = *(($1 + [532]))
	if ( ((int_32)$3 == (int_32)*(($1 + [528]))) ){ goto $label$2 }
	$1 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$2), [672])
	if ( $1 ){ goto $label$1 }
	$1 = ($4 + [8])
	goto $label$1 
	
.LABEL $label$2
	$1 = CALL db_find_i64(*($2), *(($1 + [512])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $98($2, $1)
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$2), [672])
	goto $label$1 
	
.LABEL $label$3
	$1 = ($4 + [8])
	
.LABEL $label$1
	CALL memcpy($0, $1, [56])
	*([0] + [4]) = ($4 + [64])
}

int_32 .FUNC $248 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $249 (int_32 $0, int_64 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	$2 = *($0 + [12])
	$1 = ((int_64)$2 + (int_64)$1)
	if ( ((int_64)$1 > (int_64)1540353599) ){ goto $label$1 }
	*(($7 + [32])) = [0]
	*($7 + [16]) = (int_64)-1
	$3 = *($0)
	*($7) = $3
	$1 = ((uint_64)((uint_64)$1 / (uint_64)$2) % (uint_64)(int_64)100)
	*($7 + [8]) = $1
	*($7 + [24]) = (int_64)0
	*($7 + [36]) = [0]
	$0 = CALL db_lowerbound_i64($3, $1, (int_64)-5069073155046244352, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $251($7, $0)
	$5 = [1]
	
.LOOP $label$3:
	$6 = [0]
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [3568])
	CALL eosio_assert($4, [2048])
	$4 = CALL db_next_i64(*($0 + [60]), ($7 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $251($7, $4)
	
.LABEL $label$4
	CALL $262($7, $0)
	if ( ($6 == 0) ){ goto $label$2 }
	$4 = ((int_32)$5 < (int_32)[100])
	$5 = ($5 + [1])
	$0 = $6
	if ( $4 ){ goto $label$3 }
	
.LABEL $label$2
	$5 = *($7 + [24])
	if ( ($5 == 0) ){ goto $label$1 }
	$4 = ($7 + [28])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$8 }
	CALL $324($6)
	
.LABEL $label$8
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($7 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $5
	
.LABEL $label$5
	*($4) = $5
	CALL $324($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $246 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	CALL $97(*($1), ($0 + [8]))
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [48]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [56]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $247 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$7 = ((int_32)$1 != (int_32)[55])
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)$2 != (int_32)[55]) ){ goto $label$2 }
	if ( ((int_32)$3 != (int_32)[55]) ){ goto $label$2 }
	if ( ((int_32)$4 != (int_32)[55]) ){ goto $label$2 }
	$11 = [0]
	if ( ((int_32)$5 == (int_32)[55]) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $7 ){ goto $label$3 }
	if ( ((int_32)$2 == (int_32)[97]) ){ goto $label$4 }
	if ( ((int_32)$2 != (int_32)[55]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ((int_32)$3 == (int_32)[97]) ){ goto $label$5 }
	if ( ((int_32)$3 != (int_32)[55]) ){ goto $label$3 }
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)[97]) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[55]) ){ goto $label$3 }
	
.LABEL $label$6
	$11 = [1]
	if ( ((int_32)$5 == (int_32)[55]) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)[97]) ){ goto $label$1 }
	
.LABEL $label$3
	$11 = [2]
	$10 = ((int_32)$1 == (int_32)$4)
	$9 = ((int_32)$1 == (int_32)$3)
	$8 = ((int_32)$1 == (int_32)$2)
	$6 = ((((int_32)$1 != (int_32)[55]) & $8) & $9)
	$7 = ($6 & $10)
	if ( ((int_32)$7 != (int_32)[1]) ){ goto $label$7 }
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[55]) ){ goto $label$8 }
	if ( ((int_32)$1 == (int_32)[97]) ){ goto $label$8 }
	if ( ((int_32)($8 | ((int_32)$2 == (int_32)[97])) != (int_32)[1]) ){ goto $label$8 }
	if ( (($9 | ((int_32)$3 == (int_32)[97])) == 0) ){ goto $label$8 }
	if ( (($10 | ((int_32)$4 == (int_32)[97])) == 0) ){ goto $label$8 }
	if ( (((int_32)$1 == (int_32)$5) | ((int_32)$5 == (int_32)[97])) ){ goto $label$1 }
	
.LABEL $label$8
	if ( ((int_32)$1 != (int_32)[55]) ){ goto $label$9 }
	if ( ((int_32)$2 == (int_32)[97]) ){ goto $label$10 }
	if ( ((int_32)$2 != (int_32)[55]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( ((int_32)$3 == (int_32)[97]) ){ goto $label$12 }
	if ( ((int_32)$3 != (int_32)[55]) ){ goto $label$11 }
	
.LABEL $label$12
	$11 = [3]
	if ( ((int_32)$4 == (int_32)[55]) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)[97]) ){ goto $label$1 }
	
.LABEL $label$11
	if ( ((int_32)$2 == (int_32)[97]) ){ goto $label$13 }
	if ( ((int_32)$2 != (int_32)[55]) ){ goto $label$9 }
	
.LABEL $label$13
	$11 = [4]
	if ( ((int_32)$3 == (int_32)[55]) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)[97]) ){ goto $label$1 }
	
.LABEL $label$9
	$11 = [4]
	if ( $7 ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[55]) ){ goto $label$14 }
	if ( ((int_32)$1 == (int_32)[97]) ){ goto $label$14 }
	if ( ((int_32)($8 | ((int_32)$2 == (int_32)[97])) != (int_32)[1]) ){ goto $label$14 }
	if ( (($9 | ((int_32)$3 == (int_32)[97])) == 0) ){ goto $label$14 }
	if ( ($10 | ((int_32)$4 == (int_32)[97])) ){ goto $label$1 }
	
.LABEL $label$14
	$11 = ((((($1 + [-97]) & [255]) <= [6]) & ((($2 + [-97]) & [255]) <= [6])) & ((($3 + [-97]) & [255]) <= [6]))
	$10 = ($11 & ((($4 + [-97]) & [255]) <= [6]))
	$7 = ($10 & ((($5 + [-97]) & [255]) <= [6]))
	if ( (($6 | $7) == 0) ){ goto $label$15 }
	$11 = ( [5] ? [6] : $7 )
	goto $label$1 
	
.LABEL $label$15
	if ( ((int_32)$1 == (int_32)[55]) ){ goto $label$18 }
	if ( ((int_32)$1 != (int_32)[97]) ){ goto $label$17 }
	
.LABEL $label$18
	if ( ($11 == 0) ){ goto $label$16 }
	return ( [6] ? [7] : $10 )
	
.LABEL $label$17
	$7 = (($8 | ((int_32)$2 == (int_32)[97])) & ($9 | ((int_32)$3 == (int_32)[97])))
	if ( (($7 | $11) == 0) ){ goto $label$16 }
	return ( [6] ? ( [6] ? [7] : $10 ) : $7 )
	
.LABEL $label$16
	$11 = [9]
	if ( ((int_32)$1 == (int_32)[97]) ){ goto $label$1 }
	if ( ((uint_32)(($1 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$1 }
	if ( ((int_32)$2 == (int_32)[97]) ){ goto $label$19 }
	if ( ((uint_32)(($2 + [-48]) & [255]) <= (uint_32)[9]) ){ goto $label$19 }
	return [9]
	
.LABEL $label$19
	if ( ((int_32)$3 == (int_32)[97]) ){ goto $label$20 }
	if ( ((uint_32)(($3 + [-48]) & [255]) <= (uint_32)[9]) ){ goto $label$20 }
	return [9]
	
.LABEL $label$20
	if ( ((int_32)$4 == (int_32)[97]) ){ goto $label$21 }
	$11 = [9]
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$1 }
	
.LABEL $label$21
	return ( [8] ? ( [8] ? [9] : ((($5 + [-48]) & [255]) <= [10]) ) : ((int_32)$5 == (int_32)[97]) )
	
.LABEL $label$1
	return $11
}

void .FUNC $244 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [3616])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [3664])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [3728])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $324($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $324($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
	$7 = *(($1 + [56]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4293731249866407936, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $245 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [48]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $97(*($1), ($0 + [56]))
}

void .FUNC $242 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [144])
	*([0] + [4]) = $13
	$6 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$0 = [2864]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$6 }
	$7 = *($0)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$7 = ($7 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	$9 = (int_64)0
	$8 = (int_64)59
	$0 = [4080]
	$12 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$9 > (uint_64)(int_64)6) ){ goto $label$12 }
	$7 = *($0)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$7 = ($7 + [165])
	goto $label$10 
	
.LABEL $label$12
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$0 = ($0 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$12 = ((int_64)$11 | (int_64)$12)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$7 }
	*($13 + [8]) = $1
	CALL $345((($13 + [8]) + [8]), $2)
	*(($13 + [52])) = *(($4 + [12]))
	*(($13 + [48])) = *(($4 + [8]))
	*((($13 + [8]) + [36])) = *(($4 + [4]))
	*($13 + [32]) = $3
	*($13 + [40]) = *($4)
	*(($13 + [64])) = *(($5 + [8]))
	*($13 + [56]) = *($5)
	*($13 + [72]) = $6
	*($13 + [80]) = $12
	*(($0 = CALL $323([16]))) = $6
	*($0 + [8]) = $10
	*(($13 + [104])) = [0]
	$7 = ($0 + [16])
	*(($13 + [96])) = $7
	*(($13 + [92])) = $7
	*($13 + [88]) = $0
	*($13 + [100]) = [0]
	*((($13 + [72]) + [36])) = [0]
	$0 = *($13 + [16])
	$7 = ( *((($13 + [8]) + [12])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($7 + [48])
	$9 = (CASTING uint_64)(uint_32 $7)
	$7 = ($13 + [100])
	
.LOOP $label$13:
	$0 = ($0 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$13 }
	if ( ($0 == 0) ){ goto $label$15 }
	CALL $66($7, $0)
	$7 = *(($13 + [104]))
	$0 = *(($13 + [100]))
	goto $label$14 
	
.LABEL $label$15
	$7 = [0]
	$0 = [0]
	
.LABEL $label$14
	*($13 + [132]) = $0
	*($13 + [128]) = $0
	*($13 + [136]) = $7
	*($13 + [112]) = ($13 + [128])
	*($13 + [120]) = ($13 + [8])
	CALL $246(($13 + [120]), ($13 + [112]))
	CALL $153(($13 + [128]), ($13 + [72]))
	$0 = *($13 + [128])
	CALL send_inline($0, (*($13 + [132]) - $0))
	$0 = *($13 + [128])
	if ( ($0 == 0) ){ goto $label$16 }
	*($13 + [132]) = $0
	CALL $324($0)
	
.LABEL $label$16
	$0 = *($13 + [100])
	if ( ($0 == 0) ){ goto $label$17 }
	*(($13 + [104])) = $0
	CALL $324($0)
	
.LABEL $label$17
	$0 = *($13 + [88])
	if ( ($0 == 0) ){ goto $label$18 }
	*(($13 + [92])) = $0
	CALL $324($0)
	
.LABEL $label$18
	if ( ((*($13 + [16]) & [1]) == 0) ){ goto $label$19 }
	CALL $324(*(($13 + [24])))
	
.LABEL $label$19
	*([0] + [4]) = ($13 + [144])
}

void .FUNC $243 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$7 = ( $6 ? $9 : ($9 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	*(($3 = ($9 + [24]))) = [0]
	$2 = CALL $323([16])
	*($9 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $5
	*($9 + [28]) = [0]
	*(($5 = ($9 + [32]))) = [0]
	*(($9 + [36])) = [0]
	$2 = *($4 + [56])
	$1 = ( *(($4 + [60])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [52])
	$8 = (CASTING uint_64)(uint_32 $1)
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$1 = ($9 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $66($1, $2)
	$7 = *($5)
	$2 = *($1)
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($10 + [4]) = $2
	*($10) = $2
	*($10 + [8]) = $7
	*($10 + [16]) = $10
	*($10 + [24]) = $4
	$5 = ($9 + [40])
	CALL $245(($10 + [24]), ($10 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$9 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$10:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($4 = ($9 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($9 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$4 = $2
	
.LABEL $label$8
	*($0) = $9
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$11 }
	$1 = ([0] - $4)
	$9 = ($2 + [-24])
	
.LOOP $label$12:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($9 + [16])) = $2
	CALL $324($2)
	
.LABEL $label$13
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$14 }
	*(($9 + [4])) = $2
	CALL $324($2)
	
.LABEL $label$14
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($4 == 0) ){ goto $label$15 }
	CALL $324($4)
	
.LABEL $label$15
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

int_32 .FUNC $240 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$19 = [1]
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$7 = *($2 + [9])
	$6 = *($2 + [8])
	$5 = *($2 + [7])
	$4 = *($2 + [6])
	$3 = *($2 + [5])
	if ( ((int_32)$3 != (int_32)[55]) ){ goto $label$3 }
	if ( ((int_32)($4 & [255]) != (int_32)[55]) ){ goto $label$3 }
	if ( ((int_32)($5 & [255]) != (int_32)[55]) ){ goto $label$3 }
	if ( ((int_32)($6 & [255]) != (int_32)[55]) ){ goto $label$3 }
	if ( ((int_32)($7 & [255]) == (int_32)[55]) ){ goto $label$1 }
	
.LABEL $label$3
	if ( ((int_32)$1 < (int_32)[2]) ){ goto $label$2 }
	$19 = [1]
	$12 = *($2 + [14])
	$11 = *($2 + [13])
	$10 = *($2 + [12])
	$9 = *($2 + [11])
	$8 = *($2 + [10])
	$13 = (((int_32)$8 == (int_32)[55]) & ((int_32)$9 == (int_32)[55]))
	if ( ((int_32)$13 != (int_32)[1]) ){ goto $label$4 }
	if ( ((int_32)($10 & [255]) != (int_32)[55]) ){ goto $label$4 }
	if ( ((int_32)($11 & [255]) != (int_32)[55]) ){ goto $label$4 }
	if ( ((int_32)($12 & [255]) == (int_32)[55]) ){ goto $label$1 }
	
.LABEL $label$4
	if ( ((int_32)$1 < (int_32)[3]) ){ goto $label$2 }
	$19 = [1]
	$17 = *($2 + [4])
	$16 = *($2 + [3])
	$15 = *($2 + [2])
	$2 = *($2 + [1])
	$14 = *($2)
	$18 = (((int_32)$14 == (int_32)[55]) & ((int_32)$2 == (int_32)[55]))
	if ( ((int_32)$18 != (int_32)[1]) ){ goto $label$5 }
	if ( ((int_32)($15 & [255]) != (int_32)[55]) ){ goto $label$5 }
	if ( ((int_32)($16 & [255]) != (int_32)[55]) ){ goto $label$5 }
	if ( ((int_32)($17 & [255]) == (int_32)[55]) ){ goto $label$1 }
	
.LABEL $label$5
	if ( ((int_32)$1 < (int_32)[4]) ){ goto $label$2 }
	if ( ((int_32)$8 != (int_32)[55]) ){ goto $label$6 }
	if ( ((int_32)($4 & [255]) != (int_32)[55]) ){ goto $label$6 }
	if ( ((int_32)($15 & [255]) != (int_32)[55]) ){ goto $label$6 }
	if ( ((int_32)($6 & [255]) != (int_32)[55]) ){ goto $label$6 }
	if ( ((int_32)($12 & [255]) == (int_32)[55]) ){ goto $label$1 }
	
.LABEL $label$6
	if ( ((int_32)$1 < (int_32)[5]) ){ goto $label$2 }
	if ( ((int_32)$14 != (int_32)[55]) ){ goto $label$7 }
	if ( ((int_32)($4 & [255]) != (int_32)[55]) ){ goto $label$7 }
	if ( ((int_32)($10 & [255]) != (int_32)[55]) ){ goto $label$7 }
	if ( ((int_32)($6 & [255]) != (int_32)[55]) ){ goto $label$7 }
	if ( ((int_32)($17 & [255]) == (int_32)[55]) ){ goto $label$1 }
	
.LABEL $label$7
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$2 }
	if ( ((int_32)$3 != (int_32)[55]) ){ goto $label$8 }
	if ( ((int_32)$9 != (int_32)[55]) ){ goto $label$8 }
	if ( ((int_32)($10 & [255]) != (int_32)[55]) ){ goto $label$8 }
	if ( ((int_32)($11 & [255]) != (int_32)[55]) ){ goto $label$8 }
	if ( ((int_32)($7 & [255]) == (int_32)[55]) ){ goto $label$1 }
	
.LABEL $label$8
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$2 }
	if ( ((int_32)$3 != (int_32)[55]) ){ goto $label$9 }
	if ( ((int_32)$2 != (int_32)[55]) ){ goto $label$9 }
	if ( ((int_32)($15 & [255]) != (int_32)[55]) ){ goto $label$9 }
	if ( ((int_32)($16 & [255]) != (int_32)[55]) ){ goto $label$9 }
	if ( ((int_32)($7 & [255]) == (int_32)[55]) ){ goto $label$1 }
	
.LABEL $label$9
	if ( ((int_32)$1 < (int_32)[8]) ){ goto $label$2 }
	$19 = [1]
	if ( ((int_32)($13 & ((int_32)($5 & [255]) == (int_32)[55])) != (int_32)[1]) ){ goto $label$10 }
	if ( ((int_32)($16 & [255]) != (int_32)[55]) ){ goto $label$10 }
	if ( ((int_32)($17 & [255]) == (int_32)[55]) ){ goto $label$1 }
	
.LABEL $label$10
	if ( ((int_32)$1 < (int_32)[9]) ){ goto $label$2 }
	$19 = [1]
	if ( ((int_32)($18 & ((int_32)($5 & [255]) == (int_32)[55])) != (int_32)[1]) ){ goto $label$2 }
	if ( ((int_32)($11 & [255]) != (int_32)[55]) ){ goto $label$2 }
	if ( ((int_32)($12 & [255]) == (int_32)[55]) ){ goto $label$1 }
	
.LABEL $label$2
	$19 = [0]
	
.LABEL $label$1
	return $19
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $64(*($1), ($0 + [32]))
}

void .FUNC $84 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	*($7 + [56]) = $2
	$6 = CALL $132($0, $5)
	*($7 + [55]) = $6
	CALL $345(($7 + [32]), $5)
	$5 = CALL atoi(( *($7 + [40]) ? (($7 + [32]) | [1]) : (*($7 + [32]) & [1]) ))
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$1 }
	CALL $324(*(($7 + [40])))
	$6 = *($7 + [55])
	
.LABEL $label$1
	*($7 + [48]) = $5
	$6 = (int_32(($6 << [24]) >> [24]) + [-98])
	if ( ((uint_32)$6 > (uint_32)[19]) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$8
	CALL eosio_assert(($5 == 0), [2688])
	CALL eosio_assert(((float_64)(CASTING float_64)(int_64 $1) >= (float_64)((float_64)(CASTING float_64)(int_64 *($4)) * (float_64)(float_64)2.1777777777777776)), [2640])
	goto $label$2 
	
.LABEL $label$7
	CALL eosio_assert([0], [2720])
	goto $label$2 
	
.LABEL $label$6
	CALL eosio_assert((($5 + [-2]) <= [97]), [2608])
	CALL eosio_assert(((float_64)(CASTING float_64)(int_64 $1) >= (float_64)((float_64)(CASTING float_64)(int_64 *($4)) * (float_64)((float_64)(float_64)98 / (float_64)(float_64))((float_64)99 - (CASTING float_64)(int_32 *($7 + [48])))))), [2640])
	goto $label$2 
	
.LABEL $label$5
	CALL eosio_assert(($5 == 0), [2688])
	CALL eosio_assert(((float_64)(CASTING float_64)(int_64 $1) >= (float_64)((float_64)(CASTING float_64)(int_64 *($4)) * (float_64)(float_64)9.8)), [2640])
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert(($5 == 0), [2688])
	CALL eosio_assert(((float_64)(CASTING float_64)(int_64 $1) >= (float_64)((float_64)(CASTING float_64)(int_64 *($4)) * (float_64)(float_64)2.1777777777777776)), [2640])
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert((($5 + [-1]) <= [97]), [2656])
	CALL eosio_assert(((float_64)(CASTING float_64)(int_64 $1) >= (float_64)((float_64)(CASTING float_64)(int_64 *($4)) * (float_64)((float_64)(float_64)98 / (float_64)(CASTING float_64)(int_32 *($7 + [48]))))), [2640])
	
.LABEL $label$2
	$2 = *($0)
	*($7) = $0
	*($7 + [12]) = $4
	*($7 + [4]) = ($7 + [56])
	*($7 + [8]) = ($7 + [55])
	*($7 + [16]) = ($7 + [48])
	CALL $133(($7 + [24]), ($0 + [184]), $2, $7)
	*([0] + [4]) = ($7 + [64])
	$6
}

void .FUNC $199 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [3616])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [3664])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [3728])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL $324(*(($4 + [32])))
	
.LABEL $label$7
	CALL $324($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL $324(*(($4 + [32])))
	
.LABEL $label$10
	CALL $324($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC $83 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1584])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $323([64])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [352])
	*($4 + [48]) = $1
	CALL $137(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [52])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $138(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $324($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $82 (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$5 = *($2 + [8])
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [288])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [352])
	CALL eosio_assert([1], [1456])
	$6 = [0]
	$3 = *($2)
	$5 = ((int_64)$3 / (int_64)$1)
	if ( (int_64)($5 == 0) ){ goto $label$6 }
	if ( (uint_64)($5 <= (int_64)10) ){ goto $label$7 }
	CALL __multi3(($8 + [32]), $1, (int_64)$1 >> (int_64)63), (int_64)10, (int_64)0)
	$5 = *((($8 + [32]) + [8]))
	$1 = *($8 + [32])
	CALL eosio_assert(( (uint_64)($1 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [1984])
	CALL eosio_assert(( ((uint_64)$1 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [2016])
	CALL eosio_assert([1], [1456])
	$5 = ((int_64)$3 / (int_64)$1)
	if ( (uint_64)($5 <= (int_64)10) ){ goto $label$7 }
	CALL __multi3(($8 + [16]), $1, (int_64)$1 >> (int_64)63), (int_64)10, (int_64)0)
	$5 = *((($8 + [16]) + [8]))
	$1 = *($8 + [16])
	CALL eosio_assert(( (uint_64)($1 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [1984])
	CALL eosio_assert(( ((uint_64)$1 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [2016])
	CALL eosio_assert([1], [1456])
	$5 = ((int_64)$3 / (int_64)$1)
	if ( ((uint_64)$5 > (uint_64)(int_64)9) ){ goto $label$6 }
	
.LABEL $label$7
	CALL __multi3($8, $1, (int_64)$1 >> (int_64)63), $5, (int_64)$5 >> (int_64)63))
	$1 = *(($8 + [8]))
	$4 = *($8)
	CALL eosio_assert(( (uint_64)($4 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [1984])
	CALL eosio_assert(( ((uint_64)$4 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [2016])
	CALL eosio_assert([1], [1456])
	CALL eosio_assert(((int_64)$3 == (int_64)$4), [1376])
	$6 = (CASTING uint_32)(uint_64 $5)
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $149 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	*($1) = *(*($0))
	CALL eosio_assert([1], [288])
	$0 = [0]
	$2 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [352])
	*(($1 + [16])) = (int_64)1397703940
	*($1 + [8]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [352])
	*(($1 + [32])) = (int_64)1397703940
	*($1 + [24]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [352])
	*(($1 + [48])) = (int_64)1397703940
	*($1 + [40]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [352])
	*(($1 + [64])) = (int_64)1397703940
	*($1 + [56]) = (int_64)0
	*($1 + [72]) = [0]
	CALL eosio_assert([1], [288])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$3 = [0]
	
.LABEL $label$21
	CALL eosio_assert($3, [352])
	*(($1 + [88])) = (int_64)1397703940
	*($1 + [80]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	
.LOOP $label$30:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$30 }
	
.LABEL $label$29
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$3 = [0]
	
.LABEL $label$26
	CALL eosio_assert($3, [352])
	*(($1 + [104])) = (int_64)1397703940
	*($1 + [96]) = (int_64)0
	*($1 + [112]) = [0]
	CALL eosio_assert([1], [288])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$34 }
	
.LOOP $label$35:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$35 }
	
.LABEL $label$34
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$3 = [0]
	
.LABEL $label$31
	CALL eosio_assert($3, [352])
	*(($1 + [128])) = (int_64)1397703940
	*($1 + [120]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$39 }
	
.LOOP $label$40:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$40 }
	
.LABEL $label$39
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$3 = [0]
	
.LABEL $label$36
	CALL eosio_assert($3, [352])
	*(($1 + [144])) = (int_64)1397703940
	*($1 + [136]) = (int_64)0
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1664])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1712])
	$4 = *($1)
	$5 = ($1 + [16])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($5)), [1840])
	$6 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1888])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1920])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1776])
	CALL eosio_assert([1], [1648])
	CALL memcpy($7, $1, [8])
	CALL eosio_assert([1], [1648])
	CALL memcpy(($7 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1648])
	CALL memcpy(($7 + [16]), $5, [8])
	CALL db_update_i64(*($1 + [28]), $2, $7, [24])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $145 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [160])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [1664])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1712])
	$4 = *($1)
	CALL $146($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1776])
	*($5 + [152]) = ($5 + [144])
	*($5 + [148]) = $5
	*($5 + [144]) = $5
	CALL $147(($5 + [144]), $1)
	CALL db_update_i64(*($1 + [156]), $2, $5, [144])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [160])
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $65($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $328($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $323($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $328($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $324($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $325($7)
	return (unreachable)
}

int_32 .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [136]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $146 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = *($0)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [16]))), [1840])
	$2 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1888])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1920])
	$3 = *($0 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [48]))), [1840])
	$2 = ((int_64)*($1 + [40]) + (int_64)*($3))
	*($1 + [40]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1888])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [1920])
	$3 = *($0 + [8])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [64]))), [1840])
	$2 = ((int_64)*($1 + [56]) + (int_64)*($3))
	*($1 + [56]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1888])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [1920])
	$3 = *(*($0 + [12]))
	if ( ((int_32)$3 != (int_32)[1]) ){ goto $label$1 }
	*($1 + [112]) = (*($1 + [112]) + *(*($0 + [16])))
	$3 = *($0)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [128]))), [1840])
	$2 = ((int_64)*($1 + [120]) + (int_64)*($3))
	*($1 + [120]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1888])
	CALL eosio_assert(((int_64)*($1 + [120]) < (int_64)4611686018427387904), [1920])
	$3 = *(*(($0 + [12])))
	
.LABEL $label$1
	if ( $3 ){ goto $label$2 }
	*($1 + [72]) = (*($1 + [72]) + *(*($0 + [16])))
	$0 = *($0)
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*(($1 + [88]))), [1840])
	$2 = ((int_64)*($1 + [80]) + (int_64)*($0))
	*($1 + [80]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1888])
	CALL eosio_assert(((int_64)*($1 + [80]) < (int_64)4611686018427387904), [1920])
	
.LABEL $label$2
}

void .FUNC $141 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $324($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $324($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = *([0] + [4])
	$8 = $9
	$6 = *($0 + [4])
	*($1) = *(*($6))
	$2 = *($0)
	$3 = *(*($6 + [4]))
	CALL eosio_assert([1], [288])
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [352])
	*(($4 = ($1 + [16]))) = $3
	*($1 + [8]) = (int_64)0
	$6 = $9
	$7 = ($6 + [-32])
	*([0] + [4]) = $7
	CALL eosio_assert([1], [1648])
	CALL memcpy($7, $1, [8])
	CALL eosio_assert([1], [1648])
	CALL memcpy(($6 + [-24]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1648])
	CALL memcpy(($6 + [-16]), $4, [8])
	$5 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)8759794652103573504, *(*($0 + [8])), $5, $7, [24])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = $8
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [768])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $323([168])
	$4 = CALL $148($6)
	*($6 + [152]) = $0
	CALL $151(($8 + [32]), $4)
	*($6 + [156]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [156])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $150(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $324($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $142 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [288])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [352])
	*($0 + [24]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $278 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [768])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $323([64])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [288])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [352])
	*($4 + [48]) = $0
	CALL $279(($8 + [32]), $4)
	*($4 + [56]) = [-1]
	*($4 + [52]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [52])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $135($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $324($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $148 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [352])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [352])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [352])
	*(($2 = ($0 + [64]))) = (int_64)1398362884
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [352])
	*(($2 = ($0 + [88]))) = (int_64)1398362884
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$3 = [0]
	
.LABEL $label$21
	CALL eosio_assert($3, [352])
	*(($2 = ($0 + [104]))) = (int_64)1398362884
	*($0 + [96]) = (int_64)0
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	
.LOOP $label$30:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$30 }
	
.LABEL $label$29
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$3 = [0]
	
.LABEL $label$26
	CALL eosio_assert($3, [352])
	*(($2 = ($0 + [128]))) = (int_64)1398362884
	*($0 + [120]) = (int_64)0
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$34 }
	
.LOOP $label$35:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$35 }
	
.LABEL $label$34
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$3 = [0]
	
.LABEL $label$31
	CALL eosio_assert($3, [352])
	*(($2 = ($0 + [144]))) = (int_64)1398362884
	*($0 + [136]) = (int_64)0
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$39 }
	
.LOOP $label$40:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$40 }
	
.LABEL $label$39
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$3 = [0]
	
.LABEL $label$36
	CALL eosio_assert($3, [352])
	return $0
}

int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [768])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [36]) = $4
	*($7 + [32]) = $4
	*($7 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($5 = CALL $323([72])) + [56]) = $0
	CALL $103(($7 + [32]), $5)
	*($5 + [60]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)7235159537265672192
	$6 = *($5 + [60])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)7235159537265672192
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $102(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $324($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
	return $5
}

void .FUNC $99 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [80])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [1664])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1712])
	CALL memcpy($1, *($3), [56])
	CALL eosio_assert([1], [1776])
	*($4 + [72]) = ($4 + [56])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	CALL $101(($4 + [64]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, [56])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [80])
}

int_64 .FUNC $239 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	float_64 $5
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$1 }
	$5 = ((float_64)*(((CALL $247($0, *($2 + [5]), *($2 + [6]), *($2 + [7]), *($2 + [8]), *($2 + [9])) << [3]) + [4096])) + (float_64)(float_64)0)
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$2 }
	$5 = ((float_64)$5 + (float_64)*(((CALL $247($0, *($2 + [10]), *($2 + [11]), *($2 + [12]), *($2 + [13]), *($2 + [14])) << [3]) + [4096])))
	if ( ((int_32)$1 < (int_32)[3]) ){ goto $label$2 }
	$5 = ((float_64)$5 + (float_64)*(((CALL $247($0, *($2), *($2 + [1]), *($2 + [2]), *($2 + [3]), *($2 + [4])) << [3]) + [4096])))
	if ( ((int_32)$1 == (int_32)[3]) ){ goto $label$2 }
	$3 = ($2 + [8])
	$4 = ($2 + [6])
	$5 = ((float_64)$5 + (float_64)*(((CALL $247($0, *(($2 + [10])), *($4), *(($2 + [2])), *($3), *(($2 + [14]))) << [3]) + [4096])))
	if ( ((int_32)$1 < (int_32)[5]) ){ goto $label$2 }
	$4 = ($2 + [12])
	$5 = ((float_64)$5 + (float_64)*(((CALL $247($0, *($2), *($4), *($4), *($3), *(($2 + [4]))) << [3]) + [4096])))
	if ( ((int_32)$1 == (int_32)[5]) ){ goto $label$2 }
	$4 = ($2 + [9])
	$3 = ($2 + [5])
	$5 = ((float_64)$5 + (float_64)*(((CALL $247($0, *($3), *(($2 + [11])), *($4), *(($2 + [13])), *($4)) << [3]) + [4096])))
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$2 }
	$3 = ($2 + [3])
	$5 = ((float_64)$5 + (float_64)*(((CALL $247($0, *($3), *(($2 + [1])), *(($2 + [2])), *($3), *($4)) << [3]) + [4096])))
	if ( ((int_32)$1 == (int_32)[7]) ){ goto $label$2 }
	$4 = ($2 + [7])
	$5 = ((float_64)$5 + (float_64)*(((CALL $247($0, *(($2 + [10])), *(($2 + [11])), *($4), *($3), *(($2 + [4]))) << [3]) + [4096])))
	if ( ((int_32)$1 < (int_32)[9]) ){ goto $label$2 }
	$5 = ((float_64)$5 + (float_64)*(((CALL $247($0, *($2), *(($2 + [1])), *($4), *(($2 + [13])), *(($2 + [14]))) << [3]) + [4096])))
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	return (float_64)0
}

int_32 .FUNC $238 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [768])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $323([64])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [288])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [352])
	*($4 + [48]) = $0
	CALL $248(($8 + [32]), $4)
	*($4 + [56]) = [-1]
	*($4 + [52]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [52])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $138($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $324($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL $324(*(($1 + [32])))
	
.LABEL $label$11
	CALL $324($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $324($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $236 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $345($7, ($1 + [16]))
	$5 = *($1 + [40])
	$4 = *($1 + [32])
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$0 = (*(*($0)) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $345(($7 + [16]), $7)
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($7 + [16])), (int_32 $4), (int_64 $5), (int_32 $1))
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $324(*($7 + [24]))
	
.LABEL $label$2
	if ( ((*($7) & [1]) == 0) ){ goto $label$3 }
	CALL $324(*($7 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $97($0, ($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $234 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [800])
	CALL memcpy(($0 + [16]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [48]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $64(*($1), ($0 + [56]))
}

void .FUNC $233 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [160])
	*([0] + [4]) = $7
	*(($7 + [76])) = *(($1 + [36]))
	*(($5 = (($7 + [64]) + [8]))) = *(($1 + [32]))
	*($7 + [64]) = *($1 + [24])
	*($7 + [68]) = *(($1 + [28]))
	$4 = *($1 + [16])
	$3 = *($1 + [8])
	$2 = *($1)
	*(($6 = (($7 + [48]) + [8]))) = *(($1 + [48]))
	*($7 + [48]) = *($1 + [40])
	CALL $345(($7 + [32]), ($1 + [56]))
	*((($7 + [96]) + [8])) = *($6)
	*((($7 + [80]) + [8])) = *($5)
	*($7 + [96]) = *($7 + [48])
	*($7 + [80]) = *($7 + [64])
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($5 = (($7 + [144]) + [8]))) = *((($7 + [80]) + [8]))
	*(($6 = (($7 + [128]) + [8]))) = *((($7 + [96]) + [8]))
	*($7 + [144]) = *($7 + [80])
	*($7 + [128]) = *($7 + [96])
	CALL $345(($7 + [112]), ($7 + [32]))
	*((($7 + [16]) + [8])) = *($5)
	*(($7 + [8])) = *($6)
	*($7 + [16]) = *($7 + [144])
	*($7) = *($7 + [128])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $4), (int_32 ($7 + [16])), (int_32 $7), (int_32 ($7 + [112])), (int_32 $1))
	if ( ((*($7 + [112]) & [1]) == 0) ){ goto $label$2 }
	CALL $324(*($7 + [120]))
	
.LABEL $label$2
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $324(*($7 + [40]))
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [160])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [1664])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1712])
	*($7 + [72]) = *($1 + [16])
	$4 = *($1)
	$5 = *($3)
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*(($1 + [32]))), [1840])
	$6 = ((int_64)*($1 + [24]) + (int_64)*($5))
	*($1 + [24]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1888])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [1920])
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)*(*($3 + [4])))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1776])
	*($7 + [64]) = ($7 + [56])
	*($7 + [60]) = $7
	*($7 + [56]) = $7
	CALL $104(($7 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $7, [56])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($7 + [88]) = *(($1 + [16]))
	if ( (CALL memcmp(($7 + [72]), ($7 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [64])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8272103851780956784, ($7 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($7 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [96])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1584])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $323([80])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [352])
	*($4 + [32]) = [0]
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [64]) = $1
	CALL $93(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [68])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $94(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$9 }
	CALL $324(*(($3 + [32])))
	
.LABEL $label$9
	CALL $324($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $230 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [768])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $323([64])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [288])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [352])
	*($4 + [48]) = $0
	CALL $231(($8 + [32]), $4)
	*($4 + [56]) = [-1]
	*($4 + [52]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [52])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $130($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $324($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $144 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [176])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1584])
	$4 = CALL $323([168])
	$6 = CALL $148($4)
	*($4 + [152]) = $1
	CALL $149($3, $6)
	*($8 + [168]) = (($8 + [16]) + [144])
	*($8 + [164]) = ($8 + [16])
	*($8 + [160]) = ($8 + [16])
	CALL $147(($8 + [160]), $6)
	$5 = *($4)
	*($4 + [156]) = CALL db_store_i64(*($1 + [8]), (int_64)-4132858188709494784, $2, $5, ($8 + [16]), [144])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [160]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$3 = *($4 + [156])
	*($8 + [12]) = $3
	$7 = ($1 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($6 + [8]) = $5
	*($6 + [16]) = $3
	*($8 + [160]) = [0]
	*($6) = $4
	*($7) = ($6 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $150(($1 + [24]), ($8 + [160]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($8 + [160])
	*($8 + [160]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $324($1)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [176])
}

void .FUNC $192 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$2 = *($1)
	CALL $345($5, ($1 + [8]))
	$3 = *($1 + [20])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $345(($5 + [16]), $5)
	CALL void $0((int_32 $2), (int_64 ($5 + [16])), (int_32 $3), (int_32 $1))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $324(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $324(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $260 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	*($1) = *(*($0))
	CALL eosio_assert([1], [288])
	$0 = [0]
	$2 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [352])
	*(($1 + [16])) = (int_64)1397703940
	*($1 + [8]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [352])
	*(($1 + [32])) = (int_64)1397703940
	*($1 + [24]) = (int_64)0
	*($1 + [40]) = [0]
}

int_32 .FUNC $261 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $262 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [3616])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [3664])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [3728])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $324($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $324($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
	$7 = *(($1 + [64]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5069073155046244352, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC __gmtime_r (int_32 $0, int_32 $1)
{
	if ( ((int_32)CALL __secs_to_tm(*($0), $1) <= (int_32)[-1]) ){ goto $label$1 }
	*($1 + [40]) = [15952]
	*($1 + [32 align=4]) = (int_64)0
	return $1
	
.LABEL $label$1
	*(CALL __errno_location()) = [75]
	return [0]
}

void .FUNC $303 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [3616])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [3664])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [3728])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $324($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $324($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $302 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [768])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $323([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [800])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [800])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $305(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $324($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $301 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [768])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $323([64])
	$4 = CALL $306($6)
	*($6 + [48]) = $0
	CALL $307(($8 + [32]), $4)
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $308(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $324($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $263 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [1664])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1712])
	$4 = *($1 + [8])
	*($1 + [8]) = *(*($3))
	*($5 + [104]) = $4
	$4 = *($1)
	CALL eosio_assert([1], [1776])
	*($5 + [96]) = ($5 + [84])
	*($5 + [92]) = $5
	*($5 + [88]) = $5
	CALL $157(($5 + [88]), $1)
	CALL db_update_i64(*($1 + [88]), $2, $5, [84])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [120]) = *(($1 + [8]))
	if ( (CALL memcmp(($5 + [104]), ($5 + [120]), [8]) == 0) ){ goto $label$2 }
	$3 = *($1 + [92])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020384829779738624, ($5 + [112]), $4)
	*(($1 + [92])) = $3
	
.LABEL $label$3
	CALL db_idx64_update($3, $2, ($5 + [120]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [128])
}

int_32 .FUNC $307 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $306 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [16]) = (int_64)0
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [352])
	*(($2 = ($0 + [40]))) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [352])
	return $0
}

void .FUNC $305 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $324($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $324($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $304 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [3616])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [3664])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [3728])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $324($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $324($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC $309 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*($5 + [24]) = $2
	*($5 + [20]) = $3
	CALL eosio_assert(((int_32)$3 > (int_32)[-2]), [4736])
	$4 = ($1 + [344])
	CALL $314($0, $4, $2)
	$3 = *($0 + [4])
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	*($5 + [4]) = $1
	*($5) = ($5 + [24])
	CALL $315(($5 + [8]), $4, $2, $5)
	$2 = *($5 + [8])
	*($0) = $2
	$3 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32))
	
.LABEL $label$1
	if ( ((int_32)*($3 + [8]) > (int_32)*($1 + [20])) ){ goto $label$2 }
	$0 = *($0 + [4])
	*($5 + [8]) = ($5 + [20])
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [1216])
	CALL $316($4, $0, (int_64)0, ($5 + [8]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $308 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $324($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $324($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $282 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [800])
	CALL memcpy(($2 + [16]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $64(*($1), ($2 + [20]))
	*($4 + [8]) = $2
	CALL $283(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $268 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [160])
	*([0] + [4]) = $9
	*(($9 + [76])) = *(($1 + [36]))
	*(($7 = (($9 + [64]) + [8]))) = *(($1 + [32]))
	*($9 + [64]) = *($1 + [24])
	*($9 + [68]) = *(($1 + [28]))
	$4 = *($1 + [16])
	$3 = *($1 + [8])
	$2 = *($1)
	*(($8 = (($9 + [48]) + [8]))) = *(($1 + [48]))
	*($9 + [48]) = *($1 + [40])
	CALL $345(($9 + [32]), ($1 + [56]))
	$6 = *($1 + [72])
	$5 = *($1 + [68])
	*((($9 + [96]) + [8])) = *($8)
	*((($9 + [80]) + [8])) = *($7)
	*($9 + [96]) = *($9 + [48])
	*($9 + [80]) = *($9 + [64])
	$1 = *($0 + [4])
	$7 = *($1 + [4])
	$0 = (*(*($0)) + int_32($7 >> [1]))
	$1 = *($1)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($7 = (($9 + [144]) + [8]))) = *((($9 + [80]) + [8]))
	*(($8 = (($9 + [128]) + [8]))) = *((($9 + [96]) + [8]))
	*($9 + [144]) = *($9 + [80])
	*($9 + [128]) = *($9 + [96])
	CALL $345(($9 + [112]), ($9 + [32]))
	*((($9 + [16]) + [8])) = *($7)
	*(($9 + [8])) = *($8)
	*($9 + [16]) = *($9 + [144])
	*($9) = *($9 + [128])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $4), (int_32 ($9 + [16])), (int_32 $9), (int_32 ($9 + [112])), (int_32 $5), (int_32 $6), (int_32 $1))
	if ( ((*($9 + [112]) & [1]) == 0) ){ goto $label$2 }
	CALL $324(*($9 + [120]))
	
.LABEL $label$2
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $324(*($9 + [40]))
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [160])
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	$2 = *($0)
	$4 = *($0 + [4])
	$5 = *($4)
	CALL $68(($8 + [48]), $5)
	*($8 + [48]) = ((int_64)*($8 + [48]) + (int_64)1)
	CALL $95(($5 + [504]), ($8 + [48]), *($5))
	*($1) = *($8 + [48])
	*($1 + [8]) = *(*($4 + [4]))
	$5 = *($4 + [8])
	*($1 + [16]) = *($5)
	*(($1 + [24])) = *(($5 + [8]))
	*($1 + [32]) = *(*($4 + [12]))
	*($1 + [40]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000)
	*($8 + [56]) = ($8 + [41])
	*($8 + [52]) = $8
	*($8 + [48]) = $8
	CALL $131(($8 + [48]), $1)
	$3 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-7226809096302055936, *(*($0 + [8])), $3, $8, [41])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($2 + [8]))
	$6 = *(*(($0 + [8])))
	$7 = *($1)
	*($8 + [104]) = *(($1 + [40]))
	*($1 + [56]) = CALL db_idx64_store($3, (int_64)-7226809096302055936, $6, $7, ($8 + [104]))
	*([0] + [4]) = ($8 + [112])
}

int_32 .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $97($0, ($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $286 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [3616])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [3664])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [3728])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $324(*(($4 + [40])))
	
.LABEL $label$7
	CALL $324($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $324(*(($4 + [40])))
	
.LABEL $label$10
	CALL $324($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC $287 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [800])
	CALL memcpy(($0 + [8]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $64(*($1), ($0 + [40]))
}

void .FUNC $284 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [3616])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [3664])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [3728])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $324($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $324($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [88]))
	$7 = *($1 + [92])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020384829779738624, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $285 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$2 = *($1)
	CALL $345($4, ($1 + [8]))
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$1 = (*(*($0)) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL $345(($4 + [16]), $4)
	CALL void $1((int_32 $2), (int_64 ($4 + [16])), (int_32 $0))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $324(*($4 + [24]))
	
.LABEL $label$2
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL $324(*($4 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [32])
}

int_32 .FUNC $123 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = [0]
	*($3) = [0]
	*($2) = [0]
	$4 = CALL strlen($1)
	if ( ((int_32)*($1) != (int_32)[91]) ){ goto $label$1 }
	$5 = ($4 + [-1])
	if ( ((int_32)*(($1 + $5)) != (int_32)[93]) ){ goto $label$1 }
	*($2) = CALL malloc([1024])
	if ( ((int_32)$4 < (int_32)[2]) ){ goto $label$1 }
	$6 = [1]
	$7 = [1]
	
.LOOP $label$3:
	if ( ((int_32)*(($1 + $6)) != (int_32)[93]) ){ goto $label$5 }
	$9 = ($6 - $7)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$2 }
	$8 = CALL malloc(($9 + [1]))
	CALL memcpy($8, ($1 + $7), $9)
	*(($8 + $9)) = [0]
	$7 = *($3)
	$9 = ($7 + [1])
	*($3) = $9
	*((*($2) + ($7 << [2]))) = $8
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$1 }
	$8 = ($6 + [1])
	if ( ((int_32)*(($1 + $8)) != (int_32)[91]) ){ goto $label$2 }
	$9 = [0]
	if ( ((int_32)$8 >= (int_32)$5) ){ goto $label$1 }
	$7 = ($6 + [2])
	goto $label$4 
	
.LABEL $label$5
	$8 = $6
	
.LABEL $label$4
	$6 = ($8 + [1])
	if ( ((int_32)$6 < (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	return $9
}

int_32 .FUNC $122 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [60]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2208])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-8272103851780956784)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [2144])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2144])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $115(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $288 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	*(($6 + [44])) = *(($1 + [36]))
	*(($5 = (($6 + [32]) + [8]))) = *(($1 + [32]))
	*($6 + [32]) = *($1 + [24])
	*($6 + [36]) = *(($1 + [28]))
	$4 = *($1 + [16])
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $345(($6 + [16]), ($1 + [40]))
	*((($6 + [48]) + [8])) = *($5)
	*($6 + [48]) = *($6 + [32])
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($5 = (($6 + [80]) + [8]))) = *((($6 + [48]) + [8]))
	*($6 + [80]) = *($6 + [48])
	CALL $345(($6 + [64]), ($6 + [16]))
	*(($6 + [8])) = *($5)
	*($6) = *($6 + [80])
	CALL void $0((int_32 $2), (int_64 ($3 & [255])), (int_32 $4), (int_64 $6), (int_32 ($6 + [64])), (int_32 $1))
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $324(*($6 + [72]))
	
.LABEL $label$2
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $324(*($6 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $289 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [800])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [800])
	CALL memcpy(($2 + [1]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	CALL $64(*($1), ($2 + [4]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($2 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($4 + [8]) = $2
	CALL $291(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL $324(*(($1 + [32])))
	
.LABEL $label$11
	CALL $324($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $324($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $183 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = *($0 + [4])
	$6 = *($1)
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$5 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($5 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $7) > (int_32)[0]), [1648])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$7 = (*($4) + [1])
	*($4) = $7
	if ( $2 ){ goto $label$1 }
	$2 = ($0 + [8])
	$4 = [4]
	
.LOOP $label$2:
	CALL eosio_assert(((int_32)(*($2) - $7) > (int_32)[0]), [1648])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ($1 + $4), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[37]) ){ goto $label$2 }
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $125 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1584])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $323([80])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [352])
	*($4 + [32]) = [0]
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [64]) = $1
	CALL $126(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [68])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $127(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$9 }
	CALL $324(*(($3 + [32])))
	
.LABEL $label$9
	CALL $324($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = ($7 & [1])
	$7 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($7 >> [1]) : $7 )
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = ( *($2 + [8]) ? ($2 + [1]) : $7 )
	$7 = [0]
	$6 = ($3 & [255])
	
.LOOP $label$7:
	$3 = ($5 + $7)
	if ( ((int_32)*($3) == (int_32)$6) ){ goto $label$5 }
	$7 = ($7 + [1])
	if ( ($7 <= $4) ){ goto $label$7 }
	
.LABEL $label$6
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$7 = CALL strlen([2592])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$10 }
	*($0) = ($7 << [1])
	$5 = ($0 + [1])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$4 = (($7 + [16]) & [-16])
	$5 = CALL $323($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $7
	
.LABEL $label$9
	CALL memcpy($5, [2592], $7)
	
.LABEL $label$8
	*(($5 + $7)) = [0]
	goto $label$4 
	
.LABEL $label$5
	*($3) = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	$7 = CALL strlen($5)
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$13 }
	*($0) = ($7 << [1])
	$4 = ($0 + [1])
	if ( $7 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$6 = (($7 + [16]) & [-16])
	$4 = CALL $323($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $7
	
.LABEL $label$12
	CALL memcpy($4, $5, $7)
	
.LABEL $label$11
	*(($4 + $7)) = [0]
	*(($8 + [8])) = [0]
	*($8) = (int_64)0
	$4 = ($3 + [1])
	$7 = CALL strlen($4)
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$16 }
	*($8) = ($7 << [1])
	$5 = ($8 | [1])
	if ( $7 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$3 = (($7 + [16]) & [-16])
	$5 = CALL $323($3)
	*($8) = ($3 | [1])
	*($8 + [8]) = $5
	*($8 + [4]) = $7
	
.LABEL $label$15
	CALL memcpy($5, $4, $7)
	
.LABEL $label$14
	*(($5 + $7)) = [0]
	if ( (*($2) & [1]) ){ goto $label$18 }
	*($2) = [0]
	goto $label$17 
	
.LABEL $label$18
	*(*(($2 + [8]))) = [0]
	*(($2 + [4])) = [0]
	
.LABEL $label$17
	CALL $328($2, [0])
	*(($2 + [8])) = *(($8 + [8]))
	*($2) = *($8)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [16])
	return (unreachable)
	
.LABEL $label$3
	CALL $325($0)
	
.LABEL $label$2
	CALL $325($0)
	
.LABEL $label$1
	CALL $325($8)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1648])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[3]), [1648])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, [4])
	$6 = (*($4) + [4])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[1]), [1648])
	CALL memcpy(*($4), ($7 + [4]), [2])
	$6 = (*($4) + [2])
	*($4) = $6
	$7 = ($7 + [8])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $185 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $184 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [768])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $323([88])) + [72]) = $0
	CALL $185(($8 + [32]), $6)
	*($6 + [80]) = [-1]
	*($6 + [76]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [76])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $186(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $324($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $187 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [768])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $323([80])) + [56]) = [0]
	*($6 + [48 align=4]) = (int_64)0
	*($6 + [60]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [800])
	CALL memcpy($6, $4, [8])
	$3 = ($4 + [8])
	CALL eosio_assert(((uint_32)($7 - $3) > (uint_32)[31]), [800])
	CALL memcpy(($6 + [16]), $3, [32])
	*($8 + [36]) = ($4 + [40])
	CALL $64(($8 + [32]), ($6 + [48]))
	*($6 + [64]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [64])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $189(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$10 }
	CALL $324(*(($4 + [56])))
	
.LABEL $label$10
	CALL $324($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $186 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $324($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $324($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC __unlockfile (int_32 $0)
{
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

int_32 .FUNC __errno_location ()
{
	return [15884]
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $356([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $356($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $356($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

int_32 .FUNC $356 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [13360]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $360(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [13840]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [13872]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [13878] ? [13873] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [13842] ? [13840] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [13875]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $354()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [13840]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [13840]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [13824])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [13840])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [13856] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [13840]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [13936] ? [13952] : $30 ) ? ( [13904] ? [13920] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [13840]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [13841]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [13840] ? [13845] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [13824])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [13824])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [13824])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([13968], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([13968], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([13968], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $360(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $360(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $360(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $360(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $360(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $360(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $360(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $360(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $360(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_32 .FUNC snprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $3
	$3 = CALL vsnprintf($0, $1, $2, $3)
	*([0] + [4]) = ($4 + [16])
	return $3
}

int_32 .FUNC vsnprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	$5 = [-1]
	*($4 + [148]) = ( ($1 + [-1]) ? [0] : $1 )
	$0 = ( $0 ? ($4 + [158]) : $1 )
	*($4 + [144]) = $0
	*(($4 = CALL memset($4, [0], [144])) + [36]) = [25]
	*($4 + [75]) = [255]
	*($4 + [76]) = [-1]
	*($4 + [44]) = ($4 + [159])
	*($4 + [84]) = ($4 + [144])
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	*($0) = [0]
	$5 = CALL vfprintf($4, $2, $3)
	goto $label$1 
	
.LABEL $label$2
	*(CALL __errno_location()) = [75]
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [160])
	return $5
}

int_32 .FUNC $353 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0 + [28])
	$6 = (*($0 + [20]) - $4)
	$3 = *($0 + [84])
	$5 = *($3 + [4])
	$6 = ( $5 ? $6 : ($5 <= $6) )
	if ( ($6 == 0) ){ goto $label$1 }
	CALL memcpy(*($3), $4, $6)
	*($3) = (*($3) + $6)
	$5 = (*($5) - $6)
	*(($5 = ($3 + [4]))) = $5
	
.LABEL $label$1
	$6 = *($3)
	$5 = ( $5 ? $2 : ($5 <= $2) )
	if ( ($5 == 0) ){ goto $label$2 }
	CALL memcpy($6, $1, $5)
	$6 = (*($3) + $5)
	*($3) = $6
	*(($3 = ($3 + [4]))) = (*($3) - $5)
	
.LABEL $label$2
	*($6) = [0]
	$3 = *($0 + [44])
	*(($0 + [28])) = $3
	*(($0 + [20])) = $3
	return $2
}

void .FUNC $29 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [3424]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	$4 = *(($0 + [408]))
	$11 = *(($0 + [412]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$5 }
	$6 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$5 }
	$11 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [384])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$9 }
	$3 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)$6), [672])
	if ( $3 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$3 = CALL db_find_i64(*(($0 + [384])), *(($0 + [392])), (int_64)4407053710358740992, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	$3 = CALL $202($6, $3)
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)$6), [672])
	
.LABEL $label$8
	CALL eosio_assert([1], [3568])
	CALL eosio_assert([1], [2048])
	$11 = CALL db_next_i64(*($3 + [52]), ($12 + [8]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$10 }
	CALL $202($6, $11)
	
.LABEL $label$10
	CALL $286($6, $3)
	
.LABEL $label$7
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $310 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1648])
	CALL memcpy(*($0 + [4]), ($2 + [16]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $97(*($1), ($2 + [20]))
	*($4 + [8]) = $2
	CALL $313(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $311 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$7 = ( $6 ? $9 : ($9 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	*(($3 = ($9 + [24]))) = [0]
	$2 = CALL $323([16])
	*($9 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $5
	*($9 + [28]) = [0]
	*(($5 = ($9 + [32]))) = [0]
	*(($9 + [36])) = [0]
	$2 = *($4 + [20])
	$1 = ( *(($4 + [24])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [60])
	$8 = (CASTING uint_64)(uint_32 $1)
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$1 = ($9 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $66($1, $2)
	$7 = *($5)
	$2 = *($1)
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($10 + [4]) = $2
	*($10) = $2
	*($10 + [8]) = $7
	*($10 + [16]) = $10
	*($10 + [24]) = $4
	$5 = ($9 + [40])
	CALL $310(($10 + [24]), ($10 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$9 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$10:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($4 = ($9 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($9 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$4 = $2
	
.LABEL $label$8
	*($0) = $9
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$11 }
	$1 = ([0] - $4)
	$9 = ($2 + [-24])
	
.LOOP $label$12:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($9 + [16])) = $2
	CALL $324($2)
	
.LABEL $label$13
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$14 }
	*(($9 + [4])) = $2
	CALL $324($2)
	
.LABEL $label$14
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($4 == 0) ){ goto $label$15 }
	CALL $324($4)
	
.LABEL $label$15
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [3424]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	$4 = *($1)
	$2 = CALL strlen([4624])
	if ( ((int_32)$2 != (int_32)( *($1 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$10 }
	if ( (CALL $337($1, [0], [-1], [4624], $2) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$4 = *($1)
	$2 = ($1 + [4])
	$3 = CALL strlen([4640])
	if ( ((int_32)$3 != (int_32)( *($2) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$11 }
	if ( (CALL $337($1, [0], [-1], [4640], $3) == 0) ){ goto $label$8 }
	
.LABEL $label$11
	$4 = *($1)
	$3 = CALL strlen([4048])
	if ( ((int_32)$3 != (int_32)( *($2) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$12 }
	if ( (CALL $337($1, [0], [-1], [4048], $3) == 0) ){ goto $label$7 }
	
.LABEL $label$12
	$4 = *($1)
	$2 = ($1 + [4])
	$3 = CALL strlen([4656])
	if ( ((int_32)$3 != (int_32)( *($2) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$13 }
	if ( (CALL $337($1, [0], [-1], [4656], $3) == 0) ){ goto $label$6 }
	
.LABEL $label$13
	$4 = *($1)
	$3 = CALL strlen([4672])
	if ( ((int_32)$3 != (int_32)( *($2) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$5 }
	if ( CALL $337($1, [0], [-1], [4672], $3) ){ goto $label$5 }
	$4 = CALL db_lowerbound_i64(*($0 + [304]), *(($0 + [312])), (int_64)4147959691619784352, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$1 = ($0 + [304])
	$2 = CALL $197($1, $4)
	
.LOOP $label$14:
	CALL eosio_assert([1], [3568])
	CALL eosio_assert([1], [2048])
	$4 = [0]
	$0 = CALL db_next_i64(*($2 + [68]), ($9 + [8]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$15 }
	$4 = CALL $197($1, $0)
	
.LABEL $label$15
	CALL $199($1, $2)
	$2 = $4
	if ( $4 ){ goto $label$14 }
	goto $label$5 
	
.LABEL $label$9
	$4 = CALL db_lowerbound_i64(*($0 + [144]), *(($0 + [152])), (int_64)-6712989628304982016, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$1 = ($0 + [144])
	$2 = CALL $298($1, $4)
	
.LOOP $label$16:
	CALL eosio_assert([1], [3568])
	CALL eosio_assert([1], [2048])
	$4 = [0]
	$0 = CALL db_next_i64(*($2 + [68]), ($9 + [8]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$17 }
	$4 = CALL $298($1, $0)
	
.LABEL $label$17
	CALL $299($1, $2)
	$2 = $4
	if ( $4 ){ goto $label$16 }
	goto $label$5 
	
.LABEL $label$8
	$4 = CALL db_lowerbound_i64(*($0 + [184]), *(($0 + [192])), (int_64)5445039061531623424, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$1 = ($0 + [184])
	$2 = CALL $278($1, $4)
	
.LOOP $label$18:
	CALL eosio_assert([1], [3568])
	CALL eosio_assert([1], [2048])
	$4 = [0]
	$0 = CALL db_next_i64(*($2 + [52]), ($9 + [8]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$19 }
	$4 = CALL $278($1, $0)
	
.LABEL $label$19
	CALL $275($1, $2)
	$2 = $4
	if ( $4 ){ goto $label$18 }
	goto $label$5 
	
.LABEL $label$7
	$4 = CALL db_lowerbound_i64(*($0 + [224]), *(($0 + [232])), (int_64)-4293731249866407936, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$1 = ($0 + [224])
	$2 = CALL $238($1, $4)
	
.LOOP $label$20:
	CALL eosio_assert([1], [3568])
	CALL eosio_assert([1], [2048])
	$4 = [0]
	$0 = CALL db_next_i64(*($2 + [52]), ($9 + [8]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$21 }
	$4 = CALL $238($1, $0)
	
.LABEL $label$21
	CALL $244($1, $2)
	$2 = $4
	if ( $4 ){ goto $label$20 }
	goto $label$5 
	
.LABEL $label$6
	$4 = CALL db_lowerbound_i64(*($0 + [264]), *(($0 + [272])), (int_64)-7226809096302055936, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$1 = ($0 + [264])
	$2 = CALL $230($1, $4)
	
.LOOP $label$22:
	CALL eosio_assert([1], [3568])
	CALL eosio_assert([1], [2048])
	$4 = [0]
	$0 = CALL db_next_i64(*($2 + [52]), ($9 + [8]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$23 }
	$4 = CALL $230($1, $0)
	
.LABEL $label$23
	CALL $219($1, $2)
	$2 = $4
	if ( $4 ){ goto $label$22 }
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [800])
	CALL memcpy(($5 + [8]), $3, [4])
	$6 = *($5 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 $6), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC $23 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [3424]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	*(($9 + [32])) = [0]
	*($9 + [16]) = (int_64)-1
	*($9 + [24]) = (int_64)0
	$6 = *($0)
	*($9) = $6
	*($9 + [8]) = $6
	$4 = CALL db_find_i64($6, $6, (int_64)7615815668302086144, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $187($9, $4)
	CALL eosio_assert(((int_32)*($4 + [60]) == (int_32)$9), [672])
	CALL eosio_assert([1], [3568])
	CALL eosio_assert([1], [2048])
	$2 = CALL db_next_i64(*($4 + [64]), ($9 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	CALL $187($9, $2)
	
.LABEL $label$6
	CALL $297($9, $4)
	
.LABEL $label$5
	$0 = *($9 + [24])
	if ( ($0 == 0) ){ goto $label$7 }
	$3 = ($9 + [28])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$12 }
	CALL $324(*(($2 + [56])))
	
.LABEL $label$12
	CALL $324($2)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($9 + [24]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $0
	
.LABEL $label$8
	*($3) = $0
	CALL $324($4)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [48])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $64(($5 + [32]), $5)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	CALL $345(($5 + [16]), $5)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL $345(($5 + [32]), ($5 + [16]))
	CALL void $1((int_32 ($5 + [32])), (int_32 $4))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $324(*($5 + [40]))
	
.LABEL $label$6
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $324(*($5 + [24]))
	
.LABEL $label$7
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $324(*(($5 + [8])))
	
.LABEL $label$8
	*([0] + [4]) = ($5 + [48])
	return [1]
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_64 $4, float_64 $5, int_64 $6, int_64 $7, int_64 $8, int_64 $9)
{
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	*($10 + [111]) = $1
	*($10 + [110]) = $2
	*($10 + [96]) = $4
	*($10 + [88]) = $5
	*($10 + [80]) = $6
	*($10 + [72]) = $7
	*($10 + [64]) = $8
	*($10 + [56]) = $9
	$9 = (int_64)0
	$8 = (int_64)59
	$2 = [3424]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$2 = ($2 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($6)
	$9 = *($0)
	*($10 + [16]) = $0
	*($10 + [28]) = $3
	*($10 + [20]) = ($10 + [111])
	*($10 + [24]) = ($10 + [110])
	*($10 + [32]) = ($10 + [96])
	*($10 + [36]) = ($10 + [88])
	*($10 + [40]) = ($10 + [80])
	*($10 + [44]) = ($10 + [72])
	*($10 + [48]) = ($10 + [64])
	*($10 + [52]) = ($10 + [56])
	CALL $292(($10 + [8]), ($0 + [24]), $9, ($10 + [16]))
	*([0] + [4]) = ($10 + [112])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [800])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $27 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [80])
	*([0] + [4]) = $15
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [3424]
	$12 = (int_64)0
	
.LOOP $label$1:
	$13 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$2 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$6 = ($6 + [165])
	goto $label$3 
	
.LABEL $label$4
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$2
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($12)
	$7 = *(($0 + [408]))
	$14 = *(($0 + [412]))
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$5 }
	$9 = ($14 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$6:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$5 }
	$14 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [384])
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$9 }
	$9 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$6), [672])
	if ( $9 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$9 = CALL db_find_i64(*(($0 + [384])), *(($0 + [392])), (int_64)4407053710358740992, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $202($6, $9)
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$6), [672])
	
.LABEL $label$8
	$11 = *(($9 + [24]))
	$10 = *($9 + [16])
	$13 = *($9 + [8])
	$12 = *($0)
	CALL $345(($15 + [24]), ($9 + [32]))
	*($15 + [72]) = ($0 + [24])
	*($15 + [40]) = $11
	CALL $67(($15 + [56]), ($15 + [72]), ($15 + [40]))
	$14 = [0]
	$8 = *($15 + [60])
	if ( ($8 == 0) ){ goto $label$10 }
	$14 = ( $8 ? [0] : ((int_64)*($15 + [40]) == (int_64)*($8 + [16])) )
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [4560])
	*($15 + [56]) = $10
	*($15 + [64]) = $11
	$11 = *($14 + [24])
	CALL $345(($15 + [40]), ($15 + [24]))
	*(($15 + [16])) = *($15 + [64])
	*($15 + [8]) = *($15 + [56])
	CALL $76($0, $11, $12, $13, ($15 + [8]), ($15 + [40]))
	if ( ((*($15 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL $324(*($15 + [48]))
	
.LABEL $label$11
	if ( ((*($15 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL $324(*($15 + [32]))
	
.LABEL $label$12
	CALL eosio_assert([1], [3568])
	CALL eosio_assert([1], [2048])
	$14 = CALL db_next_i64(*($9 + [52]), ($15 + [56]))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$13 }
	CALL $202($6, $14)
	
.LABEL $label$13
	CALL $286($6, $9)
	
.LABEL $label$7
	*([0] + [4]) = ($15 + [80])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [112])
	*([0] + [4]) = $3
	*(($2 = $3) + [76]) = $0
	*($2 + [64]) = *($1)
	*($2 + [68]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($2) = [0]
	*($2 + [4 align=4]) = (int_64)0
	*($2 + [12]) = [0]
	*($2 + [16]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = (int_64)0
	*($2 + [84]) = $1
	*($2 + [80]) = $1
	*($2 + [88]) = ($1 + $0)
	*($2 + [96]) = ($2 + [80])
	*($2 + [104]) = $2
	CALL $289(($2 + [104]), ($2 + [96]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [84]) = ($2 + [64])
	*($2 + [80]) = ($2 + [76])
	CALL $290(($2 + [80]), $2)
	if ( ((*($2 + [4]) & [1]) == 0) ){ goto $label$5 }
	CALL $324(*(($2 + [12])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [112])
	return [1]
}

int_32 .FUNC $329 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $327($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

void .FUNC $328 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $323(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $324($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $193 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = [0]
	*((($0 = CALL memset($0, [0], [64])) + [16])) = (int_64)1398362884
	*($0 + [8]) = (int_64)0
	CALL eosio_assert([1], [288])
	$3 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [352])
	*(($0 + [32])) = [0]
	*($0 + [24]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*(($0 + [72])) = (int_64)1398362884
	CALL eosio_assert([1], [288])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [352])
	*($0 + [80]) = (int_64)0
	*(($0 + [88])) = (int_64)0
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $195(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $321 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [13238]) == 0) ){ goto $label$2 }
	$7 = *([0] + [13240])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [13238]) = [1]
	$7 = ($7 << [16])
	*([0] + [13240]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [13240])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [13240]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [13238]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [13238]) = [1]
	$3 = ($3 << [16])
	*([0] + [13240]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [13240])
	
.LABEL $label$8
	*([0] + [13240]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $320 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $321($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [13152])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $323 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [13244])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [13136])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [12944]
	$1 = (((int_32)$2 * (int_32)[12]) + [12944])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $325 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $324 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $327 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $323($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $324($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $326 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $327($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $100 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1584])
	*(($5 = CALL $323([72])) + [56]) = $1
	$3 = CALL memcpy($5, *($3), [56])
	*($7 + [88]) = (($7 + [16]) + [56])
	*($7 + [84]) = ($7 + [16])
	*($7 + [80]) = ($7 + [16])
	CALL $101(($7 + [80]), $3)
	*($3 + [60]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, ($7 + [16]), [56])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($7 + [80]) = $3
	*($7 + [16]) = (int_64)7235159537265672192
	$4 = *($3 + [60])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($5 + [8]) = (int_64)7235159537265672192
	*($5 + [16]) = $4
	*($7 + [80]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $102(($1 + [24]), ($7 + [80]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [80])
	*($7 + [80]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $324($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [96])
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $324($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $324($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	$2 = *($0 + [4])
	$3 = *($0)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [32]))), [1840])
	$4 = ((int_64)*($1 + [24]) + (int_64)*($3))
	*($1 + [24]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [1888])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [1920])
	if ( ((int_64)*($1 + [40]) != (int_64)0) ){ goto $label$1 }
	$4 = *(*($0) + [8])
	$7 = *(*($0 + [8]))
	$5 = *($2)
	*((($8 + [24]) + [32])) = [0]
	*($8 + [32]) = $5
	*($8 + [24]) = $7
	*($8 + [40]) = (int_64)-1
	*($8 + [48]) = (int_64)0
	$0 = CALL $106(($8 + [24]), (uint_64)$4 >> (uint_64)(int_64)8), [1952]
	$5 = *($0) + [8])
	$4 = *($0)
	$2 = *($8 + [48])
	if ( ($2 == 0) ){ goto $label$2 }
	$6 = ($8 + [52])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL $324($3)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($8 + [48]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $2
	
.LABEL $label$3
	*($6) = $2
	CALL $324($0)
	
.LABEL $label$2
	CALL __multi3(($8 + [8]), $4, (int_64)$4 >> (int_64)63), (int_64)5, (int_64)0)
	$4 = *(($8 + [16]))
	$7 = *($8 + [8])
	CALL eosio_assert(( (uint_64)($7 <= (int_64)4611686018427387904) ? ((int_64)$4 < (int_64)0) : (int_64)($4 == 0) ), [1984])
	CALL eosio_assert(( ((uint_64)$7 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$4 > (int_64)-1) : ((int_64)$4 == (int_64)-1) ), [2016])
	CALL eosio_assert([1], [1328])
	CALL eosio_assert([1], [1344])
	*(($1 + [48])) = $5
	*(($1 + [40])) = ((int_64)$7 / (int_64)100)
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [64])
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [768])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $323([32])
	$6 = CALL $108($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $109(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $324($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [112])
	*([0] + [4]) = $4
	*(($5 = $4) + [76]) = $0
	*($5 + [64]) = *($1)
	*($5 + [68]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [40])) = (int_64)1398362884
	*($5 + [16]) = [0]
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	CALL eosio_assert([1], [288])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [352])
	*(($5 + [56])) = [0]
	*($5 + [48]) = (int_64)0
	*($5 + [84]) = $0
	*($5 + [80]) = $0
	*($5 + [88]) = ($0 + $2)
	*($5 + [96]) = ($5 + [80])
	*($5 + [104]) = ($5 + [8])
	CALL $287(($5 + [104]), ($5 + [96]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [84]) = ($5 + [64])
	*($5 + [80]) = ($5 + [76])
	CALL $288(($5 + [80]), ($5 + [8]))
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$10 }
	CALL $324(*(($5 + [56])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [112])
	return [1]
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $324($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $324($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $108 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [288])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [352])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $318 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	*($1) = *(*($0))
	$2 = *($0 + [4])
	CALL eosio_assert([1], [288])
	$0 = [0]
	$3 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [352])
	*(($1 + [24])) = (int_64)1397703940
	*($1 + [16]) = (int_64)0
	CALL eosio_assert([1], [288])
	$3 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$4 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [352])
	*(($1 + [40])) = (int_64)1397703940
	*($1 + [32]) = (int_64)0
	*($1 + [8]) = *($2 + [20])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $320([4752], $0)
}

int_32 .FUNC $215 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [2048])
	$6 = *($0 + [4])
	$7 = *($6 + [56])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-7226809096302055936, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [56]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [672])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $230($2, CALL $fimport$18(*($2), *($2 + [8]), (int_64)-7226809096302055936, $3))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [672])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [56])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $214 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-7226809096302055936, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [672])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $230($4, CALL $fimport$18(*($4), *($4 + [8]), (int_64)-7226809096302055936, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [672])
	
.LABEL $label$4
	*(($2 + [56])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $217 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1648])
	CALL memcpy(*($0 + [4]), ($2 + [16]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $97(*($1), ($2 + [20]))
	*($4 + [8]) = $2
	CALL $227(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $216 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	*($8 + [4]) = $2
	*($8 + [24]) = $1
	$4 = *(($0 + [488]))
	$7 = *(($0 + [492]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	$2 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($2)) == (int_64)$1) ){ goto $label$1 }
	$7 = $2
	$6 = ($2 + [-24])
	$2 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [464])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$5 }
	$2 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [152]) == (int_32)$6), [672])
	if ( $2 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL db_find_i64(*(($0 + [464])), *(($0 + [472])), (int_64)-4132858188709494784, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $143($6, $2)
	CALL eosio_assert(((int_32)*($2 + [152]) == (int_32)$6), [672])
	goto $label$3 
	
.LABEL $label$4
	$1 = *($0)
	*($8 + [8]) = ($8 + [24])
	CALL $144(($8 + [16]), $6, $1, ($8 + [8]))
	$2 = *($8 + [20])
	
.LABEL $label$3
	*($8 + [24]) = $3
	*($8 + [28]) = ($8 + [4])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [1216])
	CALL $228($6, $2, (int_64)0, ($8 + [24]))
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $211 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [800])
	CALL memcpy(($2 + [16]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $64(*($1), ($2 + [20]))
	*($4 + [8]) = $2
	CALL $212(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $210 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [160])
	*([0] + [4]) = $8
	$4 = *($1 + [16])
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $345(($8 + [64]), ($1 + [20]))
	*(($8 + [60])) = *(($1 + [52]))
	*(($6 = (($8 + [48]) + [8]))) = *(($1 + [48]))
	*($8 + [52]) = *(($1 + [44]))
	*($8 + [48]) = *($1 + [40])
	$5 = *($1 + [32])
	*(($7 = (($8 + [32]) + [8]))) = *(($1 + [64]))
	*($8 + [32]) = *($1 + [56])
	*((($8 + [96]) + [8])) = *($7)
	*((($8 + [80]) + [8])) = *($6)
	*($8 + [96]) = *($8 + [32])
	*($8 + [80]) = *($8 + [48])
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$0 = (*(*($0)) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $345(($8 + [144]), ($8 + [64]))
	*(($6 = (($8 + [128]) + [8]))) = *((($8 + [80]) + [8]))
	*(($7 = (($8 + [112]) + [8]))) = *((($8 + [96]) + [8]))
	*($8 + [128]) = *($8 + [80])
	*($8 + [112]) = *($8 + [96])
	*((($8 + [16]) + [8])) = *($6)
	*($8 + [16]) = *($8 + [128])
	*(($8 + [8])) = *($7)
	*($8) = *($8 + [112])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $4), (int_32 ($8 + [144])), (int_32 int_32(($5 << [24]) >> [24])), (int_32 ($8 + [16])), (int_32 $8), (int_32 $1))
	if ( ((*($8 + [144]) & [1]) == 0) ){ goto $label$2 }
	CALL $324(*($8 + [152]))
	
.LABEL $label$2
	if ( ((*($8 + [64]) & [1]) == 0) ){ goto $label$3 }
	CALL $324(*($8 + [72]))
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [160])
}

void .FUNC $213 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $345($6, ($1 + [12]))
	$4 = *($1 + [24])
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $345(($6 + [16]), $6)
	CALL void $0((int_32 $2), (int_64 $3), (int_32 ($6 + [16])), (int_32 $4), (int_32 $1))
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $324(*($6 + [24]))
	
.LABEL $label$2
	if ( ((*($6) & [1]) == 0) ){ goto $label$3 }
	CALL $324(*($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $223 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $196 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $64($0, ($1 + [24]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [800])
	CALL memcpy(($1 + [48]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $197 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [768])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $323([80])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [288])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [352])
	*($4 + [32]) = [0]
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [64]) = $0
	CALL $196(($8 + [32]), $4)
	*($4 + [68]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [68])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $127($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$15 }
	CALL $324(*(($5 + [32])))
	
.LABEL $label$15
	CALL $324($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $194 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [224])
	*([0] + [4]) = $6
	*((($6 + [48]) + [16])) = *(($1 + [16]))
	*((($6 + [48]) + [8])) = *(($1 + [8]))
	*($6 + [48]) = *($1)
	$2 = (($6 + [48]) + [24])
	CALL $345($2, ($1 + [24]))
	*((($6 + [48]) + [56])) = *(($1 + [56]))
	*((($6 + [48]) + [48])) = *(($1 + [48]))
	*($6 + [88]) = *($1 + [40])
	*(($4 = (($6 + [32]) + [8]))) = *(($1 + [72]))
	*($6 + [32]) = *($1 + [64])
	CALL $345(($6 + [16]), ($1 + [80]))
	$3 = *($1 + [92])
	*((($6 + [112]) + [8])) = *($4)
	*($6 + [112]) = *($6 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$4 = (*(*($0)) + int_32($5 >> [1]))
	$1 = ($6 + [88])
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($4) + $0))
	
.LABEL $label$1
	*((($6 + [160]) + [16])) = *((($6 + [48]) + [16]))
	*((($6 + [160]) + [8])) = *((($6 + [48]) + [8]))
	*($6 + [160]) = *($6 + [48])
	$5 = ($6 + [184])
	CALL $345($5, $2)
	*(($6 + [216])) = *(($1 + [16]))
	*(($6 + [208])) = *(($1 + [8]))
	*($6 + [200]) = *($1)
	*(($1 = (($6 + [144]) + [8]))) = *((($6 + [112]) + [8]))
	*($6 + [144]) = *($6 + [112])
	CALL $345(($6 + [128]), ($6 + [16]))
	*(($6 + [8])) = *($1)
	*($6) = *($6 + [144])
	CALL void $4((int_32 ($6 + [160])), (int_32 $6), (int_32 ($6 + [128])), (int_32 $3), (int_32 $0))
	if ( ((*($6 + [128]) & [1]) == 0) ){ goto $label$2 }
	CALL $324(*($6 + [136]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $324(*(($6 + [192])))
	
.LABEL $label$3
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL $324(*($6 + [24]))
	
.LABEL $label$4
	if ( ((*(($6 + [72])) & [1]) == 0) ){ goto $label$5 }
	CALL $324(*(($6 + [80])))
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [224])
}

void .FUNC $195 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	CALL $196(*($1), *($0))
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($2 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [800])
	CALL memcpy(($2 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $64(*($1), ($2 + [80]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [800])
	CALL memcpy(($2 + [92]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $219 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [3616])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [3664])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [3728])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $324($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $324($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
	$7 = *(($1 + [56]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7226809096302055936, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $218 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$7 = ( $6 ? $9 : ($9 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	*(($3 = ($9 + [24]))) = [0]
	$2 = CALL $323([16])
	*($9 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $5
	*($9 + [28]) = [0]
	*(($5 = ($9 + [32]))) = [0]
	*(($9 + [36])) = [0]
	$2 = *($4 + [20])
	$1 = ( *(($4 + [24])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [53])
	$8 = (CASTING uint_64)(uint_32 $1)
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$1 = ($9 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $66($1, $2)
	$7 = *($5)
	$2 = *($1)
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($10 + [4]) = $2
	*($10) = $2
	*($10 + [8]) = $7
	*($10 + [16]) = $10
	*($10 + [24]) = $4
	$5 = ($9 + [40])
	CALL $217(($10 + [24]), ($10 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$9 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$10:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($4 = ($9 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($9 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$4 = $2
	
.LABEL $label$8
	*($0) = $9
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$11 }
	$1 = ([0] - $4)
	$9 = ($2 + [-24])
	
.LOOP $label$12:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($9 + [16])) = $2
	CALL $324($2)
	
.LABEL $label$13
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$14 }
	*(($9 + [4])) = $2
	CALL $324($2)
	
.LABEL $label$14
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($4 == 0) ){ goto $label$15 }
	CALL $324($4)
	
.LABEL $label$15
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $190 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1584])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $323([80])) + [56]) = [0]
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [60]) = $1
	CALL $191(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [64])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $189(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL $324(*(($3 + [56])))
	
.LABEL $label$4
	CALL $324($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $191 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	$7 = *($0 + [4])
	*($1) = *(*($7))
	$2 = *($0)
	$7 = *($7 + [4])
	*($1 + [16]) = *($7)
	*(($1 + [40])) = *(($7 + [24]))
	*(($1 + [32])) = *(($7 + [16]))
	*(($1 + [24])) = *(($7 + [8]))
	$3 = ($1 + [48])
	CALL $329($3, [2592])
	$7 = *($1 + [48])
	$4 = ( *(($1 + [52])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($4 + [40])
	$8 = (CASTING uint_64)(uint_32 $4)
	$4 = ($1 + [16])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$9 = CALL malloc($7)
	goto $label$2 
	
.LABEL $label$3
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$2
	*($10) = $9
	$5 = ($9 + $7)
	*($10 + [8]) = $5
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [1648])
	CALL memcpy($9, $1, [8])
	$6 = ($9 + [8])
	CALL eosio_assert(((int_32)($5 - $6) > (int_32)[31]), [1648])
	CALL memcpy($6, $4, [32])
	*($10 + [4]) = ($9 + [40])
	CALL $97($10, $3)
	$8 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($2 + [8]), (int_64)7615815668302086144, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$4 }
	CALL free($9)
	
.LABEL $label$4
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

int_32 .FUNC atoi (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$3 = *($0)
	$1 = int_32(($3 << [24]) >> [24])
	$2 = ($1 + [-9])
	$4 = ($0 + [1])
	$0 = $4
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$1 }
	$0 = $4
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$1 = [1]
	goto $label$4 
	
.LABEL $label$5
	$1 = [0]
	
.LABEL $label$4
	$3 = *($4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-1])
	$1 = [0]
	
.LABEL $label$2
	$2 = [0]
	$3 = (int_32(($3 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($4 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $3)
	$3 = *($0)
	$0 = ($0 + [1])
	$3 = ($3 + [-48])
	if ( ($3 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $1 )
}

int_64 .FUNC llabs (int_64 $0)
{
	int_64 $1
	$1 = (int_64)$0 >> (int_64)63
	return ((int_64)((int_64)$0 + (int_64)$1)) ^ (int_64)$1)
}

int_32 .FUNC sprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [12]) = $2
	$2 = CALL vsprintf($0, $1, $2)
	*([0] + [4]) = ($3 + [16])
	return $2
}

int_32 .FUNC vsprintf (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL vsnprintf($0, [2147483647], $1, $2)
}

void .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	*($4 + [15]) = *($0 + [48])
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [1648])
	CALL memcpy(*($3 + [4]), ($4 + [15]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $175 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $176 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $323($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	CALL $177(($9 + [52]), $3)
	CALL $153(($9 + [64]), ($9 + [24]))
	$8 = *($9 + [64])
	CALL send_inline($8, (*($9 + [68]) - $8))
	$8 = *($9 + [64])
	if ( ($8 == 0) ){ goto $label$4 }
	*($9 + [68]) = $8
	CALL $324($8)
	
.LABEL $label$4
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($9 + [56])) = $8
	CALL $324($8)
	
.LABEL $label$5
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($9 + [44])) = $8
	CALL $324($8)
	
.LABEL $label$6
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [12]) = $8
	CALL $324($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $344(($9 + [8]))
}

void .FUNC $177 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [16]
	*($4 + [8]) = $4
	*($4 + [20]) = ($1 + [20])
	*($4 + [16]) = ($1 + [16])
	*($4 + [24]) = ($1 + [32])
	*($4 + [28]) = ($1 + [44])
	CALL $178(($4 + [16]), ($4 + [8]))
	*($4 + [8]) = $4
	*($4 + [20]) = ($1 + [60])
	*($4 + [16]) = ($1 + [56])
	*($4 + [24]) = ($1 + [72])
	*($4 + [28]) = ($1 + [84])
	CALL $178(($4 + [16]), ($4 + [8]))
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $66($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [20]) = $0
	*($4 + [16]) = $0
	*($4 + [24]) = $3
	*($4) = ($4 + [16])
	*($4 + [8]) = $1
	CALL $179(($4 + [8]), $4)
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $170 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $323($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	*($9 + [52]) = [0]
	*((($9 + [24]) + [32])) = [0]
	*((($9 + [24]) + [36])) = [0]
	$8 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($9 + [52])
	
.LOOP $label$4:
	$8 = ($8 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($8 == 0) ){ goto $label$6 }
	CALL $66($2, $8)
	$2 = *(($9 + [56]))
	$8 = *(($9 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$8 = [0]
	
.LABEL $label$5
	*($9 + [84]) = $8
	*($9 + [80]) = $8
	*($9 + [88]) = $2
	*($9 + [64]) = ($9 + [80])
	*($9 + [72]) = $3
	CALL $152(($9 + [72]), ($9 + [64]))
	CALL $153(($9 + [80]), ($9 + [24]))
	$8 = *($9 + [80])
	CALL send_inline($8, (*($9 + [84]) - $8))
	$8 = *($9 + [80])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [84]) = $8
	CALL $324($8)
	
.LABEL $label$7
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$8 }
	*(($9 + [56])) = $8
	CALL $324($8)
	
.LABEL $label$8
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$9 }
	*(($9 + [44])) = $8
	CALL $324($8)
	
.LABEL $label$9
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$10 }
	*($9 + [12]) = $8
	CALL $324($8)
	
.LABEL $label$10
	*([0] + [4]) = ($9 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $344(($9 + [8]))
}

void .FUNC $171 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1584])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $323([96])
	CALL $172($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [88])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $161(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $324($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $172 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	$4 = CALL $162($0)
	*($0 + [84]) = $1
	$1 = *($2)
	CALL $173(*($2 + [4]), $4)
	*($7 + [96]) = ($7 + [84])
	*($7 + [92]) = $7
	*($7 + [88]) = $7
	CALL $157(($7 + [88]), $4)
	$3 = *($0)
	*($0 + [88]) = CALL db_store_i64(*($1 + [8]), (int_64)-3020384829779738624, *(*($2 + [8])), $3, $7, [84])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($1 + [8]))
	$5 = *(*(($2 + [8])))
	$6 = *($0)
	*($7 + [104]) = *($0 + [8])
	*($0 + [92]) = CALL db_idx64_store($3, (int_64)-3020384829779738624, $5, $6, ($7 + [104]))
	*([0] + [4]) = ($7 + [112])
	return $0
}

void .FUNC $173 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	*($1) = *(*($0))
	*($1 + [8]) = *(*($0 + [4]))
	CALL eosio_assert([1], [288])
	$0 = [0]
	$2 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [352])
	*(($1 + [24])) = (int_64)1397703940
	*($1 + [16]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [352])
	*(($1 + [40])) = (int_64)1397703940
	*($1 + [32]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [352])
	*(($1 + [56])) = (int_64)1397703940
	*($1 + [48]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [352])
	*(($1 + [72])) = (int_64)1397703940
	*($1 + [64]) = (int_64)0
	*($1 + [80]) = [0]
}

void .FUNC $178 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	*(($6 = *($1))) = (*($6) + [4])
	$5 = *($6)
	$6 = *($0 + [4])
	$3 = *($6 + [4])
	$7 = (CASTING uint_64)(uint_32 ((int_32)($3 - $5) / (int_32)[44]))
	$2 = *($1)
	$6 = *($2)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	*($2) = $6
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$6 = ($6 + [35])
	$7 = *($5)
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	$5 = ($5 + [44])
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$3 }
	*($2) = $6
	
.LABEL $label$2
	$3 = *($6)
	$6 = *($0 + [8])
	$5 = *($6 + [4])
	$4 = ($5 - $3)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$4 / (int_32)[24]))
	$2 = *($1)
	$6 = *($2)
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	$6 = ((((int_32)((uint_32)($4 + [-24]) / (uint_32)[24]) * (int_32)[18]) + $6) + [18])
	
.LABEL $label$6
	*($2) = $6
	$3 = *($6)
	$6 = *($0 + [12])
	$5 = *($6 + [4])
	$0 = ($5 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($0 >> [3]))
	$1 = *($1)
	$6 = *($1)
	
.LOOP $label$7:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = ((((int_32)uint_32(($0 + [-8]) >> [3]) * (int_32)[6]) + $6) + [6])
	
.LABEL $label$8
	*($1) = $6
}

void .FUNC $179 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($3 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1648])
	CALL memcpy(*($0 + [4]), ($3 + [16]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $180($0, ($3 + [20]))
	CALL $181($0, ($3 + [32]))
	CALL $182($0, ($3 + [44]))
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1648])
	CALL memcpy(*($0 + [4]), ($3 + [56]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $180($0, ($3 + [60]))
	CALL $181($0, ($3 + [72]))
	CALL $182($0, ($3 + [84]))
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [13984])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [14080]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [14080]
	return .LABEL $label$1
}

int_32 .FUNC $237 (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((int_32)CALL strlen($1) != (int_32)[15]) ){ goto $label$2 }
	$2 = *($1)
	if ( ((($2 + [-48]) & [255]) <= [10]) ){ goto $label$3 }
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = *($1 + [1])
	if ( ((($2 + [-48]) & [255]) <= [10]) ){ goto $label$4 }
	if ( ((uint_32)(($2 + [-97]) & [255]) >= (uint_32)[6]) ){ goto $label$2 }
	
.LABEL $label$4
	$2 = *($1 + [2])
	if ( ((($2 + [-48]) & [255]) <= [10]) ){ goto $label$5 }
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$2 }
	
.LABEL $label$5
	$2 = *($1 + [3])
	if ( ((($2 + [-48]) & [255]) <= [10]) ){ goto $label$6 }
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = *($1 + [4])
	if ( ((($2 + [-48]) & [255]) <= [10]) ){ goto $label$7 }
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$2 }
	
.LABEL $label$7
	$2 = *($1 + [5])
	if ( ((($2 + [-48]) & [255]) <= [10]) ){ goto $label$8 }
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$2 }
	
.LABEL $label$8
	$2 = *($1 + [6])
	if ( ((($2 + [-48]) & [255]) <= [10]) ){ goto $label$9 }
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = *($1 + [7])
	if ( ((($2 + [-48]) & [255]) <= [10]) ){ goto $label$10 }
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$2 }
	
.LABEL $label$10
	$2 = *($1 + [8])
	if ( ((($2 + [-48]) & [255]) <= [10]) ){ goto $label$11 }
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$2 }
	
.LABEL $label$11
	$2 = *($1 + [9])
	if ( ((($2 + [-48]) & [255]) <= [10]) ){ goto $label$12 }
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$2 }
	
.LABEL $label$12
	$2 = *($1 + [10])
	if ( ((($2 + [-48]) & [255]) <= [10]) ){ goto $label$13 }
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$2 }
	
.LABEL $label$13
	$2 = *($1 + [11])
	if ( ((($2 + [-48]) & [255]) <= [10]) ){ goto $label$14 }
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$2 }
	
.LABEL $label$14
	$2 = *($1 + [12])
	if ( ((($2 + [-48]) & [255]) <= [10]) ){ goto $label$15 }
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$2 }
	
.LABEL $label$15
	$2 = *($1 + [13])
	if ( ((($2 + [-48]) & [255]) <= [10]) ){ goto $label$1 }
	if ( ((uint_32)(($2 + [-97]) & [255]) <= (uint_32)[5]) ){ goto $label$1 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$1 = *($1 + [14])
	return (((($1 + [-48]) & [255]) <= [10]) | ((($1 + [-97]) & [255]) <= [6]))
}

void .FUNC $95 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [56]) == (int_32)$0), [672])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $98($0, $3)
	CALL eosio_assert(((int_32)*($3 + [56]) == (int_32)$0), [672])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [1216])
	CALL $99($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $100($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $235 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $64(*($1), ($2 + [16]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($2 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [800])
	CALL memcpy(($2 + [40]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $360 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1648])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1648])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [1664])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1712])
	*($5 + [72]) = *($1 + [16])
	$4 = *($1)
	CALL $105($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1776])
	*($5 + [64]) = ($5 + [56])
	*($5 + [60]) = $5
	*($5 + [56]) = $5
	CALL $104(($5 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [88]) = *(($1 + [16]))
	if ( (CALL memcmp(($5 + [72]), ($5 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [64])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8272103851780956784, ($5 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $86 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	*($10 + [56]) = $2
	*($10 + [48]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000)
	CALL $124(($10 + [32]), $0, $5, [44])
	$8 = CALL atoi(( *($10 + [40]) ? (($10 + [32]) | [1]) : (*($10 + [32]) & [1]) ))
	*($10 + [47]) = $8
	CALL eosio_assert((($8 & [254]) <= [10]), [2416])
	$8 = *($5)
	$6 = CALL strlen([2448])
	if ( ((int_32)$6 != (int_32)( *($5 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$4 }
	if ( (CALL $337($5, [0], [-1], [2448], $6) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = *($5)
	$6 = ($5 + [4])
	$7 = CALL strlen([2464])
	if ( ((int_32)$7 != (int_32)( *($6) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$5 }
	if ( (CALL $337($5, [0], [-1], [2464], $7) == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$8 = *($5)
	$7 = CALL strlen([2512])
	if ( ((int_32)$7 != (int_32)( *($6) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$6 }
	if ( (CALL $337($5, [0], [-1], [2512], $7) == 0) ){ goto $label$2 }
	
.LABEL $label$6
	$8 = *($5)
	$6 = ($5 + [4])
	$7 = CALL strlen([2528])
	if ( ((int_32)$7 != (int_32)( *($6) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$7 }
	if ( (CALL $337($5, [0], [-1], [2528], $7) == 0) ){ goto $label$2 }
	
.LABEL $label$7
	$8 = *($5)
	$7 = CALL strlen([2544])
	if ( ((int_32)$7 != (int_32)( *($6) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$8 }
	if ( (CALL $337($5, [0], [-1], [2544], $7) == 0) ){ goto $label$2 }
	
.LABEL $label$8
	CALL eosio_assert([0], [2560])
	goto $label$1 
	
.LABEL $label$3
	$2 = *($4)
	$9 = ((int_64)$2 % (int_64)$1)
	$8 = [0]
	if ( ((int_64)$2 < (int_64)$1) ){ goto $label$9 }
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$9 }
	$8 = ((int_64)$2 <= (int_64)((int_64)$1 * (int_64)10000))
	
.LABEL $label$9
	CALL eosio_assert($8, [2480])
	goto $label$1 
	
.LABEL $label$2
	$1 = ((int_64)$1 / (int_64)10)
	$2 = *($4)
	$9 = ((int_64)$2 % (int_64)$1)
	$8 = [0]
	if ( ((int_64)$2 < (int_64)$1) ){ goto $label$10 }
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$10 }
	$8 = ((int_64)$2 <= (int_64)((int_64)$1 * (int_64)10000))
	
.LABEL $label$10
	CALL eosio_assert($8, [2480])
	
.LABEL $label$1
	$1 = *($0)
	*($10 + [4]) = $4
	*($10) = $0
	*($10 + [8]) = $5
	*($10 + [12]) = ($10 + [56])
	*($10 + [16]) = ($10 + [48])
	*($10 + [20]) = ($10 + [47])
	CALL $125(($10 + [24]), ($0 + [304]), $1, $10)
	if ( ((*($10 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $324(*(($10 + [40])))
	
.LABEL $label$11
	*([0] + [4]) = ($10 + [64])
}

void .FUNC $232 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	$4 = [0]
	*($0 + [16]) = [0]
	*($0 + [24]) = (int_64)0
	*(($0 + [32])) = (int_64)1398362884
	CALL eosio_assert([1], [288])
	$3 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [352])
	*(($0 + [48])) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [288])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [352])
	*(($0 + [64])) = [0]
	*($0 + [56 align=4]) = (int_64)0
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $234(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $231 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [800])
	CALL memcpy(($1 + [32]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$2 = *($0)
	$5 = *($0 + [4])
	$7 = *($5)
	$8 = $9
	CALL $68($8, $7)
	*($8) = ((int_64)*($8) + (int_64)1)
	CALL $95(($7 + [504]), $8, *($7))
	*($1) = *($8)
	$7 = *($5 + [4])
	*($1 + [8]) = *($7)
	*(($1 + [16])) = *(($7 + [8]))
	CALL $326(($1 + [24]), *($5 + [8]))
	*($1 + [48]) = *(*($5 + [12]))
	*($1 + [40]) = *(*($5 + [16]))
	*($1 + [56]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000)
	$5 = *($1 + [24])
	$7 = ( *(($1 + [28])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [48])
	$6 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($5)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	CALL $96($8, $1)
	$6 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($2 + [8]), (int_64)-6712989628304982016, *(*($0 + [8])), $6, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$6 = *(($2 + [8]))
	$3 = *(*(($0 + [8])))
	$4 = *($1)
	*($8 + [56]) = *(($1 + [40]))
	*($1 + [72]) = CALL db_idx64_store($6, (int_64)-6712989628304982016, $3, $4, ($8 + [56]))
	*([0] + [4]) = ($8 + [64])
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [912])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $66($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [800])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $85 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1584])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $323([64])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [352])
	*($4 + [48]) = $1
	CALL $129(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [52])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $130(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $324($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $58 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [3424]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	*(($10 + [40])) = [0]
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	$6 = *($0)
	*($10 + [8]) = $6
	*($10 + [16]) = $6
	$4 = [0]
	$3 = CALL db_find_i64($6, $6, (int_64)7615815668302086144, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $187(($10 + [8]), $3)
	CALL eosio_assert(((int_32)*($4 + [60]) == (int_32)($10 + [8])), [672])
	
.LABEL $label$5
	$3 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($3, [3440])
	$0 = *($2)
	if ( ($0 & [1]) ){ goto $label$7 }
	$0 = uint_32($0 >> [1])
	$9 = ($2 + [1])
	goto $label$6 
	
.LABEL $label$7
	$0 = *($2 + [4])
	$9 = *($2 + [8])
	
.LABEL $label$6
	CALL assert_sha256($9, $0, ($4 + [16]))
	*($10) = $2
	CALL eosio_assert($3, [1216])
	CALL $188(($10 + [8]), $4, (int_64)0, $10)
	$2 = *($10 + [32])
	if ( ($2 == 0) ){ goto $label$8 }
	$0 = ($10 + [36])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$12 }
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$13 }
	CALL $324(*(($3 + [56])))
	
.LABEL $label$13
	CALL $324($3)
	
.LABEL $label$12
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$11 }
	$4 = *(($10 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$4 = $2
	
.LABEL $label$9
	*($0) = $2
	CALL $324($4)
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $59 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	$21 = (*([0] + [4]) - [688])
	*([0] + [4]) = $21
	*($21 + [584]) = ($0 + [24])
	*($21 + [672]) = *($3 + [8])
	CALL $67(($21 + [520]), ($21 + [584]), ($21 + [672]))
	$16 = *($21 + [524])
	if ( ($16 == 0) ){ goto $label$3 }
	if ( ((int_64)*($21 + [672]) != (int_64)*($16 + [16])) ){ goto $label$2 }
	$18 = *($21 + [520])
	*($21 + [576]) = $18
	$16 = (CASTING uint_32)(uint_64 (uint_64)$18 >> (uint_64)(int_64)32))
	$5 = (($21 + [576]) | [4])
	goto $label$1 
	
.LABEL $label$3
	$16 = [0]
	*($21 + [580]) = [0]
	*($21 + [576]) = ($21 + [584])
	$5 = (($21 + [576]) | [4])
	goto $label$1 
	
.LABEL $label$2
	$16 = [0]
	*($21 + [580]) = [0]
	*($21 + [576]) = ($21 + [584])
	$5 = (($21 + [576]) | [4])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [928])
	CALL eosio_assert(((int_64)*(*($5) + [24]) == (int_64)*($0 + [584])), [960])
	CALL eosio_assert(((int_64)*(*($5) + [16]) == (int_64)*(($3 + [8]))), [992])
	CALL eosio_assert(((int_32)*(*($5) + [8]) == (int_32)[1]), [1024])
	$16 = *($4)
	$15 = CALL strlen([1056])
	if ( ((int_32)$15 != (int_32)( *($4 + [4]) ? uint_32($16 >> [1]) : ($16 & [1]) )) ){ goto $label$5 }
	if ( (CALL $337($4, [0], [-1], [1056], $15) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$16 = *($4)
	$15 = ($4 + [4])
	$14 = CALL strlen([1072])
	if ( ((int_32)$14 != (int_32)( *($15) ? uint_32($16 >> [1]) : ($16 & [1]) )) ){ goto $label$6 }
	if ( (CALL $337($4, [0], [-1], [1072], $14) == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$16 = *($4)
	$14 = CALL strlen([1088])
	if ( ((int_32)$14 != (int_32)( *($15) ? uint_32($16 >> [1]) : ($16 & [1]) )) ){ goto $label$7 }
	if ( (CALL $337($4, [0], [-1], [1088], $14) == 0) ){ goto $label$4 }
	
.LABEL $label$7
	$18 = *($0)
	if ( ((int_64)$18 == (int_64)$1) ){ goto $label$4 }
	if ( ((int_64)$18 != (int_64)$2) ){ goto $label$4 }
	CALL $68(($21 + [520]), $0)
	CALL eosio_assert(((int_64)*($21 + [528]) != (int_64)0), [1104])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [1120])
	if ( (CALL $69($0, $4) == 0) ){ goto $label$8 }
	*(($16 = (($21 + [504]) + [8]))) = *(($3 + [8]))
	*($21 + [504]) = *($3)
	CALL $345(($21 + [488]), $4)
	*(($21 + [8])) = *($16)
	*($21) = *($21 + [504])
	CALL $70($0, $1, $21, ($21 + [488]))
	if ( ((*($21 + [488]) & [1]) == 0) ){ goto $label$4 }
	CALL $324(*($21 + [496]))
	goto $label$4 
	
.LABEL $label$8
	CALL eosio_assert((int_64)(((int_64)*($3) % (int_64)*(*($5) + [40])) == 0), [1152])
	$15 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$18 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$16 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$15 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$15 = [0]
	
.LABEL $label$9
	CALL eosio_assert($15, [1184])
	CALL require_auth($1)
	CALL $71(($21 + [672]), $0, $4)
	$6 = (*($21 + [672]) & [1])
	$7 = *($21 + [680])
	$16 = ( $7 ? (($21 + [672]) | [1]) : $6 )
	$15 = [-1]
	
.LOOP $label$14:
	$14 = ($16 + $15)
	$8 = ($15 + [1])
	$15 = $8
	if ( *(($14 + [1])) ){ goto $label$14 }
	$9 = (CASTING uint_64)(uint_32 $8)
	$18 = (int_64)0
	$17 = (int_64)59
	$19 = (int_64)0
	
.LOOP $label$15:
	$20 = (int_64)0
	if ( ((uint_64)$18 >= (uint_64)$9) ){ goto $label$16 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$15 = ($15 + [165])
	goto $label$17 
	
.LABEL $label$18
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	if ( ((uint_64)$18 > (uint_64)(int_64)11) ){ goto $label$20 }
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	goto $label$19 
	
.LABEL $label$20
	$20 = ((int_64)$20 & (int_64)15)
	
.LABEL $label$19
	$16 = ($16 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$15 }
	if ( ($6 == 0) ){ goto $label$21 }
	CALL $324($7)
	
.LABEL $label$21
	CALL $72(($21 + [480]), $0, $1, $19)
	$16 = *($21 + [484])
	*($21 + [676]) = ($21 + [576])
	*($21 + [672]) = $3
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [1216])
	CALL $73(($0 + [104]), $16, (int_64)0, ($21 + [672]))
	$9 = *(($3 + [8]))
	$10 = ((int_64)*($3) / (int_64)125)
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [288])
	$18 = (uint_64)$9 >> (uint_64)(int_64)8)
	$16 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$25 }
	
.LOOP $label$26:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$23 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$26 }
	
.LABEL $label$25
	$15 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$15 = [0]
	
.LABEL $label$22
	CALL eosio_assert($15, [352])
	*($21 + [592]) = $1
	CALL $74(($21 + [624]), ($21 + [592]))
	$16 = CALL $331(($21 + [624]), [1264])
	$15 = ($16 + [8])
	*((($21 + [640]) + [8])) = *($15)
	*($21 + [640]) = *($16)
	*($16) = [0]
	*(($16 + [4])) = [0]
	*($15) = [0]
	*(($16 = (($21 + [448]) + [8]))) = *(($3 + [8]))
	$18 = *($3)
	*((($21 + [208]) + [12])) = *((($21 + [448]) + [12]))
	*((($21 + [208]) + [8])) = *($16)
	*($21 + [448]) = $18
	*($21 + [212]) = *($21 + [452])
	*($21 + [208]) = *($21 + [448])
	CALL $75(($21 + [608]), $0, ($21 + [208]))
	$16 = *($21 + [608])
	$15 = ($16 & [1])
	$16 = CALL $330(($21 + [640]), ( *($21 + [616]) ? (($21 + [608]) | [1]) : $15 ), ( *($21 + [612]) ? uint_32($16 >> [1]) : $15 ))
	$15 = ($16 + [8])
	*((($21 + [656]) + [8])) = *($15)
	*($21 + [656]) = *($16)
	*($16) = [0]
	*(($16 + [4])) = [0]
	*($15) = [0]
	$16 = CALL $331(($21 + [656]), [1280])
	$15 = ($16 + [8])
	*((($21 + [672]) + [8])) = *($15)
	*($21 + [672]) = *($16)
	*($16) = [0]
	*(($16 + [4])) = [0]
	*($15) = [0]
	$16 = *($4)
	$15 = ($16 & [1])
	$16 = CALL $330(($21 + [672]), ( *($4 + [8]) ? ($4 + [1]) : $15 ), ( *(($4 + [4])) ? uint_32($16 >> [1]) : $15 ))
	$15 = ($16 + [8])
	*((($21 + [464]) + [8])) = *($15)
	*($21 + [464]) = *($16)
	*($16) = [0]
	*(($16 + [4])) = [0]
	*($15) = [0]
	if ( ((*($21 + [672]) & [1]) == 0) ){ goto $label$27 }
	CALL $324(*($21 + [680]))
	
.LABEL $label$27
	if ( ((*($21 + [656]) & [1]) == 0) ){ goto $label$28 }
	CALL $324(*($21 + [664]))
	
.LABEL $label$28
	if ( ((*($21 + [608]) & [1]) == 0) ){ goto $label$29 }
	CALL $324(*(($21 + [616])))
	
.LABEL $label$29
	if ( ((*($21 + [640]) & [1]) == 0) ){ goto $label$30 }
	CALL $324(*($21 + [648]))
	
.LABEL $label$30
	if ( ((*($21 + [624]) & [1]) == 0) ){ goto $label$31 }
	CALL $324(*($21 + [632]))
	
.LABEL $label$31
	$12 = *($0)
	$11 = *(*($5) + [24])
	$18 = (int_64)0
	$17 = (int_64)59
	$16 = [1296]
	$19 = (int_64)0
	
.LOOP $label$32:
	$20 = (int_64)0
	if ( ((uint_64)$18 > (uint_64)(int_64)11) ){ goto $label$33 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$15 = ($15 + [165])
	goto $label$34 
	
.LABEL $label$35
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$20 = ((int_64)(CASTING uint_64)(uint_32 ($15 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$33
	$16 = ($16 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$32 }
	*($21 + [440]) = $9
	*($21 + [432]) = $10
	CALL $345(($21 + [416]), ($21 + [464]))
	*((($21 + [192]) + [8])) = *($21 + [440])
	*($21 + [192]) = *($21 + [432])
	CALL $76($0, $11, $12, $19, ($21 + [192]), ($21 + [416]))
	if ( ((*($21 + [416]) & [1]) == 0) ){ goto $label$36 }
	CALL $324(*($21 + [424]))
	
.LABEL $label$36
	$9 = *(($3 + [8]))
	$12 = ((int_64)*($3) / (int_64)100)
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [288])
	$18 = (uint_64)$9 >> (uint_64)(int_64)8)
	$16 = [0]
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$38 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$40 }
	
.LOOP $label$41:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$38 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$41 }
	
.LABEL $label$40
	$15 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	$15 = [0]
	
.LABEL $label$37
	CALL eosio_assert($15, [352])
	$11 = *($0)
	$13 = *(*($5) + [24])
	$18 = (int_64)0
	$17 = (int_64)59
	$16 = [1312]
	$19 = (int_64)0
	
.LOOP $label$42:
	$20 = (int_64)0
	if ( ((uint_64)$18 > (uint_64)(int_64)11) ){ goto $label$43 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$15 = ($15 + [165])
	goto $label$44 
	
.LABEL $label$45
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$20 = ((int_64)(CASTING uint_64)(uint_32 ($15 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$43
	$16 = ($16 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$42 }
	*($21 + [408]) = $9
	*($21 + [400]) = $12
	CALL $345(($21 + [384]), ($21 + [464]))
	*(($21 + [184])) = *($21 + [408])
	*($21 + [176]) = *($21 + [400])
	CALL $76($0, $13, $11, $19, ($21 + [176]), ($21 + [384]))
	if ( ((*($21 + [384]) & [1]) == 0) ){ goto $label$46 }
	CALL $324(*($21 + [392]))
	
.LABEL $label$46
	$14 = CALL $77($0, $4)
	$18 = CALL current_time()
	$17 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($3)) / (float_64)*(*($5) + [32])))
	CALL eosio_assert((uint_64)(((int_64)$17 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [288])
	$8 = (CASTING uint_32)(uint_64 ((uint_64)$18 / (uint_64)(int_64)1000000))
	$18 = (int_64)5459781
	$16 = [0]
	
.LOOP $label$49:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$50 }
	
.LOOP $label$51:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$48 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$51 }
	
.LABEL $label$50
	$15 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	$15 = [0]
	
.LABEL $label$47
	CALL eosio_assert($15, [352])
	$20 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $10) / (float_64)*(*($5) + [32])))
	CALL eosio_assert((uint_64)(((int_64)$20 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [288])
	$18 = (int_64)5459781
	$16 = [0]
	
.LOOP $label$54:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$53 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$55 }
	
.LOOP $label$56:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$53 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$56 }
	
.LABEL $label$55
	$15 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$53
	$15 = [0]
	
.LABEL $label$52
	CALL eosio_assert($15, [352])
	CALL eosio_assert([1], [288])
	$18 = (int_64)5459781
	$16 = [0]
	
.LOOP $label$59:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$58 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$60 }
	
.LOOP $label$61:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$58 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$61 }
	
.LABEL $label$60
	$15 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$58
	$15 = [0]
	
.LABEL $label$57
	CALL eosio_assert($15, [352])
	*($21 + [680]) = (int_64)1397703940
	*($21 + [672]) = $17
	*($21 + [664]) = (int_64)1397703940
	*($21 + [656]) = $20
	*($21 + [648]) = (int_64)1397703940
	*($21 + [640]) = (int_64)0
	*((($21 + [160]) + [8])) = *($21 + [680])
	*((($21 + [144]) + [8])) = *($21 + [664])
	*($21 + [160]) = *($21 + [672])
	*($21 + [144]) = *($21 + [656])
	*((($21 + [128]) + [8])) = *($21 + [648])
	*($21 + [128]) = *($21 + [640])
	CALL $78($0, (int_64)0, $14, ($21 + [160]), ($21 + [144]), ($21 + [128]), [1])
	*($21 + [624]) = $8
	$16 = CALL gmtime(($21 + [624]))
	$18 = *($16 + [12])
	$15 = *($16 + [20])
	$16 = *($16 + [16])
	*($21 + [632]) = (int_64)1397703940
	*($21 + [624]) = $17
	*($21 + [616]) = (int_64)1397703940
	*($21 + [608]) = $20
	*($21 + [600]) = (int_64)1397703940
	*($21 + [592]) = (int_64)0
	*((($21 + [112]) + [8])) = *($21 + [632])
	*((($21 + [96]) + [8])) = *($21 + [616])
	*($21 + [112]) = *($21 + [624])
	*($21 + [96]) = *($21 + [608])
	*((($21 + [80]) + [8])) = *($21 + [600])
	*($21 + [80]) = *($21 + [592])
	CALL $78($0, ((int_64)((int_64)$18 + (int_64)((int_64)(CASTING int_64)(int_32 ($15 + [1900])) * (int_64)10000)) + (int_64)((int_64)(CASTING int_64)(int_32 ($16 + [1])) * (int_64)100)), $14, ($21 + [112]), ($21 + [96]), ($21 + [80]), [1])
	$16 = ($14 + [-1])
	if ( ((uint_32)$16 > (uint_32)[3]) ){ goto $label$68 }
	goto $label$69 
	
.LABEL $label$69
	*((($21 + [336]) + [12])) = *(($3 + [12]))
	*(($16 = (($21 + [336]) + [8]))) = *(($3 + [8]))
	*($21 + [336]) = *($3)
	*($21 + [340]) = *(($3 + [4]))
	$18 = *(*($5) + [48])
	CALL $345(($21 + [320]), $4)
	*((($21 + [48]) + [8])) = *($16)
	*($21 + [48]) = *($21 + [336])
	CALL $84($0, $18, $1, $2, ($21 + [48]), ($21 + [320]))
	if ( ((*($21 + [320]) & [1]) == 0) ){ goto $label$62 }
	CALL $324(*($21 + [328]))
	goto $label$62 
	
.LABEL $label$68
	*((($21 + [240]) + [12])) = *(($3 + [12]))
	*(($15 = (($21 + [240]) + [8]))) = *(($3 + [8]))
	*($21 + [240]) = *($3)
	*($21 + [244]) = *(($3 + [4]))
	$16 = *($5)
	$18 = *($16 + [64])
	$17 = *($16 + [56])
	$20 = *($16 + [24])
	CALL $345(($21 + [224]), $4)
	*((($21 + [16]) + [8])) = *($15)
	*($21 + [16]) = *($21 + [240])
	CALL $87($0, $20, $17, $18, $1, $2, ($21 + [16]), ($21 + [224]))
	if ( ((*($21 + [224]) & [1]) == 0) ){ goto $label$62 }
	CALL $324(*($21 + [232]))
	goto $label$62 
	
.LABEL $label$67
	$16 = *($5)
	$15 = *($16)
	$18 = *($16 + [40])
	$17 = *($3)
	if ( ((int_64)$17 >= (int_64)((int_64)$18 * (int_64)100)) ){ goto $label$64 }
	$16 = (((int_64)$17 >= (int_64)((int_64)$18 * (int_64)10)) | ($15 << [8]))
	goto $label$63 
	
.LABEL $label$66
	*((($21 + [304]) + [12])) = *(($3 + [12]))
	*(($16 = (($21 + [304]) + [8]))) = *(($3 + [8]))
	*($21 + [304]) = *($3)
	*($21 + [308]) = *(($3 + [4]))
	$18 = *(*($5) + [40])
	CALL $345(($21 + [288]), $4)
	*((($21 + [656]) + [8])) = *($16)
	*($21 + [656]) = *($21 + [304])
	*($21 + [640]) = $1
	$15 = [0]
	$16 = [0]
	$14 = *($21 + [288])
	$4 = CALL strlen([1408])
	if ( ((int_32)$4 != (int_32)( *($21 + [292]) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$70 }
	$16 = (CALL $337(($21 + [288]), [0], [-1], [1408], $4) == 0)
	
.LABEL $label$70
	*($21 + [608]) = $16
	$18 = ( ((int_64)$18 * (int_64)10) ? $18 : $16 )
	$17 = *($21 + [656])
	$20 = ((int_64)$17 % (int_64)$18)
	if ( ((int_64)$17 < (int_64)$18) ){ goto $label$71 }
	if ( ((int_64)$20 != (int_64)0) ){ goto $label$71 }
	$15 = ((int_64)$17 <= (int_64)((int_64)$18 * (int_64)1000))
	
.LABEL $label$71
	CALL eosio_assert($15, [1376])
	$18 = *($0)
	*($21 + [672]) = $0
	*($21 + [676]) = ($21 + [640])
	*($21 + [680]) = ($21 + [656])
	*($21 + [684]) = ($21 + [608])
	CALL $85(($21 + [624]), ($0 + [264]), $18, ($21 + [672]))
	if ( ((*($21 + [288]) & [1]) == 0) ){ goto $label$62 }
	CALL $324(*($21 + [296]))
	goto $label$62 
	
.LABEL $label$65
	*((($21 + [272]) + [12])) = *(($3 + [12]))
	*(($16 = (($21 + [272]) + [8]))) = *(($3 + [8]))
	*($21 + [272]) = *($3)
	*($21 + [276]) = *(($3 + [4]))
	$18 = *(*($5) + [40])
	CALL $345(($21 + [256]), $4)
	*((($21 + [64]) + [8])) = *($16)
	*($21 + [64]) = *($21 + [272])
	CALL $86($0, $18, $1, $2, ($21 + [64]), ($21 + [256]))
	if ( ((*($21 + [256]) & [1]) == 0) ){ goto $label$62 }
	CALL $324(*($21 + [264]))
	goto $label$62 
	
.LABEL $label$64
	$16 = (($15 << [8]) | [2])
	
.LABEL $label$63
	$18 = *(($3 + [8]))
	CALL eosio_assert([1], [1328])
	CALL eosio_assert([1], [1344])
	*($21 + [680]) = $18
	*($21 + [672]) = ((int_64)$17 / (int_64)1000)
	*($21 + [656]) = $18
	$18 = (CASTING int_64)(int_32 $16)
	*($21 + [640]) = $18
	$6 = *(($0 + [568]))
	$14 = *(($0 + [572]))
	if ( ((int_32)$14 == (int_32)$6) ){ goto $label$72 }
	$16 = ($14 + [-24])
	$8 = ([0] - $6)
	
.LOOP $label$73:
	if ( ((int_64)*(*($16)) == (int_64)$18) ){ goto $label$72 }
	$14 = $16
	$15 = ($16 + [-24])
	$16 = $15
	if ( ((int_32)($15 + $8) != (int_32)[-24]) ){ goto $label$73 }
	
.LABEL $label$72
	$16 = ($0 + [544])
	if ( ((int_32)$14 == (int_32)$6) ){ goto $label$77 }
	$15 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [24]) == (int_32)$16), [672])
	if ( $15 ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$77
	$15 = CALL db_find_i64(*(($0 + [544])), *(($0 + [552])), (int_64)8759794652103573504, $18)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$75 }
	$15 = CALL $79($16, $15)
	CALL eosio_assert(((int_32)*($15 + [24]) == (int_32)$16), [672])
	
.LABEL $label$76
	$18 = ((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)32)
	goto $label$74 
	
.LABEL $label$75
	$18 = *($0)
	*($21 + [612]) = ($21 + [656])
	*($21 + [608]) = ($21 + [640])
	CALL $80(($21 + [624]), $16, $18, ($21 + [608]))
	$18 = *($21 + [624])
	
.LABEL $label$74
	*($21 + [656]) = ($21 + [672])
	$15 = (CASTING uint_32)(uint_64 (uint_64)$18 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$15) != (int_32)[0]), [1216])
	CALL $81($16, $15, (int_64)0, ($21 + [656]))
	*((($21 + [368]) + [12])) = *(($3 + [12]))
	*(($16 = (($21 + [368]) + [8]))) = *(($3 + [8]))
	*($21 + [372]) = *(($3 + [4]))
	*($21 + [368]) = *($3)
	$18 = *(*($5) + [40])
	CALL $345(($21 + [352]), $4)
	*(($15 = (($21 + [640]) + [8]))) = *($16)
	*($21 + [640]) = *($21 + [368])
	*($21 + [624]) = $1
	$17 = *($15)
	*((($21 + [672]) + [8])) = $17
	*((($21 + [32]) + [8])) = $17
	$17 = *($21 + [640])
	*($21 + [672]) = $17
	*($21 + [32]) = $17
	$16 = CALL $82($0, $18, ($21 + [32]))
	*($21 + [592]) = $16
	CALL eosio_assert(((int_32)$16 > (int_32)[0]), [1376])
	$18 = *($0)
	*($21 + [656]) = $0
	*($21 + [660]) = ($21 + [624])
	*($21 + [664]) = ($21 + [640])
	*($21 + [668]) = ($21 + [592])
	CALL $83(($21 + [608]), ($0 + [224]), $18, ($21 + [656]))
	if ( ((*($21 + [352]) & [1]) == 0) ){ goto $label$62 }
	CALL $324(*($21 + [360]))
	
.LABEL $label$62
	if ( ((*($21 + [464]) & [1]) == 0) ){ goto $label$4 }
	CALL $324(*($21 + [472]))
	
.LABEL $label$4
	*([0] + [4]) = ($21 + [688])
	$16
}

void .FUNC $271 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)5445039061531623424, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [672])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $278($4, CALL $fimport$18(*($4), *($4 + [8]), (int_64)5445039061531623424, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [672])
	
.LABEL $label$4
	*(($2 + [56])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $270 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($3 + [40]), *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [800])
	CALL memcpy(($3 + [48]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	CALL $64(*($1), ($0 + [56]))
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [800])
	CALL memcpy(($0 + [68]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [800])
	CALL memcpy(($0 + [72]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
}

void .FUNC $277 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($2 + [4]), ($3 + [40]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [1648])
	CALL memcpy(*($2 + [4]), ($3 + [48]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	CALL $97(*($1), ($0 + [56]))
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1648])
	CALL memcpy(*($2 + [4]), ($0 + [68]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1648])
	CALL memcpy(*($2 + [4]), ($0 + [72]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
}

void .FUNC $276 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [1664])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1712])
	*($5 + [104]) = *($1 + [8])
	*($1 + [32]) = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(int_64 *(*($3))) / (float_64)*(*($3 + [4]))) + (float_64)(CASTING float_64)(int_64 *($1 + [32]))))
	$4 = *($1)
	CALL eosio_assert([1], [1776])
	*($5 + [96]) = ($5 + [84])
	*($5 + [92]) = $5
	*($5 + [88]) = $5
	CALL $157(($5 + [88]), $1)
	CALL db_update_i64(*($1 + [88]), $2, $5, [84])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [120]) = *(($1 + [8]))
	if ( (CALL memcmp(($5 + [104]), ($5 + [120]), [8]) == 0) ){ goto $label$2 }
	$3 = *($1 + [92])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020384829779738624, ($5 + [112]), $4)
	*(($1 + [92])) = $3
	
.LABEL $label$3
	CALL db_idx64_update($3, $2, ($5 + [120]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [128])
}

void .FUNC $275 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [3616])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [3664])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [3728])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $324($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $324($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
	$7 = *(($1 + [56]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5445039061531623424, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $274 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$7 = ( $6 ? $9 : ($9 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	*(($3 = ($9 + [24]))) = [0]
	$2 = CALL $323([16])
	*($9 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $5
	*($9 + [28]) = [0]
	*(($5 = ($9 + [32]))) = [0]
	*(($9 + [36])) = [0]
	$2 = *($4 + [56])
	$1 = ( *(($4 + [60])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [60])
	$8 = (CASTING uint_64)(uint_32 $1)
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$1 = ($9 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $66($1, $2)
	$7 = *($5)
	$2 = *($1)
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($10 + [4]) = $2
	*($10) = $2
	*($10 + [8]) = $7
	*($10 + [16]) = $10
	*($10 + [24]) = $4
	$5 = ($9 + [40])
	CALL $273(($10 + [24]), ($10 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$9 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$10:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($4 = ($9 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($9 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$4 = $2
	
.LABEL $label$8
	*($0) = $9
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$11 }
	$1 = ([0] - $4)
	$9 = ($2 + [-24])
	
.LOOP $label$12:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($9 + [16])) = $2
	CALL $324($2)
	
.LABEL $label$13
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$14 }
	*(($9 + [4])) = $2
	CALL $324($2)
	
.LABEL $label$14
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($4 == 0) ){ goto $label$15 }
	CALL $324($4)
	
.LABEL $label$15
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $50 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [96])
	*([0] + [4]) = $2
	*(($3 = $2) + [92]) = $0
	*($3 + [80]) = *($1)
	*($3 + [84]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $206(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [12]) = ($3 + [80])
	*($3 + [8]) = ($3 + [92])
	CALL $207(($3 + [8]), ($3 + [16]))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$6 }
	CALL $324(*(($3 + [32])))
	
.LABEL $label$6
	*([0] + [4]) = ($3 + [96])
	return [1]
}

int_32 .FUNC $279 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [800])
	CALL memcpy(($1 + [32]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [36]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [128])
	*([0] + [4]) = $2
	*(($3 = $2) + [124]) = $0
	*($3 + [112]) = *($1)
	*($3 + [116]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $193(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [12]) = ($3 + [112])
	*($3 + [8]) = ($3 + [124])
	CALL $194(($3 + [8]), ($3 + [16]))
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$6 }
	CALL $324(*(($3 + [104])))
	
.LABEL $label$6
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$7 }
	CALL $324(*(($3 + [48])))
	
.LABEL $label$7
	*([0] + [4]) = ($3 + [128])
	return [1]
}

void .FUNC $54 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [3424]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($8)
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [800])
	CALL memcpy(($2 + [8]), $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $64(($2 + [48]), (($2 + [8]) + [8]))
	CALL eosio_assert(((uint_32)(*($2 + [56]) - *($2 + [52])) > (uint_32)[3]), [800])
	CALL memcpy(($2 + [28]), *($2 + [52]), [4])
	if ( ($0 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $192(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL $324(*(($2 + [24])))
	
.LABEL $label$6
	*([0] + [4]) = ($2 + [64])
	return [1]
}

void .FUNC $56 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	*($8 + [56]) = $1
	$1 = (int_64)0
	$5 = (int_64)59
	$4 = [3424]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($6)
	*(($8 + [48])) = [0]
	*($8 + [32]) = (int_64)-1
	*($8 + [40]) = (int_64)0
	$1 = *($0)
	*($8 + [16]) = $1
	*($8 + [24]) = $1
	*($8 + [12]) = $2
	*($8 + [8]) = ($8 + [56])
	CALL $190($8, ($8 + [16]), $1, ($8 + [8]))
	$0 = *($8 + [40])
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = ($8 + [44])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$10 }
	CALL $324(*(($3 + [56])))
	
.LABEL $label$10
	CALL $324($3)
	
.LABEL $label$9
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$8 }
	$4 = *(($8 + [40]))
	goto $label$6 
	
.LABEL $label$7
	$4 = $0
	
.LABEL $label$6
	*($2) = $0
	CALL $324($4)
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [64])
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [176])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($7 + [72])) = (int_64)0
	*((($7 + [32]) + [32])) = (int_64)0
	*((($7 + [32]) + [24])) = (int_64)0
	*($7 + [48]) = (int_64)0
	*($7 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [800])
	CALL memcpy(($7 + [32]), $5, [8])
	CALL eosio_assert(((uint_32)($3 + [-8]) > (uint_32)[31]), [800])
	$1 = (($7 + [32]) + [16])
	CALL memcpy($1, ($5 + [8]), [32])
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	*(($3 = (($7 + [80]) + [24]))) = *(($1 + [24]))
	*(($5 = (($7 + [80]) + [16]))) = *(($1 + [16]))
	$4 = *($7 + [32])
	*($7 + [80]) = *($1)
	*($7 + [92]) = *(($1 + [12]))
	*($7 + [88]) = *(($1 + [8]))
	*((($7 + [112]) + [24])) = *($3)
	*((($7 + [112]) + [16])) = *($5)
	*($7 + [120]) = *($7 + [88])
	*($7 + [112]) = *($7 + [80])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	*(($3 = (($7 + [144]) + [24]))) = *((($7 + [112]) + [24]))
	*(($5 = (($7 + [144]) + [16]))) = *((($7 + [112]) + [16]))
	*($7 + [152]) = *($7 + [120])
	*($7 + [144]) = *($7 + [112])
	*(($7 + [24])) = *($3)
	*(($7 + [16])) = *($5)
	*($7) = *($7 + [144])
	*($7 + [8]) = *($7 + [152])
	CALL void $1((int_32 $4), (int_64 $7), (int_32 $6))
	*([0] + [4]) = ($7 + [176])
	return [1]
}

void .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $97(*($1), ($0 + [32]))
}

void .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $66($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [1648])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [1648])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $155(CALL $154($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $150 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $324($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $324($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [72]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [112]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [136]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [144]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $156 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($3 & [1])
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $5 )
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($4 + $3)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $323($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : $5 ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $330($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $325($0)
}

int_32 .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1648])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1648])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1648])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1648])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1648])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $158 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($1 + [24])
	$7 = *(($1 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$3 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [84]) == (int_32)$1), [672])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-3020384829779738624, $2)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL $164($1, $6)
	CALL eosio_assert(((int_32)*($6 + [84]) == (int_32)$1), [672])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $159 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1584])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $323([96])
	CALL $160($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [88])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $161(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $324($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $273 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($4 + [8]) = $0
	CALL $277(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $272 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [2048])
	$6 = *($0 + [4])
	$7 = *($6 + [56])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)5445039061531623424, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [56]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [672])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $278($2, CALL $fimport$18(*($2), *($2 + [8]), (int_64)5445039061531623424, $3))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [672])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [56])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC $106 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [672])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $107($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [672])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $344 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $228 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [160])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [1664])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1712])
	$4 = *($1)
	CALL $229($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1776])
	*($5 + [152]) = ($5 + [144])
	*($5 + [148]) = $5
	*($5 + [144]) = $5
	CALL $147(($5 + [144]), $1)
	CALL db_update_i64(*($1 + [156]), $2, $5, [144])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [160])
}

void .FUNC $229 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = *($0)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [32]))), [1840])
	$2 = ((int_64)*($1 + [24]) + (int_64)*($3))
	*($1 + [24]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1888])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [1920])
	$3 = *(*($0 + [4]))
	if ( ((int_32)$3 != (int_32)[1]) ){ goto $label$1 }
	$3 = *($0)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [144]))), [1840])
	$2 = ((int_64)*($1 + [136]) + (int_64)*($3))
	*($1 + [136]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1888])
	CALL eosio_assert(((int_64)*($1 + [136]) < (int_64)4611686018427387904), [1920])
	$3 = *(*(($0 + [4])))
	
.LABEL $label$1
	if ( $3 ){ goto $label$2 }
	$0 = *($0)
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*(($1 + [104]))), [1840])
	$2 = ((int_64)*($1 + [96]) + (int_64)*($0))
	*($1 + [96]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1888])
	CALL eosio_assert(((int_64)*($1 + [96]) < (int_64)4611686018427387904), [1920])
	
.LABEL $label$2
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	*($7 + [56]) = $4
	*($7 + [48]) = $2
	*($7 + [40]) = $3
	$5 = ($1 + [64])
	*($7 + [32]) = $5
	CALL $110(($7 + [8]), ($7 + [32]), ($7 + [48]))
	$6 = *($7 + [12])
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((int_64)*($7 + [48]) != (int_64)*($6 + [16])) ){ goto $label$4 }
	$3 = *($7 + [8])
	*($7 + [24]) = $3
	$6 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ($6) == 0) ){ goto $label$3 }
	
.LOOP $label$5:
	if ( ((int_64)*($6 + [16]) != (int_64)*($7 + [48])) ){ goto $label$6 }
	if ( ((int_64)*(($6 + [32])) == (int_64)*($7 + [56])) ){ goto $label$2 }
	
.LABEL $label$6
	CALL $114(($7 + [24]))
	$6 = *($7 + [28])
	if ( $6 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	*($7 + [28]) = [0]
	*($7 + [24]) = ($7 + [32])
	
.LABEL $label$3
	$3 = *($1)
	*($7 + [8]) = $1
	*($7 + [12]) = ($7 + [40])
	*($7 + [16]) = ($7 + [48])
	*($7 + [20]) = ($7 + [56])
	CALL $111($0, $5, $3, ($7 + [8]))
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)*($6 + [8]) == (int_64)*($7 + [40])) ){ goto $label$7 }
	$6 = *($7 + [28])
	*($7 + [12]) = ($7 + [56])
	*($7 + [8]) = ($7 + [40])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1216])
	CALL $112(*($7 + [32]), $6, (int_64)0, ($7 + [8]))
	$6 = *($7 + [28])
	
.LABEL $label$7
	CALL $113($0, $5, *($6))
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [64])
}

int_64 .FUNC $88 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	float_64 $18
	int_32 $19
	int_32 $20
	float_64 $21
	int_32 $22
	int_32 $23
	float_64 $24
	float_64 $25
	int_32 $26
	$26 = (*([0] + [4]) - [48])
	*([0] + [4]) = $26
	CALL eosio_assert((((int_32)$1 != (int_32)[0]) & ($3 <= [100000])), [2256])
	CALL eosio_assert(((int_32)CALL $379($1) < (int_32)[256]), [2272])
	$6 = CALL malloc([1024])
	$19 = [0]
	$1 = CALL strtok($1, [2304])
	if ( ($1 == 0) ){ goto $label$1 }
	$16 = $6
	$19 = [0]
	
.LOOP $label$2:
	$15 = CALL strlen($1)
	$17 = CALL malloc(($15 + [1]))
	CALL memcpy($17, $1, $15)
	*(($17 + $15)) = [0]
	*($16) = $17
	$16 = ($16 + [4])
	$19 = ($19 + [1])
	$1 = CALL strtok([0], [2304])
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$19 > (int_32)[0]), [2320])
	*($4) = [0]
	if ( ((int_32)$19 < (int_32)[1]) ){ goto $label$4 }
	$7 = ((int_32)$3 % (int_32)[10])
	$9 = ((int_32)$7 < (int_32)[5])
	$8 = ($7 & [1])
	$10 = ($8 == 0)
	$11 = (($26 + [42]) + [5])
	$20 = [0]
	$21 = (float_64)0
	$24 = (float_64)0
	
.LOOP $label$5:
	$17 = ($6 + ($20 << [2]))
	$16 = *($17)
	if ( ((int_32)*($16) != (int_32)[91]) ){ goto $label$11 }
	*($26 + [32]) = [0]
	CALL eosio_assert(((int_32)CALL $123($0, $16, ($26 + [36]), ($26 + [32])) > (int_32)[0]), [2336])
	$12 = *($26 + [32])
	if ( ((uint_32)($12 + [-1]) > (uint_32)[4]) ){ goto $label$10 }
	$14 = *($26 + [36])
	$23 = [0]
	$13 = [1]
	
.LOOP $label$12:
	$22 = *(($14 + ($23 << [2])))
	$17 = CALL strlen($22)
	if ( ((int_32)$17 < (int_32)[1]) ){ goto $label$13 }
	$1 = [0]
	$16 = [0]
	
.LOOP $label$14:
	$15 = (*(($22 + $1)) + [-48])
	if ( ((uint_32)($15 & [255]) > (uint_32)[9]) ){ goto $label$10 }
	$16 = int_32(($16 << [16]) >> [16])
	$15 = ([1] << $15)
	if ( ($15 & $16) ){ goto $label$10 }
	$16 = ($15 | $16)
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)$17) ){ goto $label$14 }
	
.LABEL $label$13
	$13 = ((int_32)$17 * (int_32)$13)
	$23 = ($23 + [1])
	if ( ((int_32)$23 < (int_32)$12) ){ goto $label$12 }
	goto $label$9 
	
.LABEL $label$11
	if ( ($16 == 0) ){ goto $label$8 }
	$15 = CALL strlen($16)
	if ( ((uint_32)($15 + [-1]) > (uint_32)[4]) ){ goto $label$8 }
	if ( ((int_32)$15 != (int_32)[1]) ){ goto $label$15 }
	$22 = (*($16) + [-98])
	if ( ((uint_32)$22 > (uint_32)[17]) ){ goto $label$15 }
	$1 = [1]
	if ( (([1] << $22) & [139273]) ){ goto $label$7 }
	
.LABEL $label$15
	$1 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)((*(($16 + $1)) + [-48]) & [255]) >= (uint_32)[10]) ){ goto $label$8 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)$15) ){ goto $label$16 }
	$1 = [1]
	goto $label$7 
	
.LABEL $label$10
	$13 = [-1]
	
.LABEL $label$9
	$23 = [0]
	CALL eosio_assert(((int_32)$13 > (int_32)[0]), [2336])
	*($4) = (*($4) + $13)
	$12 = *($26 + [36])
	$13 = *($26 + [32])
	*($26) = $3
	CALL sprintf(($26 + [42]), [2352], $26)
	if ( ((int_32)$13 < (int_32)[1]) ){ goto $label$17 }
	$14 = ([5] - $13)
	$23 = [0]
	$22 = [0]
	
.LOOP $label$18:
	$15 = *(($12 + ($22 << [2])))
	$16 = CALL strlen($15)
	if ( ((int_32)$23 != (int_32)$22) ){ goto $label$19 }
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$19 }
	$17 = *((($26 + [42]) + ($14 + $23)))
	$1 = [0]
	
.LOOP $label$21:
	if ( ((int_32)($17 & [255]) == (int_32)*(($15 + $1))) ){ goto $label$20 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)$16) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$23 = ($23 + [1])
	
.LABEL $label$19
	$22 = ($22 + [1])
	if ( ((int_32)$22 != (int_32)$13) ){ goto $label$18 }
	
.LABEL $label$17
	$22 = ((int_32)$23 == (int_32)$13)
	$18 = *((($13 << [3]) + [2368]))
	$17 = *($26 + [36])
	if ( ($17 == 0) ){ goto $label$22 }
	$1 = $17
	$16 = *($26 + [32])
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$23 }
	
.LOOP $label$24:
	$15 = *($1)
	if ( ($15 == 0) ){ goto $label$25 }
	CALL free($15)
	
.LABEL $label$25
	$1 = ($1 + [4])
	$16 = ($16 + [-1])
	if ( $16 ){ goto $label$24 }
	
.LABEL $label$23
	CALL free($17)
	
.LABEL $label$22
	$25 = ( $18 ? (float_64)0 : $22 )
	$24 = ((float_64)$24 + (float_64)$18)
	goto $label$6 
	
.LABEL $label$8
	$1 = [-1]
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$1 > (int_32)[0]), [2336])
	*($4) = (*($4) + $1)
	$15 = *($17)
	$16 = CALL strlen($15)
	if ( ((int_32)$16 != (int_32)[1]) ){ goto $label$26 }
	$1 = *($15)
	$17 = ($1 + [-98])
	if ( ((uint_32)$17 > (uint_32)[17]) ){ goto $label$26 }
	if ( ((([1] << $17) & [139273]) == 0) ){ goto $label$26 }
	$25 = (float_64)1.96
	if ( ((int_32)(((int_32)$1 != (int_32)[98]) | $9) != (int_32)[1]) ){ goto $label$6 }
	if ( ((((int_32)$7 > (int_32)[4]) | ((int_32)$1 != (int_32)[115])) == 0) ){ goto $label$6 }
	$1 = ((((int_32)$1 != (int_32)[111]) | $10) & (((int_32)$8 != (int_32)[0]) | ((int_32)$1 != (int_32)[101])))
	$25 = ( (float_64)0 ? (float_64)1.96 : $1 )
	$24 = ( ((float_64)$24 + (float_64)(float_64)1.96) ? $24 : $1 )
	goto $label$6 
	
.LABEL $label$26
	*($26 + [16]) = $3
	CALL sprintf(($26 + [42]), [2352], ($26 + [16]))
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$29 }
	$17 = (($11 + ([5] - $16)) + [-5])
	$1 = [0]
	
.LOOP $label$30:
	if ( ((int_32)*(($17 + $1)) != (int_32)*(($15 + $1))) ){ goto $label$28 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)$16) ){ goto $label$30 }
	
.LABEL $label$29
	$18 = *((($16 << [3]) + [2368]))
	$25 = $18
	goto $label$27 
	
.LABEL $label$28
	$18 = *((($16 << [3]) + [2368]))
	$25 = (float_64)0
	
.LABEL $label$27
	$24 = ((float_64)$24 + (float_64)$18)
	
.LABEL $label$6
	$21 = ((float_64)$21 + (float_64)$25)
	$20 = ($20 + [1])
	if ( ((int_32)$20 != (int_32)$19) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$24 = (float_64)0
	$21 = (float_64)0
	
.LABEL $label$3
	if ( ($6 == 0) ){ goto $label$31 }
	if ( ((int_32)$19 < (int_32)[1]) ){ goto $label$32 }
	$1 = $6
	
.LOOP $label$33:
	$16 = *($1)
	if ( ($16 == 0) ){ goto $label$34 }
	CALL free($16)
	
.LABEL $label$34
	$1 = ($1 + [4])
	$19 = ($19 + [-1])
	if ( $19 ){ goto $label$33 }
	
.LABEL $label$32
	CALL free($6)
	
.LABEL $label$31
	$24 = (CASTING float_64)(int_32 *($4))
	$25 = (CASTING float_64)(uint_64 $2)
	*($5) = (Rounds 0)(((float_64)((float_64)$25 * (float_64)$24) / (float_64)$24))
	*([0] + [4]) = ($26 + [48])
	return (Rounds 0)(((float_64)((float_64)$25 * (float_64)$21) / (float_64)$24))
}

int_32 .FUNC $224 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1648])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [1648])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [1648])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [1648])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $225 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1648])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1648])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1648])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $155(CALL $154($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $226 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1648])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [1648])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $155($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $227 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [1648])
	CALL memcpy(*($3 + [4]), ($2 + [32]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [48]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [56]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [1648])
	CALL memcpy(*($3 + [4]), ($0 + [64]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $220 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $223($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $66($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $224($4, $1)
	CALL $226(CALL $225(CALL $225($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $221 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $324($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $324($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $324($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $324($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $324($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $324($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $324($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $324($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $222 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [1664])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1712])
	*($5 + [104]) = *($1 + [8])
	*($1 + [32]) = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(int_64 *(*($3))) / (float_64)*(*($3 + [4]))) + (float_64)(CASTING float_64)(int_64 *($1 + [32]))))
	$4 = *($1)
	CALL eosio_assert([1], [1776])
	*($5 + [96]) = ($5 + [84])
	*($5 + [92]) = $5
	*($5 + [88]) = $5
	CALL $157(($5 + [88]), $1)
	CALL db_update_i64(*($1 + [88]), $2, $5, [84])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [120]) = *(($1 + [8]))
	if ( (CALL memcmp(($5 + [104]), ($5 + [120]), [8]) == 0) ){ goto $label$2 }
	$3 = *($1 + [92])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020384829779738624, ($5 + [112]), $4)
	*(($1 + [92])) = $3
	
.LABEL $label$3
	CALL db_idx64_update($3, $2, ($5 + [120]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [128])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1584])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $323([40])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [352])
	*($4 + [24]) = $1
	CALL $140(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [28])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $141(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $324($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $388 ()
{
	(unreachable)
}

int_32 .FUNC strcspn (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( (*($1 + [1]) == 0) ){ goto $label$2 }
	CALL memset($4, [0], [32])
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = ($1 + [1])
	
.LOOP $label$4:
	*(($2 = ($4 + uint_32(($3 & [224]) >> [3])))) = (*($2) | ([1] << ($3 & [31])))
	$3 = *($1)
	$1 = ($1 + [1])
	if ( $3 ){ goto $label$4 }
	
.LABEL $label$3
	$1 = $0
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$1 }
	$1 = $0
	
.LOOP $label$5:
	if ( (*(($4 + uint_32(($3 & [224]) >> [3]))) & ([1] << ($3 & [31]))) ){ goto $label$1 }
	$1 = ($1 + [1])
	$3 = *($1)
	if ( $3 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$1 = CALL __strchrnul($0, $3)
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [32])
	return ($1 - $0)
}

int_32 .FUNC strspn (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*((($4 = (*([0] + [4]) - [32])) + [24])) = (int_64)0
	*(($4 + [16])) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4) = (int_64)0
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( (*($1 + [1]) == 0) ){ goto $label$1 }
	$1 = ($1 + [1])
	
.LOOP $label$3:
	*(($2 = ($4 + uint_32(($3 & [224]) >> [3])))) = (*($2) | ([1] << ($3 & [31])))
	$3 = *($1)
	$1 = ($1 + [1])
	if ( $3 ){ goto $label$3 }
	$1 = $0
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = $0
	
.LOOP $label$5:
	if ( ((*(($4 + uint_32(($3 & [224]) >> [3]))) & ([1] << ($3 & [31]))) == 0) ){ goto $label$4 }
	$1 = ($1 + [1])
	$3 = *($1)
	if ( $3 ){ goto $label$5 }
	
.LABEL $label$4
	return ($1 - $0)
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$1 = ($0 + [-1])
	
.LOOP $label$6:
	$1 = ($1 + [1])
	if ( ((int_32)*($1) == (int_32)$3) ){ goto $label$6 }
	return ($1 - $0)
}

int_32 .FUNC strtok (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( $0 ){ goto $label$2 }
	$2 = [0]
	$0 = *([0] + [15892])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = ($0 + CALL strspn($0, $1))
	if ( (*($2) == 0) ){ goto $label$4 }
	$0 = ($2 + CALL strcspn($2, $1))
	*([0] + [15892]) = $0
	if ( (*($0) == 0) ){ goto $label$3 }
	*([0] + [15892]) = ($0 + [1])
	*($0) = [0]
	return $2
	
.LABEL $label$4
	*([0] + [15892]) = [0]
	return [0]
	
.LABEL $label$3
	*([0] + [15892]) = [0]
	
.LABEL $label$1
	return $2
}

int_32 .FUNC strncmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = [0]
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$2 = ([1] - $2)
	
.LOOP $label$4:
	$4 = *($1)
	if ( ((int_32)($3 & [255]) != (int_32)$4) ){ goto $label$2 }
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ($4 == 0) ){ goto $label$2 }
	$2 = ($2 + [1])
	$1 = ($1 + [1])
	$3 = *($0)
	$0 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	$5 = $3
	
.LABEL $label$1
	return (($5 & [255]) - *($1))
}

int_32 .FUNC __secs_to_tm (int_64 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = [-1]
	if ( ((uint_64)((int_64)$0 + (int_64)67908586910515200) > (uint_64)(int_64)135817173789408000) ){ goto $label$1 }
	$0 = ((int_64)$0 + (int_64)-951868800)
	$4 = (CASTING uint_32)(uint_64 ((int_64)$0 % (int_64)86400))
	$0 = ((int_64)(CASTING int_64)(int_32 int_32($4 >> [31])) + (int_64)((int_64)$0 / (int_64)86400))
	$10 = (CASTING uint_32)(uint_64 ((int_64)$0 % (int_64)146097))
	$9 = ( ($10 + [146097]) ? $10 : ((int_32)$10 < (int_32)[0]) )
	$6 = (((int_32)$9 / (int_32)[36524]) - (($9 + [-146096]) <= [36524]))
	$9 = (((int_32)$6 * (int_32)[-36524]) + $9)
	$2 = (((int_32)$9 / (int_32)[1461]) - (($9 + [-36525]) <= [1461]))
	$9 = (((int_32)$2 * (int_32)[-1461]) + $9)
	$8 = (((int_32)$9 / (int_32)[365]) - (($9 + [-1460]) <= [365]))
	$3 = (((int_32)$8 * (int_32)[-365]) + $9)
	$5 = ((int_64)((int_64)$0 + (int_64)3) % (int_64)7)
	$0 = ((int_64)(CASTING uint_64)(uint_32 int_32($10 >> [31])) + (int_64)((int_64)$0 / (int_64)146097))
	$7 = [0]
	if ( $8 ){ goto $label$2 }
	$7 = (($6 == 0) | ((int_32)$2 != (int_32)[0]))
	
.LABEL $label$2
	$0 = ((int_64)(CASTING int_64)(int_32 ((($2 << [2]) + ((int_32)$6 * (int_32)[100])) + $8)) + (int_64)((int_64)((int_64)$0 << (int_64)32) >> (int_64)32) * (int_64)400))
	$9 = $3
	$10 = [0]
	if ( ((int_32)$3 < (int_32)[31]) ){ goto $label$3 }
	$10 = [0]
	$8 = [31]
	$9 = $3
	
.LOOP $label$4:
	$6 = ($10 + [15969])
	$10 = ($10 + [1])
	$8 = *($6)
	$9 = ($9 - $8)
	if ( ((int_32)$9 >= (int_32)$8) ){ goto $label$4 }
	
.LABEL $label$3
	$8 = ((int_32)$10 > (int_32)[9])
	$0 = ((int_64)$0 + (int_64)(CASTING uint_64)(uint_32 $8))
	if ( ((uint_64)((int_64)$0 + (int_64)2147483748) > (uint_64)(int_64)4294967295) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $5)
	*($1 + [24]) = ( ($6 + [7]) ? $6 : ((int_32)$6 < (int_32)[0]) )
	$11 = ( [366] ? [365] : $7 )
	$6 = (($3 + $7) + [59])
	*($1 + [28]) = ($6 - ( [0] ? $11 : ((int_32)$6 < (int_32)$11) ))
	*($1 + [20]) = ((int_64)$0 + (int_64)100)
	*($1 + [12]) = ($9 + [1])
	$9 = ( ($4 + [86400]) ? $4 : ((int_32)$4 < (int_32)[0]) )
	*($1 + [8]) = ((int_32)$9 / (int_32)[3600])
	*($1 + [4]) = ((int_32)((int_32)$9 / (int_32)[60]) % (int_32)[60])
	*($1 + [16]) = (( ($10 + [-12]) ? $10 : $8 ) + [2])
	*($1) = ((int_32)$9 % (int_32)[60])
	$11 = [0]
	
.LABEL $label$1
	return $11
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [144])
	*([0] + [4]) = $19
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [3424]
	$15 = (int_64)0
	
.LOOP $label$1:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$2 }
	$5 = *($12)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$5 = ($5 + [165])
	goto $label$3 
	
.LABEL $label$4
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$2
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($15)
	CALL require_recipient(*($1 + [56]))
	$14 = *($1)
	$18 = *(($0 + [328]))
	$17 = *(($0 + [332]))
	if ( ((int_32)$17 == (int_32)$18) ){ goto $label$5 }
	$12 = ($17 + [-24])
	$7 = ([0] - $18)
	
.LOOP $label$6:
	if ( ((int_64)*(*($12)) == (int_64)$14) ){ goto $label$5 }
	$17 = $12
	$5 = ($12 + [-24])
	$12 = $5
	if ( ((int_32)($5 + $7) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [304])
	if ( ((int_32)$17 == (int_32)$18) ){ goto $label$8 }
	$12 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [64]) == (int_32)$6), [672])
	goto $label$7 
	
.LABEL $label$8
	$12 = [0]
	$5 = CALL db_find_i64(*(($0 + [304])), *(($0 + [312])), (int_64)4147959691619784352, $14)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$12 = CALL $197($6, $5)
	CALL eosio_assert(((int_32)*($12 + [64]) == (int_32)$6), [672])
	
.LABEL $label$7
	$8 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($8, [3472])
	CALL eosio_assert(((int_64)*($12 + [56]) == (int_64)*(($1 + [56]))), [3488])
	CALL eosio_assert(((int_64)*(($12 + [16])) == (int_64)*(($1 + [16]))), [1456])
	CALL eosio_assert(((int_64)*($12 + [8]) == (int_64)*($1 + [8])), [3520])
	$9 = ($12 + [24])
	$18 = [0]
	$5 = ($5 & [1])
	$5 = *($1 + [24])
	$7 = ($5 & [1])
	$5 = *($12 + [24])
	$10 = uint_32($5 >> [1])
	$11 = ( *(($12 + [28])) ? $10 : $7 )
	if ( ((int_32)$11 != (int_32)( *(($1 + [28])) ? uint_32($5 >> [1]) : $5 )) ){ goto $label$9 }
	$5 = ( *(($1 + [32])) ? (($1 + [24]) + [1]) : $5 )
	$17 = ($9 + [1])
	if ( $7 ){ goto $label$12 }
	if ( ($11 == 0) ){ goto $label$11 }
	$7 = ([0] - $10)
	
.LOOP $label$13:
	if ( ((int_32)*($17) != (int_32)*($5)) ){ goto $label$10 }
	$18 = [1]
	$5 = ($5 + [1])
	$17 = ($17 + [1])
	$7 = ($7 + [1])
	if ( $7 ){ goto $label$13 }
	goto $label$9 
	
.LABEL $label$12
	if ( ($11 == 0) ){ goto $label$11 }
	$18 = (CALL memcmp(( *(($12 + [32])) ? $17 : $7 ), $5, $11) == 0)
	goto $label$9 
	
.LABEL $label$11
	$18 = [1]
	goto $label$9 
	
.LABEL $label$10
	$18 = [0]
	
.LABEL $label$9
	CALL eosio_assert($18, [3520])
	*(($19 + [56])) = [0]
	*($19 + [48]) = (int_64)0
	$5 = CALL strlen([3552])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$17 }
	*($19 + [48]) = ($5 << [1])
	$17 = (($19 + [48]) | [1])
	if ( $5 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$7 = (($5 + [16]) & [-16])
	$17 = CALL $323($7)
	*($19 + [48]) = ($7 | [1])
	*($19 + [56]) = $17
	*($19 + [52]) = $5
	
.LABEL $label$16
	CALL memcpy($17, [3552], $5)
	
.LABEL $label$15
	*(($17 + $5)) = [0]
	CALL _ZNSt3__19to_stringEi(($19 + [32]), *($12 + [48]))
	$5 = *($19 + [32])
	$17 = ($5 & [1])
	$5 = CALL $330(($19 + [48]), ( *($19 + [40]) ? (($19 + [32]) | [1]) : $17 ), ( *($19 + [36]) ? uint_32($5 >> [1]) : $17 ))
	$17 = ($5 + [8])
	*((($19 + [64]) + [8])) = *($17)
	*($19 + [64]) = *($5)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($17) = [0]
	$5 = CALL $331(($19 + [64]), [2304])
	$17 = ($5 + [8])
	*((($19 + [80]) + [8])) = *($17)
	*($19 + [80]) = *($5)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($17) = [0]
	$5 = *($3)
	$17 = ($5 & [1])
	$5 = CALL $330(($19 + [80]), ( *($3 + [8]) ? ($3 + [1]) : $17 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $17 ))
	$17 = ($5 + [8])
	*((($19 + [112]) + [8])) = *($17)
	*($19 + [112]) = *($5)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($17) = [0]
	$5 = CALL $331(($19 + [112]), [2304])
	$17 = ($5 + [8])
	*((($19 + [128]) + [8])) = *($17)
	*($19 + [128]) = *($5)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($17) = [0]
	$5 = *(($12 + [24]))
	$17 = ($5 & [1])
	$5 = CALL $330(($19 + [128]), ( *(($12 + [32])) ? ($9 + [1]) : $17 ), ( *(($12 + [28])) ? uint_32($5 >> [1]) : $17 ))
	$17 = ($5 + [8])
	*((($19 + [96]) + [8])) = *($17)
	*($19 + [96]) = *($5)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($17) = [0]
	if ( ((*($19 + [128]) & [1]) == 0) ){ goto $label$18 }
	CALL $324(*($19 + [136]))
	
.LABEL $label$18
	if ( ((*($19 + [112]) & [1]) == 0) ){ goto $label$19 }
	CALL $324(*($19 + [120]))
	
.LABEL $label$19
	if ( ((*($19 + [80]) & [1]) == 0) ){ goto $label$20 }
	CALL $324(*($19 + [88]))
	
.LABEL $label$20
	if ( ((*($19 + [64]) & [1]) == 0) ){ goto $label$21 }
	CALL $324(*($19 + [72]))
	
.LABEL $label$21
	if ( ((*($19 + [32]) & [1]) == 0) ){ goto $label$22 }
	CALL $324(*(($19 + [40])))
	
.LABEL $label$22
	if ( ((*($19 + [48]) & [1]) == 0) ){ goto $label$23 }
	CALL $324(*($19 + [56]))
	
.LABEL $label$23
	$14 = *(($12 + [56]))
	*(($5 = (($19 + [16]) + [8]))) = *(($2 + [8]))
	*($19 + [16]) = *($2)
	CALL $345($19, ($19 + [96]))
	*((($19 + [112]) + [8])) = *($5)
	*($19 + [112]) = *($19 + [16])
	*($19 + [80]) = $14
	if ( ((int_64)*($19 + [112]) < (int_64)1) ){ goto $label$24 }
	$14 = *($0)
	*($19 + [128]) = $0
	*($19 + [132]) = ($19 + [80])
	*($19 + [136]) = ($19 + [112])
	*($19 + [140]) = $19
	CALL $198(($19 + [64]), ($0 + [384]), $14, ($19 + [128]))
	
.LABEL $label$24
	if ( ((*($19) & [1]) == 0) ){ goto $label$25 }
	CALL $324(*($19 + [8]))
	
.LABEL $label$25
	CALL eosio_assert($8, [3568])
	CALL eosio_assert($8, [2048])
	$5 = CALL db_next_i64(*($12 + [68]), ($19 + [128]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$26 }
	CALL $197($6, $5)
	
.LABEL $label$26
	CALL $199($6, $12)
	if ( ((*($19 + [96]) & [1]) == 0) ){ goto $label$27 }
	CALL $324(*($19 + [104]))
	
.LABEL $label$27
	*([0] + [4]) = ($19 + [144])
	return (unreachable)
	
.LABEL $label$14
	CALL $325(($19 + [48]))
}

int_32 .FUNC gmtime (int_32 $0)
{
	return CALL __gmtime_r($0, [15896])
}

int_32 .FUNC __strchrnul (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	($0 + CALL strlen($0))
	$2 = ($1 & [255])
	if ( ($2 == 0) ){ goto $label$1 }
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_32)$3 == (int_32)($1 & [255])) ){ goto $label$2 }
	$0 = ($0 + [1])
	if ( ($0 & [3]) ){ goto $label$4 }
	
.LABEL $label$3
	$3 = *($0)
	if ( ((((int_32)$3 ^ (int_32)[-1]) & ($3 + [-16843009])) & [-2139062144]) ){ goto $label$5 }
	$2 = ((int_32)$2 * (int_32)[16843009])
	
.LOOP $label$6:
	$3 = ((int_32)$3 ^ (int_32)$2)
	if ( ((((int_32)$3 ^ (int_32)[-1]) & ($3 + [-16843009])) & [-2139062144]) ){ goto $label$5 }
	$0 = ($0 + [4])
	$3 = *($0)
	if ( (((((int_32)$3 ^ (int_32)[-1]) & ($3 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$6 }
	
.LABEL $label$5
	$0 = ($0 + [-1])
	
.LOOP $label$7:
	$0 = ($0 + [1])
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_32)$3 != (int_32)($1 & [255])) ){ goto $label$7 }
	
.LABEL $label$2
	return $0
	return .LABEL $label$1
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($6 + [16]) = $2
	*($6 + [8]) = $3
	CALL eosio_assert(CALL $fimport$35($2), [2976])
	$4 = ($1 + [104])
	CALL $158($0, $4, $2)
	if ( *($0 + [4]) ){ goto $label$1 }
	$5 = *($1)
	if ( ((int_64)$5 == (int_64)$3) ){ goto $label$3 }
	if ( ((int_64)$3 == (int_64)$2) ){ goto $label$3 }
	if ( (int_64)($3 == 0) ){ goto $label$2 }
	CALL eosio_assert(CALL $fimport$35($3), [3008])
	$5 = *($1)
	goto $label$2 
	
.LABEL $label$3
	*($6 + [8]) = (int_64)0
	
.LABEL $label$2
	*($6 + [4]) = ($6 + [8])
	*($6) = ($6 + [16])
	CALL $159(($6 + [24]), $4, $5, $6)
	*($0) = *($6 + [24])
	$0 = [0]
	$2 = *($6 + [8])
	
.LOOP $label$4:
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	CALL $72(($6 + [24]), $1, $2, (int_64)0)
	$2 = *(*($6 + [28]) + [8])
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[18]) ){ goto $label$4 }
	CALL eosio_assert([0], [3040])
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [1664])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1712])
	*($5 + [104]) = *($1 + [8])
	*($1 + [16]) = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(int_64 *(*($3))) / (float_64)*(*(*($3 + [4]) + [4]) + [32])) + (float_64)(CASTING float_64)(int_64 *($1 + [16]))))
	$4 = *($1)
	*($1 + [80]) = (*($1 + [80]) + [1])
	CALL eosio_assert([1], [1776])
	*($5 + [96]) = ($5 + [84])
	*($5 + [92]) = $5
	*($5 + [88]) = $5
	CALL $157(($5 + [88]), $1)
	CALL db_update_i64(*($1 + [88]), $2, $5, [84])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [120]) = *(($1 + [8]))
	if ( (CALL memcmp(($5 + [104]), ($5 + [120]), [8]) == 0) ){ goto $label$2 }
	$3 = *($1 + [92])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020384829779738624, ($5 + [112]), $4)
	*(($1 + [92])) = $3
	
.LABEL $label$3
	CALL db_idx64_update($3, $2, ($5 + [120]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [128])
}

void .FUNC $70 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [528])
	*([0] + [4]) = $15
	*($15 + [432]) = $1
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)1397703940), [3360])
	$10 = *($3)
	if ( ($10 & [1]) ){ goto $label$2 }
	$10 = uint_32($10 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$10 = *($3 + [4])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$10 == (int_32)[66]), [3072])
	if ( (*($3) & [1]) ){ goto $label$4 }
	$10 = ($3 + [1])
	goto $label$3 
	
.LABEL $label$4
	$10 = *($3 + [8])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)*($10 + [12]) == (int_32)[45]), [3120])
	CALL $346(($15 + [416]), $3, [13], [53], $3)
	$10 = ($10 & [1])
	$10 = *($15 + [416])
	*($15 + [372]) = ( *($15 + [420]) ? uint_32($10 >> [1]) : $10 )
	*($15 + [368]) = ( *($15 + [424]) ? (($15 + [416]) | [1]) : $10 )
	*($15 + [88 align=4]) = *($15 + [368])
	CALL _ZN6abieos20string_to_public_keyENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE(($15 + [376]), ($15 + [88]))
	CALL $346(($15 + [352]), $3, [0], [12], $3)
	$3 = ( *($15 + [360]) ? (($15 + [352]) | [1]) : (*($15 + [352]) & [1]) )
	$10 = [-1]
	
.LOOP $label$5:
	$9 = ($3 + $10)
	$4 = ($10 + [1])
	$10 = $4
	if ( *(($9 + [1])) ){ goto $label$5 }
	$14 = (CASTING uint_64)(uint_32 $4)
	$1 = (int_64)0
	$13 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$6:
	$12 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$14) ){ goto $label$7 }
	$10 = *($3)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$10 = ($10 + [165])
	goto $label$8 
	
.LABEL $label$9
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$11 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	goto $label$10 
	
.LABEL $label$11
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$10
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$6 }
	*($15 + [344]) = $11
	*($15 + [305]) = *($15 + [378])
	*($15 + [304]) = *($15 + [377])
	*($15 + [306]) = *($15 + [379])
	*($15 + [307]) = *($15 + [380])
	*($15 + [308]) = *($15 + [381])
	*($15 + [309]) = *($15 + [382])
	*($15 + [310]) = *($15 + [383])
	*($15 + [311]) = *((($15 + [376]) + [8]))
	*($15 + [312]) = *(($15 + [385]))
	*($15 + [313]) = *(($15 + [386]))
	*($15 + [314]) = *(($15 + [387]))
	*($15 + [315]) = *((($15 + [376]) + [12]))
	*($15 + [316]) = *(($15 + [389]))
	*($15 + [317]) = *(($15 + [390]))
	*($15 + [318]) = *(($15 + [391]))
	*($15 + [319]) = *(($15 + [392]))
	*($15 + [320]) = *(($15 + [393]))
	*($15 + [321]) = *(($15 + [394]))
	*($15 + [322]) = *(($15 + [395]))
	*($15 + [323]) = *((($15 + [376]) + [20]))
	*($15 + [324]) = *(($15 + [397]))
	*($15 + [325]) = *(($15 + [398]))
	*($15 + [326]) = *(($15 + [399]))
	*($15 + [327]) = *((($15 + [376]) + [24]))
	*($15 + [328]) = *(($15 + [401]))
	*($15 + [329]) = *(($15 + [402]))
	*($15 + [330]) = *(($15 + [403]))
	*($15 + [331]) = *(($15 + [404]))
	*($15 + [332]) = *(($15 + [405]))
	*($15 + [333]) = *(($15 + [406]))
	*($15 + [334]) = *(($15 + [407]))
	*($15 + [335]) = *((($15 + [376]) + [32]))
	*($15 + [336]) = *((($15 + [376]) + [33]))
	*($15 + [264]) = [1]
	*($15 + [472]) = [0]
	CALL memcpy((($15 + [472]) | [4]), ($15 + [304]), [33])
	*(($10 = (($15 + [264]) + [12]))) = [0]
	*($15 + [512]) = [1]
	*($15 + [268 align=4]) = (int_64)0
	$3 = CALL $323([44])
	$9 = ($3 + [44])
	*($10) = $9
	*($15 + [268]) = $3
	CALL memcpy($3, ($15 + [472]), [44])
	*((($15 + [264]) + [8])) = $9
	*((($15 + [264]) + [20])) = [0]
	*((($15 + [264]) + [24])) = [0]
	*((($15 + [264]) + [32])) = [0]
	*(($15 + [300])) = [0]
	*($15 + [280]) = [0]
	*($15 + [292]) = [0]
	CALL _ZN5eosio11buyrambytesEm(($15 + [248]), [4096])
	CALL eosio_assert([1], [288])
	$1 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	
.LOOP $label$16:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	$10 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$10 = [0]
	
.LABEL $label$12
	CALL eosio_assert($10, [352])
	CALL eosio_assert([1], [288])
	$1 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	
.LOOP $label$21:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$21 }
	
.LABEL $label$20
	$10 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$10 = [0]
	
.LABEL $label$17
	CALL eosio_assert($10, [352])
	CALL eosio_assert([1], [288])
	$1 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$25 }
	
.LOOP $label$26:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$23 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$26 }
	
.LABEL $label$25
	$10 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$10 = [0]
	
.LABEL $label$22
	CALL eosio_assert($10, [352])
	CALL eosio_assert(((int_64)1397703940 == (int_64)1397703940), [1840])
	CALL eosio_assert([1], [1888])
	CALL eosio_assert([1], [1920])
	$11 = *($15 + [256])
	CALL eosio_assert(((int_64)$11 == (int_64)1397703940), [1840])
	$1 = *($15 + [248])
	$13 = ((int_64)$1 + (int_64)4000)
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [1888])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [1920])
	CALL eosio_assert(((int_64)1397703940 == (int_64)1397703940), [1840])
	$13 = ((int_64)$1 + (int_64)5000)
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [1888])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [1920])
	$5 = *(($2 + [8]))
	$3 = ((int_64)1397703940 == (int_64)$5)
	CALL eosio_assert($3, [1456])
	$12 = *($2)
	CALL eosio_assert(((int_64)$13 <= (int_64)$12), [3152])
	CALL eosio_assert($3, [3184])
	$13 = ((int_64)$12 + (int_64)-3500)
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [3232])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [3264])
	CALL eosio_assert(((int_64)$5 == (int_64)1397703940), [3184])
	$13 = ((int_64)$12 + (int_64)-4000)
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [3232])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [3264])
	CALL eosio_assert(((int_64)$11 == (int_64)$5), [3184])
	$6 = (int_64)
	CALL eosio_assert(((int_64)$6($13 - $1)) > (int_64)-4611686018427387904), [3232])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [3264])
	CALL eosio_assert(((int_64)$5 == (int_64)1397703940), [3184])
	$7 = ((int_64)$6 + (int_64)-1000)
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [3232])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [3264])
	$1 = (int_64)0
	$12 = (int_64)59
	$3 = [656]
	$11 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$1 > (uint_64)(int_64)4) ){ goto $label$32 }
	$10 = *($3)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$10 = ($10 + [165])
	goto $label$30 
	
.LABEL $label$32
	$13 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$28
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$11 = ((int_64)$13 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$27 }
	$8 = *($0)
	$1 = (int_64)0
	$12 = (int_64)59
	$3 = [2864]
	$14 = (int_64)0
	
.LOOP $label$33:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$38 }
	$10 = *($3)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$10 = ($10 + [165])
	goto $label$36 
	
.LABEL $label$38
	$13 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$37
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$35
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$34
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$33 }
	*($15 + [480]) = $14
	*($15 + [472]) = $8
	*($15 + [240]) = [0]
	*($15 + [232]) = (int_64)0
	*((($3 = CALL $323([16])) + [12])) = *((($15 + [472]) + [12]))
	*(($3 + [4])) = *($15 + [476])
	*($15 + [232]) = $3
	*($3) = *($15 + [472])
	$10 = ($3 + [16])
	*($15 + [240]) = $10
	*(($3 + [8])) = *($15 + [480])
	*($15 + [236]) = $10
	*($15 + [136]) = *($0)
	*($15 + [144]) = *($15 + [344])
	CALL $166((($15 + [136]) + [16]), ($15 + [264]))
	CALL $166(($15 + [192]), ($15 + [264]))
	CALL $167($11, ($15 + [232]), ($15 + [136]))
	$3 = *(($15 + [220]))
	if ( ($3 == 0) ){ goto $label$39 }
	*(($15 + [224])) = $3
	CALL $324($3)
	
.LABEL $label$39
	$3 = *(($15 + [208]))
	if ( ($3 == 0) ){ goto $label$40 }
	*(($15 + [212])) = $3
	CALL $324($3)
	
.LABEL $label$40
	$3 = *(($15 + [196]))
	if ( ($3 == 0) ){ goto $label$41 }
	*(($15 + [200])) = $3
	CALL $324($3)
	
.LABEL $label$41
	$3 = *(($15 + [180]))
	if ( ($3 == 0) ){ goto $label$42 }
	*(($15 + [184])) = $3
	CALL $324($3)
	
.LABEL $label$42
	$3 = *(($15 + [168]))
	if ( ($3 == 0) ){ goto $label$43 }
	*(($15 + [172])) = $3
	CALL $324($3)
	
.LABEL $label$43
	$3 = *(($15 + [156]))
	if ( ($3 == 0) ){ goto $label$44 }
	*(($15 + [160])) = $3
	CALL $324($3)
	
.LABEL $label$44
	$3 = *($15 + [232])
	if ( ($3 == 0) ){ goto $label$45 }
	*($15 + [236]) = $3
	CALL $324($3)
	
.LABEL $label$45
	$1 = (int_64)0
	$12 = (int_64)59
	$3 = [656]
	$11 = (int_64)0
	
.LOOP $label$46:
	if ( ((uint_64)$1 > (uint_64)(int_64)4) ){ goto $label$51 }
	$10 = *($3)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$50 }
	$10 = ($10 + [165])
	goto $label$49 
	
.LABEL $label$51
	$13 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$50
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$49
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$48
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$47
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$11 = ((int_64)$13 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$46 }
	$8 = *($0)
	$1 = (int_64)0
	$12 = (int_64)59
	$3 = [2864]
	$14 = (int_64)0
	
.LOOP $label$52:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$57 }
	$10 = *($3)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$56 }
	$10 = ($10 + [165])
	goto $label$55 
	
.LABEL $label$57
	$13 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$56
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$55
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$54
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$53
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$52 }
	*($15 + [128]) = $14
	*($15 + [120]) = $8
	*((($3 = CALL $323([16])) + [8])) = *($15 + [128])
	*($3) = *($15 + [120])
	$1 = *($0)
	$13 = *($15 + [344])
	*(($10 = (($15 + [104]) + [8]))) = *((($15 + [248]) + [8]))
	*($15 + [104]) = *($15 + [248])
	*(($9 = (($15 + [440]) + [8]))) = *($10)
	*($15 + [440]) = *($15 + [104])
	*($15 + [456]) = $3
	$3 = ($3 + [16])
	*($15 + [464]) = $3
	*($15 + [460]) = $3
	*($15 + [480]) = $13
	*($15 + [472]) = $1
	*(($3 = (($15 + [472]) + [24]))) = *($9)
	*((($15 + [56]) + [8])) = *($15 + [480])
	*($15 + [488]) = *($15 + [440])
	*((($15 + [56]) + [24])) = *($3)
	*((($15 + [56]) + [16])) = *($15 + [488])
	*($15 + [56]) = *($15 + [472])
	CALL $168($11, (int_64)4520896354024685568, ($15 + [456]), ($15 + [56]))
	$3 = *($15 + [456])
	if ( ($3 == 0) ){ goto $label$58 }
	*($15 + [460]) = $3
	CALL $324($3)
	
.LABEL $label$58
	$1 = (int_64)0
	$12 = (int_64)59
	$3 = [656]
	$11 = (int_64)0
	
.LOOP $label$59:
	if ( ((uint_64)$1 > (uint_64)(int_64)4) ){ goto $label$64 }
	$10 = *($3)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$63 }
	$10 = ($10 + [165])
	goto $label$62 
	
.LABEL $label$64
	$13 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$63
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$62
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$61
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$60
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$11 = ((int_64)$13 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$59 }
	$8 = *($0)
	$1 = (int_64)0
	$12 = (int_64)59
	$3 = [2864]
	$14 = (int_64)0
	
.LOOP $label$65:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$70 }
	$10 = *($3)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$69 }
	$10 = ($10 + [165])
	goto $label$68 
	
.LABEL $label$70
	$13 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$69
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$68
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$67
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$66
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$65 }
	*($15 + [448]) = $14
	*($15 + [440]) = $8
	*((($3 = CALL $323([16])) + [8])) = *($15 + [448])
	*($3) = *($15 + [440])
	$1 = *($0)
	$13 = *($15 + [344])
	*(($10 = (($15 + [456]) + [6]))) = *((($15 + [97]) + [6]))
	*(($9 = (($15 + [456]) + [4]))) = *((($15 + [97]) + [4]))
	*($15 + [456]) = *($15 + [97 align=1])
	$4 = ($3 + [16])
	*($15 + [124]) = $4
	*($15 + [120]) = $3
	*($15 + [128]) = $4
	*($15 + [472]) = $1
	*($15 + [480]) = $13
	*($15 + [488]) = (int_64)500
	*(($15 + [496])) = (int_64)1397703940
	*($15 + [504]) = (int_64)3500
	*(($15 + [512])) = (int_64)1397703940
	*($15 + [520]) = [1]
	*(($15 + [527])) = *($10)
	*(($15 + [525])) = *($9)
	*($15 + [521 align=1]) = *($15 + [456])
	$15 = CALL memcpy($15, ($15 + [472]), [56])
	CALL $169($11, (int_64)5378043540636893184, ($15 + [120]), $15)
	$3 = *($15 + [120])
	if ( ($3 == 0) ){ goto $label$71 }
	*($15 + [124]) = $3
	CALL $324($3)
	
.LABEL $label$71
	if ( ((int_64)$6 < (int_64)1001) ){ goto $label$72 }
	$1 = (int_64)0
	$12 = (int_64)59
	$3 = [3296]
	$11 = (int_64)0
	
.LOOP $label$73:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$78 }
	$10 = *($3)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$77 }
	$10 = ($10 + [165])
	goto $label$76 
	
.LABEL $label$78
	$13 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$77
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$76
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$75
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$74
	$3 = ($3 + [1])
	$12 = ((int_64)$12 + (int_64)-5)
	$11 = ((int_64)$13 | (int_64)$11)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$73 }
	$6 = *($0)
	$1 = (int_64)0
	$12 = (int_64)59
	$3 = [2864]
	$14 = (int_64)0
	
.LOOP $label$79:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$84 }
	$10 = *($3)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$83 }
	$10 = ($10 + [165])
	goto $label$82 
	
.LABEL $label$84
	$13 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$83
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$82
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$81
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$80
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$79 }
	*($15 + [448]) = $14
	*($15 + [440]) = $6
	*((($3 = CALL $323([16])) + [8])) = *($15 + [448])
	*($3) = *($15 + [440])
	CALL $338(($15 + [456]), [3312], ($15 + [352]))
	$10 = *($15 + [460])
	*($15 + [460]) = [0]
	$9 = *($15 + [456])
	$1 = *($15 + [432])
	*($15 + [456]) = [0]
	$13 = *($0)
	$4 = *($15 + [464])
	*($15 + [464]) = [0]
	*(($15 + [496])) = $5
	*($15 + [120]) = $3
	$3 = ($3 + [16])
	*($15 + [128]) = $3
	*($15 + [124]) = $3
	*($15 + [488]) = $7
	*($15 + [472]) = $13
	*($15 + [480]) = $1
	*($15 + [504]) = $9
	*(($15 + [508])) = $10
	*(($3 = ($15 + [512]))) = $4
	CALL $170($11, (int_64)-3617168760277827584, ($15 + [120]), ($15 + [472]))
	if ( ((*($15 + [504]) & [1]) == 0) ){ goto $label$85 }
	CALL $324(*($3))
	
.LABEL $label$85
	$3 = *($15 + [120])
	if ( ($3 == 0) ){ goto $label$86 }
	*($15 + [124]) = $3
	CALL $324($3)
	
.LABEL $label$86
	if ( ((*($15 + [456]) & [1]) == 0) ){ goto $label$72 }
	CALL $324(*(($15 + [464])))
	
.LABEL $label$72
	$1 = *($0)
	*($15 + [476]) = ($15 + [432])
	*($15 + [472]) = ($15 + [344])
	CALL $171(($15 + [440]), ($0 + [104]), $1, ($15 + [472]))
	$3 = [0]
	$1 = *($15 + [432])
	
.LOOP $label$88:
	if ( (int_64)($1 == 0) ){ goto $label$87 }
	CALL $72(($15 + [472]), $0, $1, (int_64)0)
	$1 = *(*($15 + [476]) + [8])
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[18]) ){ goto $label$88 }
	CALL eosio_assert([0], [3040])
	
.LABEL $label$87
	$3 = *(($15 + [292]))
	if ( ($3 == 0) ){ goto $label$89 }
	*(($15 + [296])) = $3
	CALL $324($3)
	
.LABEL $label$89
	$3 = *(($15 + [280]))
	if ( ($3 == 0) ){ goto $label$90 }
	*(($15 + [284])) = $3
	CALL $324($3)
	
.LABEL $label$90
	$3 = *($15 + [268])
	if ( ($3 == 0) ){ goto $label$91 }
	*(($15 + [272])) = $3
	CALL $324($3)
	
.LABEL $label$91
	if ( ((*($15 + [352]) & [1]) == 0) ){ goto $label$92 }
	CALL $324(*(($15 + [360])))
	
.LABEL $label$92
	if ( ((*($15 + [416]) & [1]) == 0) ){ goto $label$93 }
	CALL $324(*(($15 + [424])))
	
.LABEL $label$93
	*([0] + [4]) = ($15 + [528])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = ($3 & [1])
	$3 = *($2)
	$3 = ( *($2 + [4]) ? uint_32($3 >> [1]) : $5 )
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = ( *($2 + [8]) ? ($2 + [1]) : $5 )
	$2 = [0]
	
.LOOP $label$5:
	$5 = ($4 + $2)
	if ( ((int_32)*($5) == (int_32)[64]) ){ goto $label$3 }
	$2 = ($2 + [1])
	if ( ($2 <= $3) ){ goto $label$5 }
	
.LABEL $label$4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$2 = CALL strlen([2592])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$5 = (($2 + [16]) & [-16])
	$3 = CALL $323($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $3
	*($0 + [4]) = $2
	
.LABEL $label$7
	CALL memcpy($3, [2592], $2)
	
.LABEL $label$6
	$2 = ($3 + $2)
	goto $label$2 
	
.LABEL $label$3
	*($5) = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	$5 = ($5 + [1])
	$2 = CALL strlen($5)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$11 }
	*($0) = ($2 << [1])
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$4 = (($2 + [16]) & [-16])
	$3 = CALL $323($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $3
	*($0 + [4]) = $2
	
.LABEL $label$10
	CALL memcpy($3, $5, $2)
	
.LABEL $label$9
	$2 = ($3 + $2)
	
.LABEL $label$2
	*($2) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL $325($0)
}

void .FUNC $76 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [128])
	*([0] + [4]) = $13
	if ( (CALL is_account($3) == 0) ){ goto $label$1 }
	$11 = *($4)
	if ( (int_64)($11 == 0) ){ goto $label$1 }
	$9 = (int_64)0
	CALL eosio_assert(((int_64)$11 > (int_64)0), [2832])
	$8 = (int_64)59
	$7 = [2864]
	$10 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$7 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$6 = ($6 + [165])
	goto $label$5 
	
.LABEL $label$7
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$3
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$2 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [896]
	$12 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$13 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$6 = ($6 + [165])
	goto $label$11 
	
.LABEL $label$13
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$9
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$12 = ((int_64)$11 | (int_64)$12)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$8 }
	*((($13 + [8]) + [28])) = *(($4 + [12]))
	*((($13 + [8]) + [24])) = *(($4 + [8]))
	*((($13 + [8]) + [20])) = *(($4 + [4]))
	*($13 + [16]) = $3
	*($13 + [8]) = $2
	*($13 + [24]) = *($4)
	CALL $345((($13 + [8]) + [32]), $5)
	*($13 + [64]) = $12
	*($13 + [56]) = $1
	*(($7 = CALL $323([16]))) = $2
	*($7 + [8]) = $10
	*((($13 + [56]) + [32])) = [0]
	$6 = ($7 + [16])
	*((($13 + [56]) + [24])) = $6
	*((($13 + [56]) + [20])) = $6
	*($13 + [72]) = $7
	*($13 + [84]) = [0]
	*((($13 + [56]) + [36])) = [0]
	$7 = *($13 + [40])
	$6 = ( *((($13 + [8]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($6 + [32])
	$9 = (CASTING uint_64)(uint_32 $6)
	$6 = (($13 + [56]) + [28])
	
.LOOP $label$14:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$14 }
	if ( ($7 == 0) ){ goto $label$16 }
	CALL $66($6, $7)
	$6 = *(($13 + [88]))
	$7 = *(($13 + [84]))
	goto $label$15 
	
.LABEL $label$16
	$6 = [0]
	$7 = [0]
	
.LABEL $label$15
	*($13 + [116]) = $7
	*($13 + [112]) = $7
	*($13 + [120]) = $6
	*($13 + [96]) = ($13 + [112])
	*($13 + [104]) = ($13 + [8])
	CALL $152(($13 + [104]), ($13 + [96]))
	CALL $153(($13 + [112]), ($13 + [56]))
	$7 = *($13 + [112])
	CALL send_inline($7, (*($13 + [116]) - $7))
	$7 = *($13 + [112])
	if ( ($7 == 0) ){ goto $label$17 }
	*($13 + [116]) = $7
	CALL $324($7)
	
.LABEL $label$17
	$7 = *($13 + [84])
	if ( ($7 == 0) ){ goto $label$18 }
	*(($13 + [88])) = $7
	CALL $324($7)
	
.LABEL $label$18
	$7 = *($13 + [72])
	if ( ($7 == 0) ){ goto $label$19 }
	*(($13 + [76])) = $7
	CALL $324($7)
	
.LABEL $label$19
	if ( ((*($13 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL $324(*(($13 + [48])))
	
.LABEL $label$1
	*([0] + [4]) = ($13 + [128])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$2 = ( *($1 + [8]) ? ($1 + [1]) : (*($1) & [1]) )
	if ( (CALL strncmp($2, [2752], [6]) == 0) ){ goto $label$21 }
	if ( (CALL strncmp($2, [2768], [5]) == 0) ){ goto $label$20 }
	if ( (CALL strncmp($2, [2784], [8]) == 0) ){ goto $label$16 }
	if ( (CALL strncmp($2, [2800], [7]) == 0) ){ goto $label$12 }
	$5 = [0]
	if ( CALL strncmp($2, [2816], [9]) ){ goto $label$2 }
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$3 = ($2 + [9])
	$2 = CALL strlen($3)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$5 }
	*($6) = ($2 << [1])
	$5 = ($6 | [1])
	if ( $2 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$21
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$3 = ($2 + [6])
	$2 = CALL strlen($3)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$19 }
	*($6) = ($2 << [1])
	$5 = ($6 | [1])
	if ( $2 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$3 = ($2 + [5])
	$2 = CALL strlen($3)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$15 }
	*($6) = ($2 << [1])
	$5 = ($6 | [1])
	if ( $2 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$19
	$4 = (($2 + [16]) & [-16])
	$5 = CALL $323($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $5
	*($6 + [4]) = $2
	
.LABEL $label$18
	CALL memcpy($5, $3, $2)
	
.LABEL $label$17
	*(($5 + $2)) = [0]
	if ( (*($1) & [1]) ){ goto $label$23 }
	*($1) = [0]
	goto $label$22 
	
.LABEL $label$23
	*(*(($1 + [8]))) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$22
	CALL $328($1, [0])
	*(($1 + [8])) = *(($6 + [8]))
	*($1) = *($6)
	$5 = [2]
	goto $label$2 
	
.LABEL $label$16
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$3 = ($2 + [8])
	$2 = CALL strlen($3)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$11 }
	*($6) = ($2 << [1])
	$5 = ($6 | [1])
	if ( $2 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$15
	$4 = (($2 + [16]) & [-16])
	$5 = CALL $323($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $5
	*($6 + [4]) = $2
	
.LABEL $label$14
	CALL memcpy($5, $3, $2)
	
.LABEL $label$13
	*(($5 + $2)) = [0]
	if ( (*($1) & [1]) ){ goto $label$25 }
	*($1) = [0]
	goto $label$24 
	
.LABEL $label$25
	*(*(($1 + [8]))) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$24
	CALL $328($1, [0])
	*(($1 + [8])) = *(($6 + [8]))
	*($1) = *($6)
	$5 = [1]
	goto $label$2 
	
.LABEL $label$12
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$3 = ($2 + [7])
	$2 = CALL strlen($3)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$8 }
	*($6) = ($2 << [1])
	$5 = ($6 | [1])
	if ( $2 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$11
	$4 = (($2 + [16]) & [-16])
	$5 = CALL $323($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $5
	*($6 + [4]) = $2
	
.LABEL $label$10
	CALL memcpy($5, $3, $2)
	
.LABEL $label$9
	*(($5 + $2)) = [0]
	if ( (*($1) & [1]) ){ goto $label$27 }
	*($1) = [0]
	goto $label$26 
	
.LABEL $label$27
	*(*(($1 + [8]))) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$26
	$5 = [0]
	CALL $328($1, [0])
	*(($1 + [8])) = *(($6 + [8]))
	*($1) = *($6)
	goto $label$2 
	
.LABEL $label$8
	$4 = (($2 + [16]) & [-16])
	$5 = CALL $323($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $5
	*($6 + [4]) = $2
	
.LABEL $label$7
	CALL memcpy($5, $3, $2)
	
.LABEL $label$6
	*(($5 + $2)) = [0]
	if ( (*($1) & [1]) ){ goto $label$29 }
	*($1) = [0]
	goto $label$28 
	
.LABEL $label$29
	*(*(($1 + [8]))) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$28
	CALL $328($1, [0])
	*(($1 + [8])) = *(($6 + [8]))
	*($1) = *($6)
	$5 = [3]
	goto $label$2 
	
.LABEL $label$5
	$4 = (($2 + [16]) & [-16])
	$5 = CALL $323($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $5
	*($6 + [4]) = $2
	
.LABEL $label$4
	CALL memcpy($5, $3, $2)
	
.LABEL $label$3
	*(($5 + $2)) = [0]
	if ( (*($1) & [1]) ){ goto $label$31 }
	*($1) = [0]
	goto $label$30 
	
.LABEL $label$31
	*(*(($1 + [8]))) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$30
	CALL $328($1, [0])
	*(($1 + [8])) = *(($6 + [8]))
	*($1) = *($6)
	$5 = [4]
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [16])
	return $5
	
.LABEL $label$1
	CALL $325($6)
	return (unreachable)
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $323([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [2916]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $346($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $328($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [80])
	*([0] + [4]) = $11
	*($11 + [64]) = [0]
	*($11 + [68 align=4]) = (int_64)0
	$10 = ( [2880] ? [2592] : ((int_64)*($2) < (int_64)0) )
	$3 = CALL strlen($10)
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($11 + [64]) = ($3 << [1])
	$7 = (($11 + [64]) | [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($3 + [16]) & [-16])
	$7 = CALL $323($6)
	*($11 + [64]) = ($6 | [1])
	*($11 + [72]) = $7
	*($11 + [68]) = $3
	
.LABEL $label$3
	CALL memcpy($7, $10, $3)
	
.LABEL $label$2
	$10 = [0]
	*(($7 + $3)) = [0]
	$5 = *($2 + [8])
	$4 = CALL llabs(*($2))
	CALL _ZNSt3__19to_stringEy(($11 + [48]), $4)
	$9 = ((int_64)$5 & (int_64)255)
	if ( (int_64)($9 == 0) ){ goto $label$5 }
	$8 = (int_64))((int_64)0 - $9)
	$9 = (int_64)1
	
.LOOP $label$6:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$6 }
	CALL _ZNSt3__19to_stringEy(($11 + [32]), ((uint_64)$4 / (uint_64)$9))
	if ( (*($11 + [48]) & [1]) ){ goto $label$8 }
	*($11 + [48]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*($11 + [56])) = [0]
	*($11 + [52]) = [0]
	
.LABEL $label$7
	CALL $328(($11 + [48]), [0])
	$7 = (($11 + [32]) + [8])
	*((($11 + [48]) + [8])) = *($7)
	*($11 + [48]) = *($11 + [32])
	CALL _ZNSt3__19to_stringEy(($11 + [16]), ((int_64)((uint_64)$4 % (uint_64)$9) + (int_64)$9))
	CALL $338(($11 + [32]), [2896], CALL $336(($11 + [16]), [0], [1]))
	$3 = *($11 + [32])
	$2 = ($3 & [1])
	CALL $330(($11 + [48]), ( *($11 + [40]) ? (($11 + [32]) | [1]) : $2 ), ( *($11 + [36]) ? uint_32($3 >> [1]) : $2 ))
	if ( ((*($11 + [32]) & [1]) == 0) ){ goto $label$9 }
	CALL $324(*($7))
	
.LABEL $label$9
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $324(*($11 + [24]))
	
.LABEL $label$5
	CALL $156(($11 + [16]), ($11 + [64]), ($11 + [48]))
	$3 = CALL $331(($11 + [16]), [2912])
	$2 = ($3 + [8])
	*((($11 + [32]) + [8])) = *($2)
	*($11 + [32]) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($2) = [0]
	*($11 + [8]) = [0]
	*($11) = (int_64)0
	$9 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( (int_64)($9) == 0) ){ goto $label$11 }
	
.LOOP $label$12:
	CALL $332($11, int_32(((CASTING uint_32)(uint_64 $9) << [24]) >> [24]))
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$12 }
	$7 = *(($11 + [8]))
	$10 = *($11 + [4])
	$3 = *($11)
	goto $label$10 
	
.LABEL $label$11
	$7 = [0]
	$3 = [0]
	
.LABEL $label$10
	$2 = ($3 & [1])
	$3 = CALL $330(($11 + [32]), ( $7 ? ($11 | [1]) : $2 ), ( $10 ? uint_32(($3 & [254]) >> [1]) : $2 ))
	$9 = *($3)
	*($3) = (int_64)0
	*($0) = $9
	$3 = ($3 + [8])
	*(($0 + [8])) = *($3)
	*($3) = [0]
	if ( ((*($11) & [1]) == 0) ){ goto $label$13 }
	CALL $324(*(($11 + [8])))
	
.LABEL $label$13
	if ( ((*($11 + [32]) & [1]) == 0) ){ goto $label$14 }
	CALL $324(*($11 + [40]))
	
.LABEL $label$14
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$15 }
	CALL $324(*($11 + [24]))
	
.LABEL $label$15
	if ( ((*($11 + [48]) & [1]) == 0) ){ goto $label$16 }
	CALL $324(*($11 + [56]))
	
.LABEL $label$16
	if ( ((*($11 + [64]) & [1]) == 0) ){ goto $label$17 }
	CALL $324(*($11 + [72]))
	
.LABEL $label$17
	*([0] + [4]) = ($11 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $325(($11 + [64]))
}

void .FUNC $78 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	*($10 + [28]) = $2
	*($10 + [24]) = $6
	*($10) = $1
	$7 = *(($0 + [488]))
	$9 = *(($0 + [492]))
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$1 }
	$6 = ($9 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$9 = $6
	$2 = ($6 + [-24])
	$6 = $2
	if ( ((int_32)($2 + $8) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = ($0 + [464])
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$5 }
	$6 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [152]) == (int_32)$2), [672])
	if ( $6 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$6 = CALL db_find_i64(*(($0 + [464])), *(($0 + [472])), (int_64)-4132858188709494784, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $143($2, $6)
	CALL eosio_assert(((int_32)*($6 + [152]) == (int_32)$2), [672])
	goto $label$3 
	
.LABEL $label$4
	$1 = *($0)
	*($10 + [32]) = $10
	CALL $144(($10 + [40]), $2, $1, ($10 + [32]))
	$6 = *($10 + [44])
	
.LABEL $label$3
	*($10 + [4]) = $4
	*($10) = $3
	*($10 + [8]) = $5
	*($10 + [12]) = ($10 + [28])
	*($10 + [16]) = ($10 + [24])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1216])
	CALL $145($2, $6, (int_64)0, $10)
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [768])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $323([40])
	$6 = CALL $142($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [28])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $141(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $324($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $259 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [352])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [352])
	return $0
}

void .FUNC $258 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $324($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $324($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $312 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [1664])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1712])
	*($5 + [104]) = *($1 + [8])
	*($1 + [32]) = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(int_64 *(*($3))) / (float_64)*(*($3 + [4]))) + (float_64)(CASTING float_64)(int_64 *($1 + [32]))))
	$4 = *($1)
	CALL eosio_assert([1], [1776])
	*($5 + [96]) = ($5 + [84])
	*($5 + [92]) = $5
	*($5 + [88]) = $5
	CALL $157(($5 + [88]), $1)
	CALL db_update_i64(*($1 + [88]), $2, $5, [84])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [120]) = *(($1 + [8]))
	if ( (CALL memcmp(($5 + [104]), ($5 + [120]), [8]) == 0) ){ goto $label$2 }
	$3 = *($1 + [92])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020384829779738624, ($5 + [112]), $4)
	*(($1 + [92])) = $3
	
.LABEL $label$3
	CALL db_idx64_update($3, $2, ($5 + [120]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [128])
}

void .FUNC $313 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($2 + [4]), ($3 + [32]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [1648])
	CALL memcpy(*($2 + [4]), ($3 + [40]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($2 + [4]), ($0 + [48]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((int_32)(*($2 + [8]) - $3) > (int_32)[7]), [1648])
	CALL memcpy(*($2 + [4]), ($0 + [56]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($2 + [4]), ($0 + [64]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $314 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($1 + [24])
	$7 = *(($1 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$3 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$1), [672])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)7035924439720001536, $2)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL $301($1, $6)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$1), [672])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $315 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1584])
	$4 = CALL $323([64])
	$6 = CALL $306($4)
	*($4 + [48]) = $1
	CALL $318($3, $6)
	*($8 + [72]) = (($8 + [16]) + [44])
	*($8 + [68]) = ($8 + [16])
	*($8 + [64]) = ($8 + [16])
	CALL $317(($8 + [64]), $6)
	$5 = *($4)
	*($4 + [52]) = CALL db_store_i64(*($1 + [8]), (int_64)7035924439720001536, $2, $5, ($8 + [16]), [44])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [64]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$3 = *($4 + [52])
	*($8 + [12]) = $3
	$7 = ($1 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($6 + [8]) = $5
	*($6 + [16]) = $3
	*($8 + [64]) = [0]
	*($6) = $4
	*($7) = ($6 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $308(($1 + [24]), ($8 + [64]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($8 + [64])
	*($8 + [64]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $324($1)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [80])
}

void .FUNC $316 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [1664])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1712])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1776])
	*($5 + [56]) = ($5 + [44])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $317(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $5, [44])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $317 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $251 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [768])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $323([72])
	$4 = CALL $259($6)
	*($6 + [56]) = $0
	CALL $261(($8 + [32]), $4)
	*($6 + [64]) = [-1]
	*($6 + [60]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [60])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $258(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $324($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $250 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$2 = (*([0] + [4]) - [176])
	*([0] + [4]) = $2
	$5 = *($0 + [12])
	$3 = [0]
	*(($2 + [152])) = [0]
	*($2 + [136]) = (int_64)-1
	*($2 + [144]) = (int_64)0
	*($2 + [120]) = *($0)
	*($2 + [128]) = ((uint_64)((uint_64)(int_64))($1 - $5) / (uint_64)$5) % (uint_64)(int_64)100)
	*($2 + [156]) = [0]
	*($2 + [112]) = ($2 + [120])
	*((($2 + [88]) + [8])) = [0]
	*(($15 = ($2 + [104]))) = [0]
	*($2 + [92]) = ($2 + [112])
	*($2 + [100]) = ($2 + [112])
	*(($2 = CALL memset($2, [0], [80])) + [168]) = (int_64)0
	CALL $253(($2 + [160]), ($2 + [112]), ($2 + [168]))
	if ( (*($2 + [164]) == 0) ){ goto $label$1 }
	$4 = ($2 + [100])
	
.LOOP $label$2:
	*($2 + [168]) = *($4)
	if ( ((int_64)*(*(CALL $254(($2 + [168])) + [4])) != (int_64)*($0)) ){ goto $label$3 }
	CALL $254($4)
	*($2 + [168]) = (int_64)0
	CALL $253(($2 + [160]), ($2 + [112]), ($2 + [168]))
	if ( ((int_32)*($15) != (int_32)*($2 + [164])) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($2 + [168]) = *($4)
	*(($2 + ($3 << [3]))) = *(*(CALL $254(($2 + [168])) + [4]))
	CALL $254($4)
	*($2 + [168]) = (int_64)0
	CALL $253(($2 + [160]), ($2 + [112]), ($2 + [168]))
	$3 = ($3 + [1])
	if ( ((int_32)$3 > (int_32)[9]) ){ goto $label$1 }
	if ( ((int_32)*($15) != (int_32)*($2 + [164])) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = CALL db_lowerbound_i64(*($2 + [120]), *((($2 + [120]) + [8])), (int_64)-5069073155046244352, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $251(($2 + [120]), $4)
	$6 = ($2 + [72])
	$7 = ($2 + [64])
	$8 = ($2 + [56])
	$9 = ($2 + [48])
	$10 = ($2 + [40])
	$11 = ($2 + [32])
	$12 = ($2 + [24])
	$13 = ($2 + [16])
	$3 = [1]
	
.LOOP $label$5:
	$5 = *($4)
	if ( ((int_64)$5 == (int_64)*($0)) ){ goto $label$7 }
	if ( ((int_64)*($2) == (int_64)$5) ){ goto $label$7 }
	if ( ((int_64)*($2 + [8]) == (int_64)$5) ){ goto $label$7 }
	if ( ((int_64)*($13) == (int_64)$5) ){ goto $label$7 }
	if ( ((int_64)*($12) == (int_64)$5) ){ goto $label$7 }
	if ( ((int_64)*($11) == (int_64)$5) ){ goto $label$7 }
	if ( ((int_64)*($10) == (int_64)$5) ){ goto $label$7 }
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$7 }
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$7 }
	if ( ((int_64)*($7) == (int_64)$5) ){ goto $label$7 }
	if ( ((int_64)*($6) == (int_64)$5) ){ goto $label$7 }
	$15 = [0]
	$14 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($14, [3568])
	CALL eosio_assert($14, [2048])
	$14 = CALL db_next_i64(*($4 + [60]), ($2 + [168]))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$8 }
	$15 = CALL $251(($2 + [120]), $14)
	
.LABEL $label$8
	CALL $262(($2 + [120]), $4)
	if ( $15 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	CALL eosio_assert([1], [2048])
	$15 = [0]
	$4 = CALL db_next_i64(*($4 + [60]), ($2 + [168]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	$15 = CALL $251(($2 + [120]), $4)
	
.LABEL $label$9
	if ( ($15 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$14 = ((int_32)$3 < (int_32)[100])
	$3 = ($3 + [1])
	$4 = $15
	if ( $14 ){ goto $label$5 }
	
.LABEL $label$4
	$3 = *($2 + [144])
	if ( ($3 == 0) ){ goto $label$10 }
	$0 = ($2 + [148])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($4 + [-24])
	$15 = *($4)
	*($4) = [0]
	if ( ($15 == 0) ){ goto $label$14 }
	CALL $324($15)
	
.LABEL $label$14
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$13 }
	$4 = *(($2 + [144]))
	goto $label$11 
	
.LABEL $label$12
	$4 = $3
	
.LABEL $label$11
	*($0) = $3
	CALL $324($4)
	
.LABEL $label$10
	*([0] + [4]) = ($2 + [176])
}

void .FUNC $253 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-5069073155046244352, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)$4), [672])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $251($4, CALL $fimport$18(*($4), *($4 + [8]), (int_64)-5069073155046244352, $5))
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)$4), [672])
	
.LABEL $label$4
	*(($2 + [64])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $252 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1584])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $323([72])
	CALL $257($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [60])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $258(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $324($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $255 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [1664])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1712])
	*($1 + [24]) = *(*($3))
	*($5 + [72]) = *($1 + [8])
	$4 = *($1)
	CALL eosio_assert([1], [1776])
	*($5 + [64]) = ($5 + [52])
	*($5 + [60]) = $5
	*($5 + [56]) = $5
	CALL $256(($5 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [52])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [88]) = *(($1 + [8]))
	if ( (CALL memcmp(($5 + [72]), ($5 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [64])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5069073155046244352, ($5 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $254 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($9 + [8]) = (int_64)0
	$7 = *($0 + [4])
	if ( ($7 == 0) ){ goto $label$2 }
	$5 = *($7 + [64])
	if ( ((int_32)$5 != (int_32)[-1]) ){ goto $label$3 }
	$5 = *(*($0))
	$5 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-5069073155046244352, $9, *($7))
	*(*(($0 + [4])) + [64]) = $5
	
.LABEL $label$3
	$6 = CALL db_idx64_previous($5, ($9 + [8]))
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [4368])
	goto $label$1 
	
.LABEL $label$2
	$7 = *(*($0))
	$7 = CALL db_idx64_end(*($7), *($7 + [8]), (int_64)-5069073155046244352)
	CALL eosio_assert(((int_32)$7 != (int_32)[-1]), [4304])
	$6 = CALL db_idx64_previous($7, ($9 + [8]))
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [4304])
	
.LABEL $label$1
	$2 = *($9 + [8])
	$3 = *($1 + [24])
	$1 = *(*($0))
	$8 = *(($1 + [28]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	$7 = ($8 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$5:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$4 }
	$8 = $7
	$5 = ($7 + [-24])
	$7 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$7 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$1), [672])
	goto $label$6 
	
.LABEL $label$7
	$7 = CALL $251($1, CALL $fimport$18(*($1), *($1 + [8]), (int_64)-5069073155046244352, $2))
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$1), [672])
	
.LABEL $label$6
	*(($0 + [4])) = $7
	*(($7 + [64])) = $6
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC $257 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	$4 = CALL $259($0)
	*($0 + [56]) = $1
	$1 = *($2)
	CALL $260(*($2 + [4]), $4)
	*($7 + [64]) = ($7 + [52])
	*($7 + [60]) = $7
	*($7 + [56]) = $7
	CALL $256(($7 + [56]), $4)
	$3 = *($0)
	*($0 + [60]) = CALL db_store_i64(*($1 + [8]), (int_64)-5069073155046244352, *(*($2 + [8])), $3, $7, [52])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($1 + [8]))
	$5 = *(*(($2 + [8])))
	$6 = *($0)
	*($7 + [72]) = *($0 + [8])
	*($0 + [64]) = CALL db_idx64_store($3, (int_64)-5069073155046244352, $5, $6, ($7 + [72]))
	*([0] + [4]) = ($7 + [80])
	return $0
}

int_32 .FUNC $256 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $181 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1648])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1648])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1648])
	CALL memcpy(*($4), ($7 + [8]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[1]), [1648])
	CALL memcpy(*($4), ($7 + [16]), [2])
	$6 = (*($4) + [2])
	*($4) = $6
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $180 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[44]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [1648])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = CALL $183($0, $7)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[1]), [1648])
	CALL memcpy(*($5 + [4]), ($7 + [40]), [2])
	*($5 + [4]) = (*($5 + [4]) + [2])
	$7 = ($7 + [44])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $138 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $324($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $324($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}

void .FUNC $269 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [800])
	CALL memcpy(($0 + [16]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($4 + [8]) = $0
	CALL $270(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $130 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $324($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $324($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = [0]
	$6 = ( *($1 + [8]) ? ($1 + [1]) : (*($1) & [1]) )
	$2 = *($6)
	$3 = (($2 + [-98]) & [255])
	if ( ((uint_32)$3 > (uint_32)[19]) ){ goto $label$1 }
	$4 = (uint_32([679937] >> $3) & [1])
	
.LABEL $label$1
	CALL eosio_assert($4, [2720])
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$3 = ($6 + [1])
	$4 = CALL strlen($3)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($7) = ($4 << [1])
	$6 = ($7 | [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = (($4 + [16]) & [-16])
	$6 = CALL $323($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $4
	
.LABEL $label$4
	CALL memcpy($6, $3, $4)
	
.LABEL $label$3
	*(($6 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$7 }
	*($1) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($1 + [8]))) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$6
	CALL $328($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	*([0] + [4]) = ($7 + [16])
	return int_32(($2 << [24]) >> [24])
	
.LABEL $label$2
	CALL $325($7)
	return (unreachable)
}

void .FUNC $133 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1584])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $323([64])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [352])
	*($4 + [48]) = $1
	CALL $134(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [52])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $135(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $324($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	$2 = *($0)
	$4 = *($0 + [4])
	$5 = *($4)
	CALL $68(($8 + [48]), $5)
	*($8 + [48]) = ((int_64)*($8 + [48]) + (int_64)1)
	CALL $95(($5 + [504]), ($8 + [48]), *($5))
	*($1) = *($8 + [48])
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [32]) = *(*($4 + [8]))
	$5 = *($4 + [12])
	*($1 + [16]) = *($5)
	*(($1 + [24])) = *(($5 + [8]))
	*($1 + [36]) = *(*($4 + [16]))
	*($1 + [40]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000)
	*($8 + [56]) = ($8 + [45])
	*($8 + [52]) = $8
	*($8 + [48]) = $8
	CALL $136(($8 + [48]), $1)
	$3 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)5445039061531623424, *(*($0 + [8])), $3, $8, [45])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($2 + [8]))
	$6 = *(*(($0 + [8])))
	$7 = *($1)
	*($8 + [104]) = *(($1 + [40]))
	*($1 + [56]) = CALL db_idx64_store($3, (int_64)5445039061531623424, $6, $7, ($8 + [104]))
	*([0] + [4]) = ($8 + [112])
}

void .FUNC $135 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $324($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $324($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [36]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	$2 = *($0)
	$4 = *($0 + [4])
	$5 = *($4)
	CALL $68(($8 + [48]), $5)
	*($8 + [48]) = ((int_64)*($8 + [48]) + (int_64)1)
	CALL $95(($5 + [504]), ($8 + [48]), *($5))
	*($1) = *($8 + [48])
	*($1 + [8]) = *(*($4 + [4]))
	$5 = *($4 + [8])
	*($1 + [16]) = *($5)
	*(($1 + [24])) = *(($5 + [8]))
	*($1 + [32]) = *(*($4 + [12]))
	*($1 + [40]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000)
	*($8 + [56]) = ($8 + [44])
	*($8 + [52]) = $8
	*($8 + [48]) = $8
	CALL $139(($8 + [48]), $1)
	$3 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-4293731249866407936, *(*($0 + [8])), $3, $8, [44])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($2 + [8]))
	$6 = *(*(($0 + [8])))
	$7 = *($1)
	*($8 + [104]) = *(($1 + [8]))
	*($1 + [56]) = CALL db_idx64_store($3, (int_64)-4293731249866407936, $6, $7, ($8 + [104]))
	*([0] + [4]) = ($8 + [112])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [96])
	*([0] + [4]) = $2
	*(($3 = $2) + [92]) = $0
	*($3 + [80]) = *($1)
	*($3 + [84]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $280(($3 + [8]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [4]) = ($3 + [80])
	*($3) = ($3 + [92])
	CALL $281($3, ($3 + [8]))
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$6 }
	CALL $324(*(($3 + [36])))
	
.LABEL $label$6
	*([0] + [4]) = ($3 + [96])
	return [1]
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC $300 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $64($0, ($1 + [24]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $208 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	CALL $64(*($1), ($0 + [8]))
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [48]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [56]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $209 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	$4 = [0]
	*($0 + [32]) = [0]
	*($0 + [40]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($0 + [48])) = (int_64)1398362884
	CALL eosio_assert([1], [288])
	$3 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [352])
	*(($0 + [64])) = (int_64)1398362884
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [288])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [352])
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $211(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $202 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [768])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $323([64])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [288])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [352])
	*($4 + [40]) = [0]
	*($4 + [32 align=4]) = (int_64)0
	*($4 + [48]) = $0
	CALL $205(($8 + [32]), $4)
	*($4 + [52]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [52])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $201($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$15 }
	CALL $324(*(($5 + [40])))
	
.LABEL $label$15
	CALL $324($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $203 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [52]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2208])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4407053710358740992)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [2144])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2144])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $202(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $200 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$7 = *($0 + [4])
	$3 = *($7)
	$6 = ($3 + [400])
	$8 = *($6)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$4 = ($3 + [384])
	$5 = CALL db_lowerbound_i64(*($4), *(($3 + [392])), (int_64)4407053710358740992, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $202($4, $5)
	*($10 + [4]) = [0]
	*($10) = $4
	$8 = *(*(CALL $203($10) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [400])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [2080])
	*($1) = *($6)
	*($1 + [8]) = *(*($7 + [4]))
	$3 = *($7 + [8])
	*($1 + [16]) = *($3)
	*(($1 + [24])) = *(($3 + [8]))
	CALL $326(($1 + [32]), *($7 + [12]))
	$7 = *($1 + [32])
	$3 = ( *(($1 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($3 + [33])
	$8 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ($7 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	CALL $204($10, $1)
	$8 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)4407053710358740992, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $201 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $324(*(($1 + [40])))
	
.LABEL $label$11
	CALL $324($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $324($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $206 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0) = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	$4 = [0]
	*(($0 + [16])) = [0]
	*(($0 + [40])) = (int_64)1398362884
	CALL eosio_assert([1], [288])
	$3 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [352])
	*(($0 + [56])) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [288])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [352])
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $208(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $207 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [160])
	*([0] + [4]) = $6
	$2 = *($1)
	CALL $345(($6 + [64]), ($1 + [8]))
	*(($6 + [60])) = *(($1 + [44]))
	*(($4 = (($6 + [48]) + [8]))) = *(($1 + [40]))
	*($6 + [52]) = *(($1 + [36]))
	*($6 + [48]) = *($1 + [32])
	$3 = *($1 + [24])
	*(($5 = (($6 + [32]) + [8]))) = *(($1 + [56]))
	*($6 + [32]) = *($1 + [48])
	*((($6 + [96]) + [8])) = *($5)
	*((($6 + [80]) + [8])) = *($4)
	*($6 + [96]) = *($6 + [32])
	*($6 + [80]) = *($6 + [48])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $345(($6 + [144]), ($6 + [64]))
	*(($4 = (($6 + [128]) + [8]))) = *((($6 + [80]) + [8]))
	*(($5 = (($6 + [112]) + [8]))) = *((($6 + [96]) + [8]))
	*($6 + [128]) = *($6 + [80])
	*($6 + [112]) = *($6 + [96])
	*((($6 + [16]) + [8])) = *($4)
	*($6 + [16]) = *($6 + [128])
	*(($6 + [8])) = *($5)
	*($6) = *($6 + [112])
	CALL void $0((int_32 $2), (int_64 ($6 + [144])), (int_32 $3), (int_64 ($6 + [16])), (int_32 $6), (int_32 $1))
	if ( ((*($6 + [144]) & [1]) == 0) ){ goto $label$2 }
	CALL $324(*($6 + [152]))
	
.LABEL $label$2
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$3 }
	CALL $324(*($6 + [72]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [160])
}

int_32 .FUNC $204 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $97($0, ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [44]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

int_32 .FUNC $205 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $64($0, ($1 + [32]))
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [800])
	CALL memcpy(($1 + [44]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC _ZN6abieos14get_base58_mapEv (int_32 $0)
{
	int_32 $1
	if ( *([0] + [16]) ){ goto $label$1 }
	$1 = [-256]
	
.LOOP $label$2:
	*(($1 + [288])) = [255]
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$2 }
	$1 = [0]
	
.LOOP $label$3:
	*((*(($1 + [464])) + [32])) = $1
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[59]) ){ goto $label$3 }
	*([0] + [16]) = [1]
	
.LABEL $label$1
	CALL memcpy($0, [32], [256])
}

void .FUNC _ZN6abieos20string_to_public_keyENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	$2 = *($1 + [4])
	if ( ($2 <= [3]) ){ goto $label$4 }
	$1 = *($1)
	if ( ((int_32)CALL strlen([528]) != (int_32)[3]) ){ goto $label$5 }
	if ( (CALL memcmp($1, [528], [3]) == 0) ){ goto $label$3 }
	
.LABEL $label$5
	if ( ($2 <= [7]) ){ goto $label$4 }
	if ( ((int_32)CALL strlen([544]) != (int_32)[7]) ){ goto $label$4 }
	if ( (CALL memcmp($1, [544], [7]) == 0) ){ goto $label$2 }
	
.LABEL $label$4
	CALL eosio_assert([0], [560])
	*($0) = [0]
	CALL memset(($0 + [1]), [0], [33])
	goto $label$1 
	
.LABEL $label$3
	*($3 + [28]) = ($2 + [-3])
	*($3 + [24]) = ($1 + [3])
	*($3 + [8 align=4]) = *($3 + [24])
	CALL $10(($3 + [40]), ($3 + [8]))
	*($0) = [0]
	CALL memcpy(CALL $fimport$38(($0 + [1]), [0], [33]), ($3 + [40]), [33])
	goto $label$1 
	
.LABEL $label$2
	*($3 + [36]) = ($2 + [-7])
	*($3 + [32]) = ($1 + [7])
	*($3 + [16 align=4]) = *($3 + [32])
	CALL $10(($3 + [40]), ($3 + [16]))
	*($0) = [1]
	CALL memcpy(CALL $fimport$38(($0 + [1]), [0], [33]), ($3 + [40]), [33])
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [80])
}

void .FUNC _ZN11eosiosystem14exchange_state21convert_from_exchangeERNS0_9connectorEN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	float_64 $5
	int_64 $6
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($1 + [8])), [384])
	$4 = *($2)
	$6 = *($3)
	$5 = CALL pow(((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(CASTING float_64)(int_64 (int_64))(*($1) - $6))) + (float_64)(float_64)1), ((float_64)(float_64)1e3 / (float_64)*($2 + [16])))
	*($1) = (int_64))(*($1) - $6)
	$6 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $4) * (float_64)((float_64)$5 + (float_64)(float_64)-1)))
	*($0) = $6
	*($2) = (int_64))(*($2) - $6)
	$4 = *($2 + [8])
	*($0 + [8]) = $4
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [288])
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$1 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	
.LABEL $label$1
	CALL eosio_assert($1, [352])
}

void .FUNC _ZN11eosiosystem14exchange_state7convertEN5eosio5assetENS1_11symbol_typeE (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_64 $4
	int_64 $5
	float_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	$5 = *(($1 + [48]))
	$7 = *(($1 + [24]))
	$4 = *($2 + [8])
	if ( ((int_64)$4 != (int_64)*($1 + [8])) ){ goto $label$10 }
	if ( ((int_64)$7 != (int_64)$3) ){ goto $label$9 }
	$9 = ($2 + [8])
	*(($8 = (($10 + [80]) + [8]))) = *($9)
	$7 = *($2)
	*((($10 + [16]) + [12])) = *((($10 + [80]) + [12]))
	*((($10 + [16]) + [8])) = *($8)
	*($10 + [80]) = $7
	*($10 + [20]) = *($10 + [84])
	*($10 + [16]) = *($10 + [80])
	CALL _ZN11eosiosystem14exchange_state21convert_from_exchangeERNS0_9connectorEN5eosio5assetE(($10 + [96]), $1, ($1 + [16]), ($10 + [16]))
	*($9) = *((($10 + [96]) + [8]))
	*($2) = *($10 + [96])
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$4 != (int_64)$7) ){ goto $label$8 }
	$4 = *($1)
	$8 = ($1 + [16])
	$7 = *($2)
	$6 = CALL pow(((float_64)((float_64)(CASTING float_64)(int_64 $7) / (float_64)(CASTING float_64)(int_64 ((int_64)*($8) + (int_64)$7))) + (float_64)(float_64)1), ((float_64)*(($1 + [32])) / (float_64)(float_64)1e3))
	*($8) = ((int_64)$7 + (int_64)*($8))
	$4 = (Rounds 0)(!(float_64)((float_64)(CASTING float_64)(int_64 $4) * (float_64)(float_64))((float_64)1 - $6))
	*($1) = ((int_64)$4) + (int_64)*($1))
	$5 = *(($1 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [288])
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$9 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$11 }
	goto $label$6 
	
.LABEL $label$9
	if ( ((int_64)$5 != (int_64)$3) ){ goto $label$5 }
	$9 = ($2 + [8])
	*(($8 = (($10 + [64]) + [8]))) = *($9)
	$7 = *($2)
	*((($10 + [32]) + [12])) = *((($10 + [64]) + [12]))
	*((($10 + [32]) + [8])) = *($8)
	*($10 + [64]) = $7
	*($10 + [36]) = *($10 + [68])
	*($10 + [32]) = *($10 + [64])
	CALL _ZN11eosiosystem14exchange_state21convert_from_exchangeERNS0_9connectorEN5eosio5assetE(($10 + [96]), $1, ($1 + [40]), ($10 + [32]))
	*($9) = *((($10 + [96]) + [8]))
	*($2) = *($10 + [96])
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$4 != (int_64)$5) ){ goto $label$4 }
	$4 = *($1)
	$8 = ($1 + [40])
	$7 = *($2)
	$6 = CALL pow(((float_64)((float_64)(CASTING float_64)(int_64 $7) / (float_64)(CASTING float_64)(int_64 ((int_64)*($8) + (int_64)$7))) + (float_64)(float_64)1), ((float_64)*(($1 + [56])) / (float_64)(float_64)1e3))
	*($8) = ((int_64)$7 + (int_64)*($8))
	$4 = (Rounds 0)(!(float_64)((float_64)(CASTING float_64)(int_64 $4) * (float_64)(float_64))((float_64)1 - $6))
	*($1) = ((int_64)$4) + (int_64)*($1))
	$5 = *(($1 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [288])
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	
.LOOP $label$16:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	$9 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$14 }
	goto $label$2 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [352])
	*(($2 + [8])) = $5
	*($2) = $4
	goto $label$1 
	
.LABEL $label$5
	CALL eosio_assert([0], [432])
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [416])
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	
.LABEL $label$2
	CALL eosio_assert($9, [352])
	*(($2 + [8])) = $5
	*($2) = $4
	
.LABEL $label$1
	$8 = ($2 + [8])
	if ( ((int_64)*($8) != (int_64)$3) ){ goto $label$18 }
	*($0) = *($2)
	*(($0 + [8])) = *($8)
	goto $label$17 
	
.LABEL $label$18
	$7 = *($8)
	*((($10 + [48]) + [8])) = $7
	$4 = *($2)
	*(($10 + [8])) = $7
	*($10 + [48]) = $4
	*($10 + [4]) = *($10 + [52])
	*($10) = *($10 + [48])
	CALL _ZN11eosiosystem14exchange_state7convertEN5eosio5assetENS1_11symbol_typeE($0, $1, $10, $3)
	
.LABEL $label$17
	*([0] + [4]) = ($10 + [112])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN11eosiosystem14exchange_state19convert_to_exchangeERNS0_9connectorEN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	float_64 $5
	int_64 $6
	$4 = *($1)
	$6 = *($3)
	$5 = CALL pow(((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(CASTING float_64)(int_64 ((int_64)$6 + (int_64)*($2)))) + (float_64)(float_64)1), ((float_64)*($2 + [16]) / (float_64)(float_64)1e3))
	*($2) = ((int_64)$6 + (int_64)*($2))
	$6 = (Rounds 0)(!(float_64)((float_64)(CASTING float_64)(int_64 $4) * (float_64)(float_64))((float_64)1 - $5))
	*($0) = $6)
	$4 = *($1 + [8])
	*($0 + [8]) = $4
	*($1) = ((int_64)$6 + (int_64)*($1))
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [288])
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$2 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [352])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0 + [4])
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [24]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [32]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [40]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [48]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [56]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	*($1 + [68]) = *(*($0 + [8]))
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $324($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $324($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [976])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [816]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [656]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [832])
	
.LABEL $label$7
	*(($9 + [416])) = $0
	*(($9 + [424])) = (int_64)-1
	*($9 + [384]) = $0
	*($9 + [392]) = (int_64)15461882265660
	*($9 + [400]) = (int_64)-4294880896
	*($9 + [408]) = $0
	*(($9 + [432])) = [0]
	*(($9 + [436])) = [0]
	*(($9 + [440])) = [0]
	*(($9 + [444])) = [0]
	*($9 + [448]) = $0
	*(($9 + [456])) = $0
	*(($9 + [464])) = (int_64)-1
	*(($9 + [472])) = [0]
	*(($9 + [476])) = [0]
	*(($9 + [480])) = [0]
	*(($9 + [484])) = [0]
	*($9 + [488]) = $0
	*(($9 + [496])) = $0
	*(($9 + [504])) = (int_64)-1
	*(($9 + [512])) = [0]
	*(($9 + [516])) = [0]
	*(($9 + [520])) = [0]
	*(($9 + [524])) = [0]
	*($9 + [528]) = $0
	*(($9 + [536])) = $0
	*(($9 + [544])) = (int_64)-1
	*(($9 + [552])) = [0]
	*(($9 + [556])) = [0]
	*(($9 + [560])) = [0]
	*(($9 + [564])) = [0]
	*($9 + [568]) = $0
	*(($9 + [576])) = $0
	*(($9 + [584])) = (int_64)-1
	*((($9 + [384]) + [208])) = [0]
	*(($9 + [596])) = [0]
	*(($9 + [600])) = [0]
	*(($9 + [604])) = [0]
	*($9 + [608]) = $0
	*(($9 + [616])) = $0
	*(($9 + [624])) = (int_64)-1
	*(($9 + [632])) = [0]
	*(($9 + [636])) = [0]
	*(($9 + [640])) = [0]
	*(($9 + [644])) = [0]
	*($9 + [648]) = $0
	*(($9 + [656])) = $0
	*(($9 + [664])) = (int_64)-1
	*(($9 + [672])) = [0]
	*(($9 + [676])) = [0]
	*(($9 + [680])) = [0]
	*(($9 + [684])) = [0]
	$6 = *($9 + [384])
	*($9 + [688]) = $6
	*(($9 + [696])) = $6
	*(($9 + [704])) = (int_64)-1
	*(($9 + [712])) = [0]
	*(($9 + [716])) = [0]
	*(($9 + [720])) = [0]
	*($9 + [728]) = $6
	*(($9 + [736])) = $6
	*(($9 + [744])) = (int_64)-1
	*(($9 + [752])) = [0]
	*(($9 + [756])) = [0]
	*(($9 + [760])) = [0]
	*($9 + [768]) = $6
	*(($9 + [776])) = $6
	*(($9 + [784])) = (int_64)-1
	*(($9 + [792])) = [0]
	*(($9 + [796])) = [0]
	*(($9 + [800])) = [0]
	*($9 + [808]) = $6
	*(($9 + [816])) = $6
	*(($9 + [824])) = (int_64)-1
	*(($9 + [832])) = [0]
	*(($9 + [836])) = [0]
	*(($9 + [840])) = [0]
	*($9 + [848]) = $6
	*(($9 + [856])) = $6
	*(($9 + [864])) = (int_64)-1
	*(($9 + [872])) = [0]
	*(($9 + [876])) = [0]
	*(($9 + [880])) = [0]
	*($9 + [888]) = $6
	*(($9 + [896])) = $6
	*(($9 + [904])) = (int_64)-1
	*(($9 + [912])) = [0]
	*(($9 + [916])) = [0]
	*(($9 + [920])) = [0]
	*($9 + [928]) = $6
	*(($9 + [936])) = $6
	*(($9 + [944])) = (int_64)-1
	*(($9 + [952])) = [0]
	*(($9 + [956])) = [0]
	*(($9 + [960])) = [0]
	*($9 + [968]) = $1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$14 }
	if ( ((int_64)$2 <= (int_64)-4293728845261722737) ){ goto $label$36 }
	if ( ((int_64)$2 > (int_64)4923676518068518911) ){ goto $label$35 }
	if ( ((int_64)$2 > (int_64)4147968814949429759) ){ goto $label$33 }
	if ( ((int_64)$2 == (int_64)-4293728845261722736) ){ goto $label$29 }
	if ( ((int_64)$2 == (int_64)-3066762336131497984) ){ goto $label$28 }
	if ( ((int_64)$2 != (int_64)3626411730319441920) ){ goto $label$14 }
	*($9 + [348]) = [0]
	*($9 + [344]) = [1]
	*($9 + [40 align=4]) = *($9 + [344])
	CALL $26(($9 + [384]), ($9 + [40]))
	goto $label$14 
	
.LABEL $label$36
	if ( ((int_64)$2 <= (int_64)-6215685131856773121) ){ goto $label$34 }
	if ( ((int_64)$2 > (int_64)-4497217113437317777) ){ goto $label$32 }
	if ( ((int_64)$2 == (int_64)-6215685131856773120) ){ goto $label$27 }
	if ( ((int_64)$2 == (int_64)-5003315193367756800) ){ goto $label$26 }
	if ( ((int_64)$2 != (int_64)-4992623624440512512) ){ goto $label$14 }
	*($9 + [380]) = [0]
	*($9 + [376]) = [2]
	*($9 + [8 align=4]) = *($9 + [376])
	CALL $18(($9 + [384]), ($9 + [8]))
	goto $label$14 
	
.LABEL $label$35
	if ( ((int_64)$2 > (int_64)5378331680157204479) ){ goto $label$31 }
	if ( ((int_64)$2 == (int_64)4923676518068518912) ){ goto $label$25 }
	if ( ((int_64)$2 == (int_64)4923676640792657920) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)5377995397639700480) ){ goto $label$14 }
	*($9 + [332]) = [0]
	*($9 + [328]) = [3]
	*($9 + [56 align=4]) = *($9 + [328])
	CALL $30(($9 + [384]), ($9 + [56]))
	goto $label$14 
	
.LABEL $label$34
	if ( ((int_64)$2 <= (int_64)-7297674945745649665) ){ goto $label$30 }
	if ( ((int_64)$2 == (int_64)-7297674945745649664) ){ goto $label$23 }
	if ( ((int_64)$2 == (int_64)-7226809094699840240) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)-7226741241131679744) ){ goto $label$14 }
	*($9 + [252]) = [0]
	*($9 + [248]) = [4]
	*($9 + [136 align=4]) = *($9 + [248])
	CALL $48(($9 + [384]), ($9 + [136]))
	goto $label$14 
	
.LABEL $label$33
	if ( ((int_64)$2 == (int_64)4147968814949429760) ){ goto $label$21 }
	if ( ((int_64)$2 == (int_64)4147968825145704448) ){ goto $label$20 }
	if ( ((int_64)$2 != (int_64)4923676291099525120) ){ goto $label$14 }
	*($9 + [372]) = [0]
	*($9 + [368]) = [5]
	*($9 + [16 align=4]) = *($9 + [368])
	CALL $20(($9 + [384]), ($9 + [16]))
	goto $label$14 
	
.LABEL $label$32
	if ( ((int_64)$2 == (int_64)-4497217113437317776) ){ goto $label$19 }
	if ( ((int_64)$2 == (int_64)-4417281810148360192) ){ goto $label$18 }
	if ( ((int_64)$2 != (int_64)-4293729609197535232) ){ goto $label$14 }
	*($9 + [276]) = [0]
	*($9 + [272]) = [6]
	*($9 + [112 align=4]) = *($9 + [272])
	CALL $42(($9 + [384]), ($9 + [112]))
	goto $label$14 
	
.LABEL $label$31
	if ( ((int_64)$2 == (int_64)5378331680157204480) ){ goto $label$17 }
	if ( ((int_64)$2 == (int_64)5445040692004221440) ){ goto $label$16 }
	if ( ((int_64)$2 != (int_64)5445040702200496128) ){ goto $label$14 }
	*($9 + [308]) = [0]
	*($9 + [304]) = [7]
	*($9 + [80 align=4]) = *($9 + [304])
	CALL $35(($9 + [384]), ($9 + [80]))
	goto $label$14 
	
.LABEL $label$30
	if ( ((int_64)$2 == (int_64)-8272139304635056128) ){ goto $label$15 }
	if ( ((int_64)$2 != (int_64)-7297850779904245760) ){ goto $label$14 }
	*($9 + [212]) = [0]
	*($9 + [208]) = [8]
	*($9 + [176 align=4]) = *($9 + [208])
	CALL $57(($9 + [384]), ($9 + [176]))
	goto $label$14 
	
.LABEL $label$29
	*($9 + [268]) = [0]
	*($9 + [264]) = [9]
	*($9 + [120 align=4]) = *($9 + [264])
	CALL $44(($9 + [384]), ($9 + [120]))
	goto $label$14 
	
.LABEL $label$28
	*($9 + [292]) = [0]
	*($9 + [288]) = [10]
	*($9 + [96 align=4]) = *($9 + [288])
	CALL $39(($9 + [384]), ($9 + [96]))
	goto $label$14 
	
.LABEL $label$27
	*($9 + [284]) = [0]
	*($9 + [280]) = [11]
	*($9 + [104 align=4]) = *($9 + [280])
	CALL $22(($9 + [384]), ($9 + [104]))
	goto $label$14 
	
.LABEL $label$26
	*($9 + [236]) = [0]
	*($9 + [232]) = [12]
	*($9 + [152 align=4]) = *($9 + [232])
	CALL $51(($9 + [384]), ($9 + [152]))
	goto $label$14 
	
.LABEL $label$25
	*($9 + [356]) = [0]
	*($9 + [352]) = [13]
	*($9 + [32 align=4]) = *($9 + [352])
	CALL $24(($9 + [384]), ($9 + [32]))
	goto $label$14 
	
.LABEL $label$24
	*($9 + [364]) = [0]
	*($9 + [360]) = [14]
	*($9 + [24 align=4]) = *($9 + [360])
	CALL $22(($9 + [384]), ($9 + [24]))
	goto $label$14 
	
.LABEL $label$23
	*($9 + [204]) = [0]
	*($9 + [200]) = [15]
	*($9 + [184 align=4]) = *($9 + [200])
	CALL $30(($9 + [384]), ($9 + [184]))
	goto $label$14 
	
.LABEL $label$22
	*($9 + [260]) = [0]
	*($9 + [256]) = [16]
	*($9 + [128 align=4]) = *($9 + [256])
	CALL $46(($9 + [384]), ($9 + [128]))
	goto $label$14 
	
.LABEL $label$21
	*($9 + [228]) = [0]
	*($9 + [224]) = [17]
	*($9 + [160 align=4]) = *($9 + [224])
	CALL $53(($9 + [384]), ($9 + [160]))
	goto $label$14 
	
.LABEL $label$20
	*($9 + [220]) = [0]
	*($9 + [216]) = [18]
	*($9 + [168 align=4]) = *($9 + [216])
	CALL $55(($9 + [384]), ($9 + [168]))
	goto $label$14 
	
.LABEL $label$19
	*($9 + [340]) = [0]
	*($9 + [336]) = [19]
	*($9 + [48 align=4]) = *($9 + [336])
	CALL $28(($9 + [384]), ($9 + [48]))
	goto $label$14 
	
.LABEL $label$18
	*($9 + [244]) = [0]
	*($9 + [240]) = [20]
	*($9 + [144 align=4]) = *($9 + [240])
	CALL $24(($9 + [384]), ($9 + [144]))
	goto $label$14 
	
.LABEL $label$17
	*($9 + [324]) = [0]
	*($9 + [320]) = [21]
	*($9 + [64 align=4]) = *($9 + [320])
	CALL $30(($9 + [384]), ($9 + [64]))
	goto $label$14 
	
.LABEL $label$16
	*($9 + [300]) = [0]
	*($9 + [296]) = [22]
	*($9 + [88 align=4]) = *($9 + [296])
	CALL $37(($9 + [384]), ($9 + [88]))
	goto $label$14 
	
.LABEL $label$15
	*($9 + [316]) = [0]
	*($9 + [312]) = [23]
	*($9 + [72 align=4]) = *($9 + [312])
	CALL $33(($9 + [384]), ($9 + [72]))
	
.LABEL $label$14
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [896]
	$7 = (int_64)0
	
.LOOP $label$37:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$42 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$3 = ($3 + [165])
	goto $label$40 
	
.LABEL $label$42
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$41
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$39
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$38
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$37 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$43 }
	*($9 + [196]) = [0]
	*($9 + [192]) = [24]
	*($9) = *($9 + [192])
	CALL $60(($9 + [384]), $9)
	
.LABEL $label$43
	CALL $61(($9 + [384]))
	*([0] + [4]) = ($9 + [976])
}

void .FUNC $17 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_64 $28
	int_64 $29
	int_64 $30
	int_64 $31
	float_64 $32
	int_32 $33
	int_32 $34
	int_32 $35
	$35 = (*([0] + [4]) - [400])
	*([0] + [4]) = $35
	$29 = (int_64)0
	$28 = (int_64)59
	$27 = [3424]
	$30 = (int_64)0
	
.LOOP $label$1:
	$31 = (int_64)0
	if ( ((uint_64)$29 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($27)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$31 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$28 & (int_64)4294967295))
	
.LABEL $label$2
	$27 = ($27 + [1])
	$29 = ((int_64)$29 + (int_64)1)
	$30 = ((int_64)$31 | (int_64)$30)
	$28 = ((int_64)$28 + (int_64)-5)
	if ( ((int_64)$28 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($30)
	CALL $19($0, (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294957296)))
	CALL _ZNSt3__19to_stringEy(($35 + [328]), $1)
	CALL $338(($35 + [376]), [4688], ($35 + [328]))
	$27 = CALL $331(($35 + [376]), [4704])
	$3 = ($27 + [8])
	*((($35 + [248]) + [8])) = *($3)
	*($35 + [248]) = *($27)
	*($27) = [0]
	*(($27 + [4])) = [0]
	*($3) = [0]
	CALL _ZNSt3__19to_stringEl(($35 + [344]), $2)
	$27 = *($35 + [344])
	$3 = ($27 & [1])
	$27 = CALL $330(($35 + [248]), ( *($35 + [352]) ? (($35 + [344]) | [1]) : $3 ), ( *($35 + [348]) ? uint_32($27 >> [1]) : $3 ))
	$3 = ($27 + [8])
	*((($35 + [112]) + [8])) = *($3)
	*($35 + [112]) = *($27)
	*($27) = [0]
	*(($27 + [4])) = [0]
	*($3) = [0]
	$27 = CALL $331(($35 + [112]), [4704])
	$3 = *($27)
	*($27) = [0]
	$34 = *($27 + [4])
	*($27 + [4]) = [0]
	$26 = *($27 + [8])
	*($27 + [8]) = [0]
	if ( (*($35 + [328]) & [1]) ){ goto $label$6 }
	*($35 + [328]) = [0]
	$27 = (($35 + [328]) + [8])
	goto $label$5 
	
.LABEL $label$6
	*(*($35 + [336])) = [0]
	*($35 + [332]) = [0]
	$27 = (($35 + [328]) + [8])
	
.LABEL $label$5
	CALL $328(($35 + [328]), [0])
	*($27) = $26
	*($35 + [328]) = $3
	*($35 + [332]) = $34
	if ( ((*($35 + [112]) & [1]) == 0) ){ goto $label$7 }
	CALL $324(*($35 + [120]))
	
.LABEL $label$7
	if ( ((*($35 + [344]) & [1]) == 0) ){ goto $label$8 }
	CALL $324(*(($35 + [352])))
	
.LABEL $label$8
	if ( ((*($35 + [248]) & [1]) == 0) ){ goto $label$9 }
	CALL $324(*($35 + [256]))
	
.LABEL $label$9
	if ( ((*($35 + [376]) & [1]) == 0) ){ goto $label$10 }
	CALL $324(*($35 + [384]))
	
.LABEL $label$10
	$29 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	if ( ((uint_64)((uint_64)((int_64)$29 & (int_64)4294967295) / (uint_64)*($0 + [8])) <= (uint_64)$1) ){ goto $label$12 }
	CALL $309(($35 + [320]), $0, $1, $2)
	$5 = ($0 + [144])
	$28 = *(($0 + [152]))
	$31 = *($0 + [144])
	*($35 + [312]) = (int_64)0
	$27 = [0]
	$3 = [0]
	$34 = CALL db_lowerbound_i64($31, $28, (int_64)-6712989628304982016, (int_64)0)
	if ( ((int_32)$34 < (int_32)[0]) ){ goto $label$13 }
	$3 = CALL $298($5, $34)
	
.LABEL $label$13
	$4 = (CASTING uint_32)(uint_64 $29)
	CALL eosio_assert([1], [288])
	$29 = (int_64)5459781
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $29) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$29 = (uint_64)$29 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$29) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$29 = (uint_64)$29 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$29) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$27 = ($27 + [1])
	if ( ((int_32)$27 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$34 = [1]
	$27 = ($27 + [1])
	if ( ((int_32)$27 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$34 = [0]
	
.LABEL $label$14
	CALL eosio_assert($34, [352])
	$29 = CALL current_time()
	*((($35 + [248]) + [28])) = [0]
	*((($35 + [248]) + [32])) = [0]
	*($35 + [260]) = [0]
	*($35 + [264]) = [0]
	*($35 + [268]) = [0]
	*($35 + [272]) = [0]
	*($35 + [248]) = ((CASTING uint_32)(uint_64 ((uint_64)$29 / (uint_64)(int_64)1000000)) + [60])
	*($35 + [284]) = [0]
	*(($17 = (($35 + [248]) + [40]))) = [0]
	*(($18 = ($35 + [292]))) = [0]
	*($35 + [296]) = [0]
	*(($35 + [300])) = [0]
	*(($35 + [304])) = [0]
	if ( ($3 == 0) ){ goto $label$20 }
	$12 = ($0 + [24])
	$11 = ($0 + [384])
	$10 = ($0 + [104])
	$9 = (($35 + [112]) + [48])
	$8 = (($35 + [112]) + [32])
	$7 = (($35 + [112]) + [20])
	$33 = (($35 + [248]) + [36])
	$6 = (($35 + [216]) | [1])
	$20 = (($35 + [344]) + [8])
	$24 = (($35 + [112]) + [64])
	$34 = [0]
	$13 = (int_64)0
	
.LOOP $label$21:
	if ( ((int_64)*($3 + [40]) == (int_64)$1) ){ goto $label$22 }
	CALL eosio_assert([1], [2048])
	$27 = CALL db_next_i64(*($3 + [68]), ($35 + [112]))
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$19 }
	$3 = CALL $298($5, $27)
	$34 = ($34 + [1])
	if ( ((int_32)$34 < (int_32)[64]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	$19 = ($3 + [16])
	*($20) = *($19)
	*($35 + [344]) = (int_64)0
	CALL eosio_assert([1], [288])
	$34 = ($34 + [1])
	$29 = (uint_64)*($20) >> (uint_64)(int_64)8)
	$27 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $29) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$29 = (uint_64)$29 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$29) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	
.LOOP $label$27:
	$29 = (uint_64)$29 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$29) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	$27 = ($27 + [1])
	if ( ((int_32)$27 < (int_32)[7]) ){ goto $label$27 }
	
.LABEL $label$26
	$26 = [1]
	$27 = ($27 + [1])
	if ( ((int_32)$27 < (int_32)[7]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$26 = [0]
	
.LABEL $label$23
	CALL eosio_assert($26, [352])
	*($35 + [244]) = [0]
	$27 = ($3 + [24])
	CALL $345(($35 + [232]), $27)
	if ( (*($3 + [24]) & [1]) ){ goto $label$29 }
	$27 = ($27 + [1])
	goto $label$28 
	
.LABEL $label$29
	$27 = *(($3 + [32]))
	
.LABEL $label$28
	$14 = CALL $88($0, $27, *($3 + [8]), *(*($35 + [324]) + [8]), ($35 + [244]), ($35 + [312]))
	$29 = *($3)
	*(($15 = (($35 + [216]) + [8]))) = [0]
	*($35 + [344]) = $14
	*($35 + [216]) = (int_64)0
	$27 = CALL strlen([4624])
	if ( ((uint_32)$27 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$27 >= (uint_32)[11]) ){ goto $label$32 }
	*($35 + [216]) = ($27 << [1])
	$26 = $6
	if ( $27 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$23 = (($27 + [16]) & [-16])
	$26 = CALL $323($23)
	*($15) = $26
	*($35 + [216]) = ($23 | [1])
	*($35 + [220]) = $27
	
.LABEL $label$31
	CALL memcpy($26, [4624], $27)
	
.LABEL $label$30
	*(($26 + $27)) = [0]
	*((($35 + [200]) + [12])) = *(($3 + [20]))
	*(($27 = (($35 + [200]) + [8]))) = *($19)
	*($35 + [204]) = *(($3 + [12]))
	*($35 + [200]) = *($3 + [8])
	$28 = *($3 + [48])
	*(($26 = (($35 + [184]) + [8]))) = *($20)
	*($35 + [184]) = *($35 + [344])
	*((($35 + [48]) + [8])) = *($27)
	*($35 + [48]) = *($35 + [200])
	*((($35 + [32]) + [8])) = *($26)
	*($35 + [32]) = *($35 + [184])
	CALL $242($0, $29, ($35 + [216]), $28, ($35 + [48]), ($35 + [32]))
	if ( ((*($35 + [216]) & [1]) == 0) ){ goto $label$33 }
	CALL $324(*($15))
	
.LABEL $label$33
	$15 = ($3 + [8])
	$16 = *($0)
	$29 = (int_64)0
	$31 = (int_64)59
	$27 = [2864]
	$30 = (int_64)0
	
.LOOP $label$34:
	if ( ((uint_64)$29 > (uint_64)(int_64)5) ){ goto $label$39 }
	$26 = *($27)
	if ( ((uint_32)(($26 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$26 = ($26 + [165])
	goto $label$37 
	
.LABEL $label$39
	$28 = (int_64)0
	if ( ((uint_64)$29 <= (uint_64)(int_64)11) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$26 = ( ($26 + [208]) ? [0] : ((($26 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$28 = (int_64)((int_64)(CASTING uint_64)(uint_32 $26) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	$28 = ((int_64)((int_64)$28 & (int_64)31) << (int_64)((int_64)$31 & (int_64)4294967295))
	
.LABEL $label$35
	$27 = ($27 + [1])
	$29 = ((int_64)$29 + (int_64)1)
	$30 = ((int_64)$28 | (int_64)$30)
	$31 = ((int_64)$31 + (int_64)-5)
	if ( ((int_64)$31 != (int_64)-6) ){ goto $label$34 }
	*(($21 = (($35 + [376]) + [8]))) = $30
	*($35 + [376]) = $16
	$29 = (int_64)0
	$31 = (int_64)59
	$27 = [4720]
	$30 = (int_64)0
	
.LOOP $label$40:
	if ( ((uint_64)$29 > (uint_64)(int_64)9) ){ goto $label$45 }
	$26 = *($27)
	if ( ((uint_32)(($26 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$26 = ($26 + [165])
	goto $label$43 
	
.LABEL $label$45
	$28 = (int_64)0
	if ( ((uint_64)$29 <= (uint_64)(int_64)11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$44
	$26 = ( ($26 + [208]) ? [0] : ((($26 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$28 = (int_64)((int_64)(CASTING uint_64)(uint_32 $26) << (int_64)56) >> (int_64)56)
	
.LABEL $label$42
	$28 = ((int_64)((int_64)$28 & (int_64)31) << (int_64)((int_64)$31 & (int_64)4294967295))
	
.LABEL $label$41
	$27 = ($27 + [1])
	$29 = ((int_64)$29 + (int_64)1)
	$30 = ((int_64)$28 | (int_64)$30)
	$31 = ((int_64)$31 + (int_64)-5)
	if ( ((int_64)$31 != (int_64)-6) ){ goto $label$40 }
	*($35 + [392]) = $30
	*((($35 + [112]) + [16])) = $2
	*(($22 = (($35 + [112]) + [8]))) = *(($3 + [40]))
	$23 = ($3 + [48])
	*($35 + [112]) = *($23)
	CALL $345($7, ($35 + [232]))
	$29 = *(($15 + [8]))
	$28 = *($15)
	*($9) = *($35 + [344])
	*(($9 + [8])) = *($20)
	*(($8 + [8])) = $29
	*($8) = $28
	*($24) = *($3)
	$26 = *($17)
	if ( ((uint_32)$26 >= (uint_32)*($18)) ){ goto $label$49 }
	*($26 + [16 align=4]) = (int_64)0
	$29 = *($0)
	*($26 + [8]) = *($35 + [392])
	*($26) = $29
	*(($15 = ($26 + [24]))) = [0]
	$27 = CALL $323([16])
	*($26 + [16]) = $27
	$25 = ($27 + [16])
	*($15) = $25
	*(($27 + [8])) = *($21)
	*($27) = *($35 + [376])
	*(($26 + [20])) = $25
	*($26 + [28]) = [0]
	*(($25 = ($26 + [32]))) = [0]
	*(($26 + [36])) = [0]
	$27 = *($7)
	$15 = ( *((($35 + [112]) + [24])) ? uint_32($27 >> [1]) : ($27 & [1]) )
	$27 = ($15 + [60])
	$29 = (CASTING uint_64)(uint_32 $15)
	$26 = ($26 + [28])
	
.LOOP $label$50:
	$27 = ($27 + [1])
	$29 = (uint_64)$29 >> (uint_64)(int_64)7
	if ( ((int_64)$29) != (int_64)0) ){ goto $label$50 }
	if ( ($27 == 0) ){ goto $label$48 }
	CALL $66($26, $27)
	$15 = *($25)
	$27 = *($26)
	goto $label$47 
	
.LABEL $label$49
	CALL $311($33, ($35 + [376]), $0, ($35 + [392]), ($35 + [112]))
	goto $label$46 
	
.LABEL $label$48
	$15 = [0]
	$27 = [0]
	
.LABEL $label$47
	*((($35 + [360]) + [8])) = $15
	*($35 + [364]) = $27
	*($35 + [360]) = $27
	*($35 + [96]) = ($35 + [360])
	*($35 + [104]) = ($35 + [112])
	CALL $310(($35 + [104]), ($35 + [96]))
	*($17) = (*($17) + [40])
	
.LABEL $label$46
	if ( ((*($7) & [1]) == 0) ){ goto $label$51 }
	CALL $324(*((($35 + [112]) + [28])))
	
.LABEL $label$51
	if ( (int_64)($14 == 0) ){ goto $label$52 }
	$29 = *($23)
	if ( ((int_64)$29 == (int_64)*($0)) ){ goto $label$52 }
	$32 = (float_64)1
	$28 = *($19)
	if ( ((int_64)$28 == (int_64)1397703940) ){ goto $label$53 }
	*($35 + [360]) = $12
	*($35 + [376]) = $28
	CALL $67(($35 + [112]), ($35 + [360]), ($35 + [376]))
	$27 = *($35 + [116])
	if ( ($27 == 0) ){ goto $label$55 }
	if ( ((int_64)*($35 + [376]) != (int_64)*($27 + [16])) ){ goto $label$55 }
	$32 = *($27 + [32])
	goto $label$54 
	
.LABEL $label$55
	$32 = (float_64)1
	
.LABEL $label$54
	$29 = *($23)
	
.LABEL $label$53
	*($35 + [104]) = $32
	CALL $72(($35 + [96]), $0, $29, (int_64)0)
	$27 = *($35 + [100])
	*($35 + [116]) = ($35 + [104])
	*($35 + [112]) = ($35 + [344])
	CALL eosio_assert(((int_32)$27 != (int_32)[0]), [1216])
	CALL $312($10, $27, (int_64)0, ($35 + [112]))
	$29 = *($23)
	*(($27 = (($35 + [80]) + [8]))) = *($20)
	*($35 + [80]) = *($35 + [344])
	CALL $156(($35 + [64]), ($35 + [328]), ($35 + [232]))
	*($21) = *($27)
	*($35 + [376]) = *($35 + [80])
	*($35 + [360]) = $29
	if ( ((int_64)*($35 + [376]) < (int_64)1) ){ goto $label$56 }
	$29 = *($0)
	*($35 + [112]) = $0
	*($22) = ($35 + [376])
	*((($35 + [112]) + [12])) = ($35 + [64])
	*($35 + [116]) = ($35 + [360])
	CALL $198(($35 + [392]), $11, $29, ($35 + [112]))
	
.LABEL $label$56
	if ( ((*($35 + [64]) & [1]) == 0) ){ goto $label$57 }
	CALL $324(*((($35 + [64]) + [8])))
	
.LABEL $label$57
	$13 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $13) + (float_64)((float_64)(CASTING float_64)(int_64 *($35 + [344])) / (float_64)*($35 + [104]))))
	
.LABEL $label$52
	$27 = [0]
	$26 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($26, [3568])
	CALL eosio_assert($26, [2048])
	$26 = CALL db_next_i64(*($3 + [68]), ($35 + [112]))
	if ( ((int_32)$26 < (int_32)[0]) ){ goto $label$58 }
	$27 = CALL $298($5, $26)
	
.LABEL $label$58
	CALL $299($5, $3)
	if ( ((*($35 + [232]) & [1]) == 0) ){ goto $label$59 }
	CALL $324(*((($35 + [232]) + [8])))
	
.LABEL $label$59
	if ( ($27 == 0) ){ goto $label$19 }
	$3 = $27
	if ( ((int_32)$34 < (int_32)[64]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$33 = ($35 + [284])
	$13 = (int_64)0
	
.LABEL $label$19
	if ( ((int_32)*(($35 + [288])) == (int_32)*($33)) ){ goto $label$60 }
	CALL $68(($35 + [112]), $0)
	*($35 + [128]) = ((int_64)*($35 + [128]) + (int_64)1)
	CALL $95(($0 + [504]), ($35 + [112]), *($0))
	$29 = *($35 + [128])
	*($35 + [120]) = (int_64)0
	*($35 + [112]) = $29
	$29 = *($0)
	CALL $220(($35 + [376]), ($35 + [248]))
	$27 = *($35 + [376])
	CALL send_deferred(($35 + [112]), $29, $27, (*($35 + [380]) - $27), [0])
	$27 = *($35 + [376])
	if ( ($27 == 0) ){ goto $label$60 }
	*($35 + [380]) = $27
	CALL $324($27)
	
.LABEL $label$60
	*(($35 + [144])) = [0]
	*($35 + [128]) = (int_64)-1
	$29 = *($0)
	*($35 + [112]) = $29
	*($35 + [120]) = $1
	*($35 + [136]) = (int_64)0
	$27 = CALL db_lowerbound_i64($29, $1, (int_64)-8272242484608761856, (int_64)0)
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$61 }
	$27 = CALL $302(($35 + [112]), $27)
	$34 = [1]
	
.LOOP $label$62:
	$3 = [0]
	$26 = ((int_32)$27 != (int_32)[0])
	CALL eosio_assert($26, [3568])
	CALL eosio_assert($26, [2048])
	$26 = CALL db_next_i64(*($27 + [20]), ($35 + [376]))
	if ( ((int_32)$26 < (int_32)[0]) ){ goto $label$63 }
	$3 = CALL $302(($35 + [112]), $26)
	
.LABEL $label$63
	CALL $303(($35 + [112]), $27)
	if ( ($3 == 0) ){ goto $label$61 }
	$26 = ((int_32)$34 < (int_32)[64])
	$34 = ($34 + [1])
	$27 = $3
	if ( $26 ){ goto $label$62 }
	
.LABEL $label$61
	*($35 + [384]) = (int_64)1397703940
	*((($35 + [16]) + [8])) = (int_64)1397703940
	*($35 + [376]) = $13
	*($35 + [16]) = $13
	CALL $216($0, (int_64)0, [0], ($35 + [16]))
	*($35 + [344]) = $4
	$27 = CALL gmtime(($35 + [344]))
	$29 = *($27 + [12])
	$3 = *($27 + [20])
	$27 = *($27 + [16])
	*($35 + [352]) = (int_64)1397703940
	*(($35 + [8])) = (int_64)1397703940
	*($35 + [344]) = $13
	*($35) = $13
	CALL $216($0, ((int_64)((int_64)$29 + (int_64)((int_64)(CASTING int_64)(int_32 ($3 + [1900])) * (int_64)10000)) + (int_64)((int_64)(CASTING int_64)(int_32 ($27 + [1])) * (int_64)100)), [0], $35)
	$34 = *($35 + [136])
	if ( ($34 == 0) ){ goto $label$64 }
	$26 = ($35 + [140])
	$27 = *($26)
	if ( ((int_32)$27 == (int_32)$34) ){ goto $label$66 }
	
.LOOP $label$67:
	$27 = ($27 + [-24])
	$3 = *($27)
	*($27) = [0]
	if ( ($3 == 0) ){ goto $label$68 }
	CALL $324($3)
	
.LABEL $label$68
	if ( ((int_32)$34 != (int_32)$27) ){ goto $label$67 }
	$27 = *(($35 + [136]))
	goto $label$65 
	
.LABEL $label$66
	$27 = $34
	
.LABEL $label$65
	*($26) = $34
	CALL $324($27)
	
.LABEL $label$64
	CALL $221(($35 + [248]))
	
.LABEL $label$12
	if ( ((*($35 + [328]) & [1]) == 0) ){ goto $label$69 }
	CALL $324(*(($35 + [336])))
	
.LABEL $label$69
	*([0] + [4]) = ($35 + [400])
	return (unreachable)
	
.LABEL $label$11
	CALL $325(($35 + [216]))
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [256])
	*([0] + [4]) = $7
	$2 = CALL memset($0, [0], [37])
	$6 = *($1 + [4])
	if ( ($6 == 0) ){ goto $label$1 }
	$5 = *($1)
	$3 = ($5 + $6)
	
.LOOP $label$2:
	if ( *([0] + [16]) ){ goto $label$3 }
	$1 = [-256]
	
.LOOP $label$4:
	*(($1 + [288])) = [255]
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$4 }
	$1 = [0]
	
.LOOP $label$5:
	*((*(($1 + [464])) + [32])) = $1
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[59]) ){ goto $label$5 }
	*([0] + [16]) = [1]
	
.LABEL $label$3
	$6 = *((CALL memcpy($7, [32], [256]) + *($5)))
	if ( ((int_32)$6 >= (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [592])
	
.LABEL $label$6
	$1 = [0]
	
.LOOP $label$7:
	$6 = (((int_32)*($4) * (int_32)[58]) + $6)
	*(($4 = ($2 + $1))) = $6
	$6 = int_32($6 >> [8])
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[37]) ){ goto $label$7 }
	if ( ($6 == 0) ){ goto $label$8 }
	CALL eosio_assert([0], [624])
	
.LABEL $label$8
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($2 + [36])
	
.LOOP $label$9:
	$6 = *($0)
	*($0) = *($1)
	*($1) = $6
	$1 = ($1 + [-1])
	$0 = ($0 + [1])
	if ( ($0 <= $1) ){ goto $label$9 }
	*([0] + [4]) = ($7 + [256])
}

void .FUNC _ZN5eosio11buyrambytesEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [144])
	*([0] + [4]) = $10
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [656]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$6 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [656]
	$9 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$12 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$2 = ($2 + [165])
	goto $label$10 
	
.LABEL $label$12
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$7 }
	$4 = [0]
	*(($10 + [136])) = [0]
	*($10 + [120]) = (int_64)-1
	*($10 + [128]) = (int_64)0
	*($10 + [112]) = $9
	*($10 + [104]) = $7
	$2 = [0]
	$3 = CALL db_find_i64($7, $9, (int_64)-5069606918720847872, (int_64)4995142087184830980)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$13 }
	$2 = CALL $12(($10 + [104]), $3)
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)($10 + [104])), [672])
	
.LABEL $label$13
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [736])
	CALL memcpy(($10 + [40]), $2, [64])
	*($10 + [32]) = (int_64)1296126464
	*($10 + [24]) = (CASTING uint_64)(uint_32 $1)
	CALL eosio_assert([1], [288])
	$6 = (int_64)5062994
	
.LOOP $label$15:
	$2 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	
.LOOP $label$17:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$17 }
	
.LABEL $label$16
	$2 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	CALL eosio_assert($2, [352])
	*((($10 + [8]) + [8])) = *((($10 + [24]) + [8]))
	*($10 + [8]) = *($10 + [24])
	CALL _ZN11eosiosystem14exchange_state7convertEN5eosio5assetENS1_11symbol_typeE($0, ($10 + [40]), ($10 + [8]), (int_64)1397703940)
	$0 = *($10 + [128])
	if ( ($0 == 0) ){ goto $label$18 }
	$1 = ($10 + [132])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$20 }
	
.LOOP $label$21:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$22 }
	CALL $324($2)
	
.LABEL $label$22
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$21 }
	$4 = *(($10 + [128]))
	goto $label$19 
	
.LABEL $label$20
	$4 = $0
	
.LABEL $label$19
	*($1) = $0
	CALL $324($4)
	
.LABEL $label$18
	*([0] + [4]) = ($10 + [144])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [768])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [8]) = $0
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	$6 = CALL $323([80])
	CALL $13($6)
	*($6 + [64]) = $0
	CALL $14(($8 + [8]), $6)
	*($8 + [24]) = $6
	$5 = *($6 + [8])
	*($8 + [8]) = $5
	$7 = *($6 + [68])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $15(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $324($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $13 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [352])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [352])
	*($0 + [40]) = (int_64)0
	*(($0 + [32])) = (int_64)4602678819172646912
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [352])
	*(($0 + [56])) = (int_64)4602678819172646912
	return $0
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [800])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [800])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$4 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [800])
	CALL memcpy($6, $4, [8])
	CALL eosio_assert(((int_32)($1 & [-4]) != (int_32)[8]), [800])
	$7 = ($6 + [8])
	CALL memcpy($7, ($4 + [8]), [4])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($4)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($7)
	$3 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 $4), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [48])
	*([0] + [4]) = $17
	$9 = (int_64)0
	$8 = (int_64)59
	$15 = [3424]
	$10 = (int_64)0
	
.LOOP $label$1:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$2 }
	$14 = *($15)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$14 = ($14 + [165])
	goto $label$3 
	
.LABEL $label$4
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($14 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$15 = ($15 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($10)
	$15 = CALL db_lowerbound_i64(*($0 + [344]), *(($0 + [352])), (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + [344])
	$13 = CALL $301($2, $15)
	$11 = (CASTING int_64)(int_32 $1)
	$3 = ($17 + [8])
	$4 = ($17 + [16])
	$5 = ($17 + [24])
	$6 = ($17 + [32])
	$7 = ($17 + [28])
	$12 = [0]
	
.LOOP $label$6:
	$9 = *($13)
	if ( ((uint_64)$9 >= (uint_64)$11) ){ goto $label$5 }
	if ( ((int_32)$12 > (int_32)[99]) ){ goto $label$5 }
	*($3) = $9
	*($4) = (int_64)-1
	*($5) = (int_64)0
	*($6) = [0]
	$8 = *($0)
	*($17) = $8
	$15 = CALL db_lowerbound_i64($8, $9, (int_64)-8272242484608761856, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$7 }
	$14 = CALL $302($17, $15)
	
.LOOP $label$8:
	CALL eosio_assert([1], [3568])
	CALL eosio_assert([1], [2048])
	$15 = [0]
	$1 = CALL db_next_i64(*($14 + [20]), ($17 + [40]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$9 }
	$15 = CALL $302($17, $1)
	
.LABEL $label$9
	CALL $303($17, $14)
	$14 = $15
	if ( $15 ){ goto $label$8 }
	
.LABEL $label$7
	$16 = [0]
	$15 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($15, [3568])
	CALL eosio_assert($15, [2048])
	$15 = CALL db_next_i64(*($13 + [52]), ($17 + [40]))
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$10 }
	$16 = CALL $301($2, $15)
	
.LABEL $label$10
	CALL $304($2, $13)
	$1 = *($5)
	if ( ($1 == 0) ){ goto $label$11 }
	$15 = *($7)
	if ( ((int_32)$15 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$15 = ($15 + [-24])
	$14 = *($15)
	*($15) = [0]
	if ( ($14 == 0) ){ goto $label$15 }
	CALL $324($14)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$15) ){ goto $label$14 }
	$15 = *($5)
	goto $label$12 
	
.LABEL $label$13
	$15 = $1
	
.LABEL $label$12
	*($7) = $1
	CALL $324($15)
	
.LABEL $label$11
	$12 = ($12 + [1])
	$13 = $16
	if ( $16 ){ goto $label$6 }
	
.LABEL $label$5
	*([0] + [4]) = ($17 + [48])
}

void .FUNC $338 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = CALL strlen($1)
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$6 = ($4 + $3)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$6 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($6 + [16]) & [-16])
	$6 = CALL $323($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $6
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($6, $1, $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	CALL $330($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC _ZNSt3__19to_stringEi (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [13248], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $340(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $340(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $336 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $337 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $334 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $335($0, $1, $2, CALL $379($2))
}

int_32 .FUNC $335 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$3 }
	$4 = uint_32($5 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $6 ){ goto $label$5 }
	$6 = [10]
	goto $label$4 
	
.LABEL $label$5
	$5 = *($0)
	$6 = (($5 & [-2]) + [-1])
	
.LABEL $label$4
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$6 }
	CALL $327($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	return $0
	
.LABEL $label$6
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ($5 & [1]) ){ goto $label$8 }
	$5 = ($0 + [1])
	goto $label$7 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	
.LABEL $label$7
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$10 }
	CALL memmove(($6 + $3), $6, $1)
	$2 = ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) )
	
.LABEL $label$10
	CALL memmove($6, $2, $3)
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$12 }
	*($0) = ($3 << [1])
	goto $label$11 
	
.LABEL $label$12
	*($0 + [4]) = $3
	
.LABEL $label$11
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $332 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0)
	$2 = ($4 & [1])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ((*($0) & [-2]) + [-1])
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = [10]
	$4 = uint_32($4 >> [1])
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $333($0, $3, [1], $3, $3, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($4 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($4 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $4)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $333 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $323($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $324($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $330 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $327($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

int_32 .FUNC $331 (int_32 $0, int_32 $1)
{
	return CALL $330($0, $1, CALL $379($1))
}

int_32 .FUNC $116 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [24]) = (int_64)0
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [352])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [352])
	return $0
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $114 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [2048])
	$6 = *($0 + [4])
	$7 = *($6 + [64])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-8272103851780956784, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [64]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$2), [672])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $115($2, CALL $fimport$18(*($2), *($2 + [8]), (int_64)-8272103851780956784, $3))
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$2), [672])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [64])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [768])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $323([72])
	$4 = CALL $116($6)
	*($6 + [56]) = $0
	CALL $117(($8 + [32]), $4)
	*($6 + [64]) = [-1]
	*($6 + [60]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [60])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $118(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $324($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $112 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [1664])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1712])
	*($5 + [72]) = *($1 + [16])
	$4 = *($1)
	CALL $119($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1776])
	*($5 + [64]) = ($5 + [56])
	*($5 + [60]) = $5
	*($5 + [56]) = $5
	CALL $104(($5 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [88]) = *(($1 + [16]))
	if ( (CALL memcmp(($5 + [72]), ($5 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [64])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8272103851780956784, ($5 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $113 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($1 + [24])
	$7 = *(($1 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$3 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$1), [672])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-8272103851780956784, $2)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL $115($1, $6)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$1), [672])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-8272103851780956784, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)$4), [672])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $115($4, CALL $fimport$18(*($4), *($4 + [8]), (int_64)-8272103851780956784, $5))
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)$4), [672])
	
.LABEL $label$4
	*(($2 + [64])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $111 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1584])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $323([72])
	CALL $120($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [60])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $118(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $324($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $323(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $344($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $324($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $324($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($1 + [8]) = *(*($0))
	$2 = *(*($0 + [4]))
	CALL eosio_assert([1], [288])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [352])
	*(($1 + [32])) = $2
	*($1 + [24]) = (int_64)0
	$2 = *(*(($0 + [4])))
	CALL eosio_assert([1], [288])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [352])
	*(($1 + [48])) = $2
	*($1 + [40]) = (int_64)0
}

void .FUNC $299 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [3616])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [3664])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [3728])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL $324(*(($4 + [32])))
	
.LABEL $label$7
	CALL $324($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL $324(*(($4 + [32])))
	
.LABEL $label$10
	CALL $324($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
	$7 = *(($1 + [72]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6712989628304982016, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx64_remove($7)
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $298 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [768])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $323([80])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [288])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [352])
	*($4 + [32]) = [0]
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [64]) = $0
	CALL $300(($8 + [32]), $4)
	*($4 + [72]) = [-1]
	*($4 + [68]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [68])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $94($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$15 }
	CALL $324(*(($5 + [32])))
	
.LABEL $label$15
	CALL $324($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $295 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1648])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $294 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	$6 = *($0)
	$5 = ($6 + [40])
	$8 = *($5)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$4 = ($6 + [24])
	$3 = CALL db_lowerbound_i64(*($4), *(($6 + [32])), (int_64)4982871454518345728, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $184($4, $3)
	*($10 + [12]) = [0]
	*($10 + [8]) = $4
	$8 = *(*(CALL $296(($10 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [40])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [2080])
	*($1) = *($5)
	*($1 + [8]) = *(*($0 + [4]))
	$2 = *(*($0 + [8]))
	$6 = *($0 + [12])
	if ( (*($6) & [1]) ){ goto $label$4 }
	$5 = ($6 + [1])
	goto $label$3 
	
.LABEL $label$4
	$5 = *($6 + [8])
	
.LABEL $label$3
	$6 = [-1]
	
.LOOP $label$5:
	$4 = ($5 + $6)
	$3 = ($6 + [1])
	$6 = $3
	if ( *(($4 + [1])) ){ goto $label$5 }
	if ( ($3 == 0) ){ goto $label$7 }
	$7 = (CASTING uint_64)(uint_32 $3)
	$8 = (int_64)8
	$9 = (int_64)0
	
.LOOP $label$8:
	$6 = *($5)
	if ( ((uint_32)(($6 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$9 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$8 & (int_64)4294967288)) | (int_64)$9)
	
.LABEL $label$9
	$5 = ($5 + [1])
	$8 = ((int_64)$8 + (int_64)8)
	$7 = ((int_64)$7 + (int_64)-1)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$9 = (int_64)0
	
.LABEL $label$6
	*($1 + [16]) = ((int_64)$9 | (int_64)$2)
	*($1 + [24]) = *(*($0 + [16]))
	*($1 + [32]) = *(*($0 + [20]))
	*($1 + [40]) = *(*($0 + [24]))
	*($1 + [48]) = *(*($0 + [28]))
	*($1 + [56]) = *(*($0 + [32]))
	*($1 + [64]) = *(*($0 + [36]))
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $297 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [3616])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [3664])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [3728])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$7 }
	CALL $324(*(($4 + [56])))
	
.LABEL $label$7
	CALL $324($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$10 }
	CALL $324(*(($4 + [56])))
	
.LABEL $label$10
	CALL $324($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [64]))
}

int_32 .FUNC $296 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [76]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2208])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4982871454518345728)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [2144])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2144])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $184(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $291 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($3 + [24]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($2 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($2 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($2 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($2 + [56]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $290 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	float_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	$3 = *($1 + [1])
	$2 = *($1)
	CALL $345($11, ($1 + [4]))
	$9 = *($1 + [56])
	$8 = *($1 + [48])
	$7 = *($1 + [40])
	$6 = *($1 + [32])
	$5 = *($1 + [24])
	$4 = *($1 + [16])
	$1 = *($0 + [4])
	$10 = *($1 + [4])
	$0 = (*(*($0)) + int_32($10 >> [1]))
	$1 = *($1)
	if ( (($10 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $345(($11 + [16]), $11)
	CALL void $0((int_32 ($2 & [255])), (int_32 ($3 & [255])), (int_32 ($11 + [16])), (int_32 $4), (int_64 $5), (int_64 $6), (int_64 $7), (int_64 $8), (int_64 $9), (int_64 $1))
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $324(*($11 + [24]))
	
.LABEL $label$2
	if ( ((*($11) & [1]) == 0) ){ goto $label$3 }
	CALL $324(*($11 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($11 + [32])
}

int_32 .FUNC $293 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	*($0 + [72]) = $1
	$1 = *($2)
	CALL $294(*($2 + [4]), $0)
	*($6 + [80]) = ($6 + [65])
	*($6 + [76]) = $6
	*($6 + [72]) = $6
	CALL $295(($6 + [72]), $0)
	$3 = *($0)
	*($0 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)4982871454518345728, *(*($2 + [8])), $3, $6, [65])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($1 + [8]))
	$4 = *(*(($2 + [8])))
	$5 = *($0)
	*($6 + [88]) = *($0 + [16])
	*($0 + [80]) = CALL db_idx64_store($3, (int_64)4982871454518345728, $4, $5, ($6 + [88]))
	*([0] + [4]) = ($6 + [96])
	return $0
}

void .FUNC $292 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1584])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $323([88])
	CALL $293($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [76])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $186(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $324($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $198 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1584])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $323([64])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [288])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [352])
	*($4 + [40]) = [0]
	*($4 + [32 align=4]) = (int_64)0
	*($4 + [48]) = $1
	CALL $200(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [52])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $201(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$9 }
	CALL $324(*(($3 + [40])))
	
.LABEL $label$9
	CALL $324($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [13328])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [13312]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [13344]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

int_32 .FUNC $346 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $323($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $345 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $323($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $212 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [800])
	CALL memcpy(($2 + [32]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [48]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [56]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [64]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC _ZNSt3__19to_stringEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [13296], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $340(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $340(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC _ZNSt3__19to_stringEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [13280], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $340(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $340(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC _ZNSt3__19to_stringEl (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [13264], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $340(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $340(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $340 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$3 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$4 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($0 + [4])
	
.LABEL $label$3
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$5 }
	CALL $333($0, $3, (($1 - $3) + $4), $4, $4, [0], [0])
	$5 = *($0)
	
.LABEL $label$5
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = ($0 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($0 + [8])
	
.LABEL $label$6
	CALL memset(($5 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($1 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $1
	
.LABEL $label$8
	*(($5 + $1)) = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $38 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	*([0] + [4]) = $12
	*($12 + [24]) = $1
	*($12 + [16]) = $2
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [3424]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	CALL eosio_assert(CALL $fimport$35($1), [2976])
	CALL eosio_assert(CALL $fimport$35($2), [3008])
	if ( ((int_64)*($0) == (int_64)$2) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	*($12 + [16]) = (int_64)0
	
.LABEL $label$5
	$4 = *(($0 + [128]))
	$11 = *(($0 + [132]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$7 }
	$6 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$8:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$7 }
	$11 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$6 = ($0 + [104])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$12 }
	$3 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [84]) == (int_32)$6), [672])
	if ( $3 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$3 = CALL db_find_i64(*(($0 + [104])), *(($0 + [112])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$10 }
	$3 = CALL $164($6, $3)
	CALL eosio_assert(((int_32)*($3 + [84]) == (int_32)$6), [672])
	
.LABEL $label$11
	*($12 + [8]) = ($12 + [16])
	CALL eosio_assert([1], [1216])
	CALL $263($6, $3, (int_64)0, ($12 + [8]))
	goto $label$9 
	
.LABEL $label$10
	$8 = *($0)
	*($12 + [12]) = ($12 + [16])
	*($12 + [8]) = ($12 + [24])
	CALL $264($12, $6, $8, ($12 + [8]))
	
.LABEL $label$9
	*([0] + [4]) = ($12 + [32])
}

void .FUNC $283 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($3 + [32]), *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [800])
	CALL memcpy(($3 + [40]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [48]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [56]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [64]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $36 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	CALL require_auth(*($0))
	CALL require_recipient($1)
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [112])
	*([0] + [4]) = $2
	*(($3 = $2) + [108]) = $0
	*($3 + [96]) = *($1)
	*($3 + [100]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $267(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [12]) = ($3 + [96])
	*($3 + [8]) = ($3 + [108])
	CALL $268(($3 + [8]), ($3 + [16]))
	if ( ((*($3 + [72]) & [1]) == 0) ){ goto $label$6 }
	CALL $324(*(($3 + [80])))
	
.LABEL $label$6
	*([0] + [4]) = ($3 + [112])
	return [1]
}

void .FUNC $34 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_32 $44
	float_64 $45
	int_32 $46
	int_64 $47
	int_64 $48
	int_64 $49
	int_32 $50
	$50 = (*([0] + [4]) - [432])
	*([0] + [4]) = $50
	*($50 + [392]) = $1
	$1 = (int_64)0
	$49 = (int_64)59
	$46 = [3424]
	$48 = (int_64)0
	
.LOOP $label$1:
	$47 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$2 }
	$24 = *($46)
	if ( ((uint_32)(($24 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$24 = ($24 + [165])
	goto $label$3 
	
.LABEL $label$4
	$24 = ( ($24 + [208]) ? [0] : ((($24 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$47 = ((int_64)(CASTING uint_64)(uint_32 ($24 & [31])) << (int_64)((int_64)$49 & (int_64)4294967295))
	
.LABEL $label$2
	$46 = ($46 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$48 = ((int_64)$47 | (int_64)$48)
	$49 = ((int_64)$49 + (int_64)-5)
	if ( ((int_64)$49 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($48)
	CALL eosio_assert(($2 <= [100]), [4416])
	*($50 + [384]) = ($0 + [184])
	CALL $271(($50 + [32]), ($50 + [384]), ($50 + [392]))
	$46 = *($50 + [36])
	if ( ($46 == 0) ){ goto $label$8 }
	if ( ((int_64)*($50 + [392]) != (int_64)*($46 + [40])) ){ goto $label$8 }
	$1 = *($50 + [32])
	*($50 + [376]) = $1
	if ( (uint_64)($1 <= (int_64)4294967296) ){ goto $label$7 }
	$1 = CALL current_time()
	$49 = CALL current_time()
	*((($50 + [312]) + [28])) = [0]
	*((($50 + [312]) + [32])) = [0]
	*($50 + [324]) = [0]
	*($50 + [328]) = [0]
	*($50 + [332]) = [0]
	*($50 + [336]) = [0]
	*($50 + [312]) = ((CASTING uint_32)(uint_64 ((uint_64)$49 / (uint_64)(int_64)1000000)) + [60])
	*($50 + [348]) = [0]
	*(($25 = (($50 + [312]) + [40]))) = [0]
	*(($26 = ($50 + [356]))) = [0]
	*($50 + [360]) = [0]
	*(($50 + [364])) = [0]
	*((($50 + [312]) + [56])) = [0]
	$1 = ((uint_64)$1 / (uint_64)(int_64)1000000)
	if ( (*($50 + [380]) == 0) ){ goto $label$9 }
	$4 = (CASTING uint_32)(uint_64 $1)
	$27 = ((int_32)((uint_32)$2 / (uint_32)[10]) == (int_32)((uint_32)$2 % (uint_32)[10]))
	$15 = (($2 <= [50]) | $27)
	$14 = (((uint_32)$2 > (uint_32)[49]) | $27)
	$16 = ($0 + [24])
	$10 = ($0 + [384])
	$9 = ($0 + [104])
	$13 = (($50 + [32]) + [56])
	$12 = (($50 + [32]) + [40])
	$11 = (($50 + [312]) + [36])
	$8 = (($50 + [152]) | [1])
	$7 = (($50 + [168]) | [1])
	$6 = (($50 + [264]) | [1])
	$5 = (($50 + [280]) | [1])
	$46 = *($50 + [380])
	$28 = (($50 + [296]) + [8])
	$39 = (($50 + [32]) + [12])
	$40 = (($50 + [32]) + [16])
	$41 = (($50 + [32]) + [32])
	$42 = ($50 + [104])
	$43 = ($50 + [100])
	$44 = ($50 + [96])
	
.LOOP $label$11:
	if ( ((int_64)*($46 + [40]) != (int_64)*($50 + [392])) ){ goto $label$14 }
	$36 = *($46 + [32])
	$20 = *($46 + [36])
	$18 = *($46 + [16])
	$17 = *($46 + [8])
	$19 = *(($46 + [24]))
	*($28) = $19
	*($50 + [296]) = (int_64)0
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($28) >> (uint_64)(int_64)8)
	$46 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	
.LOOP $label$17:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	$46 = ($46 + [1])
	if ( ((int_32)$46 < (int_32)[7]) ){ goto $label$17 }
	
.LABEL $label$16
	$24 = [1]
	$46 = ($46 + [1])
	if ( ((int_32)$46 < (int_32)[7]) ){ goto $label$15 }
	goto $label$12 
	
.LABEL $label$14
	CALL $272(($50 + [376]))
	$46 = *($50 + [380])
	if ( $46 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$24 = [0]
	
.LABEL $label$12
	CALL eosio_assert($24, [352])
	*(($29 = (($50 + [280]) + [8]))) = [0]
	*($50 + [280]) = (int_64)0
	$46 = CALL strlen([2592])
	if ( ((uint_32)$46 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$46 >= (uint_32)[11]) ){ goto $label$20 }
	*($50 + [280]) = ($46 << [1])
	$24 = $5
	if ( $46 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$30 = (($46 + [16]) & [-16])
	$24 = CALL $323($30)
	*($29) = $24
	*($50 + [280]) = ($30 | [1])
	*($50 + [284]) = $46
	
.LABEL $label$19
	CALL memcpy($24, [2592], $46)
	
.LABEL $label$18
	*(($24 + $46)) = [0]
	*(($30 = (($50 + [264]) + [8]))) = [0]
	*($50 + [264]) = (int_64)0
	$46 = CALL strlen([2592])
	if ( ((uint_32)$46 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$46 >= (uint_32)[11]) ){ goto $label$23 }
	*($50 + [264]) = ($46 << [1])
	$24 = $6
	if ( $46 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$37 = (($46 + [16]) & [-16])
	$24 = CALL $323($37)
	*($30) = $24
	*($50 + [264]) = ($37 | [1])
	*($50 + [268]) = $46
	
.LABEL $label$22
	CALL memcpy($24, [2592], $46)
	
.LABEL $label$21
	*(($24 + $46)) = [0]
	CALL $72(($50 + [256]), $0, $17, (int_64)0)
	$45 = (float_64)1
	if ( ((int_64)$19 == (int_64)1397703940) ){ goto $label$24 }
	*($50 + [400]) = $16
	*($50 + [416]) = $19
	CALL $67(($50 + [32]), ($50 + [400]), ($50 + [416]))
	$46 = *($50 + [36])
	if ( ($46 == 0) ){ goto $label$25 }
	if ( ((int_64)*($50 + [416]) != (int_64)*($46 + [16])) ){ goto $label$25 }
	$45 = *($46 + [32])
	goto $label$24 
	
.LABEL $label$25
	$45 = (float_64)1
	
.LABEL $label$24
	*($50 + [248]) = $45
	$46 = ($36 + [-98])
	if ( ((uint_32)$46 > (uint_32)[19]) ){ goto $label$32 }
	goto $label$33 
	
.LABEL $label$33
	CALL $329(($50 + [280]), [4496])
	$45 = (float_64)2.1777777777777776
	if ( ($15 == 0) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$32
	CALL eosio_assert([0], [2336])
	$45 = (float_64)0
	goto $label$27 
	
.LABEL $label$31
	CALL $329(($50 + [280]), [4448])
	if ( ((uint_32)$20 >= (uint_32)$2) ){ goto $label$26 }
	$45 = ((float_64)(float_64)98 / (float_64)(float_64))((float_64)99 - (CASTING float_64)(uint_32 $20)))
	goto $label$27 
	
.LABEL $label$30
	CALL $329(($50 + [280]), [4512])
	$45 = (float_64)9.8
	if ( $27 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	CALL $329(($50 + [280]), [4480])
	$45 = (float_64)2.1777777777777776
	if ( ($14 == 0) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	CALL $329(($50 + [280]), [4464])
	if ( ((uint_32)$20 <= (uint_32)$2) ){ goto $label$26 }
	$45 = ((float_64)(float_64)98 / (float_64)(CASTING float_64)(uint_32 $20))
	
.LABEL $label$27
	CALL _ZNSt3__19to_stringEm(($50 + [184]), $3)
	$46 = CALL $334(($50 + [184]), [0], [4528])
	$24 = ($46 + [8])
	*(($31 = (($50 + [200]) + [8]))) = *($24)
	*($50 + [200]) = *($46)
	*($46) = [0]
	*(($46 + [4])) = [0]
	*($24) = [0]
	$46 = CALL $331(($50 + [200]), [2304])
	$24 = ($46 + [8])
	*(($32 = (($50 + [216]) + [8]))) = *($24)
	*($50 + [216]) = *($46)
	*($46) = [0]
	*(($46 + [4])) = [0]
	*($24) = [0]
	CALL _ZNSt3__19to_stringEm(($50 + [168]), $2)
	$46 = *($50 + [168])
	$24 = ($46 & [1])
	$33 = (($50 + [168]) + [8])
	$46 = CALL $330(($50 + [216]), ( *($33) ? $7 : $24 ), ( *($50 + [172]) ? uint_32($46 >> [1]) : $24 ))
	$24 = ($46 + [8])
	*(($34 = (($50 + [232]) + [8]))) = *($24)
	*($50 + [232]) = *($46)
	*($46) = [0]
	*(($46 + [4])) = [0]
	*($24) = [0]
	$46 = CALL $331(($50 + [232]), [2304])
	$24 = ($46 + [8])
	*(($35 = (($50 + [400]) + [8]))) = *($24)
	*($50 + [400]) = *($46)
	*($46) = [0]
	*(($46 + [4])) = [0]
	*($24) = [0]
	$46 = *($50 + [280])
	$24 = ($46 & [1])
	$46 = CALL $330(($50 + [400]), ( *($29) ? $5 : $24 ), ( *($50 + [284]) ? uint_32($46 >> [1]) : $24 ))
	$24 = ($46 + [8])
	*(($36 = (($50 + [416]) + [8]))) = *($24)
	*($50 + [416]) = *($46)
	*($46) = [0]
	*(($46 + [4])) = [0]
	*($24) = [0]
	$46 = CALL $331(($50 + [416]), [2304])
	$24 = ($46 + [8])
	*(($37 = (($50 + [32]) + [8]))) = *($24)
	*($50 + [32]) = *($46)
	*($46) = [0]
	*(($46 + [4])) = [0]
	*($24) = [0]
	CALL _ZNSt3__19to_stringEm(($50 + [152]), $20)
	$46 = *($50 + [152])
	$24 = ($46 & [1])
	$38 = (($50 + [152]) + [8])
	$46 = CALL $330(($50 + [32]), ( *($38) ? $8 : $24 ), ( *($50 + [156]) ? uint_32($46 >> [1]) : $24 ))
	$24 = *($46)
	*($46) = [0]
	$21 = *($46 + [4])
	*($46 + [4]) = [0]
	$22 = *($46 + [8])
	*($46 + [8]) = [0]
	if ( (*($50 + [264]) & [1]) ){ goto $label$35 }
	*($50 + [264]) = [0]
	goto $label$34 
	
.LABEL $label$35
	*(*($30)) = [0]
	*($50 + [268]) = [0]
	
.LABEL $label$34
	CALL $328(($50 + [264]), [0])
	*($30) = $22
	*($50 + [264]) = $24
	*($50 + [268]) = $21
	if ( ((*($50 + [152]) & [1]) == 0) ){ goto $label$36 }
	CALL $324(*($38))
	
.LABEL $label$36
	if ( ((*($50 + [32]) & [1]) == 0) ){ goto $label$37 }
	CALL $324(*($37))
	
.LABEL $label$37
	if ( ((*($50 + [416]) & [1]) == 0) ){ goto $label$38 }
	CALL $324(*($36))
	
.LABEL $label$38
	if ( ((*($50 + [400]) & [1]) == 0) ){ goto $label$39 }
	CALL $324(*($35))
	
.LABEL $label$39
	if ( ((*($50 + [232]) & [1]) == 0) ){ goto $label$40 }
	CALL $324(*($34))
	
.LABEL $label$40
	if ( ((*($50 + [168]) & [1]) == 0) ){ goto $label$41 }
	CALL $324(*($33))
	
.LABEL $label$41
	if ( ((*($50 + [216]) & [1]) == 0) ){ goto $label$42 }
	CALL $324(*($32))
	
.LABEL $label$42
	if ( ((*($50 + [200]) & [1]) == 0) ){ goto $label$43 }
	CALL $324(*($31))
	
.LABEL $label$43
	if ( ((*($50 + [184]) & [1]) == 0) ){ goto $label$44 }
	CALL $324(*((($50 + [184]) + [8])))
	
.LABEL $label$44
	*(($46 = (($50 + [136]) + [8]))) = *($28)
	$1 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $18) * (float_64)$45))
	*($50 + [296]) = $1
	*($50 + [136]) = $1
	CALL $345(($50 + [120]), ($50 + [264]))
	*($36) = *($46)
	*($50 + [416]) = *($50 + [136])
	*($50 + [400]) = $17
	if ( ((int_64)*($50 + [416]) < (int_64)1) ){ goto $label$45 }
	$1 = *($0)
	*($50 + [32]) = $0
	*($37) = ($50 + [416])
	*($39) = ($50 + [120])
	*($50 + [36]) = ($50 + [400])
	CALL $198(($50 + [232]), $10, $1, ($50 + [32]))
	
.LABEL $label$45
	if ( ((*($50 + [120]) & [1]) == 0) ){ goto $label$46 }
	CALL $324(*((($50 + [120]) + [8])))
	
.LABEL $label$46
	$46 = *($50 + [260])
	*($50 + [36]) = ($50 + [248])
	*($50 + [32]) = ($50 + [296])
	CALL eosio_assert(((int_32)$46 != (int_32)[0]), [1216])
	CALL $276($9, $46, (int_64)0, ($50 + [32]))
	$49 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($50 + [296])) / (float_64)*($50 + [248])))
	CALL eosio_assert((uint_64)(((int_64)$49 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [288])
	$1 = (int_64)5459781
	$46 = [0]
	
.LOOP $label$49:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$50 }
	
.LOOP $label$51:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$48 }
	$46 = ($46 + [1])
	if ( ((int_32)$46 < (int_32)[7]) ){ goto $label$51 }
	
.LABEL $label$50
	$24 = [1]
	$46 = ($46 + [1])
	if ( ((int_32)$46 < (int_32)[7]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	$24 = [0]
	
.LABEL $label$47
	CALL eosio_assert($24, [352])
	*($37) = (int_64)1397703940
	*((($50 + [16]) + [8])) = (int_64)1397703940
	*($50 + [32]) = $49
	*($50 + [16]) = $49
	CALL $216($0, (int_64)0, [1], ($50 + [16]))
	*($50 + [416]) = $4
	$46 = CALL gmtime(($50 + [416]))
	$1 = *($46 + [12])
	$24 = *($46 + [20])
	$46 = *($46 + [16])
	*($36) = (int_64)1397703940
	*(($50 + [8])) = (int_64)1397703940
	*($50 + [416]) = $49
	*($50) = $49
	CALL $216($0, ((int_64)((int_64)$1 + (int_64)((int_64)(CASTING int_64)(int_32 ($24 + [1900])) * (int_64)10000)) + (int_64)((int_64)(CASTING int_64)(int_32 ($46 + [1])) * (int_64)100)), [1], $50)
	
.LABEL $label$26
	$23 = *($0)
	$1 = (int_64)0
	$47 = (int_64)59
	$46 = [2864]
	$48 = (int_64)0
	
.LOOP $label$52:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$57 }
	$24 = *($46)
	if ( ((uint_32)(($24 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$56 }
	$24 = ($24 + [165])
	goto $label$55 
	
.LABEL $label$57
	$49 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$56
	$24 = ( ($24 + [208]) ? [0] : ((($24 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$55
	$49 = (int_64)((int_64)(CASTING uint_64)(uint_32 $24) << (int_64)56) >> (int_64)56)
	
.LABEL $label$54
	$49 = ((int_64)((int_64)$49 & (int_64)31) << (int_64)((int_64)$47 & (int_64)4294967295))
	
.LABEL $label$53
	$46 = ($46 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$48 = ((int_64)$49 | (int_64)$48)
	$47 = ((int_64)$47 + (int_64)-5)
	if ( ((int_64)$47 != (int_64)-6) ){ goto $label$52 }
	*(($36 = (($50 + [416]) + [8]))) = $48
	*($50 + [416]) = $23
	$1 = (int_64)0
	$47 = (int_64)59
	$46 = [4544]
	$48 = (int_64)0
	
.LOOP $label$58:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$63 }
	$24 = *($46)
	if ( ((uint_32)(($24 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$62 }
	$24 = ($24 + [165])
	goto $label$61 
	
.LABEL $label$63
	$49 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$62
	$24 = ( ($24 + [208]) ? [0] : ((($24 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$61
	$49 = (int_64)((int_64)(CASTING uint_64)(uint_32 $24) << (int_64)56) >> (int_64)56)
	
.LABEL $label$60
	$49 = ((int_64)((int_64)$49 & (int_64)31) << (int_64)((int_64)$47 & (int_64)4294967295))
	
.LABEL $label$59
	$46 = ($46 + [1])
	$47 = ((int_64)$47 + (int_64)-5)
	$48 = ((int_64)$49 | (int_64)$48)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$58 }
	*($50 + [232]) = $48
	*($50 + [32]) = $17
	*((($50 + [32]) + [8])) = *($50 + [392])
	*($40) = $3
	*((($50 + [32]) + [24])) = $18
	*($41) = $19
	*($12) = *($50 + [296])
	*(($12 + [12])) = *((($50 + [296]) + [12]))
	*(($12 + [8])) = *($28)
	CALL $345($13, ($50 + [280]))
	*($42) = $2
	*($43) = $20
	$24 = *($25)
	if ( ((uint_32)$24 >= (uint_32)*($26)) ){ goto $label$67 }
	*($24 + [16 align=4]) = (int_64)0
	$1 = *($0)
	*($24 + [8]) = *($50 + [232])
	*($24) = $1
	*(($20 = ($24 + [24]))) = [0]
	$46 = CALL $323([16])
	*($24 + [16]) = $46
	$37 = ($46 + [16])
	*($20) = $37
	*(($46 + [8])) = *($36)
	*($46) = *($50 + [416])
	*(($24 + [20])) = $37
	*($24 + [28]) = [0]
	*(($36 = ($24 + [32]))) = [0]
	*(($24 + [36])) = [0]
	$46 = *($13)
	$20 = ( *((($50 + [32]) + [60])) ? uint_32($46 >> [1]) : ($46 & [1]) )
	$46 = ($20 + [60])
	$1 = (CASTING uint_64)(uint_32 $20)
	$24 = ($24 + [28])
	
.LOOP $label$68:
	$46 = ($46 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$68 }
	if ( ($46 == 0) ){ goto $label$66 }
	CALL $66($24, $46)
	$20 = *($36)
	$46 = *($24)
	goto $label$65 
	
.LABEL $label$67
	CALL $274($11, ($50 + [416]), $0, ($50 + [232]), ($50 + [32]))
	goto $label$64 
	
.LABEL $label$66
	$20 = [0]
	$46 = [0]
	
.LABEL $label$65
	*((($50 + [400]) + [8])) = $20
	*($50 + [404]) = $46
	*($50 + [400]) = $46
	*($50 + [200]) = ($50 + [400])
	*($50 + [216]) = ($50 + [32])
	CALL $273(($50 + [216]), ($50 + [200]))
	*($25) = (*($25) + [40])
	
.LABEL $label$64
	if ( ((*($13) & [1]) == 0) ){ goto $label$69 }
	CALL $324(*($44))
	
.LABEL $label$69
	$1 = *($50 + [376])
	*($50 + [32]) = $1
	$46 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$46) != (int_32)[0]), [3568])
	CALL $272(($50 + [32]))
	CALL $275(*($50 + [384]), $46)
	*($50 + [376]) = *($50 + [32])
	if ( ((*($50 + [264]) & [1]) == 0) ){ goto $label$70 }
	CALL $324(*($30))
	
.LABEL $label$70
	if ( ((*($50 + [280]) & [1]) == 0) ){ goto $label$71 }
	CALL $324(*($29))
	
.LABEL $label$71
	$46 = *($50 + [380])
	if ( $46 ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)*(($50 + [352])) == (int_32)*(($50 + [348]))) ){ goto $label$9 }
	CALL $68(($50 + [32]), $0)
	*($50 + [48]) = ((int_64)*($50 + [48]) + (int_64)1)
	CALL $95(($0 + [504]), ($50 + [32]), *($0))
	$1 = *($50 + [48])
	*($50 + [40]) = (int_64)0
	*($50 + [32]) = $1
	$1 = *($0)
	CALL $220(($50 + [416]), ($50 + [312]))
	$46 = *($50 + [416])
	CALL send_deferred(($50 + [32]), $1, $46, (*($50 + [420]) - $46), [0])
	$46 = *($50 + [416])
	if ( ($46 == 0) ){ goto $label$9 }
	*($50 + [420]) = $46
	CALL $324($46)
	
.LABEL $label$9
	CALL $221(($50 + [312]))
	goto $label$7 
	
.LABEL $label$8
	*($50 + [380]) = [0]
	*($50 + [376]) = ($50 + [384])
	
.LABEL $label$7
	*([0] + [4]) = ($50 + [432])
	return (unreachable)
	
.LABEL $label$6
	CALL $325(($50 + [280]))
	
.LABEL $label$5
	CALL $325(($50 + [264]))
	$46
	(unreachable)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8) = (int_64)0
	*($8 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [800])
	CALL memcpy($8, $6, [8])
	$4 = ($1 & [-4])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [800])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [4])
	CALL eosio_assert(((int_32)$4 != (int_32)[12]), [800])
	$4 = ($8 + [12])
	CALL memcpy($4, ($6 + [12]), [4])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$6 = *($4)
	$0 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $0), (int_32 $6), (int_32 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $32 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7)
{
	CALL require_auth(*($0))
	CALL require_recipient($1)
}

void .FUNC $280 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($0 + [40])) = (int_64)1398362884
	CALL eosio_assert([1], [288])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [352])
	*(($0 + [56])) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [288])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [352])
	*($0 + [64]) = (int_64)0
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $282(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [800])
	CALL memcpy(($2 + [8]), $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $64(($2 + [48]), (($2 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $285(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $324(*(($2 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

void .FUNC $31 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [3424]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	$4 = *(($0 + [128]))
	$11 = *(($0 + [132]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$5 }
	$6 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$5 }
	$11 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [104])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$9 }
	$3 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [84]) == (int_32)$6), [672])
	if ( $3 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$3 = CALL db_find_i64(*(($0 + [104])), *(($0 + [112])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	$3 = CALL $164($6, $3)
	CALL eosio_assert(((int_32)*($3 + [84]) == (int_32)$6), [672])
	
.LABEL $label$8
	CALL eosio_assert([1], [3568])
	CALL eosio_assert([1], [2048])
	$11 = CALL db_next_i64(*($3 + [88]), ($12 + [8]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$10 }
	CALL $164($6, $11)
	
.LABEL $label$10
	CALL $284($6, $3)
	
.LABEL $label$7
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $281 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [160])
	*([0] + [4]) = $8
	$4 = *($1 + [16])
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $345(($8 + [64]), ($1 + [20]))
	*(($6 = (($8 + [48]) + [8]))) = *(($1 + [40]))
	*(($7 = (($8 + [32]) + [8]))) = *(($1 + [56]))
	*($8 + [48]) = *($1 + [32])
	*($8 + [32]) = *($1 + [48])
	$5 = *($1 + [64])
	*((($8 + [96]) + [8])) = *($7)
	*((($8 + [80]) + [8])) = *($6)
	*($8 + [96]) = *($8 + [32])
	*($8 + [80]) = *($8 + [48])
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$0 = (*(*($0)) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $345(($8 + [144]), ($8 + [64]))
	*(($6 = (($8 + [128]) + [8]))) = *((($8 + [80]) + [8]))
	*(($7 = (($8 + [112]) + [8]))) = *((($8 + [96]) + [8]))
	*($8 + [128]) = *($8 + [80])
	*($8 + [112]) = *($8 + [96])
	*((($8 + [16]) + [8])) = *($6)
	*($8 + [16]) = *($8 + [128])
	*(($8 + [8])) = *($7)
	*($8) = *($8 + [112])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $4), (int_32 ($8 + [144])), (int_32 ($8 + [16])), (int_32 $8), (int_32 $5), (int_64 $1))
	if ( ((*($8 + [144]) & [1]) == 0) ){ goto $label$2 }
	CALL $324(*($8 + [152]))
	
.LABEL $label$2
	if ( ((*($8 + [64]) & [1]) == 0) ){ goto $label$3 }
	CALL $324(*($8 + [72]))
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [160])
}