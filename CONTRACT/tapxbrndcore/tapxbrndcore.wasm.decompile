(data (i32.const 8192) "invalid symbol name\00")
(data (i32.const 8212) "token with symbol already exists\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8331) "memo has more than 256 bytes\00")
(data (i32.const 8360) "token with symbol does not exist, create token before issue\00")
(data (i32.const 8420) "invalid quantity\00")
(data (i32.const 8437) "must issue positive quantity\00")
(data (i32.const 8466) "symbol precision mismatch\00")
(data (i32.const 8492) "quantity exceeds available supply\00")
(data (i32.const 8526) "token with symbol does not exist\00")
(data (i32.const 8559) "must retire positive quantity\00")
(data (i32.const 8589) "cannot transfer to self\00")
(data (i32.const 8613) "to account does not exist\00")
(data (i32.const 8639) "unable to find key\00")
(data (i32.const 8658) "must transfer positive quantity\00")
(data (i32.const 8690) "no balance object found\00")
(data (i32.const 8714) "overdrawn balance\00")
(data (i32.const 8732) "Balance row already deleted or never existed. Action won\'t have any effect.\00")
(data (i32.const 8808) "Cannot close because the balance is not zero.\00")
(data (i32.const 8854) "tapxtapscore\00")
(data (i32.const 8867) "must add positive quantity\00")
(data (i32.const 8894) "after reducing, max supply must be greater or equal to supply\00")
(data (i32.const 8956) "ledger ID doesn\'t exist\00")
(data (i32.const 8980) "deposit\00")
(data (i32.const 8988) "withdraw\00")
(data (i32.const 8997) "ledger ID can\'t create \00")
(data (i32.const 9021) "ledger ID already exists\00")
(data (i32.const 9046) "invalid threshold quantity\00")
(data (i32.const 9073) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 9137) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9186) "Missing threshold setting! Must set threshold before start operation.\00")
(data (i32.const 9256) "over threshold\00")
(data (i32.const 9271) "attempt to add asset with different symbol\00")
(data (i32.const 9314) "addition underflow\00")
(data (i32.const 9333) "addition overflow\00")
(data (i32.const 9351) "cannot pass end iterator to modify\00")
(data (i32.const 9386) "object passed to modify is not in multi_index\00")
(data (i32.const 9432) "cannot modify objects in table of another contract\00")
(data (i32.const 9483) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9542) "write\00")
(data (i32.const 9548) "Missing threshold setting! Must set threshold before start withdraw.\00")
(data (i32.const 9617) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9668) "error reading iterator\00")
(data (i32.const 9691) "read\00")
(data (i32.const 9696) "cannot create objects in table of another contract\00")
(data (i32.const 9747) "attempt to subtract asset with different symbol\00")
(data (i32.const 9795) "subtraction underflow\00")
(data (i32.const 9817) "subtraction overflow\00")
(data (i32.const 9838) "cannot pass end iterator to erase\00")
(data (i32.const 9872) "cannot increment end iterator\00")
(data (i32.const 9902) "object passed to erase is not in multi_index\00")
(data (i32.const 9947) "cannot erase objects in table of another contract\00")
(data (i32.const 9997) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10050) "get\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "db_store_i64" (func $fimport$4 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$5 (param i32 i64 i32 i32)))
(import "env" "memcpy" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$7 (param i64) (result i32)))
(import "env" "require_recipient" (func $fimport$8 (param i64)))
(import "env" "has_auth" (func $fimport$9 (param i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$11 (result i64)))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "read_action_data" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$15 (param i32 i32)))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "abort" (func $fimport$17))
(import "env" "memset" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$26 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$27 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$29 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$30 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$31 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$34 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$36 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$37 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$38 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $45))
(export "_Znwj" (func $75))
(export "_ZdlPv" (func $77))
(export "_Znaj" (func $76))
(export "_ZdaPv" (func $78))
(table $0 16 16 anyfunc)
(elem (i32.const 1) $24 $40 $32 $11 $18 $14 $6 $28 $35 $1 $16 $34 $20 $21 $22)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18464))
(global $global$2 i32 (i32.const 18464))


void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	*($1) = *($6)
	*(($1 + [8])) = *(($6 + [8]))
	*($1 + [16]) = CALL current_time()
	$7 = *(*($5) + [8])
	CALL eosio_assert([1], [9137])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$6 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8192])
	*(($1 + [32])) = $7
	*($1 + [24]) = (int_64)0
	$6 = $2
	$5 = ($6 + [-48])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($6 + [-8])
	CALL $63($3, $1)
	$8 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)-6524911382391663744, *(*($0 + [8])), $8), $5, [40])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $85($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)1398362884
	*($3) = (int_64)0
	CALL eosio_assert([1], [9137])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [8192])
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($4 + $5)
	*($3 + [48]) = $4
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9691])
	CALL memcpy($3, $4, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [9691])
	CALL memcpy(($3 + [8]), ($4 + [8]), [8])
	*($3 + [52]) = ($4 + [16])
	CALL $54(($3 + [48]), ($3 + [16]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $88($4)
	
.LABEL $label$9
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $58(($3 + [48]), $3)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $85($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($1 + $0)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [9691])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 & [-8]) != (int_32)[8]), [9691])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($3 + [52]) = ($1 + [16])
	CALL $54(($3 + [48]), ($3 + [16]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $88($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $59(($3 + [48]), $3)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	*($1) = *($6)
	*(($1 + [8])) = *(($6 + [8]))
	*($1 + [16]) = CALL current_time()
	$7 = *(*($5) + [8])
	CALL eosio_assert([1], [9137])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$6 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8192])
	*(($1 + [32])) = $7
	*($1 + [24]) = (int_64)0
	$6 = $2
	$5 = ($6 + [-48])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($6 + [-8])
	CALL $64($3, $1)
	$8 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)-2129398146078059648, *(*($0 + [8])), $8), $5, [40])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

int_32 .FUNC $42 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9137])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8192])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [9137])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $3
	$6 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$1 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [8192])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [8192])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [8192])
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9386])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9432])
	$5 = *($2)
	*($1) = *($5)
	$6 = *($1 + [8])
	*($1 + [8]) = *(($5 + [8]))
	*($1 + [16]) = CALL current_time()
	$7 = *(*($2) + [8])
	CALL eosio_assert([1], [9137])
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	$6 = (uint_64)$7 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $9
	$5 = [1]
	$10 = $2
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$2 < (int_32)[6])
	$10 = ($2 + [1])
	$2 = $10
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [8192])
	*(($1 + [32])) = $7
	*($1 + [24]) = (int_64)0
	CALL eosio_assert(((int_64)$8 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)), [9483])
	$5 = $3
	$2 = ($5 + [-48])
	$global$0 = $2
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($5 + [-8])
	CALL $64($4, $1)
	CALL db_update_i64(*($1 + [44]), (int_64)0, $2, [40])
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$6
	$global$0 = ($4 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [128])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	$6 = *($1)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = [0]
	$8 = $4
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$5 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [9046])
	CALL eosio_assert(((int_64)$6 > (int_64)0), [8658])
	CALL require_auth(*($0))
	*((($2 + [48]) + [32])) = [0]
	*($2 + [56]) = $4
	*($2 + [64]) = (int_64)-1
	*($2 + [72]) = (int_64)0
	*($2 + [48]) = *($0)
	CALL eosio_assert(((int_64)$3 == (int_64)*(CALL $15(($2 + [48]), $4, [8639]) + [8])), [8466])
	*(($5 = (($2 + [8]) + [32]))) = [0]
	*($2 + [16]) = $4
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$8 = *($0)
	*($2 + [8]) = $8
	$7 = CALL db_find_i64($8, $4, (int_64)-2129398146078059648, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$8 }
	$7 = CALL $26(($2 + [8]), $7)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($2 + [8])), [9617])
	*($2 + [96]) = $1
	CALL eosio_assert([1], [9351])
	CALL $41(($2 + [8]), $7, ($2 + [96]))
	$10 = *($2 + [32])
	if ( $10 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0)
	*($2) = $1
	*($2 + [120]) = $4
	CALL eosio_assert(((int_64)$8 == (int_64)CALL $fimport$3()), [9696])
	*($2 + [100]) = $2
	*($2 + [96]) = ($2 + [8])
	*($2 + [104]) = ($2 + [120])
	$7 = CALL _Znwj([56])
	CALL $42($7)
	*($7 + [40]) = ($2 + [8])
	CALL $43(($2 + [96]), $7)
	*($2 + [112]) = $7
	$8 = (uint_64)*($7 + [8]) >> (uint_64)(int_64)8
	*($2 + [96]) = $8)
	$0 = *($7 + [44])
	*($2 + [92]) = $0
	$1 = ($2 + [36])
	$10 = *($1)
	if ( ((uint_32)$10 >= (uint_32)*($5)) ){ goto $label$11 }
	*($10 + [8]) = $8
	*($10 + [16]) = $0
	*($2 + [112]) = [0]
	*($10) = $7
	*($1) = ($10 + [24])
	$7 = *($2 + [112])
	*($2 + [112]) = [0]
	if ( $7 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $44(($2 + [32]), ($2 + [112]), ($2 + [96]), ($2 + [92]))
	$7 = *($2 + [112])
	*($2 + [112]) = [0]
	if ( ($7 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$10 = *($2 + [32])
	if ( ($10 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$0 = ($2 + [36])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$13 }
	
.LOOP $label$14:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	CALL _ZdlPv($5)
	
.LABEL $label$15
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$14 }
	$7 = *(($2 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$7 = $10
	
.LABEL $label$12
	*($0) = $10
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$10 = *($2 + [72])
	if ( ($10 == 0) ){ goto $label$16 }
	$0 = ($2 + [76])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$18 }
	
.LOOP $label$19:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$20 }
	CALL _ZdlPv($5)
	
.LABEL $label$20
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$19 }
	$7 = *(($2 + [72]))
	goto $label$17 
	
.LABEL $label$18
	$7 = $10
	
.LABEL $label$17
	*($0) = $10
	CALL _ZdlPv($7)
	
.LABEL $label$16
	$global$0 = ($2 + [128])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $85($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $62(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $88($2)
	
.LABEL $label$5
	*(($1 = (($3 + [32]) + [8]))) = *((($3 + [16]) + [8]))
	*($3 + [32]) = *($3 + [16])
	*((($3 + [48]) + [8])) = *($1)
	*($3 + [48]) = *($3 + [32])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$6 = *((($3 + [48]) + [8]))
	*((($3 + [64]) + [8])) = $6
	*(($3 + [8])) = $6
	$6 = *($3 + [48])
	*($3) = $6
	*($3 + [64]) = $6
	CALL void $1((int_32 $3), (int_32 $5))
	$global$0 = ($3 + [80])
	return [1]
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $85($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [9137])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [8192])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $56(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $88($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $57(($3 + [64]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [256])
	$global$0 = $3
	CALL memory()
	$4 = (int_64)7
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$2 }
	$4 = (int_64)5
	
.LOOP $label$3:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	CALL eosio_assert(((int_64)6138663577826885632 == (int_64)$1), [9073])
	
.LABEL $label$2
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$5 }
	$4 = (int_64)7
	
.LOOP $label$6:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$6 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$4 }
	
.LABEL $label$5
	*($3 + [248]) = $0
	if ( ((int_64)$2 <= (int_64)-3614564409355534337) ){ goto $label$20 }
	if ( ((int_64)$2 > (int_64)5031766152489992191) ){ goto $label$19 }
	if ( ((int_64)$2 > (int_64)3626397528455380991) ){ goto $label$17 }
	if ( ((int_64)$2 == (int_64)-3614564409355534336) ){ goto $label$14 }
	if ( ((int_64)$2 != (int_64)-2130628332136955904) ){ goto $label$4 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [1]
	*($3 + [80]) = *($3 + [168])
	CALL $46(($3 + [248]), ($3 + [80]))
	goto $label$4 
	
.LABEL $label$20
	if ( ((int_64)$2 <= (int_64)-4417104459036491777) ){ goto $label$18 }
	if ( ((int_64)$2 > (int_64)-4138934129038196737) ){ goto $label$16 }
	if ( ((int_64)$2 == (int_64)-4417104459036491776) ){ goto $label$13 }
	if ( ((int_64)$2 != (int_64)-4416970318617903104) ){ goto $label$4 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [2]
	*($3 + [120]) = *($3 + [128])
	CALL $47(($3 + [248]), ($3 + [120]))
	goto $label$4 
	
.LABEL $label$19
	if ( ((int_64)$2 > (int_64)5380249946410188799) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)5031766152489992192) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)5031766161825611776) ){ goto $label$4 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [3]
	*($3 + [96]) = *($3 + [152])
	CALL $48(($3 + [248]), ($3 + [96]))
	goto $label$4 
	
.LABEL $label$18
	if ( ((int_64)$2 == (int_64)-6533262907872903168) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-5003125931982449360) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-4993669930013425664) ){ goto $label$4 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [4]
	*($3 + [48]) = *($3 + [200])
	CALL $49(($3 + [248]), ($3 + [48]))
	goto $label$4 
	
.LABEL $label$17
	if ( ((int_64)$2 == (int_64)3626397528455380992) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)4929617502180212736) ){ goto $label$4 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [5]
	*($3 + [40]) = *($3 + [208])
	CALL $50(($3 + [248]), ($3 + [40]))
	goto $label$4 
	
.LABEL $label$16
	if ( ((int_64)$2 == (int_64)-4138934129038196736) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$4 }
	*($3 + [228]) = [0]
	*($3 + [224]) = [6]
	*($3 + [24]) = *($3 + [224])
	CALL $46(($3 + [248]), ($3 + [24]))
	goto $label$4 
	
.LABEL $label$15
	if ( ((int_64)$2 == (int_64)5380249946410188800) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)8516769789752901632) ){ goto $label$4 }
	*($3 + [236]) = [0]
	*($3 + [232]) = [7]
	*($3 + [16]) = *($3 + [232])
	CALL $51(($3 + [248]), ($3 + [16]))
	goto $label$4 
	
.LABEL $label$14
	*($3 + [164]) = [0]
	*($3 + [160]) = [8]
	*($3 + [88]) = *($3 + [160])
	CALL $46(($3 + [248]), ($3 + [88]))
	goto $label$4 
	
.LABEL $label$13
	*($3 + [140]) = [0]
	*($3 + [136]) = [9]
	*($3 + [112]) = *($3 + [136])
	CALL $47(($3 + [248]), ($3 + [112]))
	goto $label$4 
	
.LABEL $label$12
	*($3 + [244]) = [0]
	*($3 + [240]) = [10]
	*($3 + [8]) = *($3 + [240])
	CALL $50(($3 + [248]), ($3 + [8]))
	goto $label$4 
	
.LABEL $label$11
	*($3 + [220]) = [0]
	*($3 + [216]) = [11]
	*($3 + [32]) = *($3 + [216])
	CALL $52(($3 + [248]), ($3 + [32]))
	goto $label$4 
	
.LABEL $label$10
	*($3 + [148]) = [0]
	*($3 + [144]) = [12]
	*($3 + [104]) = *($3 + [144])
	CALL $53(($3 + [248]), ($3 + [104]))
	goto $label$4 
	
.LABEL $label$9
	*($3 + [196]) = [0]
	*($3 + [192]) = [13]
	*($3 + [56]) = *($3 + [192])
	CALL $49(($3 + [248]), ($3 + [56]))
	goto $label$4 
	
.LABEL $label$8
	*($3 + [188]) = [0]
	*($3 + [184]) = [14]
	*($3 + [64]) = *($3 + [184])
	CALL $49(($3 + [248]), ($3 + [64]))
	goto $label$4 
	
.LABEL $label$7
	*($3 + [180]) = [0]
	*($3 + [176]) = [15]
	*($3 + [72]) = *($3 + [176])
	CALL $46(($3 + [248]), ($3 + [72]))
	
.LABEL $label$4
	CALL $83([0])
	$global$0 = ($3 + [256])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $8 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $66($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $67(($4 + [72]), ($4 + [64]))
	CALL $68(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $82(($4 + [8]))
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [9668])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $85($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*(($9 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($9) = (int_64)0
	CALL eosio_assert([1], [9137])
	$10 = ($9 + [8])
	$11 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$11 = $12
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$11 = $12
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [8192])
	*($9 + [16]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [9691])
	CALL memcpy($9, $7, [8])
	CALL eosio_assert(((int_32)($6 & [-8]) != (int_32)[8]), [9691])
	CALL memcpy($10, ($7 + [8]), [8])
	*($9 + [20]) = $1
	*($3 + [24]) = $9
	$11 = (uint_64)*(($9 + [8])) >> (uint_64)(int_64)8
	*($3 + [16]) = $11)
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $11
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $10($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $88($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [32])
	return $9
}

void .FUNC $6 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [224])
	$global$0 = $4
	$5 = [0]
	$6 = *($2 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	$8 = $7)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$10 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [8192])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = uint_32($5 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($5 <= [257]), [8331])
	$10 = [0]
	*((($4 + [88]) + [32])) = [0]
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	$8 = *($0)
	*($4 + [88]) = $8
	*($4 + [96]) = $7
	$11 = [0]
	$5 = CALL db_find_i64($8, $7, (int_64)-4157508551318700032, $7)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $2(($4 + [88]), $5)
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [88])), [9617])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [8360])
	CALL require_auth(*($11 + [32]))
	$12 = ($11 + [32])
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$7 = $9
	$10 = [1]
	$13 = $5
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$7 = $9
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$13 = ($5 + [1])
	$5 = $13
	if ( $10 ){ goto $label$13 }
	$10 = [1]
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$10 = [0]
	
.LABEL $label$9
	CALL eosio_assert($10, [8420])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8437])
	CALL eosio_assert(((int_64)$6 == (int_64)*($11 + [8])), [8466])
	CALL eosio_assert(((int_64)$8 <= (int_64))(*($11 + [16]) - *($11))), [8492])
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [88])), [9386])
	CALL eosio_assert(((int_64)*($4 + [88]) == (int_64)CALL $fimport$3()), [9432])
	$7 = *($11 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$7), [9271])
	$8 = ((int_64)*($11) + (int_64)$8)
	*($11) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9314])
	CALL eosio_assert(((int_64)*($11) < (int_64)4611686018427387904), [9333])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$8) == (int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8)), [9483])
	*($4 + [192]) = (($4 + [128]) + [40])
	*($4 + [188]) = ($4 + [128])
	*($4 + [184]) = ($4 + [128])
	*($4 + [200]) = ($4 + [184])
	*($4 + [212]) = ($11 + [16])
	*($4 + [208]) = $11
	*($4 + [216]) = $12
	CALL $4(($4 + [208]), ($4 + [200]))
	CALL db_update_i64(*($11 + [44]), (int_64)0, ($4 + [128]), [40])
	$5 = (($4 + [88]) + [16])
	if ( (uint_64)($8 <= *($5)) ){ goto $label$14 }
	*($5) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$14
	$9 = *(($2 + [8]))
	*((($4 + [72]) + [8])) = $9
	$8 = *($12)
	$7 = *($2)
	*((($4 + [8]) + [8])) = $9
	*($4 + [72]) = $7
	*($4 + [8]) = $7
	CALL $7($0, $8, ($4 + [8]), $8)
	$7 = *($12)
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$15 }
	$9 = *($0)
	$8 = (int_64)6
	
.LOOP $label$16:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$16 }
	*(($10 = (($4 + [24]) + [24]))) = *(($2 + [8]))
	*($4 + [32]) = $1
	*($4 + [24]) = $7
	*($4 + [40]) = *($2)
	CALL $80(($4 + [56]), $3)
	*(($5 = CALL _Znwj([16]))) = $7
	*($5 + [8]) = (int_64)3617214756542218240
	*((($4 + [128]) + [24])) = *($10)
	$10 = (($4 + [24]) + [40])
	*(($11 = (($4 + [128]) + [40]))) = *($10)
	*($10) = [0]
	*($4 + [208]) = $5
	$5 = ($5 + [16])
	*($4 + [216]) = $5
	*($4 + [212]) = $5
	*($4 + [128]) = *($4 + [24])
	*($4 + [136]) = *($4 + [32])
	*($4 + [144]) = *($4 + [40])
	*($4 + [160]) = *($4 + [56])
	*($4 + [56]) = (int_64)0
	CALL $8($9, (int_64)-3617168760277827584, ($4 + [208]), ($4 + [128]))
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$17
	$5 = *($4 + [208])
	if ( ($5 == 0) ){ goto $label$18 }
	*($4 + [212]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$18
	if ( ((*(($4 + [56])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$15
	$11 = *($4 + [112])
	if ( ($11 == 0) ){ goto $label$19 }
	$13 = ($4 + [116])
	$5 = *($13)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$21 }
	
.LOOP $label$22:
	$5 = ($5 + [-24])
	$10 = *($5)
	*($5) = [0]
	if ( ($10 == 0) ){ goto $label$23 }
	CALL _ZdlPv($10)
	
.LABEL $label$23
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$22 }
	$5 = *(($4 + [112]))
	goto $label$20 
	
.LABEL $label$21
	$5 = $11
	
.LABEL $label$20
	*($13) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$19
	$global$0 = ($4 + [224])
}

void .FUNC $7 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [80])
	$global$0 = $4
	$5 = [0]
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$6 = *($0)
	*($4 + [8]) = $6
	$7 = *($2 + [8])
	*($4 + [16]) = $1
	$0 = CALL db_find_i64($6, $1, (int_64)3607749779137757184, (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $9(($4 + [8]), $0)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($4 + [8])), [9617])
	CALL eosio_assert([1], [9351])
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($4 + [8])), [9386])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$3()), [9432])
	$1 = *($5 + [8])
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [9271])
	$7 = ((int_64)*($5) + (int_64)*($2))
	*($5) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9314])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [9333])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($5 + [8]) >> (uint_64)(int_64)8)), [9483])
	CALL eosio_assert([1], [9542])
	CALL memcpy(($4 + [64]), $5, [8])
	CALL eosio_assert([1], [9542])
	CALL memcpy((($4 + [64]) | [8]), ($5 + [8]), [8])
	CALL db_update_i64(*($5 + [20]), (int_64)0, ($4 + [64]), [16])
	$5 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$3 }
	*($5) = ((int_64)$1 + (int_64)1)
	$8 = *($4 + [32])
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$6 == (int_64)CALL $fimport$3()), [9696])
	*(($9 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($9) = (int_64)0
	CALL eosio_assert([1], [9137])
	$10 = ($9 + [8])
	$1 = (int_64)5462355
	
.LOOP $label$6:
	$11 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$1 = $7
	$11 = [1]
	$0 = $5
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$0 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $0 ){ goto $label$8 }
	$11 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$6 }
	
.LABEL $label$5
	CALL eosio_assert($11, [8192])
	*($9 + [16]) = ($4 + [8])
	*(($5 = ($9 + [8]))) = *(($2 + [8]))
	*($9) = *($2)
	CALL eosio_assert([1], [9542])
	CALL memcpy(($4 + [64]), $9, [8])
	CALL eosio_assert([1], [9542])
	CALL memcpy((($4 + [64]) | [8]), $10, [8])
	$1 = (uint_64)*($5) >> (uint_64)(int_64)8
	$0 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)3607749779137757184, $3, $1), ($4 + [64]), [16]
	*($9 + [20]) = $0)
	$8 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$9 }
	*($8) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$9
	*($4 + [56]) = $9
	$1 = (uint_64)*($5) >> (uint_64)(int_64)8
	*($4 + [64]) = $1)
	*($4 + [52]) = $0
	$8 = ($4 + [36])
	$5 = *($8)
	if ( ((uint_32)$5 >= (uint_32)*(($4 + [40]))) ){ goto $label$11 }
	*($5 + [8]) = $1
	*($5 + [16]) = $0
	*($4 + [56]) = [0]
	*($5) = $9
	*($8) = ($5 + [24])
	$5 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( $5 ){ goto $label$10 }
	goto $label$3 
	
.LABEL $label$11
	CALL $10(($4 + [32]), ($4 + [56]), ($4 + [64]), ($4 + [52]))
	$5 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$8 = *($4 + [32])
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$9 = ($4 + [36])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$13 }
	
.LOOP $label$14:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$15 }
	CALL _ZdlPv($0)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$14 }
	$5 = *(($4 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $8
	
.LABEL $label$12
	*($9) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9542])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9542])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9542])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9542])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9542])
	CALL memcpy(*($3 + [4]), $0, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9668])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $85($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([56])
	CALL $3($5)
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $65(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $5(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $88($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $3 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9137])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8192])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [9137])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $3
	$6 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$1 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [8192])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [8192])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [8192])
	return $0
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = [0]
	$5 = (uint_64)$2 >> (uint_64)(int_64)8
	$6 = $5)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$8 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [8192])
	$4 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$6 = *($0)
	*($3 + [8]) = $6
	*($3 + [16]) = $5
	$8 = [1]
	$9 = CALL db_find_i64($6, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(CALL $2(($3 + [8]), $9) + [40]) == (int_32)($3 + [8])), [9617])
	$8 = [0]
	
.LABEL $label$6
	CALL eosio_assert($8, [8212])
	CALL eosio_assert([1], [9137])
	
.LOOP $label$8:
	$10 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$5 = $6
	$10 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$10 }
	$10 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($10, [8192])
	$6 = *($0)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$3()), [9696])
	$4 = CALL _Znwj([56])
	CALL $3($4)
	*($4 + [40]) = ($3 + [8])
	*($4 + [16]) = (int_64)1
	*($4 + [8]) = $2
	*($4 + [24]) = $2
	*($4 + [32]) = $1
	*($3 + [96]) = (($3 + [48]) + [40])
	*($3 + [92]) = ($3 + [48])
	*($3 + [88]) = ($3 + [48])
	*($3 + [104]) = ($3 + [88])
	*($3 + [116]) = ($4 + [16])
	*($3 + [112]) = $4
	*($3 + [120]) = ($4 + [32])
	CALL $4(($3 + [112]), ($3 + [104]))
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	$9 = CALL db_store_i64(*((($3 + [8]) + [8])), (int_64)-4157508551318700032, $6, $5), ($3 + [48]), [40]
	*($4 + [44]) = $9)
	$8 = (($3 + [8]) + [16])
	if ( (uint_64)($5 <= *($8)) ){ goto $label$11 }
	*($8) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$11
	*($3 + [112]) = $4
	$5 = (uint_64)*(($4 + [8])) >> (uint_64)(int_64)8
	*($3 + [48]) = $5)
	*($3 + [88]) = $9
	$10 = ($3 + [36])
	$8 = *($10)
	if ( ((uint_32)$8 >= (uint_32)*((($3 + [8]) + [32]))) ){ goto $label$14 }
	*($8 + [8]) = $5
	*($8 + [16]) = $9
	*($3 + [112]) = [0]
	*($8) = $4
	*($10) = ($8 + [24])
	$4 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( $4 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $5(($3 + [32]), ($3 + [112]), ($3 + [48]), ($3 + [88]))
	$4 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv($4)
	
.LABEL $label$12
	$9 = *($3 + [32])
	if ( ($9 == 0) ){ goto $label$15 }
	$10 = ($3 + [36])
	$4 = *($10)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$19 }
	CALL _ZdlPv($8)
	
.LABEL $label$19
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$18 }
	$4 = *(($3 + [32]))
	goto $label$16 
	
.LABEL $label$17
	$4 = $9
	
.LABEL $label$16
	*($10) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$global$0 = ($3 + [128])
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$5 = ($global$0 - [112])
	$global$0 = $5
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [8589])
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$7($2), [8613])
	$6 = *($3 + [8])
	$7 = [0]
	*(($5 + [104])) = [0]
	$8 = (uint_64)$6 >> (uint_64)(int_64)8
	*($5 + [80]) = $8)
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	*($5 + [72]) = *($0)
	$9 = CALL $15(($5 + [72]), $8, [8639])
	CALL require_recipient($1)
	CALL require_recipient($2)
	$10 = *($3)
	if ( ((uint_64)((int_64)$10 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$11 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $12
	$7 = [1]
	$13 = $11
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $12
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$11 < (int_32)[6])
	$13 = ($11 + [1])
	$11 = $13
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8420])
	CALL eosio_assert(((int_64)$10 > (int_64)0), [8658])
	CALL eosio_assert(((int_64)$6 == (int_64)*($9 + [8])), [8466])
	$11 = *($4)
	if ( ($11 & [1]) ){ goto $label$7 }
	$11 = uint_32($11 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$11 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($11 <= [257]), [8331])
	$11 = CALL has_auth($2)
	$7 = ($3 + [8])
	$12 = *($7)
	*((($5 + [56]) + [8])) = $12
	$8 = *($3)
	*((($5 + [24]) + [8])) = $12
	*($5 + [24]) = $8
	*($5 + [56]) = $8
	CALL $12($0, $1, ($5 + [24]))
	$12 = *($7)
	*((($5 + [40]) + [8])) = $12
	$8 = *($3)
	*((($5 + [8]) + [8])) = $12
	*($5 + [8]) = $8
	*($5 + [40]) = $8
	CALL $7($0, $2, ($5 + [8]), ( $2 ? $1 : $11 ))
	$13 = *($5 + [96])
	if ( ($13 == 0) ){ goto $label$8 }
	$3 = ($5 + [100])
	$11 = *($3)
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$10 }
	
.LOOP $label$11:
	$11 = ($11 + [-24])
	$7 = *($11)
	*($11) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$11 }
	$11 = *(($5 + [96]))
	goto $label$9 
	
.LABEL $label$10
	$11 = $13
	
.LABEL $label$9
	*($3) = $13
	CALL _ZdlPv($11)
	
.LABEL $label$8
	$global$0 = ($5 + [112])
}

int_32 .FUNC $15 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [9617])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $2($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [9617])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [48]) = $2
	CALL require_auth($3)
	$5 = [0]
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$6 = *($0)
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	$0 = CALL db_find_i64($6, $1, (int_64)3607749779137757184, (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $9(($4 + [8]), $0) + [16]) == (int_32)($4 + [8])), [9617])
	$7 = *($4 + [32])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($4) = ($4 + [48])
	*($4 + [88]) = $3
	CALL eosio_assert(((int_64)$6 == (int_64)CALL $fimport$3()), [9696])
	*($4 + [68]) = $4
	*($4 + [64]) = ($4 + [8])
	*($4 + [72]) = ($4 + [88])
	*(($8 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($8) = (int_64)0
	CALL eosio_assert([1], [9137])
	$1 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$1 = $2
	$9 = [1]
	$0 = $5
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = $2
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$0 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $0 ){ goto $label$7 }
	$9 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [8192])
	*($8 + [16]) = ($4 + [8])
	CALL $17(($4 + [64]), $8)
	*($4 + [80]) = $8
	$1 = (uint_64)*(($8 + [8])) >> (uint_64)(int_64)8
	*($4 + [64]) = $1)
	$0 = *($8 + [20])
	*($4 + [60]) = $0
	$7 = ($4 + [36])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*(($4 + [40]))) ){ goto $label$10 }
	*($5 + [8]) = $1
	*($5 + [16]) = $0
	*($4 + [80]) = [0]
	*($5) = $8
	*($7) = ($5 + [24])
	$5 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( $5 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $10(($4 + [32]), ($4 + [80]), ($4 + [64]), ($4 + [60]))
	$5 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( ($5 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv($5)
	
.LABEL $label$8
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$9 = ($4 + [36])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$14 }
	CALL _ZdlPv($0)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	$5 = *(($4 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $7
	
.LABEL $label$11
	*($9) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = $global$0
	$3 = $2
	$4 = *($0)
	$5 = *(*(*($0 + [4])))
	CALL eosio_assert([1], [9137])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8192])
	*($1 + [8]) = $5
	*($1) = (int_64)0
	$9 = $2
	$7 = ($9 + [-16])
	$global$0 = $7
	CALL eosio_assert([1], [9542])
	CALL memcpy($7, $1, [8])
	CALL eosio_assert([1], [9542])
	CALL memcpy(($9 + [-8]), ($1 + [8]), [8])
	$6 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($1 + [20]) = CALL db_store_i64(*($4 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $6), $7, [16])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$6
	$global$0 = $3
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [160])
	$global$0 = $3
	$4 = [0]
	$5 = *($1 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8192])
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$7 }
	$4 = uint_32($4 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$4 = *($2 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($4 <= [257]), [8331])
	$9 = [0]
	*((($3 + [40]) + [32])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$7 = *($0)
	*($3 + [40]) = $7
	*($3 + [48]) = $6
	$10 = [0]
	$4 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$10 = CALL $2(($3 + [40]), $4)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($3 + [40])), [9617])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8526])
	CALL require_auth(*($10 + [32]))
	$11 = ($10 + [32])
	$8 = *($1)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$4 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$6 = $7
	$9 = [1]
	$2 = $4
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$6 = $7
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$2 = ($4 + [1])
	$4 = $2
	if ( $9 ){ goto $label$13 }
	$9 = [1]
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$9 = [0]
	
.LABEL $label$9
	CALL eosio_assert($9, [8420])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8559])
	CALL eosio_assert(((int_64)$5 == (int_64)*($10 + [8])), [8466])
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($3 + [40])), [9386])
	CALL eosio_assert(((int_64)*($3 + [40]) == (int_64)CALL $fimport$3()), [9432])
	$7 = *($10 + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)$7), [9747])
	$6 = (int_64)
	*($10) = $6(*($10) - $8))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9795])
	CALL eosio_assert(((int_64)*($10) < (int_64)4611686018427387904), [9817])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$7) == (int_64)(uint_64)*($10 + [8]) >> (uint_64)(int_64)8)), [9483])
	*($3 + [128]) = (($3 + [80]) + [40])
	*($3 + [124]) = ($3 + [80])
	*($3 + [120]) = ($3 + [80])
	*($3 + [136]) = ($3 + [120])
	*($3 + [148]) = ($10 + [16])
	*($3 + [144]) = $10
	*($3 + [152]) = $11
	CALL $4(($3 + [144]), ($3 + [136]))
	CALL db_update_i64(*($10 + [44]), (int_64)0, ($3 + [80]), [40])
	$4 = (($3 + [40]) + [16])
	if ( (uint_64)($7 <= *($4)) ){ goto $label$14 }
	*($4) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$14
	$6 = *(($1 + [8]))
	*((($3 + [24]) + [8])) = $6
	$8 = *($11)
	$7 = *($1)
	*((($3 + [8]) + [8])) = $6
	*($3 + [24]) = $7
	*($3 + [8]) = $7
	CALL $12($0, $8, ($3 + [8]))
	$10 = *($3 + [64])
	if ( ($10 == 0) ){ goto $label$15 }
	$2 = ($3 + [68])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$19 }
	CALL _ZdlPv($9)
	
.LABEL $label$19
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$18 }
	$4 = *(($3 + [64]))
	goto $label$16 
	
.LABEL $label$17
	$4 = $10
	
.LABEL $label$16
	*($2) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$global$0 = ($3 + [160])
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	$5 = *($2)
	$4 = *($2 + [8])
	$0 = CALL $13(($3 + [8]), (uint_64)$4 >> (uint_64)(int_64)8), [8690]
	CALL eosio_assert(((int_64)*($0)) >= (int_64)$5), [8714])
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($3 + [8])), [9386])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$3()), [9432])
	$6 = *($0 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)$6), [9747])
	$4 = (int_64)
	*($0) = $4(*($0) - $5))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9795])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [9817])
	$4 = (uint_64)$6 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$4) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [9483])
	CALL eosio_assert([1], [9542])
	CALL memcpy(($3 + [48]), $0, [8])
	CALL eosio_assert([1], [9542])
	CALL memcpy((($3 + [48]) | [8]), ($0 + [8]), [8])
	CALL db_update_i64(*($0 + [20]), $1, ($3 + [48]), [16])
	if ( (uint_64)($4 <= *($3 + [24])) ){ goto $label$1 }
	*((($3 + [8]) + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$7 = *($3 + [32])
	if ( ($7 == 0) ){ goto $label$2 }
	$8 = ($3 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $7
	
.LABEL $label$3
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($3 + [64])
}

int_32 .FUNC $13 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9617])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $9($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9617])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $85($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10056])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $85($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $18 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth($1)
	*(($3 + [32])) = [0]
	*($3 + [8]) = $1
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$4 = *($0)
	*($3) = $4
	$0 = [0]
	$5 = CALL db_find_i64($4, $1, (int_64)3607749779137757184, (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_32)$5) < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $9($3, $5)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$3), [9617])
	
.LABEL $label$1
	$5 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($5, [8732])
	CALL eosio_assert((int_64)(*($0) == 0), [8808])
	CALL eosio_assert($5, [9838])
	CALL eosio_assert($5, [9872])
	$5 = CALL db_next_i64(*($0 + [20]), ($3 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $9($3, $5)
	
.LABEL $label$2
	CALL $19($3, $0)
	$6 = *($3 + [24])
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($3 + [28])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $6
	
.LABEL $label$4
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($3 + [48])
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9902])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9947])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9997])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [8]))
	*($2 + [32]) = *($1)
	$1 = CALL $80(($2 + [16]), ($1 + [16]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$3 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($5 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$4 = CALL $80(($2 + [64]), $1)
	*(($2 + [8])) = *($5)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $2), (int_32 $4), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$1 = CALL $80($2, ($1 + [16]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$5 = CALL $80(($2 + [16]), $1)
	CALL void $6((int_32 $4), (int_64 $3), (int_64 $5), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $85($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9691])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [9691])
	CALL memcpy(($3 + [8]), ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $88($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$6 = *($3 + [8])
	$7 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $7), (int_64 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $85($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	CALL eosio_assert([1], [9137])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [8192])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [72]) = ($4 + $5)
	*($3 + [64]) = $4
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9691])
	CALL memcpy(($3 + [8]), $4, [8])
	$1 = ($5 & [-8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [9691])
	CALL memcpy((($3 + [8]) + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [9691])
	CALL memcpy((($3 + [8]) + [16]), ($4 + [16]), [8])
	*($3 + [68]) = ($4 + [24])
	CALL $54(($3 + [64]), (($3 + [8]) + [24]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $88($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $55(($3 + [64]), ($3 + [8]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [80])
	return [1]
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $85($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9691])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [9691])
	CALL memcpy((($3 + [8]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [9691])
	$6 = (($3 + [8]) + [16])
	CALL memcpy($6, ($2 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $88($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3 + [16])
	$9 = *($3 + [8])
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $9), (int_64 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [32])
	return [1]
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $85($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [9137])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [8192])
	*(($3 + [44])) = [0]
	*($3 + [32]) = [0]
	*($3 + [36 align=4]) = (int_64)0
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $60(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $88($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $61(($3 + [64]), $3)
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [44])))
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $74($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $81($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $81($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $79($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $34 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	CALL require_auth($2)
	$6 = *($5)
	if ( ($6 & [1]) ){ goto $label$2 }
	$5 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$5 = *($5 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($5 <= [257]), [8331])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9691])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9691])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9691])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [9691])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $54(*($1), ($0 + [32]))
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $80(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*(*($0)) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $80(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [128])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	$6 = *($1)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = [0]
	$8 = $4
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$5 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [9046])
	CALL eosio_assert(((int_64)$6 > (int_64)0), [8658])
	CALL require_auth(*($0))
	*((($2 + [48]) + [32])) = [0]
	*($2 + [56]) = $4
	*($2 + [64]) = (int_64)-1
	*($2 + [72]) = (int_64)0
	*($2 + [48]) = *($0)
	CALL eosio_assert(((int_64)$3 == (int_64)*(CALL $15(($2 + [48]), $4, [8639]) + [8])), [8466])
	*(($5 = (($2 + [8]) + [32]))) = [0]
	*($2 + [16]) = $4
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$8 = *($0)
	*($2 + [8]) = $8
	$7 = CALL db_find_i64($8, $4, (int_64)-6524911382391663744, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$8 }
	$7 = CALL $30(($2 + [8]), $7)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($2 + [8])), [9617])
	*($2 + [96]) = $1
	CALL eosio_assert([1], [9351])
	CALL $36(($2 + [8]), $7, ($2 + [96]))
	$10 = *($2 + [32])
	if ( $10 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0)
	*($2) = $1
	*($2 + [120]) = $4
	CALL eosio_assert(((int_64)$8 == (int_64)CALL $fimport$3()), [9696])
	*($2 + [100]) = $2
	*($2 + [96]) = ($2 + [8])
	*($2 + [104]) = ($2 + [120])
	$7 = CALL _Znwj([56])
	CALL $37($7)
	*($7 + [40]) = ($2 + [8])
	CALL $38(($2 + [96]), $7)
	*($2 + [112]) = $7
	$8 = (uint_64)*($7 + [8]) >> (uint_64)(int_64)8
	*($2 + [96]) = $8)
	$0 = *($7 + [44])
	*($2 + [92]) = $0
	$1 = ($2 + [36])
	$10 = *($1)
	if ( ((uint_32)$10 >= (uint_32)*($5)) ){ goto $label$11 }
	*($10 + [8]) = $8
	*($10 + [16]) = $0
	*($2 + [112]) = [0]
	*($10) = $7
	*($1) = ($10 + [24])
	$7 = *($2 + [112])
	*($2 + [112]) = [0]
	if ( $7 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $39(($2 + [32]), ($2 + [112]), ($2 + [96]), ($2 + [92]))
	$7 = *($2 + [112])
	*($2 + [112]) = [0]
	if ( ($7 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$10 = *($2 + [32])
	if ( ($10 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$0 = ($2 + [36])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$13 }
	
.LOOP $label$14:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	CALL _ZdlPv($5)
	
.LABEL $label$15
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$14 }
	$7 = *(($2 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$7 = $10
	
.LABEL $label$12
	*($0) = $10
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$10 = *($2 + [72])
	if ( ($10 == 0) ){ goto $label$16 }
	$0 = ($2 + [76])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$18 }
	
.LOOP $label$19:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$20 }
	CALL _ZdlPv($5)
	
.LABEL $label$20
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$19 }
	$7 = *(($2 + [72]))
	goto $label$17 
	
.LABEL $label$18
	$7 = $10
	
.LABEL $label$17
	*($0) = $10
	CALL _ZdlPv($7)
	
.LABEL $label$16
	$global$0 = ($2 + [128])
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [112])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	$6 = *($1)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$1 = [0]
	$7 = $4
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$5 = [1]
	$9 = $1
	$1 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$1 < (int_32)[6])
	$9 = ($1 + [1])
	$1 = $9
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$1 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [8420])
	CALL eosio_assert(((int_64)$6 > (int_64)0), [8658])
	CALL require_auth(*($0))
	*((($2 + [72]) + [32])) = [0]
	*($2 + [80]) = $4
	*($2 + [88]) = (int_64)-1
	*($2 + [96]) = (int_64)0
	*($2 + [72]) = *($0)
	CALL eosio_assert(((int_64)$3 == (int_64)*(CALL $15(($2 + [72]), $4, [8639]) + [8])), [8466])
	*((($2 + [32]) + [32])) = [0]
	*($2 + [40]) = $4
	*($2 + [48]) = (int_64)-1
	*($2 + [56]) = (int_64)0
	$7 = *($0)
	*($2 + [32]) = $7
	$1 = CALL db_find_i64($7, $4, (int_64)-6524911382391663744, $4)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$12 }
	$0 = CALL $30(($2 + [32]), $1)
	CALL eosio_assert(((int_32)*($0 + [40]) == (int_32)($2 + [32])), [9617])
	$7 = *($0 + [16])
	$4 = CALL current_time()
	*($2 + [24]) = $4
	$8 = *(($0 + [32]))
	*(($2 + [16])) = $8
	*($2 + [8]) = *($0 + [24])
	$10 = *($0)
	if ( ((uint_64)((uint_64)$4 / (uint_64)(int_64)14400000000) <= (uint_64)((uint_64)$7 / (uint_64)(int_64)14400000000)) ){ goto $label$11 }
	CALL eosio_assert([1], [9137])
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$4 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$7 = $4
	$5 = [1]
	$9 = $1
	$1 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$13 }
	goto $label$9 
	
.LABEL $label$14
	$7 = $4
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$1 < (int_32)[6])
	$9 = ($1 + [1])
	$1 = $9
	if ( $5 ){ goto $label$15 }
	$5 = [1]
	$1 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$13 }
	goto $label$9 
	
.LABEL $label$12
	CALL eosio_assert([0], [9186])
	$9 = *($2 + [56])
	if ( $9 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$11
	$7 = *($2 + [8])
	goto $label$8 
	
.LABEL $label$10
	$5 = [0]
	
.LABEL $label$9
	CALL eosio_assert($5, [8192])
	*(($2 + [16])) = $8
	$7 = (int_64)0
	*($2 + [8]) = (int_64)0
	
.LABEL $label$8
	CALL eosio_assert(((int_64)$3 == (int_64)$8), [9271])
	$7 = ((int_64)$7 + (int_64)$6)
	*($2 + [8]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9314])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9333])
	CALL eosio_assert(((int_64)$7 <= (int_64)$10), [9256])
	*($2 + [4]) = ($2 + [8])
	*($2) = ($2 + [24])
	CALL eosio_assert([1], [9351])
	CALL $31(($2 + [32]), $0, (int_64)0, $2)
	$9 = *($2 + [56])
	if ( ($9 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$0 = ($2 + [60])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$17 }
	
.LOOP $label$18:
	$1 = ($1 + [-24])
	$5 = *($1)
	*($1) = [0]
	if ( ($5 == 0) ){ goto $label$19 }
	CALL _ZdlPv($5)
	
.LABEL $label$19
	if ( ((int_32)$9 != (int_32)$1) ){ goto $label$18 }
	$1 = *(($2 + [56]))
	goto $label$16 
	
.LABEL $label$17
	$1 = $9
	
.LABEL $label$16
	*($0) = $9
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$9 = *($2 + [96])
	if ( ($9 == 0) ){ goto $label$20 }
	$0 = ($2 + [100])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$22 }
	
.LOOP $label$23:
	$1 = ($1 + [-24])
	$5 = *($1)
	*($1) = [0]
	if ( ($5 == 0) ){ goto $label$24 }
	CALL _ZdlPv($5)
	
.LABEL $label$24
	if ( ((int_32)$9 != (int_32)$1) ){ goto $label$23 }
	$1 = *(($2 + [96]))
	goto $label$21 
	
.LABEL $label$22
	$1 = $9
	
.LABEL $label$21
	*($0) = $9
	CALL _ZdlPv($1)
	
.LABEL $label$20
	$global$0 = ($2 + [112])
}

void .FUNC $28 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$5 = ($global$0 - [144])
	$global$0 = $5
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [8589])
	$6 = [0]
	$7 = *($3)
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$8 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $10
	$6 = [1]
	$11 = $9
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$9 < (int_32)[6])
	$11 = ($9 + [1])
	$9 = $11
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8420])
	CALL eosio_assert(((int_64)$7 > (int_64)0), [8658])
	$9 = *($4)
	if ( ($9 & [1]) ){ goto $label$7 }
	$9 = uint_32($9 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$9 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($9 <= [257]), [8331])
	$10 = *($3 + [8])
	*((($5 + [72]) + [32])) = [0]
	$8 = (uint_64)$10 >> (uint_64)(int_64)8
	*($5 + [80]) = $8)
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	*($5 + [72]) = *($0)
	CALL eosio_assert(((int_64)$10 == (int_64)*(CALL $15(($5 + [72]), $8, [8639]) + [8])), [8466])
	CALL require_auth(*($0))
	$12 = *($3 + [8])
	*((($5 + [56]) + [8])) = $12
	$13 = *($3)
	*(($5 + [8])) = $12
	*($5) = $13
	*($5 + [56]) = $13
	CALL $29($0, $5)
	*((($5 + [16]) + [32])) = [0]
	*($5 + [24]) = $8
	*($5 + [32]) = (int_64)-1
	*($5 + [40]) = (int_64)0
	$13 = *($0)
	*($5 + [16]) = $13
	$9 = CALL db_find_i64($13, $8, (int_64)4497131530749870080, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$14 }
	$0 = CALL $23(($5 + [16]), $9)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)($5 + [16])), [9617])
	$6 = *(($5 + [44]))
	$3 = *(($5 + [40]))
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$12 }
	
.LOOP $label$15:
	$9 = ($6 + [-24])
	$11 = *($9)
	if ( ((int_64)*($11) == (int_64)$2) ){ goto $label$13 }
	$6 = $9
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$15 }
	goto $label$12 
	
.LABEL $label$14
	CALL eosio_assert([0], [8956])
	$11 = *($5 + [40])
	if ( $11 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$13
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)($5 + [16])), [9617])
	goto $label$11 
	
.LABEL $label$12
	$9 = CALL db_find_i64(*($5 + [16]), *(($5 + [24])), (int_64)4497131530749870080, $2)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$10 }
	$11 = CALL $23(($5 + [16]), $9)
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)($5 + [16])), [9617])
	
.LABEL $label$11
	CALL eosio_assert([1], [9351])
	CALL eosio_assert(((int_32)*(($0 + [24])) == (int_32)($5 + [16])), [9386])
	CALL eosio_assert(((int_64)*($5 + [16]) == (int_64)CALL $fimport$3()), [9432])
	$8 = *($0)
	CALL eosio_assert(((int_64)*($0 + [8]) >= (int_64)$7), [8714])
	$9 = ($0 + [16])
	CALL eosio_assert(((int_64)$10 == (int_64)*($9)), [9747])
	$2 = (int_64)
	*($0 + [8]) = $2(*($0 + [8]) - $7))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9795])
	CALL eosio_assert(((int_64)*($0 + [8]) < (int_64)4611686018427387904), [9817])
	CALL eosio_assert(((int_64)$8 == (int_64)*($0)), [9483])
	CALL eosio_assert([1], [9542])
	CALL memcpy(($5 + [112]), $0, [8])
	CALL eosio_assert([1], [9542])
	$6 = (($5 + [112]) | [8])
	CALL memcpy($6, ($0 + [8]), [8])
	CALL eosio_assert([1], [9542])
	$3 = (($5 + [112]) + [16])
	CALL memcpy($3, $9, [8])
	CALL db_update_i64(*($0 + [28]), (int_64)0, ($5 + [112]), [24])
	$9 = (($5 + [16]) + [16])
	if ( (uint_64)($8 <= *($9)) ){ goto $label$16 }
	*($9) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	CALL eosio_assert([1], [9351])
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)($5 + [16])), [9386])
	CALL eosio_assert(((int_64)*($5 + [16]) == (int_64)CALL $fimport$3()), [9432])
	$8 = *($11)
	$0 = ($11 + [16])
	CALL eosio_assert(((int_64)$10 == (int_64)*($0)), [9271])
	$2 = ((int_64)*($11 + [8]) + (int_64)$7)
	*($11 + [8]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9314])
	CALL eosio_assert(((int_64)*($11 + [8]) < (int_64)4611686018427387904), [9333])
	CALL eosio_assert(((int_64)$8 == (int_64)*($11)), [9483])
	CALL eosio_assert([1], [9542])
	CALL memcpy(($5 + [112]), $11, [8])
	CALL eosio_assert([1], [9542])
	CALL memcpy($6, ($11 + [8]), [8])
	CALL eosio_assert([1], [9542])
	CALL memcpy($3, $0, [8])
	CALL db_update_i64(*($11 + [28]), (int_64)0, ($5 + [112]), [24])
	if ( (uint_64)($8 <= *($9)) ){ goto $label$17 }
	*(($5 + [32])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	$11 = *($5 + [40])
	if ( ($11 == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	CALL eosio_assert([0], [8956])
	$11 = *($5 + [40])
	if ( ($11 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$3 = ($5 + [44])
	$9 = *($3)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$19 }
	
.LOOP $label$20:
	$9 = ($9 + [-24])
	$6 = *($9)
	*($9) = [0]
	if ( ($6 == 0) ){ goto $label$21 }
	CALL _ZdlPv($6)
	
.LABEL $label$21
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$20 }
	$9 = *(($5 + [40]))
	goto $label$18 
	
.LABEL $label$19
	$9 = $11
	
.LABEL $label$18
	*($3) = $11
	CALL _ZdlPv($9)
	
.LABEL $label$8
	$11 = *($5 + [96])
	if ( ($11 == 0) ){ goto $label$22 }
	$3 = ($5 + [100])
	$9 = *($3)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$24 }
	
.LOOP $label$25:
	$9 = ($9 + [-24])
	$6 = *($9)
	*($9) = [0]
	if ( ($6 == 0) ){ goto $label$26 }
	CALL _ZdlPv($6)
	
.LABEL $label$26
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$25 }
	$9 = *(($5 + [96]))
	goto $label$23 
	
.LABEL $label$24
	$9 = $11
	
.LABEL $label$23
	*($3) = $11
	CALL _ZdlPv($9)
	
.LABEL $label$22
	$global$0 = ($5 + [144])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $80(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $80(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [128])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8854]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($7)
	$6 = [0]
	$7 = *($1 + [8])
	$5 = (uint_64)$7 >> (uint_64)(int_64)8
	$4 = $5)
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$8 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$4 = $8
	$9 = [1]
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$4 = $8
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $9 ){ goto $label$9 }
	$9 = [1]
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$9 = [0]
	
.LABEL $label$5
	CALL eosio_assert($9, [8192])
	$6 = *($2)
	if ( ($6 & [1]) ){ goto $label$11 }
	$6 = uint_32($6 >> [1])
	goto $label$10 
	
.LABEL $label$11
	$6 = *($2 + [4])
	
.LABEL $label$10
	CALL eosio_assert(($6 <= [257]), [8192])
	$9 = [0]
	*((($3 + [8]) + [32])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	*($3 + [16]) = $5
	$10 = CALL $15(($3 + [8]), $5, [8639])
	$4 = *($1)
	if ( ((uint_64)((int_64)$4 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$12 }
	$6 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$5 = $8
	$9 = [1]
	$1 = $6
	$6 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$5 = $8
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$1 = ($6 + [1])
	$6 = $1
	if ( $9 ){ goto $label$16 }
	$9 = [1]
	$6 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$9 = [0]
	
.LABEL $label$12
	CALL eosio_assert($9, [8420])
	CALL eosio_assert(((int_64)$4 > (int_64)0), [8867])
	CALL eosio_assert(((int_64)$7 == (int_64)*($10 + [8])), [8466])
	CALL eosio_assert(((int_64))(*($10 + [16]) - $4) >= (int_64)*($10)), [8894])
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($3 + [8])), [9386])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$3()), [9432])
	$5 = *($10 + [8])
	CALL eosio_assert(((int_64)$7 == (int_64)*(($10 + [24]))), [9747])
	$4 = (int_64)
	*($10 + [16]) = $4(*($10 + [16]) - $4))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9795])
	CALL eosio_assert(((int_64)*($10 + [16]) < (int_64)4611686018427387904), [9817])
	$4 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$4) == (int_64)(uint_64)*($10 + [8]) >> (uint_64)(int_64)8)), [9483])
	*($3 + [96]) = (($3 + [48]) + [40])
	*($3 + [92]) = ($3 + [48])
	*($3 + [88]) = ($3 + [48])
	*($3 + [104]) = ($3 + [88])
	*($3 + [116]) = ($10 + [16])
	*($3 + [112]) = $10
	*($3 + [120]) = ($10 + [32])
	CALL $4(($3 + [112]), ($3 + [104]))
	CALL db_update_i64(*($10 + [44]), (int_64)0, ($3 + [48]), [40])
	$6 = (($3 + [8]) + [16])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$17 }
	*($6) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$17
	$10 = *($3 + [32])
	if ( ($10 == 0) ){ goto $label$18 }
	$1 = ($3 + [36])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$20 }
	
.LOOP $label$21:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$22 }
	CALL _ZdlPv($9)
	
.LABEL $label$22
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$21 }
	$6 = *(($3 + [32]))
	goto $label$19 
	
.LABEL $label$20
	$6 = $10
	
.LABEL $label$19
	*($1) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$18
	$global$0 = ($3 + [128])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [128])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8854]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($7)
	$6 = [0]
	$7 = *($1 + [8])
	$5 = (uint_64)$7 >> (uint_64)(int_64)8
	$4 = $5)
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$8 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$4 = $8
	$9 = [1]
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$4 = $8
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $9 ){ goto $label$9 }
	$9 = [1]
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$9 = [0]
	
.LABEL $label$5
	CALL eosio_assert($9, [8192])
	$6 = *($2)
	if ( ($6 & [1]) ){ goto $label$11 }
	$6 = uint_32($6 >> [1])
	goto $label$10 
	
.LABEL $label$11
	$6 = *($2 + [4])
	
.LABEL $label$10
	CALL eosio_assert(($6 <= [257]), [8331])
	$9 = [0]
	*((($3 + [8]) + [32])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	*($3 + [16]) = $5
	$10 = CALL $15(($3 + [8]), $5, [8639])
	$8 = *($1)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$12 }
	$6 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$4 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$5 = $4
	$9 = [1]
	$1 = $6
	$6 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$5 = $4
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$1 = ($6 + [1])
	$6 = $1
	if ( $9 ){ goto $label$16 }
	$9 = [1]
	$6 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$9 = [0]
	
.LABEL $label$12
	CALL eosio_assert($9, [8420])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8867])
	CALL eosio_assert(((int_64)$7 == (int_64)*($10 + [8])), [8466])
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($3 + [8])), [9386])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$3()), [9432])
	$4 = *($10 + [8])
	CALL eosio_assert(((int_64)$7 == (int_64)*(($10 + [24]))), [9271])
	$5 = ((int_64)*($10 + [16]) + (int_64)$8)
	*($10 + [16]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9314])
	CALL eosio_assert(((int_64)*($10 + [16]) < (int_64)4611686018427387904), [9333])
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$4) == (int_64)(uint_64)*($10 + [8]) >> (uint_64)(int_64)8)), [9483])
	*($3 + [96]) = (($3 + [48]) + [40])
	*($3 + [92]) = ($3 + [48])
	*($3 + [88]) = ($3 + [48])
	*($3 + [104]) = ($3 + [88])
	*($3 + [116]) = ($10 + [16])
	*($3 + [112]) = $10
	*($3 + [120]) = ($10 + [32])
	CALL $4(($3 + [112]), ($3 + [104]))
	CALL db_update_i64(*($10 + [44]), (int_64)0, ($3 + [48]), [40])
	$6 = (($3 + [8]) + [16])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$17 }
	*($6) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$17
	$10 = *($3 + [32])
	if ( ($10 == 0) ){ goto $label$18 }
	$1 = ($3 + [36])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$20 }
	
.LOOP $label$21:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$22 }
	CALL _ZdlPv($9)
	
.LABEL $label$22
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$21 }
	$6 = *(($3 + [32]))
	goto $label$19 
	
.LABEL $label$20
	$6 = $10
	
.LABEL $label$19
	*($1) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$18
	$global$0 = ($3 + [128])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [9668])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $85($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*(($9 = CALL _Znwj([40])) + [16]) = (int_64)1398362884
	*($9 + [8]) = (int_64)0
	CALL eosio_assert([1], [9137])
	$10 = ($9 + [16])
	$11 = ($9 + [8])
	$12 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$12 = $13
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$12 = $13
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [8192])
	*($9 + [24]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [9691])
	CALL memcpy($9, $7, [8])
	$5 = ($6 & [-8])
	CALL eosio_assert(((int_32)$5 != (int_32)[8]), [9691])
	CALL memcpy($11, ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$5 != (int_32)[16]), [9691])
	CALL memcpy($10, ($7 + [16]), [8])
	*($9 + [28]) = $1
	*($3 + [24]) = $9
	$12 = *($9)
	*($3 + [16]) = $12
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $12
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $33($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $88($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [32])
	return $9
}

void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$5 = ($global$0 - [160])
	$global$0 = $5
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [8589])
	$6 = *($3 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$10 = [0]
	$11 = $7
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$11 = $12
	$8 = [1]
	$13 = $10
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$11 = $12
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$8 = ((int_32)$10 < (int_32)[6])
	$13 = ($10 + [1])
	$10 = $13
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [8420])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [8658])
	*((($5 + [88]) + [32])) = [0]
	*($5 + [96]) = $7
	*($5 + [104]) = (int_64)-1
	*($5 + [112]) = (int_64)0
	*($5 + [88]) = *($0)
	CALL eosio_assert(((int_64)$6 == (int_64)*(CALL $15(($5 + [88]), $7, [8639]) + [8])), [8466])
	CALL require_auth($1)
	*((($5 + [48]) + [32])) = [0]
	*($5 + [56]) = $7
	*($5 + [64]) = (int_64)-1
	*($5 + [72]) = (int_64)0
	$11 = *($0)
	*($5 + [48]) = $11
	$10 = CALL db_find_i64($11, $7, (int_64)4497131530749870080, $2)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$10 = CALL $23(($5 + [48]), $10)
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)($5 + [48])), [9617])
	*((($5 + [16]) + [8])) = [0]
	*((($5 + [32]) + [8])) = *(($3 + [8]))
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = *($3)
	$11 = *($0)
	$8 = CALL $84([8980])
	if ( ((uint_32)$8 > (uint_32)[-17]) ){ goto $label$6 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$11 }
	*($5 + [16]) = ($8 << [1])
	$13 = (($5 + [16]) | [1])
	if ( $8 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	CALL eosio_assert([0], [8956])
	$13 = *($5 + [72])
	if ( $13 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$11
	$14 = (($8 + [16]) & [-16])
	$13 = CALL _Znwj($14)
	*($5 + [16]) = ($14 | [1])
	*($5 + [24]) = $13
	*($5 + [20]) = $8
	
.LABEL $label$10
	CALL memcpy($13, [8980], $8)
	
.LABEL $label$9
	*(($13 + $8)) = [0]
	*(($5 + [8])) = *((($5 + [32]) + [8]))
	*($5) = *($5 + [32])
	CALL $14($0, $1, $11, $5, ($5 + [16]))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($5 + [24]))
	
.LABEL $label$13
	CALL eosio_assert([1], [9351])
	CALL eosio_assert(((int_32)*(($10 + [24])) == (int_32)($5 + [48])), [9386])
	CALL eosio_assert(((int_64)*($5 + [48]) == (int_64)CALL $fimport$3()), [9432])
	$11 = *($10)
	$8 = ($10 + [16])
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)*($8)), [9271])
	$7 = ((int_64)*($10 + [8]) + (int_64)*($3))
	*($10 + [8]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9314])
	CALL eosio_assert(((int_64)*($10 + [8]) < (int_64)4611686018427387904), [9333])
	CALL eosio_assert(((int_64)$11 == (int_64)*($10)), [9483])
	CALL eosio_assert([1], [9542])
	CALL memcpy(($5 + [128]), $10, [8])
	CALL eosio_assert([1], [9542])
	CALL memcpy((($5 + [128]) | [8]), ($10 + [8]), [8])
	CALL eosio_assert([1], [9542])
	CALL memcpy((($5 + [128]) + [16]), $8, [8])
	CALL db_update_i64(*($10 + [28]), (int_64)0, ($5 + [128]), [24])
	$10 = (($5 + [48]) + [16])
	if ( (uint_64)($11 <= *($10)) ){ goto $label$14 }
	*($10) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	$13 = *($5 + [72])
	if ( ($13 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$3 = ($5 + [76])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$13) ){ goto $label$16 }
	
.LOOP $label$17:
	$10 = ($10 + [-24])
	$8 = *($10)
	*($10) = [0]
	if ( ($8 == 0) ){ goto $label$18 }
	CALL _ZdlPv($8)
	
.LABEL $label$18
	if ( ((int_32)$13 != (int_32)$10) ){ goto $label$17 }
	$10 = *(($5 + [72]))
	goto $label$15 
	
.LABEL $label$16
	$10 = $13
	
.LABEL $label$15
	*($3) = $13
	CALL _ZdlPv($10)
	
.LABEL $label$7
	$13 = *($5 + [112])
	if ( ($13 == 0) ){ goto $label$19 }
	$3 = ($5 + [116])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$13) ){ goto $label$21 }
	
.LOOP $label$22:
	$10 = ($10 + [-24])
	$8 = *($10)
	*($10) = [0]
	if ( ($8 == 0) ){ goto $label$23 }
	CALL _ZdlPv($8)
	
.LABEL $label$23
	if ( ((int_32)$13 != (int_32)$10) ){ goto $label$22 }
	$10 = *(($5 + [112]))
	goto $label$20 
	
.LABEL $label$21
	$10 = $13
	
.LABEL $label$20
	*($3) = $13
	CALL _ZdlPv($10)
	
.LABEL $label$19
	$global$0 = ($5 + [160])
	return (unreachable)
	
.LABEL $label$6
	CALL $79(($5 + [16]))
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [112])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	$6 = *($1)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$1 = [0]
	$7 = $4
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$5 = [1]
	$9 = $1
	$1 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$1 < (int_32)[6])
	$9 = ($1 + [1])
	$1 = $9
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$1 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [8420])
	CALL eosio_assert(((int_64)$6 > (int_64)0), [8658])
	CALL require_auth(*($0))
	*((($2 + [72]) + [32])) = [0]
	*($2 + [80]) = $4
	*($2 + [88]) = (int_64)-1
	*($2 + [96]) = (int_64)0
	*($2 + [72]) = *($0)
	CALL eosio_assert(((int_64)$3 == (int_64)*(CALL $15(($2 + [72]), $4, [8639]) + [8])), [8466])
	*((($2 + [32]) + [32])) = [0]
	*($2 + [40]) = $4
	*($2 + [48]) = (int_64)-1
	*($2 + [56]) = (int_64)0
	$7 = *($0)
	*($2 + [32]) = $7
	$1 = CALL db_find_i64($7, $4, (int_64)-2129398146078059648, $4)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$12 }
	$0 = CALL $26(($2 + [32]), $1)
	CALL eosio_assert(((int_32)*($0 + [40]) == (int_32)($2 + [32])), [9617])
	$7 = *($0 + [16])
	$4 = CALL current_time()
	*($2 + [24]) = $4
	$8 = *(($0 + [32]))
	*(($2 + [16])) = $8
	*($2 + [8]) = *($0 + [24])
	$10 = *($0)
	if ( ((uint_64)((uint_64)$4 / (uint_64)(int_64)14400000000) <= (uint_64)((uint_64)$7 / (uint_64)(int_64)14400000000)) ){ goto $label$11 }
	CALL eosio_assert([1], [9137])
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$4 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$7 = $4
	$5 = [1]
	$9 = $1
	$1 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$13 }
	goto $label$9 
	
.LABEL $label$14
	$7 = $4
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$1 < (int_32)[6])
	$9 = ($1 + [1])
	$1 = $9
	if ( $5 ){ goto $label$15 }
	$5 = [1]
	$1 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$13 }
	goto $label$9 
	
.LABEL $label$12
	CALL eosio_assert([0], [9548])
	$9 = *($2 + [56])
	if ( $9 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$11
	$7 = *($2 + [8])
	goto $label$8 
	
.LABEL $label$10
	$5 = [0]
	
.LABEL $label$9
	CALL eosio_assert($5, [8192])
	*(($2 + [16])) = $8
	$7 = (int_64)0
	*($2 + [8]) = (int_64)0
	
.LABEL $label$8
	CALL eosio_assert(((int_64)$3 == (int_64)$8), [9271])
	$7 = ((int_64)$7 + (int_64)$6)
	*($2 + [8]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9314])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9333])
	CALL eosio_assert(((int_64)$7 <= (int_64)$10), [9256])
	*($2 + [4]) = ($2 + [8])
	*($2) = ($2 + [24])
	CALL eosio_assert([1], [9351])
	CALL $27(($2 + [32]), $0, (int_64)0, $2)
	$9 = *($2 + [56])
	if ( ($9 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$0 = ($2 + [60])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$17 }
	
.LOOP $label$18:
	$1 = ($1 + [-24])
	$5 = *($1)
	*($1) = [0]
	if ( ($5 == 0) ){ goto $label$19 }
	CALL _ZdlPv($5)
	
.LABEL $label$19
	if ( ((int_32)$9 != (int_32)$1) ){ goto $label$18 }
	$1 = *(($2 + [56]))
	goto $label$16 
	
.LABEL $label$17
	$1 = $9
	
.LABEL $label$16
	*($0) = $9
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$9 = *($2 + [96])
	if ( ($9 == 0) ){ goto $label$20 }
	$0 = ($2 + [100])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$22 }
	
.LOOP $label$23:
	$1 = ($1 + [-24])
	$5 = *($1)
	*($1) = [0]
	if ( ($5 == 0) ){ goto $label$24 }
	CALL _ZdlPv($5)
	
.LABEL $label$24
	if ( ((int_32)$9 != (int_32)$1) ){ goto $label$23 }
	$1 = *(($2 + [96]))
	goto $label$21 
	
.LABEL $label$22
	$1 = $9
	
.LABEL $label$21
	*($0) = $9
	CALL _ZdlPv($1)
	
.LABEL $label$20
	$global$0 = ($2 + [112])
}

void .FUNC $24 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$5 = ($global$0 - [192])
	$global$0 = $5
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [8589])
	$6 = [0]
	$7 = *($3)
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$8 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $10
	$6 = [1]
	$11 = $9
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$9 < (int_32)[6])
	$11 = ($9 + [1])
	$9 = $11
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8420])
	CALL eosio_assert(((int_64)$7 > (int_64)0), [8658])
	$9 = *($4)
	if ( ($9 & [1]) ){ goto $label$7 }
	$9 = uint_32($9 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$9 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($9 <= [257]), [8331])
	$10 = *($3 + [8])
	*((($5 + [120]) + [32])) = [0]
	$8 = (uint_64)$10 >> (uint_64)(int_64)8
	*($5 + [128]) = $8)
	*($5 + [136]) = (int_64)-1
	*($5 + [144]) = (int_64)0
	*($5 + [120]) = *($0)
	CALL eosio_assert(((int_64)$10 == (int_64)*(CALL $15(($5 + [120]), $8, [8639]) + [8])), [8466])
	CALL require_auth(*($0))
	$12 = *($3 + [8])
	*((($5 + [104]) + [8])) = $12
	$13 = *($3)
	*((($5 + [16]) + [8])) = $12
	*($5 + [16]) = $13
	*($5 + [104]) = $13
	CALL $25($0, ($5 + [16]))
	*((($5 + [64]) + [32])) = [0]
	*($5 + [72]) = $8
	*($5 + [80]) = (int_64)-1
	*($5 + [88]) = (int_64)0
	$13 = *($0)
	*($5 + [64]) = $13
	$9 = CALL db_find_i64($13, $8, (int_64)4497131530749870080, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$14 }
	$9 = CALL $23(($5 + [64]), $9)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)($5 + [64])), [9617])
	CALL eosio_assert([1], [9351])
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)($5 + [64])), [9386])
	CALL eosio_assert(((int_64)*($5 + [64]) == (int_64)CALL $fimport$3()), [9432])
	$8 = *($9)
	CALL eosio_assert(((int_64)*($9 + [8]) >= (int_64)$7), [8714])
	$6 = ($9 + [16])
	CALL eosio_assert(((int_64)$10 == (int_64)*($6)), [9747])
	$10 = (int_64)
	*($9 + [8]) = $10(*($9 + [8]) - $7))
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [9795])
	CALL eosio_assert(((int_64)*($9 + [8]) < (int_64)4611686018427387904), [9817])
	CALL eosio_assert(((int_64)$8 == (int_64)*($9)), [9483])
	CALL eosio_assert([1], [9542])
	CALL memcpy(($5 + [160]), $9, [8])
	CALL eosio_assert([1], [9542])
	CALL memcpy((($5 + [160]) | [8]), ($9 + [8]), [8])
	CALL eosio_assert([1], [9542])
	CALL memcpy((($5 + [160]) + [16]), $6, [8])
	CALL db_update_i64(*($9 + [28]), (int_64)0, ($5 + [160]), [24])
	$9 = (($5 + [64]) + [16])
	if ( (uint_64)($8 <= *($9)) ){ goto $label$15 }
	*($9) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*((($5 + [32]) + [8])) = [0]
	*((($5 + [48]) + [8])) = *(($3 + [8]))
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = *($3)
	$8 = *($0)
	$9 = CALL $84([8988])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$13 }
	*($5 + [32]) = ($9 << [1])
	$6 = (($5 + [32]) | [1])
	if ( $9 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	CALL eosio_assert([0], [8956])
	$11 = *($5 + [88])
	if ( $11 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$13
	$11 = (($9 + [16]) & [-16])
	$6 = CALL _Znwj($11)
	*($5 + [32]) = ($11 | [1])
	*($5 + [40]) = $6
	*($5 + [36]) = $9
	
.LABEL $label$12
	CALL memcpy($6, [8988], $9)
	
.LABEL $label$11
	*(($6 + $9)) = [0]
	*(($5 + [8])) = *((($5 + [48]) + [8]))
	*($5) = *($5 + [48])
	CALL $14($0, $8, $2, $5, ($5 + [32]))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($5 + [40]))
	
.LABEL $label$16
	$11 = *($5 + [88])
	if ( ($11 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$3 = ($5 + [92])
	$9 = *($3)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$18 }
	
.LOOP $label$19:
	$9 = ($9 + [-24])
	$6 = *($9)
	*($9) = [0]
	if ( ($6 == 0) ){ goto $label$20 }
	CALL _ZdlPv($6)
	
.LABEL $label$20
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$19 }
	$9 = *(($5 + [88]))
	goto $label$17 
	
.LABEL $label$18
	$9 = $11
	
.LABEL $label$17
	*($3) = $11
	CALL _ZdlPv($9)
	
.LABEL $label$9
	$11 = *($5 + [144])
	if ( ($11 == 0) ){ goto $label$21 }
	$3 = ($5 + [148])
	$9 = *($3)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$23 }
	
.LOOP $label$24:
	$9 = ($9 + [-24])
	$6 = *($9)
	*($9) = [0]
	if ( ($6 == 0) ){ goto $label$25 }
	CALL _ZdlPv($6)
	
.LABEL $label$25
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$24 }
	$9 = *(($5 + [144]))
	goto $label$22 
	
.LABEL $label$23
	$9 = $11
	
.LABEL $label$22
	*($3) = $11
	CALL _ZdlPv($9)
	
.LABEL $label$21
	$global$0 = ($5 + [192])
	return (unreachable)
	
.LABEL $label$8
	CALL $79(($5 + [32]))
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9386])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9432])
	*($1 + [16]) = *(*($3))
	$3 = *($3 + [4])
	*(($1 + [32])) = *(($3 + [8]))
	*($1 + [24]) = *($3)
	$5 = *($1 + [8])
	CALL eosio_assert([1], [9483])
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $64(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	$2 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( (uint_64)($2) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9668])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $85($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([56])
	$6 = CALL $42($5)
	*($5 + [40]) = $0
	CALL $73(($3 + [32]), $6)
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [16]) = $7)
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $44(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $88($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9542])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9542])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $66($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9542])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9542])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $71(CALL $70($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9691])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9691])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9691])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9691])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9691])
	CALL memcpy($0, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9542])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9542])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9542])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9542])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9542])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9542])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9542])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9542])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9542])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $69(*($1), ($0 + [32]))
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $82($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$6 = *($1 + [32])
	$1 = CALL $80(($2 + [16]), ($1 + [36]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$3 = (*(*($0)) + int_32($7 >> [1]))
	$0 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($8 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$7 = CALL $80(($2 + [64]), $1)
	*(($2 + [8])) = *($8)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 ($6 & [255])), (int_32 $7), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9691])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9691])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9691])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [9691])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9691])
	CALL memcpy(($0 + [32]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $54(*($1), ($0 + [36]))
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9542])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9542])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9542])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9542])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9542])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9137])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8192])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [9691])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [9691])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
}

void .FUNC $88 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18452])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18260]
	$3 = (((int_32)$1 * (int_32)[12]) + [18260])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10060]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10064])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10060]) = [1]
	$2 = ($2 << [16])
	*([0] + [10064]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10064])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10064]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10060]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10060]) = [1]
	$3 = ($3 << [16])
	*([0] + [10064]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10064])
	
.LABEL $label$10
	*([0] + [10064]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $87($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8245])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $85 (int_32 $0)
{
	return CALL $86([10068], $0)
}

int_32 .FUNC $84 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $83 (int_32 $0)
{
}

void .FUNC $82 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9691])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9691])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9691])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9691])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9691])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9691])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9691])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9691])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9691])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9691])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9542])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9542])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9542])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9542])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9542])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $88($0)
	
.LABEL $label$1
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10050])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $66($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9691])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9386])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9432])
	$5 = *($2)
	*($1) = *($5)
	$6 = *($1 + [8])
	*($1 + [8]) = *(($5 + [8]))
	*($1 + [16]) = CALL current_time()
	$7 = *(*($2) + [8])
	CALL eosio_assert([1], [9137])
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	$6 = (uint_64)$7 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $9
	$5 = [1]
	$10 = $2
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$2 < (int_32)[6])
	$10 = ($2 + [1])
	$2 = $10
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [8192])
	*(($1 + [32])) = $7
	*($1 + [24]) = (int_64)0
	CALL eosio_assert(((int_64)$8 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)), [9483])
	$5 = $3
	$2 = ($5 + [-48])
	$global$0 = $2
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($5 + [-8])
	CALL $63($4, $1)
	CALL db_update_i64(*($1 + [44]), (int_64)0, $2, [40])
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$6
	$global$0 = ($4 + [16])
}

int_32 .FUNC $37 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9137])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8192])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [9137])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $3
	$6 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$1 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [8192])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [8192])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [8192])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $79 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = [0]
	*(($4 + [72])) = [0]
	$6 = (uint_64)$2 >> (uint_64)(int_64)8
	*($4 + [48]) = $6)
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	$7 = *($0)
	*($4 + [40]) = $7
	$8 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $2(($4 + [40]), $8) + [40]) == (int_32)($4 + [40])), [9617])
	$5 = [1]
	
.LABEL $label$1
	CALL eosio_assert($5, [8997])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$3 }
	$5 = uint_32($5 >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($3 + [4])
	
.LABEL $label$2
	CALL eosio_assert(($5 <= [257]), [8331])
	$3 = [0]
	*(($4 + [32])) = [0]
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	$7 = *($0)
	*($4) = $7
	*($4 + [8]) = $6
	$5 = CALL db_find_i64($7, $6, (int_64)4497131530749870080, $1)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(CALL $23($4, $5) + [24]) == (int_32)$4), [9617])
	CALL eosio_assert([0], [9021])
	$8 = *($4 + [24])
	if ( $8 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([1], [9137])
	
.LOOP $label$9:
	$5 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $7
	$8 = [1]
	$9 = $3
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $7
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$3 < (int_32)[6])
	$9 = ($3 + [1])
	$3 = $9
	if ( $8 ){ goto $label$11 }
	$8 = [1]
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	
.LABEL $label$7
	CALL eosio_assert($8, [8192])
	$10 = *($0)
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$3()), [9696])
	*(($9 = CALL _Znwj([40])) + [16]) = (int_64)1398362884
	*($9 + [8]) = (int_64)0
	CALL eosio_assert([1], [9137])
	$11 = ($9 + [16])
	$12 = ($9 + [8])
	$6 = (int_64)5462355
	
.LOOP $label$13:
	$0 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$6 = $7
	$0 = [1]
	$3 = $5
	$5 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$6 = $7
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $3 ){ goto $label$15 }
	$0 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	
.LABEL $label$12
	CALL eosio_assert($0, [8192])
	*($9 + [24]) = $4
	*(($9 + [16])) = $2
	*(($9 + [8])) = (int_64)0
	*($9) = $1
	CALL eosio_assert([1], [9542])
	CALL memcpy(($4 + [96]), $9, [8])
	CALL eosio_assert([1], [9542])
	CALL memcpy((($4 + [96]) | [8]), $12, [8])
	CALL eosio_assert([1], [9542])
	CALL memcpy((($4 + [96]) + [16]), $11, [8])
	$6 = *($9)
	$3 = CALL db_store_i64(*(($4 + [8])), (int_64)4497131530749870080, $10, $6, ($4 + [96]), [24])
	*($9 + [28]) = $3
	$5 = ($4 + [16])
	if ( (uint_64)($6 <= *($5)) ){ goto $label$16 }
	*($5) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*($4 + [88]) = $9
	$6 = *($9)
	*($4 + [96]) = $6
	*($4 + [84]) = $3
	$8 = ($4 + [28])
	$5 = *($8)
	if ( ((uint_32)$5 >= (uint_32)*(($4 + [32]))) ){ goto $label$19 }
	*($5 + [8]) = $6
	*($5 + [16]) = $3
	*($4 + [88]) = [0]
	*($5) = $9
	*($8) = ($5 + [24])
	$5 = *($4 + [88])
	*($4 + [88]) = [0]
	if ( $5 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL $33(($4 + [24]), ($4 + [88]), ($4 + [96]), ($4 + [84]))
	$5 = *($4 + [88])
	*($4 + [88]) = [0]
	if ( ($5 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$8 = *($4 + [24])
	if ( ($8 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$9 = ($4 + [28])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$21 }
	
.LOOP $label$22:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$23 }
	CALL _ZdlPv($3)
	
.LABEL $label$23
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$22 }
	$5 = *(($4 + [24]))
	goto $label$20 
	
.LABEL $label$21
	$5 = $8
	
.LABEL $label$20
	*($9) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$8 = *($4 + [64])
	if ( ($8 == 0) ){ goto $label$24 }
	$9 = ($4 + [68])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$26 }
	
.LOOP $label$27:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$28 }
	CALL _ZdlPv($3)
	
.LABEL $label$28
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$27 }
	$5 = *(($4 + [64]))
	goto $label$25 
	
.LABEL $label$26
	$5 = $8
	
.LABEL $label$25
	*($9) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$24
	$global$0 = ($4 + [128])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9668])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $85($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([56])
	$6 = CALL $37($5)
	*($5 + [40]) = $0
	CALL $72(($3 + [32]), $6)
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [16]) = $7)
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $39(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $88($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9386])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9432])
	*($1 + [16]) = *(*($3))
	$3 = *($3 + [4])
	*(($1 + [32])) = *(($3 + [8]))
	*($1 + [24]) = *($3)
	$5 = *($1 + [8])
	CALL eosio_assert([1], [9483])
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $63(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	$2 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( (uint_64)($2) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}