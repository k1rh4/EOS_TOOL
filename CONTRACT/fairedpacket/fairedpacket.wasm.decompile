(data (i32.const 4) "Ph\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "transfer\00")
(data (i32.const 128) "faireostoken\00")
(data (i32.const 144) "eosio.token\00")
(data (i32.const 160) "read\00")
(data (i32.const 176) "get\00")
(data (i32.const 192) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 256) "invalid symbol name\00")
(data (i32.const 288) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 352) "Red envelopes don\'t exist.\00")
(data (i32.const 384) "Red envelopes are gone.\00")
(data (i32.const 416) "Packet snatching information is invalid\00")
(data (i32.const 464) "invalid token type\00")
(data (i32.const 496) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 560) "Player information does not exist\00")
(data (i32.const 608) "active\00")
(data (i32.const 624) "Your bonus\00")
(data (i32.const 640) "faireosgiver\00")
(data (i32.const 656) "faireosthank\00")
(data (i32.const 672) "cannot pass end iterator to modify\00")
(data (i32.const 720) "user info not exist\00")
(data (i32.const 752) "object passed to modify is not in multi_index\00")
(data (i32.const 800) "cannot modify objects in table of another contract\00")
(data (i32.const 864) "updater cannot change primary key when modifying an object\00")
(data (i32.const 928) "cannot pass end iterator to erase\00")
(data (i32.const 976) "cannot increment end iterator\00")
(data (i32.const 1008) "error reading iterator\00")
(data (i32.const 1040) "object passed to erase is not in multi_index\00")
(data (i32.const 1088) "cannot erase objects in table of another contract\00")
(data (i32.const 1152) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1216) "write\00")
(data (i32.const 1232) "attempt to add asset with different symbol\00")
(data (i32.const 1280) "addition underflow\00")
(data (i32.const 1312) "addition overflow\00")
(data (i32.const 1344) "Red envelopes are gone\00")
(data (i32.const 1376) "Users are not eligible to rob packets\00")
(data (i32.const 1424) "You\'ve robbed the red envelope\00")
(data (i32.const 1456) "cannot create objects in table of another contract\00")
(data (i32.const 1520) "red:\00")
(data (i32.const 1536) "The game has not yet been activated\00")
(data (i32.const 1584) "send|\00")
(data (i32.const 1600) "ticket\00")
(data (i32.const 1616) "invalid oper type\00")
(data (i32.const 1648) "Red envelope amount not supported\00")
(data (i32.const 1696) "Purchased eos ticket\00")
(data (i32.const 1728) "Purchased fair ticket\00")
(data (i32.const 1760) "faireosadmin\00")
(data (i32.const 1776) "No permission to send\00")
(data (i32.const 1808) "red id is invalid\00")
(data (i32.const 10224) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$8 (param i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$14 (param i64)))
(import "env" "require_auth2" (func $fimport$15 (param i64 i64)))
(import "env" "send_inline" (func $fimport$16 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN3red8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $6))
(export "_ZN3red8activateEb" (func $8))
(export "_ZN3red4grabEyy" (func $10))
(export "_ZN3red3endEyNSt3__16vectorINS_9grab_infoENS0_9allocatorIS2_EEEE" (func $12))
(export "_ZN3red10is_qualifyEyN5eosio5assetE" (func $43))
(export "malloc" (func $55))
(export "free" (func $58))
(export "atoi" (func $67))
(export "memcmp" (func $68))
(export "strlen" (func $69))
(export "memchr" (func $70))
(table $0 5 5 anyfunc)
(elem (i32.const 0) $71 $8 $10 $6 $12)



int_32 .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $59([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $30($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $33(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $59(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $60($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $30($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [1216])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [1216])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $32(CALL $31($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $59($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $59($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $59(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $64($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [36])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [40])) = $6
	CALL $60($6)
	
.LABEL $label$11
	CALL $60($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $60($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC atoi (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$3 = *($0)
	$1 = int_32(($3 << [24]) >> [24])
	$2 = ($1 + [-9])
	$4 = ($0 + [1])
	$0 = $4
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$1 }
	$0 = $4
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$1 = [1]
	goto $label$4 
	
.LABEL $label$5
	$1 = [0]
	
.LABEL $label$4
	$3 = *($4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-1])
	$1 = [0]
	
.LABEL $label$2
	$2 = [0]
	$3 = (int_32(($3 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($4 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $3)
	$3 = *($0)
	$0 = ($0 + [1])
	$3 = ($3 + [-48])
	if ( ($3 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $1 )
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [1216])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $7) > (int_32)[7]), [1216])
	CALL memcpy(*($2), $5, [8])
	$7 = (*($2) + [8])
	*($2) = $7
	$5 = ($5 + [8])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [1216])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1216])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1216])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1216])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	*($5 + [15]) = *(*($0 + [20]))
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1216])
	CALL memcpy(*($2 + [4]), ($5 + [15]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	CALL $29(*($1), *($0 + [24]))
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [1216])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [1216])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [1216])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($2 + [4]), $0, [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((int_32)(*($2 + [8]) - $1) > (int_32)[7]), [1216])
	CALL memcpy(*($2 + [4]), ($0 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	$6 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [752])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [800])
	$4 = *(($2 + [4]))
	$5 = *($4 + [8])
	$3 = *($1)
	if ( (*(*($2)) == 0) ){ goto $label$2 }
	CALL eosio_assert(((int_64)$5 == (int_64)*(($1 + [16]))), [1232])
	$5 = ((int_64)*($1 + [8]) + (int_64)*($4))
	*($1 + [8]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1280])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1312])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$5 == (int_64)*(($1 + [32]))), [1232])
	$5 = ((int_64)*($1 + [24]) + (int_64)*($4))
	*($1 + [24]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1280])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [1312])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [864])
	$7 = $7
	$2 = ($7 + [-80])
	*([0] + [4]) = $2
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($7 + [-8])
	*($6 + [16]) = $6
	*($6 + [28]) = ($1 + [8])
	*($6 + [24]) = $1
	*($6 + [32]) = ($1 + [24])
	*($6 + [36]) = ($1 + [40])
	*($6 + [40]) = ($1 + [56])
	CALL $21(($6 + [24]), ($6 + [16]))
	CALL db_update_i64(*($1 + [76]), (int_64)0, $2, [72])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [1040])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1088])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1152])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [36])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [40])) = $6
	CALL $60($6)
	
.LABEL $label$7
	CALL $60($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [36])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [40])) = $6
	CALL $60($6)
	
.LABEL $label$10
	CALL $60($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [64])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [752])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [800])
	*($1 + [33]) = [1]
	$2 = *($1)
	CALL eosio_assert([1], [864])
	$4 = ($1 + [36])
	$3 = ($1 + [33])
	$6 = *($1 + [36])
	$5 = *(($1 + [40]))
	$7 = ($5 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	$8 = [34]
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$8 = (($7 & [-8]) + $8)
	
.LABEL $label$2
	if ( ($8 <= [513]) ){ goto $label$4 }
	$10 = CALL malloc($8)
	goto $label$3 
	
.LABEL $label$4
	$10 = ($10 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$3
	*($11 + [12]) = $10
	*($11 + [8]) = $10
	*($11 + [16]) = ($10 + $8)
	*($11 + [24]) = ($11 + [8])
	*($11 + [52]) = $3
	*($11 + [56]) = $4
	*($11 + [32]) = $1
	*($11 + [36]) = ($1 + [8])
	*($11 + [40]) = ($1 + [24])
	*($11 + [44]) = ($1 + [28])
	*($11 + [48]) = ($1 + [32])
	CALL $28(($11 + [32]), ($11 + [24]))
	CALL db_update_i64(*($1 + [52]), (int_64)0, $10, $8)
	if ( ($8 <= [513]) ){ goto $label$5 }
	CALL free($10)
	
.LABEL $label$5
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [64])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1008])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $59([32])
	$6 = CALL $26($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $27(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $60($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$9 = [0]
	*(($10 + [40])) = [0]
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	$7 = *($1)
	*($10 + [8]) = $7
	*($10 + [16]) = $2
	$8 = (uint_64)$3 >> (uint_64)(int_64)8
	$1 = CALL db_find_i64($7, $2, (int_64)3607749779137757184, $8)
	if ( ((int_32)$1) < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $25(($10 + [8]), $1) + [16]) == (int_32)($10 + [8])), [288])
	$4 = *(($10 + [32]))
	$6 = *(($10 + [36]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$6 }
	$9 = ($6 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)(uint_64)*(*($9) + [8]) >> (uint_64)(int_64)8) == (int_64)$8) ){ goto $label$6 }
	$6 = $9
	$1 = ($9 + [-24])
	$9 = $1
	if ( ((int_32)($1 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	$9 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($10 + [8])), [288])
	goto $label$3 
	
.LABEL $label$5
	*($0 + [8]) = $3
	*($0) = (int_64)0
	CALL eosio_assert([1], [192])
	
.LOOP $label$9:
	$1 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$1 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($1, [256])
	$6 = *($10 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$9 = [0]
	$1 = CALL db_find_i64(*($10 + [8]), *(($10 + [16])), (int_64)3607749779137757184, $8)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $25(($10 + [8]), $1)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($10 + [8])), [288])
	
.LABEL $label$3
	*($0) = *($9)
	*(($0 + [8])) = *(($9 + [8]))
	$6 = *($10 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($10 + [36])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$13 }
	
.LOOP $label$14:
	$9 = ($9 + [-24])
	$1 = *($9)
	*($9) = [0]
	if ( ($1 == 0) ){ goto $label$15 }
	CALL $60($1)
	
.LABEL $label$15
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$14 }
	$9 = *(($10 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$9 = $6
	
.LABEL $label$12
	*($5) = $6
	CALL $60($9)
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $59(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $64($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $60($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $60($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [192])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [256])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $65(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $65(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $60(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $60(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $50(*($1), ($0 + [32]))
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC _ZN3red10is_qualifyEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	$3 = *($2 + [8])
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	$5 = *($0)
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($7 + [32]) = (int_64)0
	$0 = [0]
	$2 = CALL db_lowerbound_i64($5, $1, (int_64)-6030912129794572288, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $17(($7 + [8]), $2)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [720])
	$1 = *(( ($0 + [40]) ? ($0 + [56]) : ((int_64)$3 != (int_64)353416332804) ))
	$4 = *($7 + [32])
	if ( ($4 == 0) ){ goto $label$2 }
	$6 = ($7 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL $60($2)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($7 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $4
	
.LABEL $label$3
	*($6) = $4
	CALL $60($0)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [48])
	return ((int_64)$1 > (int_64)0)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [3])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($7 >> [2])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $59(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $64($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [3]))
	$2 = ($7 + ($4 << [3]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [3]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $60($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [176])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [3])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $42($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [3]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]), [160])
	CALL memcpy($4, *($5), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [160])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [160])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [160])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [160])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [160])
	CALL memcpy(($5 + [15]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($5 + [15]) != (int_32)[0])
	CALL $41(*($1), *($0 + [24]))
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1008])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $59([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [160])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [160])
	CALL memcpy(($8 + [16]), ($7 + [8]), [1])
	*($6 + [8]) = ((int_32)*($8 + [16]) != (int_32)[0])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $46(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $60($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $59(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $64($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $60($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $60($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $59(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $64($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $60($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$11 = (*([0] + [4]) - [64])
	$12 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [752])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [800])
	$3 = *($1)
	*($1 + [28]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [32]) = (*($1 + [32]) + [1])
	$5 = *($2)
	$9 = ($1 + [40])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)*(($1 + [44]))) ){ goto $label$2 }
	*($9) = ($2 + [8])
	*($2) = *($5)
	$9 = ($1 + [36])
	goto $label$1 
	
.LABEL $label$2
	$9 = ($1 + [36])
	CALL $45($9, $5)
	
.LABEL $label$1
	$5 = ($1 + [32])
	$4 = ($1 + [28])
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [864])
	$7 = *($9)
	$6 = *(($1 + [40]))
	$8 = ($6 - $7)
	$10 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$2 = [34]
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$2 = (($8 & [-8]) + $2)
	
.LABEL $label$4
	if ( ($2 <= [513]) ){ goto $label$6 }
	$11 = CALL malloc($2)
	goto $label$5 
	
.LABEL $label$6
	$11 = ($11 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $11
	
.LABEL $label$5
	*($12 + [12]) = $11
	*($12 + [8]) = $11
	*($12 + [16]) = ($11 + $2)
	*($12 + [24]) = ($12 + [8])
	*($12 + [44]) = $4
	*($12 + [48]) = $5
	*($12 + [56]) = $9
	*($12 + [32]) = $1
	*($12 + [36]) = ($1 + [8])
	*($12 + [40]) = ($1 + [24])
	*($12 + [52]) = ($1 + [33])
	CALL $28(($12 + [32]), ($12 + [24]))
	CALL db_update_i64(*($1 + [52]), (int_64)0, $11, $2)
	if ( ($2 <= [513]) ){ goto $label$7 }
	CALL free($11)
	
.LABEL $label$7
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($12 + [64])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [176])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $30($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [160])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

void .FUNC $60 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $71 ()
{
	(unreachable)
}

void .FUNC _ZN3red8activateEb (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*((($6 + [8]) + [32])) = [0]
	*($6 + [24]) = (int_64)-1
	$2 = *($0)
	*($6 + [8]) = $2
	*($6 + [16]) = $2
	*($6 + [32]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL $47(($6 + [8]), $3)
	CALL eosio_assert([1], [672])
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($6 + [8])), [752])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $fimport$2()), [800])
	*($0 + [8]) = $1
	$2 = *($0)
	CALL eosio_assert([1], [864])
	CALL eosio_assert([1], [1216])
	CALL memcpy(($6 + [64]), $0, [8])
	*($6 + [56]) = *($0 + [8])
	CALL eosio_assert([1], [1216])
	CALL memcpy((($6 + [64]) | [8]), ($6 + [56]), [1])
	CALL db_update_i64(*($0 + [20]), (int_64)0, ($6 + [64]), [9])
	$0 = ($6 + [24])
	if ( (uint_64)($2 <= *($0)) ){ goto $label$3 }
	*($0) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$3 = *($6 + [32])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$4 = *($0)
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$2()), [1456])
	*(($0 = CALL $59([32])) + [16]) = ($6 + [8])
	*($0 + [8]) = $1
	CALL eosio_assert([1], [1216])
	CALL memcpy(($6 + [64]), $0, [8])
	*($6 + [56]) = *($0 + [8])
	CALL eosio_assert([1], [1216])
	CALL memcpy((($6 + [64]) | [8]), ($6 + [56]), [1])
	$2 = *($0)
	$3 = CALL db_store_i64(*((($6 + [8]) + [8])), (int_64)7235159550150574080, $4, $2, ($6 + [64]), [9])
	*($0 + [20]) = $3
	$1 = ($6 + [24])
	if ( (uint_64)($2 <= *($1)) ){ goto $label$5 }
	*($1) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($6 + [56]) = $0
	$2 = *($0)
	*($6 + [64]) = $2
	*($6 + [52]) = $3
	$5 = ($6 + [36])
	$1 = *($5)
	if ( ((uint_32)$1 >= (uint_32)*(($6 + [40]))) ){ goto $label$7 }
	*($1 + [8]) = $2
	*($1 + [16]) = $3
	*($6 + [56]) = [0]
	*($1) = $0
	*($5) = ($1 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $46(($6 + [32]), ($6 + [56]), ($6 + [64]), ($6 + [52]))
	
.LABEL $label$6
	$0 = *($6 + [56])
	*($6 + [56]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	CALL $60($0)
	
.LABEL $label$3
	$3 = *($6 + [32])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($6 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $60($1)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($6 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $3
	
.LABEL $label$8
	*($5) = $3
	CALL $60($0)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [80])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [160])
	CALL memcpy(($5 + [15]), $3, [1])
	$6 = *($5 + [15])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 ((int_32)($6 & [255]) != (int_32)[0])), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC _ZN3red8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [176])
	*([0] + [4]) = $13
	$10 = *($0)
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$2 }
	$9 = *($4)
	if ( ($9 & [1]) ){ goto $label$4 }
	$6 = uint_32($9 >> [1])
	$7 = ($4 + [1])
	goto $label$3 
	
.LABEL $label$4
	$6 = *($4 + [4])
	$7 = *($4 + [8])
	
.LABEL $label$3
	$9 = CALL strlen([1520])
	if ( ($9 == 0) ){ goto $label$5 }
	if ( ((int_32)$6 < (int_32)$9) ){ goto $label$2 }
	$5 = ($7 + $6)
	$8 = $7
	
.LOOP $label$6:
	$6 = (($6 - $9) + [1])
	if ( ($6 == 0) ){ goto $label$2 }
	$6 = CALL memchr($8, [114], $6)
	if ( ($6 == 0) ){ goto $label$2 }
	if ( (CALL memcmp($6, [1520], $9) == 0) ){ goto $label$7 }
	$8 = ($6 + [1])
	$6 = ($5 - $8)
	if ( ((int_32)$6 >= (int_32)$9) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$7
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	if ( ((int_32)($6 - $7) == (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$5
	$9 = [1]
	$2 = *($3 + [8])
	if ( ((int_64)$2 == (int_64)353416332804) ){ goto $label$8 }
	$9 = ((int_64)$2 == (int_64)1397703940)
	
.LABEL $label$8
	CALL eosio_assert($9, [464])
	*(($13 + [128])) = [0]
	*($13 + [112]) = (int_64)-1
	$2 = *($0)
	*($13 + [96]) = $2
	*($13 + [104]) = $2
	*($13 + [120]) = (int_64)0
	$9 = [0]
	$6 = CALL db_lowerbound_i64($2, $2, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$9 }
	$9 = CALL $47(($13 + [96]), $6)
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [1536])
	CALL eosio_assert(*($9 + [8]), [1536])
	*($13 + [95]) = [0]
	if ( ((int_64)*(($3 + [8])) != (int_64)1397703940) ){ goto $label$10 }
	*($13 + [95]) = [1]
	
.LABEL $label$10
	*((($13 + [80]) + [8])) = [0]
	*($13 + [80]) = (int_64)0
	$9 = CALL strlen([1520])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$13 }
	*($13 + [80]) = ($9 << [1])
	$6 = (($13 + [80]) | [1])
	if ( $9 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$8 = (($9 + [16]) & [-16])
	$6 = CALL $59($8)
	*($13 + [80]) = ($8 | [1])
	*($13 + [88]) = $6
	*($13 + [84]) = $9
	
.LABEL $label$12
	CALL memcpy($6, [1520], $9)
	
.LABEL $label$11
	*(($6 + $9)) = [0]
	$9 = *($13 + [80])
	CALL $66(($13 + [64]), $4, ( *($13 + [84]) ? uint_32($9 >> [1]) : ($9 & [1]) ), [-1], $4)
	$6 = *($13 + [64])
	$5 = (($13 + [64]) | [1])
	$7 = *($13 + [72])
	$8 = *($13 + [68])
	$4 = [1]
	$9 = CALL strlen([1584])
	if ( ($9 == 0) ){ goto $label$14 }
	$4 = ($6 & [1])
	$6 = ( $8 ? uint_32($6 >> [1]) : $4 )
	if ( ((int_32)$6 < (int_32)$9) ){ goto $label$15 }
	$7 = ( $7 ? $5 : $4 )
	$8 = ($7 + $6)
	$4 = $7
	
.LOOP $label$16:
	$6 = (($6 - $9) + [1])
	if ( ($6 == 0) ){ goto $label$15 }
	$6 = CALL memchr($4, [115], $6)
	if ( ($6 == 0) ){ goto $label$15 }
	if ( (CALL memcmp($6, [1584], $9) == 0) ){ goto $label$17 }
	$4 = ($6 + [1])
	$6 = ($8 - $4)
	if ( ((int_32)$6 >= (int_32)$9) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$15 }
	$4 = [1]
	if ( ((int_32)($6 - $7) != (int_32)[-1]) ){ goto $label$14 }
	
.LABEL $label$15
	$4 = [0]
	$9 = *($13 + [64])
	$6 = CALL strlen([1600])
	if ( ((int_32)$6 != (int_32)( *($13 + [68]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$14 }
	$4 = (CALL $63(($13 + [64]), [0], [-1], [1600], $6) == 0)
	
.LABEL $label$14
	CALL eosio_assert($4, [1616])
	$9 = *($13 + [64])
	$6 = CALL strlen([1600])
	if ( ((int_32)$6 != (int_32)( *($13 + [68]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$20 }
	if ( (CALL $63(($13 + [64]), [0], [-1], [1600], $6) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$2 = (int_64)0
	$10 = (int_64)59
	$9 = [1760]
	$11 = (int_64)0
	
.LOOP $label$21:
	$12 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$22 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$6 = ($6 + [165])
	goto $label$23 
	
.LABEL $label$24
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$22
	$9 = ($9 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$21 }
	CALL eosio_assert(((int_64)$11 == (int_64)$1), [1776])
	$4 = *($13 + [64])
	$8 = *(($13 + [72]))
	$7 = *($13 + [68])
	$9 = [0]
	$6 = CALL strlen([1584])
	if ( ($6 == 0) ){ goto $label$25 }
	$4 = ( $7 ? uint_32($4 >> [1]) : $9 )
	$9 = ($4 & [1])
	$5 = ( $8 ? $5 : $9 )
	$8 = ($5 + $4)
	$9 = $8
	if ( ((int_32)$4 < (int_32)$6) ){ goto $label$26 }
	$9 = $5
	
.LOOP $label$28:
	$4 = (($4 - $6) + [1])
	if ( ($4 == 0) ){ goto $label$27 }
	$9 = CALL memchr($9, [115], $4)
	if ( ($9 == 0) ){ goto $label$27 }
	if ( (CALL memcmp($9, [1584], $6) == 0) ){ goto $label$26 }
	$9 = ($9 + [1])
	$4 = ($8 - $9)
	if ( ((int_32)$4 >= (int_32)$6) ){ goto $label$28 }
	
.LABEL $label$27
	$9 = $8
	
.LABEL $label$26
	$9 = ( [-1] ? ($9 - $5) : ((int_32)$9 == (int_32)$8) )
	
.LABEL $label$25
	CALL $66(($13 + [8]), ($13 + [64]), ($9 + [5]), [-1], ($13 + [64]))
	$9 = *($13 + [8])
	CALL eosio_assert(((int_32)( *($13 + [12]) ? uint_32($9 >> [1]) : ($9 & [1]) ) != (int_32)[0]), [1808])
	$2 = *($3)
	if ( (*($13 + [95]) == 0) ){ goto $label$30 }
	CALL eosio_assert(((int_64)$2 == (int_64)10000), [1648])
	goto $label$29 
	
.LABEL $label$30
	CALL eosio_assert(((int_64)$2 == (int_64)100000000), [1648])
	
.LABEL $label$29
	*(($13 + [56])) = [0]
	*($13 + [40]) = (int_64)-1
	*($13 + [48]) = (int_64)0
	$2 = *($0)
	*($13 + [24]) = $2
	*($13 + [32]) = $2
	*($13 + [4]) = $3
	*($13) = ($13 + [8])
	*($13 + [168]) = $2
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$2()), [1456])
	*($13 + [148]) = $13
	*($13 + [144]) = ($13 + [24])
	*($13 + [152]) = ($13 + [168])
	*(($6 = CALL $59([64])) + [16]) = (int_64)1398362884
	*($6 + [8]) = (int_64)0
	CALL eosio_assert([1], [192])
	$2 = (int_64)5462355
	$9 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$34 }
	
.LOOP $label$35:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$35 }
	
.LABEL $label$34
	$4 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$4 = [0]
	
.LABEL $label$31
	CALL eosio_assert($4, [256])
	*($6 + [44]) = [0]
	*($6 + [36 align=4]) = (int_64)0
	*($6 + [48]) = ($13 + [24])
	CALL $54(($13 + [144]), $6)
	*($13 + [160]) = $6
	$2 = *($6)
	*($13 + [144]) = $2
	$4 = *($6 + [52])
	*($13 + [140]) = $4
	$8 = ($13 + [52])
	$9 = *($8)
	if ( ((uint_32)$9 >= (uint_32)*(($13 + [56]))) ){ goto $label$37 }
	*($9 + [8]) = $2
	*($9 + [16]) = $4
	*($13 + [160]) = [0]
	*($9) = $6
	*($8) = ($9 + [24])
	goto $label$36 
	
.LABEL $label$37
	CALL $39(($13 + [48]), ($13 + [160]), ($13 + [144]), ($13 + [140]))
	
.LABEL $label$36
	$9 = *($13 + [160])
	*($13 + [160]) = [0]
	if ( ($9 == 0) ){ goto $label$38 }
	$6 = *($9 + [36])
	if ( ($6 == 0) ){ goto $label$39 }
	*(($9 + [40])) = $6
	CALL $60($6)
	
.LABEL $label$39
	CALL $60($9)
	
.LABEL $label$38
	$8 = *($13 + [48])
	if ( ($8 == 0) ){ goto $label$40 }
	$0 = ($13 + [52])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$42 }
	
.LOOP $label$43:
	$9 = ($9 + [-24])
	$6 = *($9)
	*($9) = [0]
	if ( ($6 == 0) ){ goto $label$44 }
	$4 = *($6 + [36])
	if ( ($4 == 0) ){ goto $label$45 }
	*(($6 + [40])) = $4
	CALL $60($4)
	
.LABEL $label$45
	CALL $60($6)
	
.LABEL $label$44
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$43 }
	$9 = *(($13 + [48]))
	goto $label$41 
	
.LABEL $label$42
	$9 = $8
	
.LABEL $label$41
	*($0) = $8
	CALL $60($9)
	
.LABEL $label$40
	if ( ((*($13 + [8]) & [1]) == 0) ){ goto $label$18 }
	CALL $60(*($13 + [16]))
	goto $label$18 
	
.LABEL $label$19
	$2 = *($3)
	if ( (*($13 + [95]) == 0) ){ goto $label$47 }
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)-1000) <= (int_64)199001), [1648])
	CALL eosio_assert((int_64)(((int_64)*($3) % (int_64)1000) == 0), [1648])
	goto $label$46 
	
.LABEL $label$47
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)-10000000) <= (int_64)1990000001), [1648])
	CALL eosio_assert((int_64)(((int_64)*($3) % (int_64)10000000) == 0), [1648])
	
.LABEL $label$46
	*(($6 = ($13 + [56]))) = [0]
	*($13 + [40]) = (int_64)-1
	$2 = *($0)
	*($13 + [24]) = $2
	*($13 + [32]) = $1
	*($13 + [48]) = (int_64)0
	$9 = CALL db_lowerbound_i64($2, $1, (int_64)-6030912129794572288, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$53 }
	$9 = CALL $17(($13 + [24]), $9)
	if ( (*($13 + [95]) == 0) ){ goto $label$52 }
	CALL eosio_assert((int_64)(*($9 + [40]) == 0), [1696])
	goto $label$51 
	
.LABEL $label$53
	$10 = *($0)
	*($13 + [172]) = $3
	*($13 + [168]) = ($13 + [95])
	*($13 + [8]) = $10
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$2()), [1456])
	*($13 + [148]) = ($13 + [168])
	*($13 + [144]) = ($13 + [24])
	*($13 + [152]) = ($13 + [8])
	$9 = CALL $59([88])
	CALL $35($9)
	*($9 + [72]) = ($13 + [24])
	CALL $53(($13 + [144]), $9)
	*($13) = $9
	$2 = *($9)
	*($13 + [144]) = $2
	$8 = *($9 + [76])
	*($13 + [160]) = $8
	$0 = ($13 + [52])
	$4 = *($0)
	if ( ((uint_32)$4 >= (uint_32)*($6)) ){ goto $label$50 }
	*($4 + [8]) = $2
	*($4 + [16]) = $8
	*($13) = [0]
	*($4) = $9
	*($0) = ($4 + [24])
	goto $label$49 
	
.LABEL $label$52
	CALL eosio_assert((int_64)(*($9 + [56]) == 0), [1728])
	
.LABEL $label$51
	*($13 + [148]) = $3
	*($13 + [144]) = ($13 + [95])
	CALL eosio_assert([1], [672])
	CALL $52(($13 + [24]), $9, ($13 + [144]))
	$4 = *($13 + [48])
	if ( $4 ){ goto $label$48 }
	goto $label$18 
	
.LABEL $label$50
	CALL $37(($13 + [48]), $13, ($13 + [144]), ($13 + [160]))
	
.LABEL $label$49
	$9 = *($13)
	*($13) = [0]
	if ( ($9 == 0) ){ goto $label$54 }
	CALL $60($9)
	
.LABEL $label$54
	$4 = *($13 + [48])
	if ( ($4 == 0) ){ goto $label$18 }
	
.LABEL $label$48
	$8 = ($13 + [52])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$56 }
	
.LOOP $label$57:
	$9 = ($9 + [-24])
	$6 = *($9)
	*($9) = [0]
	if ( ($6 == 0) ){ goto $label$58 }
	CALL $60($6)
	
.LABEL $label$58
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$57 }
	$9 = *(($13 + [48]))
	goto $label$55 
	
.LABEL $label$56
	$9 = $4
	
.LABEL $label$55
	*($8) = $4
	CALL $60($9)
	
.LABEL $label$18
	if ( ((*($13 + [64]) & [1]) == 0) ){ goto $label$59 }
	CALL $60(*(($13 + [72])))
	
.LABEL $label$59
	if ( ((*($13 + [80]) & [1]) == 0) ){ goto $label$60 }
	CALL $60(*($13 + [88]))
	
.LABEL $label$60
	$4 = *($13 + [120])
	if ( ($4 == 0) ){ goto $label$2 }
	$8 = ($13 + [124])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$62 }
	
.LOOP $label$63:
	$9 = ($9 + [-24])
	$6 = *($9)
	*($9) = [0]
	if ( ($6 == 0) ){ goto $label$64 }
	CALL $60($6)
	
.LABEL $label$64
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$63 }
	$9 = *(($13 + [120]))
	goto $label$61 
	
.LABEL $label$62
	$9 = $4
	
.LABEL $label$61
	*($8) = $4
	CALL $60($9)
	
.LABEL $label$2
	*([0] + [4]) = ($13 + [176])
	return (unreachable)
	
.LABEL $label$1
	CALL $61(($13 + [80]))
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [192])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [256])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $48(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $49(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $60(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$22 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$3 = ($3 + [165])
	goto $label$20 
	
.LABEL $label$22
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$18
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$17 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$16
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$23:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$24 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$3 = ($3 + [165])
	goto $label$25 
	
.LABEL $label$26
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$27 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$33 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$3 = ($3 + [165])
	goto $label$31 
	
.LABEL $label$33
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$29
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$28 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$27
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$34:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$39 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$3 = ($3 + [165])
	goto $label$37 
	
.LABEL $label$39
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$35
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$34 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$14 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$40:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$45 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$3 = ($3 + [165])
	goto $label$43 
	
.LABEL $label$45
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$44
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$42
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$41
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$40 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*($9 + [72]) = $0
	if ( ((int_64)$2 > (int_64)6111947644295184383) ){ goto $label$48 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$47 }
	if ( ((int_64)$2 != (int_64)3617214701412286464) ){ goto $label$14 }
	*($9 + [60]) = [0]
	*($9 + [56]) = [1]
	*($9 + [16 align=4]) = *($9 + [56])
	CALL $9(($9 + [72]), ($9 + [16]))
	goto $label$14 
	
.LABEL $label$48
	if ( ((int_64)$2 == (int_64)6111947644295184384) ){ goto $label$46 }
	if ( ((int_64)$2 != (int_64)7335361038382006272) ){ goto $label$14 }
	*($9 + [52]) = [0]
	*($9 + [48]) = [2]
	*($9 + [24 align=4]) = *($9 + [48])
	CALL $11(($9 + [72]), ($9 + [24]))
	goto $label$14 
	
.LABEL $label$47
	*($9 + [68]) = [0]
	*($9 + [64]) = [3]
	*($9 + [8 align=4]) = *($9 + [64])
	CALL $7(($9 + [72]), ($9 + [8]))
	goto $label$14 
	
.LABEL $label$46
	*($9 + [44]) = [0]
	*($9 + [40]) = [4]
	*($9 + [32 align=4]) = *($9 + [40])
	CALL $13(($9 + [72]), ($9 + [32]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [80])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [176])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = ((int_32)($2 - $7) / (int_32)[24])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $15($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ((int_32)$4 * (int_32)[24]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [160])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [160])
	CALL memcpy(($7 + [8]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [160])
	CALL memcpy(($7 + [16]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)((int_32)($7 - $6) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$8 = *($0)
	$2 = ((int_32)($6 - $8) / (int_32)[24])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$3 }
	$6 = [178956970]
	$7 = ((int_32)($7 - $8) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$7 = CALL $59(((int_32)$6 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*($6 + [8]) = (int_64)0
	*($6) = (int_64)0
	*(($6 = ($6 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [192])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [256])
	$6 = (*($8) + [24])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $64($0)
	
.LABEL $label$2
	$3 = ($7 + ((int_32)$6 * (int_32)[24]))
	$2 = ($7 + ((int_32)$2 * (int_32)[24]))
	$8 = $2
	
.LOOP $label$13:
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	*(($6 = ($8 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [192])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$7 = [0]
	
.LABEL $label$14
	CALL eosio_assert($7, [256])
	$8 = ($8 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$13 }
	$6 = *($0)
	$4 = ($0 + [4])
	$7 = (*($4) - $6)
	$1 = ($2 + ((int_32)((int_32)$7 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$19 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$19
	*($0) = $1
	*($4) = $8
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $60($6)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1008])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $59([64])
	$6 = CALL $38($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [52])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $39(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [36])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [40])) = $7
	CALL $60($7)
	
.LABEL $label$10
	CALL $60($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1008])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $59([88])
	CALL $35($6)
	*($6 + [72]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [24])
	*($8 + [52]) = ($6 + [40])
	*($8 + [56]) = ($6 + [56])
	CALL $36(($8 + [40]), ($8 + [32]))
	*($6 + [76]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [76])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $37(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $60($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC _ZN3red4grabEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	*($8 + [88]) = $1
	CALL require_auth($1)
	*(($8 + [80])) = [0]
	*($8 + [64]) = (int_64)-1
	*($8 + [72]) = (int_64)0
	$7 = *($0)
	*($8 + [48]) = $7
	*($8 + [56]) = $7
	$5 = [0]
	$6 = CALL db_find_i64($7, $7, (int_64)-5002514023590133760, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $16(($8 + [48]), $6)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)($8 + [48])), [288])
	$1 = *($8 + [88])
	
.LABEL $label$1
	$3 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($3, [352])
	CALL eosio_assert((*($5 + [32]) <= [10]), [1344])
	*(($6 = (($8 + [32]) + [8]))) = *(($5 + [16]))
	$7 = *($5 + [8])
	*((($8 + [8]) + [12])) = *((($8 + [32]) + [12]))
	*((($8 + [8]) + [8])) = *($6)
	*($8 + [32]) = $7
	*($8 + [12]) = *($8 + [36])
	*($8 + [8]) = *($8 + [32])
	CALL eosio_assert(CALL $43($0, $1, ($8 + [8])), [1376])
	$6 = [1]
	$4 = *(($5 + [40]))
	$0 = *($5 + [36])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$2 }
	$6 = [0]
	
.LOOP $label$3:
	$6 = ($6 | ((int_64)*($0) == (int_64)$1))
	$0 = ($0 + [8])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$3 }
	$6 = ((int_32)$6 ^ (int_32)[1])
	
.LABEL $label$2
	CALL eosio_assert(($6 & [1]), [1424])
	*($8 + [24]) = ($8 + [88])
	CALL eosio_assert($3, [672])
	CALL $44(($8 + [48]), $5, ($8 + [24]))
	$5 = *($8 + [72])
	if ( ($5 == 0) ){ goto $label$4 }
	$3 = ($8 + [76])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$8 }
	$4 = *($6 + [36])
	if ( ($4 == 0) ){ goto $label$9 }
	*(($6 + [40])) = $4
	CALL $60($4)
	
.LABEL $label$9
	CALL $60($6)
	
.LABEL $label$8
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($8 + [72]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $5
	
.LABEL $label$5
	*($3) = $5
	CALL $60($0)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [96])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [160])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [160])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC _ZN3red3endEyNSt3__16vectorINS_9grab_infoENS0_9allocatorIS2_EEEE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	float_64 $14
	int_64 $15
	float_64 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_64 $37
	int_64 $38
	int_64 $39
	int_64 $40
	int_64 $41
	int_32 $42
	int_32 $43
	$43 = (*([0] + [4]) - [288])
	*([0] + [4]) = $43
	CALL require_auth(*($0))
	*(($43 + [184])) = [0]
	*($43 + [168]) = (int_64)-1
	*($43 + [176]) = (int_64)0
	$38 = *($0)
	*($43 + [152]) = $38
	*($43 + [160]) = $38
	$21 = [0]
	$42 = CALL db_find_i64($38, $38, (int_64)-5002514023590133760, $1)
	if ( ((int_32)$42 < (int_32)[0]) ){ goto $label$1 }
	$21 = CALL $16(($43 + [152]), $42)
	CALL eosio_assert(((int_32)*($21 + [48]) == (int_32)($43 + [152])), [288])
	
.LABEL $label$1
	$22 = ((int_32)$21 != (int_32)[0])
	CALL eosio_assert($22, [352])
	CALL eosio_assert(((int_32)*($21 + [33]) ^ (int_32)[1]), [384])
	CALL eosio_assert(((int_32)(*($2 + [4]) - *($2)) == (int_32)[240]), [416])
	$42 = [1]
	$38 = *((*($2) + [16]))
	if ( ((int_64)$38 == (int_64)353416332804) ){ goto $label$2 }
	$42 = ((int_64)$38 == (int_64)1397703940)
	
.LABEL $label$2
	CALL eosio_assert($42, [464])
	*($43 + [151]) = [1]
	$42 = *($2)
	$38 = *(($42 + [16]))
	if ( ((int_64)$38 != (int_64)353416332804) ){ goto $label$3 }
	*($43 + [151]) = [0]
	
.LABEL $label$3
	$19 = (int_64)0
	$20 = (int_64)0
	$31 = ($2 + [4])
	if ( ((int_32)*($31) == (int_32)$42) ){ goto $label$4 }
	$18 = [0]
	$20 = (int_64)0
	$11 = [0]
	$19 = (int_64)0
	$1 = $38
	$37 = $38
	$39 = *($42 + [8])
	$40 = $39
	
.LOOP $label$5:
	CALL eosio_assert(((int_64)$1 == (int_64)$38), [496])
	$17 = *($2)
	$18 = ((int_32)$18 * (int_32)[24])
	if ( ((int_64)$39 <= (int_64)*(($42 + $18) + [8])) ){ goto $label$7 }
	$42 = ($17 + $18)
	$39 = *($42 + [8])
	$20 = *($42)
	$38 = *(($42 + [16]))
	$1 = $38
	goto $label$6 
	
.LABEL $label$7
	$38 = *((($17 + $18) + [16]))
	
.LABEL $label$6
	CALL eosio_assert(((int_64)$37 == (int_64)$38), [496])
	if ( ((int_64)$40 >= (int_64)*(($17 + $18) + [8])) ){ goto $label$9 }
	$42 = *($2)
	$18 = ($42 + $18)
	$40 = *($18 + [8])
	$19 = *($18)
	$37 = *(($18 + [16]))
	goto $label$8 
	
.LABEL $label$9
	$42 = *($2)
	
.LABEL $label$8
	$11 = ($11 + [1])
	$18 = ($11 & [255])
	if ( ((uint_32)$18 >= (uint_32)((int_32)(*($31) - $42) / (int_32)[24])) ){ goto $label$4 }
	$38 = *((($42 + ((int_32)$18 * (int_32)[24])) + [16]))
	goto $label$5 
	
.LABEL $label$4
	*($43 + [136]) = (int_64)1398362884
	*($43 + [128]) = (int_64)0
	CALL eosio_assert([1], [192])
	$38 = (uint_64)*($43 + [136]) >> (uint_64)(int_64)8)
	$42 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $38) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$38 = (uint_64)$38 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$38) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$38 = (uint_64)$38 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$38) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$18 = [1]
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$18 = [0]
	
.LABEL $label$10
	CALL eosio_assert($18, [256])
	CALL eosio_assert([1], [192])
	$38 = (int_64)5462355
	$42 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $38) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$38 = (uint_64)$38 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$38) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$38 = (uint_64)$38 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$38) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$18 = [1]
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$18 = [0]
	
.LABEL $label$15
	CALL eosio_assert($18, [256])
	CALL eosio_assert([1], [192])
	$38 = (int_64)5462355
	$42 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $38) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$38 = (uint_64)$38 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$38) & (int_64)255) != (int_64)0) ){ goto $label$23 }
	
.LOOP $label$24:
	$38 = (uint_64)$38 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$38) & (int_64)255) != (int_64)0) ){ goto $label$21 }
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$24 }
	
.LABEL $label$23
	$18 = [1]
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$18 = [0]
	
.LABEL $label$20
	CALL eosio_assert($18, [256])
	CALL eosio_assert([1], [192])
	$38 = (int_64)5462355
	$42 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $38) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$38 = (uint_64)$38 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$38) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	
.LOOP $label$29:
	$38 = (uint_64)$38 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$38) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$29 }
	
.LABEL $label$28
	$18 = [1]
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$18 = [0]
	
.LABEL $label$25
	CALL eosio_assert($18, [256])
	$23 = ($2 + [4])
	if ( ((int_32)*($23) == (int_32)*($2)) ){ goto $label$38 }
	$42 = *($2)
	$11 = (($43 + [192]) + [32])
	$10 = ($43 | [1])
	$9 = (($43 + [272]) | [1])
	$8 = (($43 + [272]) | [1])
	$6 = (($43 + [272]) | [1])
	$5 = (($43 + [272]) | [1])
	$4 = (($43 + [272]) | [1])
	$3 = (($43 + [272]) | [1])
	$26 = (($43 + [88]) + [8])
	$27 = (($43 + [88]) + [28])
	$7 = (($43 + [192]) + [16])
	$35 = ($7 + [4])
	$36 = ($43 + [232])
	$18 = [0]
	$12 = [0]
	
.LOOP $label$39:
	*((($43 + [88]) + [16])) = (int_64)-1
	*(($24 = (($43 + [88]) + [24]))) = [0]
	$25 = ((int_32)$18 * (int_32)[24])
	$38 = *(($42 + $25))
	*($26) = $38
	$1 = *($0)
	*($43 + [88]) = $1
	*($27) = [0]
	*((($43 + [88]) + [32])) = [0]
	$17 = [0]
	$42 = CALL db_lowerbound_i64($1, $38, (int_64)-6030912129794572288, (int_64)0)
	if ( ((int_32)$42 < (int_32)[0]) ){ goto $label$40 }
	$17 = CALL $17(($43 + [88]), $42)
	
.LABEL $label$40
	$13 = ((int_32)$17 != (int_32)[0])
	CALL eosio_assert($13, [560])
	$42 = (*($2) + $25)
	*(($28 = (($43 + [128]) + [12]))) = *(($42 + [20]))
	*(($29 = (($43 + [128]) + [8]))) = *(($42 + [16]))
	*($43 + [128]) = *($42 + [8])
	*($43 + [132]) = *(($42 + [12]))
	$14 = ( (float_64)0.8 ? (float_64)1 : ((int_64)*($42) == (int_64)$19) )
	if ( (*($43 + [151]) == 0) ){ goto $label$50 }
	$41 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($43 + [128])) * (float_64)((float_64)(CASTING float_64)(int_64 *($17 + [40])) / (float_64)(CASTING float_64)(int_64 *(($21 + [8]))))))
	*($43 + [128]) = (Rounds 0)(((float_64)$14 * (float_64)(CASTING float_64)(int_64 $41)))
	CALL eosio_assert([1], [192])
	$38 = (int_64)5459781
	$42 = [0]
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $38) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$38 = (uint_64)$38 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$38) & (int_64)255) != (int_64)0) ){ goto $label$54 }
	
.LOOP $label$55:
	$38 = (uint_64)$38 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$38) & (int_64)255) != (int_64)0) ){ goto $label$52 }
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$55 }
	
.LABEL $label$54
	$18 = [1]
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$52
	$18 = [0]
	
.LABEL $label$51
	CALL eosio_assert($18, [256])
	CALL eosio_assert([1], [192])
	$38 = (int_64)5459781
	$42 = [0]
	
.LOOP $label$58:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $38) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$57 }
	$38 = (uint_64)$38 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$38) & (int_64)255) != (int_64)0) ){ goto $label$59 }
	
.LOOP $label$60:
	$38 = (uint_64)$38 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$38) & (int_64)255) != (int_64)0) ){ goto $label$57 }
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$60 }
	
.LABEL $label$59
	$18 = [1]
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$58 }
	goto $label$56 
	
.LABEL $label$57
	$18 = [0]
	
.LABEL $label$56
	CALL eosio_assert($18, [256])
	$15 = (int_64)1397703940
	if ( ((int_64)*((*($2) + $25)) != (int_64)6138623107630568640) ){ goto $label$49 }
	$38 = (int_64)0
	$37 = (int_64)59
	$42 = [144]
	$39 = (int_64)0
	
.LOOP $label$61:
	if ( ((uint_64)$38 > (uint_64)(int_64)10) ){ goto $label$66 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$65 }
	$18 = ($18 + [165])
	goto $label$64 
	
.LABEL $label$66
	$1 = (int_64)0
	if ( ((int_64)$38 == (int_64)11) ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$65
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$64
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$63
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$37 & (int_64)4294967295))
	
.LABEL $label$62
	$42 = ($42 + [1])
	$37 = ((int_64)$37 + (int_64)-5)
	$39 = ((int_64)$1 | (int_64)$39)
	$38 = ((int_64)$38 + (int_64)1)
	if ( ((int_64)$38 != (int_64)13) ){ goto $label$61 }
	*($43 + [192]) = $39
	CALL $24(($43 + [72]), ($43 + [192]), *($0), (int_64)1397703940)
	$38 = *($43 + [72])
	if ( ((int_64)$38 <= (int_64)0) ){ goto $label$49 }
	if ( ((int_64)$38 < (int_64)((int_64)*($43 + [128]) * (int_64)5000)) ){ goto $label$49 }
	CALL eosio_assert([1], [192])
	$38 = (int_64)5459781
	$42 = [0]
	
.LOOP $label$67:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $38) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$38 = (uint_64)$38 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$38) & (int_64)255) != (int_64)0) ){ goto $label$68 }
	
.LOOP $label$69:
	$38 = (uint_64)$38 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$38) & (int_64)255) != (int_64)0) ){ goto $label$48 }
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$69 }
	
.LABEL $label$68
	$18 = [1]
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$67 }
	goto $label$47 
	
.LABEL $label$50
	$41 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($43 + [128])) * (float_64)((float_64)(CASTING float_64)(int_64 *($17 + [56])) / (float_64)(CASTING float_64)(int_64 *(($21 + [8]))))))
	*($43 + [128]) = (Rounds 0)(((float_64)$14 * (float_64)(CASTING float_64)(int_64 $41)))
	CALL eosio_assert([1], [192])
	$38 = (int_64)1380532550
	$42 = [0]
	
.LOOP $label$72:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $38) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$71 }
	$38 = (uint_64)$38 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$38) & (int_64)255) != (int_64)0) ){ goto $label$73 }
	
.LOOP $label$74:
	$38 = (uint_64)$38 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$38) & (int_64)255) != (int_64)0) ){ goto $label$71 }
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$74 }
	
.LABEL $label$73
	$18 = [1]
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$72 }
	goto $label$70 
	
.LABEL $label$71
	$18 = [0]
	
.LABEL $label$70
	CALL eosio_assert($18, [256])
	CALL eosio_assert([1], [192])
	$38 = (int_64)1380532550
	$42 = [0]
	
.LOOP $label$77:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $38) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$76 }
	$38 = (uint_64)$38 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$38) & (int_64)255) != (int_64)0) ){ goto $label$78 }
	
.LOOP $label$79:
	$38 = (uint_64)$38 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$38) & (int_64)255) != (int_64)0) ){ goto $label$76 }
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$79 }
	
.LABEL $label$78
	$18 = [1]
	$42 = ($42 + [1])
	if ( ((int_32)$42 < (int_32)[7]) ){ goto $label$77 }
	goto $label$75 
	
.LABEL $label$76
	$18 = [0]
	
.LABEL $label$75
	CALL eosio_assert($18, [256])
	$15 = (int_64)353416332804
	
.LABEL $label$49
	if ( (*($43 + [151]) == 0) ){ goto $label$89 }
	$40 = *($0)
	$38 = (int_64)0
	$37 = (int_64)59
	$42 = [608]
	$39 = (int_64)0
	
.LOOP $label$90:
	if ( ((uint_64)$38 > (uint_64)(int_64)5) ){ goto $label$95 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$94 }
	$18 = ($18 + [165])
	goto $label$93 
	
.LABEL $label$95
	$1 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$92 }
	goto $label$91 
	
.LABEL $label$94
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$93
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$92
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$37 & (int_64)4294967295))
	
.LABEL $label$91
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$1 | (int_64)$39)
	$37 = ((int_64)$37 + (int_64)-5)
	if ( ((int_64)$37 != (int_64)-6) ){ goto $label$90 }
	*(($30 = (($43 + [72]) + [8]))) = $39
	*($43 + [72]) = $40
	$38 = (int_64)0
	$37 = (int_64)59
	$42 = [144]
	$39 = (int_64)0
	
.LOOP $label$96:
	if ( ((uint_64)$38 > (uint_64)(int_64)10) ){ goto $label$101 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$100 }
	$18 = ($18 + [165])
	goto $label$99 
	
.LABEL $label$101
	$1 = (int_64)0
	if ( ((int_64)$38 == (int_64)11) ){ goto $label$98 }
	goto $label$97 
	
.LABEL $label$100
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$99
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$98
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$37 & (int_64)4294967295))
	
.LABEL $label$97
	$42 = ($42 + [1])
	$37 = ((int_64)$37 + (int_64)-5)
	$39 = ((int_64)$1 | (int_64)$39)
	$38 = ((int_64)$38 + (int_64)1)
	if ( ((int_64)$38 != (int_64)13) ){ goto $label$96 }
	$38 = (int_64)0
	$37 = (int_64)59
	$42 = [112]
	$40 = (int_64)0
	
.LOOP $label$102:
	if ( ((uint_64)$38 > (uint_64)(int_64)7) ){ goto $label$107 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$106 }
	$18 = ($18 + [165])
	goto $label$105 
	
.LABEL $label$107
	$1 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$104 }
	goto $label$103 
	
.LABEL $label$106
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$105
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$104
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$37 & (int_64)4294967295))
	
.LABEL $label$103
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$40 = ((int_64)$1 | (int_64)$40)
	$37 = ((int_64)$37 + (int_64)-5)
	if ( ((int_64)$37 != (int_64)-6) ){ goto $label$102 }
	$18 = *($2)
	*(($31 = (($43 + [272]) + [8]))) = [0]
	*($43 + [272]) = (int_64)0
	$42 = CALL strlen([624])
	if ( ((uint_32)$42 >= (uint_32)[-16]) ){ goto $label$36 }
	$25 = ($18 + $25)
	if ( ((uint_32)$42 >= (uint_32)[11]) ){ goto $label$88 }
	*($43 + [272]) = ($42 << [1])
	$18 = $6
	if ( $42 ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$89
	$40 = *($0)
	$38 = (int_64)0
	$37 = (int_64)59
	$42 = [608]
	$39 = (int_64)0
	
.LOOP $label$108:
	if ( ((uint_64)$38 > (uint_64)(int_64)5) ){ goto $label$113 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$112 }
	$18 = ($18 + [165])
	goto $label$111 
	
.LABEL $label$113
	$1 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$110 }
	goto $label$109 
	
.LABEL $label$112
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$111
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$110
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$37 & (int_64)4294967295))
	
.LABEL $label$109
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$1 | (int_64)$39)
	$37 = ((int_64)$37 + (int_64)-5)
	if ( ((int_64)$37 != (int_64)-6) ){ goto $label$108 }
	*(($30 = (($43 + [72]) + [8]))) = $39
	*($43 + [72]) = $40
	$38 = (int_64)0
	$1 = (int_64)59
	$42 = [128]
	$39 = (int_64)0
	
.LOOP $label$114:
	$37 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$115 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$117 }
	$18 = ($18 + [165])
	goto $label$116 
	
.LABEL $label$117
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$116
	$37 = ((int_64)(CASTING uint_64)(uint_32 ($18 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$115
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$37 | (int_64)$39)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$114 }
	$38 = (int_64)0
	$37 = (int_64)59
	$42 = [112]
	$40 = (int_64)0
	
.LOOP $label$118:
	if ( ((uint_64)$38 > (uint_64)(int_64)7) ){ goto $label$123 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$122 }
	$18 = ($18 + [165])
	goto $label$121 
	
.LABEL $label$123
	$1 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$120 }
	goto $label$119 
	
.LABEL $label$122
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$121
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$120
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$37 & (int_64)4294967295))
	
.LABEL $label$119
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$40 = ((int_64)$1 | (int_64)$40)
	$37 = ((int_64)$37 + (int_64)-5)
	if ( ((int_64)$37 != (int_64)-6) ){ goto $label$118 }
	$18 = *($2)
	*(($31 = (($43 + [272]) + [8]))) = [0]
	*($43 + [272]) = (int_64)0
	$42 = CALL strlen([624])
	if ( ((uint_32)$42 >= (uint_32)[-16]) ){ goto $label$35 }
	$25 = ($18 + $25)
	if ( ((uint_32)$42 >= (uint_32)[11]) ){ goto $label$85 }
	*($43 + [272]) = ($42 << [1])
	$18 = $3
	if ( $42 ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$88
	$32 = (($42 + [16]) & [-16])
	$18 = CALL $59($32)
	*($31) = $18
	*($43 + [272]) = ($32 | [1])
	*($43 + [276]) = $42
	
.LABEL $label$87
	CALL memcpy($18, [624], $42)
	
.LABEL $label$86
	*(($18 + $42)) = [0]
	*(($32 = (($43 + [192]) + [8]))) = *($25)
	*($35) = *($43 + [132])
	*(($7 + [8])) = *($29)
	*($43 + [192]) = *($0)
	*($7) = *($43 + [128])
	*(($7 + [12])) = *($28)
	*(($25 = ($11 + [8]))) = *($31)
	*($11) = *($43 + [272])
	*($43 + [272]) = [0]
	*($43 + [276]) = [0]
	*($31) = [0]
	CALL $19(($43 + [16]), CALL $18(($43 + [32]), ($43 + [72]), $39, $40, ($43 + [192])))
	$42 = *($43 + [16])
	CALL send_inline($42, (*($43 + [20]) - $42))
	$42 = *($43 + [16])
	if ( ($42 == 0) ){ goto $label$124 }
	*($43 + [20]) = $42
	CALL $60($42)
	
.LABEL $label$124
	$28 = (($43 + [32]) + [28])
	$42 = *($28)
	if ( ($42 == 0) ){ goto $label$125 }
	*((($43 + [32]) + [32])) = $42
	CALL $60($42)
	
.LABEL $label$125
	$29 = (($43 + [32]) + [16])
	$42 = *($29)
	if ( ($42 == 0) ){ goto $label$126 }
	*((($43 + [32]) + [20])) = $42
	CALL $60($42)
	
.LABEL $label$126
	if ( ((*($11) & [1]) == 0) ){ goto $label$127 }
	CALL $60(*($36))
	
.LABEL $label$127
	if ( ((*($43 + [272]) & [1]) == 0) ){ goto $label$128 }
	CALL $60(*($31))
	
.LABEL $label$128
	if ( ((int_32)(CASTING int_32)(float_64 ((float_64)$14 * (float_64)(float_64)10)) > (int_32)[9]) ){ goto $label$43 }
	$16 = ((float_64)(float_64))((float_64)1 - $14) * (float_64)(CASTING float_64)(int_64 $41)
	$14 = ((float_64)$16) * (float_64)(float_64)0.8)
	$40 = *($0)
	$38 = (int_64)0
	$37 = (int_64)59
	$42 = [608]
	$39 = (int_64)0
	
.LOOP $label$129:
	if ( ((uint_64)$38 > (uint_64)(int_64)5) ){ goto $label$134 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$133 }
	$18 = ($18 + [165])
	goto $label$132 
	
.LABEL $label$134
	$1 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$131 }
	goto $label$130 
	
.LABEL $label$133
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$132
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$131
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$37 & (int_64)4294967295))
	
.LABEL $label$130
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$1 | (int_64)$39)
	$37 = ((int_64)$37 + (int_64)-5)
	if ( ((int_64)$37 != (int_64)-6) ){ goto $label$129 }
	*($30) = $39
	*($43 + [72]) = $40
	$38 = (int_64)0
	$37 = (int_64)59
	$42 = [144]
	$39 = (int_64)0
	
.LOOP $label$135:
	if ( ((uint_64)$38 > (uint_64)(int_64)10) ){ goto $label$140 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$139 }
	$18 = ($18 + [165])
	goto $label$138 
	
.LABEL $label$140
	$1 = (int_64)0
	if ( ((int_64)$38 == (int_64)11) ){ goto $label$137 }
	goto $label$136 
	
.LABEL $label$139
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$138
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$137
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$37 & (int_64)4294967295))
	
.LABEL $label$136
	$42 = ($42 + [1])
	$37 = ((int_64)$37 + (int_64)-5)
	$39 = ((int_64)$1 | (int_64)$39)
	$38 = ((int_64)$38 + (int_64)1)
	if ( ((int_64)$38 != (int_64)13) ){ goto $label$135 }
	$38 = (int_64)0
	$37 = (int_64)59
	$42 = [112]
	$40 = (int_64)0
	
.LOOP $label$141:
	if ( ((uint_64)$38 > (uint_64)(int_64)7) ){ goto $label$146 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$145 }
	$18 = ($18 + [165])
	goto $label$144 
	
.LABEL $label$146
	$1 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$143 }
	goto $label$142 
	
.LABEL $label$145
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$144
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$143
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$37 & (int_64)4294967295))
	
.LABEL $label$142
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$40 = ((int_64)$1 | (int_64)$40)
	$37 = ((int_64)$37 + (int_64)-5)
	if ( ((int_64)$37 != (int_64)-6) ){ goto $label$141 }
	$38 = (int_64)0
	$1 = (int_64)59
	$42 = [640]
	$41 = (int_64)0
	
.LOOP $label$147:
	$37 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$148 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$150 }
	$18 = ($18 + [165])
	goto $label$149 
	
.LABEL $label$150
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$149
	$37 = ((int_64)(CASTING uint_64)(uint_32 ($18 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$148
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$41 = ((int_64)$37 | (int_64)$41)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$147 }
	*($31) = [0]
	*($43 + [272]) = (int_64)0
	$38 = (Rounds 0)($14)
	$42 = CALL strlen([624])
	if ( ((uint_32)$42 >= (uint_32)[-16]) ){ goto $label$34 }
	if ( ((uint_32)$42 >= (uint_32)[11]) ){ goto $label$82 }
	*($43 + [272]) = ($42 << [1])
	$18 = $8
	if ( $42 ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$85
	$32 = (($42 + [16]) & [-16])
	$18 = CALL $59($32)
	*($31) = $18
	*($43 + [272]) = ($32 | [1])
	*($43 + [276]) = $42
	
.LABEL $label$84
	CALL memcpy($18, [624], $42)
	
.LABEL $label$83
	*(($18 + $42)) = [0]
	*(($32 = (($43 + [192]) + [8]))) = *($25)
	*($35) = *($43 + [132])
	*(($7 + [8])) = *($29)
	*($43 + [192]) = *($0)
	*($7) = *($43 + [128])
	*(($7 + [12])) = *($28)
	*(($25 = ($11 + [8]))) = *($31)
	*($11) = *($43 + [272])
	*($43 + [272]) = [0]
	*($43 + [276]) = [0]
	*($31) = [0]
	CALL $19(($43 + [16]), CALL $18(($43 + [32]), ($43 + [72]), $39, $40, ($43 + [192])))
	$42 = *($43 + [16])
	CALL send_inline($42, (*($43 + [20]) - $42))
	$42 = *($43 + [16])
	if ( ($42 == 0) ){ goto $label$151 }
	*($43 + [20]) = $42
	CALL $60($42)
	
.LABEL $label$151
	$28 = (($43 + [32]) + [28])
	$42 = *($28)
	if ( ($42 == 0) ){ goto $label$152 }
	*((($43 + [32]) + [32])) = $42
	CALL $60($42)
	
.LABEL $label$152
	$29 = (($43 + [32]) + [16])
	$42 = *($29)
	if ( ($42 == 0) ){ goto $label$153 }
	*((($43 + [32]) + [20])) = $42
	CALL $60($42)
	
.LABEL $label$153
	if ( ((*($11) & [1]) == 0) ){ goto $label$154 }
	CALL $60(*($36))
	
.LABEL $label$154
	if ( ((*($43 + [272]) & [1]) == 0) ){ goto $label$155 }
	CALL $60(*($31))
	
.LABEL $label$155
	if ( ((int_32)(CASTING int_32)(float_64 ((float_64)$14 * (float_64)(float_64)10)) > (int_32)[9]) ){ goto $label$43 }
	$16 = ((float_64)(float_64))((float_64)1 - $14) * (float_64)(CASTING float_64)(int_64 $41)
	$14 = ((float_64)$16) * (float_64)(float_64)0.8)
	$40 = *($0)
	$38 = (int_64)0
	$37 = (int_64)59
	$42 = [608]
	$39 = (int_64)0
	
.LOOP $label$156:
	if ( ((uint_64)$38 > (uint_64)(int_64)5) ){ goto $label$161 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$160 }
	$18 = ($18 + [165])
	goto $label$159 
	
.LABEL $label$161
	$1 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$158 }
	goto $label$157 
	
.LABEL $label$160
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$159
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$158
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$37 & (int_64)4294967295))
	
.LABEL $label$157
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$1 | (int_64)$39)
	$37 = ((int_64)$37 + (int_64)-5)
	if ( ((int_64)$37 != (int_64)-6) ){ goto $label$156 }
	*($30) = $39
	*($43 + [72]) = $40
	$38 = (int_64)0
	$1 = (int_64)59
	$42 = [128]
	$39 = (int_64)0
	
.LOOP $label$162:
	$37 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$163 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$165 }
	$18 = ($18 + [165])
	goto $label$164 
	
.LABEL $label$165
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$164
	$37 = ((int_64)(CASTING uint_64)(uint_32 ($18 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$163
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$37 | (int_64)$39)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$162 }
	$38 = (int_64)0
	$37 = (int_64)59
	$42 = [112]
	$40 = (int_64)0
	
.LOOP $label$166:
	if ( ((uint_64)$38 > (uint_64)(int_64)7) ){ goto $label$171 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$170 }
	$18 = ($18 + [165])
	goto $label$169 
	
.LABEL $label$171
	$1 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$168 }
	goto $label$167 
	
.LABEL $label$170
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$169
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$168
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$37 & (int_64)4294967295))
	
.LABEL $label$167
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$40 = ((int_64)$1 | (int_64)$40)
	$37 = ((int_64)$37 + (int_64)-5)
	if ( ((int_64)$37 != (int_64)-6) ){ goto $label$166 }
	$38 = (int_64)0
	$1 = (int_64)59
	$42 = [640]
	$41 = (int_64)0
	
.LOOP $label$172:
	$37 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$173 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$175 }
	$18 = ($18 + [165])
	goto $label$174 
	
.LABEL $label$175
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$174
	$37 = ((int_64)(CASTING uint_64)(uint_32 ($18 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$173
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$41 = ((int_64)$37 | (int_64)$41)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$172 }
	*($31) = [0]
	*($43 + [272]) = (int_64)0
	$38 = (Rounds 0)($14)
	$42 = CALL strlen([624])
	if ( ((uint_32)$42 >= (uint_32)[-16]) ){ goto $label$32 }
	if ( ((uint_32)$42 >= (uint_32)[11]) ){ goto $label$46 }
	*($43 + [272]) = ($42 << [1])
	$18 = $4
	if ( $42 ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$82
	$33 = (($42 + [16]) & [-16])
	$18 = CALL $59($33)
	*($31) = $18
	*($43 + [272]) = ($33 | [1])
	*($43 + [276]) = $42
	
.LABEL $label$81
	CALL memcpy($18, [624], $42)
	
.LABEL $label$80
	*(($18 + $42)) = [0]
	*($32) = $41
	*($7) = $38
	*(($33 = (($43 + [192]) + [24]))) = $15
	*(($34 = ($11 + [4]))) = *($43 + [276])
	*($25) = *($31)
	*($43 + [192]) = *($0)
	*($11) = *($43 + [272])
	*($43 + [272]) = [0]
	*($43 + [276]) = [0]
	*($31) = [0]
	CALL $19(($43 + [16]), CALL $18(($43 + [32]), ($43 + [72]), $39, $40, ($43 + [192])))
	$42 = *($43 + [16])
	CALL send_inline($42, (*($43 + [20]) - $42))
	$42 = *($43 + [16])
	if ( ($42 == 0) ){ goto $label$176 }
	*($43 + [20]) = $42
	CALL $60($42)
	
.LABEL $label$176
	$42 = *($28)
	if ( ($42 == 0) ){ goto $label$177 }
	*((($43 + [32]) + [32])) = $42
	CALL $60($42)
	
.LABEL $label$177
	$42 = *($29)
	if ( ($42 == 0) ){ goto $label$178 }
	*((($43 + [32]) + [20])) = $42
	CALL $60($42)
	
.LABEL $label$178
	if ( ((*($11) & [1]) == 0) ){ goto $label$179 }
	CALL $60(*($36))
	
.LABEL $label$179
	if ( ((*($43 + [272]) & [1]) == 0) ){ goto $label$180 }
	CALL $60(*($31))
	
.LABEL $label$180
	$14 = ((float_64)$16 * (float_64)(float_64)0.2)
	$40 = *($0)
	$38 = (int_64)0
	$37 = (int_64)59
	$42 = [608]
	$39 = (int_64)0
	
.LOOP $label$181:
	if ( ((uint_64)$38 > (uint_64)(int_64)5) ){ goto $label$186 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$185 }
	$18 = ($18 + [165])
	goto $label$184 
	
.LABEL $label$186
	$1 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$183 }
	goto $label$182 
	
.LABEL $label$185
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$184
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$183
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$37 & (int_64)4294967295))
	
.LABEL $label$182
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$1 | (int_64)$39)
	$37 = ((int_64)$37 + (int_64)-5)
	if ( ((int_64)$37 != (int_64)-6) ){ goto $label$181 }
	*($30) = $39
	*($43 + [72]) = $40
	$38 = (int_64)0
	$37 = (int_64)59
	$42 = [144]
	$39 = (int_64)0
	
.LOOP $label$187:
	if ( ((uint_64)$38 > (uint_64)(int_64)10) ){ goto $label$192 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$191 }
	$18 = ($18 + [165])
	goto $label$190 
	
.LABEL $label$192
	$1 = (int_64)0
	if ( ((int_64)$38 == (int_64)11) ){ goto $label$189 }
	goto $label$188 
	
.LABEL $label$191
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$190
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$189
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$37 & (int_64)4294967295))
	
.LABEL $label$188
	$42 = ($42 + [1])
	$37 = ((int_64)$37 + (int_64)-5)
	$39 = ((int_64)$1 | (int_64)$39)
	$38 = ((int_64)$38 + (int_64)1)
	if ( ((int_64)$38 != (int_64)13) ){ goto $label$187 }
	$38 = (int_64)0
	$37 = (int_64)59
	$42 = [112]
	$40 = (int_64)0
	
.LOOP $label$193:
	if ( ((uint_64)$38 > (uint_64)(int_64)7) ){ goto $label$198 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$197 }
	$18 = ($18 + [165])
	goto $label$196 
	
.LABEL $label$198
	$1 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$195 }
	goto $label$194 
	
.LABEL $label$197
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$196
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$195
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$37 & (int_64)4294967295))
	
.LABEL $label$194
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$40 = ((int_64)$1 | (int_64)$40)
	$37 = ((int_64)$37 + (int_64)-5)
	if ( ((int_64)$37 != (int_64)-6) ){ goto $label$193 }
	$38 = (int_64)0
	$1 = (int_64)59
	$42 = [656]
	$41 = (int_64)0
	
.LOOP $label$199:
	$37 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$200 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$202 }
	$18 = ($18 + [165])
	goto $label$201 
	
.LABEL $label$202
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$201
	$37 = ((int_64)(CASTING uint_64)(uint_32 ($18 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$200
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$41 = ((int_64)$37 | (int_64)$41)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$199 }
	*($31) = [0]
	*($43 + [272]) = (int_64)0
	$38 = (Rounds 0)($14)
	$42 = CALL strlen([624])
	if ( ((uint_32)$42 >= (uint_32)[-16]) ){ goto $label$33 }
	if ( ((uint_32)$42 >= (uint_32)[11]) ){ goto $label$205 }
	*($43 + [272]) = ($42 << [1])
	$18 = $9
	if ( $42 ){ goto $label$204 }
	goto $label$203 
	
.LABEL $label$205
	$30 = (($42 + [16]) & [-16])
	$18 = CALL $59($30)
	*($31) = $18
	*($43 + [272]) = ($30 | [1])
	*($43 + [276]) = $42
	
.LABEL $label$204
	CALL memcpy($18, [624], $42)
	
.LABEL $label$203
	*(($18 + $42)) = [0]
	*($32) = $41
	*($7) = $38
	*($33) = $15
	*($34) = *($43 + [276])
	*($25) = *($31)
	*($43 + [192]) = *($0)
	*($11) = *($43 + [272])
	*($43 + [272]) = [0]
	*($43 + [276]) = [0]
	*($31) = [0]
	CALL $19(($43 + [16]), CALL $18(($43 + [32]), ($43 + [72]), $39, $40, ($43 + [192])))
	$42 = *($43 + [16])
	CALL send_inline($42, (*($43 + [20]) - $42))
	$42 = *($43 + [16])
	if ( ($42 == 0) ){ goto $label$206 }
	*($43 + [20]) = $42
	CALL $60($42)
	
.LABEL $label$206
	$42 = *($28)
	if ( ($42 == 0) ){ goto $label$207 }
	*((($43 + [32]) + [32])) = $42
	CALL $60($42)
	
.LABEL $label$207
	$42 = *($29)
	if ( ($42 == 0) ){ goto $label$208 }
	*((($43 + [32]) + [20])) = $42
	CALL $60($42)
	
.LABEL $label$208
	if ( ((*($11) & [1]) == 0) ){ goto $label$209 }
	CALL $60(*($36))
	
.LABEL $label$209
	if ( ((*($43 + [272]) & [1]) == 0) ){ goto $label$43 }
	CALL $60(*($31))
	goto $label$43 
	
.LABEL $label$48
	$18 = [0]
	
.LABEL $label$47
	CALL eosio_assert($18, [256])
	$41 = *($43 + [128])
	$40 = *($0)
	$38 = (int_64)0
	$37 = (int_64)59
	$42 = [608]
	$39 = (int_64)0
	
.LOOP $label$210:
	if ( ((uint_64)$38 > (uint_64)(int_64)5) ){ goto $label$215 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$214 }
	$18 = ($18 + [165])
	goto $label$213 
	
.LABEL $label$215
	$1 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$212 }
	goto $label$211 
	
.LABEL $label$214
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$213
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$212
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$37 & (int_64)4294967295))
	
.LABEL $label$211
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$1 | (int_64)$39)
	$37 = ((int_64)$37 + (int_64)-5)
	if ( ((int_64)$37 != (int_64)-6) ){ goto $label$210 }
	*((($43 + [16]) + [8])) = $39
	*($43 + [16]) = $40
	$38 = (int_64)0
	$37 = (int_64)59
	$42 = [144]
	$39 = (int_64)0
	
.LOOP $label$216:
	if ( ((uint_64)$38 > (uint_64)(int_64)10) ){ goto $label$221 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$220 }
	$18 = ($18 + [165])
	goto $label$219 
	
.LABEL $label$221
	$1 = (int_64)0
	if ( ((int_64)$38 == (int_64)11) ){ goto $label$218 }
	goto $label$217 
	
.LABEL $label$220
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$219
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$218
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$37 & (int_64)4294967295))
	
.LABEL $label$217
	$42 = ($42 + [1])
	$37 = ((int_64)$37 + (int_64)-5)
	$39 = ((int_64)$1 | (int_64)$39)
	$38 = ((int_64)$38 + (int_64)1)
	if ( ((int_64)$38 != (int_64)13) ){ goto $label$216 }
	$38 = (int_64)0
	$37 = (int_64)59
	$42 = [112]
	$40 = (int_64)0
	
.LOOP $label$222:
	if ( ((uint_64)$38 > (uint_64)(int_64)7) ){ goto $label$227 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$226 }
	$18 = ($18 + [165])
	goto $label$225 
	
.LABEL $label$227
	$1 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$224 }
	goto $label$223 
	
.LABEL $label$226
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$225
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$224
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$37 & (int_64)4294967295))
	
.LABEL $label$223
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$40 = ((int_64)$1 | (int_64)$40)
	$37 = ((int_64)$37 + (int_64)-5)
	if ( ((int_64)$37 != (int_64)-6) ){ goto $label$222 }
	$17 = *($2)
	*(($18 = ($43 + [8]))) = [0]
	*($43) = (int_64)0
	$42 = CALL strlen([624])
	if ( ((uint_32)$42 >= (uint_32)[-16]) ){ goto $label$30 }
	$38 = ((int_64)$41 * (int_64)5000)
	$31 = ($17 + $25)
	if ( ($42 <= [11]) ){ goto $label$230 }
	$25 = (($42 + [16]) & [-16])
	$17 = CALL $59($25)
	*($18) = $17
	*($43) = ($25 | [1])
	*($43 + [4]) = $42
	goto $label$229 
	
.LABEL $label$230
	*($43) = ($42 << [1])
	$17 = $10
	if ( ($42 == 0) ){ goto $label$228 }
	
.LABEL $label$229
	CALL memcpy($17, [624], $42)
	
.LABEL $label$228
	*(($17 + $42)) = [0]
	*((($43 + [192]) + [8])) = *($31)
	*((($43 + [192]) + [24])) = (int_64)1397703940
	*($7) = $38
	*(($11 + [4])) = *($43 + [4 align=4])
	*($43 + [192]) = *($0)
	*($11) = *($43)
	*($43) = [0]
	*($43 + [4]) = [0]
	*($18) = [0]
	CALL $19(($43 + [272]), CALL $18(($43 + [32]), ($43 + [16]), $39, $40, ($43 + [192])))
	$42 = *($43 + [272])
	CALL send_inline($42, (*($43 + [276]) - $42))
	$42 = *($43 + [272])
	if ( ($42 == 0) ){ goto $label$231 }
	*($43 + [276]) = $42
	CALL $60($42)
	
.LABEL $label$231
	$42 = *((($43 + [32]) + [28]))
	if ( ($42 == 0) ){ goto $label$232 }
	*((($43 + [32]) + [32])) = $42
	CALL $60($42)
	
.LABEL $label$232
	$42 = *((($43 + [32]) + [16]))
	if ( ($42 == 0) ){ goto $label$233 }
	*((($43 + [32]) + [20])) = $42
	CALL $60($42)
	
.LABEL $label$233
	if ( ((*($11) & [1]) == 0) ){ goto $label$234 }
	CALL $60(*($36))
	
.LABEL $label$234
	if ( ((*($43) & [1]) == 0) ){ goto $label$235 }
	CALL $60(*($18))
	
.LABEL $label$235
	$31 = [1]
	$17 = *($24)
	if ( $17 ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$46
	$33 = (($42 + [16]) & [-16])
	$18 = CALL $59($33)
	*($31) = $18
	*($43 + [272]) = ($33 | [1])
	*($43 + [276]) = $42
	
.LABEL $label$45
	CALL memcpy($18, [624], $42)
	
.LABEL $label$44
	*(($18 + $42)) = [0]
	*($32) = $41
	*($7) = $38
	*(($33 = (($43 + [192]) + [24]))) = $15
	*(($34 = ($11 + [4]))) = *($43 + [276])
	*($25) = *($31)
	*($43 + [192]) = *($0)
	*($11) = *($43 + [272])
	*($43 + [272]) = [0]
	*($43 + [276]) = [0]
	*($31) = [0]
	CALL $19(($43 + [16]), CALL $18(($43 + [32]), ($43 + [72]), $39, $40, ($43 + [192])))
	$42 = *($43 + [16])
	CALL send_inline($42, (*($43 + [20]) - $42))
	$42 = *($43 + [16])
	if ( ($42 == 0) ){ goto $label$236 }
	*($43 + [20]) = $42
	CALL $60($42)
	
.LABEL $label$236
	$42 = *($28)
	if ( ($42 == 0) ){ goto $label$237 }
	*((($43 + [32]) + [32])) = $42
	CALL $60($42)
	
.LABEL $label$237
	$42 = *($29)
	if ( ($42 == 0) ){ goto $label$238 }
	*((($43 + [32]) + [20])) = $42
	CALL $60($42)
	
.LABEL $label$238
	if ( ((*($11) & [1]) == 0) ){ goto $label$239 }
	CALL $60(*($36))
	
.LABEL $label$239
	if ( ((*($43 + [272]) & [1]) == 0) ){ goto $label$240 }
	CALL $60(*($31))
	
.LABEL $label$240
	$14 = ((float_64)$16 * (float_64)(float_64)0.2)
	$40 = *($0)
	$38 = (int_64)0
	$37 = (int_64)59
	$42 = [608]
	$39 = (int_64)0
	
.LOOP $label$241:
	if ( ((uint_64)$38 > (uint_64)(int_64)5) ){ goto $label$246 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$245 }
	$18 = ($18 + [165])
	goto $label$244 
	
.LABEL $label$246
	$1 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$243 }
	goto $label$242 
	
.LABEL $label$245
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$244
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$243
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$37 & (int_64)4294967295))
	
.LABEL $label$242
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$1 | (int_64)$39)
	$37 = ((int_64)$37 + (int_64)-5)
	if ( ((int_64)$37 != (int_64)-6) ){ goto $label$241 }
	*($30) = $39
	*($43 + [72]) = $40
	$38 = (int_64)0
	$1 = (int_64)59
	$42 = [128]
	$39 = (int_64)0
	
.LOOP $label$247:
	$37 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$248 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$250 }
	$18 = ($18 + [165])
	goto $label$249 
	
.LABEL $label$250
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$249
	$37 = ((int_64)(CASTING uint_64)(uint_32 ($18 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$248
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$37 | (int_64)$39)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$247 }
	$38 = (int_64)0
	$37 = (int_64)59
	$42 = [112]
	$40 = (int_64)0
	
.LOOP $label$251:
	if ( ((uint_64)$38 > (uint_64)(int_64)7) ){ goto $label$256 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$255 }
	$18 = ($18 + [165])
	goto $label$254 
	
.LABEL $label$256
	$1 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$253 }
	goto $label$252 
	
.LABEL $label$255
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$254
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$253
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$37 & (int_64)4294967295))
	
.LABEL $label$252
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$40 = ((int_64)$1 | (int_64)$40)
	$37 = ((int_64)$37 + (int_64)-5)
	if ( ((int_64)$37 != (int_64)-6) ){ goto $label$251 }
	$38 = (int_64)0
	$1 = (int_64)59
	$42 = [656]
	$41 = (int_64)0
	
.LOOP $label$257:
	$37 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$258 }
	$18 = *($42)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$260 }
	$18 = ($18 + [165])
	goto $label$259 
	
.LABEL $label$260
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$259
	$37 = ((int_64)(CASTING uint_64)(uint_32 ($18 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$258
	$42 = ($42 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$41 = ((int_64)$37 | (int_64)$41)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$257 }
	*($31) = [0]
	*($43 + [272]) = (int_64)0
	$38 = (Rounds 0)($14)
	$42 = CALL strlen([624])
	if ( ((uint_32)$42 >= (uint_32)[-16]) ){ goto $label$31 }
	if ( ((uint_32)$42 >= (uint_32)[11]) ){ goto $label$263 }
	*($43 + [272]) = ($42 << [1])
	$18 = $5
	if ( $42 ){ goto $label$262 }
	goto $label$261 
	
.LABEL $label$263
	$30 = (($42 + [16]) & [-16])
	$18 = CALL $59($30)
	*($31) = $18
	*($43 + [272]) = ($30 | [1])
	*($43 + [276]) = $42
	
.LABEL $label$262
	CALL memcpy($18, [624], $42)
	
.LABEL $label$261
	*(($18 + $42)) = [0]
	*($32) = $41
	*($7) = $38
	*($33) = $15
	*($34) = *($43 + [276])
	*($25) = *($31)
	*($43 + [192]) = *($0)
	*($11) = *($43 + [272])
	*($43 + [272]) = [0]
	*($43 + [276]) = [0]
	*($31) = [0]
	CALL $19(($43 + [16]), CALL $18(($43 + [32]), ($43 + [72]), $39, $40, ($43 + [192])))
	$42 = *($43 + [16])
	CALL send_inline($42, (*($43 + [20]) - $42))
	$42 = *($43 + [16])
	if ( ($42 == 0) ){ goto $label$264 }
	*($43 + [20]) = $42
	CALL $60($42)
	
.LABEL $label$264
	$42 = *($28)
	if ( ($42 == 0) ){ goto $label$265 }
	*((($43 + [32]) + [32])) = $42
	CALL $60($42)
	
.LABEL $label$265
	$42 = *($29)
	if ( ($42 == 0) ){ goto $label$266 }
	*((($43 + [32]) + [20])) = $42
	CALL $60($42)
	
.LABEL $label$266
	if ( ((*($11) & [1]) == 0) ){ goto $label$267 }
	CALL $60(*($36))
	
.LABEL $label$267
	if ( ((*($43 + [272]) & [1]) == 0) ){ goto $label$43 }
	CALL $60(*($31))
	
.LABEL $label$43
	*($43 + [196]) = ($43 + [128])
	*($43 + [192]) = ($43 + [151])
	CALL eosio_assert($13, [672])
	CALL $20(($43 + [88]), $17, ($43 + [192]))
	$31 = [0]
	$17 = *($24)
	if ( ($17 == 0) ){ goto $label$41 }
	
.LABEL $label$42
	$42 = *($27)
	if ( ((int_32)$42 == (int_32)$17) ){ goto $label$269 }
	
.LOOP $label$270:
	$42 = ($42 + [-24])
	$18 = *($42)
	*($42) = [0]
	if ( ($18 == 0) ){ goto $label$271 }
	CALL $60($18)
	
.LABEL $label$271
	if ( ((int_32)$17 != (int_32)$42) ){ goto $label$270 }
	$42 = *($24)
	goto $label$268 
	
.LABEL $label$269
	$42 = $17
	
.LABEL $label$268
	*($27) = $17
	CALL $60($42)
	
.LABEL $label$41
	if ( $31 ){ goto $label$37 }
	$42 = *($2)
	$12 = ($12 + [1])
	$18 = ($12 & [255])
	if ( ($18 <= ((int_32)(*($23) - $42) / (int_32)[24])) ){ goto $label$39 }
	
.LABEL $label$38
	*(($43 + [120])) = [0]
	*($43 + [104]) = (int_64)-1
	$38 = *($0)
	*($43 + [88]) = $38
	*($43 + [96]) = $20
	*($43 + [112]) = (int_64)0
	$42 = [0]
	$18 = CALL db_lowerbound_i64($38, $20, (int_64)-6030912129794572288, (int_64)0)
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$272 }
	$42 = CALL $17(($43 + [88]), $18)
	
.LABEL $label$272
	$18 = ((int_32)$42 != (int_32)[0])
	CALL eosio_assert($18, [720])
	CALL eosio_assert($18, [672])
	CALL eosio_assert(((int_32)*($42 + [72]) == (int_32)($43 + [88])), [752])
	CALL eosio_assert(((int_64)*($43 + [88]) == (int_64)CALL $fimport$2()), [800])
	$38 = *($42)
	*(( ($18 = ($42 + [40])) ? ($17 = ($42 + [56])) : *($43 + [151]) )) = (int_64)0
	CALL eosio_assert([1], [864])
	*($43 + [80]) = (($43 + [192]) + [72])
	*($43 + [76]) = ($43 + [192])
	*($43 + [72]) = ($43 + [192])
	*($43 + [16]) = ($43 + [72])
	*($43 + [36]) = ($42 + [8])
	*($43 + [32]) = $42
	*($43 + [40]) = ($42 + [24])
	*($43 + [44]) = $18
	*($43 + [48]) = $17
	CALL $21(($43 + [32]), ($43 + [16]))
	CALL db_update_i64(*($42 + [76]), (int_64)0, ($43 + [192]), [72])
	$42 = ($43 + [104])
	if ( (uint_64)($38 <= *($42)) ){ goto $label$273 }
	*($42) = ( (int_64)-2 ? ((int_64)$38 + (int_64)1) : ((uint_64)$38 > (uint_64)(int_64)-3) )
	
.LABEL $label$273
	CALL eosio_assert($22, [672])
	CALL $22(($43 + [152]), $21)
	$42 = CALL db_lowerbound_i64(*($43 + [152]), *((($43 + [152]) + [8])), (int_64)-5002514023590133760, (int_64)0)
	if ( ((int_32)$42 < (int_32)[0]) ){ goto $label$274 }
	$42 = CALL $16(($43 + [152]), $42)
	if ( (*($42 + [33]) == 0) ){ goto $label$274 }
	CALL eosio_assert([1], [928])
	CALL eosio_assert([1], [976])
	$18 = CALL db_next_i64(*($42 + [52]), ($43 + [192]))
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$275 }
	CALL $16(($43 + [152]), $18)
	
.LABEL $label$275
	CALL $23(($43 + [152]), $42)
	
.LABEL $label$274
	$17 = *($43 + [112])
	if ( ($17 == 0) ){ goto $label$37 }
	$2 = ($43 + [116])
	$42 = *($2)
	if ( ((int_32)$42 == (int_32)$17) ){ goto $label$277 }
	
.LOOP $label$278:
	$42 = ($42 + [-24])
	$18 = *($42)
	*($42) = [0]
	if ( ($18 == 0) ){ goto $label$279 }
	CALL $60($18)
	
.LABEL $label$279
	if ( ((int_32)$17 != (int_32)$42) ){ goto $label$278 }
	$42 = *(($43 + [112]))
	goto $label$276 
	
.LABEL $label$277
	$42 = $17
	
.LABEL $label$276
	*($2) = $17
	CALL $60($42)
	
.LABEL $label$37
	$2 = *($43 + [176])
	if ( ($2 == 0) ){ goto $label$280 }
	$0 = ($43 + [180])
	$42 = *($0)
	if ( ((int_32)$42 == (int_32)$2) ){ goto $label$282 }
	
.LOOP $label$283:
	$42 = ($42 + [-24])
	$18 = *($42)
	*($42) = [0]
	if ( ($18 == 0) ){ goto $label$284 }
	$17 = *($18 + [36])
	if ( ($17 == 0) ){ goto $label$285 }
	*(($18 + [40])) = $17
	CALL $60($17)
	
.LABEL $label$285
	CALL $60($18)
	
.LABEL $label$284
	if ( ((int_32)$2 != (int_32)$42) ){ goto $label$283 }
	$42 = *(($43 + [176]))
	goto $label$281 
	
.LABEL $label$282
	$42 = $2
	
.LABEL $label$281
	*($0) = $2
	CALL $60($42)
	
.LABEL $label$280
	*([0] + [4]) = ($43 + [288])
	return (unreachable)
	
.LABEL $label$36
	CALL $61(($43 + [272]))
	
.LABEL $label$35
	CALL $61(($43 + [272]))
	
.LABEL $label$34
	CALL $61(($43 + [272]))
	
.LABEL $label$33
	CALL $61(($43 + [272]))
	
.LABEL $label$32
	CALL $61(($43 + [272]))
	
.LABEL $label$31
	CALL $61(($43 + [272]))
	
.LABEL $label$30
	CALL $61($43)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*(($6 + [24])) = [0]
	*($6 + [8]) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [56]) = ($1 + $3)
	*($6 + [48]) = $1
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [160])
	CALL memcpy(($6 + [8]), $1, [8])
	*($6 + [52]) = ($1 + [8])
	$7 = (($6 + [8]) + [8])
	CALL $14(($6 + [48]), $7)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = [0]
	*($6 + [40]) = [0]
	$4 = *($6 + [8])
	*($6 + [32]) = (int_64)0
	$3 = (*(($6 + [20])) - *($7))
	$7 = ((int_32)$3 / (int_32)[24])
	if ( ($3 == 0) ){ goto $label$7 }
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$6 }
	$1 = CALL $59($3)
	*((($6 + [32]) + [8])) = ($1 + ((int_32)$7 * (int_32)[24]))
	*($6 + [32]) = $1
	*($6 + [36]) = $1
	$7 = *((($6 + [8]) + [8]))
	$3 = (*(($6 + [20])) - $7)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($1, $7, $3)
	$1 = (*($6 + [36]) + ((int_32)((uint_32)$3 / (uint_32)[24]) * (int_32)[24]))
	*($6 + [36]) = $1
	
.LABEL $label$7
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$8 }
	$5 = *((*($3) + $5))
	
.LABEL $label$8
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = [0]
	$1 = ($1 - *($6 + [32]))
	$2 = ((int_32)$1 / (int_32)[24])
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((uint_32)$2 >= (uint_32)[178956971]) ){ goto $label$5 }
	$1 = CALL $59($1)
	*(($6 + [56])) = ($1 + ((int_32)$2 * (int_32)[24]))
	*($6 + [48]) = $1
	*($6 + [52]) = $1
	$7 = *($6 + [32])
	$2 = (*($6 + [36]) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $7, $2)
	*($6 + [52]) = ($1 + ((int_32)((uint_32)$2 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$9
	CALL void $3((int_32 $4), (int_64 ($6 + [48])), (int_32 $5))
	$1 = *($6 + [48])
	if ( ($1 == 0) ){ goto $label$10 }
	*($6 + [52]) = $1
	CALL $60($1)
	
.LABEL $label$10
	$1 = *($6 + [32])
	if ( ($1 == 0) ){ goto $label$11 }
	*($6 + [36]) = $1
	CALL $60($1)
	
.LABEL $label$11
	$1 = *(($6 + [16]))
	if ( ($1 == 0) ){ goto $label$12 }
	*(($6 + [20])) = $1
	CALL $60($1)
	
.LABEL $label$12
	*([0] + [4]) = ($6 + [64])
	return [1]
	
.LABEL $label$6
	CALL $64(($6 + [32]))
	
.LABEL $label$5
	CALL $64(($6 + [48]))
	(unreachable)
	return (unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [160])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [160])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [160])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($0, *($2 + [4]), [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $1) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $59(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $64($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $60($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $60($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1216])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1216])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $35 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [192])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [256])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [192])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [256])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [192])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [256])
	*(($2 = ($0 + [64]))) = (int_64)1398362884
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [192])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [256])
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1216])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1216])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1216])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $34(*($1), ($0 + [32]))
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $59($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $64($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $60($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1216])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1216])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1216])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10212])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10020]
	$1 = (((int_32)$2 * (int_32)[12]) + [10020])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $59 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10316])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $61 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $64 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $51($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $62($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $59($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $62($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $60($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $61($7)
	return (unreachable)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [192])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [256])
	*(($0 + [44])) = [0]
	*($0 + [36 align=4]) = (int_64)0
	*($0 + [48]) = $1
	*($6 + [8]) = *($2 + [4])
	*($6 + [20]) = ($0 + [8])
	*($6 + [16]) = $0
	*($6 + [24]) = ($0 + [24])
	*($6 + [28]) = ($0 + [28])
	*($6 + [32]) = ($0 + [32])
	*($6 + [36]) = ($0 + [33])
	*($6 + [40]) = ($0 + [36])
	CALL $40(($6 + [16]), ($6 + [8]))
	*($0 + [52]) = *(*($2 + [8]))
	*([0] + [4]) = ($6 + [48])
	return $0
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	$6 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [752])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [800])
	$4 = *(($2 + [4]))
	$3 = *($1)
	if ( (*(*($2)) == 0) ){ goto $label$2 }
	*($1 + [40]) = *($4)
	*(($1 + [48])) = *(($4 + [8]))
	$4 = ($1 + [56])
	$5 = ($1 + [40])
	goto $label$1 
	
.LABEL $label$2
	*($1 + [56]) = *($4)
	*(($1 + [64])) = *(($4 + [8]))
	$5 = ($1 + [40])
	$4 = ($1 + [56])
	
.LABEL $label$1
	CALL eosio_assert([1], [864])
	$7 = $7
	$2 = ($7 + [-80])
	*([0] + [4]) = $2
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($7 + [-8])
	*($6 + [16]) = $6
	*($6 + [36]) = $5
	*($6 + [40]) = $4
	*($6 + [24]) = $1
	*($6 + [28]) = ($1 + [8])
	*($6 + [32]) = ($1 + [24])
	CALL $21(($6 + [24]), ($6 + [16]))
	CALL db_update_i64(*($1 + [76]), (int_64)0, $2, [72])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$3 = *($0 + [4])
	$2 = *($0)
	CALL eosio_assert([1], [192])
	$5 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [256])
	*(($1 + [16])) = (int_64)1397703940
	*($1 + [8]) = (int_64)0
	CALL eosio_assert([1], [192])
	$5 = (int_64)1380532550
	$6 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [256])
	*(($1 + [32])) = (int_64)353416332804
	*($1 + [24]) = (int_64)0
	CALL eosio_assert([1], [192])
	$5 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	
.LABEL $label$11
	CALL eosio_assert($7, [256])
	*(($1 + [48])) = (int_64)1397703940
	*($1 + [40]) = (int_64)0
	CALL eosio_assert([1], [192])
	$4 = ($1 + [40])
	$5 = (int_64)1380532550
	$6 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$7 = [0]
	
.LABEL $label$16
	CALL eosio_assert($7, [256])
	*(($7 = ($1 + [64]))) = (int_64)353416332804
	*($1 + [56]) = (int_64)0
	$6 = *($3 + [4])
	if ( (*(*($3)) == 0) ){ goto $label$22 }
	*($4) = *($6)
	*(($4 + [8])) = *(($6 + [8]))
	$7 = ($1 + [56])
	goto $label$21 
	
.LABEL $label$22
	*($1 + [56]) = *($6)
	*($7) = *(($6 + [8]))
	$7 = ($1 + [56])
	
.LABEL $label$21
	$9 = $9
	$6 = ($9 + [-80])
	*([0] + [4]) = $6
	*($8 + [4]) = $6
	*($8) = $6
	*($8 + [8]) = ($9 + [-8])
	*($8 + [16]) = $8
	*($8 + [28]) = ($1 + [8])
	*($8 + [24]) = $1
	*($8 + [32]) = ($1 + [24])
	*($8 + [36]) = $4
	*($8 + [40]) = $7
	CALL $21(($8 + [24]), ($8 + [16]))
	$5 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($2 + [8]), (int_64)-6030912129794572288, *(*($0 + [8])), $5, $6, [72])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$23 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$13 = (*([0] + [4]) - [64])
	$14 = $13
	*([0] + [4]) = $13
	$2 = *($0)
	$11 = *($0 + [4])
	$3 = *($11)
	if ( (*($3) & [1]) ){ goto $label$2 }
	$3 = ($3 + [1])
	goto $label$1 
	
.LABEL $label$2
	$3 = *($3 + [8])
	
.LABEL $label$1
	*($1) = (CASTING int_64)(int_32 CALL atoi($3))
	$11 = *($11 + [4])
	*($1 + [8]) = *($11)
	*(($1 + [16])) = *(($11 + [8]))
	$12 = CALL current_time()
	*($1 + [28]) = [0]
	*($1 + [33]) = [0]
	*($1 + [24]) = ((uint_64)$12 / (uint_64)(int_64)1000000)
	$3 = ($1 + [36])
	$7 = ($1 + [33])
	$6 = ($1 + [28])
	$5 = ($1 + [24])
	$4 = ($1 + [8])
	$9 = *($1 + [36])
	$8 = *(($1 + [40]))
	$10 = ($8 - $9)
	$12 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	$11 = [34]
	
.LOOP $label$3:
	$11 = ($11 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$4 }
	$11 = (($10 & [-8]) + $11)
	
.LABEL $label$4
	if ( ($11 <= [513]) ){ goto $label$6 }
	$13 = CALL malloc($11)
	goto $label$5 
	
.LABEL $label$6
	$13 = ($13 - (($11 + [15]) & [-16]))
	*([0] + [4]) = $13
	
.LABEL $label$5
	*($14 + [12]) = $13
	*($14 + [8]) = $13
	*($14 + [16]) = ($13 + $11)
	*($14 + [24]) = ($14 + [8])
	*($14 + [36]) = $4
	*($14 + [32]) = $1
	*($14 + [40]) = $5
	*($14 + [44]) = $6
	*($14 + [48]) = ($1 + [32])
	*($14 + [52]) = $7
	*($14 + [56]) = $3
	CALL $28(($14 + [32]), ($14 + [24]))
	$12 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-5002514023590133760, *(*($0 + [8])), $12, $13, $11)
	if ( ($11 <= [513]) ){ goto $label$7 }
	CALL free($13)
	
.LABEL $label$7
	if ( (uint_64)($12 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($14 + [64])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $56([1828], $0)
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $57($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10224])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $57 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10310]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10312])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10310]) = [1]
	$7 = ($7 << [16])
	*([0] + [10312]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10312])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10312]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10310]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10310]) = [1]
	$3 = ($3 << [16])
	*([0] + [10312]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10312])
	
.LABEL $label$8
	*([0] + [10312]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}