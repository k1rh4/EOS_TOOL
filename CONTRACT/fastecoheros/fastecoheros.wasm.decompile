(data (i32.const 4) "\00e\00\00")
(data (i32.const 16) "invalid symbol name\00")
(data (i32.const 48) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 112) "states with symbol already exists\00")
(data (i32.const 160) "cannot create objects in table of another contract\00")
(data (i32.const 224) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 288) "write\00")
(data (i32.const 304) "error reading iterator\00")
(data (i32.const 336) "read\00")
(data (i32.const 352) "memo has more than 256 bytes\00")
(data (i32.const 384) "states with symbol does not exist, create state before issue\00")
(data (i32.const 448) "invalid quantity\00")
(data (i32.const 480) "must issue positive quantity\00")
(data (i32.const 512) "symbol precision mismatch\00")
(data (i32.const 544) "object passed to modify is not in multi_index\00")
(data (i32.const 592) "cannot modify objects in table of another contract\00")
(data (i32.const 656) "attempt to add asset with different symbol\00")
(data (i32.const 704) "addition underflow\00")
(data (i32.const 736) "addition overflow\00")
(data (i32.const 768) "updater cannot change primary key when modifying an object\00")
(data (i32.const 832) "cannot pass end iterator to modify\00")
(data (i32.const 880) "onerror\00")
(data (i32.const 896) "eosio\00")
(data (i32.const 912) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 976) "get\00")
(data (i32.const 9376) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$6 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$7 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$8 (param i32 i32)))
(import "env" "memcpy" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$11 (param i64)))
(import "env" "require_auth2" (func $fimport$12 (param i64 i64)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN5eosio8fasthero6createEyNS_5assetE" (func $5))
(export "_ZN5eosio8fasthero5issueEyNS_5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $8))
(export "_ZN5eosio8fasthero8setvalueEyNS_5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $11))
(export "apply" (func $12))
(export "malloc" (func $19))
(export "free" (func $22))
(export "memcmp" (func $29))
(table $0 4 4 anyfunc)
(elem (i32.const 0) $30 $5 $11 $8)



int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $23($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $25 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $24 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $30 ()
{
	(unreachable)
}

void .FUNC _ZN5eosio8fasthero5issueEyNS_5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [112])
	*([0] + [4]) = $12
	$11 = [0]
	$4 = *($2 + [8])
	$5 = (uint_64)$4 >> (uint_64)(int_64)8
	$10 = $5)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [16])
	$11 = *($3)
	if ( ($11 & [1]) ){ goto $label$7 }
	$11 = uint_32($11 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$11 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($11 <= [257]), [352])
	$3 = [0]
	*(($12 + [72])) = [0]
	*($12 + [56]) = (int_64)-1
	*($12 + [64]) = (int_64)0
	$10 = *($0)
	*($12 + [40]) = $10
	*($12 + [48]) = $5
	$8 = [0]
	$11 = CALL db_find_i64($10, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$8 }
	$8 = CALL $6(($12 + [40]), $11)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($12 + [40])), [48])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [384])
	CALL require_auth(*($8 + [16]))
	$6 = ($8 + [16])
	$7 = *($2)
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$11 = [0]
	$10 = $5
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$3 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$3 = [0]
	
.LABEL $label$9
	CALL eosio_assert($3, [448])
	CALL eosio_assert(((int_64)$7 > (int_64)0), [480])
	CALL eosio_assert(((int_64)$4 == (int_64)*($8 + [8])), [512])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($12 + [40])), [544])
	CALL eosio_assert(((int_64)*($12 + [40]) == (int_64)CALL $fimport$2()), [592])
	$10 = *($8 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)$10), [656])
	$9 = ((int_64)*($8) + (int_64)$7)
	*($8) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [704])
	CALL eosio_assert(((int_64)*($8) < (int_64)4611686018427387904), [736])
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$10) == (int_64)(uint_64)*($8 + [8]) >> (uint_64)(int_64)8)), [768])
	CALL eosio_assert([1], [288])
	CALL memcpy($12, $8, [8])
	CALL eosio_assert([1], [288])
	CALL memcpy(($12 | [8]), ($8 + [8]), [8])
	CALL eosio_assert([1], [288])
	CALL memcpy(($12 + [16]), $6, [8])
	CALL db_update_i64(*($8 + [28]), (int_64)0, $12, [24])
	if ( (uint_64)($10 <= *((($12 + [40]) + [16]))) ){ goto $label$14 }
	*(($12 + [56])) = ((int_64)$10 + (int_64)1)
	
.LABEL $label$14
	$11 = [0]
	*(($12 + [32])) = [0]
	*($12 + [16]) = (int_64)-1
	*($12 + [24]) = (int_64)0
	$10 = *($0)
	*($12) = $10
	*($12 + [8]) = $1
	$8 = CALL db_find_i64($10, $1, (int_64)3607749779137757184, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$18 }
	$11 = CALL $9($12, $8)
	CALL eosio_assert(((int_32)*($11 + [16]) == (int_32)$12), [48])
	CALL eosio_assert([1], [832])
	CALL eosio_assert(((int_32)*($11 + [16]) == (int_32)$12), [544])
	CALL eosio_assert(((int_64)*($12) == (int_64)CALL $fimport$2()), [592])
	$10 = *($11 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)$10), [656])
	$5 = ((int_64)*($11) + (int_64)$7)
	*($11) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [704])
	CALL eosio_assert(((int_64)*($11) < (int_64)4611686018427387904), [736])
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$10) == (int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8)), [768])
	CALL eosio_assert([1], [288])
	CALL memcpy(($12 + [80]), $11, [8])
	CALL eosio_assert([1], [288])
	CALL memcpy((($12 + [80]) | [8]), ($11 + [8]), [8])
	CALL db_update_i64(*($11 + [20]), (int_64)0, ($12 + [80]), [16])
	$11 = ($12 + [16])
	if ( (uint_64)($10 <= *($11)) ){ goto $label$17 }
	*($11) = ((int_64)$10 + (int_64)1)
	$3 = *($12 + [24])
	if ( $3 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$5 = *($0)
	CALL eosio_assert(((int_64)*($12) == (int_64)CALL $fimport$2()), [160])
	*(($8 = CALL $23([32])) + [8]) = (int_64)1397703940
	*($8) = (int_64)0
	CALL eosio_assert([1], [224])
	$0 = ($8 + [8])
	$10 = (int_64)5459781
	
.LOOP $label$20:
	$3 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$21 }
	
.LOOP $label$22:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$22 }
	
.LABEL $label$21
	$3 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	CALL eosio_assert($3, [16])
	*($8 + [16]) = $12
	*(($11 = ($8 + [8]))) = *(($2 + [8]))
	*($8) = *($2)
	CALL eosio_assert([1], [288])
	CALL memcpy(($12 + [80]), $8, [8])
	CALL eosio_assert([1], [288])
	CALL memcpy((($12 + [80]) | [8]), $0, [8])
	$10 = (uint_64)*($11) >> (uint_64)(int_64)8
	$3 = CALL db_store_i64(*(($12 + [8])), (int_64)3607749779137757184, $5, $10), ($12 + [80]), [16]
	*($8 + [20]) = $3)
	$2 = ($12 + [16])
	if ( (uint_64)($10 <= *($2)) ){ goto $label$23 }
	*($2) = ((int_64)$10 + (int_64)1)
	
.LABEL $label$23
	*($12 + [104]) = $8
	$10 = (uint_64)*($11) >> (uint_64)(int_64)8
	*($12 + [80]) = $10)
	*($12 + [100]) = $3
	$2 = ($12 + [28])
	$11 = *($2)
	if ( ((uint_32)$11 >= (uint_32)*(($12 + [32]))) ){ goto $label$25 }
	*($11 + [8]) = $10
	*($11 + [16]) = $3
	*($12 + [104]) = [0]
	*($11) = $8
	*($2) = ($11 + [24])
	goto $label$24 
	
.LABEL $label$25
	CALL $10(($12 + [24]), ($12 + [104]), ($12 + [80]), ($12 + [100]))
	
.LABEL $label$24
	$11 = *($12 + [104])
	*($12 + [104]) = [0]
	if ( ($11 == 0) ){ goto $label$17 }
	CALL $24($11)
	
.LABEL $label$17
	$3 = *($12 + [24])
	if ( ($3 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$2 = ($12 + [28])
	$11 = *($2)
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$27 }
	
.LOOP $label$28:
	$11 = ($11 + [-24])
	$8 = *($11)
	*($11) = [0]
	if ( ($8 == 0) ){ goto $label$29 }
	CALL $24($8)
	
.LABEL $label$29
	if ( ((int_32)$3 != (int_32)$11) ){ goto $label$28 }
	$11 = *(($12 + [24]))
	goto $label$26 
	
.LABEL $label$27
	$11 = $3
	
.LABEL $label$26
	*($2) = $3
	CALL $24($11)
	
.LABEL $label$15
	$3 = *($12 + [64])
	if ( ($3 == 0) ){ goto $label$30 }
	$2 = ($12 + [68])
	$11 = *($2)
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$32 }
	
.LOOP $label$33:
	$11 = ($11 + [-24])
	$8 = *($11)
	*($11) = [0]
	if ( ($8 == 0) ){ goto $label$34 }
	CALL $24($8)
	
.LABEL $label$34
	if ( ((int_32)$3 != (int_32)$11) ){ goto $label$33 }
	$11 = *(($12 + [64]))
	goto $label$31 
	
.LABEL $label$32
	$11 = $3
	
.LABEL $label$31
	*($2) = $3
	CALL $24($11)
	
.LABEL $label$30
	*([0] + [4]) = ($12 + [112])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	$9 = $10
	*([0] + [4]) = $10
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$5 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($7 >> [31]) ^ (int_32)[1]), [304])
	if ( ((uint_32)$7 <= (uint_32)[512]) ){ goto $label$6 }
	$3 = CALL malloc($7)
	CALL db_get_i64($1, $3, $7)
	CALL free($3)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($10 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $3
	CALL db_get_i64($1, $3, $7)
	
.LABEL $label$5
	$2 = ($0 + [24])
	*(($5 = CALL $23([32])) + [8]) = (int_64)1397703940
	*($5) = (int_64)0
	CALL eosio_assert([1], [224])
	$10 = ($5 + [8])
	$8 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$4 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [16])
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [336])
	CALL memcpy($5, $3, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [336])
	CALL memcpy($10, ($3 + [8]), [8])
	*($5 + [20]) = $1
	*($9 + [24]) = $5
	$8 = (uint_64)*(($5 + [8])) >> (uint_64)(int_64)8
	*($9 + [16]) = $8)
	$7 = *($5 + [20])
	*($9 + [12]) = $7
	$1 = ($0 + [28])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($6 + [8]) = $8
	*($6 + [16]) = $7
	*($9 + [24]) = [0]
	*($6) = $5
	*($1) = ($6 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $10($2, ($9 + [24]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$12
	$6 = *($9 + [24])
	*($9 + [24]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $24($6)
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [32])
	return $5
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	$9 = $10
	*([0] + [4]) = $10
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$5 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($7 >> [31]) ^ (int_32)[1]), [304])
	if ( ((uint_32)$7 <= (uint_32)[512]) ){ goto $label$6 }
	$3 = CALL malloc($7)
	CALL db_get_i64($1, $3, $7)
	CALL free($3)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($10 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $3
	CALL db_get_i64($1, $3, $7)
	
.LABEL $label$5
	$2 = ($0 + [24])
	*(($5 = CALL $23([40])) + [8]) = (int_64)1397703940
	*($5) = (int_64)0
	CALL eosio_assert([1], [224])
	$10 = ($5 + [8])
	$8 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$4 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [16])
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [336])
	CALL memcpy($5, $3, [8])
	$6 = ($7 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [336])
	CALL memcpy($10, ($3 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [336])
	CALL memcpy(($5 + [16]), ($3 + [16]), [8])
	*($5 + [28]) = $1
	*($9 + [24]) = $5
	$8 = (uint_64)*(($5 + [8])) >> (uint_64)(int_64)8
	*($9 + [16]) = $8)
	$7 = *($5 + [28])
	*($9 + [12]) = $7
	$1 = ($0 + [28])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($6 + [8]) = $8
	*($6 + [16]) = $7
	*($9 + [24]) = [0]
	*($6) = $5
	*($1) = ($6 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $7($2, ($9 + [24]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$12
	$6 = *($9 + [24])
	*($9 + [24]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $24($6)
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [32])
	return $5
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $23(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $27($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $24($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $24($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN5eosio8fasthero6createEyNS_5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	CALL require_auth(*($0))
	$7 = [0]
	$3 = *($2 + [8])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8
	$6 = $4)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$2 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [16])
	$7 = [0]
	*(($8 + [40])) = [0]
	*($8 + [24]) = (int_64)-1
	*($8 + [32]) = (int_64)0
	$6 = *($0)
	*($8 + [8]) = $6
	*($8 + [16]) = $4
	$2 = [1]
	$5 = CALL db_find_i64($6, $4, (int_64)-4157508551318700032, $4)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(CALL $6(($8 + [8]), $5) + [24]) == (int_32)($8 + [8])), [48])
	$2 = [0]
	
.LABEL $label$6
	CALL eosio_assert($2, [112])
	$4 = *($0)
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)CALL $fimport$2()), [160])
	*(($2 = CALL $23([40])) + [8]) = (int_64)1397703940
	*($2) = (int_64)0
	CALL eosio_assert([1], [224])
	$5 = ($2 + [8])
	$6 = (int_64)5459781
	
.LOOP $label$8:
	$0 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$0 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($0, [16])
	*($2 + [24]) = ($8 + [8])
	*($2 + [16]) = $1
	*(($7 = ($2 + [8]))) = $3
	CALL eosio_assert([1], [288])
	CALL memcpy(($8 + [64]), $2, [8])
	CALL eosio_assert([1], [288])
	CALL memcpy((($8 + [64]) | [8]), $5, [8])
	CALL eosio_assert([1], [288])
	CALL memcpy((($8 + [64]) + [16]), ($2 + [16]), [8])
	$6 = (uint_64)*($7) >> (uint_64)(int_64)8
	$0 = CALL db_store_i64(*((($8 + [8]) + [8])), (int_64)-4157508551318700032, $4, $6), ($8 + [64]), [24]
	*($2 + [28]) = $0)
	$5 = (($8 + [8]) + [16])
	if ( (uint_64)($6 <= *($5)) ){ goto $label$11 }
	*($5) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$11
	*($8 + [56]) = $2
	$6 = (uint_64)*($7) >> (uint_64)(int_64)8
	*($8 + [64]) = $6)
	*($8 + [52]) = $0
	$5 = ($8 + [36])
	$7 = *($5)
	if ( ((uint_32)$7 >= (uint_32)*(($8 + [40]))) ){ goto $label$13 }
	*($7 + [8]) = $6
	*($7 + [16]) = $0
	*($8 + [56]) = [0]
	*($7) = $2
	*($5) = ($7 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $7(($8 + [32]), ($8 + [56]), ($8 + [64]), ($8 + [52]))
	
.LABEL $label$12
	$7 = *($8 + [56])
	*($8 + [56]) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	CALL $24($7)
	
.LABEL $label$14
	$0 = *($8 + [32])
	if ( ($0 == 0) ){ goto $label$15 }
	$5 = ($8 + [36])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$17 }
	
.LOOP $label$18:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$19 }
	CALL $24($2)
	
.LABEL $label$19
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$18 }
	$7 = *(($8 + [32]))
	goto $label$16 
	
.LABEL $label$17
	$7 = $0
	
.LABEL $label$16
	*($5) = $0
	CALL $24($7)
	
.LABEL $label$15
	*([0] + [4]) = ($8 + [96])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [80])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1397703940
	*($5 + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [224])
	$3 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [16])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [64]) = $0
	$1 = ($0 + $2)
	*($5 + [72]) = $1
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [336])
	CALL memcpy(($5 + [8]), $0, [8])
	$4 = ($0 + [8])
	CALL eosio_assert(((uint_32)($1 - $4) > (uint_32)[7]), [336])
	CALL memcpy((($5 + [8]) + [8]), $4, [8])
	$4 = ($0 + [16])
	CALL eosio_assert(((uint_32)($1 - $4) > (uint_32)[7]), [336])
	CALL memcpy((($5 + [8]) + [16]), $4, [8])
	*($5 + [68]) = ($0 + [24])
	CALL $15(($5 + [64]), (($5 + [8]) + [24]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $16(($5 + [64]), ($5 + [8]))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $24(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [80])
	return [1]
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $17($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $26($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $23($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $26($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $24($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $25($7)
	return (unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*((($4 + [32]) + [12])) = *(($1 + [20]))
	*(($3 = (($4 + [32]) + [8]))) = *(($1 + [16]))
	*($4 + [32]) = *($1 + [8])
	*($4 + [36]) = *(($1 + [12]))
	$2 = *($1)
	CALL $28(($4 + [16]), ($1 + [24]))
	*((($4 + [48]) + [8])) = *($3)
	*($4 + [48]) = *($4 + [32])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*(*($0)) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($3 = (($4 + [80]) + [8]))) = *((($4 + [48]) + [8]))
	*($4 + [80]) = *($4 + [48])
	CALL $28(($4 + [64]), ($4 + [16]))
	*(($4 + [8])) = *($3)
	*($4) = *($4 + [80])
	CALL void $0((int_32 $2), (int_64 $4), (int_32 ($4 + [64])), (int_32 $1))
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $24(*($4 + [72]))
	
.LABEL $label$2
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $24(*($4 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [96])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [976])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $18($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [336])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $23(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $27($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $24($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $24($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN5eosio8fasthero8setvalueEyNS_5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [112])
	*([0] + [4]) = $11
	$10 = [0]
	$4 = *($2 + [8])
	$5 = (uint_64)$4 >> (uint_64)(int_64)8
	$9 = $5)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [16])
	$10 = *($3)
	if ( ($10 & [1]) ){ goto $label$7 }
	$10 = uint_32($10 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$10 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($10 <= [257]), [352])
	$3 = [0]
	*(($11 + [72])) = [0]
	*($11 + [56]) = (int_64)-1
	*($11 + [64]) = (int_64)0
	$9 = *($0)
	*($11 + [40]) = $9
	*($11 + [48]) = $5
	$8 = [0]
	$10 = CALL db_find_i64($9, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$8 }
	$8 = CALL $6(($11 + [40]), $10)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($11 + [40])), [48])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [384])
	CALL require_auth(*($8 + [16]))
	$6 = ($8 + [16])
	$7 = *($2)
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$10 = [0]
	$9 = $5
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$3 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$3 = [0]
	
.LABEL $label$9
	CALL eosio_assert($3, [448])
	CALL eosio_assert(((int_64)$7 > (int_64)0), [480])
	CALL eosio_assert(((int_64)$4 == (int_64)*($8 + [8])), [512])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($11 + [40])), [544])
	CALL eosio_assert(((int_64)*($11 + [40]) == (int_64)CALL $fimport$2()), [592])
	$9 = *($8 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)$9), [656])
	$4 = ((int_64)*($8) + (int_64)$7)
	*($8) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [704])
	CALL eosio_assert(((int_64)*($8) < (int_64)4611686018427387904), [736])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$9) == (int_64)(uint_64)*($8 + [8]) >> (uint_64)(int_64)8)), [768])
	CALL eosio_assert([1], [288])
	CALL memcpy($11, $8, [8])
	CALL eosio_assert([1], [288])
	CALL memcpy(($11 | [8]), ($8 + [8]), [8])
	CALL eosio_assert([1], [288])
	CALL memcpy(($11 + [16]), $6, [8])
	CALL db_update_i64(*($8 + [28]), (int_64)0, $11, [24])
	if ( (uint_64)($9 <= *((($11 + [40]) + [16]))) ){ goto $label$14 }
	*(($11 + [56])) = ((int_64)$9 + (int_64)1)
	
.LABEL $label$14
	$10 = [0]
	*(($11 + [32])) = [0]
	*($11 + [16]) = (int_64)-1
	*($11 + [24]) = (int_64)0
	$9 = *($0)
	*($11) = $9
	*($11 + [8]) = $1
	$8 = CALL db_find_i64($9, $1, (int_64)3607749779137757184, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$18 }
	$10 = CALL $9($11, $8)
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)$11), [48])
	CALL eosio_assert([1], [832])
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)$11), [544])
	CALL eosio_assert(((int_64)*($11) == (int_64)CALL $fimport$2()), [592])
	$9 = *($10 + [8])
	*($10 + [8]) = *(($2 + [8]))
	*($10) = *($2)
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$9) == (int_64)(uint_64)*($10 + [8]) >> (uint_64)(int_64)8)), [768])
	CALL eosio_assert([1], [288])
	CALL memcpy(($11 + [80]), $10, [8])
	CALL eosio_assert([1], [288])
	CALL memcpy((($11 + [80]) | [8]), ($10 + [8]), [8])
	CALL db_update_i64(*($10 + [20]), (int_64)0, ($11 + [80]), [16])
	$10 = ($11 + [16])
	if ( (uint_64)($9 <= *($10)) ){ goto $label$17 }
	*($10) = ((int_64)$9 + (int_64)1)
	$2 = *($11 + [24])
	if ( $2 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$5 = *($0)
	CALL eosio_assert(((int_64)*($11) == (int_64)CALL $fimport$2()), [160])
	*(($8 = CALL $23([32])) + [8]) = (int_64)1397703940
	*($8) = (int_64)0
	CALL eosio_assert([1], [224])
	$0 = ($8 + [8])
	$9 = (int_64)5459781
	
.LOOP $label$20:
	$3 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$21 }
	
.LOOP $label$22:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$22 }
	
.LABEL $label$21
	$3 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	CALL eosio_assert($3, [16])
	*($8 + [16]) = $11
	*(($10 = ($8 + [8]))) = *(($2 + [8]))
	*($8) = *($2)
	CALL eosio_assert([1], [288])
	CALL memcpy(($11 + [80]), $8, [8])
	CALL eosio_assert([1], [288])
	CALL memcpy((($11 + [80]) | [8]), $0, [8])
	$9 = (uint_64)*($10) >> (uint_64)(int_64)8
	$2 = CALL db_store_i64(*(($11 + [8])), (int_64)3607749779137757184, $5, $9), ($11 + [80]), [16]
	*($8 + [20]) = $2)
	$3 = ($11 + [16])
	if ( (uint_64)($9 <= *($3)) ){ goto $label$23 }
	*($3) = ((int_64)$9 + (int_64)1)
	
.LABEL $label$23
	*($11 + [104]) = $8
	$9 = (uint_64)*($10) >> (uint_64)(int_64)8
	*($11 + [80]) = $9)
	*($11 + [100]) = $2
	$3 = ($11 + [28])
	$10 = *($3)
	if ( ((uint_32)$10 >= (uint_32)*(($11 + [32]))) ){ goto $label$25 }
	*($10 + [8]) = $9
	*($10 + [16]) = $2
	*($11 + [104]) = [0]
	*($10) = $8
	*($3) = ($10 + [24])
	goto $label$24 
	
.LABEL $label$25
	CALL $10(($11 + [24]), ($11 + [104]), ($11 + [80]), ($11 + [100]))
	
.LABEL $label$24
	$10 = *($11 + [104])
	*($11 + [104]) = [0]
	if ( ($10 == 0) ){ goto $label$17 }
	CALL $24($10)
	
.LABEL $label$17
	$2 = *($11 + [24])
	if ( ($2 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$3 = ($11 + [28])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$2) ){ goto $label$27 }
	
.LOOP $label$28:
	$10 = ($10 + [-24])
	$8 = *($10)
	*($10) = [0]
	if ( ($8 == 0) ){ goto $label$29 }
	CALL $24($8)
	
.LABEL $label$29
	if ( ((int_32)$2 != (int_32)$10) ){ goto $label$28 }
	$10 = *(($11 + [24]))
	goto $label$26 
	
.LABEL $label$27
	$10 = $2
	
.LABEL $label$26
	*($3) = $2
	CALL $24($10)
	
.LABEL $label$15
	$2 = *($11 + [64])
	if ( ($2 == 0) ){ goto $label$30 }
	$3 = ($11 + [68])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$2) ){ goto $label$32 }
	
.LOOP $label$33:
	$10 = ($10 + [-24])
	$8 = *($10)
	*($10) = [0]
	if ( ($8 == 0) ){ goto $label$34 }
	CALL $24($8)
	
.LABEL $label$34
	if ( ((int_32)$2 != (int_32)$10) ){ goto $label$33 }
	$10 = *(($11 + [64]))
	goto $label$31 
	
.LABEL $label$32
	$10 = $2
	
.LABEL $label$31
	*($3) = $2
	CALL $24($10)
	
.LABEL $label$30
	*([0] + [4]) = ($11 + [112])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [880]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [896]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [912])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [880]
	$7 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*($9 + [56]) = $0
	if ( ((int_64)$2 == (int_64)-4416989690754760704) ){ goto $label$23 }
	if ( ((int_64)$2 == (int_64)8516769789752901632) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$14 }
	*($9 + [52]) = [0]
	*($9 + [48]) = [1]
	*($9 + [8 align=4]) = *($9 + [48])
	CALL $13(($9 + [56]), ($9 + [8]))
	goto $label$14 
	
.LABEL $label$23
	*($9 + [36]) = [0]
	*($9 + [32]) = [2]
	*($9 + [24 align=4]) = *($9 + [32])
	CALL $14(($9 + [56]), ($9 + [24]))
	goto $label$14 
	
.LABEL $label$22
	*($9 + [44]) = [0]
	*($9 + [40]) = [3]
	*($9 + [16 align=4]) = *($9 + [40])
	CALL $14(($9 + [56]), ($9 + [16]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [64])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1397703940
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [224])
	$6 = (int_64)5459781
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [16])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [336])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [336])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [336])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

int_32 .FUNC $21 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9462]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9464])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9462]) = [1]
	$7 = ($7 << [16])
	*([0] + [9464]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9464])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9464]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9462]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9462]) = [1]
	$3 = ($3 << [16])
	*([0] + [9464]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9464])
	
.LABEL $label$8
	*([0] + [9464]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $21($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9376])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $23 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9468])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9364])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9172]
	$1 = (((int_32)$2 * (int_32)[12]) + [9172])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $23($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $27($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $24($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $20([980], $0)
}

void .FUNC $27 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $23(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $24($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}